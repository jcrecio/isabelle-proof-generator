{"file_name": "/home/qj213/afp-2021-10-22/thys/Twelvefold_Way/Preliminaries.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Twelvefold_Way", "problem_names": ["lemma subset_with_given_card_exists:\n  assumes \"n \\<le> card A\"\n  shows \"\\<exists>B \\<subseteq> A. card B = n\"", "lemmas univ_commute' = univ_commute[unfolded Equiv_Relations.proj_def]", "lemma univ_predicate_impl_forall:\n  assumes \"equiv A R\"\n  assumes \"P respects R\"\n  assumes \"X \\<in> A // R\"\n  assumes \"univ P X\"\n  shows \"\\<forall>x\\<in>X. P x\"", "lemma univ_preserves_predicate:\n  assumes \"equiv A r\"\n  assumes \"P respects r\"\n  shows \"{x \\<in> A. P x} // r = {X \\<in> A // r. univ P X}\"", "lemma Union_quotient_restricted:\n  assumes \"equiv A r\"\n  assumes \"P respects r\"\n  shows \"\\<Union>({x \\<in> A. P x} // r) = {x \\<in> A. P x}\"", "lemma finite_equiv_implies_finite_carrier:\n  assumes \"equiv A R\"\n  assumes \"finite (A // R)\"\n  assumes \"\\<forall>X \\<in> A // R. finite X\"\n  shows \"finite A\"", "lemma finite_quotient_iff:\n  assumes \"equiv A R\"\n  shows \"finite A \\<longleftrightarrow> (finite (A // R) \\<and> (\\<forall>X \\<in> A // R. finite X))\"", "lemma card_equiv_class_restricted:\n  assumes \"finite {x \\<in> A. P x}\"\n  assumes \"equiv A R\"\n  assumes \"P respects R\"\n  shows \"card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\"", "lemma card_equiv_class_restricted_same_size:\n  assumes \"equiv A R\"\n  assumes \"P respects R\"\n  assumes \"\\<And>F. F \\<in> {x \\<in> A. P x} // R \\<Longrightarrow> card F = k\"\n  shows \"card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\"", "lemma card_equiv_class:\n  assumes \"finite A\"\n  assumes \"equiv A R\"\n  shows \"card A = sum card (A // R)\"", "lemma card_equiv_class_same_size:\n  assumes \"equiv A R\"\n  assumes \"\\<And>F. F \\<in> A // R \\<Longrightarrow> card F = k\"\n  shows \"card A = k * card (A // R)\"", "lemma finite_same_card_bij_on_ext_funcset:\n  assumes \"finite A\" \"finite B\" \"card A = card B\"\n  shows \"\\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B\"", "lemma card_extensional_funcset:\n  assumes \"finite A\"\n  shows \"card (A \\<rightarrow>\\<^sub>E B) = card B ^ card A\"", "lemma bij_betw_implies_inj_on_and_card_eq:\n  assumes \"finite B\"\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\"\n  shows \"bij_betw f A B \\<longleftrightarrow> inj_on f A \\<and> card A = card B\"", "lemma bij_betw_implies_surj_on_and_card_eq:\n  assumes \"finite A\"\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\"\n  shows \"bij_betw f A B \\<longleftrightarrow> f ` A = B \\<and> card A = card B\"", "lemma\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\" \"f ` A = B\"\n  assumes \"p permutes B\" \"(\\<forall>x. f' x = p (f x))\"\n  shows \"(\\<lambda>b. {x\\<in>A. f x = b}) ` B = (\\<lambda>b. {x\\<in>A. f' x = b}) ` B\"", "lemma lists_length_eq_Suc_eq_image_Cons:\n  \"{xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = (\\<lambda>(x, xs). x#xs) ` (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\"\n  (is \"?A = ?B\")", "lemma lists_length_eq_Suc_eq_empty_iff:\n  \"{xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {} \\<longleftrightarrow> A = {}\"", "lemma lists_length_eq_eq_empty_iff:\n  \"{xs. set xs \\<subseteq> A \\<and> length xs = n} = {} \\<longleftrightarrow> (A = {} \\<and> n > 0)\"", "lemma finite_lists_length_eq_iff:\n  \"finite {xs. set xs \\<subseteq> A \\<and> length xs = n} \\<longleftrightarrow> (finite A \\<or> n = 0)\"", "lemma card_lists_length_eq:\n  shows \"card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\"", "lemma bij_betw_congI:\n  assumes \"bij_betw f A A'\"\n  assumes \"\\<forall>a \\<in> A. f a = g a\"\n  shows \"bij_betw g A A'\"", "lemma disjoint_family_onI[intro]:\n  assumes \"\\<And>m n. m \\<in> S \\<Longrightarrow> n \\<in> S \\<Longrightarrow> m \\<noteq> n \\<Longrightarrow> A m \\<inter> A n = {}\"\n  shows \"disjoint_family_on A S\"", "lemma infinite_partition_on:\n  assumes \"infinite A\"\n  shows \"infinite {P. partition_on A P}\"", "lemma finitely_many_partition_on_iff:\n  \"finite {P. partition_on A P} \\<longleftrightarrow> finite A\"", "lemma mset_set_subseteq_mset_set:\n  assumes \"finite B\" \"A \\<subseteq> B\"\n  shows \"mset_set A \\<subseteq># mset_set B\"", "lemma mset_set_set_mset:\n  assumes \"M \\<subseteq># mset_set A\"\n  shows \"mset_set (set_mset M) = M\"", "lemma mset_set_set_mset':\n  assumes \"\\<forall>x. count M x \\<le> 1\"\n  shows \"mset_set (set_mset M) = M\"", "lemma card_set_mset:\n  assumes \"M \\<subseteq># mset_set A\"\n  shows \"card (set_mset M) = size M\"", "lemma card_set_mset':\n  assumes \"\\<forall>x. count M x \\<le> 1\"\n  shows \"card (set_mset M) = size M\"", "lemma count_mset_set_leq:\n  assumes \"finite A\"\n  shows \"count (mset_set A) x \\<le> 1\"", "lemma count_mset_set_leq':\n  assumes \"finite A\"\n  shows \"count (mset_set A) x \\<le> Suc 0\"", "lemma msubset_mset_set_iff:\n  assumes \"finite A\"\n  shows \"set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1) \\<longleftrightarrow> (M \\<subseteq># mset_set A)\"", "lemma image_mset_fun_upd:\n  assumes \"x \\<notin># M\"\n  shows \"image_mset (f(x := y)) M = image_mset f M\"", "lemma Partition_diag:\n  shows \"Partition n n = 1\"", "lemma card_partition_on_size1_eq_iverson:\n  assumes \"finite A\"\n  shows \"card {P. partition_on A P \\<and> card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} = iverson (card A \\<le> k)\"", "lemma card_number_partitions_with_only_parts_1:\n  \"card {N. (\\<forall>n. n\\<in># N \\<longrightarrow> n = 1) \\<and> number_partition n N \\<and> size N \\<le> x} = iverson (n \\<le> x)\""], "translations": [["", "lemma subset_with_given_card_exists:\n  assumes \"n \\<le> card A\"\n  shows \"\\<exists>B \\<subseteq> A. card B = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B\\<subseteq>A. card B = n", "using assms"], ["proof (prove)\nusing this:\n  n \\<le> card A\n\ngoal (1 subgoal):\n 1. \\<exists>B\\<subseteq>A. card B = n", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> card A \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = 0\n 2. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "case 0"], ["proof (state)\nthis:\n  0 \\<le> card A\n\ngoal (2 subgoals):\n 1. 0 \\<le> card A \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = 0\n 2. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "then"], ["proof (chain)\npicking this:\n  0 \\<le> card A", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<le> card A\n\ngoal (1 subgoal):\n 1. \\<exists>B\\<subseteq>A. card B = 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>B\\<subseteq>A. card B = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  n \\<le> card A \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = n\n  Suc n \\<le> card A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "from this"], ["proof (chain)\npicking this:\n  n \\<le> card A \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = n\n  Suc n \\<le> card A", "obtain B where \"B \\<subseteq> A\" \"card B = n\""], ["proof (prove)\nusing this:\n  n \\<le> card A \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = n\n  Suc n \\<le> card A\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<subseteq> A; card B = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B \\<subseteq> A\n  card B = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "from this \\<open>B \\<subseteq> A\\<close> \\<open>card B = n\\<close>"], ["proof (chain)\npicking this:\n  B \\<subseteq> A\n  card B = n\n  B \\<subseteq> A\n  card B = n", "have \"card B < card A\""], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  card B = n\n  B \\<subseteq> A\n  card B = n\n\ngoal (1 subgoal):\n 1. card B < card A", "using Suc.prems"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  card B = n\n  B \\<subseteq> A\n  card B = n\n  Suc n \\<le> card A\n\ngoal (1 subgoal):\n 1. card B < card A", "by linarith"], ["proof (state)\nthis:\n  card B < card A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "from \\<open>Suc n \\<le> card A\\<close> card.infinite"], ["proof (chain)\npicking this:\n  Suc n \\<le> card A\n  infinite ?A \\<Longrightarrow> card ?A = 0", "have \"finite A\""], ["proof (prove)\nusing this:\n  Suc n \\<le> card A\n  infinite ?A \\<Longrightarrow> card ?A = 0\n\ngoal (1 subgoal):\n 1. finite A", "by force"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "from this \\<open>B \\<subseteq> A\\<close> finite_subset"], ["proof (chain)\npicking this:\n  finite A\n  B \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A", "have \"finite B\""], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite B", "by blast"], ["proof (state)\nthis:\n  finite B\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "from \\<open>card B < card A\\<close> \\<open>B \\<subseteq> A\\<close>"], ["proof (chain)\npicking this:\n  card B < card A\n  B \\<subseteq> A", "obtain a where \"a \\<in> A\" \"a \\<notin> B\""], ["proof (prove)\nusing this:\n  card B < card A\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; a \\<notin> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis less_irrefl subsetI subset_antisym)"], ["proof (state)\nthis:\n  a \\<in> A\n  a \\<notin> B\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "have \"insert a B \\<subseteq> A\" \"card (insert a B) = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert a B \\<subseteq> A &&& card (insert a B) = Suc n", "using \\<open>finite B\\<close> \\<open>a \\<in> A\\<close> \\<open>a \\<notin> B\\<close> \\<open>B \\<subseteq> A\\<close> \\<open>card B = n\\<close>"], ["proof (prove)\nusing this:\n  finite B\n  a \\<in> A\n  a \\<notin> B\n  B \\<subseteq> A\n  card B = n\n\ngoal (1 subgoal):\n 1. insert a B \\<subseteq> A &&& card (insert a B) = Suc n", "by auto"], ["proof (state)\nthis:\n  insert a B \\<subseteq> A\n  card (insert a B) = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> card A \\<Longrightarrow>\n                \\<exists>B\\<subseteq>A. card B = n;\n        Suc n \\<le> card A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B\\<subseteq>A. card B = Suc n", "then"], ["proof (chain)\npicking this:\n  insert a B \\<subseteq> A\n  card (insert a B) = Suc n", "show ?case"], ["proof (prove)\nusing this:\n  insert a B \\<subseteq> A\n  card (insert a B) = Suc n\n\ngoal (1 subgoal):\n 1. \\<exists>B\\<subseteq>A. card B = Suc n", "by blast"], ["proof (state)\nthis:\n  \\<exists>B\\<subseteq>A. card B = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Additions to Equiv Relation Theory\\<close>"], ["", "lemmas univ_commute' = univ_commute[unfolded Equiv_Relations.proj_def]"], ["", "lemma univ_predicate_impl_forall:\n  assumes \"equiv A R\"\n  assumes \"P respects R\"\n  assumes \"X \\<in> A // R\"\n  assumes \"univ P X\"\n  shows \"\\<forall>x\\<in>X. P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. P x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. P x", "from assms(1,3)"], ["proof (chain)\npicking this:\n  equiv A R\n  X \\<in> A // R", "obtain x where \"x \\<in> X\""], ["proof (prove)\nusing this:\n  equiv A R\n  X \\<in> A // R\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis equiv_class_self quotientE)"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. P x", "from \\<open>x \\<in> X\\<close> assms(1,3)"], ["proof (chain)\npicking this:\n  x \\<in> X\n  equiv A R\n  X \\<in> A // R", "have \"X = R `` {x}\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  equiv A R\n  X \\<in> A // R\n\ngoal (1 subgoal):\n 1. X = R `` {x}", "by (metis Image_singleton_iff equiv_class_eq quotientE)"], ["proof (state)\nthis:\n  X = R `` {x}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. P x", "from assms(1,2,4) this"], ["proof (chain)\npicking this:\n  equiv A R\n  P respects R\n  univ P X\n  X = R `` {x}", "show ?thesis"], ["proof (prove)\nusing this:\n  equiv A R\n  P respects R\n  univ P X\n  X = R `` {x}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. P x", "using equiv_class_eq_iff univ_commute'"], ["proof (prove)\nusing this:\n  equiv A R\n  P respects R\n  univ P X\n  X = R `` {x}\n  equiv ?A ?r \\<Longrightarrow>\n  ((?x, ?y) \\<in> ?r) =\n  (?r `` {?x} = ?r `` {?y} \\<and> ?x \\<in> ?A \\<and> ?y \\<in> ?A)\n  \\<lbrakk>equiv ?A ?r; ?f respects ?r; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> univ ?f (?r `` {?x}) = ?f ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. P x", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. P x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma univ_preserves_predicate:\n  assumes \"equiv A r\"\n  assumes \"P respects r\"\n  shows \"{x \\<in> A. P x} // r = {X \\<in> A // r. univ P X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} // r = {X \\<in> A // r. univ P X}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {x \\<in> A. P x} // r \\<subseteq> {X \\<in> A // r. univ P X}\n 2. {X \\<in> A // r. univ P X} \\<subseteq> {x \\<in> A. P x} // r", "show \"{x \\<in> A. P x} // r \\<subseteq> {X \\<in> A // r. univ P X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} // r \\<subseteq> {X \\<in> A // r. univ P X}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "assume \"X \\<in> {x \\<in> A. P x} // r\""], ["proof (state)\nthis:\n  X \\<in> {x \\<in> A. P x} // r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "from this"], ["proof (chain)\npicking this:\n  X \\<in> {x \\<in> A. P x} // r", "obtain x where \"x \\<in> {x \\<in> A. P x}\" and \"X = r `` {x}\""], ["proof (prove)\nusing this:\n  X \\<in> {x \\<in> A. P x} // r\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> {x \\<in> A. P x}; X = r `` {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using quotientE"], ["proof (prove)\nusing this:\n  X \\<in> {x \\<in> A. P x} // r\n  \\<lbrakk>?X \\<in> ?A // ?r;\n   \\<And>x.\n      \\<lbrakk>?X = ?r `` {x}; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> {x \\<in> A. P x}; X = r `` {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> {x \\<in> A. P x}\n  X = r `` {x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "have \"X \\<in> A // r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> A // r", "using \\<open>X = r `` {x}\\<close> \\<open>x \\<in> {x \\<in> A. P x}\\<close>"], ["proof (prove)\nusing this:\n  X = r `` {x}\n  x \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. X \\<in> A // r", "by (auto intro: quotientI)"], ["proof (state)\nthis:\n  X \\<in> A // r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "moreover"], ["proof (state)\nthis:\n  X \\<in> A // r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "have \"univ P X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univ P X", "using \\<open>X = r `` {x}\\<close> \\<open>x \\<in> {x \\<in> A. P x}\\<close> assms"], ["proof (prove)\nusing this:\n  X = r `` {x}\n  x \\<in> {x \\<in> A. P x}\n  equiv A r\n  P respects r\n\ngoal (1 subgoal):\n 1. univ P X", "by (simp add: proj_def[symmetric] univ_commute)"], ["proof (state)\nthis:\n  univ P X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} // r \\<Longrightarrow>\n       x \\<in> {X \\<in> A // r. univ P X}", "ultimately"], ["proof (chain)\npicking this:\n  X \\<in> A // r\n  univ P X", "show \"X \\<in> {X \\<in> A // r. univ P X}\""], ["proof (prove)\nusing this:\n  X \\<in> A // r\n  univ P X\n\ngoal (1 subgoal):\n 1. X \\<in> {X \\<in> A // r. univ P X}", "by auto"], ["proof (state)\nthis:\n  X \\<in> {X \\<in> A // r. univ P X}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x \\<in> A. P x} // r \\<subseteq> {X \\<in> A // r. univ P X}\n\ngoal (1 subgoal):\n 1. {X \\<in> A // r. univ P X} \\<subseteq> {x \\<in> A. P x} // r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {X \\<in> A // r. univ P X} \\<subseteq> {x \\<in> A. P x} // r", "show \"{X \\<in> A // r. univ P X} \\<subseteq> {x \\<in> A. P x} // r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {X \\<in> A // r. univ P X} \\<subseteq> {x \\<in> A. P x} // r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X \\<in> A // r. univ P X} \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x} // r", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X \\<in> A // r. univ P X} \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x} // r", "assume \"X \\<in> {X \\<in> A // r. univ P X}\""], ["proof (state)\nthis:\n  X \\<in> {X \\<in> A // r. univ P X}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X \\<in> A // r. univ P X} \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x} // r", "from this"], ["proof (chain)\npicking this:\n  X \\<in> {X \\<in> A // r. univ P X}", "have \"X \\<in> A // r\" and \"univ P X\""], ["proof (prove)\nusing this:\n  X \\<in> {X \\<in> A // r. univ P X}\n\ngoal (1 subgoal):\n 1. X \\<in> A // r &&& univ P X", "by auto"], ["proof (state)\nthis:\n  X \\<in> A // r\n  univ P X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X \\<in> A // r. univ P X} \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x} // r", "from \\<open>X \\<in> A // r\\<close>"], ["proof (chain)\npicking this:\n  X \\<in> A // r", "obtain x where \"x \\<in> A\" and \"X = r `` {x}\""], ["proof (prove)\nusing this:\n  X \\<in> A // r\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; X = r `` {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using quotientE"], ["proof (prove)\nusing this:\n  X \\<in> A // r\n  \\<lbrakk>?X \\<in> ?A // ?r;\n   \\<And>x.\n      \\<lbrakk>?X = ?r `` {x}; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; X = r `` {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> A\n  X = r `` {x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X \\<in> A // r. univ P X} \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x} // r", "have \"x \\<in> {x \\<in> A. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> A. P x}", "using \\<open>x \\<in> A\\<close> \\<open>X = r `` {x}\\<close> \\<open>univ P X\\<close> assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  X = r `` {x}\n  univ P X\n  equiv A r\n  P respects r\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> A. P x}", "by (simp add: proj_def[symmetric] univ_commute)"], ["proof (state)\nthis:\n  x \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X \\<in> A // r. univ P X} \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x} // r", "from this"], ["proof (chain)\npicking this:\n  x \\<in> {x \\<in> A. P x}", "show \"X \\<in> {x \\<in> A. P x} // r\""], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. X \\<in> {x \\<in> A. P x} // r", "using \\<open>X = r `` {x}\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> A. P x}\n  X = r `` {x}\n\ngoal (1 subgoal):\n 1. X \\<in> {x \\<in> A. P x} // r", "by (auto intro: quotientI)"], ["proof (state)\nthis:\n  X \\<in> {x \\<in> A. P x} // r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {X \\<in> A // r. univ P X} \\<subseteq> {x \\<in> A. P x} // r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Union_quotient_restricted:\n  assumes \"equiv A r\"\n  assumes \"P respects r\"\n  shows \"\\<Union>({x \\<in> A. P x} // r) = {x \\<in> A. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> ({x \\<in> A. P x} // r) = {x \\<in> A. P x}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Union> ({x \\<in> A. P x} // r) \\<subseteq> {x \\<in> A. P x}\n 2. {x \\<in> A. P x} \\<subseteq> \\<Union> ({x \\<in> A. P x} // r)", "show \"\\<Union>({x \\<in> A. P x} // r) \\<subseteq> {x \\<in> A. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> ({x \\<in> A. P x} // r) \\<subseteq> {x \\<in> A. P x}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "assume \"x \\<in> \\<Union>({x \\<in> A. P x} // r)\""], ["proof (state)\nthis:\n  x \\<in> \\<Union> ({x \\<in> A. P x} // r)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "from this"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "obtain X where \"x \\<in> X\" and \"X \\<in> {x \\<in> A. P x} // r\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> ({x \\<in> A. P x} // r)\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>x \\<in> X; X \\<in> {x \\<in> A. P x} // r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> X\n  X \\<in> {x \\<in> A. P x} // r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "from this"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<in> {x \\<in> A. P x} // r", "obtain x' where \"X = r `` {x'}\" and \"x' \\<in> {x \\<in> A. P x}\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<in> {x \\<in> A. P x} // r\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>X = r `` {x'}; x' \\<in> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using quotientE"], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<in> {x \\<in> A. P x} // r\n  \\<lbrakk>?X \\<in> ?A // ?r;\n   \\<And>x.\n      \\<lbrakk>?X = ?r `` {x}; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>X = r `` {x'}; x' \\<in> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X = r `` {x'}\n  x' \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "from this \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  X = r `` {x'}\n  x' \\<in> {x \\<in> A. P x}\n  x \\<in> X", "have \"x \\<in> A\""], ["proof (prove)\nusing this:\n  X = r `` {x'}\n  x' \\<in> {x \\<in> A. P x}\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> A", "using \\<open>equiv A r\\<close>"], ["proof (prove)\nusing this:\n  X = r `` {x'}\n  x' \\<in> {x \\<in> A. P x}\n  x \\<in> X\n  equiv A r\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by (simp add: equiv_class_eq_iff)"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "moreover"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "from \\<open>X = r `` {x'}\\<close> \\<open>x \\<in> X\\<close> \\<open>x' \\<in> {x \\<in> A. P x}\\<close>"], ["proof (chain)\npicking this:\n  X = r `` {x'}\n  x \\<in> X\n  x' \\<in> {x \\<in> A. P x}", "have \"P x\""], ["proof (prove)\nusing this:\n  X = r `` {x'}\n  x \\<in> X\n  x' \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. P x", "using \\<open>P respects r\\<close> congruentD"], ["proof (prove)\nusing this:\n  X = r `` {x'}\n  x \\<in> X\n  x' \\<in> {x \\<in> A. P x}\n  P respects r\n  \\<lbrakk>?f respects ?r; (?y, ?z) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> ?f ?y = ?f ?z\n\ngoal (1 subgoal):\n 1. P x", "by fastforce"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r) \\<Longrightarrow>\n       x \\<in> {x \\<in> A. P x}", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> A\n  P x", "show \"x \\<in> {x \\<in> A. P x}\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  P x\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> A. P x}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {x \\<in> A. P x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> ({x \\<in> A. P x} // r) \\<subseteq> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} \\<subseteq> \\<Union> ({x \\<in> A. P x} // r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} \\<subseteq> \\<Union> ({x \\<in> A. P x} // r)", "show \"{x \\<in> A. P x} \\<subseteq> \\<Union>({x \\<in> A. P x} // r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} \\<subseteq> \\<Union> ({x \\<in> A. P x} // r)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} \\<Longrightarrow>\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} \\<Longrightarrow>\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "assume \"x \\<in> {x \\<in> A. P x}\""], ["proof (state)\nthis:\n  x \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} \\<Longrightarrow>\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "from this"], ["proof (chain)\npicking this:\n  x \\<in> {x \\<in> A. P x}", "have \"x \\<in> r `` {x}\""], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. x \\<in> r `` {x}", "using \\<open>equiv A r\\<close> equiv_class_self"], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> A. P x}\n  equiv A r\n  \\<lbrakk>equiv ?A ?r; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> ?r `` {?a}\n\ngoal (1 subgoal):\n 1. x \\<in> r `` {x}", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> r `` {x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} \\<Longrightarrow>\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "from \\<open>x \\<in> {x \\<in> A. P x}\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> {x \\<in> A. P x}", "have \"r `` {x} \\<in> {x \\<in> A. P x} // r\""], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. r `` {x} \\<in> {x \\<in> A. P x} // r", "by (auto intro: quotientI)"], ["proof (state)\nthis:\n  r `` {x} \\<in> {x \\<in> A. P x} // r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x \\<in> A. P x} \\<Longrightarrow>\n       x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "from this \\<open>x \\<in> r `` {x}\\<close>"], ["proof (chain)\npicking this:\n  r `` {x} \\<in> {x \\<in> A. P x} // r\n  x \\<in> r `` {x}", "show \"x \\<in> \\<Union>({x \\<in> A. P x} // r)\""], ["proof (prove)\nusing this:\n  r `` {x} \\<in> {x \\<in> A. P x} // r\n  x \\<in> r `` {x}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> ({x \\<in> A. P x} // r)", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<Union> ({x \\<in> A. P x} // r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x \\<in> A. P x} \\<subseteq> \\<Union> ({x \\<in> A. P x} // r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_equiv_implies_finite_carrier:\n  assumes \"equiv A R\"\n  assumes \"finite (A // R)\"\n  assumes \"\\<forall>X \\<in> A // R. finite X\"\n  shows \"finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite A", "from \\<open>equiv A R\\<close>"], ["proof (chain)\npicking this:\n  equiv A R", "have \"A = \\<Union>(A // R)\""], ["proof (prove)\nusing this:\n  equiv A R\n\ngoal (1 subgoal):\n 1. A = \\<Union> (A // R)", "by (simp add: Union_quotient)"], ["proof (state)\nthis:\n  A = \\<Union> (A // R)\n\ngoal (1 subgoal):\n 1. finite A", "from this \\<open>finite (A // R)\\<close> \\<open>\\<forall>X \\<in> A // R. finite X\\<close>"], ["proof (chain)\npicking this:\n  A = \\<Union> (A // R)\n  finite (A // R)\n  \\<forall>X\\<in>A // R. finite X", "show \"finite A\""], ["proof (prove)\nusing this:\n  A = \\<Union> (A // R)\n  finite (A // R)\n  \\<forall>X\\<in>A // R. finite X\n\ngoal (1 subgoal):\n 1. finite A", "using finite_Union"], ["proof (prove)\nusing this:\n  A = \\<Union> (A // R)\n  finite (A // R)\n  \\<forall>X\\<in>A // R. finite X\n  \\<lbrakk>finite ?A;\n   \\<And>M. M \\<in> ?A \\<Longrightarrow> finite M\\<rbrakk>\n  \\<Longrightarrow> finite (\\<Union> ?A)\n\ngoal (1 subgoal):\n 1. finite A", "by fastforce"], ["proof (state)\nthis:\n  finite A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_quotient_iff:\n  assumes \"equiv A R\"\n  shows \"finite A \\<longleftrightarrow> (finite (A // R) \\<and> (\\<forall>X \\<in> A // R. finite X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A = (finite (A // R) \\<and> (\\<forall>X\\<in>A // R. finite X))", "using assms"], ["proof (prove)\nusing this:\n  equiv A R\n\ngoal (1 subgoal):\n 1. finite A = (finite (A // R) \\<and> (\\<forall>X\\<in>A // R. finite X))", "by (meson equiv_type finite_equiv_class finite_equiv_implies_finite_carrier finite_quotient)"], ["", "subsubsection \\<open>Counting Sets by Splitting into Equivalence Classes\\<close>"], ["", "lemma card_equiv_class_restricted:\n  assumes \"finite {x \\<in> A. P x}\"\n  assumes \"equiv A R\"\n  assumes \"P respects R\"\n  shows \"card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "have \"card {x \\<in> A. P x} = card (\\<Union>({x \\<in> A. P x} // R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = card (\\<Union> ({x \\<in> A. P x} // R))", "using \\<open>equiv A R\\<close> \\<open>P respects R\\<close>"], ["proof (prove)\nusing this:\n  equiv A R\n  P respects R\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = card (\\<Union> ({x \\<in> A. P x} // R))", "by (simp add: Union_quotient_restricted)"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = card (\\<Union> ({x \\<in> A. P x} // R))\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "also"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = card (\\<Union> ({x \\<in> A. P x} // R))\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "have \"card (\\<Union>({x \\<in> A. P x} // R)) = (\\<Sum>C\\<in>{x \\<in> A. P x} // R. card C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "from \\<open>finite {x \\<in> A. P x}\\<close>"], ["proof (chain)\npicking this:\n  finite {x \\<in> A. P x}", "have \"finite ({x \\<in> A. P x} // R)\""], ["proof (prove)\nusing this:\n  finite {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. finite ({x \\<in> A. P x} // R)", "using \\<open>equiv A R\\<close>"], ["proof (prove)\nusing this:\n  finite {x \\<in> A. P x}\n  equiv A R\n\ngoal (1 subgoal):\n 1. finite ({x \\<in> A. P x} // R)", "by (metis finite_imageI proj_image)"], ["proof (state)\nthis:\n  finite ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "moreover"], ["proof (state)\nthis:\n  finite ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "from \\<open>finite {x \\<in> A. P x}\\<close>"], ["proof (chain)\npicking this:\n  finite {x \\<in> A. P x}", "have \"\\<forall>C\\<in>{x \\<in> A. P x} // R. finite C\""], ["proof (prove)\nusing this:\n  finite {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>{x \\<in> A. P x} // R. finite C", "using \\<open>equiv A R\\<close> \\<open>P respects R\\<close> Union_quotient_restricted\n        Union_upper finite_subset"], ["proof (prove)\nusing this:\n  finite {x \\<in> A. P x}\n  equiv A R\n  P respects R\n  \\<lbrakk>equiv ?A ?r; ?P respects ?r\\<rbrakk>\n  \\<Longrightarrow> \\<Union> ({x \\<in> ?A. ?P x} // ?r) = {x \\<in> ?A. ?P x}\n  ?B \\<in> ?A \\<Longrightarrow> ?B \\<subseteq> \\<Union> ?A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>{x \\<in> A. P x} // R. finite C", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>C\\<in>{x \\<in> A. P x} // R. finite C\n\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "moreover"], ["proof (state)\nthis:\n  \\<forall>C\\<in>{x \\<in> A. P x} // R. finite C\n\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "have \"\\<forall>C1 \\<in> {x \\<in> A. P x} // R. \\<forall>C2 \\<in> {x \\<in> A. P x} // R. C1 \\<noteq> C2 \\<longrightarrow> C1 \\<inter> C2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C1\\<in>{x \\<in> A. P x} // R.\n       \\<forall>C2\\<in>{x \\<in> A. P x} // R.\n          C1 \\<noteq> C2 \\<longrightarrow> C1 \\<inter> C2 = {}", "using \\<open>equiv A R\\<close> quotient_disj"], ["proof (prove)\nusing this:\n  equiv A R\n  \\<lbrakk>equiv ?A ?r; ?X \\<in> ?A // ?r; ?Y \\<in> ?A // ?r\\<rbrakk>\n  \\<Longrightarrow> ?X = ?Y \\<or> ?X \\<inter> ?Y = {}\n\ngoal (1 subgoal):\n 1. \\<forall>C1\\<in>{x \\<in> A. P x} // R.\n       \\<forall>C2\\<in>{x \\<in> A. P x} // R.\n          C1 \\<noteq> C2 \\<longrightarrow> C1 \\<inter> C2 = {}", "by (metis (no_types, lifting) mem_Collect_eq quotientE quotientI)"], ["proof (state)\nthis:\n  \\<forall>C1\\<in>{x \\<in> A. P x} // R.\n     \\<forall>C2\\<in>{x \\<in> A. P x} // R.\n        C1 \\<noteq> C2 \\<longrightarrow> C1 \\<inter> C2 = {}\n\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "ultimately"], ["proof (chain)\npicking this:\n  finite ({x \\<in> A. P x} // R)\n  \\<forall>C\\<in>{x \\<in> A. P x} // R. finite C\n  \\<forall>C1\\<in>{x \\<in> A. P x} // R.\n     \\<forall>C2\\<in>{x \\<in> A. P x} // R.\n        C1 \\<noteq> C2 \\<longrightarrow> C1 \\<inter> C2 = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite ({x \\<in> A. P x} // R)\n  \\<forall>C\\<in>{x \\<in> A. P x} // R. finite C\n  \\<forall>C1\\<in>{x \\<in> A. P x} // R.\n     \\<forall>C2\\<in>{x \\<in> A. P x} // R.\n        C1 \\<noteq> C2 \\<longrightarrow> C1 \\<inter> C2 = {}\n\ngoal (1 subgoal):\n 1. card (\\<Union> ({x \\<in> A. P x} // R)) =\n    sum card ({x \\<in> A. P x} // R)", "by (subst card_Union_disjoint) (auto simp: pairwise_def disjnt_def)"], ["proof (state)\nthis:\n  card (\\<Union> ({x \\<in> A. P x} // R)) = sum card ({x \\<in> A. P x} // R)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (\\<Union> ({x \\<in> A. P x} // R)) = sum card ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "finally"], ["proof (chain)\npicking this:\n  card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "."], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_equiv_class_restricted_same_size:\n  assumes \"equiv A R\"\n  assumes \"P respects R\"\n  assumes \"\\<And>F. F \\<in> {x \\<in> A. P x} // R \\<Longrightarrow> card F = k\"\n  shows \"card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<not> ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "assume \"finite {x \\<in> A. P x}\""], ["proof (state)\nthis:\n  finite {x \\<in> A. P x}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<not> ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "have \"card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "using \\<open>finite {x \\<in> A. P x}\\<close> \\<open>equiv A R\\<close> \\<open>P respects R\\<close>"], ["proof (prove)\nusing this:\n  finite {x \\<in> A. P x}\n  equiv A R\n  P respects R\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)", "by (simp add: card_equiv_class_restricted)"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<not> ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "also"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = sum card ({x \\<in> A. P x} // R)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<not> ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "have \"sum card ({x \\<in> A. P x} // R) = k * card ({x \\<in> A. P x} // R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum card ({x \\<in> A. P x} // R) = k * card ({x \\<in> A. P x} // R)", "by (simp add: \\<open>\\<And>F. F \\<in> {x \\<in> A. P x} // R \\<Longrightarrow> card F = k\\<close>)"], ["proof (state)\nthis:\n  sum card ({x \\<in> A. P x} // R) = k * card ({x \\<in> A. P x} // R)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<not> ?P \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "finally"], ["proof (chain)\npicking this:\n  card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "."], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. infinite {x \\<in> A. P x} \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite {x \\<in> A. P x} \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "assume \"infinite {x \\<in> A. P x}\""], ["proof (state)\nthis:\n  infinite {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. infinite {x \\<in> A. P x} \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "from this"], ["proof (chain)\npicking this:\n  infinite {x \\<in> A. P x}", "have \"infinite (\\<Union>({a \\<in> A. P a} // R))\""], ["proof (prove)\nusing this:\n  infinite {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. infinite (\\<Union> ({a \\<in> A. P a} // R))", "using \\<open>equiv A R\\<close> \\<open>P respects R\\<close>"], ["proof (prove)\nusing this:\n  infinite {x \\<in> A. P x}\n  equiv A R\n  P respects R\n\ngoal (1 subgoal):\n 1. infinite (\\<Union> ({a \\<in> A. P a} // R))", "by (simp add: Union_quotient_restricted)"], ["proof (state)\nthis:\n  infinite (\\<Union> ({a \\<in> A. P a} // R))\n\ngoal (1 subgoal):\n 1. infinite {x \\<in> A. P x} \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "from this"], ["proof (chain)\npicking this:\n  infinite (\\<Union> ({a \\<in> A. P a} // R))", "have \"infinite ({x \\<in> A. P x} // R) \\<or> (\\<exists>X \\<in> {x \\<in> A. P x} // R. infinite X)\""], ["proof (prove)\nusing this:\n  infinite (\\<Union> ({a \\<in> A. P a} // R))\n\ngoal (1 subgoal):\n 1. infinite ({x \\<in> A. P x} // R) \\<or>\n    (\\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X)", "by auto"], ["proof (state)\nthis:\n  infinite ({x \\<in> A. P x} // R) \\<or>\n  (\\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X)\n\ngoal (1 subgoal):\n 1. infinite {x \\<in> A. P x} \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "from this"], ["proof (chain)\npicking this:\n  infinite ({x \\<in> A. P x} // R) \\<or>\n  (\\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X)", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite ({x \\<in> A. P x} // R) \\<or>\n  (\\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X)\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. infinite ({x \\<in> A. P x} // R) \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "assume \"infinite ({x \\<in> A. P x} // R)\""], ["proof (state)\nthis:\n  infinite ({x \\<in> A. P x} // R)\n\ngoal (2 subgoals):\n 1. infinite ({x \\<in> A. P x} // R) \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n 2. \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "from this \\<open>infinite {x \\<in> A. P x}\\<close>"], ["proof (chain)\npicking this:\n  infinite ({x \\<in> A. P x} // R)\n  infinite {x \\<in> A. P x}", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite ({x \\<in> A. P x} // R)\n  infinite {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "by simp"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "assume \"\\<exists>X \\<in> {x \\<in> A. P x} // R. infinite X\""], ["proof (state)\nthis:\n  \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X \\<Longrightarrow>\n    card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "from this \\<open>infinite {x \\<in> A. P x}\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X\n  infinite {x \\<in> A. P x}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X\n  infinite {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "using \\<open>\\<And>F. F \\<in> {x \\<in> A. P x} // R \\<Longrightarrow> card F = k\\<close> card.infinite"], ["proof (prove)\nusing this:\n  \\<exists>X\\<in>{x \\<in> A. P x} // R. infinite X\n  infinite {x \\<in> A. P x}\n  ?F \\<in> {x \\<in> A. P x} // R \\<Longrightarrow> card ?F = k\n  infinite ?A \\<Longrightarrow> card ?A = 0\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)", "by auto"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} = k * card ({x \\<in> A. P x} // R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_equiv_class:\n  assumes \"finite A\"\n  assumes \"equiv A R\"\n  shows \"card A = sum card (A // R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A = sum card (A // R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card A = sum card (A // R)", "have \"(\\<lambda>x. True) respects R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. True) respects R", "by (simp add: congruentI)"], ["proof (state)\nthis:\n  (\\<lambda>x. True) respects R\n\ngoal (1 subgoal):\n 1. card A = sum card (A // R)", "from \\<open>finite A\\<close> \\<open>equiv A R\\<close> this"], ["proof (chain)\npicking this:\n  finite A\n  equiv A R\n  (\\<lambda>x. True) respects R", "show ?thesis"], ["proof (prove)\nusing this:\n  finite A\n  equiv A R\n  (\\<lambda>x. True) respects R\n\ngoal (1 subgoal):\n 1. card A = sum card (A // R)", "using card_equiv_class_restricted[where P=\"\\<lambda>x. True\"]"], ["proof (prove)\nusing this:\n  finite A\n  equiv A R\n  (\\<lambda>x. True) respects R\n  \\<lbrakk>finite {x \\<in> ?A. True}; equiv ?A ?R;\n   (\\<lambda>x. True) respects ?R\\<rbrakk>\n  \\<Longrightarrow> card {x \\<in> ?A. True} =\n                    sum card ({x \\<in> ?A. True} // ?R)\n\ngoal (1 subgoal):\n 1. card A = sum card (A // R)", "by auto"], ["proof (state)\nthis:\n  card A = sum card (A // R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_equiv_class_same_size:\n  assumes \"equiv A R\"\n  assumes \"\\<And>F. F \\<in> A // R \\<Longrightarrow> card F = k\"\n  shows \"card A = k * card (A // R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A = k * card (A // R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card A = k * card (A // R)", "have \"(\\<lambda>x. True) respects R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. True) respects R", "by (simp add: congruentI)"], ["proof (state)\nthis:\n  (\\<lambda>x. True) respects R\n\ngoal (1 subgoal):\n 1. card A = k * card (A // R)", "from \\<open>equiv A R\\<close> \\<open>\\<And>F. F \\<in> A // R \\<Longrightarrow> card F = k\\<close> this"], ["proof (chain)\npicking this:\n  equiv A R\n  ?F \\<in> A // R \\<Longrightarrow> card ?F = k\n  (\\<lambda>x. True) respects R", "show ?thesis"], ["proof (prove)\nusing this:\n  equiv A R\n  ?F \\<in> A // R \\<Longrightarrow> card ?F = k\n  (\\<lambda>x. True) respects R\n\ngoal (1 subgoal):\n 1. card A = k * card (A // R)", "using card_equiv_class_restricted_same_size[where P=\"\\<lambda>x. True\"]"], ["proof (prove)\nusing this:\n  equiv A R\n  ?F \\<in> A // R \\<Longrightarrow> card ?F = k\n  (\\<lambda>x. True) respects R\n  \\<lbrakk>equiv ?A ?R; (\\<lambda>x. True) respects ?R;\n   \\<And>F.\n      F \\<in> {x \\<in> ?A. True} // ?R \\<Longrightarrow>\n      card F = ?k\\<rbrakk>\n  \\<Longrightarrow> card {x \\<in> ?A. True} =\n                    ?k * card ({x \\<in> ?A. True} // ?R)\n\ngoal (1 subgoal):\n 1. card A = k * card (A // R)", "by auto"], ["proof (state)\nthis:\n  card A = k * card (A // R)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Additions to FuncSet Theory\\<close>"], ["", "lemma finite_same_card_bij_on_ext_funcset:\n  assumes \"finite A\" \"finite B\" \"card A = card B\"\n  shows \"\\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "obtain f' where f': \"bij_betw f' A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. (\\<And>f'. bij_betw f' A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_same_card_bij"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h. bij_betw h ?A ?B\n\ngoal (1 subgoal):\n 1. (\\<And>f'. bij_betw f' A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bij_betw f' A B\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "define f where \"\\<And>x. f x = (if x \\<in> A then f' x else undefined)\""], ["proof (state)\nthis:\n  f ?x = (if ?x \\<in> A then f' ?x else undefined)\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "have \"f \\<in> A \\<rightarrow>\\<^sub>E B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow>\\<^sub>E B", "using f'"], ["proof (prove)\nusing this:\n  bij_betw f' A B\n\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow>\\<^sub>E B", "unfolding f_def"], ["proof (prove)\nusing this:\n  bij_betw f' A B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f' x else undefined)\n    \\<in> A \\<rightarrow>\\<^sub>E B", "by (auto simp add: bij_betwE)"], ["proof (state)\nthis:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "moreover"], ["proof (state)\nthis:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "have \"bij_betw f A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f A B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bij_betw f A B", "have \"bij_betw f' A B \\<longleftrightarrow> bij_betw f A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f' A B = bij_betw f A B", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f' A B =\n    bij_betw (\\<lambda>x. if x \\<in> A then f' x else undefined) A B", "by (auto intro!: bij_betw_cong)"], ["proof (state)\nthis:\n  bij_betw f' A B = bij_betw f A B\n\ngoal (1 subgoal):\n 1. bij_betw f A B", "from this \\<open>bij_betw f' A B\\<close>"], ["proof (chain)\npicking this:\n  bij_betw f' A B = bij_betw f A B\n  bij_betw f' A B", "show ?thesis"], ["proof (prove)\nusing this:\n  bij_betw f' A B = bij_betw f A B\n  bij_betw f' A B\n\ngoal (1 subgoal):\n 1. bij_betw f A B", "by auto"], ["proof (state)\nthis:\n  bij_betw f A B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw f A B\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  bij_betw f A B", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  bij_betw f A B\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B", "by auto"], ["proof (state)\nthis:\n  \\<exists>f. f \\<in> A \\<rightarrow>\\<^sub>E B \\<and> bij_betw f A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_extensional_funcset:\n  assumes \"finite A\"\n  shows \"card (A \\<rightarrow>\\<^sub>E B) = card B ^ card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (A \\<rightarrow>\\<^sub>E B) = card B ^ card A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. card (A \\<rightarrow>\\<^sub>E B) = card B ^ card A", "by (simp add: card_PiE prod_constant)"], ["", "lemma bij_betw_implies_inj_on_and_card_eq:\n  assumes \"finite B\"\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\"\n  shows \"bij_betw f A B \\<longleftrightarrow> inj_on f A \\<and> card A = card B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f A B = (inj_on f A \\<and> card A = card B)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bij_betw f A B \\<Longrightarrow> inj_on f A \\<and> card A = card B\n 2. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "assume \"bij_betw f A B\""], ["proof (state)\nthis:\n  bij_betw f A B\n\ngoal (2 subgoals):\n 1. bij_betw f A B \\<Longrightarrow> inj_on f A \\<and> card A = card B\n 2. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from this"], ["proof (chain)\npicking this:\n  bij_betw f A B", "show \"inj_on f A \\<and> card A = card B\""], ["proof (prove)\nusing this:\n  bij_betw f A B\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B", "by (simp add: bij_betw_imp_inj_on bij_betw_same_card)"], ["proof (state)\nthis:\n  inj_on f A \\<and> card A = card B\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "assume \"inj_on f A \\<and> card A = card B\""], ["proof (state)\nthis:\n  inj_on f A \\<and> card A = card B\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from this"], ["proof (chain)\npicking this:\n  inj_on f A \\<and> card A = card B", "have \"inj_on f A\" and \"card A = card B\""], ["proof (prove)\nusing this:\n  inj_on f A \\<and> card A = card B\n\ngoal (1 subgoal):\n 1. inj_on f A &&& card A = card B", "by auto"], ["proof (state)\nthis:\n  inj_on f A\n  card A = card B\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from \\<open>f \\<in> A \\<rightarrow>\\<^sub>E B\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B", "have \"f ` A \\<subseteq> B\""], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. f ` A \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  f ` A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from \\<open>inj_on f A\\<close>"], ["proof (chain)\npicking this:\n  inj_on f A", "have \"card (f ` A) = card A\""], ["proof (prove)\nusing this:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. card (f ` A) = card A", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card (f ` A) = card A\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from \\<open>f ` A \\<subseteq> B\\<close> \\<open>card A = card B\\<close> this"], ["proof (chain)\npicking this:\n  f ` A \\<subseteq> B\n  card A = card B\n  card (f ` A) = card A", "have \"f ` A = B\""], ["proof (prove)\nusing this:\n  f ` A \\<subseteq> B\n  card A = card B\n  card (f ` A) = card A\n\ngoal (1 subgoal):\n 1. f ` A = B", "by (simp add: \\<open>finite B\\<close> card_subset_eq)"], ["proof (state)\nthis:\n  f ` A = B\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from \\<open>inj_on f A\\<close> this"], ["proof (chain)\npicking this:\n  inj_on f A\n  f ` A = B", "show \"bij_betw f A B\""], ["proof (prove)\nusing this:\n  inj_on f A\n  f ` A = B\n\ngoal (1 subgoal):\n 1. bij_betw f A B", "by (rule bij_betw_imageI)"], ["proof (state)\nthis:\n  bij_betw f A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_implies_surj_on_and_card_eq:\n  assumes \"finite A\"\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\"\n  shows \"bij_betw f A B \\<longleftrightarrow> f ` A = B \\<and> card A = card B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f A B = (f ` A = B \\<and> card A = card B)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bij_betw f A B \\<Longrightarrow> f ` A = B \\<and> card A = card B\n 2. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "assume \"bij_betw f A B\""], ["proof (state)\nthis:\n  bij_betw f A B\n\ngoal (2 subgoals):\n 1. bij_betw f A B \\<Longrightarrow> f ` A = B \\<and> card A = card B\n 2. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "show \"f ` A = B \\<and> card A = card B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B", "using \\<open>bij_betw f A B\\<close> bij_betw_imp_surj_on bij_betw_same_card"], ["proof (prove)\nusing this:\n  bij_betw f A B\n  bij_betw ?f ?A ?B \\<Longrightarrow> ?f ` ?A = ?B\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B", "by blast"], ["proof (state)\nthis:\n  f ` A = B \\<and> card A = card B\n\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "assume \"f ` A = B \\<and> card A = card B\""], ["proof (state)\nthis:\n  f ` A = B \\<and> card A = card B\n\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from this"], ["proof (chain)\npicking this:\n  f ` A = B \\<and> card A = card B", "have \"f ` A = B\" and \"card A = card B\""], ["proof (prove)\nusing this:\n  f ` A = B \\<and> card A = card B\n\ngoal (1 subgoal):\n 1. f ` A = B &&& card A = card B", "by auto"], ["proof (state)\nthis:\n  f ` A = B\n  card A = card B\n\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from this"], ["proof (chain)\npicking this:\n  f ` A = B\n  card A = card B", "have \"inj_on f A\""], ["proof (prove)\nusing this:\n  f ` A = B\n  card A = card B\n\ngoal (1 subgoal):\n 1. inj_on f A", "by (simp add: \\<open>finite A\\<close> inj_on_iff_eq_card)"], ["proof (state)\nthis:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. f ` A = B \\<and> card A = card B \\<Longrightarrow> bij_betw f A B", "from this \\<open>f ` A = B\\<close>"], ["proof (chain)\npicking this:\n  inj_on f A\n  f ` A = B", "show \"bij_betw f A B\""], ["proof (prove)\nusing this:\n  inj_on f A\n  f ` A = B\n\ngoal (1 subgoal):\n 1. bij_betw f A B", "by (rule bij_betw_imageI)"], ["proof (state)\nthis:\n  bij_betw f A B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Additions to Permutations Theory\\<close>"], ["", "lemma\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>E B\" \"f ` A = B\"\n  assumes \"p permutes B\" \"(\\<forall>x. f' x = p (f x))\"\n  shows \"(\\<lambda>b. {x\\<in>A. f x = b}) ` B = (\\<lambda>b. {x\\<in>A. f' x = b}) ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b. {x \\<in> A. f x = b}) ` B =\n    (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n    \\<subseteq> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n 2. (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n    \\<subseteq> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "show \"(\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<subseteq> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n    \\<subseteq> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "assume \"X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\""], ["proof (state)\nthis:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "from this"], ["proof (chain)\npicking this:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "obtain b where X_eq: \"X = {x \\<in> A. f x = b}\" and \"b \\<in> B\""], ["proof (prove)\nusing this:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>X = {x \\<in> A. f x = b}; b \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X = {x \\<in> A. f x = b}\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "from assms(3, 4)"], ["proof (chain)\npicking this:\n  p permutes B\n  \\<forall>x. f' x = p (f x)", "have \"\\<And>x. f x = b \\<longleftrightarrow> f' x = p b\""], ["proof (prove)\nusing this:\n  p permutes B\n  \\<forall>x. f' x = p (f x)\n\ngoal (1 subgoal):\n 1. \\<And>x. (f x = b) = (f' x = p b)", "by (metis permutes_def)"], ["proof (state)\nthis:\n  (f ?x = b) = (f' ?x = p b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "from \\<open>p permutes B\\<close> X_eq this"], ["proof (chain)\npicking this:\n  p permutes B\n  X = {x \\<in> A. f x = b}\n  (f ?x = b) = (f' ?x = p b)", "have \"X = {x \\<in> A. f' x = p b}\""], ["proof (prove)\nusing this:\n  p permutes B\n  X = {x \\<in> A. f x = b}\n  (f ?x = b) = (f' ?x = p b)\n\ngoal (1 subgoal):\n 1. X = {x \\<in> A. f' x = p b}", "using Collect_cong"], ["proof (prove)\nusing this:\n  p permutes B\n  X = {x \\<in> A. f x = b}\n  (f ?x = b) = (f' ?x = p b)\n  (\\<And>x. ?P x = ?Q x) \\<Longrightarrow> {x. ?P x} = {x. ?Q x}\n\ngoal (1 subgoal):\n 1. X = {x \\<in> A. f' x = p b}", "by auto"], ["proof (state)\nthis:\n  X = {x \\<in> A. f' x = p b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "moreover"], ["proof (state)\nthis:\n  X = {x \\<in> A. f' x = p b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "from \\<open>b \\<in> B\\<close> \\<open>p permutes B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B\n  p permutes B", "have \"p b \\<in> B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  p permutes B\n\ngoal (1 subgoal):\n 1. p b \\<in> B", "by (simp add: permutes_in_image)"], ["proof (state)\nthis:\n  p b \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "ultimately"], ["proof (chain)\npicking this:\n  X = {x \\<in> A. f' x = p b}\n  p b \\<in> B", "show \"X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\""], ["proof (prove)\nusing this:\n  X = {x \\<in> A. f' x = p b}\n  p b \\<in> B\n\ngoal (1 subgoal):\n 1. X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "by blast"], ["proof (state)\nthis:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n  \\<subseteq> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n\ngoal (1 subgoal):\n 1. (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n    \\<subseteq> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n    \\<subseteq> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "show \"(\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<subseteq> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n    \\<subseteq> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "assume \"X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\""], ["proof (state)\nthis:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "from this"], ["proof (chain)\npicking this:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B", "obtain b where X_eq: \"X = {x \\<in> A. f' x = b}\" and \"b \\<in> B\""], ["proof (prove)\nusing this:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>X = {x \\<in> A. f' x = b}; b \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X = {x \\<in> A. f' x = b}\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "from assms(3, 4)"], ["proof (chain)\npicking this:\n  p permutes B\n  \\<forall>x. f' x = p (f x)", "have \"\\<And>x. f' x = b \\<longleftrightarrow> f x = inv p b\""], ["proof (prove)\nusing this:\n  p permutes B\n  \\<forall>x. f' x = p (f x)\n\ngoal (1 subgoal):\n 1. \\<And>x. (f' x = b) = (f x = inv p b)", "by (auto simp add: permutes_inverses(1, 2))"], ["proof (state)\nthis:\n  (f' ?x = b) = (f ?x = inv p b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "from \\<open>p permutes B\\<close> X_eq this"], ["proof (chain)\npicking this:\n  p permutes B\n  X = {x \\<in> A. f' x = b}\n  (f' ?x = b) = (f ?x = inv p b)", "have \"X = {x \\<in> A. f x = inv p b}\""], ["proof (prove)\nusing this:\n  p permutes B\n  X = {x \\<in> A. f' x = b}\n  (f' ?x = b) = (f ?x = inv p b)\n\ngoal (1 subgoal):\n 1. X = {x \\<in> A. f x = inv p b}", "using Collect_cong"], ["proof (prove)\nusing this:\n  p permutes B\n  X = {x \\<in> A. f' x = b}\n  (f' ?x = b) = (f ?x = inv p b)\n  (\\<And>x. ?P x = ?Q x) \\<Longrightarrow> {x. ?P x} = {x. ?Q x}\n\ngoal (1 subgoal):\n 1. X = {x \\<in> A. f x = inv p b}", "by auto"], ["proof (state)\nthis:\n  X = {x \\<in> A. f x = inv p b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "moreover"], ["proof (state)\nthis:\n  X = {x \\<in> A. f x = inv p b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "from \\<open>b \\<in> B\\<close> \\<open>p permutes B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B\n  p permutes B", "have \"inv p b \\<in> B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  p permutes B\n\ngoal (1 subgoal):\n 1. inv p b \\<in> B", "by (simp add: permutes_in_image permutes_inv)"], ["proof (state)\nthis:\n  inv p b \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>b. {x \\<in> A. f' x = b}) ` B \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "ultimately"], ["proof (chain)\npicking this:\n  X = {x \\<in> A. f x = inv p b}\n  inv p b \\<in> B", "show \"X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\""], ["proof (prove)\nusing this:\n  X = {x \\<in> A. f x = inv p b}\n  inv p b \\<in> B\n\ngoal (1 subgoal):\n 1. X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B", "by blast"], ["proof (state)\nthis:\n  X \\<in> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>b. {x \\<in> A. f' x = b}) ` B\n  \\<subseteq> (\\<lambda>b. {x \\<in> A. f x = b}) ` B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Additions to List Theory\\<close>"], ["", "text \\<open>\nThe theorem @{thm [source] card_lists_length_eq} contains the superfluous assumption @{term \"finite A\"}.\nHere, we derive that fact without that unnecessary assumption.\n\\<close>"], ["", "lemma lists_length_eq_Suc_eq_image_Cons:\n  \"{xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = (\\<lambda>(x, xs). x#xs) ` (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\"\n  (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc n} =\n    (\\<lambda>(x, xs). x # xs) `\n    (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n    \\<subseteq> (\\<lambda>(x, xs). x # xs) `\n                (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n 2. (\\<lambda>(x, xs). x # xs) `\n    (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n    \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}", "show \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n    \\<subseteq> (\\<lambda>(x, xs). x # xs) `\n                (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc n} \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, xs). x # xs) `\n               (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc n} \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, xs). x # xs) `\n               (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "assume \"xs \\<in> ?A\""], ["proof (state)\nthis:\n  xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc n} \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, xs). x # xs) `\n               (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "from this"], ["proof (chain)\npicking this:\n  xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}", "show \"xs \\<in> ?B\""], ["proof (prove)\nusing this:\n  xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n\ngoal (1 subgoal):\n 1. xs \\<in> (\\<lambda>(x, xs). x # xs) `\n             (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "by (cases xs) auto"], ["proof (state)\nthis:\n  xs \\<in> (\\<lambda>(x, xs). x # xs) `\n           (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n  \\<subseteq> (\\<lambda>(x, xs). x # xs) `\n              (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, xs). x # xs) `\n    (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n    \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, xs). x # xs) `\n    (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n    \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, xs). x # xs) `\n    (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n    \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>(x, xs). x # xs) `\n  (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n  \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lists_length_eq_Suc_eq_empty_iff:\n  \"{xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) = (A = {})", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {}) = (A = {})\n 2. \\<And>n.\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) =\n       (A = {}) \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n       (A = {})", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {}) = (A = {})\n 2. \\<And>n.\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) =\n       (A = {}) \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n       (A = {})", "have \"{xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {x#[] |x. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} =\n    {[x] |x. x \\<in> A}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n    \\<subseteq> {[x] |x. x \\<in> A}\n 2. {[x] |x. x \\<in> A}\n    \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}", "show \"{[x] |x. x \\<in> A} \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {[x] |x. x \\<in> A}\n    \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}", "by auto"], ["proof (state)\nthis:\n  {[x] |x. x \\<in> A}\n  \\<subseteq> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n    \\<subseteq> {[x] |x. x \\<in> A}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n    \\<subseteq> {[x] |x. x \\<in> A}", "show \"{xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} \\<subseteq> {[x] |x. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n    \\<subseteq> {[x] |x. x \\<in> A}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc 0} \\<Longrightarrow>\n       x \\<in> {[x] |x. x \\<in> A}", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc 0} \\<Longrightarrow>\n       x \\<in> {[x] |x. x \\<in> A}", "assume \"xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\""], ["proof (state)\nthis:\n  xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc 0} \\<Longrightarrow>\n       x \\<in> {[x] |x. x \\<in> A}", "from this"], ["proof (chain)\npicking this:\n  xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}", "have \"set xs \\<subseteq> A \\<and> length xs = Suc 0\""], ["proof (prove)\nusing this:\n  xs \\<in> {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A \\<and> length xs = Suc 0", "by simp"], ["proof (state)\nthis:\n  set xs \\<subseteq> A \\<and> length xs = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc 0} \\<Longrightarrow>\n       x \\<in> {[x] |x. x \\<in> A}", "from this"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> A \\<and> length xs = Suc 0", "have \"\\<exists>x. xs = [x] \\<and> x \\<in> A\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A \\<and> length xs = Suc 0\n\ngoal (1 subgoal):\n 1. \\<exists>x. xs = [x] \\<and> x \\<in> A", "by (metis Suc_length_conv insert_subset length_0_conv list.set(2))"], ["proof (state)\nthis:\n  \\<exists>x. xs = [x] \\<and> x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {xs.\n                set xs \\<subseteq> A \\<and>\n                length xs = Suc 0} \\<Longrightarrow>\n       x \\<in> {[x] |x. x \\<in> A}", "from this"], ["proof (chain)\npicking this:\n  \\<exists>x. xs = [x] \\<and> x \\<in> A", "show \"xs \\<in> {[x] |x. x \\<in> A}\""], ["proof (prove)\nusing this:\n  \\<exists>x. xs = [x] \\<and> x \\<in> A\n\ngoal (1 subgoal):\n 1. xs \\<in> {[x] |x. x \\<in> A}", "by simp"], ["proof (state)\nthis:\n  xs \\<in> {[x] |x. x \\<in> A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0}\n  \\<subseteq> {[x] |x. x \\<in> A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {[x] |x. x \\<in> A}\n\ngoal (2 subgoals):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {}) = (A = {})\n 2. \\<And>n.\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) =\n       (A = {}) \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n       (A = {})", "then"], ["proof (chain)\npicking this:\n  {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {[x] |x. x \\<in> A}", "show ?case"], ["proof (prove)\nusing this:\n  {xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {[x] |x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {}) = (A = {})", "by simp"], ["proof (state)\nthis:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = Suc 0} = {}) = (A = {})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) =\n       (A = {}) \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n       (A = {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) =\n       (A = {}) \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n       (A = {})", "case (Suc n)"], ["proof (state)\nthis:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) = (A = {})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) =\n       (A = {}) \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n       (A = {})", "from this"], ["proof (chain)\npicking this:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) = (A = {})", "show ?case"], ["proof (prove)\nusing this:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = Suc n} = {}) = (A = {})\n\ngoal (1 subgoal):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n    (A = {})", "by (auto simp only: lists_length_eq_Suc_eq_image_Cons)"], ["proof (state)\nthis:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = Suc (Suc n)} = {}) =\n  (A = {})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lists_length_eq_eq_empty_iff:\n  \"{xs. set xs \\<subseteq> A \\<and> length xs = n} = {} \\<longleftrightarrow> (A = {} \\<and> n > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n    (A = {} \\<and> 0 < n)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n    (A = {} \\<and> 0 < n)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n       (A = {} \\<and> 0 < n)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n    (A = {} \\<and> 0 < n)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n       (A = {} \\<and> 0 < n)", "then"], ["proof (chain)\npicking this:\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n    (A = {} \\<and> 0 < n)", "by auto"], ["proof (state)\nthis:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n  (A = {} \\<and> 0 < n)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n       (A = {} \\<and> 0 < n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n       (A = {} \\<and> 0 < n)", "case (Suc n)"], ["proof (state)\nthis:\n  n = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n       (A = {} \\<and> 0 < n)", "then"], ["proof (chain)\npicking this:\n  n = Suc n", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc n\n\ngoal (1 subgoal):\n 1. ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n    (A = {} \\<and> 0 < n)", "by (auto simp only: lists_length_eq_Suc_eq_empty_iff)"], ["proof (state)\nthis:\n  ({xs. set xs \\<subseteq> A \\<and> length xs = n} = {}) =\n  (A = {} \\<and> 0 < n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_lists_length_eq_iff:\n  \"finite {xs. set xs \\<subseteq> A \\<and> length xs = n} \\<longleftrightarrow> (finite A \\<or> n = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {xs. set xs \\<subseteq> A \\<and> length xs = n} =\n    (finite A \\<or> n = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {xs. set xs \\<subseteq> A \\<and> length xs = n} \\<Longrightarrow>\n    finite A \\<or> n = 0\n 2. finite A \\<or> n = 0 \\<Longrightarrow>\n    finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "assume \"finite {xs. set xs \\<subseteq> A \\<and> length xs = n}\""], ["proof (state)\nthis:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = n}\n\ngoal (2 subgoals):\n 1. finite {xs. set xs \\<subseteq> A \\<and> length xs = n} \\<Longrightarrow>\n    finite A \\<or> n = 0\n 2. finite A \\<or> n = 0 \\<Longrightarrow>\n    finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "from this"], ["proof (chain)\npicking this:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "show \"finite A \\<or> n = 0\""], ["proof (prove)\nusing this:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = n}\n\ngoal (1 subgoal):\n 1. finite A \\<or> n = 0", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {xs. set xs \\<subseteq> A \\<and> length xs = 0} \\<Longrightarrow>\n    finite A \\<or> 0 = 0\n 2. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "case 0"], ["proof (state)\nthis:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = 0}\n\ngoal (2 subgoals):\n 1. finite {xs. set xs \\<subseteq> A \\<and> length xs = 0} \\<Longrightarrow>\n    finite A \\<or> 0 = 0\n 2. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "then"], ["proof (chain)\npicking this:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = 0}", "show ?case"], ["proof (prove)\nusing this:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = 0}\n\ngoal (1 subgoal):\n 1. finite A \\<or> 0 = 0", "by simp"], ["proof (state)\nthis:\n  finite A \\<or> 0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "case (Suc n)"], ["proof (state)\nthis:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = n} \\<Longrightarrow>\n  finite A \\<or> n = 0\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "have \"inj (\\<lambda>(x, xs). x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>(x, xs). x # xs)", "by (auto intro: inj_onI)"], ["proof (state)\nthis:\n  inj (\\<lambda>(x, xs). x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "from this Suc(2)"], ["proof (chain)\npicking this:\n  inj (\\<lambda>(x, xs). x # xs)\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}", "have \"finite (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\""], ["proof (prove)\nusing this:\n  inj (\\<lambda>(x, xs). x # xs)\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n\ngoal (1 subgoal):\n 1. finite (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "using finite_imageD inj_on_subset subset_UNIV lists_length_eq_Suc_eq_image_Cons[of A n]"], ["proof (prove)\nusing this:\n  inj (\\<lambda>(x, xs). x # xs)\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  \\<lbrakk>inj_on ?f ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> inj_on ?f ?B\n  ?A \\<subseteq> UNIV\n  {xs. set xs \\<subseteq> A \\<and> length xs = Suc n} =\n  (\\<lambda>(x, xs). x # xs) `\n  (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n\ngoal (1 subgoal):\n 1. finite (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "by fastforce"], ["proof (state)\nthis:\n  finite (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "from this"], ["proof (chain)\npicking this:\n  finite (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})", "have \"finite A\""], ["proof (prove)\nusing this:\n  finite (A \\<times> {xs. set xs \\<subseteq> A \\<and> length xs = n})\n\ngoal (1 subgoal):\n 1. finite A", "by (cases \"A = {}\")\n        (auto simp only: lists_length_eq_eq_empty_iff dest: finite_cartesian_productD1)"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>finite\n                 {xs.\n                  set xs \\<subseteq> A \\<and>\n                  length xs = n} \\<Longrightarrow>\n                finite A \\<or> n = 0;\n        finite {xs. set xs \\<subseteq> A \\<and> length xs = Suc n}\\<rbrakk>\n       \\<Longrightarrow> finite A \\<or> Suc n = 0", "from this"], ["proof (chain)\npicking this:\n  finite A", "show ?case"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite A \\<or> Suc n = 0", "by auto"], ["proof (state)\nthis:\n  finite A \\<or> Suc n = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite A \\<or> n = 0\n\ngoal (1 subgoal):\n 1. finite A \\<or> n = 0 \\<Longrightarrow>\n    finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite A \\<or> n = 0 \\<Longrightarrow>\n    finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "assume \"finite A \\<or> n = 0\""], ["proof (state)\nthis:\n  finite A \\<or> n = 0\n\ngoal (1 subgoal):\n 1. finite A \\<or> n = 0 \\<Longrightarrow>\n    finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "from this"], ["proof (chain)\npicking this:\n  finite A \\<or> n = 0", "show \"finite {xs. set xs \\<subseteq> A \\<and> length xs = n}\""], ["proof (prove)\nusing this:\n  finite A \\<or> n = 0\n\ngoal (1 subgoal):\n 1. finite {xs. set xs \\<subseteq> A \\<and> length xs = n}", "by (auto intro: finite_lists_length_eq)"], ["proof (state)\nthis:\n  finite {xs. set xs \\<subseteq> A \\<and> length xs = n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_lists_length_eq:\n  shows \"card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\n 2. \\<not> ?P \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "assume \"finite B\""], ["proof (state)\nthis:\n  finite B\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\n 2. \\<not> ?P \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "then"], ["proof (chain)\npicking this:\n  finite B", "show ?thesis"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "by (rule card_lists_length_eq)"], ["proof (state)\nthis:\n  card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\n\ngoal (1 subgoal):\n 1. infinite B \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite B \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "assume \"infinite B\""], ["proof (state)\nthis:\n  infinite B\n\ngoal (1 subgoal):\n 1. infinite B \\<Longrightarrow>\n    card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "then"], ["proof (chain)\npicking this:\n  infinite B", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite B\n\ngoal (1 subgoal):\n 1. card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite B; ?P1\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n\n 2. \\<lbrakk>infinite B; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite B; ?P1\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n\n 2. \\<lbrakk>infinite B; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "from this"], ["proof (chain)\npicking this:\n  n = 0", "have \"{xs. set xs \\<subseteq> B \\<and> length xs = n} = {[]}\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. {xs. set xs \\<subseteq> B \\<and> length xs = n} = {[]}", "by auto"], ["proof (state)\nthis:\n  {xs. set xs \\<subseteq> B \\<and> length xs = n} = {[]}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite B; ?P1\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n\n 2. \\<lbrakk>infinite B; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "from this \\<open>n = 0\\<close>"], ["proof (chain)\npicking this:\n  {xs. set xs \\<subseteq> B \\<and> length xs = n} = {[]}\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  {xs. set xs \\<subseteq> B \\<and> length xs = n} = {[]}\n  n = 0\n\ngoal (1 subgoal):\n 1. card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "by simp"], ["proof (state)\nthis:\n  card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite B; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite B; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "assume \"n \\<noteq> 0\""], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite B; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "from this \\<open>infinite B\\<close>"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  infinite B", "have \"infinite {xs. set xs \\<subseteq> B \\<and> length xs = n}\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  infinite B\n\ngoal (1 subgoal):\n 1. infinite {xs. set xs \\<subseteq> B \\<and> length xs = n}", "by (simp add: finite_lists_length_eq_iff)"], ["proof (state)\nthis:\n  infinite {xs. set xs \\<subseteq> B \\<and> length xs = n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite B; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> card {xs. set xs \\<subseteq> B \\<and> length xs = n} =\n                      card B ^ n", "from this \\<open>infinite B\\<close>"], ["proof (chain)\npicking this:\n  infinite {xs. set xs \\<subseteq> B \\<and> length xs = n}\n  infinite B", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite {xs. set xs \\<subseteq> B \\<and> length xs = n}\n  infinite B\n\ngoal (1 subgoal):\n 1. card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n", "by auto"], ["proof (state)\nthis:\n  card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {xs. set xs \\<subseteq> B \\<and> length xs = n} = card B ^ n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Additions to Disjoint Set Theory\\<close>"], ["", "lemma bij_betw_congI:\n  assumes \"bij_betw f A A'\"\n  assumes \"\\<forall>a \\<in> A. f a = g a\"\n  shows \"bij_betw g A A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw g A A'", "using assms bij_betw_cong"], ["proof (prove)\nusing this:\n  bij_betw f A A'\n  \\<forall>a\\<in>A. f a = g a\n  (\\<And>a. a \\<in> ?A \\<Longrightarrow> ?f a = ?g a) \\<Longrightarrow>\n  bij_betw ?f ?A ?A' = bij_betw ?g ?A ?A'\n\ngoal (1 subgoal):\n 1. bij_betw g A A'", "by fastforce"], ["", "lemma disjoint_family_onI[intro]:\n  assumes \"\\<And>m n. m \\<in> S \\<Longrightarrow> n \\<in> S \\<Longrightarrow> m \\<noteq> n \\<Longrightarrow> A m \\<inter> A n = {}\"\n  shows \"disjoint_family_on A S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on A S", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m \\<in> S; ?n \\<in> S; ?m \\<noteq> ?n\\<rbrakk>\n  \\<Longrightarrow> A ?m \\<inter> A ?n = {}\n\ngoal (1 subgoal):\n 1. disjoint_family_on A S", "unfolding disjoint_family_on_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m \\<in> S; ?n \\<in> S; ?m \\<noteq> ?n\\<rbrakk>\n  \\<Longrightarrow> A ?m \\<inter> A ?n = {}\n\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>S.\n       \\<forall>n\\<in>S.\n          m \\<noteq> n \\<longrightarrow> A m \\<inter> A n = {}", "by simp"], ["", "text \\<open>\nThe following lemma is not needed for this development, but is useful\nand could be moved to Disjoint Set theory or Equiv Relation theory if\ntranslated from set partitions to equivalence relations.\n\\<close>"], ["", "lemma infinite_partition_on:\n  assumes \"infinite A\"\n  shows \"infinite {P. partition_on A P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "from \\<open>infinite A\\<close>"], ["proof (chain)\npicking this:\n  infinite A", "obtain x where \"x \\<in> A\""], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (meson finite.intros(1) finite_subset subsetI)"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "from \\<open>infinite A\\<close>"], ["proof (chain)\npicking this:\n  infinite A", "have \"infinite (A - {x})\""], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite (A - {x})", "by (simp add: infinite_remove)"], ["proof (state)\nthis:\n  infinite (A - {x})\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "define singletons_except_one\n    where \"singletons_except_one = (\\<lambda>a'. (\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\""], ["proof (state)\nthis:\n  singletons_except_one =\n  (\\<lambda>a'. (\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "have \"infinite (singletons_except_one ` (A - {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (singletons_except_one ` (A - {x}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite (singletons_except_one ` (A - {x}))", "have \"inj_on singletons_except_one (A - {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on singletons_except_one (A - {x})", "unfolding singletons_except_one_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on\n     (\\<lambda>a'. (\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\n     (A - {x})", "by (rule inj_onI) auto"], ["proof (state)\nthis:\n  inj_on singletons_except_one (A - {x})\n\ngoal (1 subgoal):\n 1. infinite (singletons_except_one ` (A - {x}))", "from \\<open>infinite (A - {x})\\<close> this"], ["proof (chain)\npicking this:\n  infinite (A - {x})\n  inj_on singletons_except_one (A - {x})", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite (A - {x})\n  inj_on singletons_except_one (A - {x})\n\ngoal (1 subgoal):\n 1. infinite (singletons_except_one ` (A - {x}))", "using finite_imageD"], ["proof (prove)\nusing this:\n  infinite (A - {x})\n  inj_on singletons_except_one (A - {x})\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. infinite (singletons_except_one ` (A - {x}))", "by blast"], ["proof (state)\nthis:\n  infinite (singletons_except_one ` (A - {x}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  infinite (singletons_except_one ` (A - {x}))\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "moreover"], ["proof (state)\nthis:\n  infinite (singletons_except_one ` (A - {x}))\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "have \"singletons_except_one ` (A - {x}) \\<subseteq> {P. partition_on A P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. singletons_except_one ` (A - {x}) \\<subseteq> {P. partition_on A P}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> singletons_except_one ` (A - {x}) \\<Longrightarrow>\n       xa \\<in> {P. partition_on A P}", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> singletons_except_one ` (A - {x}) \\<Longrightarrow>\n       xa \\<in> {P. partition_on A P}", "assume \"P \\<in> singletons_except_one ` (A - {x})\""], ["proof (state)\nthis:\n  P \\<in> singletons_except_one ` (A - {x})\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> singletons_except_one ` (A - {x}) \\<Longrightarrow>\n       xa \\<in> {P. partition_on A P}", "from this"], ["proof (chain)\npicking this:\n  P \\<in> singletons_except_one ` (A - {x})", "obtain a' where \"a' \\<in> A - {x}\" and P: \"P = singletons_except_one a'\""], ["proof (prove)\nusing this:\n  P \\<in> singletons_except_one ` (A - {x})\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>a' \\<in> A - {x}; P = singletons_except_one a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a' \\<in> A - {x}\n  P = singletons_except_one a'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> singletons_except_one ` (A - {x}) \\<Longrightarrow>\n       xa \\<in> {P. partition_on A P}", "have \"partition_on A ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partition_on A\n     ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))", "using \\<open>x \\<in> A\\<close> \\<open>a' \\<in> A - {x}\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> A\n  a' \\<in> A - {x}\n\ngoal (1 subgoal):\n 1. partition_on A\n     ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))", "by (auto intro: partition_onI)"], ["proof (state)\nthis:\n  partition_on A ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> singletons_except_one ` (A - {x}) \\<Longrightarrow>\n       xa \\<in> {P. partition_on A P}", "from this"], ["proof (chain)\npicking this:\n  partition_on A ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))", "have \"partition_on A P\""], ["proof (prove)\nusing this:\n  partition_on A ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\n\ngoal (1 subgoal):\n 1. partition_on A P", "unfolding P singletons_except_one_def"], ["proof (prove)\nusing this:\n  partition_on A ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))\n\ngoal (1 subgoal):\n 1. partition_on A\n     ((\\<lambda>a. if a = a' then {a, x} else {a}) ` (A - {x}))", "."], ["proof (state)\nthis:\n  partition_on A P\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> singletons_except_one ` (A - {x}) \\<Longrightarrow>\n       xa \\<in> {P. partition_on A P}", "from this"], ["proof (chain)\npicking this:\n  partition_on A P", "show \"P \\<in> {P. partition_on A P}\""], ["proof (prove)\nusing this:\n  partition_on A P\n\ngoal (1 subgoal):\n 1. P \\<in> {P. partition_on A P}", ".."], ["proof (state)\nthis:\n  P \\<in> {P. partition_on A P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  singletons_except_one ` (A - {x}) \\<subseteq> {P. partition_on A P}\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "ultimately"], ["proof (chain)\npicking this:\n  infinite (singletons_except_one ` (A - {x}))\n  singletons_except_one ` (A - {x}) \\<subseteq> {P. partition_on A P}", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite (singletons_except_one ` (A - {x}))\n  singletons_except_one ` (A - {x}) \\<subseteq> {P. partition_on A P}\n\ngoal (1 subgoal):\n 1. infinite {P. partition_on A P}", "by (simp add: infinite_super)"], ["proof (state)\nthis:\n  infinite {P. partition_on A P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finitely_many_partition_on_iff:\n  \"finite {P. partition_on A P} \\<longleftrightarrow> finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {P. partition_on A P} = finite A", "using finitely_many_partition_on infinite_partition_on"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> finite {P. partition_on ?A P}\n  infinite ?A \\<Longrightarrow> infinite {P. partition_on ?A P}\n\ngoal (1 subgoal):\n 1. finite {P. partition_on A P} = finite A", "by blast"], ["", "subsection \\<open>Additions to Multiset Theory\\<close>"], ["", "lemma mset_set_subseteq_mset_set:\n  assumes \"finite B\" \"A \\<subseteq> B\"\n  shows \"mset_set A \\<subseteq># mset_set B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "from \\<open>A \\<subseteq> B\\<close> \\<open>finite B\\<close>"], ["proof (chain)\npicking this:\n  A \\<subseteq> B\n  finite B", "have \"finite A\""], ["proof (prove)\nusing this:\n  A \\<subseteq> B\n  finite B\n\ngoal (1 subgoal):\n 1. finite A", "using finite_subset"], ["proof (prove)\nusing this:\n  A \\<subseteq> B\n  finite B\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite A", "by blast"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "{"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "have \"count (mset_set A) x \\<le> count (mset_set B) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset_set A) x \\<le> count (mset_set B) x", "using \\<open>finite A\\<close> \\<open>finite B\\<close> \\<open>A \\<subseteq> B\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. count (mset_set A) x \\<le> count (mset_set B) x", "by (metis count_mset_set(1, 3) eq_iff subsetCE zero_le_one)"], ["proof (state)\nthis:\n  count (mset_set A) x \\<le> count (mset_set B) x\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "}"], ["proof (state)\nthis:\n  count (mset_set A) ?x2 \\<le> count (mset_set B) ?x2\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "from this"], ["proof (chain)\npicking this:\n  count (mset_set A) ?x2 \\<le> count (mset_set B) ?x2", "show \"mset_set A \\<subseteq># mset_set B\""], ["proof (prove)\nusing this:\n  count (mset_set A) ?x2 \\<le> count (mset_set B) ?x2\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "using mset_subset_eqI"], ["proof (prove)\nusing this:\n  count (mset_set A) ?x2 \\<le> count (mset_set B) ?x2\n  (\\<And>a. count ?A a \\<le> count ?B a) \\<Longrightarrow>\n  ?A \\<subseteq># ?B\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set B", "by blast"], ["proof (state)\nthis:\n  mset_set A \\<subseteq># mset_set B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mset_set_set_mset:\n  assumes \"M \\<subseteq># mset_set A\"\n  shows \"mset_set (set_mset M) = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "from \\<open>M \\<subseteq># mset_set A\\<close>"], ["proof (chain)\npicking this:\n  M \\<subseteq># mset_set A", "have \"count M x \\<le> count (mset_set A) x\""], ["proof (prove)\nusing this:\n  M \\<subseteq># mset_set A\n\ngoal (1 subgoal):\n 1. count M x \\<le> count (mset_set A) x", "by (simp add: mset_subset_eq_count)"], ["proof (state)\nthis:\n  count M x \\<le> count (mset_set A) x\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "from this"], ["proof (chain)\npicking this:\n  count M x \\<le> count (mset_set A) x", "have \"count (mset_set (set_mset M)) x = count M x\""], ["proof (prove)\nusing this:\n  count M x \\<le> count (mset_set A) x\n\ngoal (1 subgoal):\n 1. count (mset_set (set_mset M)) x = count M x", "by (metis count_eq_zero_iff count_greater_eq_one_iff count_mset_set\n        dual_order.antisym dual_order.trans finite_set_mset)"], ["proof (state)\nthis:\n  count (mset_set (set_mset M)) x = count M x\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "}"], ["proof (state)\nthis:\n  count (mset_set (set_mset M)) ?x2 = count M ?x2\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "from this"], ["proof (chain)\npicking this:\n  count (mset_set (set_mset M)) ?x2 = count M ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  count (mset_set (set_mset M)) ?x2 = count M ?x2\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "by (simp add: multiset_eq_iff)"], ["proof (state)\nthis:\n  mset_set (set_mset M) = M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mset_set_set_mset':\n  assumes \"\\<forall>x. count M x \\<le> 1\"\n  shows \"mset_set (set_mset M) = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "from assms"], ["proof (chain)\npicking this:\n  \\<forall>x. count M x \\<le> 1", "have \"count M x = 0 \\<or> count M x = 1\""], ["proof (prove)\nusing this:\n  \\<forall>x. count M x \\<le> 1\n\ngoal (1 subgoal):\n 1. count M x = 0 \\<or> count M x = 1", "by (auto elim: le_SucE)"], ["proof (state)\nthis:\n  count M x = 0 \\<or> count M x = 1\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "from this"], ["proof (chain)\npicking this:\n  count M x = 0 \\<or> count M x = 1", "have \"count (mset_set (set_mset M)) x = count M x\""], ["proof (prove)\nusing this:\n  count M x = 0 \\<or> count M x = 1\n\ngoal (1 subgoal):\n 1. count (mset_set (set_mset M)) x = count M x", "by (metis count_eq_zero_iff count_mset_set(1,3) finite_set_mset)"], ["proof (state)\nthis:\n  count (mset_set (set_mset M)) x = count M x\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "}"], ["proof (state)\nthis:\n  count (mset_set (set_mset M)) ?x2 = count M ?x2\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "from this"], ["proof (chain)\npicking this:\n  count (mset_set (set_mset M)) ?x2 = count M ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  count (mset_set (set_mset M)) ?x2 = count M ?x2\n\ngoal (1 subgoal):\n 1. mset_set (set_mset M) = M", "by (simp add: multiset_eq_iff)"], ["proof (state)\nthis:\n  mset_set (set_mset M) = M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_set_mset:\n  assumes \"M \\<subseteq># mset_set A\"\n  shows \"card (set_mset M) = size M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set_mset M) = size M", "using assms"], ["proof (prove)\nusing this:\n  M \\<subseteq># mset_set A\n\ngoal (1 subgoal):\n 1. card (set_mset M) = size M", "by (metis mset_set_set_mset size_mset_set)"], ["", "lemma card_set_mset':\n  assumes \"\\<forall>x. count M x \\<le> 1\"\n  shows \"card (set_mset M) = size M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set_mset M) = size M", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x. count M x \\<le> 1\n\ngoal (1 subgoal):\n 1. card (set_mset M) = size M", "by (metis mset_set_set_mset' size_mset_set)"], ["", "lemma count_mset_set_leq:\n  assumes \"finite A\"\n  shows \"count (mset_set A) x \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset_set A) x \\<le> 1", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. count (mset_set A) x \\<le> 1", "by (metis count_mset_set(1,3) eq_iff zero_le_one)"], ["", "lemma count_mset_set_leq':\n  assumes \"finite A\"\n  shows \"count (mset_set A) x \\<le> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset_set A) x \\<le> Suc 0", "using assms count_mset_set_leq"], ["proof (prove)\nusing this:\n  finite A\n  finite ?A \\<Longrightarrow> count (mset_set ?A) ?x \\<le> 1\n\ngoal (1 subgoal):\n 1. count (mset_set A) x \\<le> Suc 0", "by fastforce"], ["", "lemma msubset_mset_set_iff:\n  assumes \"finite A\"\n  shows \"set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1) \\<longleftrightarrow> (M \\<subseteq># mset_set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)) =\n    (M \\<subseteq># mset_set A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set_mset M \\<subseteq> A \\<and>\n    (\\<forall>x. count M x \\<le> 1) \\<Longrightarrow>\n    M \\<subseteq># mset_set A\n 2. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "assume \"set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)\""], ["proof (state)\nthis:\n  set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)\n\ngoal (2 subgoals):\n 1. set_mset M \\<subseteq> A \\<and>\n    (\\<forall>x. count M x \\<le> 1) \\<Longrightarrow>\n    M \\<subseteq># mset_set A\n 2. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "from this assms"], ["proof (chain)\npicking this:\n  set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)\n  finite A", "show \"M \\<subseteq># mset_set A\""], ["proof (prove)\nusing this:\n  set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)\n  finite A\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A", "by (metis count_inI count_mset_set(1) le0 mset_subset_eqI subsetCE)"], ["proof (state)\nthis:\n  M \\<subseteq># mset_set A\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "assume \"M \\<subseteq># mset_set A\""], ["proof (state)\nthis:\n  M \\<subseteq># mset_set A\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "from this assms"], ["proof (chain)\npicking this:\n  M \\<subseteq># mset_set A\n  finite A", "have \"set_mset M \\<subseteq> A\""], ["proof (prove)\nusing this:\n  M \\<subseteq># mset_set A\n  finite A\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> A", "using mset_subset_eqD"], ["proof (prove)\nusing this:\n  M \\<subseteq># mset_set A\n  finite A\n  \\<lbrakk>?A \\<subseteq># ?B; ?x \\<in># ?A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in># ?B\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> A", "by fastforce"], ["proof (state)\nthis:\n  set_mset M \\<subseteq> A\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "moreover"], ["proof (state)\nthis:\n  set_mset M \\<subseteq> A\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "{"], ["proof (state)\nthis:\n  set_mset M \\<subseteq> A\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "from \\<open>M \\<subseteq># mset_set A\\<close>"], ["proof (chain)\npicking this:\n  M \\<subseteq># mset_set A", "have \"count M x \\<le> count (mset_set A) x\""], ["proof (prove)\nusing this:\n  M \\<subseteq># mset_set A\n\ngoal (1 subgoal):\n 1. count M x \\<le> count (mset_set A) x", "by (simp add: mset_subset_eq_count)"], ["proof (state)\nthis:\n  count M x \\<le> count (mset_set A) x\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "from this \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  count M x \\<le> count (mset_set A) x\n  finite A", "have \"count M x \\<le> 1\""], ["proof (prove)\nusing this:\n  count M x \\<le> count (mset_set A) x\n  finite A\n\ngoal (1 subgoal):\n 1. count M x \\<le> 1", "by (meson count_mset_set_leq le_trans)"], ["proof (state)\nthis:\n  count M x \\<le> 1\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "}"], ["proof (state)\nthis:\n  count M ?x2 \\<le> 1\n\ngoal (1 subgoal):\n 1. M \\<subseteq># mset_set A \\<Longrightarrow>\n    set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "ultimately"], ["proof (chain)\npicking this:\n  set_mset M \\<subseteq> A\n  count M ?x2 \\<le> 1", "show \"set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)\""], ["proof (prove)\nusing this:\n  set_mset M \\<subseteq> A\n  count M ?x2 \\<le> 1\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)", "by simp"], ["proof (state)\nthis:\n  set_mset M \\<subseteq> A \\<and> (\\<forall>x. count M x \\<le> 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma image_mset_fun_upd:\n  assumes \"x \\<notin># M\"\n  shows \"image_mset (f(x := y)) M = image_mset f M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset (f(x := y)) M = image_mset f M", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin># M\n\ngoal (1 subgoal):\n 1. image_mset (f(x := y)) M = image_mset f M", "by (induct M) auto"], ["", "subsection \\<open>Additions to Number Partitions Theory\\<close>"], ["", "lemma Partition_diag:\n  shows \"Partition n n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Partition n n = 1", "by (cases n) (auto simp only: Partition_diag Partition.simps(1))"], ["", "subsection \\<open>Cardinality Theorems with Iverson Function\\<close>"], ["", "definition iverson :: \"bool \\<Rightarrow> nat\"\nwhere\n  \"iverson b = (if b then 1 else 0)\""], ["", "lemma card_partition_on_size1_eq_iverson:\n  assumes \"finite A\"\n  shows \"card {P. partition_on A P \\<and> card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} = iverson (card A \\<le> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "proof (cases \"card A \\<le> k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)\n 2. \\<not> card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "case True"], ["proof (state)\nthis:\n  card A \\<le> k\n\ngoal (2 subgoals):\n 1. card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)\n 2. \\<not> card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "from this \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  card A \\<le> k\n  finite A", "show ?thesis"], ["proof (prove)\nusing this:\n  card A \\<le> k\n  finite A\n\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  card A \\<le> k\n  finite A\n\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    (if card A \\<le> k then 1 else 0)", "using card_partition_on_size1_eq_1"], ["proof (prove)\nusing this:\n  card A \\<le> k\n  finite A\n  \\<lbrakk>finite ?A; card ?A \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> card\n                     {P. partition_on ?A P \\<and>\n                         card P \\<le> ?k \\<and>\n                         (\\<forall>X\\<in>P. card X = 1)} =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    (if card A \\<le> k then 1 else 0)", "by fastforce"], ["proof (state)\nthis:\n  card\n   {P. partition_on A P \\<and>\n       card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n  iverson (card A \\<le> k)\n\ngoal (1 subgoal):\n 1. \\<not> card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "case False"], ["proof (state)\nthis:\n  \\<not> card A \\<le> k\n\ngoal (1 subgoal):\n 1. \\<not> card A \\<le> k \\<Longrightarrow>\n    card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "from this \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  \\<not> card A \\<le> k\n  finite A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> card A \\<le> k\n  finite A\n\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    iverson (card A \\<le> k)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  \\<not> card A \\<le> k\n  finite A\n\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    (if card A \\<le> k then 1 else 0)", "using card_partition_on_size1_eq_0"], ["proof (prove)\nusing this:\n  \\<not> card A \\<le> k\n  finite A\n  \\<lbrakk>finite ?A; ?k < card ?A\\<rbrakk>\n  \\<Longrightarrow> card\n                     {P. partition_on ?A P \\<and>\n                         card P \\<le> ?k \\<and>\n                         (\\<forall>X\\<in>P. card X = 1)} =\n                    0\n\ngoal (1 subgoal):\n 1. card\n     {P. partition_on A P \\<and>\n         card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n    (if card A \\<le> k then 1 else 0)", "by fastforce"], ["proof (state)\nthis:\n  card\n   {P. partition_on A P \\<and>\n       card P \\<le> k \\<and> (\\<forall>X\\<in>P. card X = 1)} =\n  iverson (card A \\<le> k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_number_partitions_with_only_parts_1:\n  \"card {N. (\\<forall>n. n\\<in># N \\<longrightarrow> n = 1) \\<and> number_partition n N \\<and> size N \\<le> x} = iverson (n \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "assume \"n \\<le> x\""], ["proof (state)\nthis:\n  n \\<le> x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)\n 2. \\<not> ?P \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "from this"], ["proof (chain)\npicking this:\n  n \\<le> x", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> x\n\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "using card_number_partitions_with_only_parts_1_eq_1"], ["proof (prove)\nusing this:\n  n \\<le> x\n  ?n \\<le> ?x \\<Longrightarrow>\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition ?n N \\<and> size N \\<le> ?x} =\n  1\n\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  n \\<le> x\n  ?n \\<le> ?x \\<Longrightarrow>\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition ?n N \\<and> size N \\<le> ?x} =\n  1\n\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    (if n \\<le> x then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition n N \\<and> size N \\<le> x} =\n  iverson (n \\<le> x)\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> x \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> x \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "assume \"\\<not> n \\<le> x\""], ["proof (state)\nthis:\n  \\<not> n \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> x \\<Longrightarrow>\n    card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "from this"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> x\n\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "using card_number_partitions_with_only_parts_1_eq_0"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> x\n  ?x < ?n \\<Longrightarrow>\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition ?n N \\<and> size N \\<le> ?x} =\n  0\n\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    iverson (n \\<le> x)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> x\n  ?x < ?n \\<Longrightarrow>\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition ?n N \\<and> size N \\<le> ?x} =\n  0\n\ngoal (1 subgoal):\n 1. card\n     {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n         number_partition n N \\<and> size N \\<le> x} =\n    (if n \\<le> x then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition n N \\<and> size N \\<le> x} =\n  iverson (n \\<le> x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card\n   {N. (\\<forall>n. n \\<in># N \\<longrightarrow> n = 1) \\<and>\n       number_partition n N \\<and> size N \\<le> x} =\n  iverson (n \\<le> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}