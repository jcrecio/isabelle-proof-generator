{"file_name": "/home/qj213/afp-2021-10-22/thys/Twelvefold_Way/Twelvefold_Way_Entry3.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Twelvefold_Way", "problem_names": ["lemma card_of_equiv_class:\n  assumes \"finite B\"\n  assumes \"F \\<in> {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\"\n  shows \"card F = fact (card B)\"", "lemma card_extensional_funcset_surj_on:\n  assumes \"finite A\" \"finite B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} = fact (card B) * Stirling (card A) (card B)\" (is \"card ?F = _\")"], "translations": [["", "lemma card_of_equiv_class:\n  assumes \"finite B\"\n  assumes \"F \\<in> {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\"\n  shows \"card F = fact (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card F = fact (card B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card F = fact (card B)", "from \\<open>F \\<in> {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\\<close>"], ["proof (chain)\npicking this:\n  F \\<in> {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n          range_permutation A B", "obtain f where\n    \"f \\<in> A \\<rightarrow>\\<^sub>E B\" and \"f ` A = B\"\n    and F_eq: \"F = range_permutation A B `` {f}\""], ["proof (prove)\nusing this:\n  F \\<in> {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n          range_permutation A B\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>E B; f ` A = B;\n         F = range_permutation A B `` {f}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using quotientE"], ["proof (prove)\nusing this:\n  F \\<in> {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n          range_permutation A B\n  \\<lbrakk>?X \\<in> ?A // ?r;\n   \\<And>x.\n      \\<lbrakk>?X = ?r `` {x}; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>E B; f ` A = B;\n         F = range_permutation A B `` {f}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  f ` A = B\n  F = range_permutation A B `` {f}\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "have set_eq: \"range_permutation A B `` {f} = (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) ` {p. p permutes B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range_permutation A B `` {f} =\n    (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. range_permutation A B `` {f}\n    \\<subseteq> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n                {p. p permutes B}\n 2. (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}\n    \\<subseteq> range_permutation A B `` {f}", "show \"range_permutation A B `` {f} \\<subseteq> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) ` {p. p permutes B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range_permutation A B `` {f}\n    \\<subseteq> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n                {p. p permutes B}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "fix f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "assume \"f' \\<in> range_permutation A B `` {f}\""], ["proof (state)\nthis:\n  f' \\<in> range_permutation A B `` {f}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "from this"], ["proof (chain)\npicking this:\n  f' \\<in> range_permutation A B `` {f}", "obtain p where \"p permutes B\" \"\\<forall>x\\<in>A. f x = p (f' x)\""], ["proof (prove)\nusing this:\n  f' \\<in> range_permutation A B `` {f}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p permutes B; \\<forall>x\\<in>A. f x = p (f' x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding range_permutation_def"], ["proof (prove)\nusing this:\n  f' \\<in> {(f, f').\n            (f, f')\n            \\<in> (A \\<rightarrow>\\<^sub>E B) \\<times>\n                  (A \\<rightarrow>\\<^sub>E B) \\<and>\n            (\\<exists>p.\n                p permutes B \\<and> (\\<forall>x\\<in>A. f x = p (f' x)))} ``\n           {f}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p permutes B; \\<forall>x\\<in>A. f x = p (f' x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p permutes B\n  \\<forall>x\\<in>A. f x = p (f' x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "from \\<open>f' \\<in> range_permutation A B `` {f}\\<close>"], ["proof (chain)\npicking this:\n  f' \\<in> range_permutation A B `` {f}", "have \"f' \\<in> A \\<rightarrow>\\<^sub>E B\""], ["proof (prove)\nusing this:\n  f' \\<in> range_permutation A B `` {f}\n\ngoal (1 subgoal):\n 1. f' \\<in> A \\<rightarrow>\\<^sub>E B", "unfolding range_permutation_def"], ["proof (prove)\nusing this:\n  f' \\<in> {(f, f').\n            (f, f')\n            \\<in> (A \\<rightarrow>\\<^sub>E B) \\<times>\n                  (A \\<rightarrow>\\<^sub>E B) \\<and>\n            (\\<exists>p.\n                p permutes B \\<and> (\\<forall>x\\<in>A. f x = p (f' x)))} ``\n           {f}\n\ngoal (1 subgoal):\n 1. f' \\<in> A \\<rightarrow>\\<^sub>E B", "by auto"], ["proof (state)\nthis:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "have \"f' = (\\<lambda>x. if x \\<in> A then inv p (f x) else undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' = (\\<lambda>x. if x \\<in> A then inv p (f x) else undefined)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. f' x = (if x \\<in> A then inv p (f x) else undefined)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. f' x = (if x \\<in> A then inv p (f x) else undefined)", "show \"f' x = (if x \\<in> A then inv p (f x) else undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' x = (if x \\<in> A then inv p (f x) else undefined)", "using \\<open>f \\<in> A \\<rightarrow>\\<^sub>E B\\<close> \\<open>f' \\<in> A \\<rightarrow>\\<^sub>E B\\<close> \\<open>\\<forall>x\\<in>A. f x = p (f' x)\\<close>\n            \\<open>p permutes B\\<close> permutes_inverses(2)"], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n  \\<forall>x\\<in>A. f x = p (f' x)\n  p permutes B\n  ?p permutes ?S \\<Longrightarrow> inv ?p (?p ?x) = ?x\n\ngoal (1 subgoal):\n 1. f' x = (if x \\<in> A then inv p (f x) else undefined)", "by fastforce"], ["proof (state)\nthis:\n  f' x = (if x \\<in> A then inv p (f x) else undefined)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f' = (\\<lambda>x. if x \\<in> A then inv p (f x) else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "moreover"], ["proof (state)\nthis:\n  f' = (\\<lambda>x. if x \\<in> A then inv p (f x) else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "have \"inv p permutes B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv p permutes B", "using \\<open>p permutes B\\<close>"], ["proof (prove)\nusing this:\n  p permutes B\n\ngoal (1 subgoal):\n 1. inv p permutes B", "by (simp add: permutes_inv)"], ["proof (state)\nthis:\n  inv p permutes B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range_permutation A B `` {f} \\<Longrightarrow>\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B}", "ultimately"], ["proof (chain)\npicking this:\n  f' = (\\<lambda>x. if x \\<in> A then inv p (f x) else undefined)\n  inv p permutes B", "show \"f' \\<in> (\\<lambda>p. (\\<lambda>x. if x \\<in> A then p (f x) else undefined)) ` {p. p permutes B}\""], ["proof (prove)\nusing this:\n  f' = (\\<lambda>x. if x \\<in> A then inv p (f x) else undefined)\n  inv p permutes B\n\ngoal (1 subgoal):\n 1. f' \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n             {p. p permutes B}", "by auto"], ["proof (state)\nthis:\n  f' \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n           {p. p permutes B}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range_permutation A B `` {f}\n  \\<subseteq> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n              {p. p permutes B}\n\ngoal (1 subgoal):\n 1. (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}\n    \\<subseteq> range_permutation A B `` {f}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}\n    \\<subseteq> range_permutation A B `` {f}", "show \"(\\<lambda>p x. if x \\<in> A then p (f x) else undefined) ` {p. p permutes B} \\<subseteq> range_permutation A B `` {f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}\n    \\<subseteq> range_permutation A B `` {f}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "fix f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "assume \"f' \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) ` {p. p permutes B}\""], ["proof (state)\nthis:\n  f' \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n           {p. p permutes B}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "from this"], ["proof (chain)\npicking this:\n  f' \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n           {p. p permutes B}", "obtain p where \"p permutes B\" and f'_eq: \"f' = (\\<lambda>x. if x \\<in> A then p (f x) else undefined)\""], ["proof (prove)\nusing this:\n  f' \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n           {p. p permutes B}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p permutes B;\n         f' =\n         (\\<lambda>x. if x \\<in> A then p (f x) else undefined)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p permutes B\n  f' = (\\<lambda>x. if x \\<in> A then p (f x) else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "from this"], ["proof (chain)\npicking this:\n  p permutes B\n  f' = (\\<lambda>x. if x \\<in> A then p (f x) else undefined)", "have \"f' \\<in> A \\<rightarrow>\\<^sub>E B\""], ["proof (prove)\nusing this:\n  p permutes B\n  f' = (\\<lambda>x. if x \\<in> A then p (f x) else undefined)\n\ngoal (1 subgoal):\n 1. f' \\<in> A \\<rightarrow>\\<^sub>E B", "using \\<open>f \\<in> A \\<rightarrow>\\<^sub>E B\\<close> permutes_in_image"], ["proof (prove)\nusing this:\n  p permutes B\n  f' = (\\<lambda>x. if x \\<in> A then p (f x) else undefined)\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  ?p permutes ?S \\<Longrightarrow> (?p ?x \\<in> ?S) = (?x \\<in> ?S)\n\ngoal (1 subgoal):\n 1. f' \\<in> A \\<rightarrow>\\<^sub>E B", "by fastforce"], ["proof (state)\nthis:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "moreover"], ["proof (state)\nthis:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "have \"inv p permutes B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv p permutes B", "using \\<open>p permutes B\\<close>"], ["proof (prove)\nusing this:\n  p permutes B\n\ngoal (1 subgoal):\n 1. inv p permutes B", "by (simp add: permutes_inv)"], ["proof (state)\nthis:\n  inv p permutes B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "moreover"], ["proof (state)\nthis:\n  inv p permutes B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "have \"\\<forall>x\\<in>A. f x = inv p (f' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x = inv p (f' x)", "using \\<open>f \\<in> A \\<rightarrow>\\<^sub>E B\\<close> \\<open>f' \\<in> A \\<rightarrow>\\<^sub>E B\\<close> f'_eq\n          \\<open>p permutes B\\<close> permutes_inverses(2)"], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n  f' = (\\<lambda>x. if x \\<in> A then p (f x) else undefined)\n  p permutes B\n  ?p permutes ?S \\<Longrightarrow> inv ?p (?p ?x) = ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x = inv p (f' x)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>A. f x = inv p (f' x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> range_permutation A B `` {f}", "ultimately"], ["proof (chain)\npicking this:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n  inv p permutes B\n  \\<forall>x\\<in>A. f x = inv p (f' x)", "show \"f' \\<in> range_permutation A B `` {f}\""], ["proof (prove)\nusing this:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n  inv p permutes B\n  \\<forall>x\\<in>A. f x = inv p (f' x)\n\ngoal (1 subgoal):\n 1. f' \\<in> range_permutation A B `` {f}", "using \\<open>f \\<in> A \\<rightarrow>\\<^sub>E B\\<close>"], ["proof (prove)\nusing this:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n  inv p permutes B\n  \\<forall>x\\<in>A. f x = inv p (f' x)\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. f' \\<in> range_permutation A B `` {f}", "unfolding range_permutation_def"], ["proof (prove)\nusing this:\n  f' \\<in> A \\<rightarrow>\\<^sub>E B\n  inv p permutes B\n  \\<forall>x\\<in>A. f x = inv p (f' x)\n  f \\<in> A \\<rightarrow>\\<^sub>E B\n\ngoal (1 subgoal):\n 1. f' \\<in> {(f, f').\n              (f, f')\n              \\<in> (A \\<rightarrow>\\<^sub>E B) \\<times>\n                    (A \\<rightarrow>\\<^sub>E B) \\<and>\n              (\\<exists>p.\n                  p permutes B \\<and>\n                  (\\<forall>x\\<in>A. f x = p (f' x)))} ``\n             {f}", "by auto"], ["proof (state)\nthis:\n  f' \\<in> range_permutation A B `` {f}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n  {p. p permutes B}\n  \\<subseteq> range_permutation A B `` {f}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range_permutation A B `` {f} =\n  (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n  {p. p permutes B}\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "have \"inj_on (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) {p. p permutes B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>p x. if x \\<in> A then p (f x) else undefined)\n     {p. p permutes B}", "proof (rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix p p'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"p \\<in> {p. p permutes B}\" \"p' \\<in> {p. p permutes B}\"\n      and eq: \"(\\<lambda>x. if x \\<in> A then p (f x) else undefined) = (\\<lambda>x. if x \\<in> A then p' (f x) else undefined)\""], ["proof (state)\nthis:\n  p \\<in> {p. p permutes B}\n  p' \\<in> {p. p permutes B}\n  (\\<lambda>x. if x \\<in> A then p (f x) else undefined) =\n  (\\<lambda>x. if x \\<in> A then p' (f x) else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  p \\<in> {p. p permutes B}\n  p' \\<in> {p. p permutes B}\n  (\\<lambda>x. if x \\<in> A then p (f x) else undefined) =\n  (\\<lambda>x. if x \\<in> A then p' (f x) else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"p x = p' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p x = p' x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> p x = p' x\n 2. \\<not> ?P \\<Longrightarrow> p x = p' x", "assume \"x \\<in> B\""], ["proof (state)\nthis:\n  x \\<in> B\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> p x = p' x\n 2. \\<not> ?P \\<Longrightarrow> p x = p' x", "from this"], ["proof (chain)\npicking this:\n  x \\<in> B", "obtain y where \"y \\<in> A\" and \"x = f y\""], ["proof (prove)\nusing this:\n  x \\<in> B\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> A; x = f y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>f ` A = B\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> B\n  f ` A = B\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> A; x = f y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y \\<in> A\n  x = f y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> p x = p' x\n 2. \\<not> ?P \\<Longrightarrow> p x = p' x", "from eq this"], ["proof (chain)\npicking this:\n  (\\<lambda>x. if x \\<in> A then p (f x) else undefined) =\n  (\\<lambda>x. if x \\<in> A then p' (f x) else undefined)\n  y \\<in> A\n  x = f y", "have \"p (f y) = p' (f y)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. if x \\<in> A then p (f x) else undefined) =\n  (\\<lambda>x. if x \\<in> A then p' (f x) else undefined)\n  y \\<in> A\n  x = f y\n\ngoal (1 subgoal):\n 1. p (f y) = p' (f y)", "by meson"], ["proof (state)\nthis:\n  p (f y) = p' (f y)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> p x = p' x\n 2. \\<not> ?P \\<Longrightarrow> p x = p' x", "from this \\<open>x = f y\\<close>"], ["proof (chain)\npicking this:\n  p (f y) = p' (f y)\n  x = f y", "show \"p x = p' x\""], ["proof (prove)\nusing this:\n  p (f y) = p' (f y)\n  x = f y\n\ngoal (1 subgoal):\n 1. p x = p' x", "by simp"], ["proof (state)\nthis:\n  p x = p' x\n\ngoal (1 subgoal):\n 1. x \\<notin> B \\<Longrightarrow> p x = p' x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> B \\<Longrightarrow> p x = p' x", "assume \"x \\<notin> B\""], ["proof (state)\nthis:\n  x \\<notin> B\n\ngoal (1 subgoal):\n 1. x \\<notin> B \\<Longrightarrow> p x = p' x", "from this"], ["proof (chain)\npicking this:\n  x \\<notin> B", "show \"p x = p' x\""], ["proof (prove)\nusing this:\n  x \\<notin> B\n\ngoal (1 subgoal):\n 1. p x = p' x", "using \\<open>p \\<in> {p. p permutes B}\\<close> \\<open>p' \\<in> {p. p permutes B}\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> B\n  p \\<in> {p. p permutes B}\n  p' \\<in> {p. p permutes B}\n\ngoal (1 subgoal):\n 1. p x = p' x", "by (simp add: permutes_def)"], ["proof (state)\nthis:\n  p x = p' x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p x = p' x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "}"], ["proof (state)\nthis:\n  p ?x2 = p' ?x2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {p. p permutes B}; y \\<in> {p. p permutes B};\n        (\\<lambda>xa. if xa \\<in> A then x (f xa) else undefined) =\n        (\\<lambda>x. if x \\<in> A then y (f x) else undefined)\\<rbrakk>\n       \\<Longrightarrow> x = y", "from this"], ["proof (chain)\npicking this:\n  p ?x2 = p' ?x2", "show \"p = p'\""], ["proof (prove)\nusing this:\n  p ?x2 = p' ?x2\n\ngoal (1 subgoal):\n 1. p = p'", "by auto"], ["proof (state)\nthis:\n  p = p'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>p x. if x \\<in> A then p (f x) else undefined)\n   {p. p permutes B}\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "have \"card F = card ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) ` {p. p permutes B})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card F =\n    card\n     ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n      {p. p permutes B})", "unfolding F_eq set_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n      {p. p permutes B}) =\n    card\n     ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n      {p. p permutes B})", ".."], ["proof (state)\nthis:\n  card F =\n  card\n   ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B})\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "also"], ["proof (state)\nthis:\n  card F =\n  card\n   ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B})\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "have \"\\<dots> = card {p. p permutes B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n      {p. p permutes B}) =\n    card {p. p permutes B}", "using \\<open>inj_on (\\<lambda>p x. if x \\<in> A then p (f x) else undefined) {p. p permutes B}\\<close>"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>p x. if x \\<in> A then p (f x) else undefined)\n   {p. p permutes B}\n\ngoal (1 subgoal):\n 1. card\n     ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n      {p. p permutes B}) =\n    card {p. p permutes B}", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card\n   ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}) =\n  card {p. p permutes B}\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "also"], ["proof (state)\nthis:\n  card\n   ((\\<lambda>p x. if x \\<in> A then p (f x) else undefined) `\n    {p. p permutes B}) =\n  card {p. p permutes B}\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "have \"\\<dots> = fact (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {p. p permutes B} = fact (card B)", "using \\<open>finite B\\<close>"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. card {p. p permutes B} = fact (card B)", "by (simp add: card_permutations)"], ["proof (state)\nthis:\n  card {p. p permutes B} = fact (card B)\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "finally"], ["proof (chain)\npicking this:\n  card F = fact (card B)", "show ?thesis"], ["proof (prove)\nusing this:\n  card F = fact (card B)\n\ngoal (1 subgoal):\n 1. card F = fact (card B)", "."], ["proof (state)\nthis:\n  card F = fact (card B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_extensional_funcset_surj_on:\n  assumes \"finite A\" \"finite B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} = fact (card B) * Stirling (card A) (card B)\" (is \"card ?F = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) * Stirling (card A) (card B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) * Stirling (card A) (card B)", "have \"card ?F = fact (card B) * card (?F // range_permutation A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) *\n    card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n      range_permutation A B)", "using \\<open>finite B\\<close>"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) *\n    card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n      range_permutation A B)", "by (simp only: card_equiv_class_restricted_same_size[OF equiv_range_permutation surj_on_respects_range_permutation card_of_equiv_class])"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n  fact (card B) *\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) * Stirling (card A) (card B)", "also"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n  fact (card B) *\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) * Stirling (card A) (card B)", "have \"\\<dots> = fact (card B) * Stirling (card A) (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact (card B) *\n    card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n      range_permutation A B) =\n    fact (card B) * Stirling (card A) (card B)", "using \\<open>finite A\\<close> \\<open>finite B\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. fact (card B) *\n    card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n      range_permutation A B) =\n    fact (card B) * Stirling (card A) (card B)", "by (simp only: card_surjective_functions_range_permutation)"], ["proof (state)\nthis:\n  fact (card B) *\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n    range_permutation A B) =\n  fact (card B) * Stirling (card A) (card B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) * Stirling (card A) (card B)", "finally"], ["proof (chain)\npicking this:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n  fact (card B) * Stirling (card A) (card B)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n  fact (card B) * Stirling (card A) (card B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n    fact (card B) * Stirling (card A) (card B)", "."], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} =\n  fact (card B) * Stirling (card A) (card B)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}