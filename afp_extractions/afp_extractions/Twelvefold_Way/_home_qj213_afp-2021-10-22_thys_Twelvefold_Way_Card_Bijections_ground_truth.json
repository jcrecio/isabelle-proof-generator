{"file_name": "/home/qj213/afp-2021-10-22/thys/Twelvefold_Way/Card_Bijections.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Twelvefold_Way", "problem_names": ["lemma bij_betw_set_is_empty:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = {}\"", "lemma card_bijections_eq_zero:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A \\<noteq> card B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = 0\"", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\"", "lemma card_bijections:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\"", "lemma bij_betw_quotient_domain_permutation_eq_empty:\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B = {}\"", "lemma card_bijections_domain_permutation_eq_0:\n  assumes \"card A \\<noteq> card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = 0\"", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = 1\"", "lemma card_bijections_domain_permutation_eq_1:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = 1\"", "lemma card_bijections_domain_permutation:\n  assumes \"finite A\" \"finite B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = iverson (card A = card B)\"", "lemma bij_betw_quotient_range_permutation_eq_empty:\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B = {}\"", "lemma card_bijections_range_permutation_eq_0:\n  assumes \"card A \\<noteq> card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = 0\"", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = 1\"", "lemma card_bijections_range_permutation_eq_1:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = 1\"", "lemma card_bijections_range_permutation:\n  assumes \"finite A\" \"finite B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = iverson (card A = card B)\"", "lemma bij_betw_quotient_domain_and_range_permutation_eq_empty:\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B = {}\"", "lemma card_bijections_domain_and_range_permutation_eq_0:\n  assumes \"card A \\<noteq> card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = 0\"", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = 1\"", "lemma card_bijections_domain_and_range_permutation_eq_1:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = 1\"", "lemma card_bijections_domain_and_range_permutation:\n  assumes \"finite A\" \"finite B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = iverson (card A = card B)\""], "translations": [["", "lemma bij_betw_set_is_empty:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = {}", "using assms bij_betw_same_card"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A \\<noteq> card B\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = {}", "by blast"], ["", "lemma card_bijections_eq_zero:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A \\<noteq> card B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = 0", "using bij_betw_set_is_empty[OF assms]"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = {}\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = 0", "by (simp only: card.empty)"], ["", "text \\<open>Two alternative proofs for the cardinality of bijections up to a permutation on A.\\<close>"], ["", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "have \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n    card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A}", "using \\<open>finite B\\<close> \\<open>card A = card B\\<close>"], ["proof (prove)\nusing this:\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n    card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A}", "by (metis bij_betw_implies_inj_on_and_card_eq)"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A}\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "also"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A}\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "have \"\\<dots> = fact (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} = fact (card B)", "using \\<open>finite A\\<close> \\<open>finite B\\<close> \\<open>card A = card B\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} = fact (card B)", "by (simp add: card_extensional_funcset_inj_on)"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} = fact (card B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "finally"], ["proof (chain)\npicking this:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "."], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "have \"card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n    card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B}", "using \\<open>finite A\\<close> \\<open>card A = card B\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  card A = card B\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n    card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B}", "by (metis bij_betw_implies_surj_on_and_card_eq)"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B}\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "also"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} =\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B}\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "have \"\\<dots> = fact (card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} = fact (card B)", "using \\<open>finite A\\<close> \\<open>finite B\\<close> \\<open>card A = card B\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} = fact (card B)", "by (simp add: card_extensional_funcset_surj_on)"], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} = fact (card B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "finally"], ["proof (chain)\npicking this:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\n\ngoal (1 subgoal):\n 1. card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)", "."], ["proof (state)\nthis:\n  card {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} = fact (card B)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Bijections from A to B up to a Permutation on A\\<close>"], ["", "lemma bij_betw_quotient_domain_permutation_eq_empty:\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_permutation A B =\n    {}", "using \\<open>card A \\<noteq> card B\\<close> bij_betw_same_card"], ["proof (prove)\nusing this:\n  card A \\<noteq> card B\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_permutation A B =\n    {}", "by auto"], ["", "lemma card_bijections_domain_permutation_eq_0:\n  assumes \"card A \\<noteq> card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    0", "using bij_betw_quotient_domain_permutation_eq_empty[OF assms]"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {}\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    0", "by (simp only: card.empty)"], ["", "text \\<open>Two alternative proofs for the cardinality of bijections up to a permutation on A.\\<close>"], ["", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "have \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B\n    = {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // domain_permutation A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} //\n    domain_permutation A B", "by (metis (no_types, lifting) PiE_cong bij_betw_implies_inj_on_and_card_eq)"], ["proof (state)\nthis:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // domain_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "from this"], ["proof (chain)\npicking this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // domain_permutation A B", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // domain_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // domain_permutation A B\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "by (simp add: card_injective_functions_domain_permutation)"], ["proof (state)\nthis:\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_permutation A B) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections_domain_permutation_eq_1:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "have \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B\n    = {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_permutation A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_permutation A B", "by (metis (no_types, lifting) PiE_cong bij_betw_implies_surj_on_and_card_eq)"], ["proof (state)\nthis:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "from this"], ["proof (chain)\npicking this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_permutation A B", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_permutation A B\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    1", "by (simp add: card_surjective_functions_domain_permutation)"], ["proof (state)\nthis:\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_permutation A B) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections_domain_permutation:\n  assumes \"finite A\" \"finite B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_permutation A B) = iverson (card A = card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    iverson (card A = card B)", "using assms card_bijections_domain_permutation_eq_0 card_bijections_domain_permutation_eq_1"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card ?A \\<noteq> card ?B \\<Longrightarrow>\n  card\n   ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B. bij_betw f ?A ?B} //\n    domain_permutation ?A ?B) =\n  0\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B.\n                       bij_betw f ?A ?B} //\n                      domain_permutation ?A ?B) =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    iverson (card A = card B)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card ?A \\<noteq> card ?B \\<Longrightarrow>\n  card\n   ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B. bij_betw f ?A ?B} //\n    domain_permutation ?A ?B) =\n  0\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B.\n                       bij_betw f ?A ?B} //\n                      domain_permutation ?A ?B) =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_permutation A B) =\n    (if card A = card B then 1 else 0)", "by auto"], ["", "subsection \\<open>Bijections from A to B up to a Permutation on B\\<close>"], ["", "lemma bij_betw_quotient_range_permutation_eq_empty:\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    range_permutation A B =\n    {}", "using \\<open>card A \\<noteq> card B\\<close> bij_betw_same_card"], ["proof (prove)\nusing this:\n  card A \\<noteq> card B\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    range_permutation A B =\n    {}", "by auto"], ["", "lemma card_bijections_range_permutation_eq_0:\n  assumes \"card A \\<noteq> card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    0", "using bij_betw_quotient_range_permutation_eq_empty[OF assms]"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {}\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    0", "by (simp only: card.empty)"], ["", "text \\<open>Two alternative proofs for the cardinality of bijections up to a permutation on B.\\<close>"], ["", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "have \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // range_permutation A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // range_permutation A B", "by (metis (no_types, lifting) PiE_cong bij_betw_implies_inj_on_and_card_eq)"], ["proof (state)\nthis:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "from this"], ["proof (chain)\npicking this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // range_permutation A B", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // range_permutation A B\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "by (simp add: iverson_def card_injective_functions_range_permutation)"], ["proof (state)\nthis:\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    range_permutation A B) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections_range_permutation_eq_1:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "have \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B", "by (metis (no_types, lifting) PiE_cong bij_betw_implies_surj_on_and_card_eq)"], ["proof (state)\nthis:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "from this"], ["proof (chain)\npicking this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // range_permutation A B\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    1", "by (simp add: card_surjective_functions_range_permutation)"], ["proof (state)\nthis:\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    range_permutation A B) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections_range_permutation:\n  assumes \"finite A\" \"finite B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // range_permutation A B) = iverson (card A = card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    iverson (card A = card B)", "using assms card_bijections_range_permutation_eq_0 card_bijections_range_permutation_eq_1"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card ?A \\<noteq> card ?B \\<Longrightarrow>\n  card\n   ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B. bij_betw f ?A ?B} //\n    range_permutation ?A ?B) =\n  0\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B.\n                       bij_betw f ?A ?B} //\n                      range_permutation ?A ?B) =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    iverson (card A = card B)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card ?A \\<noteq> card ?B \\<Longrightarrow>\n  card\n   ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B. bij_betw f ?A ?B} //\n    range_permutation ?A ?B) =\n  0\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B.\n                       bij_betw f ?A ?B} //\n                      range_permutation ?A ?B) =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      range_permutation A B) =\n    (if card A = card B then 1 else 0)", "by auto"], ["", "subsection \\<open>Bijections from A to B up to a Permutation on A and B\\<close>"], ["", "lemma bij_betw_quotient_domain_and_range_permutation_eq_empty:\n  assumes \"card A \\<noteq> card B\"\n  shows \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_and_range_permutation A B =\n    {}", "using \\<open>card A \\<noteq> card B\\<close> bij_betw_same_card"], ["proof (prove)\nusing this:\n  card A \\<noteq> card B\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_and_range_permutation A B =\n    {}", "by auto"], ["", "lemma card_bijections_domain_and_range_permutation_eq_0:\n  assumes \"card A \\<noteq> card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    0", "using bij_betw_quotient_domain_and_range_permutation_eq_empty[OF assms]"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {}\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    0", "by (simp only: card.empty)"], ["", "text \\<open>Two alternative proofs for the cardinality of bijections up to a permutation on A and B.\\<close>"], ["", "lemma\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "have \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} // domain_and_range_permutation A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_and_range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} //\n    domain_and_range_permutation A B", "by (metis (no_types, lifting) PiE_cong bij_betw_implies_inj_on_and_card_eq)"], ["proof (state)\nthis:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} //\n  domain_and_range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "from this"], ["proof (chain)\npicking this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} //\n  domain_and_range_permutation A B", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} //\n  domain_and_range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. inj_on f A} //\n  domain_and_range_permutation A B\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "by (simp add: iverson_def card_injective_functions_domain_and_range_permutation)"], ["proof (state)\nthis:\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_and_range_permutation A B) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections_domain_and_range_permutation_eq_1:\n  assumes \"finite A\" \"finite B\"\n  assumes \"card A = card B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  card A = card B", "have \"{f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} // domain_and_range_permutation A B\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_and_range_permutation A B =\n    {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n    domain_and_range_permutation A B", "by (metis (no_types, lifting) PiE_cong bij_betw_implies_surj_on_and_card_eq)"], ["proof (state)\nthis:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n  domain_and_range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "from this"], ["proof (chain)\npicking this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n  domain_and_range_permutation A B", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n  domain_and_range_permutation A B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n  domain_and_range_permutation A B =\n  {f \\<in> A \\<rightarrow>\\<^sub>E B. f ` A = B} //\n  domain_and_range_permutation A B\n  finite A\n  finite B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    1", "by (simp add: card_surjective_functions_domain_and_range_permutation Partition_diag)"], ["proof (state)\nthis:\n  card\n   ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n    domain_and_range_permutation A B) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_bijections_domain_and_range_permutation:\n  assumes \"finite A\" \"finite B\"\n  shows \"card ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} // domain_and_range_permutation A B) = iverson (card A = card B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    iverson (card A = card B)", "using assms card_bijections_domain_and_range_permutation_eq_0 card_bijections_domain_and_range_permutation_eq_1"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card ?A \\<noteq> card ?B \\<Longrightarrow>\n  card\n   ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B. bij_betw f ?A ?B} //\n    domain_and_range_permutation ?A ?B) =\n  0\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B.\n                       bij_betw f ?A ?B} //\n                      domain_and_range_permutation ?A ?B) =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    iverson (card A = card B)", "unfolding iverson_def"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  card ?A \\<noteq> card ?B \\<Longrightarrow>\n  card\n   ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B. bij_betw f ?A ?B} //\n    domain_and_range_permutation ?A ?B) =\n  0\n  \\<lbrakk>finite ?A; finite ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({f \\<in> ?A \\<rightarrow>\\<^sub>E ?B.\n                       bij_betw f ?A ?B} //\n                      domain_and_range_permutation ?A ?B) =\n                    1\n\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> A \\<rightarrow>\\<^sub>E B. bij_betw f A B} //\n      domain_and_range_permutation A B) =\n    (if card A = card B then 1 else 0)", "by auto"], ["", "end"]]}