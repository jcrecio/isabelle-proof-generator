{"file_name": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games/MoreENat.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games", "problem_names": ["lemma eSuc_n_not_le_n[simp]:\n\"(eSuc x \\<le> x) \\<longleftrightarrow> x = \\<infinity>\"", "lemma mult_two_impl1[elim]:\n  assumes \"a * 2 = 2 * b\"\n  shows \"(a::enat) = b\"", "lemma mult_two_impl2[dest]:\n  assumes \"a * 2 = 1 + 2 * b\"\n  shows \"(a::enat) = \\<infinity> \\<and> b=\\<infinity>\"", "lemma mult_two_impl3[dest]:\n  assumes \"a * 2 = 1 + (2 * b - 1)\"\n  shows \"(a::enat) = b \\<and> a \\<ge> 1\"", "lemma mult_two_impl4[dest]:\n  assumes \"a * 2 = 2 * b - 1\"\n  shows \"((a::enat) = 0 \\<and> b = 0) \\<or> (a = \\<infinity> \\<and> b=\\<infinity>)\"", "lemma times_two_div_two[intro]:\n  assumes \"enat n < x\" shows \"2 * enat (n div 2) < x\"", "lemma enat_sum_le[simp]:\n  shows \"enat (a + b) \\<le> c \\<Longrightarrow> b \\<le> c\"", "lemma enat_Suc_nonzero[simp]:\nshows \"enat (Suc n)\\<noteq> 0\""], "translations": [["", "lemma eSuc_n_not_le_n[simp]:\n\"(eSuc x \\<le> x) \\<longleftrightarrow> x = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eSuc x \\<le> x) = (x = \\<infinity>)", "by (metis enat_ord_simps(3) Suc_n_not_le_n antisym ile_eSuc le_add2 plus_1_eq_Suc the_enat_eSuc)"], ["", "lemma mult_two_impl1[elim]:\n  assumes \"a * 2 = 2 * b\"\n  shows \"(a::enat) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "using assms"], ["proof (prove)\nusing this:\n  a * 2 = 2 * b\n\ngoal (1 subgoal):\n 1. a = b", "by(cases a;cases b,auto simp add: mult_2 mult_2_right)"], ["", "lemma mult_two_impl2[dest]:\n  assumes \"a * 2 = 1 + 2 * b\"\n  shows \"(a::enat) = \\<infinity> \\<and> b=\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = \\<infinity> \\<and> b = \\<infinity>", "apply(cases a;cases b)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>nat nata.\n       \\<lbrakk>a = enat nat; b = enat nata\\<rbrakk>\n       \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>\n 4. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>", "using assms Suc_double_not_eq_double[unfolded mult_2, symmetric]"], ["proof (prove)\nusing this:\n  a * 2 = 1 + 2 * b\n  ?n + ?n \\<noteq> Suc (?m + ?m)\n\ngoal (4 subgoals):\n 1. \\<And>nat nata.\n       \\<lbrakk>a = enat nat; b = enat nata\\<rbrakk>\n       \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>\n 4. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = \\<infinity> \\<and> b = \\<infinity>", "by (auto simp add: mult_2 one_enat_def mult_2_right)"], ["", "lemma mult_two_impl3[dest]:\n  assumes \"a * 2 = 1 + (2 * b - 1)\"\n  shows \"(a::enat) = b \\<and> a \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<and> 1 \\<le> a", "using assms"], ["proof (prove)\nusing this:\n  a * 2 = 1 + (2 * b - 1)\n\ngoal (1 subgoal):\n 1. a = b \\<and> 1 \\<le> a", "by(cases a;cases b,auto simp add: one_enat_def mult_2 mult_2_right)"], ["", "lemma mult_two_impl4[dest]:\n  assumes \"a * 2 = 2 * b - 1\"\n  shows \"((a::enat) = 0 \\<and> b = 0) \\<or> (a = \\<infinity> \\<and> b=\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = 0 \\<and> b = 0 \\<or> a = \\<infinity> \\<and> b = \\<infinity>", "proof(cases a;cases b)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>nat nata.\n       \\<lbrakk>a = enat nat; b = enat nata\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 4. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                      a = \\<infinity> \\<and> b = \\<infinity>", "fix anat bnat"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>nat nata.\n       \\<lbrakk>a = enat nat; b = enat nata\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 4. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                      a = \\<infinity> \\<and> b = \\<infinity>", "assume *:\"a = enat anat\" \"b = enat bnat\""], ["proof (state)\nthis:\n  a = enat anat\n  b = enat bnat\n\ngoal (4 subgoals):\n 1. \\<And>nat nata.\n       \\<lbrakk>a = enat nat; b = enat nata\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 4. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                      a = \\<infinity> \\<and> b = \\<infinity>", "hence \"anat + anat = bnat + bnat - Suc 0\""], ["proof (prove)\nusing this:\n  a = enat anat\n  b = enat bnat\n\ngoal (1 subgoal):\n 1. anat + anat = bnat + bnat - Suc 0", "using assms"], ["proof (prove)\nusing this:\n  a = enat anat\n  b = enat bnat\n  a * 2 = 2 * b - 1\n\ngoal (1 subgoal):\n 1. anat + anat = bnat + bnat - Suc 0", "by (auto simp add:enat_0_iff one_enat_def mult_2 mult_2_right)"], ["proof (state)\nthis:\n  anat + anat = bnat + bnat - Suc 0\n\ngoal (4 subgoals):\n 1. \\<And>nat nata.\n       \\<lbrakk>a = enat nat; b = enat nata\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 4. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                      a = \\<infinity> \\<and> b = \\<infinity>", "thus ?thesis"], ["proof (prove)\nusing this:\n  anat + anat = bnat + bnat - Suc 0\n\ngoal (1 subgoal):\n 1. a = 0 \\<and> b = 0 \\<or> a = \\<infinity> \\<and> b = \\<infinity>", "unfolding *"], ["proof (prove)\nusing this:\n  anat + anat = bnat + bnat - Suc 0\n\ngoal (1 subgoal):\n 1. enat anat = 0 \\<and> enat bnat = 0 \\<or>\n    enat anat = \\<infinity> \\<and> enat bnat = \\<infinity>", "using Suc_double_not_eq_double[unfolded mult_2, symmetric]"], ["proof (prove)\nusing this:\n  anat + anat = bnat + bnat - Suc 0\n  ?n + ?n \\<noteq> Suc (?m + ?m)\n\ngoal (1 subgoal):\n 1. enat anat = 0 \\<and> enat bnat = 0 \\<or>\n    enat anat = \\<infinity> \\<and> enat bnat = \\<infinity>", "by (metis Suc_pred add_gr_0 enat_0_iff(1) neq0_conv not_less0 zero_less_diff)"], ["proof (state)\nthis:\n  a = 0 \\<and> b = 0 \\<or> a = \\<infinity> \\<and> b = \\<infinity>\n\ngoal (3 subgoals):\n 1. \\<And>nat.\n       \\<lbrakk>a = enat nat; b = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 2. \\<And>nat.\n       \\<lbrakk>a = \\<infinity>; b = enat nat\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                         a = \\<infinity> \\<and> b = \\<infinity>\n 3. \\<lbrakk>a = \\<infinity>; b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = 0 \\<and> b = 0 \\<or>\n                      a = \\<infinity> \\<and> b = \\<infinity>", "qed(insert assms,auto simp add:enat_0_iff one_enat_def mult_2 mult_2_right)"], ["", "lemma times_two_div_two[intro]:\n  assumes \"enat n < x\" shows \"2 * enat (n div 2) < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) < x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) < x", "have \"2 * n div 2 \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * n div 2 \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 * n div 2 \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) < x", "hence \"2 * enat (n div 2) \\<le> enat n\""], ["proof (prove)\nusing this:\n  2 * n div 2 \\<le> n\n\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) \\<le> enat n", "using enat_numeral enat_ord_simps(2) linorder_not_less mult.commute times_enat_simps(1)"], ["proof (prove)\nusing this:\n  2 * n div 2 \\<le> n\n  enat (numeral ?k) = numeral ?k\n  (enat ?m < enat ?n) = (?m < ?n)\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n  ?a * ?b = ?b * ?a\n  enat ?m * enat ?n = enat (?m * ?n)\n\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) \\<le> enat n", "by (metis div_times_less_eq_dividend)"], ["proof (state)\nthis:\n  2 * enat (n div 2) \\<le> enat n\n\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) < x", "with assms"], ["proof (chain)\npicking this:\n  enat n < x\n  2 * enat (n div 2) \\<le> enat n", "show ?thesis"], ["proof (prove)\nusing this:\n  enat n < x\n  2 * enat (n div 2) \\<le> enat n\n\ngoal (1 subgoal):\n 1. 2 * enat (n div 2) < x", "by auto"], ["proof (state)\nthis:\n  2 * enat (n div 2) < x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enat_sum_le[simp]:\n  shows \"enat (a + b) \\<le> c \\<Longrightarrow> b \\<le> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (a + b) \\<le> c \\<Longrightarrow> enat b \\<le> c", "by (meson dual_order.trans enat_ord_simps(1) le_add2)"], ["", "lemma enat_Suc_nonzero[simp]:\nshows \"enat (Suc n)\\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc n) \\<noteq> 0", "by (metis Zero_not_Suc enat.inject zero_enat_def)"], ["", "end"]]}