{"file_name": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games/GaleStewartDeterminedGames.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games", "problem_names": ["lemma never_winning_is_losing_even:\n  assumes \"position p\" \"\\<forall> n. \\<not> winning_position_Even (((augment_list \\<sigma>) ^^ n) p)\"\n  shows \"induced_play \\<sigma> p \\<notin> A\"", "lemma every_position_is_determined:\n  assumes \"position p\"\n  shows \"winning_position_Even p \\<or> winning_position_Odd p\" (is \"?we \\<or> ?wo\")", "lemma empty_position: \"position []\"", "lemmas every_game_is_determined = every_position_is_determined[OF empty_position]", "lemma every_position_has_winning_strategy:\n  shows \"(\\<exists> \\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or> (\\<exists> \\<sigma>. strategy_winning_by_Odd \\<sigma> p)\" (is \"?we \\<or> ?wo\")"], "translations": [["", "lemma never_winning_is_losing_even:\n  assumes \"position p\" \"\\<forall> n. \\<not> winning_position_Even (((augment_list \\<sigma>) ^^ n) p)\"\n  shows \"induced_play \\<sigma> p \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<notin> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "assume \"induced_play \\<sigma> p \\<in> A\""], ["proof (state)\nthis:\n  induced_play \\<sigma> p \\<in> A\n\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "from closed[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>pa.\n     lprefix (llist_of pa) (induced_play \\<sigma> p) \\<and>\n     (\\<forall>e'.\n         lprefix (llist_of pa) e' \\<longrightarrow>\n         llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "obtain p' where\n    p':\"lprefix (llist_of p') (induced_play \\<sigma> p)\"\n    \"\\<And> e. lprefix (llist_of p') e \\<Longrightarrow> llength e = 2 * N \\<Longrightarrow> e \\<in> A\""], ["proof (prove)\nusing this:\n  \\<exists>pa.\n     lprefix (llist_of pa) (induced_play \\<sigma> p) \\<and>\n     (\\<forall>e'.\n         lprefix (llist_of pa) e' \\<longrightarrow>\n         llength e' = 2 * N \\<longrightarrow> e' \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>lprefix (llist_of p') (induced_play \\<sigma> p);\n         \\<And>e.\n            \\<lbrakk>lprefix (llist_of p') e; llength e = 2 * N\\<rbrakk>\n            \\<Longrightarrow> e \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  lprefix (llist_of p') (induced_play \\<sigma> p)\n  \\<lbrakk>lprefix (llist_of p') ?e1; llength ?e1 = 2 * N\\<rbrakk>\n  \\<Longrightarrow> ?e1 \\<in> A\n\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "from lprefix_llength_le[OF p'(1)]"], ["proof (chain)\npicking this:\n  llength (llist_of p') \\<le> llength (induced_play \\<sigma> p)", "have lp':\"llength (llist_of p') \\<le> 2 * N\""], ["proof (prove)\nusing this:\n  llength (llist_of p') \\<le> llength (induced_play \\<sigma> p)\n\ngoal (1 subgoal):\n 1. llength (llist_of p') \\<le> 2 * N", "by auto"], ["proof (state)\nthis:\n  llength (llist_of p') \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"length p' \\<le> length p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  length p' \\<le> length p\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence \"llength (llist_of p') \\<le> llength (llist_of p)\""], ["proof (prove)\nusing this:\n  length p' \\<le> length p\n\ngoal (1 subgoal):\n 1. llength (llist_of p') \\<le> llength (llist_of p)", "by auto"], ["proof (state)\nthis:\n  llength (llist_of p') \\<le> llength (llist_of p)\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from lprefix_llength_lprefix[OF p'(1) _ this]\n      induced_play_is_lprefix[OF assms(1)]\n      lprefix_trans"], ["proof (chain)\npicking this:\n  lprefix (llist_of p) (induced_play \\<sigma> p) \\<Longrightarrow>\n  lprefix (llist_of p') (llist_of p)\n  lprefix (llist_of p) (induced_play ?\\<sigma> p)\n  \\<lbrakk>lprefix ?xs ?ys; lprefix ?ys ?zs\\<rbrakk>\n  \\<Longrightarrow> lprefix ?xs ?zs", "have pref:\"lprefix (llist_of p') (induced_play strat p)\" for strat"], ["proof (prove)\nusing this:\n  lprefix (llist_of p) (induced_play \\<sigma> p) \\<Longrightarrow>\n  lprefix (llist_of p') (llist_of p)\n  lprefix (llist_of p) (induced_play ?\\<sigma> p)\n  \\<lbrakk>lprefix ?xs ?ys; lprefix ?ys ?zs\\<rbrakk>\n  \\<Longrightarrow> lprefix ?xs ?zs\n\ngoal (1 subgoal):\n 1. lprefix (llist_of p') (induced_play strat p)", "by blast"], ["proof (state)\nthis:\n  lprefix (llist_of p') (induced_play ?strat1 p)\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from assms(2)[rule_format,of 0] assms(1)"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even ((augment_list \\<sigma> ^^ 0) p)\n  position p", "have \"\\<not> strategy_winning_by_Even \\<sigma> p\" for \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even ((augment_list \\<sigma> ^^ 0) p)\n  position p\n\ngoal (1 subgoal):\n 1. \\<not> strategy_winning_by_Even \\<sigma> p", "by auto"], ["proof (state)\nthis:\n  \\<not> strategy_winning_by_Even ?\\<sigma>1 p\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from this[unfolded strategy_winning_by_Even_def]"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o) p\n             \\<in> A)", "obtain strat where\n      strat:\"induced_play strat p \\<notin> A\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o) p\n             \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<And>strat.\n        induced_play strat p \\<notin> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  induced_play strat p \\<notin> A\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from strat p'(2)[OF pref]"], ["proof (chain)\npicking this:\n  induced_play strat p \\<notin> A\n  llength (induced_play ?strat3 p) = 2 * N \\<Longrightarrow>\n  induced_play ?strat3 p \\<in> A", "show False"], ["proof (prove)\nusing this:\n  induced_play strat p \\<notin> A\n  llength (induced_play ?strat3 p) = 2 * N \\<Longrightarrow>\n  induced_play ?strat3 p \\<in> A\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> length p' \\<le> length p\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "let ?n = \"length p' - length p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "let ?pos = \"(augment_list \\<sigma> ^^ ?n) p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from False"], ["proof (chain)\npicking this:\n  \\<not> length p' \\<le> length p", "have \"length p' \\<ge> length p\""], ["proof (prove)\nusing this:\n  \\<not> length p' \\<le> length p\n\ngoal (1 subgoal):\n 1. length p \\<le> length p'", "by auto"], ["proof (state)\nthis:\n  length p \\<le> length p'\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence [simp]:\"length ?pos = length p'\""], ["proof (prove)\nusing this:\n  length p \\<le> length p'\n\ngoal (1 subgoal):\n 1. length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'", "by (auto simp:length_augment_list)"], ["proof (state)\nthis:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence pos[intro]:\"position ?pos\""], ["proof (prove)\nusing this:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n\ngoal (1 subgoal):\n 1. position ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "using False lp'(1)"], ["proof (prove)\nusing this:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n  \\<not> length p' \\<le> length p\n  llength (llist_of p') \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. position ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "unfolding position_def"], ["proof (prove)\nusing this:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n  \\<not> length p' \\<le> length p\n  llength (llist_of p') \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. enat (length ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n    \\<le> 2 * N", "by auto"], ["proof (state)\nthis:\n  position ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "have \"llist_of p' = llist_of ?pos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_of p' =\n    llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "using p'(1)"], ["proof (prove)\nusing this:\n  lprefix (llist_of p') (induced_play \\<sigma> p)\n\ngoal (1 subgoal):\n 1. llist_of p' =\n    llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "by(intro lprefix_antisym[OF lprefix_llength_lprefix lprefix_llength_lprefix],auto)"], ["proof (state)\nthis:\n  llist_of p' =\n  llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence p'_pos:\"p' = ?pos\""], ["proof (prove)\nusing this:\n  llist_of p' =\n  llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. p' = (augment_list \\<sigma> ^^ (length p' - length p)) p", "by simp"], ["proof (state)\nthis:\n  p' = (augment_list \\<sigma> ^^ (length p' - length p)) p\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from assms(2)[rule_format,of ?n] assms(1)"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even\n          ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  position p", "have \"\\<not> strategy_winning_by_Even \\<sigma> ?pos\" for \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even\n          ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  position p\n\ngoal (1 subgoal):\n 1. \\<not> strategy_winning_by_Even \\<sigma>\n            ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "by auto"], ["proof (state)\nthis:\n  \\<not> strategy_winning_by_Even ?\\<sigma>1\n          ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from this[unfolded strategy_winning_by_Even_def]"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o)\n              ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n             \\<in> A)", "obtain strat where\n      strat:\"induced_play strat ?pos \\<notin> A\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o)\n              ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n             \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<And>strat.\n        induced_play strat\n         ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n        \\<notin> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from p'_pos induced_play_is_lprefix[OF pos, of strat]"], ["proof (chain)\npicking this:\n  p' = (augment_list \\<sigma> ^^ (length p' - length p)) p\n  lprefix (llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))", "have pref:\"lprefix (llist_of p') (induced_play strat ?pos)\""], ["proof (prove)\nusing this:\n  p' = (augment_list \\<sigma> ^^ (length p' - length p)) p\n  lprefix (llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n\ngoal (1 subgoal):\n 1. lprefix (llist_of p')\n     (induced_play strat\n       ((augment_list \\<sigma> ^^ (length p' - length p)) p))", "by simp"], ["proof (state)\nthis:\n  lprefix (llist_of p')\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "with p'(2)[OF pref] strat"], ["proof (chain)\npicking this:\n  llength\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p)) =\n  2 * N \\<Longrightarrow>\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<in> A\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<notin> A\n  lprefix (llist_of p')\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))", "show False"], ["proof (prove)\nusing this:\n  llength\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p)) =\n  2 * N \\<Longrightarrow>\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<in> A\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<notin> A\n  lprefix (llist_of p')\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> By proving that every position is determined, this proves that every game is determined\n       (since a game is determined if its initial position [] is) \\<close>"], ["", "lemma every_position_is_determined:\n  assumes \"position p\"\n  shows \"winning_position_Even p \\<or> winning_position_Odd p\" (is \"?we \\<or> ?wo\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_position_Even p \\<or> winning_position_Odd p", "proof(rule impI[of \"\\<not> ?we \\<longrightarrow> \\<not> ?wo \\<longrightarrow> False\",rule_format],force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> ?we\""], ["proof (state)\nthis:\n  \\<not> winning_position_Even p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from defensive_strategy_Odd[OF this] never_winning_is_losing_even[OF assms]"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy ?\\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            ?n)\n            p)\n  \\<forall>n.\n     \\<not> winning_position_Even\n             ((augment_list ?\\<sigma> ^^ n) p) \\<Longrightarrow>\n  induced_play ?\\<sigma> p \\<notin> A", "have js_no:\"induced_play\n         (joint_strategy s defensive_strategy_Odd) p \\<notin> A\" for s"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy ?\\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            ?n)\n            p)\n  \\<forall>n.\n     \\<not> winning_position_Even\n             ((augment_list ?\\<sigma> ^^ n) p) \\<Longrightarrow>\n  induced_play ?\\<sigma> p \\<notin> A\n\ngoal (1 subgoal):\n 1. induced_play (joint_strategy s defensive_strategy_Odd) p \\<notin> A", "by auto"], ["proof (state)\nthis:\n  induced_play (joint_strategy ?s1 defensive_strategy_Odd) p \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> ?wo\""], ["proof (state)\nthis:\n  \\<not> winning_position_Odd p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from this[unfolded strategy_winning_by_Odd_def] assms"], ["proof (chain)\npicking this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>e.\n                 induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n                 \\<notin> A))\n  position p", "have \"\\<exists> s. induced_play\n         (joint_strategy s defensive_strategy_Odd) p \\<in> A\""], ["proof (prove)\nusing this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>e.\n                 induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n                 \\<notin> A))\n  position p\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A", "by simp"], ["proof (state)\nthis:\n  \\<exists>s.\n     induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A\n\ngoal (1 subgoal):\n 1. False", "using js_no"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A\n  induced_play (joint_strategy ?s1 defensive_strategy_Odd) p \\<notin> A\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_position: \"position []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position []", "using zero_enat_def position_def"], ["proof (prove)\nusing this:\n  0 = enat 0\n  position ?e \\<equiv> enat (length ?e) \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. position []", "by auto"], ["", "lemmas every_game_is_determined = every_position_is_determined[OF empty_position]"], ["", "text \\<open> We expect that this theorem can be easier to apply without the 'position p' requirement,\n       so we present that theorem as well. \\<close>"], ["", "lemma every_position_has_winning_strategy:\n  shows \"(\\<exists> \\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or> (\\<exists> \\<sigma>. strategy_winning_by_Odd \\<sigma> p)\" (is \"?we \\<or> ?wo\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "proof(cases \"position p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)\n 2. \\<not> position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "case True"], ["proof (state)\nthis:\n  position p\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)\n 2. \\<not> position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "then"], ["proof (chain)\npicking this:\n  position p", "show ?thesis"], ["proof (prove)\nusing this:\n  position p\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "using every_position_is_determined"], ["proof (prove)\nusing this:\n  position p\n  position ?p \\<Longrightarrow>\n  winning_position_Even ?p \\<or> winning_position_Odd ?p\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n  (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)\n\ngoal (1 subgoal):\n 1. \\<not> position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "case False"], ["proof (state)\nthis:\n  \\<not> position p\n\ngoal (1 subgoal):\n 1. \\<not> position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "hence \"2 * N \\<le> enat (length p)\""], ["proof (prove)\nusing this:\n  \\<not> position p\n\ngoal (1 subgoal):\n 1. 2 * N \\<le> enat (length p)", "unfolding position_def"], ["proof (prove)\nusing this:\n  \\<not> enat (length p) \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. 2 * N \\<le> enat (length p)", "by force"], ["proof (state)\nthis:\n  2 * N \\<le> enat (length p)\n\ngoal (1 subgoal):\n 1. \\<not> position p \\<Longrightarrow>\n    (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "from induced_play_lprefix_non_positions[OF this]"], ["proof (chain)\npicking this:\n  induced_play ?\\<sigma> p = ltake (2 * N) (llist_of p)", "show ?thesis"], ["proof (prove)\nusing this:\n  induced_play ?\\<sigma> p = ltake (2 * N) (llist_of p)\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n    (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)", "unfolding strategy_winning_by_Even_def strategy_winning_by_Odd_def"], ["proof (prove)\nusing this:\n  induced_play ?\\<sigma> p = ltake (2 * N) (llist_of p)\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<sigma>.\n        \\<forall>\\<sigma>\\<^sub>o.\n           induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p\n           \\<in> A) \\<or>\n    (\\<exists>\\<sigma>.\n        \\<forall>\\<sigma>\\<^sub>e.\n           induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n           \\<notin> A)", "by simp"], ["proof (state)\nthis:\n  (\\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> p) \\<or>\n  (\\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> p)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}