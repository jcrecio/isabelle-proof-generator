{"file_name": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games/MoreCoinductiveList2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games", "problem_names": ["lemma ltake_infinity[simp]: \"ltake \\<infinity> x = x\"", "lemma coinductive_eq_iff_lnth_eq:\n  \"a = b \\<longleftrightarrow> (llength a = llength b \\<and> (\\<forall> n. enat n < llength a \\<longrightarrow> a $ n = b $ n))\"", "lemma coinductive_eq_I:\n  assumes \"(llength a = llength b \\<and> (\\<forall> n. enat n < llength a \\<longrightarrow> a $ n = b $ n))\"\n  shows \"a = b\"", "lemma enat_times_less:\n  \"enat c * enat lst < y * enat c \\<Longrightarrow> lst < y\"", "lemma llist_eq_lcons:\n  assumes \"a \\<noteq> LNil\" \"b \\<noteq> LNil\" \"lhd a = lhd b\" \"ltl a = ltl b\"\n  shows \"a = b\""], "translations": [["", "lemma ltake_infinity[simp]: \"ltake \\<infinity> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltake \\<infinity> x = x", "by (simp add: ltake_all)"], ["", "lemma coinductive_eq_iff_lnth_eq:\n  \"a = b \\<longleftrightarrow> (llength a = llength b \\<and> (\\<forall> n. enat n < llength a \\<longrightarrow> a $ n = b $ n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a = b) =\n    (llength a = llength b \\<and>\n     (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow>\n    llength a = llength b \\<and>\n    (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\n 2. llength a = llength b \\<and>\n    (\\<forall>n.\n        enat n < llength a \\<longrightarrow>\n        a $ n = b $ n) \\<Longrightarrow>\n    a = b", "assume \"llength a = llength b \\<and> (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\""], ["proof (state)\nthis:\n  llength a = llength b \\<and>\n  (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\n\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow>\n    llength a = llength b \\<and>\n    (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\n 2. llength a = llength b \\<and>\n    (\\<forall>n.\n        enat n < llength a \\<longrightarrow>\n        a $ n = b $ n) \\<Longrightarrow>\n    a = b", "hence len:\"llength a = llength b\"\n    and lnth:\"enat n < llength a \\<Longrightarrow> a $ n = b $ n\" for n"], ["proof (prove)\nusing this:\n  llength a = llength b \\<and>\n  (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\n\ngoal (1 subgoal):\n 1. llength a = llength b &&&\n    (enat n < llength a \\<Longrightarrow> a $ n = b $ n)", "by auto"], ["proof (state)\nthis:\n  llength a = llength b\n  enat ?n < llength a \\<Longrightarrow> a $ ?n = b $ ?n\n\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow>\n    llength a = llength b \\<and>\n    (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\n 2. llength a = llength b \\<and>\n    (\\<forall>n.\n        enat n < llength a \\<longrightarrow>\n        a $ n = b $ n) \\<Longrightarrow>\n    a = b", "show \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "proof(cases \"llength a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>nat. llength a = enat nat \\<Longrightarrow> a = b\n 2. llength a = \\<infinity> \\<Longrightarrow> a = b", "case (enat nat)"], ["proof (state)\nthis:\n  llength a = enat nat\n\ngoal (2 subgoals):\n 1. \\<And>nat. llength a = enat nat \\<Longrightarrow> a = b\n 2. llength a = \\<infinity> \\<Longrightarrow> a = b", "hence leq:\"llist_of (list_of (ltake nat a)) = a\" \"llist_of (list_of (ltake nat b)) = b\""], ["proof (prove)\nusing this:\n  llength a = enat nat\n\ngoal (1 subgoal):\n 1. llist_of (list_of (ltake (enat nat) a)) = a &&&\n    llist_of (list_of (ltake (enat nat) b)) = b", "by (auto simp add: len llength_eq_enat_lfiniteD ltake_all)"], ["proof (state)\nthis:\n  llist_of (list_of (ltake (enat nat) a)) = a\n  llist_of (list_of (ltake (enat nat) b)) = b\n\ngoal (2 subgoals):\n 1. \\<And>nat. llength a = enat nat \\<Longrightarrow> a = b\n 2. llength a = \\<infinity> \\<Longrightarrow> a = b", "with lnth_llist_of lnth"], ["proof (chain)\npicking this:\n  ($) (llist_of ?xs) = (!) ?xs\n  enat ?n < llength a \\<Longrightarrow> a $ ?n = b $ ?n\n  llist_of (list_of (ltake (enat nat) a)) = a\n  llist_of (list_of (ltake (enat nat) b)) = b", "have [intro]:\"i < length (list_of (ltake (enat nat) a)) \\<Longrightarrow> ltake (enat nat) a $ i = ltake (enat nat) b $ i\" for i"], ["proof (prove)\nusing this:\n  ($) (llist_of ?xs) = (!) ?xs\n  enat ?n < llength a \\<Longrightarrow> a $ ?n = b $ ?n\n  llist_of (list_of (ltake (enat nat) a)) = a\n  llist_of (list_of (ltake (enat nat) b)) = b\n\ngoal (1 subgoal):\n 1. i < length (list_of (ltake (enat nat) a)) \\<Longrightarrow>\n    ltake (enat nat) a $ i = ltake (enat nat) b $ i", "by (metis enat_ord_code(4) enat_ord_simps(2) lfinite_ltake llength_llist_of llist_of_list_of)"], ["proof (state)\nthis:\n  ?i < length (list_of (ltake (enat nat) a)) \\<Longrightarrow>\n  ltake (enat nat) a $ ?i = ltake (enat nat) b $ ?i\n\ngoal (2 subgoals):\n 1. \\<And>nat. llength a = enat nat \\<Longrightarrow> a = b\n 2. llength a = \\<infinity> \\<Longrightarrow> a = b", "from len"], ["proof (chain)\npicking this:\n  llength a = llength b", "have [intro]:\"length (list_of (ltake (enat nat) a)) = length (list_of (ltake (enat nat) b))\""], ["proof (prove)\nusing this:\n  llength a = llength b\n\ngoal (1 subgoal):\n 1. length (list_of (ltake (enat nat) a)) =\n    length (list_of (ltake (enat nat) b))", "by (simp add: length_list_of_conv_the_enat)"], ["proof (state)\nthis:\n  length (list_of (ltake (enat nat) a)) =\n  length (list_of (ltake (enat nat) b))\n\ngoal (2 subgoals):\n 1. \\<And>nat. llength a = enat nat \\<Longrightarrow> a = b\n 2. llength a = \\<infinity> \\<Longrightarrow> a = b", "have \"list_of (ltake nat a) = list_of (ltake nat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of (ltake (enat nat) a) = list_of (ltake (enat nat) b)", "by(subst list_eq_iff_nth_eq, auto)"], ["proof (state)\nthis:\n  list_of (ltake (enat nat) a) = list_of (ltake (enat nat) b)\n\ngoal (2 subgoals):\n 1. \\<And>nat. llength a = enat nat \\<Longrightarrow> a = b\n 2. llength a = \\<infinity> \\<Longrightarrow> a = b", "then"], ["proof (chain)\npicking this:\n  list_of (ltake (enat nat) a) = list_of (ltake (enat nat) b)", "show ?thesis"], ["proof (prove)\nusing this:\n  list_of (ltake (enat nat) a) = list_of (ltake (enat nat) b)\n\ngoal (1 subgoal):\n 1. a = b", "using leq"], ["proof (prove)\nusing this:\n  list_of (ltake (enat nat) a) = list_of (ltake (enat nat) b)\n  llist_of (list_of (ltake (enat nat) a)) = a\n  llist_of (list_of (ltake (enat nat) b)) = b\n\ngoal (1 subgoal):\n 1. a = b", "by metis"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. llength a = \\<infinity> \\<Longrightarrow> a = b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. llength a = \\<infinity> \\<Longrightarrow> a = b", "case infinity"], ["proof (state)\nthis:\n  llength a = \\<infinity>\n\ngoal (1 subgoal):\n 1. llength a = \\<infinity> \\<Longrightarrow> a = b", "hence inf:\"\\<not> lfinite a\" \"\\<not> lfinite b\""], ["proof (prove)\nusing this:\n  llength a = \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> lfinite a &&& \\<not> lfinite b", "using len llength_eq_infty_conv_lfinite"], ["proof (prove)\nusing this:\n  llength a = \\<infinity>\n  llength a = llength b\n  (llength ?xs = \\<infinity>) = (\\<not> lfinite ?xs)\n\ngoal (1 subgoal):\n 1. \\<not> lfinite a &&& \\<not> lfinite b", "by auto"], ["proof (state)\nthis:\n  \\<not> lfinite a\n  \\<not> lfinite b\n\ngoal (1 subgoal):\n 1. llength a = \\<infinity> \\<Longrightarrow> a = b", "from lnth[unfolded infinity]"], ["proof (chain)\npicking this:\n  enat ?n < \\<infinity> \\<Longrightarrow> a $ ?n = b $ ?n", "have \"(($) a) = (($) b)\""], ["proof (prove)\nusing this:\n  enat ?n < \\<infinity> \\<Longrightarrow> a $ ?n = b $ ?n\n\ngoal (1 subgoal):\n 1. ($) a = ($) b", "by auto"], ["proof (state)\nthis:\n  ($) a = ($) b\n\ngoal (1 subgoal):\n 1. llength a = \\<infinity> \\<Longrightarrow> a = b", "then"], ["proof (chain)\npicking this:\n  ($) a = ($) b", "show ?thesis"], ["proof (prove)\nusing this:\n  ($) a = ($) b\n\ngoal (1 subgoal):\n 1. a = b", "using inf[THEN inf_llist_lnth]"], ["proof (prove)\nusing this:\n  ($) a = ($) b\n  inf_llist (($) a) = a\n  inf_llist (($) b) = b\n\ngoal (1 subgoal):\n 1. a = b", "by metis"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow>\n    llength a = llength b \\<and>\n    (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)", "qed auto"], ["", "lemma coinductive_eq_I:\n  assumes \"(llength a = llength b \\<and> (\\<forall> n. enat n < llength a \\<longrightarrow> a $ n = b $ n))\"\n  shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "using coinductive_eq_iff_lnth_eq assms"], ["proof (prove)\nusing this:\n  (?a = ?b) =\n  (llength ?a = llength ?b \\<and>\n   (\\<forall>n. enat n < llength ?a \\<longrightarrow> ?a $ n = ?b $ n))\n  llength a = llength b \\<and>\n  (\\<forall>n. enat n < llength a \\<longrightarrow> a $ n = b $ n)\n\ngoal (1 subgoal):\n 1. a = b", "by auto"], ["", "text \\<open>Our co-inductive lists will have Option types in them, so we can return None for out of bounds.\\<close>"], ["", "definition lnth_option where\n  \"lnth_option xs i \\<equiv> if enat i < llength xs then xs $ i else None\""], ["", "lemma enat_times_less:\n  \"enat c * enat lst < y * enat c \\<Longrightarrow> lst < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat c * enat lst < y * enat c \\<Longrightarrow> enat lst < y", "by (cases y;auto)"], ["", "lemma llist_eq_lcons:\n  assumes \"a \\<noteq> LNil\" \"b \\<noteq> LNil\" \"lhd a = lhd b\" \"ltl a = ltl b\"\n  shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "using assms"], ["proof (prove)\nusing this:\n  a \\<noteq> LNil\n  b \\<noteq> LNil\n  lhd a = lhd b\n  ltl a = ltl b\n\ngoal (1 subgoal):\n 1. a = b", "by(cases a;cases b;auto)"], ["", "end"]]}