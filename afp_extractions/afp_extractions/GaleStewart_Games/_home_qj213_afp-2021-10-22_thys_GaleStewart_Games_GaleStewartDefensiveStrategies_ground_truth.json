{"file_name": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games/GaleStewartDefensiveStrategies.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/GaleStewart_Games", "problem_names": ["lemma defensive_move_exists_for_Even:\nassumes [intro]:\"position p\"\nshows \"winning_position_Odd p \\<or> (\\<exists> m. move_defensive_by_Even m p)\" (is \"?w \\<or> ?d\")", "lemma defensive_move_exists_for_Odd:\nassumes [intro]:\"position p\"\nshows \"winning_position_Even p \\<or> (\\<exists> m. move_defensive_by_Odd m p)\" (is \"?w \\<or> ?d\")", "lemma position_augment:\n  assumes \"position ((augment_list f ^^ n) p)\"\n  shows \"position p\"", "lemma defensive_strategy_Odd:\n  assumes \"\\<not> winning_position_Even p\"\n  shows \"\\<not> winning_position_Even (((augment_list (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd)) ^^ n) p)\"", "lemma defensive_strategy_Even:\n  assumes \"\\<not> winning_position_Odd p\"\n  shows \"\\<not> winning_position_Odd (((augment_list (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o)) ^^ n) p)\"", "lemma never_winning_is_losing_even:\n  assumes \"position p\" \"\\<forall> n. \\<not> winning_position_Even (((augment_list \\<sigma>) ^^ n) p)\"\n  shows \"induced_play \\<sigma> p \\<notin> A\"", "lemma every_position_is_determined:\n  assumes \"position p\"\n  shows \"winning_position_Even p \\<or> winning_position_Odd p\" (is \"?we \\<or> ?wo\")"], "translations": [["", "lemma defensive_move_exists_for_Even:\nassumes [intro]:\"position p\"\nshows \"winning_position_Odd p \\<or> (\\<exists> m. move_defensive_by_Even m p)\" (is \"?w \\<or> ?d\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)", "proof(cases \"length p = 2*N \\<or> odd (length p)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat (length p) = 2 * N \\<or> odd (length p) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)\n 2. \\<not> (enat (length p) = 2 * N \\<or> odd (length p)) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)", "case False"], ["proof (state)\nthis:\n  \\<not> (enat (length p) = 2 * N \\<or> odd (length p))\n\ngoal (2 subgoals):\n 1. enat (length p) = 2 * N \\<or> odd (length p) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)\n 2. \\<not> (enat (length p) = 2 * N \\<or> odd (length p)) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)", "hence pl[intro]:\"length p < 2*N\"\n    and ev[intro]:\"even (length p)\""], ["proof (prove)\nusing this:\n  \\<not> (enat (length p) = 2 * N \\<or> odd (length p))\n\ngoal (1 subgoal):\n 1. enat (length p) < 2 * N &&& even (length p)", "using assms[unfolded position_def]"], ["proof (prove)\nusing this:\n  \\<not> (enat (length p) = 2 * N \\<or> odd (length p))\n  enat (length p) \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. enat (length p) < 2 * N &&& even (length p)", "by auto"], ["proof (state)\nthis:\n  enat (length p) < 2 * N\n  even (length p)\n\ngoal (2 subgoals):\n 1. enat (length p) = 2 * N \\<or> odd (length p) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)\n 2. \\<not> (enat (length p) = 2 * N \\<or> odd (length p)) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)", "proof(rule impI[of \"\\<not> ?d \\<longrightarrow> \\<not> ?w \\<longrightarrow> False\", rule_format], force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume not_def:\"\\<not> ?d\""], ["proof (state)\nthis:\n  \\<nexists>m. move_defensive_by_Even m p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from not_def[unfolded move_defensive_by_Even_def]"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     even (length p) \\<longrightarrow> \\<not> winning_position_Odd (p @ [m])", "have \"\\<forall> m. \\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> (p @ [m])\""], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     even (length p) \\<longrightarrow> \\<not> winning_position_Odd (p @ [m])\n\ngoal (1 subgoal):\n 1. \\<forall>m.\n       \\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> (p @ [m])", "by blast"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>\\<sigma>. strategy_winning_by_Odd \\<sigma> (p @ [m])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>f. \\<forall>x. strategy_winning_by_Odd (f x) (p @ [x])", "obtain \\<sigma>\\<^sub>o where\n      str_Odd:\"\\<And> m. strategy_winning_by_Odd (\\<sigma>\\<^sub>o m) (p @ [m])\""], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>x. strategy_winning_by_Odd (f x) (p @ [x])\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>o.\n        (\\<And>m.\n            strategy_winning_by_Odd (\\<sigma>\\<^sub>o m)\n             (p @ [m])) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy_winning_by_Odd (\\<sigma>\\<^sub>o ?m1) (p @ [?m1])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "define \\<sigma> where \"\\<sigma> p' = \\<sigma>\\<^sub>o (p' ! length p) p'\" for p'"], ["proof (state)\nthis:\n  \\<sigma> ?p' = \\<sigma>\\<^sub>o (?p' ! length p) ?p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume not_win:\"\\<not> ?w\""], ["proof (state)\nthis:\n  \\<not> winning_position_Odd p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from not_win[unfolded move_defensive_by_Even_def strategy_winning_by_Odd_def]"], ["proof (chain)\npicking this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>e.\n                 induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n                 \\<notin> A))", "obtain \\<sigma>\\<^sub>e where\n      str_Even:\"induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p \\<in> A\"\n      (is \"?pe p \\<in> A\")"], ["proof (prove)\nusing this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>e.\n                 induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n                 \\<notin> A))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>e.\n        induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n        \\<in> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "let ?pnext = \"(p @ [joint_strategy \\<sigma>\\<^sub>e \\<sigma> p])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "fix p' m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"prefix (p @ [m]) p'\""], ["proof (state)\nthis:\n  prefix (p @ [m]) p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"(p' ! length p) = m\""], ["proof (prove)\nusing this:\n  prefix (p @ [m]) p'\n\ngoal (1 subgoal):\n 1. p' ! length p = m", "unfolding prefix_def"], ["proof (prove)\nusing this:\n  \\<exists>zs. p' = (p @ [m]) @ zs\n\ngoal (1 subgoal):\n 1. p' ! length p = m", "by auto"], ["proof (state)\nthis:\n  p' ! length p = m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  prefix (p @ [?m3]) ?p'3 \\<Longrightarrow> ?p'3 ! length p = ?m3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "hence eq_a:\"\\<forall> p'. prefix ?pnext p' \\<longrightarrow> p' @ [joint_strategy \\<sigma>\\<^sub>e \\<sigma> p'] =\n                                    p' @ [joint_strategy \\<sigma>\\<^sub>e (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)) p']\""], ["proof (prove)\nusing this:\n  prefix (p @ [?m3]) ?p'3 \\<Longrightarrow> ?p'3 ! length p = ?m3\n\ngoal (1 subgoal):\n 1. \\<forall>p'.\n       prefix (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n        p' \\<longrightarrow>\n       augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p' =\n       augment_list\n        (joint_strategy \\<sigma>\\<^sub>e\n          (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n        p'", "unfolding joint_strategy_def \\<sigma>_def"], ["proof (prove)\nusing this:\n  prefix (p @ [?m3]) ?p'3 \\<Longrightarrow> ?p'3 ! length p = ?m3\n\ngoal (1 subgoal):\n 1. \\<forall>p'.\n       prefix\n        (p @\n         [if even (length p) then \\<sigma>\\<^sub>e p\n          else \\<sigma>\\<^sub>o (p ! length p) p])\n        p' \\<longrightarrow>\n       p' @\n       [if even (length p') then \\<sigma>\\<^sub>e p'\n        else \\<sigma>\\<^sub>o (p' ! length p) p'] =\n       p' @\n       [if even (length p') then \\<sigma>\\<^sub>e p'\n        else \\<sigma>\\<^sub>o\n              (if even (length p) then \\<sigma>\\<^sub>e p\n               else \\<sigma>\\<^sub>o (p ! length p) p)\n              p']", "by auto"], ["proof (state)\nthis:\n  \\<forall>p'.\n     prefix (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n      p' \\<longrightarrow>\n     augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p' =\n     augment_list\n      (joint_strategy \\<sigma>\\<^sub>e\n        (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n      p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "have simps:\"?pe p = ?pe (p @ [joint_strategy \\<sigma>\\<^sub>e \\<sigma> p])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p =\n    induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>)\n     (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)", "unfolding induced_play_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ltake (2 * N) \\<circ> lmap last \\<circ> ltl \\<circ>\n     strategy_progression (joint_strategy \\<sigma>\\<^sub>e \\<sigma>))\n     p =\n    (ltake (2 * N) \\<circ> lmap last \\<circ> ltl \\<circ>\n     strategy_progression (joint_strategy \\<sigma>\\<^sub>e \\<sigma>))\n     (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)", "by auto"], ["proof (state)\nthis:\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p =\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>)\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Even m p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from str_Even str_Odd[of \"joint_strategy \\<sigma>\\<^sub>e \\<sigma> p\", unfolded strategy_winning_by_Odd_def, rule_format, of \"\\<sigma>\\<^sub>e\"]\n         induced_play_eq[OF eq_a]"], ["proof (chain)\npicking this:\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p \\<in> A\n  induced_play\n   (joint_strategy \\<sigma>\\<^sub>e\n     (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n  \\<notin> A\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>)\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p) =\n  induced_play\n   (joint_strategy \\<sigma>\\<^sub>e\n     (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)", "show False"], ["proof (prove)\nusing this:\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p \\<in> A\n  induced_play\n   (joint_strategy \\<sigma>\\<^sub>e\n     (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n  \\<notin> A\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>)\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p) =\n  induced_play\n   (joint_strategy \\<sigma>\\<^sub>e\n     (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n\ngoal (1 subgoal):\n 1. False", "unfolding simps"], ["proof (prove)\nusing this:\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>)\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n  \\<in> A\n  induced_play\n   (joint_strategy \\<sigma>\\<^sub>e\n     (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n  \\<notin> A\n  induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>)\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p) =\n  induced_play\n   (joint_strategy \\<sigma>\\<^sub>e\n     (\\<sigma>\\<^sub>o (joint_strategy \\<sigma>\\<^sub>e \\<sigma> p)))\n   (augment_list (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)\n\ngoal (1 subgoal):\n 1. enat (length p) = 2 * N \\<or> odd (length p) \\<Longrightarrow>\n    winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)", "qed (auto simp: move_defensive_by_Even_def strategy_winning_by_Even_def position_maxlength_cannotbe_augmented)"], ["", "(* This is a repetition of the proof for defensive_move_exists_for_Even *)"], ["", "lemma defensive_move_exists_for_Odd:\nassumes [intro]:\"position p\"\nshows \"winning_position_Even p \\<or> (\\<exists> m. move_defensive_by_Odd m p)\" (is \"?w \\<or> ?d\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)", "proof(cases \"length p = 2*N \\<or> even (length p)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. enat (length p) = 2 * N \\<or> even (length p) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)\n 2. \\<not> (enat (length p) = 2 * N \\<or> even (length p)) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)", "case False"], ["proof (state)\nthis:\n  \\<not> (enat (length p) = 2 * N \\<or> even (length p))\n\ngoal (2 subgoals):\n 1. enat (length p) = 2 * N \\<or> even (length p) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)\n 2. \\<not> (enat (length p) = 2 * N \\<or> even (length p)) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)", "hence pl[intro]:\"length p < 2*N\"\n    and ev[intro]:\"odd (length p)\""], ["proof (prove)\nusing this:\n  \\<not> (enat (length p) = 2 * N \\<or> even (length p))\n\ngoal (1 subgoal):\n 1. enat (length p) < 2 * N &&& odd (length p)", "using assms[unfolded position_def]"], ["proof (prove)\nusing this:\n  \\<not> (enat (length p) = 2 * N \\<or> even (length p))\n  enat (length p) \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. enat (length p) < 2 * N &&& odd (length p)", "by auto"], ["proof (state)\nthis:\n  enat (length p) < 2 * N\n  odd (length p)\n\ngoal (2 subgoals):\n 1. enat (length p) = 2 * N \\<or> even (length p) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)\n 2. \\<not> (enat (length p) = 2 * N \\<or> even (length p)) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)", "proof(rule impI[of \"\\<not> ?d \\<longrightarrow> \\<not> ?w \\<longrightarrow> False\", rule_format], force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "assume not_def:\"\\<not> ?d\""], ["proof (state)\nthis:\n  \\<nexists>m. move_defensive_by_Odd m p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "from not_def[unfolded move_defensive_by_Odd_def]"], ["proof (chain)\npicking this:\n  \\<nexists>m.\n     odd (length p) \\<longrightarrow> \\<not> winning_position_Even (p @ [m])", "have \"\\<forall> m. \\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> (p @ [m])\""], ["proof (prove)\nusing this:\n  \\<nexists>m.\n     odd (length p) \\<longrightarrow> \\<not> winning_position_Even (p @ [m])\n\ngoal (1 subgoal):\n 1. \\<forall>m.\n       \\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> (p @ [m])", "by blast"], ["proof (state)\nthis:\n  \\<forall>m. \\<exists>\\<sigma>. strategy_winning_by_Even \\<sigma> (p @ [m])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>f. \\<forall>x. strategy_winning_by_Even (f x) (p @ [x])", "obtain \\<sigma>\\<^sub>e where\n      str_Even:\"\\<And> m. strategy_winning_by_Even (\\<sigma>\\<^sub>e m) (p @ [m])\""], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>x. strategy_winning_by_Even (f x) (p @ [x])\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>e.\n        (\\<And>m.\n            strategy_winning_by_Even (\\<sigma>\\<^sub>e m)\n             (p @ [m])) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy_winning_by_Even (\\<sigma>\\<^sub>e ?m1) (p @ [?m1])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "define \\<sigma> where \"\\<sigma> p' = \\<sigma>\\<^sub>e (p' ! length p) p'\" for p'"], ["proof (state)\nthis:\n  \\<sigma> ?p' = \\<sigma>\\<^sub>e (?p' ! length p) ?p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "assume not_win:\"\\<not> ?w\""], ["proof (state)\nthis:\n  \\<not> winning_position_Even p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "from not_win[unfolded move_defensive_by_Odd_def strategy_winning_by_Even_def]"], ["proof (chain)\npicking this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>o.\n                 induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p\n                 \\<in> A))", "obtain \\<sigma>\\<^sub>o where\n      str_Odd:\"induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p \\<notin> A\"\n      (is \"?pe p \\<notin> A\")"], ["proof (prove)\nusing this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>o.\n                 induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p\n                 \\<in> A))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>o.\n        induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p\n        \\<notin> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "let ?strat = \"joint_strategy \\<sigma> \\<sigma>\\<^sub>o\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "let ?pnext = \"(p @ [?strat p])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "fix p' m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"prefix (p @ [m]) p'\""], ["proof (state)\nthis:\n  prefix (p @ [m]) p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"(p' ! length p) = m\""], ["proof (prove)\nusing this:\n  prefix (p @ [m]) p'\n\ngoal (1 subgoal):\n 1. p' ! length p = m", "unfolding prefix_def"], ["proof (prove)\nusing this:\n  \\<exists>zs. p' = (p @ [m]) @ zs\n\ngoal (1 subgoal):\n 1. p' ! length p = m", "by auto"], ["proof (state)\nthis:\n  p' ! length p = m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  prefix (p @ [?m3]) ?p'3 \\<Longrightarrow> ?p'3 ! length p = ?m3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "hence eq_a:\"\\<forall> p'. prefix ?pnext p' \\<longrightarrow> p' @ [?strat p'] =\n                                    p' @ [joint_strategy (\\<sigma>\\<^sub>e (?strat p)) \\<sigma>\\<^sub>o p']\""], ["proof (prove)\nusing this:\n  prefix (p @ [?m3]) ?p'3 \\<Longrightarrow> ?p'3 ! length p = ?m3\n\ngoal (1 subgoal):\n 1. \\<forall>p'.\n       prefix (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n        p' \\<longrightarrow>\n       augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p' =\n       augment_list\n        (joint_strategy\n          (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n          \\<sigma>\\<^sub>o)\n        p'", "unfolding joint_strategy_def \\<sigma>_def"], ["proof (prove)\nusing this:\n  prefix (p @ [?m3]) ?p'3 \\<Longrightarrow> ?p'3 ! length p = ?m3\n\ngoal (1 subgoal):\n 1. \\<forall>p'.\n       prefix\n        (p @\n         [if even (length p) then \\<sigma>\\<^sub>e (p ! length p) p\n          else \\<sigma>\\<^sub>o p])\n        p' \\<longrightarrow>\n       p' @\n       [if even (length p') then \\<sigma>\\<^sub>e (p' ! length p) p'\n        else \\<sigma>\\<^sub>o p'] =\n       p' @\n       [if even (length p')\n        then \\<sigma>\\<^sub>e\n              (if even (length p) then \\<sigma>\\<^sub>e (p ! length p) p\n               else \\<sigma>\\<^sub>o p)\n              p'\n        else \\<sigma>\\<^sub>o p']", "by auto"], ["proof (state)\nthis:\n  \\<forall>p'.\n     prefix (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n      p' \\<longrightarrow>\n     augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p' =\n     augment_list\n      (joint_strategy\n        (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n        \\<sigma>\\<^sub>o)\n      p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "have simps:\"?pe p = ?pe (p @ [?strat p])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p =\n    induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o)\n     (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)", "unfolding induced_play_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ltake (2 * N) \\<circ> lmap last \\<circ> ltl \\<circ>\n     strategy_progression (joint_strategy \\<sigma> \\<sigma>\\<^sub>o))\n     p =\n    (ltake (2 * N) \\<circ> lmap last \\<circ> ltl \\<circ>\n     strategy_progression (joint_strategy \\<sigma> \\<sigma>\\<^sub>o))\n     (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)", "by auto"], ["proof (state)\nthis:\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p =\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nexists>m. move_defensive_by_Odd m p;\n     \\<not> winning_position_Even p\\<rbrakk>\n    \\<Longrightarrow> False", "from str_Odd str_Even[of \"?strat p\", unfolded strategy_winning_by_Even_def, rule_format]\n         induced_play_eq[OF eq_a]"], ["proof (chain)\npicking this:\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p \\<notin> A\n  induced_play\n   (joint_strategy\n     (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n     ?\\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n  \\<in> A\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p) =\n  induced_play\n   (joint_strategy\n     (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n     \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)", "show False"], ["proof (prove)\nusing this:\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p \\<notin> A\n  induced_play\n   (joint_strategy\n     (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n     ?\\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n  \\<in> A\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p) =\n  induced_play\n   (joint_strategy\n     (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n     \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n\ngoal (1 subgoal):\n 1. False", "unfolding simps"], ["proof (prove)\nusing this:\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n  \\<notin> A\n  induced_play\n   (joint_strategy\n     (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n     ?\\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n  \\<in> A\n  induced_play (joint_strategy \\<sigma> \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p) =\n  induced_play\n   (joint_strategy\n     (\\<sigma>\\<^sub>e (joint_strategy \\<sigma> \\<sigma>\\<^sub>o p))\n     \\<sigma>\\<^sub>o)\n   (augment_list (joint_strategy \\<sigma> \\<sigma>\\<^sub>o) p)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)\n\ngoal (1 subgoal):\n 1. enat (length p) = 2 * N \\<or> even (length p) \\<Longrightarrow>\n    winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)", "qed (auto simp: move_defensive_by_Odd_def strategy_winning_by_Odd_def position_maxlength_cannotbe_augmented)"], ["", "definition defensive_strategy_Even where\n\"defensive_strategy_Even p \\<equiv> SOME m. move_defensive_by_Even m p\""], ["", "definition defensive_strategy_Odd where\n\"defensive_strategy_Odd p \\<equiv> SOME m. move_defensive_by_Odd m p\""], ["", "lemma position_augment:\n  assumes \"position ((augment_list f ^^ n) p)\"\n  shows \"position p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. position p", "using assms length_augment_list[of n f p]"], ["proof (prove)\nusing this:\n  position ((augment_list f ^^ n) p)\n  length ((augment_list f ^^ n) p) = n + length p\n\ngoal (1 subgoal):\n 1. position p", "unfolding position_def"], ["proof (prove)\nusing this:\n  enat (length ((augment_list f ^^ n) p)) \\<le> 2 * N\n  length ((augment_list f ^^ n) p) = n + length p\n\ngoal (1 subgoal):\n 1. enat (length p) \\<le> 2 * N", "by fastforce"], ["", "lemma defensive_strategy_Odd:\n  assumes \"\\<not> winning_position_Even p\"\n  shows \"\\<not> winning_position_Even (((augment_list (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd)) ^^ n) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              n)\n              p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              n)\n              p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              n)\n              p)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even p\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              n)\n              p)", "proof(induct n arbitrary:p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<not> winning_position_Even p \\<Longrightarrow>\n       \\<not> winning_position_Even\n               ((augment_list\n                  (joint_strategy \\<sigma>\\<^sub>e\n                    defensive_strategy_Odd) ^^\n                 0)\n                 p)\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   \\<not> winning_position_Even p \\<Longrightarrow>\n                   \\<not> winning_position_Even\n                           ((augment_list\n                              (joint_strategy \\<sigma>\\<^sub>e\n                                defensive_strategy_Odd) ^^\n                             n)\n                             p);\n        \\<not> winning_position_Even p\\<rbrakk>\n       \\<Longrightarrow> \\<not> winning_position_Even\n                                 ((augment_list\n                                    (joint_strategy \\<sigma>\\<^sub>e\ndefensive_strategy_Odd) ^^\n                                   Suc n)\n                                   p)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<not> winning_position_Even ?p1 \\<Longrightarrow>\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            n)\n            ?p1)\n  \\<not> winning_position_Even p\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<not> winning_position_Even p \\<Longrightarrow>\n       \\<not> winning_position_Even\n               ((augment_list\n                  (joint_strategy \\<sigma>\\<^sub>e\n                    defensive_strategy_Odd) ^^\n                 0)\n                 p)\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   \\<not> winning_position_Even p \\<Longrightarrow>\n                   \\<not> winning_position_Even\n                           ((augment_list\n                              (joint_strategy \\<sigma>\\<^sub>e\n                                defensive_strategy_Odd) ^^\n                             n)\n                             p);\n        \\<not> winning_position_Even p\\<rbrakk>\n       \\<Longrightarrow> \\<not> winning_position_Even\n                                 ((augment_list\n                                    (joint_strategy \\<sigma>\\<^sub>e\ndefensive_strategy_Odd) ^^\n                                   Suc n)\n                                   p)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "proof(cases \"position p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "case True"], ["proof (state)\nthis:\n  position p\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "from Suc.prems defensive_move_exists_for_Odd[OF True] defensive_strategy_Odd_def someI"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even p\n  winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)\n  defensive_strategy_Odd ?p \\<equiv> SOME m. move_defensive_by_Odd m ?p\n  ?P ?x \\<Longrightarrow> ?P (Eps ?P)", "have \"move_defensive_by_Odd (defensive_strategy_Odd p) p\""], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even p\n  winning_position_Even p \\<or> (\\<exists>m. move_defensive_by_Odd m p)\n  defensive_strategy_Odd ?p \\<equiv> SOME m. move_defensive_by_Odd m ?p\n  ?P ?x \\<Longrightarrow> ?P (Eps ?P)\n\ngoal (1 subgoal):\n 1. move_defensive_by_Odd (defensive_strategy_Odd p) p", "by metis"], ["proof (state)\nthis:\n  move_defensive_by_Odd (defensive_strategy_Odd p) p\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "from this[unfolded move_defensive_by_Odd_def] Suc.prems\n           non_winning_moves_remains_non_winning_Even[of p]"], ["proof (chain)\npicking this:\n  odd (length p) \\<longrightarrow>\n  \\<not> winning_position_Even (augment_list defensive_strategy_Odd p)\n  \\<not> winning_position_Even p\n  \\<lbrakk>even (length p);\n   \\<forall>\\<sigma>. \\<not> strategy_winning_by_Even \\<sigma> p\\<rbrakk>\n  \\<Longrightarrow> \\<not> strategy_winning_by_Even ?\\<sigma> (p @ [?m])", "have \"\\<not> winning_position_Even (p @ [joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd p])\""], ["proof (prove)\nusing this:\n  odd (length p) \\<longrightarrow>\n  \\<not> winning_position_Even (augment_list defensive_strategy_Odd p)\n  \\<not> winning_position_Even p\n  \\<lbrakk>even (length p);\n   \\<forall>\\<sigma>. \\<not> strategy_winning_by_Even \\<sigma> p\\<rbrakk>\n  \\<Longrightarrow> \\<not> strategy_winning_by_Even ?\\<sigma> (p @ [?m])\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            (augment_list\n              (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p)", "by (simp add:  joint_strategy_def True)"], ["proof (state)\nthis:\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p)\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "with Suc.hyps[of \"p @ [joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd p]\"]"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd)\n            p) \\<Longrightarrow>\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            n)\n            (augment_list\n              (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p))\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd)\n            p) \\<Longrightarrow>\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            n)\n            (augment_list\n              (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p))\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p)\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "unfolding funpow_Suc_right comp_def"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd)\n            p) \\<Longrightarrow>\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            n)\n            (augment_list\n              (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p))\n  \\<not> winning_position_Even\n          (augment_list\n            (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p)\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              n)\n              (augment_list\n                (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) p))", "by fastforce"], ["proof (state)\nthis:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            Suc n)\n            p)\n\ngoal (1 subgoal):\n 1. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Even\n            ((augment_list\n               (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n              Suc n)\n              p)", "qed (insert position_augment,blast)"], ["proof (state)\nthis:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            Suc n)\n            p)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<not> winning_position_Even p \\<Longrightarrow>\n       \\<not> winning_position_Even\n               ((augment_list\n                  (joint_strategy \\<sigma>\\<^sub>e\n                    defensive_strategy_Odd) ^^\n                 0)\n                 p)", "qed auto"], ["proof (state)\nthis:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy \\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            n)\n            p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma defensive_strategy_Even:\n  assumes \"\\<not> winning_position_Odd p\"\n  shows \"\\<not> winning_position_Odd (((augment_list (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o)) ^^ n) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              n)\n              p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              n)\n              p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              n)\n              p)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Odd p\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              n)\n              p)", "proof(induct n arbitrary:p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<not> winning_position_Odd p \\<Longrightarrow>\n       \\<not> winning_position_Odd\n               ((augment_list\n                  (joint_strategy defensive_strategy_Even\n                    \\<sigma>\\<^sub>o) ^^\n                 0)\n                 p)\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   \\<not> winning_position_Odd p \\<Longrightarrow>\n                   \\<not> winning_position_Odd\n                           ((augment_list\n                              (joint_strategy defensive_strategy_Even\n                                \\<sigma>\\<^sub>o) ^^\n                             n)\n                             p);\n        \\<not> winning_position_Odd p\\<rbrakk>\n       \\<Longrightarrow> \\<not> winning_position_Odd\n                                 ((augment_list\n                                    (joint_strategy defensive_strategy_Even\n\\<sigma>\\<^sub>o) ^^\n                                   Suc n)\n                                   p)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<not> winning_position_Odd ?p1 \\<Longrightarrow>\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            n)\n            ?p1)\n  \\<not> winning_position_Odd p\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<not> winning_position_Odd p \\<Longrightarrow>\n       \\<not> winning_position_Odd\n               ((augment_list\n                  (joint_strategy defensive_strategy_Even\n                    \\<sigma>\\<^sub>o) ^^\n                 0)\n                 p)\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   \\<not> winning_position_Odd p \\<Longrightarrow>\n                   \\<not> winning_position_Odd\n                           ((augment_list\n                              (joint_strategy defensive_strategy_Even\n                                \\<sigma>\\<^sub>o) ^^\n                             n)\n                             p);\n        \\<not> winning_position_Odd p\\<rbrakk>\n       \\<Longrightarrow> \\<not> winning_position_Odd\n                                 ((augment_list\n                                    (joint_strategy defensive_strategy_Even\n\\<sigma>\\<^sub>o) ^^\n                                   Suc n)\n                                   p)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "proof(cases \"position p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "case True"], ["proof (state)\nthis:\n  position p\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "from Suc.prems defensive_move_exists_for_Even[OF True] defensive_strategy_Even_def someI"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Odd p\n  winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)\n  defensive_strategy_Even ?p \\<equiv> SOME m. move_defensive_by_Even m ?p\n  ?P ?x \\<Longrightarrow> ?P (Eps ?P)", "have \"move_defensive_by_Even (defensive_strategy_Even p) p\""], ["proof (prove)\nusing this:\n  \\<not> winning_position_Odd p\n  winning_position_Odd p \\<or> (\\<exists>m. move_defensive_by_Even m p)\n  defensive_strategy_Even ?p \\<equiv> SOME m. move_defensive_by_Even m ?p\n  ?P ?x \\<Longrightarrow> ?P (Eps ?P)\n\ngoal (1 subgoal):\n 1. move_defensive_by_Even (defensive_strategy_Even p) p", "by metis"], ["proof (state)\nthis:\n  move_defensive_by_Even (defensive_strategy_Even p) p\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "from this[unfolded move_defensive_by_Even_def] Suc.prems\n           non_winning_moves_remains_non_winning_Odd[of p]"], ["proof (chain)\npicking this:\n  even (length p) \\<longrightarrow>\n  \\<not> winning_position_Odd (augment_list defensive_strategy_Even p)\n  \\<not> winning_position_Odd p\n  \\<lbrakk>odd (length p);\n   \\<forall>\\<sigma>. \\<not> strategy_winning_by_Odd \\<sigma> p\\<rbrakk>\n  \\<Longrightarrow> \\<not> strategy_winning_by_Odd ?\\<sigma> (p @ [?m])", "have \"\\<not> winning_position_Odd (p @ [joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o p])\""], ["proof (prove)\nusing this:\n  even (length p) \\<longrightarrow>\n  \\<not> winning_position_Odd (augment_list defensive_strategy_Even p)\n  \\<not> winning_position_Odd p\n  \\<lbrakk>odd (length p);\n   \\<forall>\\<sigma>. \\<not> strategy_winning_by_Odd \\<sigma> p\\<rbrakk>\n  \\<Longrightarrow> \\<not> strategy_winning_by_Odd ?\\<sigma> (p @ [?m])\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            (augment_list\n              (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p)", "by (simp add: joint_strategy_def True)"], ["proof (state)\nthis:\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p)\n\ngoal (2 subgoals):\n 1. position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)\n 2. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "with Suc.hyps[of \"p @ [joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o p]\"]"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o)\n            p) \\<Longrightarrow>\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            n)\n            (augment_list\n              (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p))\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o)\n            p) \\<Longrightarrow>\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            n)\n            (augment_list\n              (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p))\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p)\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "unfolding funpow_Suc_right comp_def"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o)\n            p) \\<Longrightarrow>\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            n)\n            (augment_list\n              (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p))\n  \\<not> winning_position_Odd\n          (augment_list\n            (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) p)\n\ngoal (1 subgoal):\n 1. \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              n)\n              (augment_list\n                (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o)\n                p))", "by fastforce"], ["proof (state)\nthis:\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            Suc n)\n            p)\n\ngoal (1 subgoal):\n 1. \\<not> position p \\<Longrightarrow>\n    \\<not> winning_position_Odd\n            ((augment_list\n               (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n              Suc n)\n              p)", "qed (insert position_augment,blast)"], ["proof (state)\nthis:\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            Suc n)\n            p)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<not> winning_position_Odd p \\<Longrightarrow>\n       \\<not> winning_position_Odd\n               ((augment_list\n                  (joint_strategy defensive_strategy_Even\n                    \\<sigma>\\<^sub>o) ^^\n                 0)\n                 p)", "qed auto"], ["proof (state)\nthis:\n  \\<not> winning_position_Odd\n          ((augment_list\n             (joint_strategy defensive_strategy_Even \\<sigma>\\<^sub>o) ^^\n            n)\n            p)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale closed_GSgame = GSgame +\n  assumes closed:\"e \\<in> A \\<Longrightarrow> \\<exists> p. lprefix (llist_of p) e \\<and> (\\<forall> e'. lprefix (llist_of p) e' \\<longrightarrow> llength e' = 2*N \\<longrightarrow> e' \\<in> A)\""], ["", "(* Perhaps a misnomer, GSgames are supposed to be infinite ... *)"], ["", "locale finite_GSgame = GSgame +\n  assumes fin:\"N \\<noteq> \\<infinity>\"\nbegin"], ["", "text \\<open> Finite games are closed games. As a corollary to the GS theorem, this lets us conclude that finite games are determined. \\<close>"], ["", "sublocale closed_GSgame"], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_GSgame A N", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "assume eA:\"e \\<in> A\""], ["proof (state)\nthis:\n  e \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "let ?p = \"list_of e\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "from eA"], ["proof (chain)\npicking this:\n  e \\<in> A", "have len:\"llength e = 2*N\""], ["proof (prove)\nusing this:\n  e \\<in> A\n\ngoal (1 subgoal):\n 1. llength e = 2 * N", "using length"], ["proof (prove)\nusing this:\n  e \\<in> A\n  \\<forall>e\\<in>A. llength e = 2 * N\n\ngoal (1 subgoal):\n 1. llength e = 2 * N", "by blast"], ["proof (state)\nthis:\n  llength e = 2 * N\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "with fin"], ["proof (chain)\npicking this:\n  N \\<noteq> \\<infinity>\n  llength e = 2 * N", "have p:\"llist_of ?p = e\""], ["proof (prove)\nusing this:\n  N \\<noteq> \\<infinity>\n  llength e = 2 * N\n\ngoal (1 subgoal):\n 1. llist_of (list_of e) = e", "by (metis llist_of_list_of mult_2 not_lfinite_llength plus_eq_infty_iff_enat)"], ["proof (state)\nthis:\n  llist_of (list_of e) = e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "hence pfx:\"lprefix (llist_of ?p) e\""], ["proof (prove)\nusing this:\n  llist_of (list_of e) = e\n\ngoal (1 subgoal):\n 1. lprefix (llist_of (list_of e)) e", "by auto"], ["proof (state)\nthis:\n  lprefix (llist_of (list_of e)) e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "{"], ["proof (state)\nthis:\n  lprefix (llist_of (list_of e)) e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "fix e'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "assume \"lprefix (llist_of ?p) e'\" \"llength e' = 2 * N\""], ["proof (state)\nthis:\n  lprefix (llist_of (list_of e)) e'\n  llength e' = 2 * N\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "hence \"e' = e\""], ["proof (prove)\nusing this:\n  lprefix (llist_of (list_of e)) e'\n  llength e' = 2 * N\n\ngoal (1 subgoal):\n 1. e' = e", "using len"], ["proof (prove)\nusing this:\n  lprefix (llist_of (list_of e)) e'\n  llength e' = 2 * N\n  llength e = 2 * N\n\ngoal (1 subgoal):\n 1. e' = e", "by (metis lprefix_llength_eq_imp_eq p)"], ["proof (state)\nthis:\n  e' = e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "with eA"], ["proof (chain)\npicking this:\n  e \\<in> A\n  e' = e", "have \"e' \\<in> A\""], ["proof (prove)\nusing this:\n  e \\<in> A\n  e' = e\n\ngoal (1 subgoal):\n 1. e' \\<in> A", "by simp"], ["proof (state)\nthis:\n  e' \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>lprefix (llist_of (list_of e)) ?e'3;\n   llength ?e'3 = 2 * N\\<rbrakk>\n  \\<Longrightarrow> ?e'3 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> A \\<Longrightarrow>\n       \\<exists>p.\n          lprefix (llist_of p) e \\<and>\n          (\\<forall>e'.\n              lprefix (llist_of p) e' \\<longrightarrow>\n              llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "with pfx"], ["proof (chain)\npicking this:\n  lprefix (llist_of (list_of e)) e\n  \\<lbrakk>lprefix (llist_of (list_of e)) ?e'3;\n   llength ?e'3 = 2 * N\\<rbrakk>\n  \\<Longrightarrow> ?e'3 \\<in> A", "show \"\\<exists>p. lprefix (llist_of p) e \\<and> (\\<forall>e'. lprefix (llist_of p) e' \\<longrightarrow> llength e' = 2 * N \\<longrightarrow> e' \\<in> A)\""], ["proof (prove)\nusing this:\n  lprefix (llist_of (list_of e)) e\n  \\<lbrakk>lprefix (llist_of (list_of e)) ?e'3;\n   llength ?e'3 = 2 * N\\<rbrakk>\n  \\<Longrightarrow> ?e'3 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       lprefix (llist_of p) e \\<and>\n       (\\<forall>e'.\n           lprefix (llist_of p) e' \\<longrightarrow>\n           llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "by blast"], ["proof (state)\nthis:\n  \\<exists>p.\n     lprefix (llist_of p) e \\<and>\n     (\\<forall>e'.\n         lprefix (llist_of p) e' \\<longrightarrow>\n         llength e' = 2 * N \\<longrightarrow> e' \\<in> A)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context closed_GSgame begin"], ["", "lemma never_winning_is_losing_even:\n  assumes \"position p\" \"\\<forall> n. \\<not> winning_position_Even (((augment_list \\<sigma>) ^^ n) p)\"\n  shows \"induced_play \\<sigma> p \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<notin> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "assume \"induced_play \\<sigma> p \\<in> A\""], ["proof (state)\nthis:\n  induced_play \\<sigma> p \\<in> A\n\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "from closed[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>pa.\n     lprefix (llist_of pa) (induced_play \\<sigma> p) \\<and>\n     (\\<forall>e'.\n         lprefix (llist_of pa) e' \\<longrightarrow>\n         llength e' = 2 * N \\<longrightarrow> e' \\<in> A)", "obtain p' where\n    p':\"lprefix (llist_of p') (induced_play \\<sigma> p)\"\n    \"\\<And> e. lprefix (llist_of p') e \\<Longrightarrow> llength e = 2 * N \\<Longrightarrow> e \\<in> A\""], ["proof (prove)\nusing this:\n  \\<exists>pa.\n     lprefix (llist_of pa) (induced_play \\<sigma> p) \\<and>\n     (\\<forall>e'.\n         lprefix (llist_of pa) e' \\<longrightarrow>\n         llength e' = 2 * N \\<longrightarrow> e' \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>lprefix (llist_of p') (induced_play \\<sigma> p);\n         \\<And>e.\n            \\<lbrakk>lprefix (llist_of p') e; llength e = 2 * N\\<rbrakk>\n            \\<Longrightarrow> e \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  lprefix (llist_of p') (induced_play \\<sigma> p)\n  \\<lbrakk>lprefix (llist_of p') ?e1; llength ?e1 = 2 * N\\<rbrakk>\n  \\<Longrightarrow> ?e1 \\<in> A\n\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "from lprefix_llength_le[OF p'(1)]"], ["proof (chain)\npicking this:\n  llength (llist_of p') \\<le> llength (induced_play \\<sigma> p)", "have lp':\"llength (llist_of p') \\<le> 2 * N\""], ["proof (prove)\nusing this:\n  llength (llist_of p') \\<le> llength (induced_play \\<sigma> p)\n\ngoal (1 subgoal):\n 1. llength (llist_of p') \\<le> 2 * N", "by auto"], ["proof (state)\nthis:\n  llength (llist_of p') \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. induced_play \\<sigma> p \\<in> A \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"length p' \\<le> length p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  length p' \\<le> length p\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence \"llength (llist_of p') \\<le> llength (llist_of p)\""], ["proof (prove)\nusing this:\n  length p' \\<le> length p\n\ngoal (1 subgoal):\n 1. llength (llist_of p') \\<le> llength (llist_of p)", "by auto"], ["proof (state)\nthis:\n  llength (llist_of p') \\<le> llength (llist_of p)\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from lprefix_llength_lprefix[OF p'(1) _ this]\n      induced_play_is_lprefix[OF assms(1)]\n      lprefix_trans"], ["proof (chain)\npicking this:\n  lprefix (llist_of p) (induced_play \\<sigma> p) \\<Longrightarrow>\n  lprefix (llist_of p') (llist_of p)\n  lprefix (llist_of p) (induced_play ?\\<sigma> p)\n  \\<lbrakk>lprefix ?xs ?ys; lprefix ?ys ?zs\\<rbrakk>\n  \\<Longrightarrow> lprefix ?xs ?zs", "have pref:\"lprefix (llist_of p') (induced_play strat p)\" for strat"], ["proof (prove)\nusing this:\n  lprefix (llist_of p) (induced_play \\<sigma> p) \\<Longrightarrow>\n  lprefix (llist_of p') (llist_of p)\n  lprefix (llist_of p) (induced_play ?\\<sigma> p)\n  \\<lbrakk>lprefix ?xs ?ys; lprefix ?ys ?zs\\<rbrakk>\n  \\<Longrightarrow> lprefix ?xs ?zs\n\ngoal (1 subgoal):\n 1. lprefix (llist_of p') (induced_play strat p)", "by blast"], ["proof (state)\nthis:\n  lprefix (llist_of p') (induced_play ?strat1 p)\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from assms(2)[rule_format,of 0] assms(1)"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even ((augment_list \\<sigma> ^^ 0) p)\n  position p", "have \"\\<not> strategy_winning_by_Even \\<sigma> p\" for \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even ((augment_list \\<sigma> ^^ 0) p)\n  position p\n\ngoal (1 subgoal):\n 1. \\<not> strategy_winning_by_Even \\<sigma> p", "by auto"], ["proof (state)\nthis:\n  \\<not> strategy_winning_by_Even ?\\<sigma>1 p\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from this[unfolded strategy_winning_by_Even_def]"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o) p\n             \\<in> A)", "obtain strat where\n      strat:\"induced_play strat p \\<notin> A\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o) p\n             \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<And>strat.\n        induced_play strat p \\<notin> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  induced_play strat p \\<notin> A\n\ngoal (2 subgoals):\n 1. length p' \\<le> length p \\<Longrightarrow> False\n 2. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from strat p'(2)[OF pref]"], ["proof (chain)\npicking this:\n  induced_play strat p \\<notin> A\n  llength (induced_play ?strat3 p) = 2 * N \\<Longrightarrow>\n  induced_play ?strat3 p \\<in> A", "show False"], ["proof (prove)\nusing this:\n  induced_play strat p \\<notin> A\n  llength (induced_play ?strat3 p) = 2 * N \\<Longrightarrow>\n  induced_play ?strat3 p \\<in> A\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> length p' \\<le> length p\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "let ?n = \"length p' - length p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "let ?pos = \"(augment_list \\<sigma> ^^ ?n) p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from False"], ["proof (chain)\npicking this:\n  \\<not> length p' \\<le> length p", "have \"length p' \\<ge> length p\""], ["proof (prove)\nusing this:\n  \\<not> length p' \\<le> length p\n\ngoal (1 subgoal):\n 1. length p \\<le> length p'", "by auto"], ["proof (state)\nthis:\n  length p \\<le> length p'\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence [simp]:\"length ?pos = length p'\""], ["proof (prove)\nusing this:\n  length p \\<le> length p'\n\ngoal (1 subgoal):\n 1. length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'", "by (auto simp:length_augment_list)"], ["proof (state)\nthis:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence pos[intro]:\"position ?pos\""], ["proof (prove)\nusing this:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n\ngoal (1 subgoal):\n 1. position ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "using False lp'(1)"], ["proof (prove)\nusing this:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n  \\<not> length p' \\<le> length p\n  llength (llist_of p') \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. position ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "unfolding position_def"], ["proof (prove)\nusing this:\n  length ((augment_list \\<sigma> ^^ (length p' - length p)) p) = length p'\n  \\<not> length p' \\<le> length p\n  llength (llist_of p') \\<le> 2 * N\n\ngoal (1 subgoal):\n 1. enat (length ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n    \\<le> 2 * N", "by auto"], ["proof (state)\nthis:\n  position ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "have \"llist_of p' = llist_of ?pos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llist_of p' =\n    llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "using p'(1)"], ["proof (prove)\nusing this:\n  lprefix (llist_of p') (induced_play \\<sigma> p)\n\ngoal (1 subgoal):\n 1. llist_of p' =\n    llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "by(intro lprefix_antisym[OF lprefix_llength_lprefix lprefix_llength_lprefix],auto)"], ["proof (state)\nthis:\n  llist_of p' =\n  llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "hence p'_pos:\"p' = ?pos\""], ["proof (prove)\nusing this:\n  llist_of p' =\n  llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. p' = (augment_list \\<sigma> ^^ (length p' - length p)) p", "by simp"], ["proof (state)\nthis:\n  p' = (augment_list \\<sigma> ^^ (length p' - length p)) p\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from assms(2)[rule_format,of ?n] assms(1)"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even\n          ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  position p", "have \"\\<not> strategy_winning_by_Even \\<sigma> ?pos\" for \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even\n          ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  position p\n\ngoal (1 subgoal):\n 1. \\<not> strategy_winning_by_Even \\<sigma>\n            ((augment_list \\<sigma> ^^ (length p' - length p)) p)", "by auto"], ["proof (state)\nthis:\n  \\<not> strategy_winning_by_Even ?\\<sigma>1\n          ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from this[unfolded strategy_winning_by_Even_def]"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o)\n              ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n             \\<in> A)", "obtain strat where\n      strat:\"induced_play strat ?pos \\<notin> A\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>\\<sigma>\\<^sub>o.\n             induced_play (joint_strategy ?\\<sigma>1 \\<sigma>\\<^sub>o)\n              ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n             \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<And>strat.\n        induced_play strat\n         ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n        \\<notin> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "from p'_pos induced_play_is_lprefix[OF pos, of strat]"], ["proof (chain)\npicking this:\n  p' = (augment_list \\<sigma> ^^ (length p' - length p)) p\n  lprefix (llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))", "have pref:\"lprefix (llist_of p') (induced_play strat ?pos)\""], ["proof (prove)\nusing this:\n  p' = (augment_list \\<sigma> ^^ (length p' - length p)) p\n  lprefix (llist_of ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n\ngoal (1 subgoal):\n 1. lprefix (llist_of p')\n     (induced_play strat\n       ((augment_list \\<sigma> ^^ (length p' - length p)) p))", "by simp"], ["proof (state)\nthis:\n  lprefix (llist_of p')\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n\ngoal (1 subgoal):\n 1. \\<not> length p' \\<le> length p \\<Longrightarrow> False", "with p'(2)[OF pref] strat"], ["proof (chain)\npicking this:\n  llength\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p)) =\n  2 * N \\<Longrightarrow>\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<in> A\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<notin> A\n  lprefix (llist_of p')\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))", "show False"], ["proof (prove)\nusing this:\n  llength\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p)) =\n  2 * N \\<Longrightarrow>\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<in> A\n  induced_play strat ((augment_list \\<sigma> ^^ (length p' - length p)) p)\n  \\<notin> A\n  lprefix (llist_of p')\n   (induced_play strat\n     ((augment_list \\<sigma> ^^ (length p' - length p)) p))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma every_position_is_determined:\n  assumes \"position p\"\n  shows \"winning_position_Even p \\<or> winning_position_Odd p\" (is \"?we \\<or> ?wo\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_position_Even p \\<or> winning_position_Odd p", "proof(rule impI[of \"\\<not> ?we \\<longrightarrow> \\<not> ?wo \\<longrightarrow> False\",rule_format],force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> ?we\""], ["proof (state)\nthis:\n  \\<not> winning_position_Even p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from defensive_strategy_Odd[OF this] never_winning_is_losing_even[OF assms]"], ["proof (chain)\npicking this:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy ?\\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            ?n)\n            p)\n  \\<forall>n.\n     \\<not> winning_position_Even\n             ((augment_list ?\\<sigma> ^^ n) p) \\<Longrightarrow>\n  induced_play ?\\<sigma> p \\<notin> A", "have js_no:\"induced_play\n         (joint_strategy s defensive_strategy_Odd) p \\<notin> A\" for s"], ["proof (prove)\nusing this:\n  \\<not> winning_position_Even\n          ((augment_list\n             (joint_strategy ?\\<sigma>\\<^sub>e defensive_strategy_Odd) ^^\n            ?n)\n            p)\n  \\<forall>n.\n     \\<not> winning_position_Even\n             ((augment_list ?\\<sigma> ^^ n) p) \\<Longrightarrow>\n  induced_play ?\\<sigma> p \\<notin> A\n\ngoal (1 subgoal):\n 1. induced_play (joint_strategy s defensive_strategy_Odd) p \\<notin> A", "by auto"], ["proof (state)\nthis:\n  induced_play (joint_strategy ?s1 defensive_strategy_Odd) p \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> ?wo\""], ["proof (state)\nthis:\n  \\<not> winning_position_Odd p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "from this[unfolded strategy_winning_by_Odd_def] assms"], ["proof (chain)\npicking this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>e.\n                 induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n                 \\<notin> A))\n  position p", "have \"\\<exists> s. induced_play\n         (joint_strategy s defensive_strategy_Odd) p \\<in> A\""], ["proof (prove)\nusing this:\n  \\<not> (position p \\<and>\n          (\\<exists>\\<sigma>.\n              \\<forall>\\<sigma>\\<^sub>e.\n                 induced_play (joint_strategy \\<sigma>\\<^sub>e \\<sigma>) p\n                 \\<notin> A))\n  position p\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A", "by simp"], ["proof (state)\nthis:\n  \\<exists>s.\n     induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> winning_position_Even p;\n     \\<not> winning_position_Odd p\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A\n\ngoal (1 subgoal):\n 1. False", "using js_no"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     induced_play (joint_strategy s defensive_strategy_Odd) p \\<in> A\n  induced_play (joint_strategy ?s1 defensive_strategy_Odd) p \\<notin> A\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}