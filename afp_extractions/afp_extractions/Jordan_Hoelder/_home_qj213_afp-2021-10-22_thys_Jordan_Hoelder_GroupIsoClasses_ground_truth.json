{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder/GroupIsoClasses.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder", "problem_names": ["lemma iso_classes_iff:\n  assumes \"group G\"\n  assumes \"group H\"\n  shows \"(\\<exists>\\<phi>. \\<phi> \\<in> iso G H) = (group.iso_class G = group.iso_class H)\""], "translations": [["", "lemma iso_classes_iff:\n  assumes \"group G\"\n  assumes \"group H\"\n  shows \"(\\<exists>\\<phi>. \\<phi> \\<in> iso G H) = (group.iso_class G = group.iso_class H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "from assms(1,2)"], ["proof (chain)\npicking this:\n  Group.group G\n  Group.group H", "have groups:\"group (monoid.truncate G)\" \"group (monoid.truncate H)\""], ["proof (prove)\nusing this:\n  Group.group G\n  Group.group H\n\ngoal (1 subgoal):\n 1. Group.group (monoid.truncate G) &&& Group.group (monoid.truncate H)", "unfolding monoid.truncate_def group_def group_axioms_def Units_def monoid_def"], ["proof (prove)\nusing this:\n  (((\\<forall>x y.\n        x \\<in> carrier G \\<longrightarrow>\n        y \\<in> carrier G \\<longrightarrow>\n        x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G) \\<and>\n    (\\<forall>x y z.\n        x \\<in> carrier G \\<longrightarrow>\n        y \\<in> carrier G \\<longrightarrow>\n        z \\<in> carrier G \\<longrightarrow>\n        x \\<otimes>\\<^bsub>G\\<^esub> y \\<otimes>\\<^bsub>G\\<^esub> z =\n        x \\<otimes>\\<^bsub>G\\<^esub>\n        (y \\<otimes>\\<^bsub>G\\<^esub> z))) \\<and>\n   \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G \\<and>\n   (\\<forall>x.\n       x \\<in> carrier G \\<longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x) \\<and>\n   (\\<forall>x.\n       x \\<in> carrier G \\<longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x)) \\<and>\n  carrier G\n  \\<subseteq> {y \\<in> carrier G.\n               \\<exists>x\\<in>carrier G.\n                  x \\<otimes>\\<^bsub>G\\<^esub> y =\n                  \\<one>\\<^bsub>G\\<^esub> \\<and>\n                  y \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub>}\n  (((\\<forall>x y.\n        x \\<in> carrier H \\<longrightarrow>\n        y \\<in> carrier H \\<longrightarrow>\n        x \\<otimes>\\<^bsub>H\\<^esub> y \\<in> carrier H) \\<and>\n    (\\<forall>x y z.\n        x \\<in> carrier H \\<longrightarrow>\n        y \\<in> carrier H \\<longrightarrow>\n        z \\<in> carrier H \\<longrightarrow>\n        x \\<otimes>\\<^bsub>H\\<^esub> y \\<otimes>\\<^bsub>H\\<^esub> z =\n        x \\<otimes>\\<^bsub>H\\<^esub>\n        (y \\<otimes>\\<^bsub>H\\<^esub> z))) \\<and>\n   \\<one>\\<^bsub>H\\<^esub> \\<in> carrier H \\<and>\n   (\\<forall>x.\n       x \\<in> carrier H \\<longrightarrow>\n       \\<one>\\<^bsub>H\\<^esub> \\<otimes>\\<^bsub>H\\<^esub> x = x) \\<and>\n   (\\<forall>x.\n       x \\<in> carrier H \\<longrightarrow>\n       x \\<otimes>\\<^bsub>H\\<^esub> \\<one>\\<^bsub>H\\<^esub> = x)) \\<and>\n  carrier H\n  \\<subseteq> {y \\<in> carrier H.\n               \\<exists>x\\<in>carrier H.\n                  x \\<otimes>\\<^bsub>H\\<^esub> y =\n                  \\<one>\\<^bsub>H\\<^esub> \\<and>\n                  y \\<otimes>\\<^bsub>H\\<^esub> x = \\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. (((\\<forall>x y.\n          x \\<in> carrier\n                   \\<lparr>carrier = carrier G,\n                      mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n          y \\<in> carrier\n                   \\<lparr>carrier = carrier G,\n                      mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n          x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n          y\n          \\<in> carrier\n                 \\<lparr>carrier = carrier G,\n                    mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                    one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>) \\<and>\n      (\\<forall>x y z.\n          x \\<in> carrier\n                   \\<lparr>carrier = carrier G,\n                      mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n          y \\<in> carrier\n                   \\<lparr>carrier = carrier G,\n                      mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n          z \\<in> carrier\n                   \\<lparr>carrier = carrier G,\n                      mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n          x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n          y \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n          z =\n          x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n          (y \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n           z))) \\<and>\n     \\<one>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n     \\<in> carrier\n            \\<lparr>carrier = carrier G,\n               mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n               one = \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<and>\n     (\\<forall>x.\n         x \\<in> carrier\n                  \\<lparr>carrier = carrier G,\n                     mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                     one = \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n         \\<one>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub> \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n         x =\n         x) \\<and>\n     (\\<forall>x.\n         x \\<in> carrier\n                  \\<lparr>carrier = carrier G,\n                     mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                     one = \\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<longrightarrow>\n         x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n         \\<one>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub> =\n         x)) \\<and>\n    carrier\n     \\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n        one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\n    \\<subseteq> {y \\<in> carrier\n                          \\<lparr>carrier = carrier G,\n                             mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                             one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>.\n                 \\<exists>x\\<in>carrier\n                                 \\<lparr>carrier = carrier G,\n                                    mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                                    one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>.\n                    x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n                    y =\n                    \\<one>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub> \\<and>\n                    y \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n                    x =\n                    \\<one>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>} &&&\n    (((\\<forall>x y.\n          x \\<in> carrier\n                   \\<lparr>carrier = carrier H,\n                      mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n          y \\<in> carrier\n                   \\<lparr>carrier = carrier H,\n                      mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n          x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n          y\n          \\<in> carrier\n                 \\<lparr>carrier = carrier H,\n                    mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                    one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>) \\<and>\n      (\\<forall>x y z.\n          x \\<in> carrier\n                   \\<lparr>carrier = carrier H,\n                      mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n          y \\<in> carrier\n                   \\<lparr>carrier = carrier H,\n                      mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n          z \\<in> carrier\n                   \\<lparr>carrier = carrier H,\n                      mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                      one =\n                        \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n          x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n          y \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n          z =\n          x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n          (y \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n           z))) \\<and>\n     \\<one>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n     \\<in> carrier\n            \\<lparr>carrier = carrier H,\n               mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n               one = \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<and>\n     (\\<forall>x.\n         x \\<in> carrier\n                  \\<lparr>carrier = carrier H,\n                     mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                     one = \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n         \\<one>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub> \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n         x =\n         x) \\<and>\n     (\\<forall>x.\n         x \\<in> carrier\n                  \\<lparr>carrier = carrier H,\n                     mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                     one = \\<one>\\<^bsub>H\\<^esub>\\<rparr> \\<longrightarrow>\n         x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n         \\<one>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub> =\n         x)) \\<and>\n    carrier\n     \\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n        one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\n    \\<subseteq> {y \\<in> carrier\n                          \\<lparr>carrier = carrier H,\n                             mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                             one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>.\n                 \\<exists>x\\<in>carrier\n                                 \\<lparr>carrier = carrier H,\n                                    mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                                    one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>.\n                    x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n                    y =\n                    \\<one>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub> \\<and>\n                    y \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n                    x =\n                    \\<one>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  Group.group (monoid.truncate G)\n  Group.group (monoid.truncate H)\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "have \"(\\<exists>\\<phi>. \\<phi> \\<in> iso G H) = (\\<exists>\\<phi>. \\<phi> \\<in> iso (monoid.truncate G) (monoid.truncate H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (\\<exists>\\<phi>.\n        \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H))", "unfolding iso_def hom_def monoid.truncate_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>.\n        \\<phi>\n        \\<in> {h \\<in> {h \\<in> carrier G \\<rightarrow> carrier H.\n                        \\<forall>x\\<in>carrier G.\n                           \\<forall>y\\<in>carrier G.\n                              h (x \\<otimes>\\<^bsub>G\\<^esub> y) =\n                              h x \\<otimes>\\<^bsub>H\\<^esub> h y}.\n               bij_betw h (carrier G) (carrier H)}) =\n    (\\<exists>\\<phi>.\n        \\<phi>\n        \\<in> {h \\<in> {h \\<in> carrier\n                                 \\<lparr>carrier = carrier G,\n                                    mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                                    one =\n\\<one>\\<^bsub>G\\<^esub>\\<rparr> \\<rightarrow>\n                                carrier\n                                 \\<lparr>carrier = carrier H,\n                                    mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                                    one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>.\n                        \\<forall>x\\<in>carrier\n  \\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n     one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>.\n                           \\<forall>y\\<in>carrier\n     \\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n        one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>.\n                              h (x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier G, mult = (\\<otimes>\\<^bsub>G\\<^esub>), one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>\\<^esub>\n                                 y) =\n                              h x \\<otimes>\\<^bsub>\\<lparr>carrier = carrier H, mult = (\\<otimes>\\<^bsub>H\\<^esub>), one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>\\<^esub>\n                              h y}.\n               bij_betw h\n                (carrier\n                  \\<lparr>carrier = carrier G,\n                     mult = (\\<otimes>\\<^bsub>G\\<^esub>),\n                     one = \\<one>\\<^bsub>G\\<^esub>\\<rparr>)\n                (carrier\n                  \\<lparr>carrier = carrier H,\n                     mult = (\\<otimes>\\<^bsub>H\\<^esub>),\n                     one = \\<one>\\<^bsub>H\\<^esub>\\<rparr>)})", "by auto"], ["proof (state)\nthis:\n  (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n  (\\<exists>\\<phi>.\n      \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H))\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "also"], ["proof (state)\nthis:\n  (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n  (\\<exists>\\<phi>.\n      \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H))\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "have \"\\<dots> = group_iso_rel (Abs_group (monoid.truncate G)) (Abs_group (monoid.truncate H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>.\n        \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H)) =\n    group_iso_rel (Abs_group (monoid.truncate G))\n     (Abs_group (monoid.truncate H))", "unfolding group_iso_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>.\n        \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H)) =\n    (\\<exists>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso (Rep_group (Abs_group (monoid.truncate G)))\n               (Rep_group (Abs_group (monoid.truncate H))))", "using groups group.Abs_group_inverse"], ["proof (prove)\nusing this:\n  Group.group (monoid.truncate G)\n  Group.group (monoid.truncate H)\n  ?y \\<in> {G. Group.group G} \\<Longrightarrow>\n  Rep_group (Abs_group ?y) = ?y\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>.\n        \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H)) =\n    (\\<exists>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso (Rep_group (Abs_group (monoid.truncate G)))\n               (Rep_group (Abs_group (monoid.truncate H))))", "by (metis mem_Collect_eq)"], ["proof (state)\nthis:\n  (\\<exists>\\<phi>.\n      \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H)) =\n  group_iso_rel (Abs_group (monoid.truncate G))\n   (Abs_group (monoid.truncate H))\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "also"], ["proof (state)\nthis:\n  (\\<exists>\\<phi>.\n      \\<phi> \\<in> Group.iso (monoid.truncate G) (monoid.truncate H)) =\n  group_iso_rel (Abs_group (monoid.truncate G))\n   (Abs_group (monoid.truncate H))\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "have \"\\<dots> = (group.iso_class G = group.iso_class H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group_iso_rel (Abs_group (monoid.truncate G))\n     (Abs_group (monoid.truncate H)) =\n    (group.iso_class G = group.iso_class H)", "using group.iso_class_def assms group_iso_class.abs_eq_iff"], ["proof (prove)\nusing this:\n  Group.group ?G \\<Longrightarrow>\n  group.iso_class ?G = Abs_group_iso (Abs_group (monoid.truncate ?G))\n  Group.group G\n  Group.group H\n  (Abs_group_iso ?x = Abs_group_iso ?y) = group_iso_rel ?x ?y\n\ngoal (1 subgoal):\n 1. group_iso_rel (Abs_group (monoid.truncate G))\n     (Abs_group (monoid.truncate H)) =\n    (group.iso_class G = group.iso_class H)", "by metis"], ["proof (state)\nthis:\n  group_iso_rel (Abs_group (monoid.truncate G))\n   (Abs_group (monoid.truncate H)) =\n  (group.iso_class G = group.iso_class H)\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "finally"], ["proof (chain)\npicking this:\n  (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n  (group.iso_class G = group.iso_class H)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n  (group.iso_class G = group.iso_class H)\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n    (group.iso_class G = group.iso_class H)", "."], ["proof (state)\nthis:\n  (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso G H) =\n  (group.iso_class G = group.iso_class H)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}