{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder/CompositionSeries.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder", "problem_names": ["lemma (in group) unique_sizes_subgrp_normal:\n  assumes fin:\"finite (carrier G)\"\n  assumes \"\\<exists>!Q. Q \\<in> subgroups_of_size q\"\n  shows \"(THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G\"", "lemma (in group) pq_order_unique_subgrp:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"\\<exists>!Q. Q \\<in> (subgroups_of_size q)\"", "lemma (in group) trivial_subgroup_is_normal:\n  shows \"{\\<one>} \\<lhd> G\"", "lemma (in normal_series) is_normal_series: \"normal_series G \\<GG>\"", "lemma (in group) trivial_normal_series:\n  shows \"normal_series G [{\\<one>}, carrier G]\"", "lemma (in normal_series) length_two_unique:\n  assumes \"length \\<GG> = 2\"\n  shows \"\\<GG> = [{\\<one>}, carrier G]\"", "lemma (in group) normal_series_extend:\n  assumes normal:\"normal_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\"\n  assumes HG:\"H \\<lhd> G\"\n  shows \"normal_series G (\\<HH> @ [carrier G])\"", "lemma (in normal_series) normal_series_subgroups:\n  shows \"i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\"", "lemma (in normal_series) normal_series_snd_to_last:\n  shows \"\\<GG> ! (length \\<GG> - 2) \\<lhd> G\"", "lemma (in normal_series) normal_series_prefix_closed:\n  assumes \"i \\<le> length \\<GG>\" and \"0 < i\"\n  shows \"normal_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) (take i \\<GG>)\"", "lemma (in group) pq_order_normal_series:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"normal_series G [{\\<one>}, (THE H. H \\<in> subgroups_of_size q), carrier G]\"", "lemma (in normal_series) quotients_length:\n  shows \"length quotients + 1 = length \\<GG>\"", "lemma (in normal_series) last_quotient:\n  assumes \"length \\<GG> > 1\"\n  shows \"last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\"", "lemma (in normal_series) normal_series_iso:\n  assumes H:\"group H\"\n  assumes iso:\"\\<Psi> \\<in> iso G H\"\n  shows \"normal_series H (map (image \\<Psi>) \\<GG>)\"", "lemma (in composition_series) is_composition_series:\n  shows \"composition_series G \\<GG>\"", "lemma (in composition_series) composition_series_length_one:\n  shows \"(length \\<GG> = 1) = (\\<GG> = [{\\<one>}])\"", "lemma (in composition_series) composition_series_triv_group:\n  shows \"(carrier G = {\\<one>}) = (\\<GG> = [{\\<one>}])\"", "lemma (in composition_series) inner_elements_not_triv:\n  assumes \"i + 1 < length \\<GG>\"\n  assumes \"i > 0\"\n  shows \"\\<GG> ! i \\<noteq> {\\<one>}\"", "lemma (in composition_series) composition_series_simple_group:\n  shows \"(simple_group G) = (\\<GG> = [{\\<one>}, carrier G])\"", "lemma (in composition_series) entries_distinct:\n  assumes finite:\"finite (carrier G)\"\n  assumes i:\"i + 1 < length \\<GG>\"\n  shows \"\\<GG> ! i \\<noteq> \\<GG> ! (i + 1)\"", "lemma (in group) pq_order_composition_series:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"composition_series G [{\\<one>}, (THE H. H \\<in> subgroups_of_size q), carrier G]\"", "lemma (in composition_series) composition_series_prefix_closed:\n  assumes \"i \\<le> length \\<GG>\" and \"0 < i\"\n  shows \"composition_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) (take i \\<GG>)\"", "lemma (in composition_series) composition_series_snd_simple:\n  assumes \"2 \\<le> length \\<GG>\"\n  shows \"simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\"", "lemma (in composition_series) composition_snd_simple_iff:\n  assumes \"i < length \\<GG>\"\n  shows \"(simple_group (G\\<lparr>carrier :=  \\<GG> ! i\\<rparr>)) = (i = 1)\"", "lemma (in composition_series) snd_to_last_max_normal:\n  assumes finite:\"finite (carrier G)\"\n  assumes length:\"length \\<GG> > 1\"\n  shows \"max_normal_subgroup (\\<GG> ! (length \\<GG> - 2)) G\"", "lemma remdups_adj_obtain_adjacency:\n  assumes \"i + 1 < length (remdups_adj xs)\" \"length xs > 0\"\n  obtains j where \"j + 1 < length xs\"\n    \"(remdups_adj xs) ! i = xs ! j\" \"(remdups_adj xs) ! (i + 1) = xs ! (j + 1)\"", "lemma hd_remdups_adj[simp]: \"hd (remdups_adj xs) = hd xs\"", "lemma remdups_adj_adjacent:\n  \"Suc i < length (remdups_adj xs) \\<Longrightarrow> remdups_adj xs ! i \\<noteq> remdups_adj xs ! Suc i\"", "lemma (in composition_series) intersect_normal:\n  assumes finite:\"finite (carrier G)\"\n  assumes KG:\"K \\<lhd> G\"\n  shows \"composition_series (G\\<lparr>carrier := K\\<rparr>) (remdups_adj (map (\\<lambda>H. K \\<inter> H) \\<GG>))\"", "lemma (in group) composition_series_extend:\n  assumes \"composition_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\"\n  assumes \"simple_group (G Mod H)\" \"H \\<lhd> G\"\n  shows \"composition_series G (\\<HH> @ [carrier G])\"", "lemma (in composition_series) entries_mono:\n  assumes \"i \\<le> j\" \"j < length \\<GG>\"\n  shows \"\\<GG> ! i \\<subseteq> \\<GG> ! j\""], "translations": [["", "lemma (in group) unique_sizes_subgrp_normal:\n  assumes fin:\"finite (carrier G)\"\n  assumes \"\\<exists>!Q. Q \\<in> subgroups_of_size q\"\n  shows \"(THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "from assms"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  \\<exists>!Q. Q \\<in> subgroups_of_size q", "obtain Q where \"Q \\<in> subgroups_of_size q\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        Q \\<in> subgroups_of_size q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "define Q where \"Q = (THE Q. Q \\<in> subgroups_of_size q)\""], ["proof (state)\nthis:\n  Q = (THE Q. Q \\<in> subgroups_of_size q)\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "with assms"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n  Q = (THE Q. Q \\<in> subgroups_of_size q)", "have Qsize:\"Q \\<in> subgroups_of_size q\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n  Q = (THE Q. Q \\<in> subgroups_of_size q)\n\ngoal (1 subgoal):\n 1. Q \\<in> subgroups_of_size q", "using theI"], ["proof (prove)\nusing this:\n  finite (carrier G)\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n  Q = (THE Q. Q \\<in> subgroups_of_size q)\n  \\<lbrakk>?P ?a; \\<And>x. ?P x \\<Longrightarrow> x = ?a\\<rbrakk>\n  \\<Longrightarrow> ?P (THE x. ?P x)\n\ngoal (1 subgoal):\n 1. Q \\<in> subgroups_of_size q", "by metis"], ["proof (state)\nthis:\n  Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "hence QG:\"subgroup Q G\" and cardQ:\"card Q = q\""], ["proof (prove)\nusing this:\n  Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. subgroup Q G &&& card Q = q", "unfolding subgroups_of_size_def"], ["proof (prove)\nusing this:\n  Q \\<in> {H. subgroup H G \\<and> card H = q}\n\ngoal (1 subgoal):\n 1. subgroup Q G &&& card Q = q", "by auto"], ["proof (state)\nthis:\n  subgroup Q G\n  card Q = q\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "from QG"], ["proof (chain)\npicking this:\n  subgroup Q G", "have \"Q \\<lhd> G\""], ["proof (prove)\nusing this:\n  subgroup Q G\n\ngoal (1 subgoal):\n 1. Q \\<lhd> G", "apply(rule normalI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>carrier G. Q #> x = x <# Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "assume g:\"g \\<in> carrier G\""], ["proof (state)\nthis:\n  g \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "hence invg:\"inv g \\<in> carrier G\""], ["proof (prove)\nusing this:\n  g \\<in> carrier G\n\ngoal (1 subgoal):\n 1. inv g \\<in> carrier G", "by (metis inv_closed)"], ["proof (state)\nthis:\n  inv g \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "with fin Qsize"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  Q \\<in> subgroups_of_size q\n  inv g \\<in> carrier G", "have \"conjugation_action q (inv g) Q \\<in> subgroups_of_size q\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  Q \\<in> subgroups_of_size q\n  inv g \\<in> carrier G\n\ngoal (1 subgoal):\n 1. conjugation_action q (inv g) Q \\<in> subgroups_of_size q", "by (metis conjugation_is_size_invariant)"], ["proof (state)\nthis:\n  conjugation_action q (inv g) Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "with g Qsize"], ["proof (chain)\npicking this:\n  g \\<in> carrier G\n  Q \\<in> subgroups_of_size q\n  conjugation_action q (inv g) Q \\<in> subgroups_of_size q", "have \"(inv g) <# (Q #> inv (inv g)) \\<in> subgroups_of_size q\""], ["proof (prove)\nusing this:\n  g \\<in> carrier G\n  Q \\<in> subgroups_of_size q\n  conjugation_action q (inv g) Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. inv g <# (Q #> inv (inv g)) \\<in> subgroups_of_size q", "unfolding conjugation_action_def"], ["proof (prove)\nusing this:\n  g \\<in> carrier G\n  Q \\<in> subgroups_of_size q\n  (\\<lambda>g\\<in>carrier G.\n      \\<lambda>P\\<in>subgroups_of_size q. g <# (P #> inv g))\n   (inv g) Q\n  \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. inv g <# (Q #> inv (inv g)) \\<in> subgroups_of_size q", "by auto"], ["proof (state)\nthis:\n  inv g <# (Q #> inv (inv g)) \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "with invg g"], ["proof (chain)\npicking this:\n  inv g \\<in> carrier G\n  g \\<in> carrier G\n  inv g <# (Q #> inv (inv g)) \\<in> subgroups_of_size q", "have \"inv g <# (Q #> g) = Q\""], ["proof (prove)\nusing this:\n  inv g \\<in> carrier G\n  g \\<in> carrier G\n  inv g <# (Q #> inv (inv g)) \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. inv g <# (Q #> g) = Q", "by (metis Qsize assms(2) inv_inv)"], ["proof (state)\nthis:\n  inv g <# (Q #> g) = Q\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> Q #> x = x <# Q", "with QG QG g"], ["proof (chain)\npicking this:\n  subgroup Q G\n  subgroup Q G\n  g \\<in> carrier G\n  inv g <# (Q #> g) = Q", "show \"Q #> g = g <# Q\""], ["proof (prove)\nusing this:\n  subgroup Q G\n  subgroup Q G\n  g \\<in> carrier G\n  inv g <# (Q #> g) = Q\n\ngoal (1 subgoal):\n 1. Q #> g = g <# Q", "by (rule conj_wo_inv)"], ["proof (state)\nthis:\n  Q #> g = g <# Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q \\<lhd> G\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "with Q_def"], ["proof (chain)\npicking this:\n  Q = (THE Q. Q \\<in> subgroups_of_size q)\n  Q \\<lhd> G", "show ?thesis"], ["proof (prove)\nusing this:\n  Q = (THE Q. Q \\<in> subgroups_of_size q)\n  Q \\<lhd> G\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "by simp"], ["proof (state)\nthis:\n  (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>A group whose order is the product of two distinct\nprimes $p$ and $q$ where $p < q$ has a unique subgroup of size $q$:\\<close>"], ["", "lemma (in group) pq_order_unique_subgrp:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"\\<exists>!Q. Q \\<in> (subgroups_of_size q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "from primep primeq pq"], ["proof (chain)\npicking this:\n  prime p\n  prime q\n  p < q", "have nqdvdp:\"\\<not> (q dvd p)\""], ["proof (prove)\nusing this:\n  prime p\n  prime q\n  p < q\n\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "by (metis less_not_refl3 prime_nat_iff)"], ["proof (state)\nthis:\n  \\<not> q dvd p\n\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "define calM where \"calM = {s. s \\<subseteq> carrier G \\<and> card s = q ^ 1}\""], ["proof (state)\nthis:\n  calM = {s. s \\<subseteq> carrier G \\<and> card s = q ^ 1}\n\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "define RelM where \"RelM = {(N1, N2). N1 \\<in> calM \\<and> N2 \\<in> calM \\<and> (\\<exists>g\\<in>carrier G. N1 = N2 #> g)}\""], ["proof (state)\nthis:\n  RelM =\n  {(N1, N2).\n   N1 \\<in> calM \\<and>\n   N2 \\<in> calM \\<and> (\\<exists>g\\<in>carrier G. N1 = N2 #> g)}\n\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "interpret syl: snd_sylow G q 1 p calM RelM"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd_sylow G q 1 p &&&\n    (calM \\<equiv> {s. s \\<subseteq> carrier G \\<and> card s = q ^ 1}) &&&\n    RelM \\<equiv>\n    {(N1, N2).\n     N1 \\<in> calM \\<and>\n     N2 \\<in> calM \\<and> (\\<exists>g\\<in>carrier G. N1 = N2 #> g)}", "unfolding snd_sylow_def sylow_def snd_sylow_axioms_def sylow_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Group.group G \\<and>\n     prime q \\<and> order G = q ^ 1 * p \\<and> finite (carrier G)) \\<and>\n    \\<not> q dvd p &&&\n    (calM \\<equiv> {s. s \\<subseteq> carrier G \\<and> card s = q ^ 1}) &&&\n    RelM \\<equiv>\n    {(N1, N2).\n     N1 \\<in> calM \\<and>\n     N2 \\<in> calM \\<and> (\\<exists>g\\<in>carrier G. N1 = N2 #> g)}", "using is_group primeq orderG finite nqdvdp calM_def RelM_def"], ["proof (prove)\nusing this:\n  Group.group G\n  prime q\n  order G = q * p\n  finite (carrier G)\n  \\<not> q dvd p\n  calM = {s. s \\<subseteq> carrier G \\<and> card s = q ^ 1}\n  RelM =\n  {(N1, N2).\n   N1 \\<in> calM \\<and>\n   N2 \\<in> calM \\<and> (\\<exists>g\\<in>carrier G. N1 = N2 #> g)}\n\ngoal (1 subgoal):\n 1. (Group.group G \\<and>\n     prime q \\<and> order G = q ^ 1 * p \\<and> finite (carrier G)) \\<and>\n    \\<not> q dvd p &&&\n    (calM \\<equiv> {s. s \\<subseteq> carrier G \\<and> card s = q ^ 1}) &&&\n    RelM \\<equiv>\n    {(N1, N2).\n     N1 \\<in> calM \\<and>\n     N2 \\<in> calM \\<and> (\\<exists>g\\<in>carrier G. N1 = N2 #> g)}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "obtain Q where Q:\"Q \\<in> subgroups_of_size q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        Q \\<in> subgroups_of_size q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (lifting, mono_tags) mem_Collect_eq power_one_right subgroups_of_size_def syl.sylow_thm)"], ["proof (state)\nthis:\n  Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "thus ?thesis"], ["proof (prove)\nusing this:\n  Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "proof (rule ex1I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "assume P:\"P \\<in> subgroups_of_size q\""], ["proof (state)\nthis:\n  P \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "have \"card (subgroups_of_size q) mod q = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (subgroups_of_size q) mod q = 1", "by (metis power_one_right syl.p_sylow_mod_p)"], ["proof (state)\nthis:\n  card (subgroups_of_size q) mod q = 1\n\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "moreover"], ["proof (state)\nthis:\n  card (subgroups_of_size q) mod q = 1\n\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "have \"card (subgroups_of_size q) dvd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (subgroups_of_size q) dvd p", "by (metis power_one_right syl.num_sylow_dvd_remainder)"], ["proof (state)\nthis:\n  card (subgroups_of_size q) dvd p\n\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "then"], ["proof (chain)\npicking this:\n  card (subgroups_of_size q) dvd p", "have \"card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1\""], ["proof (prove)\nusing this:\n  card (subgroups_of_size q) dvd p\n\ngoal (1 subgoal):\n 1. card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1", "using primep"], ["proof (prove)\nusing this:\n  card (subgroups_of_size q) dvd p\n  prime p\n\ngoal (1 subgoal):\n 1. card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1", "by (auto simp add: prime_nat_iff)"], ["proof (state)\nthis:\n  card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1\n\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "ultimately"], ["proof (chain)\npicking this:\n  card (subgroups_of_size q) mod q = 1\n  card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1", "have \"card (subgroups_of_size q) = 1\""], ["proof (prove)\nusing this:\n  card (subgroups_of_size q) mod q = 1\n  card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1\n\ngoal (1 subgoal):\n 1. card (subgroups_of_size q) = 1", "using pq"], ["proof (prove)\nusing this:\n  card (subgroups_of_size q) mod q = 1\n  card (subgroups_of_size q) = p \\<or> card (subgroups_of_size q) = 1\n  p < q\n\ngoal (1 subgoal):\n 1. card (subgroups_of_size q) = 1", "by auto"], ["proof (state)\nthis:\n  card (subgroups_of_size q) = 1\n\ngoal (1 subgoal):\n 1. \\<And>Qa. Qa \\<in> subgroups_of_size q \\<Longrightarrow> Qa = Q", "with Q P"], ["proof (chain)\npicking this:\n  Q \\<in> subgroups_of_size q\n  P \\<in> subgroups_of_size q\n  card (subgroups_of_size q) = 1", "show \"P = Q\""], ["proof (prove)\nusing this:\n  Q \\<in> subgroups_of_size q\n  P \\<in> subgroups_of_size q\n  card (subgroups_of_size q) = 1\n\ngoal (1 subgoal):\n 1. P = Q", "by (auto simp:card_Suc_eq)"], ["proof (state)\nthis:\n  P = Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>... And this unique subgroup is normal.\\<close>"], ["", "corollary (in group) pq_order_subgrp_normal:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"(THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "using assms"], ["proof (prove)\nusing this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n\ngoal (1 subgoal):\n 1. (THE Q. Q \\<in> subgroups_of_size q) \\<lhd> G", "by (metis pq_order_unique_subgrp unique_sizes_subgrp_normal)"], ["", "text \\<open>The trivial subgroup is normal in every group.\\<close>"], ["", "lemma (in group) trivial_subgroup_is_normal:\n  shows \"{\\<one>} \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<one>} \\<lhd> G", "unfolding normal_def normal_axioms_def r_coset_def l_coset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup {\\<one>} G \\<and>\n    Group.group G \\<and>\n    (\\<forall>x\\<in>carrier G.\n        (\\<Union>h\\<in>{\\<one>}. {h \\<otimes> x}) =\n        (\\<Union>h\\<in>{\\<one>}. {x \\<otimes> h}))", "by (auto intro: normalI subgroupI simp: is_group)"], ["", "subsection \\<open>Normal Series\\<close>"], ["", "text \\<open>We define a normal series as a locale which fixes one group\n@{term G} and a list @{term \\<GG>} of subsets of @{term G}'s carrier. This list\nmust begin with the trivial subgroup, end with the carrier of the group itself\nand each of the list items must be a normal subgroup of its successor.\\<close>"], ["", "locale normal_series = group +\n  fixes \\<GG>\n  assumes notempty:\"\\<GG> \\<noteq> []\"\n  assumes hd:\"hd \\<GG> = {\\<one>}\"\n  assumes last:\"last \\<GG> = carrier G\"\n  assumes normal:\"\\<And>i. i + 1 < length \\<GG> \\<Longrightarrow> (\\<GG> ! i) \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["", "lemma (in normal_series) is_normal_series: \"normal_series G \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G \\<GG>", "by (rule normal_series_axioms)"], ["", "text \\<open>For every group there is a \"trivial\" normal series consisting\nonly of the group itself and its trivial subgroup.\\<close>"], ["", "lemma (in group) trivial_normal_series:\n  shows \"normal_series G [{\\<one>}, carrier G]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G [{\\<one>}, carrier G]", "unfolding normal_series_def normal_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group G \\<and>\n    ([{\\<one>}, carrier G] \\<noteq> [] \\<and>\n     hd [{\\<one>}, carrier G] = {\\<one>}) \\<and>\n    last [{\\<one>}, carrier G] = carrier G \\<and>\n    (\\<forall>i.\n        i + 1 < length [{\\<one>}, carrier G] \\<longrightarrow>\n        [{\\<one>}, carrier G] ! i \\<lhd> G\n        \\<lparr>carrier := [{\\<one>}, carrier G] ! (i + 1)\\<rparr>)", "using is_group trivial_subgroup_is_normal"], ["proof (prove)\nusing this:\n  Group.group G\n  {\\<one>} \\<lhd> G\n\ngoal (1 subgoal):\n 1. Group.group G \\<and>\n    ([{\\<one>}, carrier G] \\<noteq> [] \\<and>\n     hd [{\\<one>}, carrier G] = {\\<one>}) \\<and>\n    last [{\\<one>}, carrier G] = carrier G \\<and>\n    (\\<forall>i.\n        i + 1 < length [{\\<one>}, carrier G] \\<longrightarrow>\n        [{\\<one>}, carrier G] ! i \\<lhd> G\n        \\<lparr>carrier := [{\\<one>}, carrier G] ! (i + 1)\\<rparr>)", "by auto"], ["", "text \\<open>We can also show that the normal series presented above is the only such with\na length of two:\\<close>"], ["", "lemma (in normal_series) length_two_unique:\n  assumes \"length \\<GG> = 2\"\n  shows \"\\<GG> = [{\\<one>}, carrier G]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}, carrier G]", "proof(rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<GG> = length [{\\<one>}, carrier G]\n 2. \\<And>i.\n       i < length \\<GG> \\<Longrightarrow>\n       \\<GG> ! i = [{\\<one>}, carrier G] ! i", "from assms"], ["proof (chain)\npicking this:\n  length \\<GG> = 2", "show \"length \\<GG> = length [{\\<one>}, carrier G]\""], ["proof (prove)\nusing this:\n  length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. length \\<GG> = length [{\\<one>}, carrier G]", "by auto"], ["proof (state)\nthis:\n  length \\<GG> = length [{\\<one>}, carrier G]\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<GG> \\<Longrightarrow>\n       \\<GG> ! i = [{\\<one>}, carrier G] ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<GG> \\<Longrightarrow>\n       \\<GG> ! i = [{\\<one>}, carrier G] ! i", "show \"\\<GG> ! i = [{\\<one>}, carrier G] ! i\" if i:\"i < length \\<GG>\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "have \"i = 0 \\<or> i = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = 0 \\<or> i = 1", "using that assms"], ["proof (prove)\nusing this:\n  i < length \\<GG>\n  length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. i = 0 \\<or> i = 1", "by auto"], ["proof (state)\nthis:\n  i = 0 \\<or> i = 1\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "thus \"\\<GG> ! i = [{\\<one>}, carrier G] ! i\""], ["proof (prove)\nusing this:\n  i = 0 \\<or> i = 1\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "proof(rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i\n 2. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "assume i:\"i = 0\""], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i\n 2. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "hence \"\\<GG> ! i = hd \\<GG>\""], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = hd \\<GG>", "by (metis hd_conv_nth notempty)"], ["proof (state)\nthis:\n  \\<GG> ! i = hd \\<GG>\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i\n 2. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "thus \"\\<GG> ! i = [{\\<one>}, carrier G] ! i\""], ["proof (prove)\nusing this:\n  \\<GG> ! i = hd \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "using hd i"], ["proof (prove)\nusing this:\n  \\<GG> ! i = hd \\<GG>\n  hd \\<GG> = {\\<one>}\n  i = 0\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "by simp"], ["proof (state)\nthis:\n  \\<GG> ! i = [{\\<one>}, carrier G] ! i\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "assume i:\"i = 1\""], ["proof (state)\nthis:\n  i = 1\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "with assms"], ["proof (chain)\npicking this:\n  length \\<GG> = 2\n  i = 1", "have \"\\<GG> ! i = last \\<GG>\""], ["proof (prove)\nusing this:\n  length \\<GG> = 2\n  i = 1\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = last \\<GG>", "by (metis diff_add_inverse last_conv_nth nat_1_add_1 notempty)"], ["proof (state)\nthis:\n  \\<GG> ! i = last \\<GG>\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow> \\<GG> ! i = [{\\<one>}, carrier G] ! i", "thus \"\\<GG> ! i = [{\\<one>}, carrier G] ! i\""], ["proof (prove)\nusing this:\n  \\<GG> ! i = last \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "using last i"], ["proof (prove)\nusing this:\n  \\<GG> ! i = last \\<GG>\n  last \\<GG> = carrier G\n  i = 1\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = [{\\<one>}, carrier G] ! i", "by simp"], ["proof (state)\nthis:\n  \\<GG> ! i = [{\\<one>}, carrier G] ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<GG> ! i = [{\\<one>}, carrier G] ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i = [{\\<one>}, carrier G] ! ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We can construct new normal series by expanding existing ones: If we\nappend the carrier of a group @{term G} to a normal series for a normal subgroup\n@{term \"H \\<lhd> G\"} we receive a normal series for @{term G}.\\<close>"], ["", "lemma (in group) normal_series_extend:\n  assumes normal:\"normal_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\"\n  assumes HG:\"H \\<lhd> G\"\n  shows \"normal_series G (\\<HH> @ [carrier G])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "from normal"], ["proof (chain)\npicking this:\n  normal_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>", "interpret normalH: normal_series \"(G\\<lparr>carrier := H\\<rparr>)\" \\<HH>"], ["proof (prove)\nusing this:\n  normal_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\n\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "from normalH.hd"], ["proof (chain)\npicking this:\n  hd \\<HH> = {\\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>}", "have \"hd \\<HH> = {\\<one>}\""], ["proof (prove)\nusing this:\n  hd \\<HH> = {\\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>}\n\ngoal (1 subgoal):\n 1. hd \\<HH> = {\\<one>}", "by simp"], ["proof (state)\nthis:\n  hd \\<HH> = {\\<one>}\n\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "with normalH.notempty"], ["proof (chain)\npicking this:\n  \\<HH> \\<noteq> []\n  hd \\<HH> = {\\<one>}", "have hdTriv:\"hd (\\<HH> @ [carrier G]) = {\\<one>}\""], ["proof (prove)\nusing this:\n  \\<HH> \\<noteq> []\n  hd \\<HH> = {\\<one>}\n\ngoal (1 subgoal):\n 1. hd (\\<HH> @ [carrier G]) = {\\<one>}", "by (metis hd_append2)"], ["proof (state)\nthis:\n  hd (\\<HH> @ [carrier G]) = {\\<one>}\n\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "unfolding normal_series_def normal_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group G \\<and>\n    (\\<HH> @ [carrier G] \\<noteq> [] \\<and>\n     hd (\\<HH> @ [carrier G]) = {\\<one>}) \\<and>\n    last (\\<HH> @ [carrier G]) = carrier G \\<and>\n    (\\<forall>i.\n        i + 1 < length (\\<HH> @ [carrier G]) \\<longrightarrow>\n        (\\<HH> @ [carrier G]) ! i \\<lhd> G\n        \\<lparr>carrier := (\\<HH> @ [carrier G]) ! (i + 1)\\<rparr>)", "using is_group"], ["proof (prove)\nusing this:\n  Group.group G\n\ngoal (1 subgoal):\n 1. Group.group G \\<and>\n    (\\<HH> @ [carrier G] \\<noteq> [] \\<and>\n     hd (\\<HH> @ [carrier G]) = {\\<one>}) \\<and>\n    last (\\<HH> @ [carrier G]) = carrier G \\<and>\n    (\\<forall>i.\n        i + 1 < length (\\<HH> @ [carrier G]) \\<longrightarrow>\n        (\\<HH> @ [carrier G]) ! i \\<lhd> G\n        \\<lparr>carrier := (\\<HH> @ [carrier G]) ! (i + 1)\\<rparr>)", "proof auto"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> hd (\\<HH> @ [carrier G]) \\<Longrightarrow> x = \\<one>\n 2. \\<one> \\<in> hd (\\<HH> @ [carrier G])\n 3. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> hd (\\<HH> @ [carrier G]) \\<Longrightarrow> x = \\<one>\n 2. \\<one> \\<in> hd (\\<HH> @ [carrier G])\n 3. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "assume \"x \\<in> hd (\\<HH> @ [carrier G])\""], ["proof (state)\nthis:\n  x \\<in> hd (\\<HH> @ [carrier G])\n\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> hd (\\<HH> @ [carrier G]) \\<Longrightarrow> x = \\<one>\n 2. \\<one> \\<in> hd (\\<HH> @ [carrier G])\n 3. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "with hdTriv"], ["proof (chain)\npicking this:\n  hd (\\<HH> @ [carrier G]) = {\\<one>}\n  x \\<in> hd (\\<HH> @ [carrier G])", "show \"x = \\<one>\""], ["proof (prove)\nusing this:\n  hd (\\<HH> @ [carrier G]) = {\\<one>}\n  x \\<in> hd (\\<HH> @ [carrier G])\n\ngoal (1 subgoal):\n 1. x = \\<one>", "by simp"], ["proof (state)\nthis:\n  x = \\<one>\n\ngoal (2 subgoals):\n 1. \\<one> \\<in> hd (\\<HH> @ [carrier G])\n 2. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<one> \\<in> hd (\\<HH> @ [carrier G])\n 2. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "from hdTriv"], ["proof (chain)\npicking this:\n  hd (\\<HH> @ [carrier G]) = {\\<one>}", "show  \"\\<one> \\<in> hd (\\<HH> @ [carrier G])\""], ["proof (prove)\nusing this:\n  hd (\\<HH> @ [carrier G]) = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<one> \\<in> hd (\\<HH> @ [carrier G])", "by simp"], ["proof (state)\nthis:\n  \\<one> \\<in> hd (\\<HH> @ [carrier G])\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "assume i:\"i < length \\<HH>\""], ["proof (state)\nthis:\n  i < length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       (\\<HH> @ [carrier G]) ! i \\<lhd> G\n       \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "show \"(\\<HH> @ [carrier G]) ! i \\<lhd> G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "proof (cases \"i + 1 < length \\<HH>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n 2. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "case True"], ["proof (state)\nthis:\n  i + 1 < length \\<HH>\n\ngoal (2 subgoals):\n 1. i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n 2. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "with normalH.normal"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<HH> \\<Longrightarrow>\n  \\<HH> ! ?i \\<lhd> G\n  \\<lparr>carrier := H, carrier := \\<HH> ! (?i + 1)\\<rparr>\n  i + 1 < length \\<HH>", "have \"\\<HH> ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<HH> \\<Longrightarrow>\n  \\<HH> ! ?i \\<lhd> G\n  \\<lparr>carrier := H, carrier := \\<HH> ! (?i + 1)\\<rparr>\n  i + 1 < length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<HH> ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<HH> ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n 2. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "with i"], ["proof (chain)\npicking this:\n  i < length \\<HH>\n  \\<HH> ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>", "have \"(\\<HH> @ [carrier G]) ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  i < length \\<HH>\n  \\<HH> ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>", "using nth_append"], ["proof (prove)\nusing this:\n  i < length \\<HH>\n  \\<HH> ! i \\<lhd> G\\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>", "by metis"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n 2. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "with True"], ["proof (chain)\npicking this:\n  i + 1 < length \\<HH>\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>", "show \"(\\<HH> @ [carrier G]) ! i \\<lhd> G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! (Suc i)\\<rparr>\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<HH>\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "using nth_append Suc_eq_plus1"], ["proof (prove)\nusing this:\n  i + 1 < length \\<HH>\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := \\<HH> ! (i + 1)\\<rparr>\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n  Suc ?n = ?n + 1\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "by metis"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "case False"], ["proof (state)\nthis:\n  \\<not> i + 1 < length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "with i"], ["proof (chain)\npicking this:\n  i < length \\<HH>\n  \\<not> i + 1 < length \\<HH>", "have i2:\"i + 1 = length \\<HH>\""], ["proof (prove)\nusing this:\n  i < length \\<HH>\n  \\<not> i + 1 < length \\<HH>\n\ngoal (1 subgoal):\n 1. i + 1 = length \\<HH>", "by simp"], ["proof (state)\nthis:\n  i + 1 = length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "from i"], ["proof (chain)\npicking this:\n  i < length \\<HH>", "have \"(\\<HH> @ [carrier G]) ! i = \\<HH> ! i\""], ["proof (prove)\nusing this:\n  i < length \\<HH>\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = \\<HH> ! i", "by (metis nth_append)"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "also"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "from i2 normalH.notempty"], ["proof (chain)\npicking this:\n  i + 1 = length \\<HH>\n  \\<HH> \\<noteq> []", "have \"... = last \\<HH>\""], ["proof (prove)\nusing this:\n  i + 1 = length \\<HH>\n  \\<HH> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<HH> ! i = last \\<HH>", "by (metis add_diff_cancel_right' last_conv_nth)"], ["proof (state)\nthis:\n  \\<HH> ! i = last \\<HH>\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "also"], ["proof (state)\nthis:\n  \\<HH> ! i = last \\<HH>\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "from normalH.last"], ["proof (chain)\npicking this:\n  last \\<HH> = carrier (G\\<lparr>carrier := H\\<rparr>)", "have \"... = H\""], ["proof (prove)\nusing this:\n  last \\<HH> = carrier (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (1 subgoal):\n 1. last \\<HH> = H", "by simp"], ["proof (state)\nthis:\n  last \\<HH> = H\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "finally"], ["proof (chain)\npicking this:\n  (\\<HH> @ [carrier G]) ! i = H", "have \"(\\<HH> @ [carrier G]) ! i = H\""], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! i = H\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = H", "."], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = H\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "moreover"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = H\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "from i2"], ["proof (chain)\npicking this:\n  i + 1 = length \\<HH>", "have \"(\\<HH> @ [carrier G]) ! (i + 1) = carrier G\""], ["proof (prove)\nusing this:\n  i + 1 = length \\<HH>\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! (i + 1) = carrier G", "by (metis nth_append_length)"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! (i + 1) = carrier G\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 < length \\<HH> \\<Longrightarrow>\n    (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  (\\<HH> @ [carrier G]) ! i = H\n  (\\<HH> @ [carrier G]) ! (i + 1) = carrier G", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! i = H\n  (\\<HH> @ [carrier G]) ! (i + 1) = carrier G\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "using HG"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! i = H\n  (\\<HH> @ [carrier G]) ! (i + 1) = carrier G\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i \\<lhd> G\n    \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>", "by auto"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i \\<lhd> G\n  \\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  normal_series G (\\<HH> @ [carrier G])\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>All entries of a normal series for $G$ are subgroups of $G$.\\<close>"], ["", "lemma (in normal_series) normal_series_subgroups:\n  shows \"i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "have \"i + 1 < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + 1 < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "proof (induction \"length \\<GG> - (i + 2)\" arbitrary: i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G\n 2. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "case 0"], ["proof (state)\nthis:\n  0 = length \\<GG> - (i + 2)\n  i + 1 < length \\<GG>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G\n 2. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "hence i:\"i + 2 = length \\<GG>\""], ["proof (prove)\nusing this:\n  0 = length \\<GG> - (i + 2)\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. i + 2 = length \\<GG>", "by simp"], ["proof (state)\nthis:\n  i + 2 = length \\<GG>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G\n 2. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "hence ii:\"i + 1 = length \\<GG> - 1\""], ["proof (prove)\nusing this:\n  i + 2 = length \\<GG>\n\ngoal (1 subgoal):\n 1. i + 1 = length \\<GG> - 1", "by force"], ["proof (state)\nthis:\n  i + 1 = length \\<GG> - 1\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G\n 2. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "from i normal"], ["proof (chain)\npicking this:\n  i + 2 = length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>", "have \"\\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  i + 2 = length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G\n 2. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "with ii last notempty"], ["proof (chain)\npicking this:\n  i + 1 = length \\<GG> - 1\n  last \\<GG> = carrier G\n  \\<GG> \\<noteq> []\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "show \"subgroup (\\<GG> ! i) G\""], ["proof (prove)\nusing this:\n  i + 1 = length \\<GG> - 1\n  last \\<GG> = carrier G\n  \\<GG> \\<noteq> []\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! i) G", "using last_conv_nth normal_imp_subgroup"], ["proof (prove)\nusing this:\n  i + 1 = length \\<GG> - 1\n  last \\<GG> = carrier G\n  \\<GG> \\<noteq> []\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! i) G", "by fastforce"], ["proof (state)\nthis:\n  subgroup (\\<GG> ! i) G\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>k = length \\<GG> - (?i + 2); ?i + 1 < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  Suc k = length \\<GG> - (i + 2)\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "from Suc(3)  normal"], ["proof (chain)\npicking this:\n  i + 1 < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>", "have i:\"subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "using normal_imp_subgroup"], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "from Suc(2)"], ["proof (chain)\npicking this:\n  Suc k = length \\<GG> - (i + 2)", "have k:\"k = length \\<GG> - ((i + 1) + 2)\""], ["proof (prove)\nusing this:\n  Suc k = length \\<GG> - (i + 2)\n\ngoal (1 subgoal):\n 1. k = length \\<GG> - (i + 1 + 2)", "by arith"], ["proof (state)\nthis:\n  k = length \\<GG> - (i + 1 + 2)\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>k = length \\<GG> - (?i + 2); ?i + 1 < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  Suc k = length \\<GG> - (i + 2)\n  i + 1 < length \\<GG>\n  k = length \\<GG> - (i + 1 + 2)", "have \"subgroup (\\<GG> ! (i + 1)) G\""], ["proof (prove)\nusing this:\n  \\<lbrakk>k = length \\<GG> - (?i + 2); ?i + 1 < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  Suc k = length \\<GG> - (i + 2)\n  i + 1 < length \\<GG>\n  k = length \\<GG> - (i + 1 + 2)\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! (i + 1)) G", "by simp"], ["proof (state)\nthis:\n  subgroup (\\<GG> ! (i + 1)) G\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = length \\<GG> - (i + 2);\n                    i + 1 < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> subgroup (\\<GG> ! i) G;\n        Suc x = length \\<GG> - (i + 2); i + 1 < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> subgroup (\\<GG> ! i) G", "with i"], ["proof (chain)\npicking this:\n  subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  subgroup (\\<GG> ! (i + 1)) G", "show \"subgroup (\\<GG> ! i) G\""], ["proof (prove)\nusing this:\n  subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  subgroup (\\<GG> ! (i + 1)) G\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! i) G", "by (metis is_group subgroup.subgroup_of_subgroup)"], ["proof (state)\nthis:\n  subgroup (\\<GG> ! i) G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i + 1 < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n\ngoal (1 subgoal):\n 1. i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "moreover"], ["proof (state)\nthis:\n  i + 1 < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n\ngoal (1 subgoal):\n 1. i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "have \"i + 1 = length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + 1 = length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "using last notempty last_conv_nth"], ["proof (prove)\nusing this:\n  last \\<GG> = carrier G\n  \\<GG> \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. i + 1 = length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "by (metis add_diff_cancel_right' subgroup_self)"], ["proof (state)\nthis:\n  i + 1 = length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n\ngoal (1 subgoal):\n 1. i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "ultimately"], ["proof (chain)\npicking this:\n  i + 1 < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n  i + 1 = length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "show \"i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n  i + 1 = length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n\ngoal (1 subgoal):\n 1. i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G", "by force"], ["proof (state)\nthis:\n  i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! i) G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The second to last entry of a normal series is a normal subgroup of G.\\<close>"], ["", "lemma (in normal_series) normal_series_snd_to_last:\n  shows \"\\<GG> ! (length \\<GG> - 2) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "proof (cases \"2 \\<le> length \\<GG>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n 2. \\<not> 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "case False"], ["proof (state)\nthis:\n  \\<not> 2 \\<le> length \\<GG>\n\ngoal (2 subgoals):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n 2. \\<not> 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "with notempty"], ["proof (chain)\npicking this:\n  \\<GG> \\<noteq> []\n  \\<not> 2 \\<le> length \\<GG>", "have length:\"length \\<GG> = 1\""], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  \\<not> 2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> = 1", "by (metis Suc_eq_plus1 leI length_0_conv less_2_cases plus_nat.add_0)"], ["proof (state)\nthis:\n  length \\<GG> = 1\n\ngoal (2 subgoals):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n 2. \\<not> 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "with hd"], ["proof (chain)\npicking this:\n  hd \\<GG> = {\\<one>}\n  length \\<GG> = 1", "have \"\\<GG> ! (length \\<GG> - 2) = {\\<one>}\""], ["proof (prove)\nusing this:\n  hd \\<GG> = {\\<one>}\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) = {\\<one>}", "using hd_conv_nth notempty"], ["proof (prove)\nusing this:\n  hd \\<GG> = {\\<one>}\n  length \\<GG> = 1\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) = {\\<one>}", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (length \\<GG> - 2) = {\\<one>}\n\ngoal (2 subgoals):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n 2. \\<not> 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "with length"], ["proof (chain)\npicking this:\n  length \\<GG> = 1\n  \\<GG> ! (length \\<GG> - 2) = {\\<one>}", "show ?thesis"], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n  \\<GG> ! (length \\<GG> - 2) = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "by (metis trivial_subgroup_is_normal)"], ["proof (state)\nthis:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "case True"], ["proof (state)\nthis:\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "hence \"(length \\<GG> - 2) + 1 < length \\<GG>\""], ["proof (prove)\nusing this:\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> - 2 + 1 < length \\<GG>", "by arith"], ["proof (state)\nthis:\n  length \\<GG> - 2 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "with normal last"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  last \\<GG> = carrier G\n  length \\<GG> - 2 + 1 < length \\<GG>", "have \"\\<GG> ! (length \\<GG> - 2) \\<lhd> G\\<lparr>carrier := \\<GG> ! ((length \\<GG> - 2) + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  last \\<GG> = carrier G\n  length \\<GG> - 2 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "have \"1 + (1 + (length \\<GG> - (1 + 1))) = length \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + (1 + (length \\<GG> - (1 + 1))) = length \\<GG>", "using True le_add_diff_inverse"], ["proof (prove)\nusing this:\n  2 \\<le> length \\<GG>\n  ?b \\<le> ?a \\<Longrightarrow> ?b + (?a - ?b) = ?a\n\ngoal (1 subgoal):\n 1. 1 + (1 + (length \\<GG> - (1 + 1))) = length \\<GG>", "by presburger"], ["proof (state)\nthis:\n  1 + (1 + (length \\<GG> - (1 + 1))) = length \\<GG>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "then"], ["proof (chain)\npicking this:\n  1 + (1 + (length \\<GG> - (1 + 1))) = length \\<GG>", "have \"\\<GG> ! (length \\<GG> - 2) \\<lhd> G\\<lparr>carrier :=  \\<GG> ! (length \\<GG> - 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  1 + (1 + (length \\<GG> - (1 + 1))) = length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr>", "by (metis \\<open>\\<GG> ! (length \\<GG> - 2) \\<lhd> G \\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr>\\<close> add.commute add_diff_cancel_left' one_add_one)"], ["proof (state)\nthis:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG> \\<Longrightarrow>\n    \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "with notempty last"], ["proof (chain)\npicking this:\n  \\<GG> \\<noteq> []\n  last \\<GG> = carrier G\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  last \\<GG> = carrier G\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "using last_conv_nth"], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  last \\<GG> = carrier G\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr>\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "by force"], ["proof (state)\nthis:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Just like the expansion of normal series, every prefix of a normal series is again a normal series.\\<close>"], ["", "lemma (in normal_series) normal_series_prefix_closed:\n  assumes \"i \\<le> length \\<GG>\" and \"0 < i\"\n  shows \"normal_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) (take i \\<GG>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>)\n     (take i \\<GG>)", "unfolding normal_series_def normal_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) \\<and>\n    (take i \\<GG> \\<noteq> [] \\<and>\n     hd (take i \\<GG>) =\n     {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>\\<^esub>}) \\<and>\n    last (take i \\<GG>) =\n    carrier (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) \\<and>\n    (\\<forall>ia.\n        ia + 1 < length (take i \\<GG>) \\<longrightarrow>\n        take i \\<GG> ! ia \\<lhd> G\n        \\<lparr>carrier := \\<GG> ! (i - 1),\n           carrier := take i \\<GG> ! (ia + 1)\\<rparr>)", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> length \\<GG>\n  0 < i\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) \\<and>\n    (take i \\<GG> \\<noteq> [] \\<and>\n     hd (take i \\<GG>) =\n     {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>\\<^esub>}) \\<and>\n    last (take i \\<GG>) =\n    carrier (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) \\<and>\n    (\\<forall>ia.\n        ia + 1 < length (take i \\<GG>) \\<longrightarrow>\n        take i \\<GG> ! ia \\<lhd> G\n        \\<lparr>carrier := \\<GG> ! (i - 1),\n           carrier := take i \\<GG> ! (ia + 1)\\<rparr>)", "apply (auto simp: hd del:equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i \\<le> length \\<GG>; 0 < i\\<rbrakk>\n    \\<Longrightarrow> Group.group\n                       (G\\<lparr>carrier := \\<GG> ! (i - Suc 0)\\<rparr>)\n 2. \\<lbrakk>i \\<le> length \\<GG>; 0 < i\\<rbrakk>\n    \\<Longrightarrow> last (take i \\<GG>) = \\<GG> ! (i - Suc 0)\n 3. \\<And>ia.\n       \\<lbrakk>i \\<le> length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! ia \\<lhd> G\n                         \\<lparr>carrier := \\<GG> ! Suc ia\\<rparr>", "apply (simp add: is_group normal_series_subgroups subgroup.subgroup_is_group)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> length \\<GG>; 0 < i\\<rbrakk>\n    \\<Longrightarrow> last (take i \\<GG>) = \\<GG> ! (i - Suc 0)\n 2. \\<And>ia.\n       \\<lbrakk>i \\<le> length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! ia \\<lhd> G\n                         \\<lparr>carrier := \\<GG> ! Suc ia\\<rparr>", "apply (simp add: last_conv_nth min.absorb2 notempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>i \\<le> length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! ia \\<lhd> G\n                         \\<lparr>carrier := \\<GG> ! Suc ia\\<rparr>", "using assms(1) normal"], ["proof (prove)\nusing this:\n  i \\<le> length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>i \\<le> length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! ia \\<lhd> G\n                         \\<lparr>carrier := \\<GG> ! Suc ia\\<rparr>", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>If a group's order is the product of two distinct primes @{term p} and @{term q}, where\n@{term \"p < q\"}, we can construct a normal series using the only subgroup of size  @{term q}.\\<close>"], ["", "lemma (in group) pq_order_normal_series:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"normal_series G [{\\<one>}, (THE H. H \\<in> subgroups_of_size q), carrier G]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "define H where \"H = (THE H. H \\<in> subgroups_of_size q)\""], ["proof (state)\nthis:\n  H = (THE H. H \\<in> subgroups_of_size q)\n\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "with assms"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n  H = (THE H. H \\<in> subgroups_of_size q)", "have HG:\"H \\<lhd> G\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n  H = (THE H. H \\<in> subgroups_of_size q)\n\ngoal (1 subgoal):\n 1. H \\<lhd> G", "by (metis pq_order_subgrp_normal)"], ["proof (state)\nthis:\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "then"], ["proof (chain)\npicking this:\n  H \\<lhd> G", "interpret groupH: group \"G\\<lparr>carrier := H\\<rparr>\""], ["proof (prove)\nusing this:\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := H\\<rparr>)", "unfolding normal_def"], ["proof (prove)\nusing this:\n  subgroup H G \\<and> Group.group G \\<and> normal_axioms H G\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := H\\<rparr>)", "by (metis subgroup_imp_group)"], ["proof (state)\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "have \"normal_series (G\\<lparr>carrier := H\\<rparr>) [{\\<one>}, H]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := H\\<rparr>) [{\\<one>}, H]", "using groupH.trivial_normal_series"], ["proof (prove)\nusing this:\n  normal_series (G\\<lparr>carrier := H\\<rparr>)\n   [{\\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>},\n    carrier (G\\<lparr>carrier := H\\<rparr>)]\n\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := H\\<rparr>) [{\\<one>}, H]", "by auto"], ["proof (state)\nthis:\n  normal_series (G\\<lparr>carrier := H\\<rparr>) [{\\<one>}, H]\n\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "with HG"], ["proof (chain)\npicking this:\n  H \\<lhd> G\n  normal_series (G\\<lparr>carrier := H\\<rparr>) [{\\<one>}, H]", "show ?thesis"], ["proof (prove)\nusing this:\n  H \\<lhd> G\n  normal_series (G\\<lparr>carrier := H\\<rparr>) [{\\<one>}, H]\n\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "unfolding H_def"], ["proof (prove)\nusing this:\n  (THE H. H \\<in> subgroups_of_size q) \\<lhd> G\n  normal_series\n   (G\\<lparr>carrier := THE H. H \\<in> subgroups_of_size q\\<rparr>)\n   [{\\<one>}, THE H. H \\<in> subgroups_of_size q]\n\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "by (metis append_Cons append_Nil normal_series_extend)"], ["proof (state)\nthis:\n  normal_series G [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following defines the list of all quotient groups of the normal series:\\<close>"], ["", "definition (in normal_series) quotients\n  where \"quotients = map (\\<lambda>i. G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i) [0..<((length \\<GG>) - 1)]\""], ["", "text \\<open>The list of quotient groups has one less entry than the series itself:\\<close>"], ["", "lemma (in normal_series) quotients_length:\n  shows \"length quotients + 1 = length \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "have \"length quotients + 1 = length [0..<((length \\<GG>) - 1)] + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length quotients + 1 = length [0..<length \\<GG> - 1] + 1", "unfolding quotients_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (map (\\<lambda>i.\n              G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n       [0..<length \\<GG> - 1]) +\n    1 =\n    length [0..<length \\<GG> - 1] + 1", "by simp"], ["proof (state)\nthis:\n  length quotients + 1 = length [0..<length \\<GG> - 1] + 1\n\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "also"], ["proof (state)\nthis:\n  length quotients + 1 = length [0..<length \\<GG> - 1] + 1\n\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "have \"... = (length \\<GG> - 1) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<length \\<GG> - 1] + 1 = length \\<GG> - 1 + 1", "by (metis diff_zero length_upt)"], ["proof (state)\nthis:\n  length [0..<length \\<GG> - 1] + 1 = length \\<GG> - 1 + 1\n\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "also"], ["proof (state)\nthis:\n  length [0..<length \\<GG> - 1] + 1 = length \\<GG> - 1 + 1\n\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "with notempty"], ["proof (chain)\npicking this:\n  \\<GG> \\<noteq> []\n  length [0..<length \\<GG> - 1] + 1 = length \\<GG> - 1 + 1", "have \"... = length \\<GG>\""], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  length [0..<length \\<GG> - 1] + 1 = length \\<GG> - 1 + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> - 1 + 1 = length \\<GG>", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  length \\<GG> - 1 + 1 = length \\<GG>\n\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "finally"], ["proof (chain)\npicking this:\n  length quotients + 1 = length \\<GG>", "show ?thesis"], ["proof (prove)\nusing this:\n  length quotients + 1 = length \\<GG>\n\ngoal (1 subgoal):\n 1. length quotients + 1 = length \\<GG>", "."], ["proof (state)\nthis:\n  length quotients + 1 = length \\<GG>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in normal_series) last_quotient:\n  assumes \"length \\<GG> > 1\"\n  shows \"last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "from assms"], ["proof (chain)\npicking this:\n  1 < length \\<GG>", "have lsimp:\"length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1\""], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1", "by auto"], ["proof (state)\nthis:\n  length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "from assms"], ["proof (chain)\npicking this:\n  1 < length \\<GG>", "have \"quotients \\<noteq> []\""], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. quotients \\<noteq> []", "unfolding quotients_def"], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n     [0..<length \\<GG> - 1] \\<noteq>\n    []", "by auto"], ["proof (state)\nthis:\n  quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "hence \"last quotients = quotients ! (length quotients - 1)\""], ["proof (prove)\nusing this:\n  quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. last quotients = quotients ! (length quotients - 1)", "by (metis last_conv_nth)"], ["proof (state)\nthis:\n  last quotients = quotients ! (length quotients - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "also"], ["proof (state)\nthis:\n  last quotients = quotients ! (length quotients - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "have \"\\<dots> = quotients ! (length \\<GG> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quotients ! (length quotients - 1) = quotients ! (length \\<GG> - 1 - 1)", "by (metis add_diff_cancel_left' quotients_length add.commute)"], ["proof (state)\nthis:\n  quotients ! (length quotients - 1) = quotients ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "also"], ["proof (state)\nthis:\n  quotients ! (length quotients - 1) = quotients ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "have \"\\<dots> = G\\<lparr>carrier := \\<GG> ! ((length \\<GG> - 1 - 1) + 1)\\<rparr> Mod \\<GG> ! (length \\<GG> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quotients ! (length \\<GG> - 1 - 1) =\n    G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1)", "unfolding quotients_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n     [0..<length \\<GG> - 1] !\n    (length \\<GG> - 1 - 1) =\n    G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1)", "using assms"], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n     [0..<length \\<GG> - 1] !\n    (length \\<GG> - 1 - 1) =\n    G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1)", "by auto"], ["proof (state)\nthis:\n  quotients ! (length \\<GG> - 1 - 1) =\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "also"], ["proof (state)\nthis:\n  quotients ! (length \\<GG> - 1 - 1) =\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "have \"\\<dots> = G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod \\<GG> ! (length \\<GG> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1) =\n    G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1)", "using lsimp"], ["proof (prove)\nusing this:\n  length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1) =\n    G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1)", "by simp"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1) =\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "also"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1 + 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1) =\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "have \"\\<dots> = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1) =\n    G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "using last last_conv_nth notempty"], ["proof (prove)\nusing this:\n  last \\<GG> = carrier G\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n    \\<GG> ! (length \\<GG> - 1 - 1) =\n    G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "by force"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1)\\<rparr> Mod\n  \\<GG> ! (length \\<GG> - 1 - 1) =\n  G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "finally"], ["proof (chain)\npicking this:\n  last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "."], ["proof (state)\nthis:\n  last quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The next lemma transports the constituting properties of a normal series\nalong an isomorphism of groups.\\<close>"], ["", "lemma (in normal_series) normal_series_iso:\n  assumes H:\"group H\"\n  assumes iso:\"\\<Psi> \\<in> iso G H\"\n  shows \"normal_series H (map (image \\<Psi>) \\<GG>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series H (map ((`) \\<Psi>) \\<GG>)", "apply (simp add: normal_series_def normal_series_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group H \\<and>\n    \\<GG> \\<noteq> [] \\<and>\n    hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>} \\<and>\n    last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n    (\\<forall>i.\n        Suc i < length \\<GG> \\<longrightarrow>\n        \\<Psi> ` \\<GG> ! i \\<lhd> H\n        \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "using H notempty"], ["proof (prove)\nusing this:\n  Group.group H\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. Group.group H \\<and>\n    \\<GG> \\<noteq> [] \\<and>\n    hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>} \\<and>\n    last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n    (\\<forall>i.\n        Suc i < length \\<GG> \\<longrightarrow>\n        \\<Psi> ` \\<GG> ! i \\<lhd> H\n        \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>} \\<and>\n                      last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "proof (rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "from H is_group iso"], ["proof (chain)\npicking this:\n  Group.group H\n  Group.group G\n  \\<Psi> \\<in> Group.iso G H", "have group_hom:\"group_hom G H \\<Psi>\""], ["proof (prove)\nusing this:\n  Group.group H\n  Group.group G\n  \\<Psi> \\<in> Group.iso G H\n\ngoal (1 subgoal):\n 1. group_hom G H \\<Psi>", "unfolding group_hom_def group_hom_axioms_def iso_def"], ["proof (prove)\nusing this:\n  Group.group H\n  Group.group G\n  \\<Psi> \\<in> {h \\<in> hom G H. bij_betw h (carrier G) (carrier H)}\n\ngoal (1 subgoal):\n 1. Group.group G \\<and> Group.group H \\<and> \\<Psi> \\<in> hom G H", "by auto"], ["proof (state)\nthis:\n  group_hom G H \\<Psi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "have \"hd (map (image \\<Psi>) \\<GG>) = \\<Psi> ` {\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` {\\<one>}", "by (metis hd_map hd notempty)"], ["proof (state)\nthis:\n  hd (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` {\\<one>}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "also"], ["proof (state)\nthis:\n  hd (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` {\\<one>}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "have \"\\<dots> = {\\<Psi> \\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> ` {\\<one>} = {\\<Psi> \\<one>}", "by (metis image_empty image_insert)"], ["proof (state)\nthis:\n  \\<Psi> ` {\\<one>} = {\\<Psi> \\<one>}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "also"], ["proof (state)\nthis:\n  \\<Psi> ` {\\<one>} = {\\<Psi> \\<one>}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "have \"\\<dots> = {\\<one>\\<^bsub>H\\<^esub>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<Psi> \\<one>} = {\\<one>\\<^bsub>H\\<^esub>}", "using group_hom group_hom.hom_one"], ["proof (prove)\nusing this:\n  group_hom G H \\<Psi>\n  group_hom ?G ?H ?h \\<Longrightarrow>\n  ?h \\<one>\\<^bsub>?G\\<^esub> = \\<one>\\<^bsub>?H\\<^esub>\n\ngoal (1 subgoal):\n 1. {\\<Psi> \\<one>} = {\\<one>\\<^bsub>H\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  {\\<Psi> \\<one>} = {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (map ((`) \\<Psi>) \\<GG>) =\n                      {\\<one>\\<^bsub>H\\<^esub>}\n 2. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "finally"], ["proof (chain)\npicking this:\n  hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>}", "show \"hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>}\""], ["proof (prove)\nusing this:\n  hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>}", "."], ["proof (state)\nthis:\n  hd (map ((`) \\<Psi>) \\<GG>) = {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Group.group H; \\<GG> \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n                      (\\<forall>i.\n                          Suc i < length \\<GG> \\<longrightarrow>\n                          \\<Psi> ` \\<GG> ! i \\<lhd> H\n                          \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "show \"last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and> (\\<forall>i. Suc i < length \\<GG> \\<longrightarrow> \\<Psi> ` \\<GG> ! i \\<lhd> H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n    (\\<forall>i.\n        Suc i < length \\<GG> \\<longrightarrow>\n        \\<Psi> ` \\<GG> ! i \\<lhd> H\n        \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "proof (auto del: equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. last (map ((`) \\<Psi>) \\<GG>) = carrier H\n 2. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "have \"last (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` carrier G", "using last last_map notempty"], ["proof (prove)\nusing this:\n  last \\<GG> = carrier G\n  ?xs \\<noteq> [] \\<Longrightarrow> last (map ?f ?xs) = ?f (last ?xs)\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. last (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` carrier G", "by metis"], ["proof (state)\nthis:\n  last (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` carrier G\n\ngoal (2 subgoals):\n 1. last (map ((`) \\<Psi>) \\<GG>) = carrier H\n 2. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "also"], ["proof (state)\nthis:\n  last (map ((`) \\<Psi>) \\<GG>) = \\<Psi> ` carrier G\n\ngoal (2 subgoals):\n 1. last (map ((`) \\<Psi>) \\<GG>) = carrier H\n 2. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "have \"\\<dots> = carrier H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> ` carrier G = carrier H", "using iso"], ["proof (prove)\nusing this:\n  \\<Psi> \\<in> Group.iso G H\n\ngoal (1 subgoal):\n 1. \\<Psi> ` carrier G = carrier H", "unfolding iso_def bij_betw_def"], ["proof (prove)\nusing this:\n  \\<Psi>\n  \\<in> {h \\<in> hom G H.\n         inj_on h (carrier G) \\<and> h ` carrier G = carrier H}\n\ngoal (1 subgoal):\n 1. \\<Psi> ` carrier G = carrier H", "by simp"], ["proof (state)\nthis:\n  \\<Psi> ` carrier G = carrier H\n\ngoal (2 subgoals):\n 1. last (map ((`) \\<Psi>) \\<GG>) = carrier H\n 2. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "finally"], ["proof (chain)\npicking this:\n  last (map ((`) \\<Psi>) \\<GG>) = carrier H", "show \"last (map ((`) \\<Psi>) \\<GG>) = carrier H\""], ["proof (prove)\nusing this:\n  last (map ((`) \\<Psi>) \\<GG>) = carrier H\n\ngoal (1 subgoal):\n 1. last (map ((`) \\<Psi>) \\<GG>) = carrier H", "."], ["proof (state)\nthis:\n  last (map ((`) \\<Psi>) \\<GG>) = carrier H\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "assume i:\"Suc i < length \\<GG>\""], ["proof (state)\nthis:\n  Suc i < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "hence norm:\"\\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\""], ["proof (prove)\nusing this:\n  Suc i < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>", "using normal"], ["proof (prove)\nusing this:\n  Suc i < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>", "by simp"], ["proof (state)\nthis:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "moreover"], ["proof (state)\nthis:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "have \"restrict \\<Psi> (\\<GG> ! Suc i) \\<in> iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>) (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict \\<Psi> (\\<GG> ! Suc i)\n    \\<in> Group.iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n           (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "by (metis H i is_group iso iso_restrict normal_series_subgroups)"], ["proof (state)\nthis:\n  restrict \\<Psi> (\\<GG> ! Suc i)\n  \\<in> Group.iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n         (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "moreover"], ["proof (state)\nthis:\n  restrict \\<Psi> (\\<GG> ! Suc i)\n  \\<in> Group.iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n         (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "have \"group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)", "by (metis i normal_series_subgroups subgroup_imp_group)"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "moreover"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "hence \"subgroup (\\<GG> ! Suc i) G\""], ["proof (prove)\nusing this:\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! Suc i) G", "by (metis i normal_series_subgroups)"], ["proof (state)\nthis:\n  subgroup (\\<GG> ! Suc i) G\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "hence \"subgroup (\\<Psi> ` \\<GG> ! Suc i) H\""], ["proof (prove)\nusing this:\n  subgroup (\\<GG> ! Suc i) G\n\ngoal (1 subgoal):\n 1. subgroup (\\<Psi> ` \\<GG> ! Suc i) H", "by (metis H is_group iso iso_subgroup)"], ["proof (state)\nthis:\n  subgroup (\\<Psi> ` \\<GG> ! Suc i) H\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "hence \"group (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\""], ["proof (prove)\nusing this:\n  subgroup (\\<Psi> ` \\<GG> ! Suc i) H\n\ngoal (1 subgoal):\n 1. Group.group (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "by (metis H subgroup.subgroup_is_group)"], ["proof (state)\nthis:\n  Group.group (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\n  restrict \\<Psi> (\\<GG> ! Suc i)\n  \\<in> Group.iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n         (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n  Group.group (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)", "have \"restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\n  restrict \\<Psi> (\\<GG> ! Suc i)\n  \\<in> Group.iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n         (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n  Group.group (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\n    \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "using is_group H iso_normal_subgroup"], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\n  restrict \\<Psi> (\\<GG> ! Suc i)\n  \\<in> Group.iso (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n         (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n  Group.group (H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n  Group.group G\n  Group.group H\n  \\<lbrakk>Group.group ?G; Group.group ?F; ?H \\<lhd> ?G;\n   ?\\<phi> \\<in> Group.iso ?G ?F\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi> ` ?H \\<lhd> ?F\n\ngoal (1 subgoal):\n 1. restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\n    \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "by (auto cong del: image_cong_simp)"], ["proof (state)\nthis:\n  restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\n  \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "moreover"], ["proof (state)\nthis:\n  restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\n  \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "from norm"], ["proof (chain)\npicking this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>", "have \"\\<GG> ! i \\<subseteq> \\<GG> ! Suc i\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! Suc i", "unfolding normal_def subgroup_def"], ["proof (prove)\nusing this:\n  ((\\<GG> ! i\n    \\<subseteq> carrier (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>) \\<and>\n    (\\<forall>x y.\n        x \\<in> \\<GG> ! i \\<longrightarrow>\n        y \\<in> \\<GG> ! i \\<longrightarrow>\n        x \\<otimes>\\<^bsub>G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\\<^esub>\n        y\n        \\<in> \\<GG> ! i)) \\<and>\n   \\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\\<^esub>\n   \\<in> \\<GG> ! i \\<and>\n   (\\<forall>x.\n       x \\<in> \\<GG> ! i \\<longrightarrow>\n       inv\\<^bsub>G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>\\<^esub> x\n       \\<in> \\<GG> ! i)) \\<and>\n  Group.group (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>) \\<and>\n  normal_axioms (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! Suc i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! Suc i", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! Suc i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "hence \"{y. \\<exists>x\\<in>\\<GG> ! i. y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} = {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x}\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<subseteq> \\<GG> ! Suc i\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>\\<GG> ! i.\n           y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} =\n    {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x}", "by auto"], ["proof (state)\nthis:\n  {y. \\<exists>x\\<in>\\<GG> ! i.\n         y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} =\n  {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length \\<GG> \\<Longrightarrow>\n       \\<Psi> ` \\<GG> ! i \\<lhd> H\n       \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\n  \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\n  {y. \\<exists>x\\<in>\\<GG> ! i.\n         y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} =\n  {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x}", "show \"\\<Psi> ` \\<GG> ! i \\<lhd> H\\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\""], ["proof (prove)\nusing this:\n  restrict \\<Psi> (\\<GG> ! Suc i) ` \\<GG> ! i \\<lhd> H\n  \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\n  {y. \\<exists>x\\<in>\\<GG> ! i.\n         y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} =\n  {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x}\n\ngoal (1 subgoal):\n 1. \\<Psi> ` \\<GG> ! i \\<lhd> H\n    \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>", "unfolding restrict_def image_def"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>\\<GG> ! i.\n         y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} \\<lhd>\n  H\\<lparr>carrier :=\n             {y. \\<exists>x\\<in>\\<GG> ! Suc i. y = \\<Psi> x}\\<rparr>\n  {y. \\<exists>x\\<in>\\<GG> ! i.\n         y = (if x \\<in> \\<GG> ! Suc i then \\<Psi> x else undefined)} =\n  {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x}\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>\\<GG> ! i. y = \\<Psi> x} \\<lhd> H\n    \\<lparr>carrier :=\n              {y. \\<exists>x\\<in>\\<GG> ! Suc i. y = \\<Psi> x}\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<Psi> ` \\<GG> ! i \\<lhd> H\n  \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  last (map ((`) \\<Psi>) \\<GG>) = carrier H \\<and>\n  (\\<forall>i.\n      Suc i < length \\<GG> \\<longrightarrow>\n      \\<Psi> ` \\<GG> ! i \\<lhd> H\n      \\<lparr>carrier := \\<Psi> ` \\<GG> ! Suc i\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Composition Series\\<close>"], ["", "text \\<open>A composition series is a normal series where all consecutive factor groups are simple:\\<close>"], ["", "locale composition_series = normal_series +\n  assumes simplefact:\"\\<And>i. i + 1 <  length \\<GG> \\<Longrightarrow> simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["", "lemma (in composition_series) is_composition_series:\n  shows \"composition_series G \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series G \\<GG>", "by (rule composition_series_axioms)"], ["", "text \\<open>A composition series for a group $G$ has length one if and only if $G$ is the trivial group.\\<close>"], ["", "lemma (in composition_series) composition_series_length_one:\n  shows \"(length \\<GG> = 1) = (\\<GG> = [{\\<one>}])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length \\<GG> = 1) = (\\<GG> = [{\\<one>}])", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<GG> = 1 \\<Longrightarrow> \\<GG> = [{\\<one>}]\n 2. \\<GG> = [{\\<one>}] \\<Longrightarrow> length \\<GG> = 1", "assume \"length \\<GG> = 1\""], ["proof (state)\nthis:\n  length \\<GG> = 1\n\ngoal (2 subgoals):\n 1. length \\<GG> = 1 \\<Longrightarrow> \\<GG> = [{\\<one>}]\n 2. \\<GG> = [{\\<one>}] \\<Longrightarrow> length \\<GG> = 1", "with hd"], ["proof (chain)\npicking this:\n  hd \\<GG> = {\\<one>}\n  length \\<GG> = 1", "have \"length \\<GG> = length [{\\<one>}] \\<and> (\\<forall>i < length \\<GG>. \\<GG> ! i = [{\\<one>}] ! i)\""], ["proof (prove)\nusing this:\n  hd \\<GG> = {\\<one>}\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length [{\\<one>}] \\<and>\n    (\\<forall>i<length \\<GG>. \\<GG> ! i = [{\\<one>}] ! i)", "using hd_conv_nth notempty"], ["proof (prove)\nusing this:\n  hd \\<GG> = {\\<one>}\n  length \\<GG> = 1\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. length \\<GG> = length [{\\<one>}] \\<and>\n    (\\<forall>i<length \\<GG>. \\<GG> ! i = [{\\<one>}] ! i)", "by force"], ["proof (state)\nthis:\n  length \\<GG> = length [{\\<one>}] \\<and>\n  (\\<forall>i<length \\<GG>. \\<GG> ! i = [{\\<one>}] ! i)\n\ngoal (2 subgoals):\n 1. length \\<GG> = 1 \\<Longrightarrow> \\<GG> = [{\\<one>}]\n 2. \\<GG> = [{\\<one>}] \\<Longrightarrow> length \\<GG> = 1", "thus \"\\<GG> = [{\\<one>}]\""], ["proof (prove)\nusing this:\n  length \\<GG> = length [{\\<one>}] \\<and>\n  (\\<forall>i<length \\<GG>. \\<GG> ! i = [{\\<one>}] ! i)\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}]", "using list_eq_iff_nth_eq"], ["proof (prove)\nusing this:\n  length \\<GG> = length [{\\<one>}] \\<and>\n  (\\<forall>i<length \\<GG>. \\<GG> ! i = [{\\<one>}] ! i)\n  (?xs = ?ys) =\n  (length ?xs = length ?ys \\<and>\n   (\\<forall>i<length ?xs. ?xs ! i = ?ys ! i))\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}]", "by blast"], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>}]\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}] \\<Longrightarrow> length \\<GG> = 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}] \\<Longrightarrow> length \\<GG> = 1", "assume \"\\<GG> = [{\\<one>}]\""], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>}]\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}] \\<Longrightarrow> length \\<GG> = 1", "thus \"length \\<GG> = 1\""], ["proof (prove)\nusing this:\n  \\<GG> = [{\\<one>}]\n\ngoal (1 subgoal):\n 1. length \\<GG> = 1", "by simp"], ["proof (state)\nthis:\n  length \\<GG> = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in composition_series) composition_series_triv_group:\n  shows \"(carrier G = {\\<one>}) = (\\<GG> = [{\\<one>}])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (carrier G = {\\<one>}) = (\\<GG> = [{\\<one>}])", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. carrier G = {\\<one>} \\<Longrightarrow> \\<GG> = [{\\<one>}]\n 2. \\<GG> = [{\\<one>}] \\<Longrightarrow> carrier G = {\\<one>}", "assume G:\"carrier G = {\\<one>}\""], ["proof (state)\nthis:\n  carrier G = {\\<one>}\n\ngoal (2 subgoals):\n 1. carrier G = {\\<one>} \\<Longrightarrow> \\<GG> = [{\\<one>}]\n 2. \\<GG> = [{\\<one>}] \\<Longrightarrow> carrier G = {\\<one>}", "have \"length \\<GG> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<GG> = 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "assume \"length \\<GG> \\<noteq> 1\""], ["proof (state)\nthis:\n  length \\<GG> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "with notempty"], ["proof (chain)\npicking this:\n  \\<GG> \\<noteq> []\n  length \\<GG> \\<noteq> 1", "have length:\"length \\<GG> \\<ge> 2\""], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  length \\<GG> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG>", "by (metis Suc_eq_plus1 length_0_conv less_2_cases not_less plus_nat.add_0)"], ["proof (state)\nthis:\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "with simplefact hd hd_conv_nth notempty"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  hd \\<GG> = {\\<one>}\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  \\<GG> \\<noteq> []\n  2 \\<le> length \\<GG>", "have \"simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  hd \\<GG> = {\\<one>}\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  \\<GG> \\<noteq> []\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})", "by force"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "have SG:\"subgroup (\\<GG> ! 1) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! 1) G", "using length normal_series_subgroups"], ["proof (prove)\nusing this:\n  2 \\<le> length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n\ngoal (1 subgoal):\n 1. subgroup (\\<GG> ! 1) G", "by auto"], ["proof (state)\nthis:\n  subgroup (\\<GG> ! 1) G\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "hence \"group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\""], ["proof (prove)\nusing this:\n  subgroup (\\<GG> ! 1) G\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "by (metis subgroup_imp_group)"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})\n  Group.group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "have  \"simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})\n  Group.group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "using group.trivial_factor_iso simple_group.iso_simple"], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr> Mod {\\<one>})\n  Group.group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n  Group.group ?G \\<Longrightarrow>\n  the_elem \\<in> Group.iso (?G Mod {\\<one>\\<^bsub>?G\\<^esub>}) ?G\n  \\<lbrakk>simple_group ?G; Group.group ?H;\n   ?\\<phi> \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> simple_group ?H\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "by fastforce"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "from SG G"], ["proof (chain)\npicking this:\n  subgroup (\\<GG> ! 1) G\n  carrier G = {\\<one>}", "have \"carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}\""], ["proof (prove)\nusing this:\n  subgroup (\\<GG> ! 1) G\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}", "unfolding subgroup_def"], ["proof (prove)\nusing this:\n  (\\<GG> ! 1 \\<subseteq> carrier G \\<and>\n   (\\<forall>x y.\n       x \\<in> \\<GG> ! 1 \\<longrightarrow>\n       y \\<in> \\<GG> ! 1 \\<longrightarrow>\n       x \\<otimes> y \\<in> \\<GG> ! 1)) \\<and>\n  \\<one> \\<in> \\<GG> ! 1 \\<and>\n  (\\<forall>x. x \\<in> \\<GG> ! 1 \\<longrightarrow> inv x \\<in> \\<GG> ! 1)\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}", "by auto"], ["proof (state)\nthis:\n  carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}\n\ngoal (1 subgoal):\n 1. length \\<GG> \\<noteq> 1 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n  carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}", "show False"], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n  carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}\n\ngoal (1 subgoal):\n 1. False", "using simple_group.simple_not_triv"], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n  carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>) = {\\<one>}\n  simple_group ?G \\<Longrightarrow>\n  carrier ?G \\<noteq> {\\<one>\\<^bsub>?G\\<^esub>}\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length \\<GG> = 1\n\ngoal (2 subgoals):\n 1. carrier G = {\\<one>} \\<Longrightarrow> \\<GG> = [{\\<one>}]\n 2. \\<GG> = [{\\<one>}] \\<Longrightarrow> carrier G = {\\<one>}", "thus \"\\<GG> = [{\\<one>}]\""], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}]", "by (metis composition_series_length_one)"], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>}]\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}] \\<Longrightarrow> carrier G = {\\<one>}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}] \\<Longrightarrow> carrier G = {\\<one>}", "assume \"\\<GG> = [{\\<one>}]\""], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>}]\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}] \\<Longrightarrow> carrier G = {\\<one>}", "with last"], ["proof (chain)\npicking this:\n  last \\<GG> = carrier G\n  \\<GG> = [{\\<one>}]", "show \"carrier G = {\\<one>}\""], ["proof (prove)\nusing this:\n  last \\<GG> = carrier G\n  \\<GG> = [{\\<one>}]\n\ngoal (1 subgoal):\n 1. carrier G = {\\<one>}", "by auto"], ["proof (state)\nthis:\n  carrier G = {\\<one>}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The inner elements of a composition series may not consist of the trivial subgroup or the\ngroup itself.\\<close>"], ["", "lemma (in composition_series) inner_elements_not_triv:\n  assumes \"i + 1 < length \\<GG>\"\n  assumes \"i > 0\"\n  shows \"\\<GG> ! i \\<noteq> {\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<noteq> {\\<one>}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  i + 1 < length \\<GG>\n  0 < i", "have \"(i - 1) + 1 < length \\<GG>\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n  0 < i\n\ngoal (1 subgoal):\n 1. i - 1 + 1 < length \\<GG>", "by simp"], ["proof (state)\nthis:\n  i - 1 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "hence simple:\"simple_group (G\\<lparr>carrier := \\<GG> ! ((i - 1) + 1)\\<rparr> Mod \\<GG> ! (i - 1))\""], ["proof (prove)\nusing this:\n  i - 1 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1))", "using simplefact"], ["proof (prove)\nusing this:\n  i - 1 + 1 < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1))", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1))\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "assume i:\"\\<GG> ! i = {\\<one>}\""], ["proof (state)\nthis:\n  \\<GG> ! i = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<GG> ! i = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  i + 1 < length \\<GG>\n  0 < i", "have \"(i - 1) + 1 = i\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n  0 < i\n\ngoal (1 subgoal):\n 1. i - 1 + 1 = i", "by auto"], ["proof (state)\nthis:\n  i - 1 + 1 = i\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<GG> ! i = {\\<one>}\n  i - 1 + 1 = i", "have \"G\\<lparr>carrier := \\<GG> ! ((i - 1) + 1)\\<rparr> Mod \\<GG> ! (i - 1) = G\\<lparr>carrier := {\\<one>}\\<rparr> Mod \\<GG> ! (i - 1)\""], ["proof (prove)\nusing this:\n  \\<GG> ! i = {\\<one>}\n  i - 1 + 1 = i\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1) =\n    G\\<lparr>carrier := {\\<one>}\\<rparr> Mod \\<GG> ! (i - 1)", "using i"], ["proof (prove)\nusing this:\n  \\<GG> ! i = {\\<one>}\n  i - 1 + 1 = i\n  \\<GG> ! i = {\\<one>}\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1) =\n    G\\<lparr>carrier := {\\<one>}\\<rparr> Mod \\<GG> ! (i - 1)", "by auto"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1) =\n  G\\<lparr>carrier := {\\<one>}\\<rparr> Mod \\<GG> ! (i - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "hence \"order (G\\<lparr>carrier := \\<GG> ! ((i - 1) + 1)\\<rparr> Mod \\<GG> ! (i - 1)) = 1\""], ["proof (prove)\nusing this:\n  G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1) =\n  G\\<lparr>carrier := {\\<one>}\\<rparr> Mod \\<GG> ! (i - 1)\n\ngoal (1 subgoal):\n 1. order\n     (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1)) =\n    1", "unfolding FactGroup_def order_def RCOSETS_def"], ["proof (prove)\nusing this:\n  \\<lparr>carrier =\n            \\<Union>a\\<in>carrier\n                           (G\\<lparr>carrier :=\n \\<GG> ! (i - 1 + 1)\\<rparr>).\n               {\\<GG> !\n                (i -\n                 1) #>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr>\\<^esub>\n                a},\n     monoid.mult =\n       (<#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr>\\<^esub>),\n     one = \\<GG> ! (i - 1)\\<rparr> =\n  \\<lparr>carrier =\n            \\<Union>a\\<in>carrier (G\\<lparr>carrier := {\\<one>}\\<rparr>).\n               {\\<GG> !\n                (i -\n                 1) #>\\<^bsub>G\\<lparr>carrier := {\\<one>}\\<rparr>\\<^esub>\n                a},\n     monoid.mult =\n       (<#>\\<^bsub>G\\<lparr>carrier := {\\<one>}\\<rparr>\\<^esub>),\n     one = \\<GG> ! (i - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. card\n     (carrier\n       \\<lparr>carrier =\n                 \\<Union>a\\<in>carrier\n                                (G\\<lparr>carrier :=\n      \\<GG> ! (i - 1 + 1)\\<rparr>).\n                    {\\<GG> !\n                     (i -\n                      1) #>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr>\\<^esub>\n                     a},\n          monoid.mult =\n            (<#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr>\\<^esub>),\n          one = \\<GG> ! (i - 1)\\<rparr>) =\n    1", "by force"], ["proof (state)\nthis:\n  order\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1)) =\n  1\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = {\\<one>} \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  order\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1)) =\n  1\n\ngoal (1 subgoal):\n 1. False", "using i simple"], ["proof (prove)\nusing this:\n  order\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1)) =\n  1\n  \\<GG> ! i = {\\<one>}\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1))\n\ngoal (1 subgoal):\n 1. False", "unfolding simple_group_def simple_group_axioms_def"], ["proof (prove)\nusing this:\n  order\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1)) =\n  1\n  \\<GG> ! i = {\\<one>}\n  Group.group\n   (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod\n    \\<GG> ! (i - 1)) \\<and>\n  1 < order\n       (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod\n        \\<GG> ! (i - 1)) \\<and>\n  (\\<forall>H.\n      H \\<lhd>\n      G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod\n      \\<GG> ! (i - 1) \\<longrightarrow>\n      H =\n      carrier\n       (G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod\n        \\<GG> ! (i - 1)) \\<or>\n      H =\n      {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i - 1 + 1)\\<rparr> Mod \\<GG> ! (i - 1)\\<^esub>})\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>A composition series of a simple group always is its trivial one.\\<close>"], ["", "lemma (in composition_series) composition_series_simple_group:\n  shows \"(simple_group G) = (\\<GG> = [{\\<one>}, carrier G])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group G = (\\<GG> = [{\\<one>}, carrier G])", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]\n 2. \\<GG> = [{\\<one>}, carrier G] \\<Longrightarrow> simple_group G", "assume \"\\<GG> = [{\\<one>}, carrier G]\""], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>}, carrier G]\n\ngoal (2 subgoals):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]\n 2. \\<GG> = [{\\<one>}, carrier G] \\<Longrightarrow> simple_group G", "with simplefact"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  \\<GG> = [{\\<one>}, carrier G]", "have \"simple_group (G Mod {\\<one>})\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  \\<GG> = [{\\<one>}, carrier G]\n\ngoal (1 subgoal):\n 1. simple_group (G Mod {\\<one>})", "by auto"], ["proof (state)\nthis:\n  simple_group (G Mod {\\<one>})\n\ngoal (2 subgoals):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]\n 2. \\<GG> = [{\\<one>}, carrier G] \\<Longrightarrow> simple_group G", "moreover"], ["proof (state)\nthis:\n  simple_group (G Mod {\\<one>})\n\ngoal (2 subgoals):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]\n 2. \\<GG> = [{\\<one>}, carrier G] \\<Longrightarrow> simple_group G", "have \"the_elem \\<in> iso (G Mod {\\<one>}) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_elem \\<in> Group.iso (G Mod {\\<one>}) G", "by (rule trivial_factor_iso)"], ["proof (state)\nthis:\n  the_elem \\<in> Group.iso (G Mod {\\<one>}) G\n\ngoal (2 subgoals):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]\n 2. \\<GG> = [{\\<one>}, carrier G] \\<Longrightarrow> simple_group G", "ultimately"], ["proof (chain)\npicking this:\n  simple_group (G Mod {\\<one>})\n  the_elem \\<in> Group.iso (G Mod {\\<one>}) G", "show \"simple_group G\""], ["proof (prove)\nusing this:\n  simple_group (G Mod {\\<one>})\n  the_elem \\<in> Group.iso (G Mod {\\<one>}) G\n\ngoal (1 subgoal):\n 1. simple_group G", "by (metis is_group simple_group.iso_simple)"], ["proof (state)\nthis:\n  simple_group G\n\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "assume simple:\"simple_group G\""], ["proof (state)\nthis:\n  simple_group G\n\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "have \"length \\<GG> > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length \\<GG>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<GG> \\<Longrightarrow> False", "assume \"\\<not> 1 < length \\<GG>\""], ["proof (state)\nthis:\n  \\<not> 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<GG> \\<Longrightarrow> False", "hence \"length \\<GG> = 1\""], ["proof (prove)\nusing this:\n  \\<not> 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> = 1", "by (simp add: Suc_leI antisym notempty)"], ["proof (state)\nthis:\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<GG> \\<Longrightarrow> False", "hence \"carrier G = {\\<one>}\""], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. carrier G = {\\<one>}", "using hd last"], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n  hd \\<GG> = {\\<one>}\n  last \\<GG> = carrier G\n\ngoal (1 subgoal):\n 1. carrier G = {\\<one>}", "by (metis composition_series_length_one composition_series_triv_group)"], ["proof (state)\nthis:\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<GG> \\<Longrightarrow> False", "hence \"order G = 1\""], ["proof (prove)\nusing this:\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. order G = 1", "unfolding order_def"], ["proof (prove)\nusing this:\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. card (carrier G) = 1", "by auto"], ["proof (state)\nthis:\n  order G = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<GG> \\<Longrightarrow> False", "with simple"], ["proof (chain)\npicking this:\n  simple_group G\n  order G = 1", "show \"False\""], ["proof (prove)\nusing this:\n  simple_group G\n  order G = 1\n\ngoal (1 subgoal):\n 1. False", "unfolding simple_group_def simple_group_axioms_def"], ["proof (prove)\nusing this:\n  Group.group G \\<and>\n  1 < order G \\<and>\n  (\\<forall>H.\n      H \\<lhd> G \\<longrightarrow> H = carrier G \\<or> H = {\\<one>})\n  order G = 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "moreover"], ["proof (state)\nthis:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "have \"length \\<GG> \\<le> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<GG> \\<le> 2", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "define k where \"k = length \\<GG> - 2\""], ["proof (state)\nthis:\n  k = length \\<GG> - 2\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "assume \"\\<not> (length \\<GG> \\<le> 2)\""], ["proof (state)\nthis:\n  \\<not> length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "hence gt2:\"length \\<GG> > 2\""], ["proof (prove)\nusing this:\n  \\<not> length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. 2 < length \\<GG>", "by simp"], ["proof (state)\nthis:\n  2 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "hence ksmall:\"k + 1 < length \\<GG>\""], ["proof (prove)\nusing this:\n  2 < length \\<GG>\n\ngoal (1 subgoal):\n 1. k + 1 < length \\<GG>", "unfolding k_def"], ["proof (prove)\nusing this:\n  2 < length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> - 2 + 1 < length \\<GG>", "by auto"], ["proof (state)\nthis:\n  k + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "from gt2"], ["proof (chain)\npicking this:\n  2 < length \\<GG>", "have carrier:\"\\<GG> ! (k + 1) = carrier G\""], ["proof (prove)\nusing this:\n  2 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (k + 1) = carrier G", "using notempty last last_conv_nth k_def"], ["proof (prove)\nusing this:\n  2 < length \\<GG>\n  \\<GG> \\<noteq> []\n  last \\<GG> = carrier G\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  k = length \\<GG> - 2\n\ngoal (1 subgoal):\n 1. \\<GG> ! (k + 1) = carrier G", "by (metis Nat.add_diff_assoc Nat.diff_cancel \\<open>\\<not> length \\<GG> \\<le> 2\\<close> add.commute nat_le_linear one_add_one)"], ["proof (state)\nthis:\n  \\<GG> ! (k + 1) = carrier G\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "from normal ksmall"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  k + 1 < length \\<GG>", "have \"\\<GG> ! k \\<lhd> G\\<lparr> carrier := \\<GG> ! (k + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  k + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! k \\<lhd> G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr>", "by simp"], ["proof (state)\nthis:\n  \\<GG> ! k \\<lhd> G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "from simplefact ksmall"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  k + 1 < length \\<GG>", "have simplek:\"simple_group (G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k)\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  k + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k)", "by simp"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k)\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "from simplefact ksmall"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  k + 1 < length \\<GG>", "have simplek':\"simple_group (G\\<lparr>carrier := \\<GG> ! ((k - 1) + 1)\\<rparr> Mod \\<GG> ! (k - 1))\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  k + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (k - 1 + 1)\\<rparr> Mod \\<GG> ! (k - 1))", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (k - 1 + 1)\\<rparr> Mod \\<GG> ! (k - 1))\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "have \"\\<GG> ! k \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! k \\<lhd> G", "using carrier k_def gt2 normal ksmall"], ["proof (prove)\nusing this:\n  \\<GG> ! (k + 1) = carrier G\n  k = length \\<GG> - 2\n  2 < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  k + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! k \\<lhd> G", "by force"], ["proof (state)\nthis:\n  \\<GG> ! k \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "with simple"], ["proof (chain)\npicking this:\n  simple_group G\n  \\<GG> ! k \\<lhd> G", "have \"(\\<GG> ! k) = carrier G \\<or> (\\<GG> ! k) = {\\<one>}\""], ["proof (prove)\nusing this:\n  simple_group G\n  \\<GG> ! k \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<GG> ! k = carrier G \\<or> \\<GG> ! k = {\\<one>}", "unfolding simple_group_def simple_group_axioms_def"], ["proof (prove)\nusing this:\n  Group.group G \\<and>\n  1 < order G \\<and>\n  (\\<forall>H.\n      H \\<lhd> G \\<longrightarrow> H = carrier G \\<or> H = {\\<one>})\n  \\<GG> ! k \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<GG> ! k = carrier G \\<or> \\<GG> ! k = {\\<one>}", "by simp"], ["proof (state)\nthis:\n  \\<GG> ! k = carrier G \\<or> \\<GG> ! k = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  \\<GG> ! k = carrier G \\<or> \\<GG> ! k = {\\<one>}\n\ngoal (1 subgoal):\n 1. False", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> ! k = carrier G \\<Longrightarrow> False\n 2. \\<GG> ! k = {\\<one>} \\<Longrightarrow> False", "assume \"\\<GG> ! k = carrier G\""], ["proof (state)\nthis:\n  \\<GG> ! k = carrier G\n\ngoal (2 subgoals):\n 1. \\<GG> ! k = carrier G \\<Longrightarrow> False\n 2. \\<GG> ! k = {\\<one>} \\<Longrightarrow> False", "hence \"G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k = G Mod (carrier G)\""], ["proof (prove)\nusing this:\n  \\<GG> ! k = carrier G\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k =\n    G Mod carrier G", "using carrier"], ["proof (prove)\nusing this:\n  \\<GG> ! k = carrier G\n  \\<GG> ! (k + 1) = carrier G\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k =\n    G Mod carrier G", "by auto"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k =\n  G Mod carrier G\n\ngoal (2 subgoals):\n 1. \\<GG> ! k = carrier G \\<Longrightarrow> False\n 2. \\<GG> ! k = {\\<one>} \\<Longrightarrow> False", "with simplek self_factor_not_simple"], ["proof (chain)\npicking this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k)\n  \\<not> simple_group (G Mod carrier G)\n  G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k =\n  G Mod carrier G", "show \"False\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k)\n  \\<not> simple_group (G Mod carrier G)\n  G\\<lparr>carrier := \\<GG> ! (k + 1)\\<rparr> Mod \\<GG> ! k =\n  G Mod carrier G\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<GG> ! k = {\\<one>} \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> ! k = {\\<one>} \\<Longrightarrow> False", "assume \"\\<GG> ! k = {\\<one>}\""], ["proof (state)\nthis:\n  \\<GG> ! k = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<GG> ! k = {\\<one>} \\<Longrightarrow> False", "with ksmall k_def gt2"], ["proof (chain)\npicking this:\n  k + 1 < length \\<GG>\n  k = length \\<GG> - 2\n  2 < length \\<GG>\n  \\<GG> ! k = {\\<one>}", "show \"False\""], ["proof (prove)\nusing this:\n  k + 1 < length \\<GG>\n  k = length \\<GG> - 2\n  2 < length \\<GG>\n  \\<GG> ! k = {\\<one>}\n\ngoal (1 subgoal):\n 1. False", "using inner_elements_not_triv"], ["proof (prove)\nusing this:\n  k + 1 < length \\<GG>\n  k = length \\<GG> - 2\n  2 < length \\<GG>\n  \\<GG> ! k = {\\<one>}\n  \\<lbrakk>?i + 1 < length \\<GG>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> \\<GG> ! ?i \\<noteq> {\\<one>}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "ultimately"], ["proof (chain)\npicking this:\n  1 < length \\<GG>\n  length \\<GG> \\<le> 2", "have \"length \\<GG> = 2\""], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n  length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2", "by simp"], ["proof (state)\nthis:\n  length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. simple_group G \\<Longrightarrow> \\<GG> = [{\\<one>}, carrier G]", "thus \"\\<GG> = [{\\<one>}, carrier G]\""], ["proof (prove)\nusing this:\n  length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>}, carrier G]", "by (rule length_two_unique)"], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>}, carrier G]\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Two consecutive elements in a composition series are distinct.\\<close>"], ["", "lemma (in composition_series) entries_distinct:\n  assumes finite:\"finite (carrier G)\"\n  assumes i:\"i + 1 < length \\<GG>\"\n  shows \"\\<GG> ! i \\<noteq> \\<GG> ! (i + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<noteq> \\<GG> ! (i + 1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "from finite"], ["proof (chain)\npicking this:\n  finite (carrier G)", "have \"finite  (\\<GG> ! (i + 1))\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. finite (\\<GG> ! (i + 1))", "using i normal_series_subgroups subgroup.subset rev_finite_subset"], ["proof (prove)\nusing this:\n  finite (carrier G)\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (\\<GG> ! (i + 1))", "by metis"], ["proof (state)\nthis:\n  finite (\\<GG> ! (i + 1))\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "hence fin:\"finite (carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>))\""], ["proof (prove)\nusing this:\n  finite (\\<GG> ! (i + 1))\n\ngoal (1 subgoal):\n 1. finite (carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>))", "by auto"], ["proof (state)\nthis:\n  finite (carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>))\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "from i"], ["proof (chain)\npicking this:\n  i + 1 < length \\<GG>", "have norm:\"\\<GG> ! i \\<lhd> (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by (rule normal)"], ["proof (state)\nthis:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "assume \"\\<GG> ! i = \\<GG> ! (i + 1)\""], ["proof (state)\nthis:\n  \\<GG> ! i = \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "hence \"\\<GG> ! i = carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<GG> ! i = \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i = carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "hence \"carrier ((G\\<lparr>carrier := (\\<GG> ! (i + 1))\\<rparr>) Mod (\\<GG> ! i)) = {\\<one>\\<^bsub>(G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>) Mod \\<GG> ! i\\<^esub>}\""], ["proof (prove)\nusing this:\n  \\<GG> ! i = carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\\<^esub>}", "using norm fin normal.fact_group_trivial_iff"], ["proof (prove)\nusing this:\n  \\<GG> ! i = carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  finite (carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>))\n  \\<lbrakk>?H \\<lhd> ?G; finite (carrier ?G)\\<rbrakk>\n  \\<Longrightarrow> (carrier (?G Mod ?H) =\n                     {\\<one>\\<^bsub>?G Mod ?H\\<^esub>}) =\n                    (?H = carrier ?G)\n\ngoal (1 subgoal):\n 1. carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\\<^esub>}", "by metis"], ["proof (state)\nthis:\n  carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "hence \"\\<not> simple_group ((G\\<lparr>carrier := (\\<GG> ! (i + 1))\\<rparr>) Mod (\\<GG> ! i))\""], ["proof (prove)\nusing this:\n  carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<not> simple_group\n            (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)", "by (metis simple_group.simple_not_triv)"], ["proof (state)\nthis:\n  \\<not> simple_group\n          (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i = \\<GG> ! (i + 1) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> simple_group\n          (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. False", "by (metis i simplefact)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The normal series for groups of order @{term \"p * q\"} is even a composition series:\\<close>"], ["", "lemma (in group) pq_order_composition_series:\n  assumes finite:\"finite (carrier G)\"\n  assumes orderG:\"order G = q * p\"\n  assumes primep:\"prime p\" and primeq:\"prime q\" and pq:\"p < q\"\n  shows \"composition_series G [{\\<one>}, (THE H. H \\<in> subgroups_of_size q), carrier G]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]", "unfolding composition_series_def composition_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] \\<and>\n    (\\<forall>i.\n        i + 1\n        < length\n           [{\\<one>}, THE H. H \\<in> subgroups_of_size q,\n            carrier G] \\<longrightarrow>\n        simple_group\n         (G\\<lparr>carrier :=\n                     [{\\<one>}, THE H. H \\<in> subgroups_of_size q,\n                      carrier G] !\n                     (i + 1)\\<rparr> Mod\n          [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i))", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]\n 2. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "using assms"], ["proof (prove)\nusing this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n\ngoal (2 subgoals):\n 1. normal_series G\n     [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G]\n 2. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "apply(rule pq_order_normal_series)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "define H where \"H = (THE H. H \\<in> subgroups_of_size q)\""], ["proof (state)\nthis:\n  H = (THE H. H \\<in> subgroups_of_size q)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "from assms"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q", "have exi:\"\\<exists>!Q. Q \\<in> (subgroups_of_size q)\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n\ngoal (1 subgoal):\n 1. \\<exists>!Q. Q \\<in> subgroups_of_size q", "by (auto simp: pq_order_unique_subgrp)"], ["proof (state)\nthis:\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "hence Hsize:\"H \\<in> subgroups_of_size q\""], ["proof (prove)\nusing this:\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. H \\<in> subgroups_of_size q", "unfolding H_def"], ["proof (prove)\nusing this:\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. (THE H. H \\<in> subgroups_of_size q) \\<in> subgroups_of_size q", "using theI'"], ["proof (prove)\nusing this:\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n  \\<exists>!x. ?P x \\<Longrightarrow> ?P (THE x. ?P x)\n\ngoal (1 subgoal):\n 1. (THE H. H \\<in> subgroups_of_size q) \\<in> subgroups_of_size q", "by metis"], ["proof (state)\nthis:\n  H \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "hence HsubG:\"subgroup H G\""], ["proof (prove)\nusing this:\n  H \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. subgroup H G", "unfolding subgroups_of_size_def"], ["proof (prove)\nusing this:\n  H \\<in> {H. subgroup H G \\<and> card H = q}\n\ngoal (1 subgoal):\n 1. subgroup H G", "by auto"], ["proof (state)\nthis:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "then"], ["proof (chain)\npicking this:\n  subgroup H G", "interpret Hgroup: group \"G\\<lparr>carrier := H\\<rparr>\""], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := H\\<rparr>)", "by (metis subgroup_imp_group)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "assume \"i < Suc (Suc 0)\""], ["proof (state)\nthis:\n  i < Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "hence \"i = 0 \\<or> i = 1\""], ["proof (prove)\nusing this:\n  i < Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. i = 0 \\<or> i = 1", "by auto"], ["proof (state)\nthis:\n  i = 0 \\<or> i = 1\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (Suc 0) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier :=\n                    [THE H. H \\<in> subgroups_of_size q, carrier G] !\n                    i\\<rparr> Mod\n         [{\\<one>}, THE H. H \\<in> subgroups_of_size q, carrier G] ! i)", "thus \"simple_group (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod [{\\<one>}, H, carrier G] ! i)\""], ["proof (prove)\nusing this:\n  i = 0 \\<or> i = 1\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "assume i:\"i = 0\""], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "from Hsize"], ["proof (chain)\npicking this:\n  H \\<in> subgroups_of_size q", "have orderH:\"order (G\\<lparr>carrier := H\\<rparr>) = q\""], ["proof (prove)\nusing this:\n  H \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. order (G\\<lparr>carrier := H\\<rparr>) = q", "unfolding subgroups_of_size_def order_def"], ["proof (prove)\nusing this:\n  H \\<in> {H. subgroup H G \\<and> card H = q}\n\ngoal (1 subgoal):\n 1. card (carrier (G\\<lparr>carrier := H\\<rparr>)) = q", "by simp"], ["proof (state)\nthis:\n  order (G\\<lparr>carrier := H\\<rparr>) = q\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "hence \"order (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>}) = q\""], ["proof (prove)\nusing this:\n  order (G\\<lparr>carrier := H\\<rparr>) = q\n\ngoal (1 subgoal):\n 1. order (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>}) = q", "unfolding FactGroup_def"], ["proof (prove)\nusing this:\n  order (G\\<lparr>carrier := H\\<rparr>) = q\n\ngoal (1 subgoal):\n 1. order\n     \\<lparr>carrier =\n               rcosets\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> {\\<one>},\n        monoid.mult = (<#>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>),\n        one = {\\<one>}\\<rparr> =\n    q", "using card_rcosets_triv order_def"], ["proof (prove)\nusing this:\n  order (G\\<lparr>carrier := H\\<rparr>) = q\n  finite (carrier G) \\<Longrightarrow> card (rcosets {\\<one>}) = order G\n  order ?S = card (carrier ?S)\n\ngoal (1 subgoal):\n 1. order\n     \\<lparr>carrier =\n               rcosets\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> {\\<one>},\n        monoid.mult = (<#>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>),\n        one = {\\<one>}\\<rparr> =\n    q", "by (metis Hgroup.card_rcosets_triv HsubG finite monoid.cases_scheme monoid.select_convs(2) partial_object.select_convs(1) partial_object.update_convs(1) subgroup_finite)"], ["proof (state)\nthis:\n  order (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>}) = q\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "have \"normal {\\<one>} (G\\<lparr>carrier := H\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<one>} \\<lhd> G\\<lparr>carrier := H\\<rparr>", "by (metis Hgroup.is_group Hgroup.normal_inv_iff HsubG group.trivial_subgroup_is_normal is_group singleton_iff subgroup.one_closed subgroup.subgroup_of_subgroup)"], ["proof (state)\nthis:\n  {\\<one>} \\<lhd> G\\<lparr>carrier := H\\<rparr>\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "hence \"group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})\""], ["proof (prove)\nusing this:\n  {\\<one>} \\<lhd> G\\<lparr>carrier := H\\<rparr>\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})", "by (metis normal.factorgroup_is_group)"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "with orderH primeq"], ["proof (chain)\npicking this:\n  order (G\\<lparr>carrier := H\\<rparr>) = q\n  prime q\n  Group.group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})", "have \"simple_group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})\""], ["proof (prove)\nusing this:\n  order (G\\<lparr>carrier := H\\<rparr>) = q\n  prime q\n  Group.group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})", "by (metis \\<open>order (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>}) = q\\<close> group.prime_order_simple)"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)\n 2. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "with i"], ["proof (chain)\npicking this:\n  i = 0\n  simple_group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n  simple_group (G\\<lparr>carrier := H\\<rparr> Mod {\\<one>})\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "by simp"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n    [{\\<one>}, H, carrier G] ! i)\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "assume i:\"i = 1\""], ["proof (state)\nthis:\n  i = 1\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "from assms exi"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n  \\<exists>!Q. Q \\<in> subgroups_of_size q", "have \"H \\<lhd> G\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. H \\<lhd> G", "unfolding H_def"], ["proof (prove)\nusing this:\n  finite (carrier G)\n  order G = q * p\n  prime p\n  prime q\n  p < q\n  \\<exists>!Q. Q \\<in> subgroups_of_size q\n\ngoal (1 subgoal):\n 1. (THE H. H \\<in> subgroups_of_size q) \\<lhd> G", "by (metis pq_order_subgrp_normal)"], ["proof (state)\nthis:\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "hence groupGH:\"group (G Mod H)\""], ["proof (prove)\nusing this:\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. Group.group (G Mod H)", "by (metis normal.factorgroup_is_group)"], ["proof (state)\nthis:\n  Group.group (G Mod H)\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "from primeq"], ["proof (chain)\npicking this:\n  prime q", "have \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  prime q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by (metis not_prime_0)"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "from HsubG finite orderG"], ["proof (chain)\npicking this:\n  subgroup H G\n  finite (carrier G)\n  order G = q * p", "have \"card (rcosets H) * card H = q * p\""], ["proof (prove)\nusing this:\n  subgroup H G\n  finite (carrier G)\n  order G = q * p\n\ngoal (1 subgoal):\n 1. card (rcosets H) * card H = q * p", "unfolding subgroups_of_size_def"], ["proof (prove)\nusing this:\n  subgroup H G\n  finite (carrier G)\n  order G = q * p\n\ngoal (1 subgoal):\n 1. card (rcosets H) * card H = q * p", "using lagrange"], ["proof (prove)\nusing this:\n  subgroup H G\n  finite (carrier G)\n  order G = q * p\n  subgroup ?H G \\<Longrightarrow> card (rcosets ?H) * card ?H = order G\n\ngoal (1 subgoal):\n 1. card (rcosets H) * card H = q * p", "by simp"], ["proof (state)\nthis:\n  card (rcosets H) * card H = q * p\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "with Hsize"], ["proof (chain)\npicking this:\n  H \\<in> subgroups_of_size q\n  card (rcosets H) * card H = q * p", "have \"card (rcosets H) * q = q * p\""], ["proof (prove)\nusing this:\n  H \\<in> subgroups_of_size q\n  card (rcosets H) * card H = q * p\n\ngoal (1 subgoal):\n 1. card (rcosets H) * q = q * p", "unfolding subgroups_of_size_def"], ["proof (prove)\nusing this:\n  H \\<in> {H. subgroup H G \\<and> card H = q}\n  card (rcosets H) * card H = q * p\n\ngoal (1 subgoal):\n 1. card (rcosets H) * q = q * p", "by simp"], ["proof (state)\nthis:\n  card (rcosets H) * q = q * p\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "with \\<open>q \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  card (rcosets H) * q = q * p", "have \"card (rcosets H) = p\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  card (rcosets H) * q = q * p\n\ngoal (1 subgoal):\n 1. card (rcosets H) = p", "by auto"], ["proof (state)\nthis:\n  card (rcosets H) = p\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "hence \"order (G Mod H) = p\""], ["proof (prove)\nusing this:\n  card (rcosets H) = p\n\ngoal (1 subgoal):\n 1. order (G Mod H) = p", "unfolding order_def FactGroup_def"], ["proof (prove)\nusing this:\n  card (rcosets H) = p\n\ngoal (1 subgoal):\n 1. card\n     (carrier\n       \\<lparr>carrier = rcosets H, monoid.mult = (<#>), one = H\\<rparr>) =\n    p", "by auto"], ["proof (state)\nthis:\n  order (G Mod H) = p\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "with groupGH primep"], ["proof (chain)\npicking this:\n  Group.group (G Mod H)\n  prime p\n  order (G Mod H) = p", "have \"simple_group (G Mod H)\""], ["proof (prove)\nusing this:\n  Group.group (G Mod H)\n  prime p\n  order (G Mod H) = p\n\ngoal (1 subgoal):\n 1. simple_group (G Mod H)", "by (metis group.prime_order_simple)"], ["proof (state)\nthis:\n  simple_group (G Mod H)\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "with i"], ["proof (chain)\npicking this:\n  i = 1\n  simple_group (G Mod H)", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 1\n  simple_group (G Mod H)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n      [{\\<one>}, H, carrier G] ! i)", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n    [{\\<one>}, H, carrier G] ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := [H, carrier G] ! i\\<rparr> Mod\n    [{\\<one>}, H, carrier G] ! i)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Prefixes of composition series are also composition series.\\<close>"], ["", "lemma (in composition_series) composition_series_prefix_closed:\n  assumes \"i \\<le> length \\<GG>\" and \"0 < i\"\n  shows \"composition_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>) (take i \\<GG>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>)\n     (take i \\<GG>)", "unfolding composition_series_def composition_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := \\<GG> ! (i - 1)\\<rparr>)\n     (take i \\<GG>) \\<and>\n    (\\<forall>ia.\n        ia + 1 < length (take i \\<GG>) \\<longrightarrow>\n        simple_group\n         (G\\<lparr>carrier := \\<GG> ! (i - 1),\n              carrier := take i \\<GG> ! (ia + 1)\\<rparr> Mod\n          take i \\<GG> ! ia))", "proof auto"], ["proof (state)\ngoal (2 subgoals):\n 1. normal_series (G\\<lparr>carrier := \\<GG> ! (i - Suc 0)\\<rparr>)\n     (take i \\<GG>)\n 2. \\<And>ia.\n       \\<lbrakk>Suc ia < length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> simple_group\n                          (G\\<lparr>carrier := \\<GG> ! Suc ia\\<rparr> Mod\n                           \\<GG> ! ia)", "from assms"], ["proof (chain)\npicking this:\n  i \\<le> length \\<GG>\n  0 < i", "show \"normal_series (G\\<lparr>carrier := \\<GG> ! (i - Suc 0)\\<rparr>) (take i \\<GG>)\""], ["proof (prove)\nusing this:\n  i \\<le> length \\<GG>\n  0 < i\n\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := \\<GG> ! (i - Suc 0)\\<rparr>)\n     (take i \\<GG>)", "by (metis One_nat_def normal_series_prefix_closed)"], ["proof (state)\nthis:\n  normal_series (G\\<lparr>carrier := \\<GG> ! (i - Suc 0)\\<rparr>)\n   (take i \\<GG>)\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Suc ia < length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> simple_group\n                          (G\\<lparr>carrier := \\<GG> ! Suc ia\\<rparr> Mod\n                           \\<GG> ! ia)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Suc ia < length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> simple_group\n                          (G\\<lparr>carrier := \\<GG> ! Suc ia\\<rparr> Mod\n                           \\<GG> ! ia)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Suc ia < length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> simple_group\n                          (G\\<lparr>carrier := \\<GG> ! Suc ia\\<rparr> Mod\n                           \\<GG> ! ia)", "assume j:\"Suc j < length \\<GG>\" \"Suc j < i\""], ["proof (state)\nthis:\n  Suc j < length \\<GG>\n  Suc j < i\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Suc ia < length \\<GG>; Suc ia < i\\<rbrakk>\n       \\<Longrightarrow> simple_group\n                          (G\\<lparr>carrier := \\<GG> ! Suc ia\\<rparr> Mod\n                           \\<GG> ! ia)", "with simplefact"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  Suc j < length \\<GG>\n  Suc j < i", "show \"simple_group (G\\<lparr>carrier := \\<GG> ! Suc j\\<rparr> Mod \\<GG> ! j)\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  Suc j < length \\<GG>\n  Suc j < i\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! Suc j\\<rparr> Mod \\<GG> ! j)", "by (metis Suc_eq_plus1)"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! Suc j\\<rparr> Mod \\<GG> ! j)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The second element in a composition series is simple group.\\<close>"], ["", "lemma (in composition_series) composition_series_snd_simple:\n  assumes \"2 \\<le> length \\<GG>\"\n  shows \"simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "from assms"], ["proof (chain)\npicking this:\n  2 \\<le> length \\<GG>", "interpret compTake: composition_series \"G\\<lparr>carrier := \\<GG> ! 1\\<rparr>\" \"take 2 \\<GG>\""], ["proof (prove)\nusing this:\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n     (take 2 \\<GG>)", "by (metis add_diff_cancel_right' composition_series_prefix_closed one_add_one zero_less_numeral)"], ["proof (state)\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "from assms"], ["proof (chain)\npicking this:\n  2 \\<le> length \\<GG>", "have \"length (take 2 \\<GG>) = 2\""], ["proof (prove)\nusing this:\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. length (take 2 \\<GG>) = 2", "by (metis add_diff_cancel_right' append_take_drop_id diff_diff_cancel length_append length_drop)"], ["proof (state)\nthis:\n  length (take 2 \\<GG>) = 2\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "hence \"(take 2 \\<GG>) = [{\\<one>\\<^bsub>(G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\\<^esub>}, carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)]\""], ["proof (prove)\nusing this:\n  length (take 2 \\<GG>) = 2\n\ngoal (1 subgoal):\n 1. take 2 \\<GG> =\n    [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! 1\\<rparr>\\<^esub>},\n     carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)]", "by (rule compTake.length_two_unique)"], ["proof (state)\nthis:\n  take 2 \\<GG> =\n  [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! 1\\<rparr>\\<^esub>},\n   carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)]\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  take 2 \\<GG> =\n  [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! 1\\<rparr>\\<^esub>},\n   carrier (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)]\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)", "by (metis compTake.composition_series_simple_group)"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! 1\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>As a stronger way to state the previous lemma: An entry of a composition series is \n  simple if and only if it is the second one.\\<close>"], ["", "lemma (in composition_series) composition_snd_simple_iff:\n  assumes \"i < length \\<GG>\"\n  shows \"(simple_group (G\\<lparr>carrier :=  \\<GG> ! i\\<rparr>)) = (i = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) = (i = 1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "assume simpi:\"simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\""], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "hence \"\\<GG> ! i \\<noteq> {\\<one>}\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<noteq> {\\<one>}", "using simple_group.simple_not_triv"], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n  simple_group ?G \\<Longrightarrow>\n  carrier ?G \\<noteq> {\\<one>\\<^bsub>?G\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<noteq> {\\<one>}", "by force"], ["proof (state)\nthis:\n  \\<GG> ! i \\<noteq> {\\<one>}\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "hence \"i \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<noteq> {\\<one>}\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0", "using hd hd_conv_nth notempty"], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<noteq> {\\<one>}\n  hd \\<GG> = {\\<one>}\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs = ?xs ! 0\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> 0", "interpret compTake: composition_series \"G\\<lparr>carrier := \\<GG> ! i\\<rparr>\" \"take (Suc i) \\<GG>\""], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n     (take (Suc i) \\<GG>)", "using assms composition_series_prefix_closed"], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n  i < length \\<GG>\n  \\<lbrakk>?i \\<le> length \\<GG>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (G\\<lparr>carrier := \\<GG> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<GG>)\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n     (take (Suc i) \\<GG>)", "by (metis diff_Suc_1 less_eq_Suc_le zero_less_Suc)"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "from simpi"], ["proof (chain)\npicking this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "have \"(take (Suc i) \\<GG>) = [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}, carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)]\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n\ngoal (1 subgoal):\n 1. take (Suc i) \\<GG> =\n    [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>},\n     carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)]", "by (metis compTake.composition_series_simple_group)"], ["proof (state)\nthis:\n  take (Suc i) \\<GG> =\n  [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>},\n   carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)]\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "hence \"length (take (Suc i) \\<GG>) = 2\""], ["proof (prove)\nusing this:\n  take (Suc i) \\<GG> =\n  [{\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>},\n   carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)]\n\ngoal (1 subgoal):\n 1. length (take (Suc i) \\<GG>) = 2", "by auto"], ["proof (state)\nthis:\n  length (take (Suc i) \\<GG>) = 2\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "hence \"min (length \\<GG>) (Suc i) = 2\""], ["proof (prove)\nusing this:\n  length (take (Suc i) \\<GG>) = 2\n\ngoal (1 subgoal):\n 1. min (length \\<GG>) (Suc i) = 2", "by (metis length_take)"], ["proof (state)\nthis:\n  min (length \\<GG>) (Suc i) = 2\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "with assms"], ["proof (chain)\npicking this:\n  i < length \\<GG>\n  min (length \\<GG>) (Suc i) = 2", "have \"Suc i = 2\""], ["proof (prove)\nusing this:\n  i < length \\<GG>\n  min (length \\<GG>) (Suc i) = 2\n\ngoal (1 subgoal):\n 1. Suc i = 2", "by force"], ["proof (state)\nthis:\n  Suc i = 2\n\ngoal (2 subgoals):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>) \\<Longrightarrow>\n    i = 1\n 2. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "thus \"i = 1\""], ["proof (prove)\nusing this:\n  Suc i = 2\n\ngoal (1 subgoal):\n 1. i = 1", "by simp"], ["proof (state)\nthis:\n  i = 1\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "assume i:\"i = 1\""], ["proof (state)\nthis:\n  i = 1\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "with assms"], ["proof (chain)\npicking this:\n  i < length \\<GG>\n  i = 1", "have \"2 \\<le> length \\<GG>\""], ["proof (prove)\nusing this:\n  i < length \\<GG>\n  i = 1\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<GG>", "by simp"], ["proof (state)\nthis:\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "with i"], ["proof (chain)\npicking this:\n  i = 1\n  2 \\<le> length \\<GG>", "show \"simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\""], ["proof (prove)\nusing this:\n  i = 1\n  2 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "by (metis composition_series_snd_simple)"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The second to last entry of a normal series is not only a normal subgroup but\n  actually even a \\emph{maximal} normal subgroup.\\<close>"], ["", "lemma (in composition_series) snd_to_last_max_normal:\n  assumes finite:\"finite (carrier G)\"\n  assumes length:\"length \\<GG> > 1\"\n  shows \"max_normal_subgroup (\\<GG> ! (length \\<GG> - 2)) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<GG> ! (length \\<GG> - 2)) G", "unfolding max_normal_subgroup_def max_normal_subgroup_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G \\<and>\n    \\<GG> ! (length \\<GG> - 2) \\<noteq> carrier G \\<and>\n    (\\<forall>J.\n        J \\<lhd> G \\<longrightarrow>\n        J \\<noteq> \\<GG> ! (length \\<GG> - 2) \\<longrightarrow>\n        J \\<noteq> carrier G \\<longrightarrow>\n        \\<not> \\<GG> ! (length \\<GG> - 2) \\<subseteq> J)", "proof (auto del: equalityI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n 2. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 3. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<GG> ! (length \\<GG> - 2) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "by (rule normal_series_snd_to_last)"], ["proof (state)\nthis:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "define G' where \"G' = \\<GG> ! (length \\<GG> - 2)\""], ["proof (state)\nthis:\n  G' = \\<GG> ! (length \\<GG> - 2)\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "from length"], ["proof (chain)\npicking this:\n  1 < length \\<GG>", "have length21:\"length \\<GG> - 2 + 1 = length \\<GG> - 1\""], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> - 2 + 1 = length \\<GG> - 1", "by arith"], ["proof (state)\nthis:\n  length \\<GG> - 2 + 1 = length \\<GG> - 1\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "from length"], ["proof (chain)\npicking this:\n  1 < length \\<GG>", "have \"length \\<GG> - 2 + 1 < length \\<GG>\""], ["proof (prove)\nusing this:\n  1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> - 2 + 1 < length \\<GG>", "by arith"], ["proof (state)\nthis:\n  length \\<GG> - 2 + 1 < length \\<GG>\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "with simplefact"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  length \\<GG> - 2 + 1 < length \\<GG>", "have \"simple_group (G\\<lparr>carrier := \\<GG> ! ((length \\<GG> - 2) + 1)\\<rparr> Mod G')\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  length \\<GG> - 2 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr> Mod G')", "unfolding G'_def"], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  length \\<GG> - 2 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr> Mod\n      \\<GG> ! (length \\<GG> - 2))", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr> Mod G')\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "with length21"], ["proof (chain)\npicking this:\n  length \\<GG> - 2 + 1 = length \\<GG> - 1\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr> Mod G')", "have simple_last:\"simple_group (G Mod G')\""], ["proof (prove)\nusing this:\n  length \\<GG> - 2 + 1 = length \\<GG> - 1\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr> Mod G')\n\ngoal (1 subgoal):\n 1. simple_group (G Mod G')", "using last notempty last_conv_nth"], ["proof (prove)\nusing this:\n  length \\<GG> - 2 + 1 = length \\<GG> - 1\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 2 + 1)\\<rparr> Mod G')\n  last \\<GG> = carrier G\n  \\<GG> \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. simple_group (G Mod G')", "by fastforce"], ["proof (state)\nthis:\n  simple_group (G Mod G')\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  simple_group (G Mod G')\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "assume snd_to_last_eq:\"G' = carrier G\""], ["proof (state)\nthis:\n  G' = carrier G\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"carrier (G Mod G') = {\\<one>\\<^bsub>G Mod G'\\<^esub>}\""], ["proof (prove)\nusing this:\n  G' = carrier G\n\ngoal (1 subgoal):\n 1. carrier (G Mod G') = {\\<one>\\<^bsub>G Mod G'\\<^esub>}", "using normal_series_snd_to_last finite normal.fact_group_trivial_iff"], ["proof (prove)\nusing this:\n  G' = carrier G\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  finite (carrier G)\n  \\<lbrakk>?H \\<lhd> ?G; finite (carrier ?G)\\<rbrakk>\n  \\<Longrightarrow> (carrier (?G Mod ?H) =\n                     {\\<one>\\<^bsub>?G Mod ?H\\<^esub>}) =\n                    (?H = carrier ?G)\n\ngoal (1 subgoal):\n 1. carrier (G Mod G') = {\\<one>\\<^bsub>G Mod G'\\<^esub>}", "unfolding G'_def"], ["proof (prove)\nusing this:\n  \\<GG> ! (length \\<GG> - 2) = carrier G\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  finite (carrier G)\n  \\<lbrakk>?H \\<lhd> ?G; finite (carrier ?G)\\<rbrakk>\n  \\<Longrightarrow> (carrier (?G Mod ?H) =\n                     {\\<one>\\<^bsub>?G Mod ?H\\<^esub>}) =\n                    (?H = carrier ?G)\n\ngoal (1 subgoal):\n 1. carrier (G Mod \\<GG> ! (length \\<GG> - 2)) =\n    {\\<one>\\<^bsub>G Mod \\<GG> ! (length \\<GG> - 2)\\<^esub>}", "by metis"], ["proof (state)\nthis:\n  carrier (G Mod G') = {\\<one>\\<^bsub>G Mod G'\\<^esub>}\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "with snd_to_last_eq"], ["proof (chain)\npicking this:\n  G' = carrier G\n  carrier (G Mod G') = {\\<one>\\<^bsub>G Mod G'\\<^esub>}", "have \"\\<not> simple_group (G Mod G')\""], ["proof (prove)\nusing this:\n  G' = carrier G\n  carrier (G Mod G') = {\\<one>\\<^bsub>G Mod G'\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<not> simple_group (G Mod G')", "by (metis self_factor_not_simple)"], ["proof (state)\nthis:\n  \\<not> simple_group (G Mod G')\n\ngoal (2 subgoals):\n 1. \\<GG> ! (length \\<GG> - 2) = carrier G \\<Longrightarrow> False\n 2. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "with simple_last"], ["proof (chain)\npicking this:\n  simple_group (G Mod G')\n  \\<not> simple_group (G Mod G')", "show False"], ["proof (prove)\nusing this:\n  simple_group (G Mod G')\n  \\<not> simple_group (G Mod G')\n\ngoal (1 subgoal):\n 1. False", "unfolding G'_def"], ["proof (prove)\nusing this:\n  simple_group (G Mod \\<GG> ! (length \\<GG> - 2))\n  \\<not> simple_group (G Mod \\<GG> ! (length \\<GG> - 2))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  G' = carrier G \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  G' = carrier G \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "have G'G:\"G' \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' \\<lhd> G", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 2) \\<lhd> G", "by (rule normal_series_snd_to_last)"], ["proof (state)\nthis:\n  G' \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "fix J"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "assume J:\"J \\<lhd> G\" \"J \\<noteq> G'\" \"J \\<noteq> carrier G\" \"G' \\<subseteq> J\""], ["proof (state)\nthis:\n  J \\<lhd> G\n  J \\<noteq> G'\n  J \\<noteq> carrier G\n  G' \\<subseteq> J\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "hence JG'GG':\"rcosets\\<^bsub>(G\\<lparr>carrier := J\\<rparr>)\\<^esub> G' \\<lhd> G Mod G'\""], ["proof (prove)\nusing this:\n  J \\<lhd> G\n  J \\<noteq> G'\n  J \\<noteq> carrier G\n  G' \\<subseteq> J\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' \\<lhd> G Mod G'", "using normality_factorization normal_series_snd_to_last"], ["proof (prove)\nusing this:\n  J \\<lhd> G\n  J \\<noteq> G'\n  J \\<noteq> carrier G\n  G' \\<subseteq> J\n  \\<lbrakk>?N \\<lhd> G; ?N \\<subseteq> ?H; ?H \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> rcosets\\<^bsub>G\\<lparr>carrier := ?H\\<rparr>\\<^esub> ?N \\<lhd>\n                    G Mod ?N\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' \\<lhd> G Mod G'", "unfolding G'_def"], ["proof (prove)\nusing this:\n  J \\<lhd> G\n  J \\<noteq> \\<GG> ! (length \\<GG> - 2)\n  J \\<noteq> carrier G\n  \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\n  \\<lbrakk>?N \\<lhd> G; ?N \\<subseteq> ?H; ?H \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> rcosets\\<^bsub>G\\<lparr>carrier := ?H\\<rparr>\\<^esub> ?N \\<lhd>\n                    G Mod ?N\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> \\<GG> !\n                   (length \\<GG> - 2) \\<lhd>\n    G Mod \\<GG> ! (length \\<GG> - 2)", "by auto"], ["proof (state)\nthis:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' \\<lhd> G Mod G'\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "from G'G J(1,4)"], ["proof (chain)\npicking this:\n  G' \\<lhd> G\n  J \\<lhd> G\n  G' \\<subseteq> J", "have G'J:\"G' \\<lhd> (G\\<lparr>carrier := J\\<rparr>)\""], ["proof (prove)\nusing this:\n  G' \\<lhd> G\n  J \\<lhd> G\n  G' \\<subseteq> J\n\ngoal (1 subgoal):\n 1. G' \\<lhd> G\\<lparr>carrier := J\\<rparr>", "by (metis normal_imp_subgroup normal_restrict_supergroup)"], ["proof (state)\nthis:\n  G' \\<lhd> G\\<lparr>carrier := J\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "from finite J(1)"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  J \\<lhd> G", "have finJ:\"finite J\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  J \\<lhd> G\n\ngoal (1 subgoal):\n 1. finite J", "by (auto simp: normal_imp_subgroup subgroup_finite)"], ["proof (state)\nthis:\n  finite J\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "from JG'GG' simple_last"], ["proof (chain)\npicking this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' \\<lhd> G Mod G'\n  simple_group (G Mod G')", "have \"rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' = {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<or> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' = carrier (G Mod G')\""], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' \\<lhd> G Mod G'\n  simple_group (G Mod G')\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<or>\n    rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G')", "unfolding simple_group_def simple_group_axioms_def"], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' \\<lhd> G Mod G'\n  Group.group (G Mod G') \\<and>\n  1 < order (G Mod G') \\<and>\n  (\\<forall>H.\n      H \\<lhd> G Mod G' \\<longrightarrow>\n      H = carrier (G Mod G') \\<or> H = {\\<one>\\<^bsub>G Mod G'\\<^esub>})\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<or>\n    rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G')", "by auto"], ["proof (state)\nthis:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<or>\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  carrier (G Mod G')\n\ngoal (1 subgoal):\n 1. \\<And>J.\n       \\<lbrakk>J \\<lhd> G; J \\<noteq> \\<GG> ! (length \\<GG> - 2);\n        J \\<noteq> carrier G;\n        \\<GG> ! (length \\<GG> - 2) \\<subseteq> J\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<or>\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  carrier (G Mod G')\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<Longrightarrow>\n    False\n 2. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "assume \"rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' = {\\<one>\\<^bsub>G Mod G'\\<^esub>}\""], ["proof (state)\nthis:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G Mod G'\\<^esub>}\n\ngoal (2 subgoals):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<Longrightarrow>\n    False\n 2. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "hence \"rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' = {\\<one>\\<^bsub>(G\\<lparr>carrier := J\\<rparr>) Mod G'\\<^esub>}\""], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G Mod G'\\<^esub>}\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := J\\<rparr> Mod G'\\<^esub>}", "unfolding FactGroup_def"], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>\\<lparr>carrier = rcosets G', monoid.mult = (<#>), one = G'\\<rparr>\\<^esub>}\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>\\<lparr>carrier = rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G', monoid.mult = (<#>\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub>), one = G'\\<rparr>\\<^esub>}", "by simp"], ["proof (state)\nthis:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := J\\<rparr> Mod G'\\<^esub>}\n\ngoal (2 subgoals):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<Longrightarrow>\n    False\n 2. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "hence \"G' = J\""], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := J\\<rparr> Mod G'\\<^esub>}\n\ngoal (1 subgoal):\n 1. G' = J", "using G'J finJ normal.fact_group_trivial_iff"], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := J\\<rparr> Mod G'\\<^esub>}\n  G' \\<lhd> G\\<lparr>carrier := J\\<rparr>\n  finite J\n  \\<lbrakk>?H \\<lhd> ?G; finite (carrier ?G)\\<rbrakk>\n  \\<Longrightarrow> (carrier (?G Mod ?H) =\n                     {\\<one>\\<^bsub>?G Mod ?H\\<^esub>}) =\n                    (?H = carrier ?G)\n\ngoal (1 subgoal):\n 1. G' = J", "unfolding FactGroup_def"], ["proof (prove)\nusing this:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  {\\<one>\\<^bsub>\\<lparr>carrier = rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G', monoid.mult = (<#>\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub>), one = G'\\<rparr>\\<^esub>}\n  G' \\<lhd> G\\<lparr>carrier := J\\<rparr>\n  finite J\n  \\<lbrakk>?H \\<lhd> ?G; finite (carrier ?G)\\<rbrakk>\n  \\<Longrightarrow> (carrier\n                      \\<lparr>carrier = rcosets\\<^bsub>?G\\<^esub> ?H,\n                         monoid.mult = (<#>\\<^bsub>?G\\<^esub>),\n                         one = ?H\\<rparr> =\n                     {\\<one>\\<^bsub>\\<lparr>carrier = rcosets\\<^bsub>?G\\<^esub> ?H, monoid.mult = (<#>\\<^bsub>?G\\<^esub>), one = ?H\\<rparr>\\<^esub>}) =\n                    (?H = carrier ?G)\n\ngoal (1 subgoal):\n 1. G' = J", "by fastforce"], ["proof (state)\nthis:\n  G' = J\n\ngoal (2 subgoals):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    {\\<one>\\<^bsub>G Mod G'\\<^esub>} \\<Longrightarrow>\n    False\n 2. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "with J(2)"], ["proof (chain)\npicking this:\n  J \\<noteq> G'\n  G' = J", "show False"], ["proof (prove)\nusing this:\n  J \\<noteq> G'\n  G' = J\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "assume facts_eq:\"rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' = carrier (G Mod G')\""], ["proof (state)\nthis:\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  carrier (G Mod G')\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "have \"J = carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J = carrier G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. J \\<subseteq> carrier G\n 2. carrier G \\<subseteq> J", "show \"J \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J \\<subseteq> carrier G", "using J(1) normal_imp_subgroup subgroup.subset"], ["proof (prove)\nusing this:\n  J \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. J \\<subseteq> carrier G", "by force"], ["proof (state)\nthis:\n  J \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. carrier G \\<subseteq> J", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. carrier G \\<subseteq> J", "show \"carrier G \\<subseteq> J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier G \\<subseteq> J", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "assume x:\"x \\<in> carrier G\""], ["proof (state)\nthis:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "hence \"G' #> x \\<in> carrier (G Mod G')\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. G' #> x \\<in> carrier (G Mod G')", "unfolding FactGroup_def RCOSETS_def"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. G' #> x\n    \\<in> carrier\n           \\<lparr>carrier = \\<Union>a\\<in>carrier G. {G' #> a},\n              monoid.mult = (<#>), one = G'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  G' #> x \\<in> carrier (G Mod G')\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "hence \"G' #> x \\<in> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G'\""], ["proof (prove)\nusing this:\n  G' #> x \\<in> carrier (G Mod G')\n\ngoal (1 subgoal):\n 1. G' #> x \\<in> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G'", "using facts_eq"], ["proof (prove)\nusing this:\n  G' #> x \\<in> carrier (G Mod G')\n  rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n  carrier (G Mod G')\n\ngoal (1 subgoal):\n 1. G' #> x \\<in> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G'", "by auto"], ["proof (state)\nthis:\n  G' #> x \\<in> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  G' #> x \\<in> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G'", "obtain j where j:\"j \\<in> J\" \"G' #> x = G' #> j\""], ["proof (prove)\nusing this:\n  G' #> x \\<in> rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G'\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> J; G' #> x = G' #> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding RCOSETS_def r_coset_def"], ["proof (prove)\nusing this:\n  (\\<Union>h\\<in>G'. {h \\<otimes> x})\n  \\<in> (\\<Union>a\\<in>carrier (G\\<lparr>carrier := J\\<rparr>).\n            {\\<Union>h\\<in>G'.\n                {h \\<otimes>\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub>\n                 a}})\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> J;\n         (\\<Union>h\\<in>G'. {h \\<otimes> x}) =\n         (\\<Union>h\\<in>G'. {h \\<otimes> j})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  j \\<in> J\n  G' #> x = G' #> j\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "hence \"x \\<in> G' #> j\""], ["proof (prove)\nusing this:\n  j \\<in> J\n  G' #> x = G' #> j\n\ngoal (1 subgoal):\n 1. x \\<in> G' #> j", "using G'G normal_imp_subgroup x repr_independenceD"], ["proof (prove)\nusing this:\n  j \\<in> J\n  G' #> x = G' #> j\n  G' \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  x \\<in> carrier G\n  \\<lbrakk>subgroup ?H G; ?y \\<in> carrier G; ?H #> ?x = ?H #> ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> ?H #> ?x\n\ngoal (1 subgoal):\n 1. x \\<in> G' #> j", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> G' #> j\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  x \\<in> G' #> j", "obtain g' where g':\"g' \\<in> G'\" \"x = g' \\<otimes> j\""], ["proof (prove)\nusing this:\n  x \\<in> G' #> j\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> G'; x = g' \\<otimes> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding r_coset_def"], ["proof (prove)\nusing this:\n  x \\<in> (\\<Union>h\\<in>G'. {h \\<otimes> j})\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> G'; x = g' \\<otimes> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g' \\<in> G'\n  x = g' \\<otimes> j\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "hence \"g' \\<in> J\""], ["proof (prove)\nusing this:\n  g' \\<in> G'\n  x = g' \\<otimes> j\n\ngoal (1 subgoal):\n 1. g' \\<in> J", "using G'J normal_imp_subgroup subgroup.subset"], ["proof (prove)\nusing this:\n  g' \\<in> G'\n  x = g' \\<otimes> j\n  G' \\<lhd> G\\<lparr>carrier := J\\<rparr>\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. g' \\<in> J", "by force"], ["proof (state)\nthis:\n  g' \\<in> J\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier G \\<Longrightarrow> x \\<in> J", "with g'(2) j(1)"], ["proof (chain)\npicking this:\n  x = g' \\<otimes> j\n  j \\<in> J\n  g' \\<in> J", "show  \"x \\<in> J\""], ["proof (prove)\nusing this:\n  x = g' \\<otimes> j\n  j \\<in> J\n  g' \\<in> J\n\ngoal (1 subgoal):\n 1. x \\<in> J", "using J(1) normal_imp_subgroup subgroup.m_closed"], ["proof (prove)\nusing this:\n  x = g' \\<otimes> j\n  j \\<in> J\n  g' \\<in> J\n  J \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  \\<lbrakk>subgroup ?H ?G; ?x \\<in> ?H; ?y \\<in> ?H\\<rbrakk>\n  \\<Longrightarrow> ?x \\<otimes>\\<^bsub>?G\\<^esub> ?y \\<in> ?H\n\ngoal (1 subgoal):\n 1. x \\<in> J", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> J\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier G \\<subseteq> J\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  J = carrier G\n\ngoal (1 subgoal):\n 1. rcosets\\<^bsub>G\\<lparr>carrier := J\\<rparr>\\<^esub> G' =\n    carrier (G Mod G') \\<Longrightarrow>\n    False", "with J(3)"], ["proof (chain)\npicking this:\n  J \\<noteq> carrier G\n  J = carrier G", "show False"], ["proof (prove)\nusing this:\n  J \\<noteq> carrier G\n  J = carrier G\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?J2 \\<lhd> G; ?J2 \\<noteq> G'; ?J2 \\<noteq> carrier G;\n   G' \\<subseteq> ?J2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For the next lemma we need a few facts about removing adjacent duplicates.\\<close>"], ["", "lemma remdups_adj_obtain_adjacency:\n  assumes \"i + 1 < length (remdups_adj xs)\" \"length xs > 0\"\n  obtains j where \"j + 1 < length xs\"\n    \"(remdups_adj xs) ! i = xs ! j\" \"(remdups_adj xs) ! (i + 1) = xs ! (j + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j + 1 < length xs; remdups_adj xs ! i = xs ! j;\n         remdups_adj xs ! (i + 1) = xs ! (j + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  i + 1 < length (remdups_adj xs)\n  0 < length xs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j + 1 < length xs; remdups_adj xs ! i = xs ! j;\n         remdups_adj xs ! (i + 1) = xs ! (j + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction xs arbitrary: i thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>j + 1 < length []; remdups_adj [] ! i = [] ! j;\n                    remdups_adj [] ! (i + 1) = [] ! (j + 1)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj []); 0 < length []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?j + 1 < length []; remdups_adj [] ! i = [] ! ?j;\n   remdups_adj [] ! (i + 1) = [] ! (?j + 1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i + 1 < length (remdups_adj [])\n  0 < length []\n\ngoal (2 subgoals):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>j + 1 < length []; remdups_adj [] ! i = [] ! j;\n                    remdups_adj [] ! (i + 1) = [] ! (j + 1)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj []); 0 < length []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence False"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j + 1 < length []; remdups_adj [] ! i = [] ! ?j;\n   remdups_adj [] ! (i + 1) = [] ! (?j + 1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i + 1 < length (remdups_adj [])\n  0 < length []\n\ngoal (1 subgoal):\n 1. False", "by (metis length_greater_0_conv)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>j.\n                   \\<lbrakk>j + 1 < length []; remdups_adj [] ! i = [] ! j;\n                    remdups_adj [] ! (i + 1) = [] ! (j + 1)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj []); 0 < length []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?j + 1 < length (x # xs);\n   remdups_adj (x # xs) ! i = (x # xs) ! ?j;\n   remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (?j + 1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i + 1 < length (remdups_adj (x # xs))\n  0 < length (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?j + 1 < length (x # xs);\n   remdups_adj (x # xs) ! i = (x # xs) ! ?j;\n   remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (?j + 1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i + 1 < length (remdups_adj (x # xs))\n  0 < length (x # xs)", "have \"xs \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?j + 1 < length (x # xs);\n   remdups_adj (x # xs) ! i = (x # xs) ! ?j;\n   remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (?j + 1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i + 1 < length (remdups_adj (x # xs))\n  0 < length (x # xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "obtain y xs' where xs: \"xs = y # xs'\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>y xs'. xs = y # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases xs) blast"], ["proof (state)\nthis:\n  xs = y # xs'\n\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>xs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "have lenxs:\"length xs > 0\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length xs", "by simp"], ["proof (state)\nthis:\n  0 < length xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from xs"], ["proof (chain)\npicking this:\n  xs = y # xs'", "have rem:\"remdups_adj (x # xs) = (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))\""], ["proof (prove)\nusing this:\n  xs = y # xs'\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) =\n    (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))", "using remdups_adj.simps(3)"], ["proof (prove)\nusing this:\n  xs = y # xs'\n  remdups_adj (?x # ?y # ?xs) =\n  (if ?x = ?y then remdups_adj (?x # ?xs) else ?x # remdups_adj (?y # ?xs))\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) =\n    (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))", "by auto"], ["proof (state)\nthis:\n  remdups_adj (x # xs) =\n  (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs i thesis.\n       \\<lbrakk>\\<And>i thesis.\n                   \\<lbrakk>\\<And>j.\n                               \\<lbrakk>j + 1 < length xs;\n                                remdups_adj xs ! i = xs ! j;\n                                remdups_adj xs ! (i + 1) =\n                                xs ! (j + 1)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>j.\n           \\<lbrakk>j + 1 < length (a # xs);\n            remdups_adj (a # xs) ! i = (a # xs) ! j;\n            remdups_adj (a # xs) ! (i + 1) = (a # xs) ! (j + 1)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        i + 1 < length (remdups_adj (a # xs)); 0 < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "with rem xs"], ["proof (chain)\npicking this:\n  remdups_adj (x # xs) =\n  (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))\n  xs = y # xs'\n  x = y", "have rem2:\"remdups_adj (x # xs) = remdups_adj xs\""], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) =\n  (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))\n  xs = y # xs'\n  x = y\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) = remdups_adj xs", "by auto"], ["proof (state)\nthis:\n  remdups_adj (x # xs) = remdups_adj xs\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "with Cons(3)"], ["proof (chain)\npicking this:\n  i + 1 < length (remdups_adj (x # xs))\n  remdups_adj (x # xs) = remdups_adj xs", "have \"i + 1 < length (remdups_adj xs)\""], ["proof (prove)\nusing this:\n  i + 1 < length (remdups_adj (x # xs))\n  remdups_adj (x # xs) = remdups_adj xs\n\ngoal (1 subgoal):\n 1. i + 1 < length (remdups_adj xs)", "by simp"], ["proof (state)\nthis:\n  i + 1 < length (remdups_adj xs)\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "with Cons.IH lenxs"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < length xs\n  i + 1 < length (remdups_adj xs)", "obtain k where j:\"k + 1 < length xs\" \"remdups_adj xs ! i = xs ! k\"\n        \"remdups_adj xs ! (i + 1) = xs ! (k + 1)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < length xs\n  i + 1 < length (remdups_adj xs)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k + 1 < length xs; remdups_adj xs ! i = xs ! k;\n         remdups_adj xs ! (i + 1) = xs ! (k + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  k + 1 < length xs\n  remdups_adj xs ! i = xs ! k\n  remdups_adj xs ! (i + 1) = xs ! (k + 1)\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "thus thesis"], ["proof (prove)\nusing this:\n  k + 1 < length xs\n  remdups_adj xs ! i = xs ! k\n  remdups_adj xs ! (i + 1) = xs ! (k + 1)\n\ngoal (1 subgoal):\n 1. thesis", "using Cons(2) rem2"], ["proof (prove)\nusing this:\n  k + 1 < length xs\n  remdups_adj xs ! i = xs ! k\n  remdups_adj xs ! (i + 1) = xs ! (k + 1)\n  \\<lbrakk>?j + 1 < length (x # xs);\n   remdups_adj (x # xs) ! i = (x # xs) ! ?j;\n   remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (?j + 1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  remdups_adj (x # xs) = remdups_adj xs\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "with rem xs"], ["proof (chain)\npicking this:\n  remdups_adj (x # xs) =\n  (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))\n  xs = y # xs'\n  x \\<noteq> y", "have rem2:\"remdups_adj (x # xs) = x # remdups_adj xs\""], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) =\n  (if x = y then remdups_adj (y # xs') else x # remdups_adj (y # xs'))\n  xs = y # xs'\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) = x # remdups_adj xs", "by auto"], ["proof (state)\nthis:\n  remdups_adj (x # xs) = x # remdups_adj xs\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"0 + 1 < length (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + 1 < length (x # xs)", "using lenxs"], ["proof (prove)\nusing this:\n  0 < length xs\n\ngoal (1 subgoal):\n 1. 0 + 1 < length (x # xs)", "by auto"], ["proof (state)\nthis:\n  0 + 1 < length (x # xs)\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  0 + 1 < length (x # xs)\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"remdups_adj (x # xs) ! i = (x # xs) ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "have \"remdups_adj (x # xs) ! i = (x # remdups_adj (y # xs')) ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # remdups_adj (y # xs')) ! 0", "using xs rem2 0"], ["proof (prove)\nusing this:\n  xs = y # xs'\n  remdups_adj (x # xs) = x # remdups_adj xs\n  i = 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # remdups_adj (y # xs')) ! 0", "by simp"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # remdups_adj (y # xs')) ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "also"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # remdups_adj (y # xs')) ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "have \"\\<dots> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # remdups_adj (y # xs')) ! 0 = x", "by simp"], ["proof (state)\nthis:\n  (x # remdups_adj (y # xs')) ! 0 = x\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "also"], ["proof (state)\nthis:\n  (x # remdups_adj (y # xs')) ! 0 = x\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "have \"\\<dots> = (x # xs) ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = (x # xs) ! 0", "by simp"], ["proof (state)\nthis:\n  x = (x # xs) ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "finally"], ["proof (chain)\npicking this:\n  remdups_adj (x # xs) ! i = (x # xs) ! 0", "show ?thesis"], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) ! i = (x # xs) ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! 0", "."], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # xs) ! 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # xs) ! 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # xs) ! 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "have \"remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj (y # xs')) ! 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj (y # xs')) ! 1", "using xs rem2 0"], ["proof (prove)\nusing this:\n  xs = y # xs'\n  remdups_adj (x # xs) = x # remdups_adj xs\n  i = 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj (y # xs')) ! 1", "by simp"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj (y # xs')) ! 1\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "also"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj (y # xs')) ! 1\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "have \"\\<dots> = remdups_adj (y # xs') ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # remdups_adj (y # xs')) ! 1 = remdups_adj (y # xs') ! 0", "by simp"], ["proof (state)\nthis:\n  (x # remdups_adj (y # xs')) ! 1 = remdups_adj (y # xs') ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "also"], ["proof (state)\nthis:\n  (x # remdups_adj (y # xs')) ! 1 = remdups_adj (y # xs') ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "have \"\\<dots> = (y # (remdups (y # xs'))) ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (y # xs') ! 0 = (y # remdups (y # xs')) ! 0", "by (metis nth_Cons' remdups_adj_Cons_alt)"], ["proof (state)\nthis:\n  remdups_adj (y # xs') ! 0 = (y # remdups (y # xs')) ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "also"], ["proof (state)\nthis:\n  remdups_adj (y # xs') ! 0 = (y # remdups (y # xs')) ! 0\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "have \"\\<dots> = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y # remdups (y # xs')) ! 0 = y", "by simp"], ["proof (state)\nthis:\n  (y # remdups (y # xs')) ! 0 = y\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "also"], ["proof (state)\nthis:\n  (y # remdups (y # xs')) ! 0 = y\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "have \"\\<dots> = (x # xs) ! (0 + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = (x # xs) ! (0 + 1)", "unfolding xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = (x # y # xs') ! (0 + 1)", "by simp"], ["proof (state)\nthis:\n  y = (x # xs) ! (0 + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "finally"], ["proof (chain)\npicking this:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "."], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  0 + 1 < length (x # xs)\n  remdups_adj (x # xs) ! i = (x # xs) ! 0\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)", "show thesis"], ["proof (prove)\nusing this:\n  0 + 1 < length (x # xs)\n  remdups_adj (x # xs) ! i = (x # xs) ! 0\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (0 + 1)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons.prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "case (Suc k)"], ["proof (state)\nthis:\n  i = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "with Cons(3)"], ["proof (chain)\npicking this:\n  i + 1 < length (remdups_adj (x # xs))\n  i = Suc k", "have \"k + 1 < length (remdups_adj (x # xs)) - 1\""], ["proof (prove)\nusing this:\n  i + 1 < length (remdups_adj (x # xs))\n  i = Suc k\n\ngoal (1 subgoal):\n 1. k + 1 < length (remdups_adj (x # xs)) - 1", "by auto"], ["proof (state)\nthis:\n  k + 1 < length (remdups_adj (x # xs)) - 1\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  k + 1 < length (remdups_adj (x # xs)) - 1\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"\\<dots> \\<le> length (remdups_adj xs) + 1 - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (remdups_adj (x # xs)) - 1 \\<le> length (remdups_adj xs) + 1 - 1", "by (metis One_nat_def le_refl list.size(4) rem2)"], ["proof (state)\nthis:\n  length (remdups_adj (x # xs)) - 1 \\<le> length (remdups_adj xs) + 1 - 1\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  length (remdups_adj (x # xs)) - 1 \\<le> length (remdups_adj xs) + 1 - 1\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"\\<dots> = length (remdups_adj xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (remdups_adj xs) + 1 - 1 = length (remdups_adj xs)", "by simp"], ["proof (state)\nthis:\n  length (remdups_adj xs) + 1 - 1 = length (remdups_adj xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "finally"], ["proof (chain)\npicking this:\n  k + 1 < length (remdups_adj xs)", "have \"k + 1 < length (remdups_adj xs)\""], ["proof (prove)\nusing this:\n  k + 1 < length (remdups_adj xs)\n\ngoal (1 subgoal):\n 1. k + 1 < length (remdups_adj xs)", "."], ["proof (state)\nthis:\n  k + 1 < length (remdups_adj xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "with Cons.IH lenxs"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < length xs\n  k + 1 < length (remdups_adj xs)", "obtain j where j:\"j + 1 < length xs\" \"remdups_adj xs ! k = xs ! j\"\n        \"remdups_adj xs ! (k + 1) = xs ! (j + 1)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>j + 1 < length xs; remdups_adj xs ! ?i = xs ! j;\n               remdups_adj xs ! (?i + 1) = xs ! (j + 1)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   ?i + 1 < length (remdups_adj xs); 0 < length xs\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < length xs\n  k + 1 < length (remdups_adj xs)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j + 1 < length xs; remdups_adj xs ! k = xs ! j;\n         remdups_adj xs ! (k + 1) = xs ! (j + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j + 1 < length xs\n  remdups_adj xs ! k = xs ! j\n  remdups_adj xs ! (k + 1) = xs ! (j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "from j(1)"], ["proof (chain)\npicking this:\n  j + 1 < length xs", "have \"Suc j + 1 < length (x # xs)\""], ["proof (prove)\nusing this:\n  j + 1 < length xs\n\ngoal (1 subgoal):\n 1. Suc j + 1 < length (x # xs)", "by simp"], ["proof (state)\nthis:\n  Suc j + 1 < length (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  Suc j + 1 < length (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"remdups_adj (x # xs) ! i = (x # xs) ! (Suc j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "have \"remdups_adj (x # xs) ! i = (x # remdups_adj xs) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # remdups_adj xs) ! i", "using rem2"], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) = x # remdups_adj xs\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # remdups_adj xs) ! i", "by simp"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # remdups_adj xs) ! i\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "also"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # remdups_adj xs) ! i\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "have \"\\<dots> = (remdups_adj xs) ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # remdups_adj xs) ! i = remdups_adj xs ! k", "using Suc"], ["proof (prove)\nusing this:\n  i = Suc k\n\ngoal (1 subgoal):\n 1. (x # remdups_adj xs) ! i = remdups_adj xs ! k", "by simp"], ["proof (state)\nthis:\n  (x # remdups_adj xs) ! i = remdups_adj xs ! k\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "also"], ["proof (state)\nthis:\n  (x # remdups_adj xs) ! i = remdups_adj xs ! k\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "have \"\\<dots> = xs ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj xs ! k = xs ! j", "using j(2)"], ["proof (prove)\nusing this:\n  remdups_adj xs ! k = xs ! j\n\ngoal (1 subgoal):\n 1. remdups_adj xs ! k = xs ! j", "."], ["proof (state)\nthis:\n  remdups_adj xs ! k = xs ! j\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "also"], ["proof (state)\nthis:\n  remdups_adj xs ! k = xs ! j\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "have \"\\<dots> = (x # xs) ! (Suc j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! j = (x # xs) ! Suc j", "by simp"], ["proof (state)\nthis:\n  xs ! j = (x # xs) ! Suc j\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "finally"], ["proof (chain)\npicking this:\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "show ?thesis"], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! i = (x # xs) ! Suc j", "."], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "have \"remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "have \"remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj xs) ! (i + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj xs) ! (i + 1)", "using rem2"], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) = x # remdups_adj xs\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj xs) ! (i + 1)", "by simp"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj xs) ! (i + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "also"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # remdups_adj xs) ! (i + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "have \"\\<dots> = (remdups_adj xs) ! (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # remdups_adj xs) ! (i + 1) = remdups_adj xs ! (k + 1)", "using Suc"], ["proof (prove)\nusing this:\n  i = Suc k\n\ngoal (1 subgoal):\n 1. (x # remdups_adj xs) ! (i + 1) = remdups_adj xs ! (k + 1)", "by simp"], ["proof (state)\nthis:\n  (x # remdups_adj xs) ! (i + 1) = remdups_adj xs ! (k + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "also"], ["proof (state)\nthis:\n  (x # remdups_adj xs) ! (i + 1) = remdups_adj xs ! (k + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "have \"\\<dots> = xs ! (j + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj xs ! (k + 1) = xs ! (j + 1)", "using j(3)"], ["proof (prove)\nusing this:\n  remdups_adj xs ! (k + 1) = xs ! (j + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj xs ! (k + 1) = xs ! (j + 1)", "."], ["proof (state)\nthis:\n  remdups_adj xs ! (k + 1) = xs ! (j + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "also"], ["proof (state)\nthis:\n  remdups_adj xs ! (k + 1) = xs ! (j + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "have \"\\<dots> = (x # xs) ! (Suc j + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! (j + 1) = (x # xs) ! (Suc j + 1)", "by simp"], ["proof (state)\nthis:\n  xs ! (j + 1) = (x # xs) ! (Suc j + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "finally"], ["proof (chain)\npicking this:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "."], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  Suc j + 1 < length (x # xs)\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)", "show thesis"], ["proof (prove)\nusing this:\n  Suc j + 1 < length (x # xs)\n  remdups_adj (x # xs) ! i = (x # xs) ! Suc j\n  remdups_adj (x # xs) ! (i + 1) = (x # xs) ! (Suc j + 1)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons.prems(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hd_remdups_adj[simp]: \"hd (remdups_adj xs) = hd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (remdups_adj xs) = hd xs", "by (induction xs rule: remdups_adj.induct) simp_all"], ["", "lemma remdups_adj_adjacent:\n  \"Suc i < length (remdups_adj xs) \\<Longrightarrow> remdups_adj xs ! i \\<noteq> remdups_adj xs ! Suc i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc i < length (remdups_adj xs) \\<Longrightarrow>\n    remdups_adj xs ! i \\<noteq> remdups_adj xs ! Suc i", "proof (induction xs arbitrary: i rule: remdups_adj.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       Suc i < length (remdups_adj []) \\<Longrightarrow>\n       remdups_adj [] ! i \\<noteq> remdups_adj [] ! Suc i\n 2. \\<And>x i.\n       Suc i < length (remdups_adj [x]) \\<Longrightarrow>\n       remdups_adj [x] ! i \\<noteq> remdups_adj [x] ! Suc i\n 3. \\<And>x y xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = y;\n                    Suc i < length (remdups_adj (x # xs))\\<rbrakk>\n                   \\<Longrightarrow> remdups_adj (x # xs) ! i \\<noteq>\n                                     remdups_adj (x # xs) ! Suc i;\n        \\<And>i.\n           \\<lbrakk>x \\<noteq> y;\n            Suc i < length (remdups_adj (y # xs))\\<rbrakk>\n           \\<Longrightarrow> remdups_adj (y # xs) ! i \\<noteq>\n                             remdups_adj (y # xs) ! Suc i;\n        Suc i < length (remdups_adj (x # y # xs))\\<rbrakk>\n       \\<Longrightarrow> remdups_adj (x # y # xs) ! i \\<noteq>\n                         remdups_adj (x # y # xs) ! Suc i", "case (3 x y xs i)"], ["proof (state)\nthis:\n  \\<lbrakk>x = y; Suc ?i < length (remdups_adj (x # xs))\\<rbrakk>\n  \\<Longrightarrow> remdups_adj (x # xs) ! ?i \\<noteq>\n                    remdups_adj (x # xs) ! Suc ?i\n  \\<lbrakk>x \\<noteq> y; Suc ?i < length (remdups_adj (y # xs))\\<rbrakk>\n  \\<Longrightarrow> remdups_adj (y # xs) ! ?i \\<noteq>\n                    remdups_adj (y # xs) ! Suc ?i\n  Suc i < length (remdups_adj (x # y # xs))\n\ngoal (3 subgoals):\n 1. \\<And>i.\n       Suc i < length (remdups_adj []) \\<Longrightarrow>\n       remdups_adj [] ! i \\<noteq> remdups_adj [] ! Suc i\n 2. \\<And>x i.\n       Suc i < length (remdups_adj [x]) \\<Longrightarrow>\n       remdups_adj [x] ! i \\<noteq> remdups_adj [x] ! Suc i\n 3. \\<And>x y xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = y;\n                    Suc i < length (remdups_adj (x # xs))\\<rbrakk>\n                   \\<Longrightarrow> remdups_adj (x # xs) ! i \\<noteq>\n                                     remdups_adj (x # xs) ! Suc i;\n        \\<And>i.\n           \\<lbrakk>x \\<noteq> y;\n            Suc i < length (remdups_adj (y # xs))\\<rbrakk>\n           \\<Longrightarrow> remdups_adj (y # xs) ! i \\<noteq>\n                             remdups_adj (y # xs) ! Suc i;\n        Suc i < length (remdups_adj (x # y # xs))\\<rbrakk>\n       \\<Longrightarrow> remdups_adj (x # y # xs) ! i \\<noteq>\n                         remdups_adj (x # y # xs) ! Suc i", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = y; Suc ?i < length (remdups_adj (x # xs))\\<rbrakk>\n  \\<Longrightarrow> remdups_adj (x # xs) ! ?i \\<noteq>\n                    remdups_adj (x # xs) ! Suc ?i\n  \\<lbrakk>x \\<noteq> y; Suc ?i < length (remdups_adj (y # xs))\\<rbrakk>\n  \\<Longrightarrow> remdups_adj (y # xs) ! ?i \\<noteq>\n                    remdups_adj (y # xs) ! Suc ?i\n  Suc i < length (remdups_adj (x # y # xs))\n\ngoal (1 subgoal):\n 1. remdups_adj (x # y # xs) ! i \\<noteq> remdups_adj (x # y # xs) ! Suc i", "by (cases i, cases \"x = y\") (simp, auto simp: hd_conv_nth[symmetric])"], ["proof (state)\nthis:\n  remdups_adj (x # y # xs) ! i \\<noteq> remdups_adj (x # y # xs) ! Suc i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       Suc i < length (remdups_adj []) \\<Longrightarrow>\n       remdups_adj [] ! i \\<noteq> remdups_adj [] ! Suc i\n 2. \\<And>x i.\n       Suc i < length (remdups_adj [x]) \\<Longrightarrow>\n       remdups_adj [x] ! i \\<noteq> remdups_adj [x] ! Suc i", "qed simp_all"], ["", "text \\<open>Intersecting each entry of a composition series with a normal subgroup of $G$ and removing\n  all adjacent duplicates yields another composition series.\\<close>"], ["", "lemma (in composition_series) intersect_normal:\n  assumes finite:\"finite (carrier G)\"\n  assumes KG:\"K \\<lhd> G\"\n  shows \"composition_series (G\\<lparr>carrier := K\\<rparr>) (remdups_adj (map (\\<lambda>H. K \\<inter> H) \\<GG>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := K\\<rparr>)\n     (remdups_adj (map ((\\<inter>) K) \\<GG>))", "unfolding composition_series_def composition_series_axioms_def normal_series_def normal_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Group.group (G\\<lparr>carrier := K\\<rparr>) \\<and>\n     (remdups_adj (map ((\\<inter>) K) \\<GG>) \\<noteq> [] \\<and>\n      hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n      {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}) \\<and>\n     last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n     carrier (G\\<lparr>carrier := K\\<rparr>) \\<and>\n     (\\<forall>i.\n         i + 1\n         < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<longrightarrow>\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n         \\<lparr>carrier := K,\n            carrier :=\n              remdups_adj (map ((\\<inter>) K) \\<GG>) !\n              (i + 1)\\<rparr>)) \\<and>\n    (\\<forall>i.\n        i + 1\n        < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<longrightarrow>\n        simple_group\n         (G\\<lparr>carrier := K,\n              carrier :=\n                remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n          remdups_adj (map ((\\<inter>) K) \\<GG>) ! i))", "apply (auto simp only: conjI del: equalityI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. Group.group (G\\<lparr>carrier := K\\<rparr>)\n 2. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 3. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 4. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 6. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. Group.group (G\\<lparr>carrier := K\\<rparr>)\n 2. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 3. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 4. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 6. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "show \"group (G\\<lparr>carrier := K\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := K\\<rparr>)", "using KG normal_imp_subgroup subgroup_imp_group"], ["proof (prove)\nusing this:\n  K \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H G \\<Longrightarrow>\n  Group.group (G\\<lparr>carrier := ?H\\<rparr>)\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := K\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := K\\<rparr>)\n\ngoal (5 subgoals):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 2. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 3. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "next\n  \\<comment> \\<open>Show, that removing adjacent duplicates doesn't result in an empty list.\\<close>"], ["proof (state)\ngoal (5 subgoals):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 2. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 3. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "assume \"remdups_adj (map ((\\<inter>) K) \\<GG>) = []\""], ["proof (state)\nthis:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) = []\n\ngoal (5 subgoals):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 2. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 3. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"map ((\\<inter>) K) \\<GG> = []\""], ["proof (prove)\nusing this:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) = []\n\ngoal (1 subgoal):\n 1. map ((\\<inter>) K) \\<GG> = []", "by (metis remdups_adj_Nil_iff)"], ["proof (state)\nthis:\n  map ((\\<inter>) K) \\<GG> = []\n\ngoal (5 subgoals):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 2. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 3. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<GG> = []\""], ["proof (prove)\nusing this:\n  map ((\\<inter>) K) \\<GG> = []\n\ngoal (1 subgoal):\n 1. \\<GG> = []", "by (metis Nil_is_map_conv)"], ["proof (state)\nthis:\n  \\<GG> = []\n\ngoal (5 subgoals):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) = [] \\<Longrightarrow> False\n 2. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 3. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 5. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "with notempty"], ["proof (chain)\npicking this:\n  \\<GG> \\<noteq> []\n  \\<GG> = []", "show False"], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  \\<GG> = []\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "next\n  \\<comment> \\<open>Show, that the head of the reduced list is still the trivial group\\<close>"], ["proof (state)\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<GG> = {\\<one>} # tl \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> = {\\<one>} # tl \\<GG>", "using notempty hd"], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  hd \\<GG> = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<GG> = {\\<one>} # tl \\<GG>", "by (metis list.sel(1,3) neq_Nil_conv)"], ["proof (state)\nthis:\n  \\<GG> = {\\<one>} # tl \\<GG>\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"map ((\\<inter>) K) \\<GG> = map ((\\<inter>) K) ({\\<one>} # tl \\<GG>)\""], ["proof (prove)\nusing this:\n  \\<GG> = {\\<one>} # tl \\<GG>\n\ngoal (1 subgoal):\n 1. map ((\\<inter>) K) \\<GG> = map ((\\<inter>) K) ({\\<one>} # tl \\<GG>)", "by simp"], ["proof (state)\nthis:\n  map ((\\<inter>) K) \\<GG> = map ((\\<inter>) K) ({\\<one>} # tl \\<GG>)\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"remdups_adj (map ((\\<inter>) K) \\<GG>) = remdups_adj ((K \\<inter> {\\<one>}) # (map ((\\<inter>) K) (tl \\<GG>)))\""], ["proof (prove)\nusing this:\n  map ((\\<inter>) K) \\<GG> = map ((\\<inter>) K) ({\\<one>} # tl \\<GG>)\n\ngoal (1 subgoal):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) =\n    remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>))", "by simp"], ["proof (state)\nthis:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) =\n  remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>))\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "also"], ["proof (state)\nthis:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) =\n  remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>))\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<dots> = (K \\<inter> {\\<one>}) # tl (remdups_adj ((K \\<inter> {\\<one>}) # (map ((\\<inter>) K) (tl \\<GG>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)) =\n    K \\<inter> {\\<one>} #\n    tl (remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)))", "by simp"], ["proof (state)\nthis:\n  remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)) =\n  K \\<inter> {\\<one>} #\n  tl (remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)))\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "finally"], ["proof (chain)\npicking this:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) =\n  K \\<inter> {\\<one>} #\n  tl (remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)))", "have \"hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K \\<inter> {\\<one>}\""], ["proof (prove)\nusing this:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) =\n  K \\<inter> {\\<one>} #\n  tl (remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)))\n\ngoal (1 subgoal):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K \\<inter> {\\<one>}", "using list.sel(1)"], ["proof (prove)\nusing this:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) =\n  K \\<inter> {\\<one>} #\n  tl (remdups_adj (K \\<inter> {\\<one>} # map ((\\<inter>) K) (tl \\<GG>)))\n  hd (?x21.0 # ?x22.0) = ?x21.0\n\ngoal (1 subgoal):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K \\<inter> {\\<one>}", "by metis"], ["proof (state)\nthis:\n  hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K \\<inter> {\\<one>}\n\ngoal (4 subgoals):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n 2. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 4. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "thus \"hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\""], ["proof (prove)\nusing this:\n  hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K \\<inter> {\\<one>}\n\ngoal (1 subgoal):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}", "using KG normal_imp_subgroup subgroup.one_closed"], ["proof (prove)\nusing this:\n  hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K \\<inter> {\\<one>}\n  K \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H ?G \\<Longrightarrow> \\<one>\\<^bsub>?G\\<^esub> \\<in> ?H\n\ngoal (1 subgoal):\n 1. hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}", "by force"], ["proof (state)\nthis:\n  hd (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := K\\<rparr>\\<^esub>}\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "next\n  \\<comment> \\<open>Show that the last entry is really @{text \"K \\<inter> G\"}. Since we don't have a lemma ready to talk about the\n    last entry of a reduced list, we reverse the list twice.\\<close>"], ["proof (state)\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"rev \\<GG> = (carrier G) # tl (rev \\<GG>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev \\<GG> = carrier G # tl (rev \\<GG>)", "by (metis list.sel(1,3) last last_rev neq_Nil_conv notempty rev_is_Nil_conv rev_rev_ident)"], ["proof (state)\nthis:\n  rev \\<GG> = carrier G # tl (rev \\<GG>)\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"rev (map ((\\<inter>) K) \\<GG>) = map ((\\<inter>) K) ((carrier G) # tl (rev \\<GG>))\""], ["proof (prove)\nusing this:\n  rev \\<GG> = carrier G # tl (rev \\<GG>)\n\ngoal (1 subgoal):\n 1. rev (map ((\\<inter>) K) \\<GG>) =\n    map ((\\<inter>) K) (carrier G # tl (rev \\<GG>))", "by (metis rev_map)"], ["proof (state)\nthis:\n  rev (map ((\\<inter>) K) \\<GG>) =\n  map ((\\<inter>) K) (carrier G # tl (rev \\<GG>))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence rev:\"rev (map ((\\<inter>) K) \\<GG>) = (K \\<inter> (carrier G)) # (map ((\\<inter>) K) (tl (rev \\<GG>)))\""], ["proof (prove)\nusing this:\n  rev (map ((\\<inter>) K) \\<GG>) =\n  map ((\\<inter>) K) (carrier G # tl (rev \\<GG>))\n\ngoal (1 subgoal):\n 1. rev (map ((\\<inter>) K) \\<GG>) =\n    K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))", "by simp"], ["proof (state)\nthis:\n  rev (map ((\\<inter>) K) \\<GG>) =\n  K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"last (remdups_adj (map ((\\<inter>) K) \\<GG>)) = hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>)))", "by (metis hd_rev map_is_Nil_conv notempty remdups_adj_Nil_iff)"], ["proof (state)\nthis:\n  last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n  hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>)))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "also"], ["proof (state)\nthis:\n  last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n  hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>)))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<dots> = hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>))) =\n    hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>)))", "by (metis remdups_adj_rev)"], ["proof (state)\nthis:\n  hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>))) =\n  hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>)))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "also"], ["proof (state)\nthis:\n  hd (rev (remdups_adj (map ((\\<inter>) K) \\<GG>))) =\n  hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>)))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<dots> = hd (remdups_adj ((K \\<inter> (carrier G)) # (map ((\\<inter>) K) (tl (rev \\<GG>)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>))) =\n    hd (remdups_adj\n         (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))))", "by (metis rev)"], ["proof (state)\nthis:\n  hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>))) =\n  hd (remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "also"], ["proof (state)\nthis:\n  hd (remdups_adj (rev (map ((\\<inter>) K) \\<GG>))) =\n  hd (remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<dots> = hd ((K \\<inter> (carrier G)) # (remdups_adj ((K \\<inter> (carrier G)) # (map ((\\<inter>) K) (tl (rev \\<GG>))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (remdups_adj\n         (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>)))) =\n    hd (K \\<inter> carrier G #\n        remdups_adj\n         (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))))", "by (metis list.sel(1) remdups_adj_Cons_alt)"], ["proof (state)\nthis:\n  hd (remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>)))) =\n  hd (K \\<inter> carrier G #\n      remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "also"], ["proof (state)\nthis:\n  hd (remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>)))) =\n  hd (K \\<inter> carrier G #\n      remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>))))\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<dots> = K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (K \\<inter> carrier G #\n        remdups_adj\n         (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>)))) =\n    K", "using KG normal_imp_subgroup subgroup.subset"], ["proof (prove)\nusing this:\n  K \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. hd (K \\<inter> carrier G #\n        remdups_adj\n         (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>)))) =\n    K", "by force"], ["proof (state)\nthis:\n  hd (K \\<inter> carrier G #\n      remdups_adj\n       (K \\<inter> carrier G # map ((\\<inter>) K) (tl (rev \\<GG>)))) =\n  K\n\ngoal (3 subgoals):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 3. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "finally"], ["proof (chain)\npicking this:\n  last (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K", "show \"last (remdups_adj (map ((\\<inter>) K) \\<GG>)) = carrier (G\\<lparr>carrier := K\\<rparr>)\""], ["proof (prove)\nusing this:\n  last (remdups_adj (map ((\\<inter>) K) \\<GG>)) = K\n\ngoal (1 subgoal):\n 1. last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n    carrier (G\\<lparr>carrier := K\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  last (remdups_adj (map ((\\<inter>) K) \\<GG>)) =\n  carrier (G\\<lparr>carrier := K\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "next\n  \\<comment> \\<open>The induction step, using the second isomorphism theorem for groups.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "assume j:\"j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\""], ["proof (state)\nthis:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have KGnotempty:\"(map ((\\<inter>) K) \\<GG>) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<inter>) K) \\<GG> \\<noteq> []", "using notempty"], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. map ((\\<inter>) K) \\<GG> \\<noteq> []", "by (metis Nil_is_map_conv)"], ["proof (state)\nthis:\n  map ((\\<inter>) K) \\<GG> \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "with j"], ["proof (chain)\npicking this:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n  map ((\\<inter>) K) \\<GG> \\<noteq> []", "obtain i where i:\"i + 1 < length (map ((\\<inter>) K) \\<GG>)\"\n    \"(remdups_adj (map ((\\<inter>) K) \\<GG>)) ! j = (map ((\\<inter>) K) \\<GG>) ! i\"\n    \"(remdups_adj (map ((\\<inter>) K) \\<GG>)) ! (j + 1) = (map ((\\<inter>) K) \\<GG>) ! (i + 1)\""], ["proof (prove)\nusing this:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n  map ((\\<inter>) K) \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) K) \\<GG>);\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n         map ((\\<inter>) K) \\<GG> ! i;\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n         map ((\\<inter>) K) \\<GG> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using remdups_adj_obtain_adjacency"], ["proof (prove)\nusing this:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n  map ((\\<inter>) K) \\<GG> \\<noteq> []\n  \\<lbrakk>?i + 1 < length (remdups_adj ?xs); 0 < length ?xs;\n   \\<And>j.\n      \\<lbrakk>j + 1 < length ?xs; remdups_adj ?xs ! ?i = ?xs ! j;\n       remdups_adj ?xs ! (?i + 1) = ?xs ! (j + 1)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) K) \\<GG>);\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n         map ((\\<inter>) K) \\<GG> ! i;\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n         map ((\\<inter>) K) \\<GG> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j = map ((\\<inter>) K) \\<GG> ! i\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n  map ((\\<inter>) K) \\<GG> ! (i + 1)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from i(1)"], ["proof (chain)\npicking this:\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)", "have i':\"i + 1 < length \\<GG>\""], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n\ngoal (1 subgoal):\n 1. i + 1 < length \\<GG>", "by (metis length_map)"], ["proof (state)\nthis:\n  i + 1 < length \\<GG>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence GiSi:\"\\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by (metis normal)"], ["proof (state)\nthis:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence GiSi':\"\\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)", "using normal_imp_subgroup subgroup.subset"], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)", "by force"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from i'"], ["proof (chain)\npicking this:\n  i + 1 < length \\<GG>", "have finGSi:\"finite (\\<GG> ! (i + 1))\""], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. finite (\\<GG> ! (i + 1))", "using  normal_series_subgroups finite"], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. finite (\\<GG> ! (i + 1))", "by (metis subgroup_finite)"], ["proof (state)\nthis:\n  finite (\\<GG> ! (i + 1))\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from GiSi KG i' normal_series_subgroups"], ["proof (chain)\npicking this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<lhd> G\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G", "have GSiKnormGSi:\"\\<GG> ! (i + 1) \\<inter> K \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<lhd> G\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n\ngoal (1 subgoal):\n 1. \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "using second_isomorphism_grp.normal_subgrp_intersection_normal"], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<lhd> G\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  ?S \\<inter> ?H \\<lhd> ?G\\<lparr>carrier := ?S\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def"], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<lhd> G\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?S \\<inter> ?H \\<lhd> ?G\\<lparr>carrier := ?S\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "with GiSi"], ["proof (chain)\npicking this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "have \"\\<GG> ! i \\<inter> (\\<GG> ! (i + 1) \\<inter> K) \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<inter> (\\<GG> ! (i + 1) \\<inter> K) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by (metis group.normal_subgroup_intersect group.subgroup_imp_group i' is_group is_normal_series normal_series.normal_series_subgroups)"], ["proof (state)\nthis:\n  \\<GG> ! i \\<inter> (\\<GG> ! (i + 1) \\<inter> K) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"K \\<inter> (\\<GG> ! i \\<inter> \\<GG> ! (i + 1)) \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<inter> (\\<GG> ! (i + 1) \\<inter> K) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. K \\<inter> (\\<GG> ! i \\<inter> \\<GG> ! (i + 1)) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by (metis inf_commute inf_left_commute)"], ["proof (state)\nthis:\n  K \\<inter> (\\<GG> ! i \\<inter> \\<GG> ! (i + 1)) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence KGinormGSi:\"K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  K \\<inter> (\\<GG> ! i \\<inter> \\<GG> ! (i + 1)) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "using GiSi'"], ["proof (prove)\nusing this:\n  K \\<inter> (\\<GG> ! i \\<inter> \\<GG> ! (i + 1)) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by (metis le_iff_inf)"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "moreover"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)", "using GiSi'"], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)", "by auto"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "moreover"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have groupGSi:\"group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "using i normal_series_subgroups subgroup_imp_group"], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j = map ((\\<inter>) K) \\<GG> ! i\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n  map ((\\<inter>) K) \\<GG> ! (i + 1)\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  subgroup ?H G \\<Longrightarrow>\n  Group.group (G\\<lparr>carrier := ?H\\<rparr>)\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "moreover"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have subKGSiGSi:\"subgroup (K \\<inter> \\<GG> ! (i + 1)) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup (K \\<inter> \\<GG> ! (i + 1))\n     (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "by (metis GSiKnormGSi inf_sup_aci(1) normal_imp_subgroup)"], ["proof (state)\nthis:\n  subgroup (K \\<inter> \\<GG> ! (i + 1))\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "ultimately"], ["proof (chain)\npicking this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)\n  Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  subgroup (K \\<inter> \\<GG> ! (i + 1))\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "have fstgoal:\"K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1), carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)\n  Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  subgroup (K \\<inter> \\<GG> ! (i + 1))\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1),\n       carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>", "using group.normal_restrict_supergroup"], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  K \\<inter> \\<GG> ! i \\<subseteq> K \\<inter> \\<GG> ! (i + 1)\n  Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  subgroup (K \\<inter> \\<GG> ! (i + 1))\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  \\<lbrakk>Group.group ?G; subgroup ?S ?G; ?N \\<lhd> ?G;\n   ?N \\<subseteq> ?S\\<rbrakk>\n  \\<Longrightarrow> ?N \\<lhd> ?G\\<lparr>carrier := ?S\\<rparr>\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1),\n       carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>", "by force"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       remdups_adj (map ((\\<inter>) K) \\<GG>) ! i \\<lhd> G\n       \\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr>\n 2. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "thus \"remdups_adj (map ((\\<inter>) K) \\<GG>) ! j \\<lhd> G\\<lparr>carrier := K, carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) ! j \\<lhd> G\n    \\<lparr>carrier := K,\n       carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr>", "using i"], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j = map ((\\<inter>) K) \\<GG> ! i\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n  map ((\\<inter>) K) \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) ! j \\<lhd> G\n    \\<lparr>carrier := K,\n       carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j \\<lhd> G\n  \\<lparr>carrier := K,\n     carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from simplefact"], ["proof (chain)\npicking this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)", "have Gisimple:\"simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)", "using i'"], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)", "by simp"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence Gimax:\"max_normal_subgroup (\\<GG> ! i) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<GG> ! i)\n     (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "using normal.max_normal_simple_quotient GiSi finGSi"], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n  \\<lbrakk>?H \\<lhd> ?G; finite (carrier ?G)\\<rbrakk>\n  \\<Longrightarrow> max_normal_subgroup ?H ?G = simple_group (?G Mod ?H)\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  finite (\\<GG> ! (i + 1))\n\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<GG> ! i)\n     (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)", "by force"], ["proof (state)\nthis:\n  max_normal_subgroup (\\<GG> ! i)\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from GSiKnormGSi GiSi"], ["proof (chain)\npicking this:\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "have \"\\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub> \\<GG> ! (i + 1) \\<inter> K \\<lhd> (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n    \\<GG> ! (i + 1) \\<inter> K \\<lhd>\n    G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "using groupGSi group.normal_subgroup_set_mult_closed set_mult_consistent"], ["proof (prove)\nusing this:\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  Group.group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  \\<lbrakk>Group.group ?G; ?M \\<lhd> ?G; ?N \\<lhd> ?G\\<rbrakk>\n  \\<Longrightarrow> ?M <#>\\<^bsub>?G\\<^esub> ?N \\<lhd> ?G\n  ?N <#>\\<^bsub>?G\\<lparr>carrier := ?H\\<rparr>\\<^esub> ?K =\n  ?N <#>\\<^bsub>?G\\<^esub> ?K\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n    \\<GG> ! (i + 1) \\<inter> K \\<lhd>\n    G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd>\n  G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<GG> ! i <#> \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n  \\<GG> ! (i + 1) \\<inter> K \\<lhd>\n  G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "unfolding set_mult_def"], ["proof (prove)\nusing this:\n  (\\<Union>h\\<in>\\<GG> ! i.\n      \\<Union>k\\<in>\\<GG> ! (i + 1) \\<inter> K.\n         {h \\<otimes>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n          k}) \\<lhd>\n  G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<Union>h\\<in>\\<GG> ! i.\n        \\<Union>k\\<in>\\<GG> ! (i + 1) \\<inter> K. {h \\<otimes> k}) \\<lhd>\n    G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i <#> \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> ! i <#> \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "using inf_commute"], ["proof (prove)\nusing this:\n  \\<GG> ! i <#> \\<GG> ! (i + 1) \\<inter> K \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  inf ?x ?y = inf ?y ?x\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>", "by metis"], ["proof (state)\nthis:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "moreover"], ["proof (state)\nthis:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "have \"\\<GG> ! i \\<subseteq> \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub> K \\<inter> \\<GG> ! (i + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! i\n    \\<subseteq> \\<GG> !\n                i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                K \\<inter> \\<GG> ! (i + 1)", "using second_isomorphism_grp.H_contained_in_set_mult"], ["proof (prove)\nusing this:\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n\ngoal (1 subgoal):\n 1. \\<GG> ! i\n    \\<subseteq> \\<GG> !\n                i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                K \\<inter> \\<GG> ! (i + 1)", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n\ngoal (1 subgoal):\n 1. \\<GG> ! i\n    \\<subseteq> \\<GG> !\n                i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                K \\<inter> \\<GG> ! (i + 1)", "using subKGSiGSi GiSi normal_imp_subgroup"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  subgroup (K \\<inter> \\<GG> ! (i + 1))\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! i\n    \\<subseteq> \\<GG> !\n                i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                K \\<inter> \\<GG> ! (i + 1)", "by fastforce"], ["proof (state)\nthis:\n  \\<GG> ! i\n  \\<subseteq> \\<GG> !\n              i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n              K \\<inter> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\""], ["proof (prove)\nusing this:\n  \\<GG> ! i\n  \\<subseteq> \\<GG> !\n              i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n              K \\<inter> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)", "unfolding set_mult_def"], ["proof (prove)\nusing this:\n  \\<GG> ! i\n  \\<subseteq> (\\<Union>h\\<in>\\<GG> ! i.\n                  \\<Union>k\\<in>K \\<inter> \\<GG> ! (i + 1).\n                     {h \\<otimes>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                      k})\n\ngoal (1 subgoal):\n 1. \\<GG> ! i\n    \\<subseteq> (\\<Union>h\\<in>\\<GG> ! i.\n                    \\<Union>k\\<in>K \\<inter> \\<GG> ! (i + 1).\n                       {h \\<otimes> k})", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)", "have KGdisj:\"\\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)\""], ["proof (prove)\nusing this:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or>\n    \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)", "using Gimax"], ["proof (prove)\nusing this:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\n  max_normal_subgroup (\\<GG> ! i)\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or>\n    \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)", "unfolding max_normal_subgroup_def max_normal_subgroup_axioms_def"], ["proof (prove)\nusing this:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  \\<GG> ! i \\<subseteq> \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> \\<and>\n  \\<GG> ! i \\<noteq>\n  carrier (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>) \\<and>\n  (\\<forall>J.\n      J \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> \\<longrightarrow>\n      J \\<noteq> \\<GG> ! i \\<longrightarrow>\n      J \\<noteq>\n      carrier\n       (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>) \\<longrightarrow>\n      \\<not> \\<GG> ! i \\<subseteq> J)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or>\n    \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or>\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "obtain \\<phi> where \"\\<phi> \\<in> iso  (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (\\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1))))\n             (G\\<lparr>carrier := \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1)))\n               (G\\<lparr>carrier :=\n                           \\<GG> !\n                           i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                           K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using second_isomorphism_grp.normal_intersection_quotient_isom"], ["proof (prove)\nusing this:\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1)))\n               (G\\<lparr>carrier :=\n                           \\<GG> !\n                           i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                           K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1)))\n               (G\\<lparr>carrier :=\n                           \\<GG> !\n                           i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                           K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using GiSi subKGSiGSi normal_imp_subgroup"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n  \\<GG> ! i \\<lhd> G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\n  subgroup (K \\<inter> \\<GG> ! (i + 1))\n   (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>)\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1)))\n               (G\\<lparr>carrier :=\n                           \\<GG> !\n                           i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                           K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                \\<GG> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1)))\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<phi> \\<in> iso  (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! (i + 1) \\<inter> \\<GG> ! i))\n                  (G\\<lparr>carrier := \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i \\<inter> (K \\<inter> \\<GG> ! (i + 1)))\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> \\<GG> ! (i + 1) \\<inter> \\<GG> ! i)\n           (G\\<lparr>carrier :=\n                       \\<GG> !\n                       i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                       K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            \\<GG> ! i)", "by (metis inf_commute)"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! (i + 1) \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<phi> \\<in> iso (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> (\\<GG> ! (i + 1) \\<inter> \\<GG> ! i)))\n                 (G\\<lparr>carrier := \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! (i + 1) \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> (\\<GG> ! (i + 1) \\<inter> \\<GG> ! i))\n           (G\\<lparr>carrier :=\n                       \\<GG> !\n                       i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                       K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            \\<GG> ! i)", "by (metis Int_assoc)"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> (\\<GG> ! (i + 1) \\<inter> \\<GG> ! i))\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \"\\<phi> \\<in> iso (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i))\n                 (G\\<lparr>carrier := \\<GG> ! i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> (\\<GG> ! (i + 1) \\<inter> \\<GG> ! i))\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> \\<GG> ! i)\n           (G\\<lparr>carrier :=\n                       \\<GG> !\n                       i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                       K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            \\<GG> ! i)", "by (metis GiSi' Int_absorb2 Int_commute)"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "hence \\<phi>:\"\\<phi> \\<in> iso (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i))\n                   (G\\<lparr>carrier := \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> !\n                     i <#>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                     K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> \\<GG> ! i)\n           (G\\<lparr>carrier :=\n                       \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            \\<GG> ! i)", "unfolding set_mult_def"], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<Union>h\\<in>\\<GG> ! i.\n                        \\<Union>k\\<in>K \\<inter> \\<GG> ! (i + 1).\n                           {h \\<otimes>\\<^bsub>G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr>\\<^esub>\n                            k}\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> \\<GG> ! i)\n           (G\\<lparr>carrier :=\n                       \\<Union>h\\<in>\\<GG> ! i.\n                          \\<Union>k\\<in>K \\<inter> \\<GG> ! (i + 1).\n                             {h \\<otimes> k}\\<rparr> Mod\n            \\<GG> ! i)", "by auto"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from fstgoal"], ["proof (chain)\npicking this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>", "have KGsiKGigroup:\"group (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i))\""], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. Group.group\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i)", "using normal.factorgroup_is_group"], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n  ?H \\<lhd> ?G \\<Longrightarrow> Group.group (?G Mod ?H)\n\ngoal (1 subgoal):\n 1. Group.group\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i)", "by auto"], ["proof (state)\nthis:\n  Group.group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i + 1\n       < length (remdups_adj (map ((\\<inter>) K) \\<GG>)) \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := K,\n             carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! (i + 1)\\<rparr> Mod\n         remdups_adj (map ((\\<inter>) K) \\<GG>) ! i)", "from KGdisj"], ["proof (chain)\npicking this:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or>\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)", "show \"simple_group (G\\<lparr>carrier := K, carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr> Mod remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\""], ["proof (prove)\nusing this:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! i \\<or>\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1) = \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := K,\n          carrier :=\n            remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "proof auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "have groupGi:\"group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "using i' normal_series_subgroups subgroup_imp_group"], ["proof (prove)\nusing this:\n  i + 1 < length \\<GG>\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  subgroup ?H G \\<Longrightarrow>\n  Group.group (G\\<lparr>carrier := ?H\\<rparr>)\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "assume \"\\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i\""], ["proof (state)\nthis:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "with \\<phi>"], ["proof (chain)\npicking this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i", "have \"\\<phi> \\<in> iso (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)) (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> \\<GG> ! i)\n           (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)", "by auto"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "moreover"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "obtain \\<psi> where \"\\<psi> \\<in> iso (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod (carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))) (G\\<lparr>carrier := {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<psi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod\n                carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))\n               (G\\<lparr>carrier :=\n                           {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using group.self_factor_iso groupGi"], ["proof (prove)\nusing this:\n  Group.group ?G \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((\\<lambda>x. \\<one>\\<^bsub>?G\\<^esub>) ` X))\n  \\<in> Group.iso (?G Mod carrier ?G)\n         (?G\\<lparr>carrier := {\\<one>\\<^bsub>?G\\<^esub>}\\<rparr>)\n  Group.group (G\\<lparr>carrier := \\<GG> ! i\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<psi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod\n                carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))\n               (G\\<lparr>carrier :=\n                           {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  \\<psi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod\n          carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))\n         (G\\<lparr>carrier :=\n                     {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)\n  \\<psi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod\n          carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))\n         (G\\<lparr>carrier :=\n                     {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>)", "obtain \\<pi> where \"\\<pi> \\<in> iso (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)) (G\\<lparr>carrier := {\\<one>}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)\n  \\<psi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod\n          carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))\n         (G\\<lparr>carrier :=\n                     {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<pi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                K \\<inter> \\<GG> ! i)\n               (G\\<lparr>carrier := {\\<one>}\\<rparr>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using iso_set_trans"], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod \\<GG> ! i)\n  \\<psi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! i\\<rparr> Mod\n          carrier (G\\<lparr>carrier := \\<GG> ! i\\<rparr>))\n         (G\\<lparr>carrier :=\n                     {\\<one>\\<^bsub>G\\<lparr>carrier := \\<GG> ! i\\<rparr>\\<^esub>}\\<rparr>)\n  \\<lbrakk>?h \\<in> Group.iso ?G ?H; ?i \\<in> Group.iso ?H ?I\\<rbrakk>\n  \\<Longrightarrow> ?i \\<circ> ?h \\<in> Group.iso ?G ?I\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<pi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                K \\<inter> \\<GG> ! i)\n               (G\\<lparr>carrier := {\\<one>}\\<rparr>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<pi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "hence \"order (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)) = order (G\\<lparr>carrier := {\\<one>}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<pi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. order\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i) =\n    order (G\\<lparr>carrier := {\\<one>}\\<rparr>)", "by (metis iso_order_closed)"], ["proof (state)\nthis:\n  order\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  order (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "hence \"order (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)) = 1\""], ["proof (prove)\nusing this:\n  order\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  order (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. order\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i) =\n    1", "unfolding order_def"], ["proof (prove)\nusing this:\n  card\n   (carrier\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i)) =\n  card (carrier (G\\<lparr>carrier := {\\<one>}\\<rparr>))\n\ngoal (1 subgoal):\n 1. card\n     (carrier\n       (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n        K \\<inter> \\<GG> ! i)) =\n    1", "by auto"], ["proof (state)\nthis:\n  order\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  1\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "hence \"carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)) = {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)\\<^esub>}\""], ["proof (prove)\nusing this:\n  order\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  1\n\ngoal (1 subgoal):\n 1. carrier\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod K \\<inter> \\<GG> ! i\\<^esub>}", "using group.order_one_triv_iff KGsiKGigroup"], ["proof (prove)\nusing this:\n  order\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  1\n  Group.group ?G \\<Longrightarrow>\n  (order ?G = 1) = (carrier ?G = {\\<one>\\<^bsub>?G\\<^esub>})\n  Group.group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. carrier\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i) =\n    {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod K \\<inter> \\<GG> ! i\\<^esub>}", "by blast"], ["proof (state)\nthis:\n  carrier\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod K \\<inter> \\<GG> ! i\\<^esub>}\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "moreover"], ["proof (state)\nthis:\n  carrier\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod K \\<inter> \\<GG> ! i\\<^esub>}\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "from fstgoal"], ["proof (chain)\npicking this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>", "have \"K \\<inter> \\<GG> ! i \\<lhd> G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\""], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (i + 1),\n     carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i \\<lhd> G\n    \\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "moreover"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "from finGSi"], ["proof (chain)\npicking this:\n  finite (\\<GG> ! (i + 1))", "have \"finite (carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>))\""], ["proof (prove)\nusing this:\n  finite (\\<GG> ! (i + 1))\n\ngoal (1 subgoal):\n 1. finite\n     (carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>))", "by auto"], ["proof (state)\nthis:\n  finite (carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>))\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "ultimately"], ["proof (chain)\npicking this:\n  carrier\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod K \\<inter> \\<GG> ! i\\<^esub>}\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n  finite (carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>))", "have \"K \\<inter> \\<GG> ! i = carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  carrier\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod K \\<inter> \\<GG> ! i\\<^esub>}\n  K \\<inter> \\<GG> ! i \\<lhd> G\n  \\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>\n  finite (carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>))\n\ngoal (1 subgoal):\n 1. K \\<inter> \\<GG> ! i =\n    carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>)", "by (metis normal.fact_group_trivial_iff)"], ["proof (state)\nthis:\n  K \\<inter> \\<GG> ! i =\n  carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "hence \"(remdups_adj (map ((\\<inter>) K) \\<GG>)) ! j = (remdups_adj (map ((\\<inter>) K) \\<GG>)) ! (j + 1)\""], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i =\n  carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>)\n\ngoal (1 subgoal):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n    remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)", "using i"], ["proof (prove)\nusing this:\n  K \\<inter> \\<GG> ! i =\n  carrier (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr>)\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j = map ((\\<inter>) K) \\<GG> ! i\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n  map ((\\<inter>) K) \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n    remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)", "by auto"], ["proof (state)\nthis:\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "with j"], ["proof (chain)\npicking this:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)", "have False"], ["proof (prove)\nusing this:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\n\ngoal (1 subgoal):\n 1. False", "using remdups_adj_adjacent KGnotempty Suc_eq_plus1"], ["proof (prove)\nusing this:\n  j + 1 < length (remdups_adj (map ((\\<inter>) K) \\<GG>))\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j =\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\n  Suc ?i < length (remdups_adj ?xs) \\<Longrightarrow>\n  remdups_adj ?xs ! ?i \\<noteq> remdups_adj ?xs ! Suc ?i\n  map ((\\<inter>) K) \\<GG> \\<noteq> []\n  Suc ?n = ?n + 1\n\ngoal (1 subgoal):\n 1. False", "by metis"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n 2. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "thus \"simple_group (G\\<lparr>carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\""], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", ".."], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n    remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "assume \"\\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i\""], ["proof (state)\nthis:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "moreover"], ["proof (state)\nthis:\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "with \\<phi>"], ["proof (chain)\npicking this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i", "have \"\\<phi> \\<in> iso (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i)) (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier :=\n                     \\<GG> ! i <#> K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          \\<GG> ! i)\n  \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso\n           (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n            K \\<inter> \\<GG> ! i)\n           (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)", "by auto"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "then"], ["proof (chain)\npicking this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)", "obtain \\<phi>' where \"\\<phi>' \\<in> iso (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i) (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i))\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>'.\n        \\<phi>'\n        \\<in> Group.iso\n               (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                K \\<inter> \\<GG> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using KGsiKGigroup group.iso_set_sym"], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n  Group.group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n  \\<lbrakk>Group.group ?G; ?h \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> inv_into (carrier ?G) ?h \\<in> Group.iso ?H ?G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>'.\n        \\<phi>'\n        \\<in> Group.iso\n               (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n               (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n                K \\<inter> \\<GG> ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<phi>'\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "with Gisimple KGsiKGigroup"], ["proof (chain)\npicking this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n  Group.group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n  \\<phi>'\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)", "have \"simple_group (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod (K \\<inter> \\<GG> ! i))\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n  Group.group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n  \\<phi>'\n  \\<in> Group.iso\n         (G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n         (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n          K \\<inter> \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n      K \\<inter> \\<GG> ! i)", "by (metis simple_group.iso_simple)"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. \\<GG> ! i <#> K \\<inter> \\<GG> ! Suc i = \\<GG> ! Suc i \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "with i"], ["proof (chain)\npicking this:\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j = map ((\\<inter>) K) \\<GG> ! i\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n  map ((\\<inter>) K) \\<GG> ! (i + 1)\n  simple_group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)", "show \"simple_group (G\\<lparr>carrier := remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\""], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) K) \\<GG>)\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! j = map ((\\<inter>) K) \\<GG> ! i\n  remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1) =\n  map ((\\<inter>) K) \\<GG> ! (i + 1)\n  simple_group\n   (G\\<lparr>carrier := K \\<inter> \\<GG> ! (i + 1)\\<rparr> Mod\n    K \\<inter> \\<GG> ! i)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier :=\n                 remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n      remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier :=\n               remdups_adj (map ((\\<inter>) K) \\<GG>) ! Suc j\\<rparr> Mod\n    remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := K,\n        carrier :=\n          remdups_adj (map ((\\<inter>) K) \\<GG>) ! (j + 1)\\<rparr> Mod\n    remdups_adj (map ((\\<inter>) K) \\<GG>) ! j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) composition_series_extend:\n  assumes \"composition_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\"\n  assumes \"simple_group (G Mod H)\" \"H \\<lhd> G\"\n  shows \"composition_series G (\\<HH> @ [carrier G])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series G (\\<HH> @ [carrier G])", "unfolding composition_series_def composition_series_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G]) \\<and>\n    (\\<forall>i.\n        i + 1 < length (\\<HH> @ [carrier G]) \\<longrightarrow>\n        simple_group\n         (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! (i + 1)\\<rparr> Mod\n          (\\<HH> @ [carrier G]) ! i))", "proof auto"], ["proof (state)\ngoal (2 subgoals):\n 1. normal_series G (\\<HH> @ [carrier G])\n 2. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n         (\\<HH> @ [carrier G]) ! i)", "from assms(1)"], ["proof (chain)\npicking this:\n  composition_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>", "interpret comp\\<HH>: composition_series \"G\\<lparr>carrier := H\\<rparr>\" \\<HH>"], ["proof (prove)\nusing this:\n  composition_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>", "."], ["proof (state)\ngoal (2 subgoals):\n 1. normal_series G (\\<HH> @ [carrier G])\n 2. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n         (\\<HH> @ [carrier G]) ! i)", "show \"normal_series G (\\<HH> @ [carrier G])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "using  assms(3) comp\\<HH>.is_normal_series"], ["proof (prove)\nusing this:\n  H \\<lhd> G\n  normal_series (G\\<lparr>carrier := H\\<rparr>) \\<HH>\n\ngoal (1 subgoal):\n 1. normal_series G (\\<HH> @ [carrier G])", "by (metis normal_series_extend)"], ["proof (state)\nthis:\n  normal_series G (\\<HH> @ [carrier G])\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n         (\\<HH> @ [carrier G]) ! i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n         (\\<HH> @ [carrier G]) ! i)", "assume i:\"i < length \\<HH>\""], ["proof (state)\nthis:\n  i < length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length \\<HH> \\<Longrightarrow>\n       simple_group\n        (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n         (\\<HH> @ [carrier G]) ! i)", "show \"simple_group (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod (\\<HH> @ [carrier G]) ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "proof (cases \"i = length \\<HH> - 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)\n 2. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "case True"], ["proof (state)\nthis:\n  i = length \\<HH> - 1\n\ngoal (2 subgoals):\n 1. i = length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)\n 2. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "hence \"(\\<HH> @ [carrier G]) ! Suc i = carrier G\""], ["proof (prove)\nusing this:\n  i = length \\<HH> - 1\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! Suc i = carrier G", "by (metis i diff_Suc_1 lessE nth_append_length)"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! Suc i = carrier G\n\ngoal (2 subgoals):\n 1. i = length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)\n 2. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "moreover"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! Suc i = carrier G\n\ngoal (2 subgoals):\n 1. i = length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)\n 2. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "have \"(\\<HH> @ [carrier G]) ! i = \\<HH> ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = \\<HH> ! i", "by (metis butlast_snoc i nth_butlast)"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n\ngoal (2 subgoals):\n 1. i = length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)\n 2. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "hence \"(\\<HH> @ [carrier G]) ! i = H\""], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = H", "using True last_conv_nth comp\\<HH>.notempty comp\\<HH>.last"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n  i = length \\<HH> - 1\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  \\<HH> \\<noteq> []\n  last \\<HH> = carrier (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = H", "by auto"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = H\n\ngoal (2 subgoals):\n 1. i = length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)\n 2. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<HH> @ [carrier G]) ! Suc i = carrier G\n  (\\<HH> @ [carrier G]) ! i = H", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! Suc i = carrier G\n  (\\<HH> @ [carrier G]) ! i = H\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! Suc i = carrier G\n  (\\<HH> @ [carrier G]) ! i = H\n  simple_group (G Mod H)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n    (\\<HH> @ [carrier G]) ! i)\n\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> length \\<HH> - 1\n\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "hence \"Suc i < length \\<HH>\""], ["proof (prove)\nusing this:\n  i \\<noteq> length \\<HH> - 1\n\ngoal (1 subgoal):\n 1. Suc i < length \\<HH>", "using i"], ["proof (prove)\nusing this:\n  i \\<noteq> length \\<HH> - 1\n  i < length \\<HH>\n\ngoal (1 subgoal):\n 1. Suc i < length \\<HH>", "by auto"], ["proof (state)\nthis:\n  Suc i < length \\<HH>\n\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "hence \"(\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i\""], ["proof (prove)\nusing this:\n  Suc i < length \\<HH>\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i", "using nth_append"], ["proof (prove)\nusing this:\n  Suc i < length \\<HH>\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i", "by metis"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "moreover"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "from i"], ["proof (chain)\npicking this:\n  i < length \\<HH>", "have \"(\\<HH> @ [carrier G]) ! i = \\<HH> ! i\""], ["proof (prove)\nusing this:\n  i < length \\<HH>\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = \\<HH> ! i", "using nth_append"], ["proof (prove)\nusing this:\n  i < length \\<HH>\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n\ngoal (1 subgoal):\n 1. (\\<HH> @ [carrier G]) ! i = \\<HH> ! i", "by metis"], ["proof (state)\nthis:\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length \\<HH> - 1 \\<Longrightarrow>\n    simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "using \\<open>Suc i < length \\<HH>\\<close> comp\\<HH>.simplefact"], ["proof (prove)\nusing this:\n  (\\<HH> @ [carrier G]) ! Suc i = \\<HH> ! Suc i\n  (\\<HH> @ [carrier G]) ! i = \\<HH> ! i\n  Suc i < length \\<HH>\n  ?i + 1 < length \\<HH> \\<Longrightarrow>\n  simple_group\n   (G\\<lparr>carrier := H, carrier := \\<HH> ! (?i + 1)\\<rparr> Mod\n    \\<HH> ! ?i)\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n      (\\<HH> @ [carrier G]) ! i)", "by auto"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n    (\\<HH> @ [carrier G]) ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := (\\<HH> @ [carrier G]) ! Suc i\\<rparr> Mod\n    (\\<HH> @ [carrier G]) ! i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in composition_series) entries_mono:\n  assumes \"i \\<le> j\" \"j < length \\<GG>\"\n  shows \"\\<GG> ! i \\<subseteq> \\<GG> ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! j", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> j\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! j", "proof (induction \"j - i\" arbitrary: i j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>0 = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j\n 2. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "case 0"], ["proof (state)\nthis:\n  0 = j - i\n  i \\<le> j\n  j < length \\<GG>\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>0 = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j\n 2. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "hence \"i = j\""], ["proof (prove)\nusing this:\n  0 = j - i\n  i \\<le> j\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. i = j", "by auto"], ["proof (state)\nthis:\n  i = j\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>0 = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j\n 2. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "thus \"\\<GG> ! i \\<subseteq> \\<GG> ! j\""], ["proof (prove)\nusing this:\n  i = j\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! j", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! j\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "case (Suc k i j)"], ["proof (state)\nthis:\n  \\<lbrakk>k = ?j - ?i; ?i \\<le> ?j; ?j < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> \\<GG> ! ?i \\<subseteq> \\<GG> ! ?j\n  Suc k = j - i\n  i \\<le> j\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "hence i':\"i + (Suc k) = j\" \"i + 1 < length \\<GG>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>k = ?j - ?i; ?i \\<le> ?j; ?j < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> \\<GG> ! ?i \\<subseteq> \\<GG> ! ?j\n  Suc k = j - i\n  i \\<le> j\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. i + Suc k = j &&& i + 1 < length \\<GG>", "by auto"], ["proof (state)\nthis:\n  i + Suc k = j\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "hence ij:\"i + 1 \\<le> j\""], ["proof (prove)\nusing this:\n  i + Suc k = j\n  i + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. i + 1 \\<le> j", "by auto"], ["proof (state)\nthis:\n  i + 1 \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "have \"\\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)", "using i' normal normal_imp_subgroup subgroup.subset"], ["proof (prove)\nusing this:\n  i + Suc k = j\n  i + 1 < length \\<GG>\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  \\<GG> ! ?i \\<lhd> G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr>\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)", "by force"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "moreover"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "have \"j - (i + 1) = k\" \"j < length \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j - (i + 1) = k &&& j < length \\<GG>", "using Suc assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>k = ?j - ?i; ?i \\<le> ?j; ?j < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> \\<GG> ! ?i \\<subseteq> \\<GG> ! ?j\n  Suc k = j - i\n  i \\<le> j\n  j < length \\<GG>\n  i \\<le> j\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. j - (i + 1) = k &&& j < length \\<GG>", "by auto"], ["proof (state)\nthis:\n  j - (i + 1) = k\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "hence \"\\<GG> ! (i + 1) \\<subseteq> \\<GG> ! j\""], ["proof (prove)\nusing this:\n  j - (i + 1) = k\n  j < length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG> ! (i + 1) \\<subseteq> \\<GG> ! j", "using Suc(1) ij"], ["proof (prove)\nusing this:\n  j - (i + 1) = k\n  j < length \\<GG>\n  \\<lbrakk>k = ?j - ?i; ?i \\<le> ?j; ?j < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> \\<GG> ! ?i \\<subseteq> \\<GG> ! ?j\n  i + 1 \\<le> j\n\ngoal (1 subgoal):\n 1. \\<GG> ! (i + 1) \\<subseteq> \\<GG> ! j", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (i + 1) \\<subseteq> \\<GG> ! j\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n                   \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j;\n        Suc x = j - i; i \\<le> j; j < length \\<GG>\\<rbrakk>\n       \\<Longrightarrow> \\<GG> ! i \\<subseteq> \\<GG> ! j", "ultimately"], ["proof (chain)\npicking this:\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n  \\<GG> ! (i + 1) \\<subseteq> \\<GG> ! j", "show \"\\<GG> ! i \\<subseteq> \\<GG> ! j\""], ["proof (prove)\nusing this:\n  \\<GG> ! i \\<subseteq> \\<GG> ! (i + 1)\n  \\<GG> ! (i + 1) \\<subseteq> \\<GG> ! j\n\ngoal (1 subgoal):\n 1. \\<GG> ! i \\<subseteq> \\<GG> ! j", "by simp"], ["proof (state)\nthis:\n  \\<GG> ! i \\<subseteq> \\<GG> ! j\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}