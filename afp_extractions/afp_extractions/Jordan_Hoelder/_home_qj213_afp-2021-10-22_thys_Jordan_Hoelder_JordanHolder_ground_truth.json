{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder/JordanHolder.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder", "problem_names": ["lemma (in normal_series) quotients_butlast:\n  assumes \"length \\<GG> > 1\"\n  shows \"butlast quotients = normal_series.quotients (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>) (take (length \\<GG> - 1) \\<GG>)\"", "theorem jordan_hoelder_multisets:\n  assumes \"group G\"\n  assumes \"finite (carrier G)\"\n  assumes \"composition_series G \\<GG>\"\n  assumes \"composition_series G \\<HH>\"\n  shows \"mset (map group.iso_class (normal_series.quotients G \\<GG>))\n    = mset (map group.iso_class (normal_series.quotients G \\<HH>))\""], "translations": [["", "lemma (in normal_series) quotients_butlast:\n  assumes \"length \\<GG> > 1\"\n  shows \"butlast quotients = normal_series.quotients (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>) (take (length \\<GG> - 1) \\<GG>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast quotients =\n    normal_series.quotients\n     (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n     (take (length \\<GG> - 1) \\<GG>)", "proof (rule nth_equalityI )"], ["proof (state)\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "define n where \"n = length \\<GG> - 1\""], ["proof (state)\nthis:\n  n = length \\<GG> - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "hence \"n = length (take n \\<GG>)\" \"n > 0\" \"n < length \\<GG>\""], ["proof (prove)\nusing this:\n  n = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. n = length (take n \\<GG>) &&& 0 < n &&& n < length \\<GG>", "using assms notempty"], ["proof (prove)\nusing this:\n  n = length \\<GG> - 1\n  1 < length \\<GG>\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. n = length (take n \\<GG>) &&& 0 < n &&& n < length \\<GG>", "by auto"], ["proof (state)\nthis:\n  n = length (take n \\<GG>)\n  0 < n\n  n < length \\<GG>\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "interpret normal\\<GG>butlast: normal_series \"(G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\" \"take n \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n     (take n \\<GG>)", "using normal_series_prefix_closed \\<open>n > 0\\<close> \\<open>n < length \\<GG>\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> length \\<GG>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> normal_series\n                     (G\\<lparr>carrier := \\<GG> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<GG>)\n  0 < n\n  n < length \\<GG>\n\ngoal (1 subgoal):\n 1. normal_series (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n     (take n \\<GG>)", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "have \"length (butlast quotients) = length quotients - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (butlast quotients) = length quotients - 1", "by (metis length_butlast)"], ["proof (state)\nthis:\n  length (butlast quotients) = length quotients - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "also"], ["proof (state)\nthis:\n  length (butlast quotients) = length quotients - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "have \"\\<dots> = length \\<GG> - 1 - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length quotients - 1 = length \\<GG> - 1 - 1", "by (metis add_diff_cancel_right' quotients_length)"], ["proof (state)\nthis:\n  length quotients - 1 = length \\<GG> - 1 - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "also"], ["proof (state)\nthis:\n  length quotients - 1 = length \\<GG> - 1 - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "have \"\\<dots> = length (take n \\<GG>) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<GG> - 1 - 1 = length (take n \\<GG>) - 1", "by (metis \\<open>n = length (take n \\<GG>)\\<close> n_def)"], ["proof (state)\nthis:\n  length \\<GG> - 1 - 1 = length (take n \\<GG>) - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "also"], ["proof (state)\nthis:\n  length \\<GG> - 1 - 1 = length (take n \\<GG>) - 1\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "have \"\\<dots> = length normal\\<GG>butlast.quotients\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take n \\<GG>) - 1 = length normal\\<GG>butlast.quotients", "by (metis normal\\<GG>butlast.quotients_length diff_add_inverse2)"], ["proof (state)\nthis:\n  length (take n \\<GG>) - 1 = length normal\\<GG>butlast.quotients\n\ngoal (2 subgoals):\n 1. length (butlast quotients) =\n    length\n     (normal_series.quotients\n       (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n       (take (length \\<GG> - 1) \\<GG>))\n 2. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "finally"], ["proof (chain)\npicking this:\n  length (butlast quotients) = length normal\\<GG>butlast.quotients", "show \"length (butlast quotients) = length normal\\<GG>butlast.quotients\""], ["proof (prove)\nusing this:\n  length (butlast quotients) = length normal\\<GG>butlast.quotients\n\ngoal (1 subgoal):\n 1. length (butlast quotients) = length normal\\<GG>butlast.quotients", "."], ["proof (state)\nthis:\n  length (butlast quotients) = length normal\\<GG>butlast.quotients\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "have \"\\<forall>i<length (butlast quotients). butlast quotients ! i = normal\\<GG>butlast.quotients ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (butlast quotients).\n       butlast quotients ! i = normal\\<GG>butlast.quotients ! i", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "assume i:\"i < length quotients - Suc 0\""], ["proof (state)\nthis:\n  i < length quotients - Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "hence i':\"i < length \\<GG> - 1\" \"i < n\" \"i + 1 < n\""], ["proof (prove)\nusing this:\n  i < length quotients - Suc 0\n\ngoal (1 subgoal):\n 1. i < length \\<GG> - 1 &&& i < n &&& i + 1 < n", "unfolding n_def"], ["proof (prove)\nusing this:\n  i < length quotients - Suc 0\n\ngoal (1 subgoal):\n 1. i < length \\<GG> - 1 &&&\n    i < length \\<GG> - 1 &&& i + 1 < length \\<GG> - 1", "using quotients_length"], ["proof (prove)\nusing this:\n  i < length quotients - Suc 0\n  length quotients + 1 = length \\<GG>\n\ngoal (1 subgoal):\n 1. i < length \\<GG> - 1 &&&\n    i < length \\<GG> - 1 &&& i + 1 < length \\<GG> - 1", "by auto"], ["proof (state)\nthis:\n  i < length \\<GG> - 1\n  i < n\n  i + 1 < n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "from i"], ["proof (chain)\npicking this:\n  i < length quotients - Suc 0", "have \"butlast quotients ! i = quotients ! i\""], ["proof (prove)\nusing this:\n  i < length quotients - Suc 0\n\ngoal (1 subgoal):\n 1. butlast quotients ! i = quotients ! i", "by (metis One_nat_def length_butlast nth_butlast)"], ["proof (state)\nthis:\n  butlast quotients ! i = quotients ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "also"], ["proof (state)\nthis:\n  butlast quotients ! i = quotients ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "have \"\\<dots> = G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quotients ! i =\n    G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i", "unfolding quotients_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n     [0..<length \\<GG> - 1] !\n    i =\n    G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i", "using i'(1)"], ["proof (prove)\nusing this:\n  i < length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i)\n     [0..<length \\<GG> - 1] !\n    i =\n    G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i", "by auto"], ["proof (state)\nthis:\n  quotients ! i = G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "also"], ["proof (state)\nthis:\n  quotients ! i = G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "have \"\\<dots> = G\\<lparr>carrier := (take n \\<GG>) ! (i + 1)\\<rparr> Mod (take n \\<GG>) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i =\n    G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod take n \\<GG> ! i", "using i'(2,3) nth_take"], ["proof (prove)\nusing this:\n  i < n\n  i + 1 < n\n  ?i < ?n \\<Longrightarrow> take ?n ?xs ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i =\n    G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod take n \\<GG> ! i", "by metis"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i =\n  G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod take n \\<GG> ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "also"], ["proof (state)\nthis:\n  G\\<lparr>carrier := \\<GG> ! (i + 1)\\<rparr> Mod \\<GG> ! i =\n  G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod take n \\<GG> ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "have \"\\<dots> = normal\\<GG>butlast.quotients ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod\n    take n \\<GG> ! i =\n    normal\\<GG>butlast.quotients ! i", "unfolding normal\\<GG>butlast.quotients_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod\n    take n \\<GG> ! i =\n    map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (n - 1),\n                carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod\n            take n \\<GG> ! i)\n     [0..<length (take n \\<GG>) - 1] !\n    i", "using i'"], ["proof (prove)\nusing this:\n  i < length \\<GG> - 1\n  i < n\n  i + 1 < n\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod\n    take n \\<GG> ! i =\n    map (\\<lambda>i.\n            G\\<lparr>carrier := \\<GG> ! (n - 1),\n                carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod\n            take n \\<GG> ! i)\n     [0..<length (take n \\<GG>) - 1] !\n    i", "by fastforce"], ["proof (state)\nthis:\n  G\\<lparr>carrier := take n \\<GG> ! (i + 1)\\<rparr> Mod take n \\<GG> ! i =\n  normal\\<GG>butlast.quotients ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length quotients - Suc 0 \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n       i", "finally"], ["proof (chain)\npicking this:\n  butlast quotients ! i = normal\\<GG>butlast.quotients ! i", "show \"butlast (normal_series.quotients G \\<GG>) ! i = normal_series.quotients (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) ! i\""], ["proof (prove)\nusing this:\n  butlast quotients ! i = normal\\<GG>butlast.quotients ! i\n\ngoal (1 subgoal):\n 1. butlast quotients ! i =\n    normal_series.quotients\n     (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>) (take n \\<GG>) !\n    i", "by auto"], ["proof (state)\nthis:\n  butlast quotients ! i =\n  normal_series.quotients (G\\<lparr>carrier := \\<GG> ! (n - Suc 0)\\<rparr>)\n   (take n \\<GG>) !\n  i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length (butlast quotients).\n     butlast quotients ! i = normal\\<GG>butlast.quotients ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "thus \"\\<And>i. i < length (butlast quotients) \n            \\<Longrightarrow> butlast quotients ! i\n              = normal_series.quotients (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)  (take (length \\<GG> - 1) \\<GG>) ! i\""], ["proof (prove)\nusing this:\n  \\<forall>i<length (butlast quotients).\n     butlast quotients ! i = normal\\<GG>butlast.quotients ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "unfolding n_def"], ["proof (prove)\nusing this:\n  \\<forall>i<length (butlast quotients).\n     butlast quotients ! i =\n     normal_series.quotients\n      (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n      (take (length \\<GG> - 1) \\<GG>) !\n     i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (butlast quotients) \\<Longrightarrow>\n       butlast quotients ! i =\n       normal_series.quotients\n        (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n        (take (length \\<GG> - 1) \\<GG>) !\n       i", "by auto"], ["proof (state)\nthis:\n  ?i < length (butlast quotients) \\<Longrightarrow>\n  butlast quotients ! ?i =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n   (take (length \\<GG> - 1) \\<GG>) !\n  ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The main part of the Jordan H?lder theorem is its statement about the uniqueness of \n  a composition series. Here, uniqueness up to reordering and isomorphism is modelled by stating\n  that the multisets of isomorphism classes of all quotients are equal.\\<close>"], ["", "theorem jordan_hoelder_multisets:\n  assumes \"group G\"\n  assumes \"finite (carrier G)\"\n  assumes \"composition_series G \\<GG>\"\n  assumes \"composition_series G \\<HH>\"\n  shows \"mset (map group.iso_class (normal_series.quotients G \\<GG>))\n    = mset (map group.iso_class (normal_series.quotients G \\<HH>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class (normal_series.quotients G \\<GG>)) =\n    mset (map group.iso_class (normal_series.quotients G \\<HH>))", "using assms"], ["proof (prove)\nusing this:\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class (normal_series.quotients G \\<GG>)) =\n    mset (map group.iso_class (normal_series.quotients G \\<HH>))", "proof (induction \"length \\<GG>\" arbitrary: \\<GG> \\<HH> G rule: full_nat_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<GG> \\<HH> G.\n       \\<lbrakk>\\<forall>m.\n                   Suc m \\<le> length \\<GG> \\<longrightarrow>\n                   (\\<forall>x.\n                       m = length x \\<longrightarrow>\n                       (\\<forall>xa xb.\n                           Group.group xb \\<longrightarrow>\n                           finite (carrier xb) \\<longrightarrow>\n                           composition_series xb x \\<longrightarrow>\n                           composition_series xb xa \\<longrightarrow>\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb x)) =\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb xa))));\n        Group.group G; finite (carrier G); composition_series G \\<GG>;\n        composition_series G \\<HH>\\<rbrakk>\n       \\<Longrightarrow> mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<GG>)) =\n                         mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<HH>))", "case (1 \\<GG> \\<HH> G)"], ["proof (state)\nthis:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>\n\ngoal (1 subgoal):\n 1. \\<And>\\<GG> \\<HH> G.\n       \\<lbrakk>\\<forall>m.\n                   Suc m \\<le> length \\<GG> \\<longrightarrow>\n                   (\\<forall>x.\n                       m = length x \\<longrightarrow>\n                       (\\<forall>xa xb.\n                           Group.group xb \\<longrightarrow>\n                           finite (carrier xb) \\<longrightarrow>\n                           composition_series xb x \\<longrightarrow>\n                           composition_series xb xa \\<longrightarrow>\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb x)) =\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb xa))));\n        Group.group G; finite (carrier G); composition_series G \\<GG>;\n        composition_series G \\<HH>\\<rbrakk>\n       \\<Longrightarrow> mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<GG>)) =\n                         mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<HH>))", "then"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>", "interpret comp\\<GG>: composition_series G \\<GG>"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>\n\ngoal (1 subgoal):\n 1. composition_series G \\<GG>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<GG> \\<HH> G.\n       \\<lbrakk>\\<forall>m.\n                   Suc m \\<le> length \\<GG> \\<longrightarrow>\n                   (\\<forall>x.\n                       m = length x \\<longrightarrow>\n                       (\\<forall>xa xb.\n                           Group.group xb \\<longrightarrow>\n                           finite (carrier xb) \\<longrightarrow>\n                           composition_series xb x \\<longrightarrow>\n                           composition_series xb xa \\<longrightarrow>\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb x)) =\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb xa))));\n        Group.group G; finite (carrier G); composition_series G \\<GG>;\n        composition_series G \\<HH>\\<rbrakk>\n       \\<Longrightarrow> mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<GG>)) =\n                         mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<HH>))", "from 1"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>", "interpret comp\\<HH>: composition_series G \\<HH>"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>\n\ngoal (1 subgoal):\n 1. composition_series G \\<HH>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<GG> \\<HH> G.\n       \\<lbrakk>\\<forall>m.\n                   Suc m \\<le> length \\<GG> \\<longrightarrow>\n                   (\\<forall>x.\n                       m = length x \\<longrightarrow>\n                       (\\<forall>xa xb.\n                           Group.group xb \\<longrightarrow>\n                           finite (carrier xb) \\<longrightarrow>\n                           composition_series xb x \\<longrightarrow>\n                           composition_series xb xa \\<longrightarrow>\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb x)) =\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb xa))));\n        Group.group G; finite (carrier G); composition_series G \\<GG>;\n        composition_series G \\<HH>\\<rbrakk>\n       \\<Longrightarrow> mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<GG>)) =\n                         mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<HH>))", "from 1"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>", "interpret grpG: group G"], ["proof (prove)\nusing this:\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>\n\ngoal (1 subgoal):\n 1. Group.group G", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<GG> \\<HH> G.\n       \\<lbrakk>\\<forall>m.\n                   Suc m \\<le> length \\<GG> \\<longrightarrow>\n                   (\\<forall>x.\n                       m = length x \\<longrightarrow>\n                       (\\<forall>xa xb.\n                           Group.group xb \\<longrightarrow>\n                           finite (carrier xb) \\<longrightarrow>\n                           composition_series xb x \\<longrightarrow>\n                           composition_series xb xa \\<longrightarrow>\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb x)) =\n                           mset\n                            (map group.iso_class\n                              (normal_series.quotients xb xa))));\n        Group.group G; finite (carrier G); composition_series G \\<GG>;\n        composition_series G \\<HH>\\<rbrakk>\n       \\<Longrightarrow> mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<GG>)) =\n                         mset\n                          (map group.iso_class\n                            (normal_series.quotients G \\<HH>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "proof (cases \"length \\<GG> \\<le> 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "case True"], ["proof (state)\nthis:\n  length \\<GG> \\<le> 2\n\ngoal (2 subgoals):\n 1. length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence  \"length \\<GG> = 0 \\<or> length \\<GG> = 1 \\<or> length \\<GG> = 2\""], ["proof (prove)\nusing this:\n  length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. length \\<GG> = 0 \\<or> length \\<GG> = 1 \\<or> length \\<GG> = 2", "by arith"], ["proof (state)\nthis:\n  length \\<GG> = 0 \\<or> length \\<GG> = 1 \\<or> length \\<GG> = 2\n\ngoal (2 subgoals):\n 1. length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "with comp\\<GG>.notempty"], ["proof (chain)\npicking this:\n  \\<GG> \\<noteq> []\n  length \\<GG> = 0 \\<or> length \\<GG> = 1 \\<or> length \\<GG> = 2", "have  \"length \\<GG> = 1 \\<or> length \\<GG> = 2\""], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n  length \\<GG> = 0 \\<or> length \\<GG> = 1 \\<or> length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. length \\<GG> = 1 \\<or> length \\<GG> = 2", "by simp"], ["proof (state)\nthis:\n  length \\<GG> = 1 \\<or> length \\<GG> = 2\n\ngoal (2 subgoals):\n 1. length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "thus ?thesis"], ["proof (prove)\nusing this:\n  length \\<GG> = 1 \\<or> length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "proof (auto simp del: mset_map)\n      \\<comment> \\<open>First trivial case: @{text \\<GG>} is the trivial group.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "assume \"length \\<GG> = Suc 0\""], ["proof (state)\nthis:\n  length \\<GG> = Suc 0\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length:\"length \\<GG> = 1\""], ["proof (prove)\nusing this:\n  length \\<GG> = Suc 0\n\ngoal (1 subgoal):\n 1. length \\<GG> = 1", "by simp"], ["proof (state)\nthis:\n  length \\<GG> = 1\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"length [] + 1 = length \\<GG>\""], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. length [] + 1 = length \\<GG>", "by auto"], ["proof (state)\nthis:\n  length [] + 1 = length \\<GG>\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "moreover"], ["proof (state)\nthis:\n  length [] + 1 = length \\<GG>\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from length"], ["proof (chain)\npicking this:\n  length \\<GG> = 1", "have char\\<GG>:\"\\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]\""], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]", "by (metis comp\\<GG>.composition_series_length_one)"], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"carrier G = {\\<one>\\<^bsub>G\\<^esub>}\""], ["proof (prove)\nusing this:\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]\n\ngoal (1 subgoal):\n 1. carrier G = {\\<one>\\<^bsub>G\\<^esub>}", "by (metis comp\\<GG>.composition_series_triv_group)"], ["proof (state)\nthis:\n  carrier G = {\\<one>\\<^bsub>G\\<^esub>}\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "with length char\\<GG>"], ["proof (chain)\npicking this:\n  length \\<GG> = 1\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]\n  carrier G = {\\<one>\\<^bsub>G\\<^esub>}", "have \"\\<GG> = \\<HH>\""], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]\n  carrier G = {\\<one>\\<^bsub>G\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<GG> = \\<HH>", "using comp\\<HH>.composition_series_triv_group"], ["proof (prove)\nusing this:\n  length \\<GG> = 1\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}]\n  carrier G = {\\<one>\\<^bsub>G\\<^esub>}\n  (carrier G = {\\<one>\\<^bsub>G\\<^esub>}) =\n  (\\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}])\n\ngoal (1 subgoal):\n 1. \\<GG> = \\<HH>", "by simp"], ["proof (state)\nthis:\n  \\<GG> = \\<HH>\n\ngoal (2 subgoals):\n 1. length \\<GG> = Suc 0 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<GG> = \\<HH>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "by simp"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "next\n      \\<comment> \\<open>Second trivial case: @{text \\<GG>} is simple.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "assume \"length \\<GG> = 2\""], ["proof (state)\nthis:\n  length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \\<GG>char:\"\\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\""], ["proof (prove)\nusing this:\n  length \\<GG> = 2\n\ngoal (1 subgoal):\n 1. \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]", "by (metis comp\\<GG>.length_two_unique)"], ["proof (state)\nthis:\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence simple:\"simple_group G\""], ["proof (prove)\nusing this:\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. simple_group G", "by (metis comp\\<GG>.composition_series_simple_group)"], ["proof (state)\nthis:\n  simple_group G\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"\\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\""], ["proof (prove)\nusing this:\n  simple_group G\n\ngoal (1 subgoal):\n 1. \\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]", "using comp\\<HH>.composition_series_simple_group"], ["proof (prove)\nusing this:\n  simple_group G\n  simple_group G = (\\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G])\n\ngoal (1 subgoal):\n 1. \\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]", "by auto"], ["proof (state)\nthis:\n  \\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "with \\<GG>char"], ["proof (chain)\npicking this:\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n  \\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]", "have \"\\<GG> = \\<HH>\""], ["proof (prove)\nusing this:\n  \\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n  \\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. \\<GG> = \\<HH>", "by simp"], ["proof (state)\nthis:\n  \\<GG> = \\<HH>\n\ngoal (1 subgoal):\n 1. length \\<GG> = 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<GG> = \\<HH>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "by simp"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "case False\n    \\<comment> \\<open>Non-trivial case: @{text \\<GG>} has length at least 3.\\<close>"], ["proof (state)\nthis:\n  \\<not> length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length:\"length \\<GG> \\<ge> 3\""], ["proof (prove)\nusing this:\n  \\<not> length \\<GG> \\<le> 2\n\ngoal (1 subgoal):\n 1. 3 \\<le> length \\<GG>", "by simp\n    \\<comment> \\<open>First we show that @{text \\<HH>} must have a length of at least 3.\\<close>"], ["proof (state)\nthis:\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"\\<not> simple_group G\""], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<not> simple_group G", "using comp\\<GG>.composition_series_simple_group"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n  simple_group G = (\\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G])\n\ngoal (1 subgoal):\n 1. \\<not> simple_group G", "by auto"], ["proof (state)\nthis:\n  \\<not> simple_group G\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"\\<HH> \\<noteq> [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\""], ["proof (prove)\nusing this:\n  \\<not> simple_group G\n\ngoal (1 subgoal):\n 1. \\<HH> \\<noteq> [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]", "using comp\\<HH>.composition_series_simple_group"], ["proof (prove)\nusing this:\n  \\<not> simple_group G\n  simple_group G = (\\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G])\n\ngoal (1 subgoal):\n 1. \\<HH> \\<noteq> [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]", "by auto"], ["proof (state)\nthis:\n  \\<HH> \\<noteq> [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"length \\<HH> \\<noteq> 2\""], ["proof (prove)\nusing this:\n  \\<HH> \\<noteq> [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. length \\<HH> \\<noteq> 2", "using comp\\<HH>.length_two_unique"], ["proof (prove)\nusing this:\n  \\<HH> \\<noteq> [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n  length \\<HH> = 2 \\<Longrightarrow>\n  \\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}, carrier G]\n\ngoal (1 subgoal):\n 1. length \\<HH> \\<noteq> 2", "by auto"], ["proof (state)\nthis:\n  length \\<HH> \\<noteq> 2\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "moreover"], ["proof (state)\nthis:\n  length \\<HH> \\<noteq> 2\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from length"], ["proof (chain)\npicking this:\n  3 \\<le> length \\<GG>", "have \"carrier G \\<noteq> {\\<one>\\<^bsub>G\\<^esub>}\""], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. carrier G \\<noteq> {\\<one>\\<^bsub>G\\<^esub>}", "using comp\\<GG>.composition_series_length_one comp\\<GG>.composition_series_triv_group"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n  (length \\<GG> = 1) = (\\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}])\n  (carrier G = {\\<one>\\<^bsub>G\\<^esub>}) =\n  (\\<GG> = [{\\<one>\\<^bsub>G\\<^esub>}])\n\ngoal (1 subgoal):\n 1. carrier G \\<noteq> {\\<one>\\<^bsub>G\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  carrier G \\<noteq> {\\<one>\\<^bsub>G\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"length \\<HH> \\<noteq> 1\""], ["proof (prove)\nusing this:\n  carrier G \\<noteq> {\\<one>\\<^bsub>G\\<^esub>}\n\ngoal (1 subgoal):\n 1. length \\<HH> \\<noteq> 1", "using comp\\<HH>.composition_series_length_one comp\\<HH>.composition_series_triv_group"], ["proof (prove)\nusing this:\n  carrier G \\<noteq> {\\<one>\\<^bsub>G\\<^esub>}\n  (length \\<HH> = 1) = (\\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}])\n  (carrier G = {\\<one>\\<^bsub>G\\<^esub>}) =\n  (\\<HH> = [{\\<one>\\<^bsub>G\\<^esub>}])\n\ngoal (1 subgoal):\n 1. length \\<HH> \\<noteq> 1", "by auto"], ["proof (state)\nthis:\n  length \\<HH> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "moreover"], ["proof (state)\nthis:\n  length \\<HH> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from comp\\<HH>.notempty"], ["proof (chain)\npicking this:\n  \\<HH> \\<noteq> []", "have \"length \\<HH> \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<HH> \\<noteq> []\n\ngoal (1 subgoal):\n 1. length \\<HH> \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  length \\<HH> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "ultimately"], ["proof (chain)\npicking this:\n  length \\<HH> \\<noteq> 2\n  length \\<HH> \\<noteq> 1\n  length \\<HH> \\<noteq> 0", "have length\\<HH>big:\"length \\<HH> \\<ge> 3\""], ["proof (prove)\nusing this:\n  length \\<HH> \\<noteq> 2\n  length \\<HH> \\<noteq> 1\n  length \\<HH> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 3 \\<le> length \\<HH>", "using comp\\<HH>.notempty"], ["proof (prove)\nusing this:\n  length \\<HH> \\<noteq> 2\n  length \\<HH> \\<noteq> 1\n  length \\<HH> \\<noteq> 0\n  \\<HH> \\<noteq> []\n\ngoal (1 subgoal):\n 1. 3 \\<le> length \\<HH>", "by arith"], ["proof (state)\nthis:\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define m where \"m = length \\<HH> - 1\""], ["proof (state)\nthis:\n  m = length \\<HH> - 1\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define n where \"n = length \\<GG> - 1\""], ["proof (state)\nthis:\n  n = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from length\\<HH>big"], ["proof (chain)\npicking this:\n  3 \\<le> length \\<HH>", "have m':\"m > 0\" \"m < length \\<HH>\" \"(m - 1) + 1 < length \\<HH>\" \"m - 1 = length \\<HH> - 2\" \"m - 1 + 1 = length \\<HH> - 1\" \"m - 1 < length \\<HH>\""], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. (0 < m &&& m < length \\<HH> &&& m - 1 + 1 < length \\<HH>) &&&\n    m - 1 = length \\<HH> - 2 &&&\n    m - 1 + 1 = length \\<HH> - 1 &&& m - 1 < length \\<HH>", "unfolding m_def"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. (0 < length \\<HH> - 1 &&&\n     length \\<HH> - 1 < length \\<HH> &&&\n     length \\<HH> - 1 - 1 + 1 < length \\<HH>) &&&\n    length \\<HH> - 1 - 1 = length \\<HH> - 2 &&&\n    length \\<HH> - 1 - 1 + 1 = length \\<HH> - 1 &&&\n    length \\<HH> - 1 - 1 < length \\<HH>", "by auto"], ["proof (state)\nthis:\n  0 < m\n  m < length \\<HH>\n  m - 1 + 1 < length \\<HH>\n  m - 1 = length \\<HH> - 2\n  m - 1 + 1 = length \\<HH> - 1\n  m - 1 < length \\<HH>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from length"], ["proof (chain)\npicking this:\n  3 \\<le> length \\<GG>", "have n':\"n > 0\" \"n < length \\<GG>\" \"(n - 1) + 1 < length \\<GG>\" \"n - 1 < length \\<GG>\" \"Suc n \\<le> length \\<GG>\"\n     \"n - 1 = length \\<GG> - 2\" \"n - 1 + 1 = length \\<GG> - 1\""], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. (0 < n &&& n < length \\<GG> &&& n - 1 + 1 < length \\<GG>) &&&\n    (n - 1 < length \\<GG> &&& Suc n \\<le> length \\<GG>) &&&\n    n - 1 = length \\<GG> - 2 &&& n - 1 + 1 = length \\<GG> - 1", "unfolding n_def"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. (0 < length \\<GG> - 1 &&&\n     length \\<GG> - 1 < length \\<GG> &&&\n     length \\<GG> - 1 - 1 + 1 < length \\<GG>) &&&\n    (length \\<GG> - 1 - 1 < length \\<GG> &&&\n     Suc (length \\<GG> - 1) \\<le> length \\<GG>) &&&\n    length \\<GG> - 1 - 1 = length \\<GG> - 2 &&&\n    length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1", "by auto"], ["proof (state)\nthis:\n  0 < n\n  n < length \\<GG>\n  n - 1 + 1 < length \\<GG>\n  n - 1 < length \\<GG>\n  Suc n \\<le> length \\<GG>\n  n - 1 = length \\<GG> - 2\n  n - 1 + 1 = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define \\<GG>Pn where \"\\<GG>Pn = G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>\""], ["proof (state)\nthis:\n  \\<GG>Pn = G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define \\<HH>Pm where \"\\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\""], ["proof (state)\nthis:\n  \\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>", "interpret grp\\<GG>Pn: group \\<GG>Pn"], ["proof (prove)\nusing this:\n  \\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. Group.group \\<GG>Pn", "unfolding \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)", "using n'"], ["proof (prove)\nusing this:\n  \\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\n  0 < n\n  n < length \\<GG>\n  n - 1 + 1 < length \\<GG>\n  n - 1 < length \\<GG>\n  Suc n \\<le> length \\<GG>\n  n - 1 = length \\<GG> - 2\n  n - 1 + 1 = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)", "by (metis comp\\<GG>.normal_series_subgroups comp\\<GG>.subgroup_imp_group)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret grp\\<HH>Pm: group \\<HH>Pm"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group \\<HH>Pm", "unfolding \\<HH>Pm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)", "using m' comp\\<HH>.normal_series_subgroups 1(2) group.subgroup_imp_group"], ["proof (prove)\nusing this:\n  0 < m\n  m < length \\<HH>\n  m - 1 + 1 < length \\<HH>\n  m - 1 = length \\<HH> - 2\n  m - 1 + 1 = length \\<HH> - 1\n  m - 1 < length \\<HH>\n  ?i < length \\<HH> \\<Longrightarrow> subgroup (\\<HH> ! ?i) G\n  Group.group G\n  \\<lbrakk>Group.group ?G; subgroup ?H ?G\\<rbrakk>\n  \\<Longrightarrow> Group.group (?G\\<lparr>carrier := ?H\\<rparr>)\n\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)", "by force"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have finGbl:\"finite (carrier \\<GG>Pn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier \\<GG>Pn)", "using \\<open>n - 1 < length \\<GG>\\<close> 1(3)"], ["proof (prove)\nusing this:\n  n - 1 < length \\<GG>\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. finite (carrier \\<GG>Pn)", "unfolding \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  n - 1 < length \\<GG>\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. finite (carrier (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>))", "using comp\\<GG>.normal_series_subgroups comp\\<GG>.subgroup_finite"], ["proof (prove)\nusing this:\n  n - 1 < length \\<GG>\n  finite (carrier G)\n  ?i < length \\<GG> \\<Longrightarrow> subgroup (\\<GG> ! ?i) G\n  \\<lbrakk>subgroup ?H G; finite (carrier G)\\<rbrakk>\n  \\<Longrightarrow> finite ?H\n\ngoal (1 subgoal):\n 1. finite (carrier (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>))", "by auto"], ["proof (state)\nthis:\n  finite (carrier \\<GG>Pn)\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have finHbl:\"finite (carrier \\<HH>Pm)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier \\<HH>Pm)", "using \\<open>m - 1 < length \\<HH>\\<close> 1(3)"], ["proof (prove)\nusing this:\n  m - 1 < length \\<HH>\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. finite (carrier \\<HH>Pm)", "unfolding \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  m - 1 < length \\<HH>\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. finite (carrier (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>))", "using comp\\<HH>.normal_series_subgroups comp\\<GG>.subgroup_finite"], ["proof (prove)\nusing this:\n  m - 1 < length \\<HH>\n  finite (carrier G)\n  ?i < length \\<HH> \\<Longrightarrow> subgroup (\\<HH> ! ?i) G\n  \\<lbrakk>subgroup ?H G; finite (carrier G)\\<rbrakk>\n  \\<Longrightarrow> finite ?H\n\ngoal (1 subgoal):\n 1. finite (carrier (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>))", "by auto"], ["proof (state)\nthis:\n  finite (carrier \\<HH>Pm)\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have quots\\<GG>notempty:\"comp\\<GG>.quotients \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp\\<GG>.quotients \\<noteq> []", "using comp\\<GG>.quotients_length length"], ["proof (prove)\nusing this:\n  length comp\\<GG>.quotients + 1 = length \\<GG>\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. comp\\<GG>.quotients \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  comp\\<GG>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have quots\\<HH>notempty:\"comp\\<HH>.quotients \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp\\<HH>.quotients \\<noteq> []", "using comp\\<HH>.quotients_length length\\<HH>big"], ["proof (prove)\nusing this:\n  length comp\\<HH>.quotients + 1 = length \\<HH>\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. comp\\<HH>.quotients \\<noteq> []", "by auto\n    \n    \\<comment> \\<open>Instantiate truncated composition series since they are used for both cases\\<close>"], ["proof (state)\nthis:\n  comp\\<HH>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<HH>butlast: composition_series \\<HH>Pm \"take m \\<HH>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series \\<HH>Pm (take m \\<HH>)", "using comp\\<HH>.composition_series_prefix_closed m'(1,2) \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> length \\<HH>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (G\\<lparr>carrier := \\<HH> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<HH>)\n  0 < m\n  m < length \\<HH>\n  \\<HH>Pm = G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>Pm (take m \\<HH>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<GG>butlast: composition_series \\<GG>Pn \"take n \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series \\<GG>Pn (take n \\<GG>)", "using comp\\<GG>.composition_series_prefix_closed n'(1,2) \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> length \\<GG>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (G\\<lparr>carrier := \\<GG> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<GG>)\n  0 < n\n  n < length \\<GG>\n  \\<GG>Pn = G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. composition_series \\<GG>Pn (take n \\<GG>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have ltaken:\"n = length (take n \\<GG>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = length (take n \\<GG>)", "using length_take n'(2)"], ["proof (prove)\nusing this:\n  length (take ?n ?xs) = min (length ?xs) ?n\n  n < length \\<GG>\n\ngoal (1 subgoal):\n 1. n = length (take n \\<GG>)", "by auto"], ["proof (state)\nthis:\n  n = length (take n \\<GG>)\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have ltakem:\"m = length (take m \\<HH>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = length (take m \\<HH>)", "using length_take m'(2)"], ["proof (prove)\nusing this:\n  length (take ?n ?xs) = min (length ?xs) ?n\n  m < length \\<HH>\n\ngoal (1 subgoal):\n 1. m = length (take m \\<HH>)", "by auto"], ["proof (state)\nthis:\n  m = length (take m \\<HH>)\n\ngoal (1 subgoal):\n 1. \\<not> length \\<GG> \\<le> 2 \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "proof (cases \"\\<HH> ! (m - 1)  = \\<GG> ! (n - 1)\")\n      \\<comment> \\<open>If @{term \"\\<HH> ! (l - 1) = \\<GG> ! 1\"}, everything is simple...\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "case True\n      \\<comment> \\<open>The last quotients of @{term \\<GG>} and @{term \\<HH>} are equal.\\<close>"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) = \\<GG> ! (n - 1)\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have lasteq:\"last comp\\<GG>.quotients = last comp\\<HH>.quotients\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "from length"], ["proof (chain)\npicking this:\n  3 \\<le> length \\<GG>", "have lg:\"length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1\""], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1", "by (metis Suc_diff_1 Suc_eq_plus1 n'(1) n_def)"], ["proof (state)\nthis:\n  length \\<GG> - 1 - 1 + 1 = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "from length\\<HH>big"], ["proof (chain)\npicking this:\n  3 \\<le> length \\<HH>", "have lh:\"length \\<HH> - 1 - 1 + 1 = length \\<HH> - 1\""], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. length \\<HH> - 1 - 1 + 1 = length \\<HH> - 1", "by (metis Suc_diff_1 Suc_eq_plus1 \\<open>0 < m\\<close> m_def)"], ["proof (state)\nthis:\n  length \\<HH> - 1 - 1 + 1 = length \\<HH> - 1\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "have \"last comp\\<GG>.quotients =  G Mod \\<GG> ! (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = G Mod \\<GG> ! (n - 1)", "using length comp\\<GG>.last_quotient"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n  1 < length \\<GG> \\<Longrightarrow>\n  last comp\\<GG>.quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = G Mod \\<GG> ! (n - 1)", "unfolding n_def"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<GG>\n  1 < length \\<GG> \\<Longrightarrow>\n  last comp\\<GG>.quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)", "by auto"], ["proof (state)\nthis:\n  last comp\\<GG>.quotients = G Mod \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "also"], ["proof (state)\nthis:\n  last comp\\<GG>.quotients = G Mod \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "have \"\\<dots> = G Mod \\<HH> ! (m - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G Mod \\<GG> ! (n - 1) = G Mod \\<HH> ! (m - 1)", "using True"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) = \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. G Mod \\<GG> ! (n - 1) = G Mod \\<HH> ! (m - 1)", "by simp"], ["proof (state)\nthis:\n  G Mod \\<GG> ! (n - 1) = G Mod \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "also"], ["proof (state)\nthis:\n  G Mod \\<GG> ! (n - 1) = G Mod \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "have \"\\<dots> = last comp\\<HH>.quotients\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G Mod \\<HH> ! (m - 1) = last comp\\<HH>.quotients", "using length\\<HH>big comp\\<HH>.last_quotient"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n  1 < length \\<HH> \\<Longrightarrow>\n  last comp\\<HH>.quotients = G Mod \\<HH> ! (length \\<HH> - 1 - 1)\n\ngoal (1 subgoal):\n 1. G Mod \\<HH> ! (m - 1) = last comp\\<HH>.quotients", "unfolding m_def"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n  1 < length \\<HH> \\<Longrightarrow>\n  last comp\\<HH>.quotients = G Mod \\<HH> ! (length \\<HH> - 1 - 1)\n\ngoal (1 subgoal):\n 1. G Mod \\<HH> ! (length \\<HH> - 1 - 1) = last comp\\<HH>.quotients", "by auto"], ["proof (state)\nthis:\n  G Mod \\<HH> ! (m - 1) = last comp\\<HH>.quotients\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "finally"], ["proof (chain)\npicking this:\n  last comp\\<GG>.quotients = last comp\\<HH>.quotients", "show ?thesis"], ["proof (prove)\nusing this:\n  last comp\\<GG>.quotients = last comp\\<HH>.quotients\n\ngoal (1 subgoal):\n 1. last comp\\<GG>.quotients = last comp\\<HH>.quotients", "."], ["proof (state)\nthis:\n  last comp\\<GG>.quotients = last comp\\<HH>.quotients\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  last comp\\<GG>.quotients = last comp\\<HH>.quotients\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from ltaken"], ["proof (chain)\npicking this:\n  n = length (take n \\<GG>)", "have ind:\"mset (map group.iso_class \\<GG>butlast.quotients) = mset (map group.iso_class \\<HH>butlast.quotients)\""], ["proof (prove)\nusing this:\n  n = length (take n \\<GG>)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<GG>butlast.quotients) =\n    mset (map group.iso_class \\<HH>butlast.quotients)", "using 1(1) True n'(5) grp\\<GG>Pn.is_group finGbl \\<GG>butlast.is_composition_series \\<HH>butlast.is_composition_series"], ["proof (prove)\nusing this:\n  n = length (take n \\<GG>)\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  \\<HH> ! (m - 1) = \\<GG> ! (n - 1)\n  Suc n \\<le> length \\<GG>\n  Group.group \\<GG>Pn\n  finite (carrier \\<GG>Pn)\n  composition_series \\<GG>Pn (take n \\<GG>)\n  composition_series \\<HH>Pm (take m \\<HH>)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<GG>butlast.quotients) =\n    mset (map group.iso_class \\<HH>butlast.quotients)", "unfolding \\<GG>Pn_def \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  n = length (take n \\<GG>)\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  \\<HH> ! (m - 1) = \\<GG> ! (n - 1)\n  Suc n \\<le> length \\<GG>\n  Group.group (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n  finite (carrier (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>))\n  composition_series (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n   (take n \\<GG>)\n  composition_series (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)\n   (take m \\<HH>)\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (normal_series.quotients\n         (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>) (take n \\<GG>))) =\n    mset\n     (map group.iso_class\n       (normal_series.quotients\n         (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>) (take m \\<HH>)))", "by metis"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<GG>butlast.quotients) =\n  mset (map group.iso_class \\<HH>butlast.quotients)\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"mset (map group.iso_class comp\\<GG>.quotients)\n                    = mset (map group.iso_class (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))", "by (simp add: quots\\<GG>notempty)"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class (\\<GG>butlast.quotients @ [last (comp\\<GG>.quotients)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients]))", "using comp\\<GG>.quotients_butlast length"], ["proof (prove)\nusing this:\n  1 < length \\<GG> \\<Longrightarrow>\n  butlast comp\\<GG>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n   (take (length \\<GG> - 1) \\<GG>)\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients]))", "unfolding n_def \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  1 < length \\<GG> \\<Longrightarrow>\n  butlast comp\\<GG>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n   (take (length \\<GG> - 1) \\<GG>)\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class\n       (normal_series.quotients\n         (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n         (take (length \\<GG> - 1) \\<GG>) @\n        [last comp\\<GG>.quotients]))", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n  mset\n   (map group.iso_class\n     (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n  mset\n   (map group.iso_class\n     (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset ((map group.iso_class \\<GG>butlast.quotients) @ [group.iso_class (last (comp\\<GG>.quotients))])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class \\<GG>butlast.quotients @\n      [group.iso_class (last comp\\<GG>.quotients)])", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients])) =\n  mset\n   (map group.iso_class \\<GG>butlast.quotients @\n    [group.iso_class (last comp\\<GG>.quotients)])\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<GG>butlast.quotients @ [last comp\\<GG>.quotients])) =\n  mset\n   (map group.iso_class \\<GG>butlast.quotients @\n    [group.iso_class (last comp\\<GG>.quotients)])\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<GG>butlast.quotients) + {# group.iso_class (last (comp\\<GG>.quotients)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class \\<GG>butlast.quotients @\n      [group.iso_class (last comp\\<GG>.quotients)]) =\n    mset (map group.iso_class \\<GG>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#}", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class \\<GG>butlast.quotients @\n    [group.iso_class (last comp\\<GG>.quotients)]) =\n  mset (map group.iso_class \\<GG>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#}\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class \\<GG>butlast.quotients @\n    [group.iso_class (last comp\\<GG>.quotients)]) =\n  mset (map group.iso_class \\<GG>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#}\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<HH>butlast.quotients) + {# group.iso_class (last (comp\\<GG>.quotients)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<GG>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#} =\n    mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#}", "using ind"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<GG>butlast.quotients) =\n  mset (map group.iso_class \\<HH>butlast.quotients)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<GG>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#} =\n    mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#}", "by simp"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<GG>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#} =\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#}\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<GG>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#} =\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#}\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<HH>butlast.quotients) + {# group.iso_class (last (comp\\<HH>.quotients)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#} =\n    mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<HH>.quotients)#}", "using lasteq"], ["proof (prove)\nusing this:\n  last comp\\<GG>.quotients = last comp\\<HH>.quotients\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<GG>.quotients)#} =\n    mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<HH>.quotients)#}", "by simp"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#} =\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<HH>.quotients)#}\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<GG>.quotients)#} =\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<HH>.quotients)#}\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset ((map group.iso_class \\<HH>butlast.quotients) @ [group.iso_class (last (comp\\<HH>.quotients))])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#group.iso_class (last comp\\<HH>.quotients)#} =\n    mset\n     (map group.iso_class \\<HH>butlast.quotients @\n      [group.iso_class (last comp\\<HH>.quotients)])", "by auto"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<HH>.quotients)#} =\n  mset\n   (map group.iso_class \\<HH>butlast.quotients @\n    [group.iso_class (last comp\\<HH>.quotients)])\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#group.iso_class (last comp\\<HH>.quotients)#} =\n  mset\n   (map group.iso_class \\<HH>butlast.quotients @\n    [group.iso_class (last comp\\<HH>.quotients)])\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class (\\<HH>butlast.quotients @ [last (comp\\<HH>.quotients)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class \\<HH>butlast.quotients @\n      [group.iso_class (last comp\\<HH>.quotients)]) =\n    mset\n     (map group.iso_class\n       (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients]))", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class \\<HH>butlast.quotients @\n    [group.iso_class (last comp\\<HH>.quotients)]) =\n  mset\n   (map group.iso_class\n     (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class \\<HH>butlast.quotients @\n    [group.iso_class (last comp\\<HH>.quotients)]) =\n  mset\n   (map group.iso_class\n     (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients])) =\n    mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))", "using length\\<HH>big comp\\<HH>.quotients_butlast"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n  1 < length \\<HH> \\<Longrightarrow>\n  butlast comp\\<HH>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<HH> ! (length \\<HH> - 1 - 1)\\<rparr>)\n   (take (length \\<HH> - 1) \\<HH>)\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients])) =\n    mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))", "unfolding m_def \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  3 \\<le> length \\<HH>\n  1 < length \\<HH> \\<Longrightarrow>\n  butlast comp\\<HH>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<HH> ! (length \\<HH> - 1 - 1)\\<rparr>)\n   (take (length \\<HH> - 1) \\<HH>)\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (normal_series.quotients\n         (G\\<lparr>carrier := \\<HH> ! (length \\<HH> - 1 - 1)\\<rparr>)\n         (take (length \\<HH> - 1) \\<HH>) @\n        [last comp\\<HH>.quotients])) =\n    mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients])) =\n  mset\n   (map group.iso_class\n     (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<HH>butlast.quotients @ [last comp\\<HH>.quotients])) =\n  mset\n   (map group.iso_class\n     (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class comp\\<HH>.quotients)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients])) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "using append_butlast_last_id quots\\<HH>notempty"], ["proof (prove)\nusing this:\n  ?xs \\<noteq> [] \\<Longrightarrow> butlast ?xs @ [last ?xs] = ?xs\n  comp\\<HH>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients])) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "by simp"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients])) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (2 subgoals):\n 1. \\<HH> ! (m - 1) = \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)\n 2. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "finally"], ["proof (chain)\npicking this:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)", "show ?thesis"], ["proof (prove)\nusing this:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "."], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "case False"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define \\<HH>PmInt\\<GG>Pn where \"\\<HH>PmInt\\<GG>Pn = G\\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr>\""], ["proof (state)\nthis:\n  \\<HH>PmInt\\<GG>Pn = G\n  \\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<GG>Pnmax: max_normal_subgroup \"\\<GG> ! (n - 1)\" G"], ["proof (prove)\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<GG> ! (n - 1)) G", "unfolding n_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<GG> ! (length \\<GG> - 1 - 1)) G", "by (metis add_lessD1 diff_diff_add n'(3) add.commute one_add_one 1(3) comp\\<GG>.snd_to_last_max_normal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<HH>Pmmax: max_normal_subgroup \"\\<HH> ! (m - 1)\" G"], ["proof (prove)\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<HH> ! (m - 1)) G", "unfolding m_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. max_normal_subgroup (\\<HH> ! (length \\<HH> - 1 - 1)) G", "by (metis add_lessD1 diff_diff_add m'(3) add.commute one_add_one 1(3) comp\\<HH>.snd_to_last_max_normal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<HH>PmnormG:\"\\<HH> ! (m - 1) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<lhd> G", "using comp\\<HH>.normal_series_snd_to_last m'(4)"], ["proof (prove)\nusing this:\n  \\<HH> ! (length \\<HH> - 2) \\<lhd> G\n  m - 1 = length \\<HH> - 2\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<lhd> G", "unfolding m_def"], ["proof (prove)\nusing this:\n  \\<HH> ! (length \\<HH> - 2) \\<lhd> G\n  length \\<HH> - 1 - 1 = length \\<HH> - 2\n\ngoal (1 subgoal):\n 1. \\<HH> ! (length \\<HH> - 1 - 1) \\<lhd> G", "by auto"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<GG>PnnormG:\"\\<GG> ! (n - 1) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<lhd> G", "using comp\\<GG>.normal_series_snd_to_last n'(6)"], ["proof (prove)\nusing this:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  n - 1 = length \\<GG> - 2\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<lhd> G", "unfolding n_def"], ["proof (prove)\nusing this:\n  \\<GG> ! (length \\<GG> - 2) \\<lhd> G\n  length \\<GG> - 1 - 1 = length \\<GG> - 2\n\ngoal (1 subgoal):\n 1. \\<GG> ! (length \\<GG> - 1 - 1) \\<lhd> G", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (n - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<HH>Pmint\\<GG>PnnormG:\"\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G", "using \\<HH>PmnormG \\<GG>PnnormG"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G", "by (rule comp\\<GG>.normal_subgroup_intersect)"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have Intnorm\\<GG>Pn:\"\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn", "using \\<GG>PnnormG \\<HH>PmnormG Int_lower2"], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?A \\<inter> ?B \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn", "unfolding \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?A \\<inter> ?B \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G\n    \\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>", "by (metis comp\\<GG>.normal_restrict_supergroup comp\\<GG>.normal_series_subgroups comp\\<GG>.normal_subgroup_intersect n'(4))"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn", "interpret grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn: group \"\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\""], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn\n\ngoal (1 subgoal):\n 1. Group.group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))", "by (rule normal.factorgroup_is_group)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have Intnorm\\<HH>Pm:\"\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm", "using \\<HH>PmnormG \\<GG>PnnormG Int_lower2 Int_commute"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<lhd> G\n  ?A \\<inter> ?B \\<subseteq> ?B\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm", "unfolding \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<lhd> G\n  ?A \\<inter> ?B \\<subseteq> ?B\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G\n    \\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>", "by (metis comp\\<GG>.normal_restrict_supergroup comp\\<GG>.normal_subgroup_intersect comp\\<HH>.normal_series_subgroups m'(6))"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm", "interpret grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn: group \"\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\""], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm\n\ngoal (1 subgoal):\n 1. Group.group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))", "by (rule normal.factorgroup_is_group)\n\n      \\<comment> \\<open>Show that the second to last entries are not contained in each other.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have not\\<HH>PmSub\\<GG>Pn:\"\\<not> (\\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)", "using \\<HH>Pmmax.max_normal \\<GG>PnnormG False[symmetric] \\<GG>Pnmax.proper"], ["proof (prove)\nusing this:\n  \\<lbrakk>?J \\<lhd> G; ?J \\<noteq> \\<HH> ! (m - 1);\n   ?J \\<noteq> carrier G\\<rbrakk>\n  \\<Longrightarrow> \\<not> \\<HH> ! (m - 1) \\<subseteq> ?J\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<noteq> \\<HH> ! (m - 1)\n  \\<GG> ! (n - 1) \\<noteq> carrier G\n\ngoal (1 subgoal):\n 1. \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have not\\<GG>PnSub\\<HH>Pm:\"\\<not> (\\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1)", "using \\<GG>Pnmax.max_normal \\<HH>PmnormG False \\<HH>Pmmax.proper"], ["proof (prove)\nusing this:\n  \\<lbrakk>?J \\<lhd> G; ?J \\<noteq> \\<GG> ! (n - 1);\n   ?J \\<noteq> carrier G\\<rbrakk>\n  \\<Longrightarrow> \\<not> \\<GG> ! (n - 1) \\<subseteq> ?J\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1)\n  \\<HH> ! (m - 1) \\<noteq> carrier G\n\ngoal (1 subgoal):\n 1. \\<not> \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1)", "by simp\n      \n      \\<comment> \\<open>Show that @{term \"G Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\"} is a simple group.\\<close>"], ["proof (state)\nthis:\n  \\<not> \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<HH>PmSubSetmult:\"\\<HH> ! (m - 1) \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1)\n    \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "using second_isomorphism_grp.H_contained_in_set_mult \\<GG>Pnmax.is_normal \\<HH>PmnormG normal_imp_subgroup"], ["proof (prove)\nusing this:\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1)\n    \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def max_normal_subgroup_def"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1)\n    \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "by metis"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1)\n  \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<GG>PnSubSetmult:\"\\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1)\n    \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "using second_isomorphism_grp.S_contained_in_set_mult \\<GG>Pnmax.is_normal \\<HH>PmnormG normal_imp_subgroup"], ["proof (prove)\nusing this:\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  ?S \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1)\n    \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def max_normal_subgroup_def"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?S \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1)\n    \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "by metis"], ["proof (state)\nthis:\n  \\<GG> ! (n - 1)\n  \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<GG> ! (n - 1) \\<noteq> (\\<HH> ! (m - 1)) <#>\\<^bsub>G\\<^esub> (\\<GG> ! (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<noteq>\n    \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "using \\<HH>PmSubSetmult not\\<HH>PmSub\\<GG>Pn"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1)\n  \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n  \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<noteq>\n    \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (n - 1) \\<noteq>\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence set_multG:\"(\\<HH> ! (m - 1)) <#>\\<^bsub>G\\<^esub> (\\<GG> ! (n - 1)) = carrier G\""], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) \\<noteq>\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G", "using \\<GG>Pnmax.max_normal \\<GG>Pnmax.is_normal \\<HH>PmnormG comp\\<GG>.normal_subgroup_set_mult_closed \\<GG>PnSubSetmult"], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) \\<noteq>\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n  \\<lbrakk>?J \\<lhd> G; ?J \\<noteq> \\<GG> ! (n - 1);\n   ?J \\<noteq> carrier G\\<rbrakk>\n  \\<Longrightarrow> \\<not> \\<GG> ! (n - 1) \\<subseteq> ?J\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<lbrakk>?M \\<lhd> G; ?N \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> ?M <#>\\<^bsub>G\\<^esub> ?N \\<lhd> G\n  \\<GG> ! (n - 1)\n  \\<subseteq> \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G", "by metis"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G", "obtain \\<phi> where \"\\<phi> \\<in> iso (\\<GG>Pn Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))) (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<HH> ! (m - 1))\""], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n               (G\\<lparr>carrier := carrier G\\<rparr> Mod\n                \\<HH> ! (m - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using second_isomorphism_grp.normal_intersection_quotient_isom \\<HH>PmnormG \\<GG>Pnmax.is_normal normal_imp_subgroup"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n               (G\\<lparr>carrier := carrier G\\<rparr> Mod\n                \\<HH> ! (m - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def max_normal_subgroup_def \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) <#>\\<^bsub>G\\<^esub> \\<GG> ! (n - 1) = carrier G\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<phi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr> Mod\n                \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n               (G\\<lparr>carrier := carrier G\\<rparr> Mod\n                \\<HH> ! (m - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \\<phi>:\"\\<phi> \\<in> iso (\\<GG>Pn Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))) (G Mod \\<HH> ! (m - 1))\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. \\<phi>\n    \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n           (G Mod \\<HH> ! (m - 1))", "by auto"], ["proof (state)\nthis:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G Mod \\<HH> ! (m - 1))", "obtain \\<phi>2 where \\<phi>2:\"\\<phi>2 \\<in> iso (G Mod \\<HH> ! (m - 1)) (\\<GG>Pn Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)))\""], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>2.\n        \\<phi>2\n        \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n               (\\<GG>Pn Mod\n                \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using group.iso_set_sym grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.is_group"], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G Mod \\<HH> ! (m - 1))\n  \\<lbrakk>Group.group ?G; ?h \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> inv_into (carrier ?G) ?h \\<in> Group.iso ?H ?G\n  Group.group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>2.\n        \\<phi>2\n        \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n               (\\<GG>Pn Mod\n                \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<phi>2\n  \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n         (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "moreover"], ["proof (state)\nthis:\n  \\<phi>2\n  \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n         (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"simple_group (G\\<lparr>carrier := \\<HH> ! (m - 1 + 1)\\<rparr> Mod \\<HH> ! (m - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<HH> ! (m - 1 + 1)\\<rparr> Mod \\<HH> ! (m - 1))", "using comp\\<HH>.simplefact m'(3)"], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<HH> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<HH> ! (?i + 1)\\<rparr> Mod \\<HH> ! ?i)\n  m - 1 + 1 < length \\<HH>\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<HH> ! (m - 1 + 1)\\<rparr> Mod \\<HH> ! (m - 1))", "by simp"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := \\<HH> ! (m - 1 + 1)\\<rparr> Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"simple_group (G Mod \\<HH> ! (m - 1))\""], ["proof (prove)\nusing this:\n  simple_group\n   (G\\<lparr>carrier := \\<HH> ! (m - 1 + 1)\\<rparr> Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. simple_group (G Mod \\<HH> ! (m - 1))", "using comp\\<HH>.last last_conv_nth comp\\<HH>.notempty m'(5)"], ["proof (prove)\nusing this:\n  simple_group\n   (G\\<lparr>carrier := \\<HH> ! (m - 1 + 1)\\<rparr> Mod \\<HH> ! (m - 1))\n  last \\<HH> = carrier G\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  \\<HH> \\<noteq> []\n  m - 1 + 1 = length \\<HH> - 1\n\ngoal (1 subgoal):\n 1. simple_group (G Mod \\<HH> ! (m - 1))", "by fastforce"], ["proof (state)\nthis:\n  simple_group (G Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi>2\n  \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n         (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  simple_group (G Mod \\<HH> ! (m - 1))", "have simple\\<GG>PnModInt:\"simple_group (\\<GG>Pn Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)))\""], ["proof (prove)\nusing this:\n  \\<phi>2\n  \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n         (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  simple_group (G Mod \\<HH> ! (m - 1))\n\ngoal (1 subgoal):\n 1. simple_group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))", "using simple_group.iso_simple grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.is_group"], ["proof (prove)\nusing this:\n  \\<phi>2\n  \\<in> Group.iso (G Mod \\<HH> ! (m - 1))\n         (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  simple_group (G Mod \\<HH> ! (m - 1))\n  \\<lbrakk>simple_group ?G; Group.group ?H;\n   ?\\<phi> \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> simple_group ?H\n  Group.group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. simple_group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))", "by auto"], ["proof (state)\nthis:\n  simple_group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret grpGMod\\<HH>Pm: group \"(G Mod \\<HH> ! (m - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G Mod \\<HH> ! (m - 1))", "by (metis \\<HH>PmnormG normal.factorgroup_is_group)\n\n      \\<comment> \\<open>Show analogues of the previous statements for @{term \"\\<HH> ! (m - 1)\"} instead of @{term \"\\<GG> ! (n - 1)\"}.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<HH>PmSubSetmult':\"\\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1)\n    \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "using second_isomorphism_grp.S_contained_in_set_mult \\<GG>Pnmax.is_normal \\<HH>PmnormG normal_imp_subgroup"], ["proof (prove)\nusing this:\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  ?S \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1)\n    \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def max_normal_subgroup_def"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?S \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1)\n    \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "by metis"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1)\n  \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \\<GG>PnSubSetmult':\"\\<GG> ! (n - 1) \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1)\n    \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "using second_isomorphism_grp.H_contained_in_set_mult \\<GG>Pnmax.is_normal \\<HH>PmnormG normal_imp_subgroup"], ["proof (prove)\nusing this:\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1)\n    \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def max_normal_subgroup_def"], ["proof (prove)\nusing this:\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  ?H \\<subseteq> ?H <#>\\<^bsub>?G\\<^esub> ?S\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1)\n    \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "by metis"], ["proof (state)\nthis:\n  \\<GG> ! (n - 1)\n  \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<HH> ! (m - 1) \\<noteq> (\\<GG> ! (n - 1)) <#>\\<^bsub>G\\<^esub> (\\<HH> ! (m - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq>\n    \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "using \\<GG>PnSubSetmult' not\\<GG>PnSub\\<HH>Pm"], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1)\n  \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n  \\<not> \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq>\n    \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)", "by auto"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<noteq>\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence set_multG:\"(\\<GG> ! (n - 1)) <#>\\<^bsub>G\\<^esub> (\\<HH> ! (m - 1)) = carrier G\""], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<noteq>\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G", "using \\<HH>Pmmax.max_normal \\<HH>Pmmax.is_normal \\<GG>PnnormG comp\\<GG>.normal_subgroup_set_mult_closed \\<HH>PmSubSetmult'"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<noteq>\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n  \\<lbrakk>?J \\<lhd> G; ?J \\<noteq> \\<HH> ! (m - 1);\n   ?J \\<noteq> carrier G\\<rbrakk>\n  \\<Longrightarrow> \\<not> \\<HH> ! (m - 1) \\<subseteq> ?J\n  \\<HH> ! (m - 1) \\<lhd> G\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<lbrakk>?M \\<lhd> G; ?N \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> ?M <#>\\<^bsub>G\\<^esub> ?N \\<lhd> G\n  \\<HH> ! (m - 1)\n  \\<subseteq> \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G", "by metis"], ["proof (state)\nthis:\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from set_multG"], ["proof (chain)\npicking this:\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G", "obtain \\<psi> where \n            \"\\<psi> \\<in> iso (\\<HH>Pm Mod (\\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))) (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\""], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<psi>\n        \\<in> Group.iso\n               (\\<HH>Pm Mod \\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))\n               (G\\<lparr>carrier := carrier G\\<rparr> Mod\n                \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using second_isomorphism_grp.normal_intersection_quotient_isom \\<GG>PnnormG \\<HH>Pmmax.is_normal normal_imp_subgroup"], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G\n  second_isomorphism_grp ?H ?G ?S \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<psi>\n        \\<in> Group.iso\n               (\\<HH>Pm Mod \\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))\n               (G\\<lparr>carrier := carrier G\\<rparr> Mod\n                \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding second_isomorphism_grp_def second_isomorphism_grp_axioms_def max_normal_subgroup_def \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  \\<GG> ! (n - 1) <#>\\<^bsub>G\\<^esub> \\<HH> ! (m - 1) = carrier G\n  ?H \\<lhd> ?G \\<and> subgroup ?S ?G \\<Longrightarrow>\n  (\\<lambda>X. the_elem ((#>\\<^bsub>?G\\<^esub>) ?H ` X))\n  \\<in> Group.iso (?G\\<lparr>carrier := ?S\\<rparr> Mod ?H \\<inter> ?S)\n         (?G\\<lparr>carrier := ?H <#>\\<^bsub>?G\\<^esub> ?S\\<rparr> Mod ?H)\n  \\<GG> ! (n - 1) \\<lhd> G\n  \\<HH> ! (m - 1) \\<lhd> G\n  ?H \\<lhd> ?G \\<Longrightarrow> subgroup ?H ?G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        \\<psi>\n        \\<in> Group.iso\n               (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr> Mod\n                \\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))\n               (G\\<lparr>carrier := carrier G\\<rparr> Mod\n                \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \\<psi>:\"\\<psi> \\<in> iso (\\<HH>Pm Mod (\\<HH> ! (m - 1) \\<inter> (\\<GG> ! (n - 1)))) (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\""], ["proof (prove)\nusing this:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<psi>\n    \\<in> Group.iso (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n           (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))", "using Int_commute"], ["proof (prove)\nusing this:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<GG> ! (n - 1) \\<inter> \\<HH> ! (m - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n\ngoal (1 subgoal):\n 1. \\<psi>\n    \\<in> Group.iso (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n           (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))", "by metis"], ["proof (state)\nthis:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))", "obtain \\<psi>2 where\n             \\<psi>2:\"\\<psi>2 \\<in> iso (G Mod \\<GG> ! (n - 1)) (\\<HH>Pm Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)))\""], ["proof (prove)\nusing this:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>2.\n        \\<psi>2\n        \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n               (\\<HH>Pm Mod\n                \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using group.iso_set_sym grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.is_group"], ["proof (prove)\nusing this:\n  \\<psi>\n  \\<in> Group.iso (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G\\<lparr>carrier := carrier G\\<rparr> Mod \\<GG> ! (n - 1))\n  \\<lbrakk>Group.group ?G; ?h \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> inv_into (carrier ?G) ?h \\<in> Group.iso ?H ?G\n  Group.group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>2.\n        \\<psi>2\n        \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n               (\\<HH>Pm Mod\n                \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<psi>2\n  \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n         (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "moreover"], ["proof (state)\nthis:\n  \\<psi>2\n  \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n         (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"simple_group (G\\<lparr>carrier := \\<GG> ! (n - 1 + 1)\\<rparr> Mod \\<GG> ! (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (n - 1 + 1)\\<rparr> Mod \\<GG> ! (n - 1))", "using comp\\<GG>.simplefact n'(3)"], ["proof (prove)\nusing this:\n  ?i + 1 < length \\<GG> \\<Longrightarrow>\n  simple_group (G\\<lparr>carrier := \\<GG> ! (?i + 1)\\<rparr> Mod \\<GG> ! ?i)\n  n - 1 + 1 < length \\<GG>\n\ngoal (1 subgoal):\n 1. simple_group\n     (G\\<lparr>carrier := \\<GG> ! (n - 1 + 1)\\<rparr> Mod \\<GG> ! (n - 1))", "by simp"], ["proof (state)\nthis:\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (n - 1 + 1)\\<rparr> Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"simple_group (G Mod \\<GG> ! (n - 1))\""], ["proof (prove)\nusing this:\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (n - 1 + 1)\\<rparr> Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. simple_group (G Mod \\<GG> ! (n - 1))", "using comp\\<GG>.last last_conv_nth comp\\<GG>.notempty n'(7)"], ["proof (prove)\nusing this:\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (n - 1 + 1)\\<rparr> Mod \\<GG> ! (n - 1))\n  last \\<GG> = carrier G\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n  \\<GG> \\<noteq> []\n  n - 1 + 1 = length \\<GG> - 1\n\ngoal (1 subgoal):\n 1. simple_group (G Mod \\<GG> ! (n - 1))", "by fastforce"], ["proof (state)\nthis:\n  simple_group (G Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi>2\n  \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n         (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  simple_group (G Mod \\<GG> ! (n - 1))", "have simple\\<HH>PmModInt:\"simple_group (\\<HH>Pm Mod (\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)))\""], ["proof (prove)\nusing this:\n  \\<psi>2\n  \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n         (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  simple_group (G Mod \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. simple_group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))", "using simple_group.iso_simple grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.is_group"], ["proof (prove)\nusing this:\n  \\<psi>2\n  \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n         (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  simple_group (G Mod \\<GG> ! (n - 1))\n  \\<lbrakk>simple_group ?G; Group.group ?H;\n   ?\\<phi> \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> simple_group ?H\n  Group.group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. simple_group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))", "by auto"], ["proof (state)\nthis:\n  simple_group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret grpGMod\\<GG>Pn: group \"(G Mod \\<GG> ! (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G Mod \\<GG> ! (n - 1))", "by (metis \\<GG>PnnormG normal.factorgroup_is_group)\n      \n      \\<comment> \\<open>Instantiate several composition series used to build up the equality of quotient multisets.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define \\<KK> where \"\\<KK> = remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\""], ["proof (state)\nthis:\n  \\<KK> = remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "define \\<LL> where \"\\<LL> = remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\""], ["proof (state)\nthis:\n  \\<LL> = remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<KK>: composition_series \\<HH>Pm \\<KK>"], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series \\<HH>Pm \\<KK>", "using comp\\<GG>.intersect_normal 1(3) \\<HH>PmnormG"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (carrier G); ?K \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> composition_series (G\\<lparr>carrier := ?K\\<rparr>)\n                     (remdups_adj (map ((\\<inter>) ?K) \\<GG>))\n  finite (carrier G)\n  \\<HH> ! (m - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>Pm \\<KK>", "unfolding \\<KK>_def \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (carrier G); ?K \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> composition_series (G\\<lparr>carrier := ?K\\<rparr>)\n                     (remdups_adj (map ((\\<inter>) ?K) \\<GG>))\n  finite (carrier G)\n  \\<HH> ! (m - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)\n     (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<LL>: composition_series \\<GG>Pn \\<LL>"], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series \\<GG>Pn \\<LL>", "using comp\\<HH>.intersect_normal 1(3) \\<GG>PnnormG"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (carrier G); ?K \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> composition_series (G\\<lparr>carrier := ?K\\<rparr>)\n                     (remdups_adj (map ((\\<inter>) ?K) \\<HH>))\n  finite (carrier G)\n  \\<GG> ! (n - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. composition_series \\<GG>Pn \\<LL>", "unfolding \\<LL>_def \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (carrier G); ?K \\<lhd> G\\<rbrakk>\n  \\<Longrightarrow> composition_series (G\\<lparr>carrier := ?K\\<rparr>)\n                     (remdups_adj (map ((\\<inter>) ?K) \\<HH>))\n  finite (carrier G)\n  \\<GG> ! (n - 1) \\<lhd> G\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n     (remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>))", "by auto\n\n\n      \\<comment> \\<open>Apply the induction hypothesis on @{text \\<GG>butlast} and @{text \\<LL>}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from n'(2)"], ["proof (chain)\npicking this:\n  n < length \\<GG>", "have \"Suc (length (take n \\<GG>)) \\<le> length \\<GG>\""], ["proof (prove)\nusing this:\n  n < length \\<GG>\n\ngoal (1 subgoal):\n 1. Suc (length (take n \\<GG>)) \\<le> length \\<GG>", "by auto"], ["proof (state)\nthis:\n  Suc (length (take n \\<GG>)) \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence multisets\\<GG>butlast\\<LL>:\"mset (map group.iso_class \\<GG>butlast.quotients) = mset (map group.iso_class \\<LL>.quotients)\""], ["proof (prove)\nusing this:\n  Suc (length (take n \\<GG>)) \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<GG>butlast.quotients) =\n    mset (map group.iso_class \\<LL>.quotients)", "using  \"1.hyps\" grp\\<GG>Pn.is_group finGbl \\<GG>butlast.is_composition_series \\<LL>.is_composition_series"], ["proof (prove)\nusing this:\n  Suc (length (take n \\<GG>)) \\<le> length \\<GG>\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group \\<GG>Pn\n  finite (carrier \\<GG>Pn)\n  composition_series \\<GG>Pn (take n \\<GG>)\n  composition_series \\<GG>Pn \\<LL>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<GG>butlast.quotients) =\n    mset (map group.iso_class \\<LL>.quotients)", "by metis"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<GG>butlast.quotients) =\n  mset (map group.iso_class \\<LL>.quotients)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length\\<LL>:\"n = length \\<LL>\""], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<GG>butlast.quotients) =\n  mset (map group.iso_class \\<LL>.quotients)\n\ngoal (1 subgoal):\n 1. n = length \\<LL>", "using \\<GG>butlast.quotients_length \\<LL>.quotients_length length_map size_mset ltaken"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<GG>butlast.quotients) =\n  mset (map group.iso_class \\<LL>.quotients)\n  length \\<GG>butlast.quotients + 1 = length (take n \\<GG>)\n  length \\<LL>.quotients + 1 = length \\<LL>\n  length (map ?f ?xs) = length ?xs\n  size (mset ?xs) = length ?xs\n  n = length (take n \\<GG>)\n\ngoal (1 subgoal):\n 1. n = length \\<LL>", "by metis"], ["proof (state)\nthis:\n  n = length \\<LL>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length\\<LL>':\"length \\<LL> > 1\" \"length \\<LL> - 1 > 0\" \"length \\<LL> - 1 \\<le> length \\<LL>\""], ["proof (prove)\nusing this:\n  n = length \\<LL>\n\ngoal (1 subgoal):\n 1. 1 < length \\<LL> &&&\n    0 < length \\<LL> - 1 &&& length \\<LL> - 1 \\<le> length \\<LL>", "using n'(6) length"], ["proof (prove)\nusing this:\n  n = length \\<LL>\n  n - 1 = length \\<GG> - 2\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. 1 < length \\<LL> &&&\n    0 < length \\<LL> - 1 &&& length \\<LL> - 1 \\<le> length \\<LL>", "by auto"], ["proof (state)\nthis:\n  1 < length \\<LL>\n  0 < length \\<LL> - 1\n  length \\<LL> - 1 \\<le> length \\<LL>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have Inteq\\<LL>sndlast:\"\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<LL> ! (length \\<LL> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "have \"length \\<LL> - 1 - 1 + 1 < length \\<LL>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<LL> - 1 - 1 + 1 < length \\<LL>", "using length\\<LL>'"], ["proof (prove)\nusing this:\n  1 < length \\<LL>\n  0 < length \\<LL> - 1\n  length \\<LL> - 1 \\<le> length \\<LL>\n\ngoal (1 subgoal):\n 1. length \\<LL> - 1 - 1 + 1 < length \\<LL>", "by auto"], ["proof (state)\nthis:\n  length \\<LL> - 1 - 1 + 1 < length \\<LL>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "moreover"], ["proof (state)\nthis:\n  length \\<LL> - 1 - 1 + 1 < length \\<LL>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "have KGnotempty:\"(map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []", "using comp\\<HH>.notempty"], ["proof (prove)\nusing this:\n  \\<HH> \\<noteq> []\n\ngoal (1 subgoal):\n 1. map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []", "by (metis Nil_is_map_conv)"], ["proof (state)\nthis:\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "ultimately"], ["proof (chain)\npicking this:\n  length \\<LL> - 1 - 1 + 1 < length \\<LL>\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []", "obtain i where i:\"i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\"\n          \"\\<LL> ! (length \\<LL> - 1 - 1) = (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>) ! i\" \"\\<LL> ! (length \\<LL> - 1 - 1 + 1) = (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>) ! (i + 1)\""], ["proof (prove)\nusing this:\n  length \\<LL> - 1 - 1 + 1 < length \\<LL>\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>);\n         \\<LL> ! (length \\<LL> - 1 - 1) =\n         map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i;\n         \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n         map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using remdups_adj_obtain_adjacency"], ["proof (prove)\nusing this:\n  length \\<LL> - 1 - 1 + 1 < length \\<LL>\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []\n  \\<lbrakk>?i + 1 < length (remdups_adj ?xs); 0 < length ?xs;\n   \\<And>j.\n      \\<lbrakk>j + 1 < length ?xs; remdups_adj ?xs ! ?i = ?xs ! j;\n       remdups_adj ?xs ! (?i + 1) = ?xs ! (j + 1)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>);\n         \\<LL> ! (length \\<LL> - 1 - 1) =\n         map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i;\n         \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n         map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<LL>_def"], ["proof (prove)\nusing this:\n  length (remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)) - 1 - 1 +\n  1\n  < length (remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>))\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> \\<noteq> []\n  \\<lbrakk>?i + 1 < length (remdups_adj ?xs); 0 < length ?xs;\n   \\<And>j.\n      \\<lbrakk>j + 1 < length ?xs; remdups_adj ?xs ! ?i = ?xs ! j;\n       remdups_adj ?xs ! (?i + 1) = ?xs ! (j + 1)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>);\n         remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>) !\n         (length (remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)) -\n          1 -\n          1) =\n         map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i;\n         remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>) !\n         (length (remdups_adj (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)) -\n          1 -\n          1 +\n          1) =\n         map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n  \\<LL> ! (length \\<LL> - 1 - 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "hence \"\\<LL> ! (length \\<LL> - 1 - 1) = \\<HH> ! i \\<inter> \\<GG> ! (n - 1)\" \"\\<LL> ! (length \\<LL> - 1 - 1 + 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\""], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n  \\<LL> ! (length \\<LL> - 1 - 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<LL> ! (length \\<LL> - 1 - 1) = \\<HH> ! i \\<inter> \\<GG> ! (n - 1) &&&\n    \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n    \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)", "by auto"], ["proof (state)\nthis:\n  \\<LL> ! (length \\<LL> - 1 - 1) = \\<HH> ! i \\<inter> \\<GG> ! (n - 1)\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "hence \"\\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\""], ["proof (prove)\nusing this:\n  \\<LL> ! (length \\<LL> - 1 - 1) = \\<HH> ! i \\<inter> \\<GG> ! (n - 1)\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)", "using length\\<LL>'(2)"], ["proof (prove)\nusing this:\n  \\<LL> ! (length \\<LL> - 1 - 1) = \\<HH> ! i \\<inter> \\<GG> ! (n - 1)\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n  0 < length \\<LL> - 1\n\ngoal (1 subgoal):\n 1. \\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)", "by (metis Suc_diff_1 Suc_eq_plus1)"], ["proof (state)\nthis:\n  \\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "hence \\<GG>Pnsub\\<HH>Pm:\"\\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (i + 1)\""], ["proof (prove)\nusing this:\n  \\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (i + 1)", "using \\<LL>.last \\<LL>.notempty last_conv_nth"], ["proof (prove)\nusing this:\n  \\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n  last \\<LL> = carrier \\<GG>Pn\n  \\<LL> \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (i + 1)", "unfolding \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<LL> ! (length \\<LL> - 1) = \\<HH> ! (i + 1) \\<inter> \\<GG> ! (n - 1)\n  last \\<LL> = carrier (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n  \\<LL> \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (i + 1)", "by auto"], ["proof (state)\nthis:\n  \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "from i(1)"], ["proof (chain)\npicking this:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)", "have \"i + 1 < m + 1\""], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n\ngoal (1 subgoal):\n 1. i + 1 < m + 1", "unfolding m_def"], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n\ngoal (1 subgoal):\n 1. i + 1 < length \\<HH> - 1 + 1", "by auto"], ["proof (state)\nthis:\n  i + 1 < m + 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "moreover"], ["proof (state)\nthis:\n  i + 1 < m + 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "have \"\\<not> (i + 1 \\<le> m - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i + 1 \\<le> m - 1", "using comp\\<HH>.entries_mono m'(6) not\\<GG>PnSub\\<HH>Pm \\<GG>Pnsub\\<HH>Pm"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> ?j; ?j < length \\<HH>\\<rbrakk>\n  \\<Longrightarrow> \\<HH> ! ?i \\<subseteq> \\<HH> ! ?j\n  m - 1 < length \\<HH>\n  \\<not> \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (m - 1)\n  \\<GG> ! (n - 1) \\<subseteq> \\<HH> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 \\<le> m - 1", "by fastforce"], ["proof (state)\nthis:\n  \\<not> i + 1 \\<le> m - 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "ultimately"], ["proof (chain)\npicking this:\n  i + 1 < m + 1\n  \\<not> i + 1 \\<le> m - 1", "have \"m - 1 = i\""], ["proof (prove)\nusing this:\n  i + 1 < m + 1\n  \\<not> i + 1 \\<le> m - 1\n\ngoal (1 subgoal):\n 1. m - 1 = i", "by auto"], ["proof (state)\nthis:\n  m - 1 = i\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "with i"], ["proof (chain)\npicking this:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n  \\<LL> ! (length \\<LL> - 1 - 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\n  m - 1 = i", "show ?thesis"], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH>)\n  \\<LL> ! (length \\<LL> - 1 - 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! i\n  \\<LL> ! (length \\<LL> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<GG> ! (n - 1))) \\<HH> ! (i + 1)\n  m - 1 = i\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<LL> ! (length \\<LL> - 1 - 1)", "by auto"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<LL> ! (length \\<LL> - 1 - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<LL> ! (length \\<LL> - 1 - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \\<LL>sndlast:\"\\<HH>PmInt\\<GG>Pn = (\\<GG>Pn\\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<LL> ! (length \\<LL> - 1 - 1)\n\ngoal (1 subgoal):\n 1. \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n    \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>", "unfolding \\<HH>PmInt\\<GG>Pn_def \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<LL> ! (length \\<LL> - 1 - 1)\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr> = G\n    \\<lparr>carrier := \\<GG> ! (n - 1),\n       carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n  \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n  \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>", "interpret \\<LL>butlast: composition_series \\<HH>PmInt\\<GG>Pn \"take (length \\<LL> - 1) \\<LL>\""], ["proof (prove)\nusing this:\n  \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n  \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<LL> - 1) \\<LL>)", "using length\\<LL>' \\<LL>.composition_series_prefix_closed"], ["proof (prove)\nusing this:\n  \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n  \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>\n  1 < length \\<LL>\n  0 < length \\<LL> - 1\n  length \\<LL> - 1 \\<le> length \\<LL>\n  \\<lbrakk>?i \\<le> length \\<LL>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (\\<GG>Pn\\<lparr>carrier := \\<LL> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<LL>)\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<LL> - 1) \\<LL>)", "by metis"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from \\<open>length \\<LL> > 1\\<close>"], ["proof (chain)\npicking this:\n  1 < length \\<LL>", "have quots\\<LL>notemtpy:\"\\<LL>.quotients \\<noteq> []\""], ["proof (prove)\nusing this:\n  1 < length \\<LL>\n\ngoal (1 subgoal):\n 1. \\<LL>.quotients \\<noteq> []", "unfolding \\<LL>.quotients_def"], ["proof (prove)\nusing this:\n  1 < length \\<LL>\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            \\<GG>Pn\\<lparr>carrier := \\<LL> ! (i + 1)\\<rparr> Mod \\<LL> ! i)\n     [0..<length \\<LL> - 1] \\<noteq>\n    []", "by auto\n\n      \\<comment> \\<open>Apply the induction hypothesis on @{text \\<LL>butlast} and @{text \\<KK>butlast}\\<close>"], ["proof (state)\nthis:\n  \\<LL>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"length \\<KK> > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length \\<KK>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<KK> \\<Longrightarrow> False", "assume \"\\<not> length \\<KK> > 1\""], ["proof (state)\nthis:\n  \\<not> 1 < length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<KK> \\<Longrightarrow> False", "with \\<KK>.notempty"], ["proof (chain)\npicking this:\n  \\<KK> \\<noteq> []\n  \\<not> 1 < length \\<KK>", "have \"length \\<KK> = 1\""], ["proof (prove)\nusing this:\n  \\<KK> \\<noteq> []\n  \\<not> 1 < length \\<KK>\n\ngoal (1 subgoal):\n 1. length \\<KK> = 1", "by (metis One_nat_def Suc_lessI length_greater_0_conv)"], ["proof (state)\nthis:\n  length \\<KK> = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<KK> \\<Longrightarrow> False", "hence \"carrier \\<HH>Pm = {\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}\""], ["proof (prove)\nusing this:\n  length \\<KK> = 1\n\ngoal (1 subgoal):\n 1. carrier \\<HH>Pm = {\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}", "using \\<KK>.composition_series_length_one \\<KK>.composition_series_triv_group"], ["proof (prove)\nusing this:\n  length \\<KK> = 1\n  (length \\<KK> = 1) = (\\<KK> = [{\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}])\n  (carrier \\<HH>Pm = {\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}) =\n  (\\<KK> = [{\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}])\n\ngoal (1 subgoal):\n 1. carrier \\<HH>Pm = {\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  carrier \\<HH>Pm = {\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<KK> \\<Longrightarrow> False", "hence \"carrier \\<HH>Pm = {\\<one>\\<^bsub>G\\<^esub>}\""], ["proof (prove)\nusing this:\n  carrier \\<HH>Pm = {\\<one>\\<^bsub>\\<HH>Pm\\<^esub>}\n\ngoal (1 subgoal):\n 1. carrier \\<HH>Pm = {\\<one>\\<^bsub>G\\<^esub>}", "unfolding \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  carrier (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>) =\n  {\\<one>\\<^bsub>G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\\<^esub>}\n\ngoal (1 subgoal):\n 1. carrier (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>) =\n    {\\<one>\\<^bsub>G\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  carrier \\<HH>Pm = {\\<one>\\<^bsub>G\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<KK> \\<Longrightarrow> False", "hence \"carrier \\<HH>Pm \\<subseteq> \\<GG> ! (n - 1)\""], ["proof (prove)\nusing this:\n  carrier \\<HH>Pm = {\\<one>\\<^bsub>G\\<^esub>}\n\ngoal (1 subgoal):\n 1. carrier \\<HH>Pm \\<subseteq> \\<GG> ! (n - 1)", "using \\<GG>Pnmax.is_subgroup subgroup.one_closed"], ["proof (prove)\nusing this:\n  carrier \\<HH>Pm = {\\<one>\\<^bsub>G\\<^esub>}\n  subgroup (\\<GG> ! (n - 1)) G\n  subgroup ?H ?G \\<Longrightarrow> \\<one>\\<^bsub>?G\\<^esub> \\<in> ?H\n\ngoal (1 subgoal):\n 1. carrier \\<HH>Pm \\<subseteq> \\<GG> ! (n - 1)", "by auto"], ["proof (state)\nthis:\n  carrier \\<HH>Pm \\<subseteq> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length \\<KK> \\<Longrightarrow> False", "with not\\<HH>PmSub\\<GG>Pn"], ["proof (chain)\npicking this:\n  \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)\n  carrier \\<HH>Pm \\<subseteq> \\<GG> ! (n - 1)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)\n  carrier \\<HH>Pm \\<subseteq> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. False", "unfolding \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)\n  carrier (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)\n  \\<subseteq> \\<GG> ! (n - 1)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length\\<KK>':\"length \\<KK> - 1 > 0\" \"length \\<KK> - 1 \\<le> length \\<KK>\""], ["proof (prove)\nusing this:\n  1 < length \\<KK>\n\ngoal (1 subgoal):\n 1. 0 < length \\<KK> - 1 &&& length \\<KK> - 1 \\<le> length \\<KK>", "by auto"], ["proof (state)\nthis:\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have Inteq\\<KK>sndlast:\"\\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "have \"length \\<KK> - 1 - 1 + 1 < length \\<KK>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<KK> - 1 - 1 + 1 < length \\<KK>", "using length\\<KK>'"], ["proof (prove)\nusing this:\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n\ngoal (1 subgoal):\n 1. length \\<KK> - 1 - 1 + 1 < length \\<KK>", "by auto"], ["proof (state)\nthis:\n  length \\<KK> - 1 - 1 + 1 < length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "moreover"], ["proof (state)\nthis:\n  length \\<KK> - 1 - 1 + 1 < length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "have KGnotempty:\"(map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []", "using comp\\<GG>.notempty"], ["proof (prove)\nusing this:\n  \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []", "by (metis Nil_is_map_conv)"], ["proof (state)\nthis:\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "ultimately"], ["proof (chain)\npicking this:\n  length \\<KK> - 1 - 1 + 1 < length \\<KK>\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []", "obtain i where i:\"i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\"\n          \"\\<KK> ! (length \\<KK> - 1 - 1) = (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) ! i\" \"\\<KK> ! (length \\<KK> - 1 - 1 + 1) = (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) ! (i + 1)\""], ["proof (prove)\nusing this:\n  length \\<KK> - 1 - 1 + 1 < length \\<KK>\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>);\n         \\<KK> ! (length \\<KK> - 1 - 1) =\n         map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i;\n         \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n         map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using remdups_adj_obtain_adjacency"], ["proof (prove)\nusing this:\n  length \\<KK> - 1 - 1 + 1 < length \\<KK>\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []\n  \\<lbrakk>?i + 1 < length (remdups_adj ?xs); 0 < length ?xs;\n   \\<And>j.\n      \\<lbrakk>j + 1 < length ?xs; remdups_adj ?xs ! ?i = ?xs ! j;\n       remdups_adj ?xs ! (?i + 1) = ?xs ! (j + 1)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>);\n         \\<KK> ! (length \\<KK> - 1 - 1) =\n         map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i;\n         \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n         map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<KK>_def"], ["proof (prove)\nusing this:\n  length (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)) - 1 - 1 +\n  1\n  < length (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>))\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> \\<noteq> []\n  \\<lbrakk>?i + 1 < length (remdups_adj ?xs); 0 < length ?xs;\n   \\<And>j.\n      \\<lbrakk>j + 1 < length ?xs; remdups_adj ?xs ! ?i = ?xs ! j;\n       remdups_adj ?xs ! (?i + 1) = ?xs ! (j + 1)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>);\n         remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) !\n         (length (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)) -\n          1 -\n          1) =\n         map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i;\n         remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) !\n         (length (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)) -\n          1 -\n          1 +\n          1) =\n         map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n  \\<KK> ! (length \\<KK> - 1 - 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "hence \"\\<KK> ! (length \\<KK> - 1 - 1) = \\<GG> ! i \\<inter> \\<HH> ! (m - 1)\" \"\\<KK> ! (length \\<KK> - 1 - 1 + 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\""], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n  \\<KK> ! (length \\<KK> - 1 - 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<KK> ! (length \\<KK> - 1 - 1) = \\<GG> ! i \\<inter> \\<HH> ! (m - 1) &&&\n    \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n    \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)", "by auto"], ["proof (state)\nthis:\n  \\<KK> ! (length \\<KK> - 1 - 1) = \\<GG> ! i \\<inter> \\<HH> ! (m - 1)\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "hence \"\\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\""], ["proof (prove)\nusing this:\n  \\<KK> ! (length \\<KK> - 1 - 1) = \\<GG> ! i \\<inter> \\<HH> ! (m - 1)\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)", "using length\\<KK>'(1)"], ["proof (prove)\nusing this:\n  \\<KK> ! (length \\<KK> - 1 - 1) = \\<GG> ! i \\<inter> \\<HH> ! (m - 1)\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n  0 < length \\<KK> - 1\n\ngoal (1 subgoal):\n 1. \\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)", "by (metis Suc_diff_1 Suc_eq_plus1)"], ["proof (state)\nthis:\n  \\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "hence \\<HH>Pmsub\\<GG>Pn:\"\\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (i + 1)\""], ["proof (prove)\nusing this:\n  \\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (i + 1)", "using \\<KK>.last \\<KK>.notempty last_conv_nth"], ["proof (prove)\nusing this:\n  \\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n  last \\<KK> = carrier \\<HH>Pm\n  \\<KK> \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (i + 1)", "unfolding \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  \\<KK> ! (length \\<KK> - 1) = \\<GG> ! (i + 1) \\<inter> \\<HH> ! (m - 1)\n  last \\<KK> = carrier (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)\n  \\<KK> \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow> last ?xs = ?xs ! (length ?xs - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (i + 1)", "by auto"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "from i(1)"], ["proof (chain)\npicking this:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)", "have \"i + 1 < n + 1\""], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n\ngoal (1 subgoal):\n 1. i + 1 < n + 1", "unfolding n_def"], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n\ngoal (1 subgoal):\n 1. i + 1 < length \\<GG> - 1 + 1", "by auto"], ["proof (state)\nthis:\n  i + 1 < n + 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "moreover"], ["proof (state)\nthis:\n  i + 1 < n + 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "have \"\\<not> (i + 1 \\<le> n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i + 1 \\<le> n - 1", "using comp\\<GG>.entries_mono n'(2) not\\<HH>PmSub\\<GG>Pn \\<HH>Pmsub\\<GG>Pn"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> ?j; ?j < length \\<GG>\\<rbrakk>\n  \\<Longrightarrow> \\<GG> ! ?i \\<subseteq> \\<GG> ! ?j\n  n < length \\<GG>\n  \\<not> \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (n - 1)\n  \\<HH> ! (m - 1) \\<subseteq> \\<GG> ! (i + 1)\n\ngoal (1 subgoal):\n 1. \\<not> i + 1 \\<le> n - 1", "by fastforce"], ["proof (state)\nthis:\n  \\<not> i + 1 \\<le> n - 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "ultimately"], ["proof (chain)\npicking this:\n  i + 1 < n + 1\n  \\<not> i + 1 \\<le> n - 1", "have \"n - 1 = i\""], ["proof (prove)\nusing this:\n  i + 1 < n + 1\n  \\<not> i + 1 \\<le> n - 1\n\ngoal (1 subgoal):\n 1. n - 1 = i", "by auto"], ["proof (state)\nthis:\n  n - 1 = i\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "with i"], ["proof (chain)\npicking this:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n  \\<KK> ! (length \\<KK> - 1 - 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\n  n - 1 = i", "show ?thesis"], ["proof (prove)\nusing this:\n  i + 1 < length (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)\n  \\<KK> ! (length \\<KK> - 1 - 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! i\n  \\<KK> ! (length \\<KK> - 1 - 1 + 1) =\n  map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG> ! (i + 1)\n  n - 1 = i\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n    \\<KK> ! (length \\<KK> - 1 - 1)", "by auto"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"composition_series (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>) (take (length \\<KK> - 1) \\<KK>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series\n     (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n     (take (length \\<KK> - 1) \\<KK>)", "using length\\<KK>' \\<KK>.composition_series_prefix_closed"], ["proof (prove)\nusing this:\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n  \\<lbrakk>?i \\<le> length \\<KK>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (\\<HH>Pm\\<lparr>carrier := \\<KK> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<KK>)\n\ngoal (1 subgoal):\n 1. composition_series\n     (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n     (take (length \\<KK> - 1) \\<KK>)", "unfolding \\<HH>PmInt\\<GG>Pn_def \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n  \\<lbrakk>?i \\<le> length \\<KK>; 0 < ?i\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (G\\<lparr>carrier := \\<HH> ! (m - 1),\n                          carrier := \\<KK> ! (?i - 1)\\<rparr>)\n                     (take ?i \\<KK>)\n\ngoal (1 subgoal):\n 1. composition_series\n     (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n     (take (length \\<KK> - 1) \\<KK>)", "by fastforce"], ["proof (state)\nthis:\n  composition_series\n   (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "then"], ["proof (chain)\npicking this:\n  composition_series\n   (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)", "interpret \\<KK>butlast: composition_series \\<HH>PmInt\\<GG>Pn \"(take (length \\<KK> - 1) \\<KK>)\""], ["proof (prove)\nusing this:\n  composition_series\n   (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<KK> - 1) \\<KK>)", "using Inteq\\<KK>sndlast"], ["proof (prove)\nusing this:\n  composition_series\n   (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<KK> - 1) \\<KK>)", "unfolding \\<HH>PmInt\\<GG>Pn_def"], ["proof (prove)\nusing this:\n  composition_series\n   (G\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal (1 subgoal):\n 1. composition_series\n     (G\\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr>)\n     (take (length \\<KK> - 1) \\<KK>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from finGbl"], ["proof (chain)\npicking this:\n  finite (carrier \\<GG>Pn)", "have finInt:\"finite (carrier \\<HH>PmInt\\<GG>Pn)\""], ["proof (prove)\nusing this:\n  finite (carrier \\<GG>Pn)\n\ngoal (1 subgoal):\n 1. finite (carrier \\<HH>PmInt\\<GG>Pn)", "unfolding \\<HH>PmInt\\<GG>Pn_def \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  finite (carrier (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>))\n\ngoal (1 subgoal):\n 1. finite\n     (carrier\n       (G\\<lparr>carrier :=\n                   \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr>))", "by simp"], ["proof (state)\nthis:\n  finite (carrier \\<HH>PmInt\\<GG>Pn)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "moreover"], ["proof (state)\nthis:\n  finite (carrier \\<HH>PmInt\\<GG>Pn)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>", "using length\\<LL>"], ["proof (prove)\nusing this:\n  n = length \\<LL>\n\ngoal (1 subgoal):\n 1. Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>", "unfolding n_def"], ["proof (prove)\nusing this:\n  length \\<GG> - 1 = length \\<LL>\n\ngoal (1 subgoal):\n 1. Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>", "using n'(2)"], ["proof (prove)\nusing this:\n  length \\<GG> - 1 = length \\<LL>\n  n < length \\<GG>\n\ngoal (1 subgoal):\n 1. Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>", "by auto"], ["proof (state)\nthis:\n  Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "ultimately"], ["proof (chain)\npicking this:\n  finite (carrier \\<HH>PmInt\\<GG>Pn)\n  Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>", "have multisets\\<KK>\\<LL>butlast:\"mset (map group.iso_class \\<LL>butlast.quotients) = mset (map group.iso_class \\<KK>butlast.quotients)\""], ["proof (prove)\nusing this:\n  finite (carrier \\<HH>PmInt\\<GG>Pn)\n  Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<LL>butlast.quotients) =\n    mset (map group.iso_class \\<KK>butlast.quotients)", "using \"1.hyps\" \\<LL>butlast.is_group \\<KK>butlast.is_composition_series \\<LL>butlast.is_composition_series"], ["proof (prove)\nusing this:\n  finite (carrier \\<HH>PmInt\\<GG>Pn)\n  Suc (length (take (length \\<LL> - 1) \\<LL>)) \\<le> length \\<GG>\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group \\<HH>PmInt\\<GG>Pn\n  composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<KK> - 1) \\<KK>)\n  composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<LL> - 1) \\<LL>)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<LL>butlast.quotients) =\n    mset (map group.iso_class \\<KK>butlast.quotients)", "by auto"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<LL>butlast.quotients) =\n  mset (map group.iso_class \\<KK>butlast.quotients)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"length (take (length \\<KK> - 1) \\<KK>) = length (take (length \\<LL> - 1) \\<LL>)\""], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<LL>butlast.quotients) =\n  mset (map group.iso_class \\<KK>butlast.quotients)\n\ngoal (1 subgoal):\n 1. length (take (length \\<KK> - 1) \\<KK>) =\n    length (take (length \\<LL> - 1) \\<LL>)", "using \\<KK>butlast.quotients_length \\<LL>butlast.quotients_length length_map size_mset"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<LL>butlast.quotients) =\n  mset (map group.iso_class \\<KK>butlast.quotients)\n  length \\<KK>butlast.quotients + 1 = length (take (length \\<KK> - 1) \\<KK>)\n  length \\<LL>butlast.quotients + 1 = length (take (length \\<LL> - 1) \\<LL>)\n  length (map ?f ?xs) = length ?xs\n  size (mset ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. length (take (length \\<KK> - 1) \\<KK>) =\n    length (take (length \\<LL> - 1) \\<LL>)", "by metis"], ["proof (state)\nthis:\n  length (take (length \\<KK> - 1) \\<KK>) =\n  length (take (length \\<LL> - 1) \\<LL>)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence \"length (take (length \\<KK> - 1) \\<KK>) = n - 1\""], ["proof (prove)\nusing this:\n  length (take (length \\<KK> - 1) \\<KK>) =\n  length (take (length \\<LL> - 1) \\<LL>)\n\ngoal (1 subgoal):\n 1. length (take (length \\<KK> - 1) \\<KK>) = n - 1", "using length\\<LL> n'(1)"], ["proof (prove)\nusing this:\n  length (take (length \\<KK> - 1) \\<KK>) =\n  length (take (length \\<LL> - 1) \\<LL>)\n  n = length \\<LL>\n  0 < n\n\ngoal (1 subgoal):\n 1. length (take (length \\<KK> - 1) \\<KK>) = n - 1", "by auto"], ["proof (state)\nthis:\n  length (take (length \\<KK> - 1) \\<KK>) = n - 1\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length\\<KK>:\"length \\<KK> = n\""], ["proof (prove)\nusing this:\n  length (take (length \\<KK> - 1) \\<KK>) = n - 1\n\ngoal (1 subgoal):\n 1. length \\<KK> = n", "by (metis Suc_diff_1 \\<KK>.notempty butlast_conv_take length_butlast length_greater_0_conv n'(1))\n      \n      \\<comment> \\<open>Apply the induction hypothesis on @{text \\<KK>} and @{text \\<HH>butlast}\\<close>"], ["proof (state)\nthis:\n  length \\<KK> = n\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from Inteq\\<KK>sndlast"], ["proof (chain)\npicking this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)", "have \\<KK>sndlast:\"\\<HH>PmInt\\<GG>Pn = (\\<HH>Pm\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal (1 subgoal):\n 1. \\<HH>PmInt\\<GG>Pn = \\<HH>Pm\n    \\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>", "unfolding \\<HH>PmInt\\<GG>Pn_def \\<HH>Pm_def \\<KK>_def"], ["proof (prove)\nusing this:\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) =\n  remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) !\n  (length (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)) - 1 - 1)\n\ngoal (1 subgoal):\n 1. G\\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr> = G\n    \\<lparr>carrier := \\<HH> ! (m - 1),\n       carrier :=\n         remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>) !\n         (length (remdups_adj (map ((\\<inter>) (\\<HH> ! (m - 1))) \\<GG>)) -\n          1 -\n          1)\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<HH>PmInt\\<GG>Pn = \\<HH>Pm\n  \\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "from length\\<KK>"], ["proof (chain)\npicking this:\n  length \\<KK> = n", "have \"Suc (length \\<KK>) \\<le> length \\<GG>\""], ["proof (prove)\nusing this:\n  length \\<KK> = n\n\ngoal (1 subgoal):\n 1. Suc (length \\<KK>) \\<le> length \\<GG>", "using n'(2)"], ["proof (prove)\nusing this:\n  length \\<KK> = n\n  n < length \\<GG>\n\ngoal (1 subgoal):\n 1. Suc (length \\<KK>) \\<le> length \\<GG>", "by auto"], ["proof (state)\nthis:\n  Suc (length \\<KK>) \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence multisets\\<HH>butlast\\<KK>:\"mset (map group.iso_class \\<HH>butlast.quotients) = mset (map group.iso_class \\<KK>.quotients)\""], ["proof (prove)\nusing this:\n  Suc (length \\<KK>) \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) =\n    mset (map group.iso_class \\<KK>.quotients)", "using  \"1.hyps\" grp\\<HH>Pm.is_group finHbl \\<HH>butlast.is_composition_series \\<KK>.is_composition_series"], ["proof (prove)\nusing this:\n  Suc (length \\<KK>) \\<le> length \\<GG>\n  \\<forall>m.\n     Suc m \\<le> length \\<GG> \\<longrightarrow>\n     (\\<forall>x.\n         m = length x \\<longrightarrow>\n         (\\<forall>xa xb.\n             Group.group xb \\<longrightarrow>\n             finite (carrier xb) \\<longrightarrow>\n             composition_series xb x \\<longrightarrow>\n             composition_series xb xa \\<longrightarrow>\n             mset (map group.iso_class (normal_series.quotients xb x)) =\n             mset (map group.iso_class (normal_series.quotients xb xa))))\n  Group.group \\<HH>Pm\n  finite (carrier \\<HH>Pm)\n  composition_series \\<HH>Pm (take m \\<HH>)\n  composition_series \\<HH>Pm \\<KK>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) =\n    mset (map group.iso_class \\<KK>.quotients)", "by metis"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) =\n  mset (map group.iso_class \\<KK>.quotients)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence length\\<KK>:\"m = length \\<KK>\""], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<HH>butlast.quotients) =\n  mset (map group.iso_class \\<KK>.quotients)\n\ngoal (1 subgoal):\n 1. m = length \\<KK>", "using \\<HH>butlast.quotients_length \\<KK>.quotients_length length_map size_mset ltakem"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<HH>butlast.quotients) =\n  mset (map group.iso_class \\<KK>.quotients)\n  length \\<HH>butlast.quotients + 1 = length (take m \\<HH>)\n  length \\<KK>.quotients + 1 = length \\<KK>\n  length (map ?f ?xs) = length ?xs\n  size (mset ?xs) = length ?xs\n  m = length (take m \\<HH>)\n\ngoal (1 subgoal):\n 1. m = length \\<KK>", "by metis"], ["proof (state)\nthis:\n  m = length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence  \"length \\<KK> > 1\" \"length \\<KK> - 1 > 0\" \"length \\<KK> - 1 \\<le> length \\<KK>\""], ["proof (prove)\nusing this:\n  m = length \\<KK>\n\ngoal (1 subgoal):\n 1. 1 < length \\<KK> &&&\n    0 < length \\<KK> - 1 &&& length \\<KK> - 1 \\<le> length \\<KK>", "using m'(4) length\\<HH>big"], ["proof (prove)\nusing this:\n  m = length \\<KK>\n  m - 1 = length \\<HH> - 2\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. 1 < length \\<KK> &&&\n    0 < length \\<KK> - 1 &&& length \\<KK> - 1 \\<le> length \\<KK>", "by auto"], ["proof (state)\nthis:\n  1 < length \\<KK>\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "hence quots\\<KK>notemtpy:\"\\<KK>.quotients \\<noteq> []\""], ["proof (prove)\nusing this:\n  1 < length \\<KK>\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n\ngoal (1 subgoal):\n 1. \\<KK>.quotients \\<noteq> []", "unfolding \\<KK>.quotients_def"], ["proof (prove)\nusing this:\n  1 < length \\<KK>\n  0 < length \\<KK> - 1\n  length \\<KK> - 1 \\<le> length \\<KK>\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            \\<HH>Pm\\<lparr>carrier := \\<KK> ! (i + 1)\\<rparr> Mod \\<KK> ! i)\n     [0..<length \\<KK> - 1] \\<noteq>\n    []", "by auto"], ["proof (state)\nthis:\n  \\<KK>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<KK>butlastadd\\<GG>Pn: composition_series \\<GG>Pn \"(take (length \\<KK> - 1) \\<KK>) @ [\\<GG> ! (n - 1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series \\<GG>Pn\n     (take (length \\<KK> - 1) \\<KK> @ [\\<GG> ! (n - 1)])", "using grp\\<GG>Pn.composition_series_extend \\<KK>butlast.is_composition_series simple\\<GG>PnModInt Intnorm\\<GG>Pn"], ["proof (prove)\nusing this:\n  \\<lbrakk>composition_series (\\<GG>Pn\\<lparr>carrier := ?H\\<rparr>) ?\\<HH>;\n   simple_group (\\<GG>Pn Mod ?H); ?H \\<lhd> \\<GG>Pn\\<rbrakk>\n  \\<Longrightarrow> composition_series \\<GG>Pn (?\\<HH> @ [carrier \\<GG>Pn])\n  composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<KK> - 1) \\<KK>)\n  simple_group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<GG>Pn\n\ngoal (1 subgoal):\n 1. composition_series \\<GG>Pn\n     (take (length \\<KK> - 1) \\<KK> @ [\\<GG> ! (n - 1)])", "unfolding \\<GG>Pn_def \\<HH>PmInt\\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>composition_series\n            (G\\<lparr>carrier := \\<GG> ! (n - 1), carrier := ?H\\<rparr>)\n            ?\\<HH>;\n   simple_group (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr> Mod ?H);\n   ?H \\<lhd> G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n                     (?\\<HH> @\n                      [carrier\n                        (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)])\n  composition_series\n   (G\\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n  simple_group\n   (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr> Mod\n    \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G\n  \\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<GG> ! (n - 1)\\<rparr>)\n     (take (length \\<KK> - 1) \\<KK> @ [\\<GG> ! (n - 1)])", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "interpret \\<LL>butlastadd\\<HH>Pm: composition_series \\<HH>Pm \"(take (length \\<LL> - 1) \\<LL>) @ [\\<HH> ! (m - 1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composition_series \\<HH>Pm\n     (take (length \\<LL> - 1) \\<LL> @ [\\<HH> ! (m - 1)])", "using grp\\<HH>Pm.composition_series_extend \\<LL>butlast.is_composition_series simple\\<HH>PmModInt Intnorm\\<HH>Pm"], ["proof (prove)\nusing this:\n  \\<lbrakk>composition_series (\\<HH>Pm\\<lparr>carrier := ?H\\<rparr>) ?\\<HH>;\n   simple_group (\\<HH>Pm Mod ?H); ?H \\<lhd> \\<HH>Pm\\<rbrakk>\n  \\<Longrightarrow> composition_series \\<HH>Pm (?\\<HH> @ [carrier \\<HH>Pm])\n  composition_series \\<HH>PmInt\\<GG>Pn (take (length \\<LL> - 1) \\<LL>)\n  simple_group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> \\<HH>Pm\n\ngoal (1 subgoal):\n 1. composition_series \\<HH>Pm\n     (take (length \\<LL> - 1) \\<LL> @ [\\<HH> ! (m - 1)])", "unfolding \\<HH>Pm_def \\<HH>PmInt\\<GG>Pn_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>composition_series\n            (G\\<lparr>carrier := \\<HH> ! (m - 1), carrier := ?H\\<rparr>)\n            ?\\<HH>;\n   simple_group (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr> Mod ?H);\n   ?H \\<lhd> G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> composition_series\n                     (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)\n                     (?\\<HH> @\n                      [carrier\n                        (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)])\n  composition_series\n   (G\\<lparr>carrier := \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)\\<rparr>)\n   (take (length \\<LL> - 1) \\<LL>)\n  simple_group\n   (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr> Mod\n    \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) \\<lhd> G\n  \\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>\n\ngoal (1 subgoal):\n 1. composition_series (G\\<lparr>carrier := \\<HH> ! (m - 1)\\<rparr>)\n     (take (length \\<LL> - 1) \\<LL> @ [\\<HH> ! (m - 1)])", "by auto\n      \n      \\<comment> \\<open>Prove equality of those composition series.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"mset (map group.iso_class comp\\<GG>.quotients)\n                    = mset (map group.iso_class ((butlast comp\\<GG>.quotients) @ [last comp\\<GG>.quotients]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))", "using quots\\<GG>notempty"], ["proof (prove)\nusing this:\n  comp\\<GG>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))", "by simp"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients]))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)]))", "using comp\\<GG>.quotients_butlast comp\\<GG>.last_quotient length"], ["proof (prove)\nusing this:\n  1 < length \\<GG> \\<Longrightarrow>\n  butlast comp\\<GG>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n   (take (length \\<GG> - 1) \\<GG>)\n  1 < length \\<GG> \\<Longrightarrow>\n  last comp\\<GG>.quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)]))", "unfolding n_def \\<GG>Pn_def"], ["proof (prove)\nusing this:\n  1 < length \\<GG> \\<Longrightarrow>\n  butlast comp\\<GG>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n   (take (length \\<GG> - 1) \\<GG>)\n  1 < length \\<GG> \\<Longrightarrow>\n  last comp\\<GG>.quotients = G Mod \\<GG> ! (length \\<GG> - 1 - 1)\n  3 \\<le> length \\<GG>\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n    mset\n     (map group.iso_class\n       (normal_series.quotients\n         (G\\<lparr>carrier := \\<GG> ! (length \\<GG> - 1 - 1)\\<rparr>)\n         (take (length \\<GG> - 1) \\<GG>) @\n        [G Mod \\<GG> ! (length \\<GG> - 1 - 1)]))", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n  mset\n   (map group.iso_class (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)]))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast comp\\<GG>.quotients @ [last comp\\<GG>.quotients])) =\n  mset\n   (map group.iso_class (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)]))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class ((butlast \\<LL>.quotients) @ [last \\<LL>.quotients])) + {# group.iso_class (G Mod \\<GG> ! (n - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)])) =\n    mset\n     (map group.iso_class\n       (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n    {#grpGMod\\<GG>Pn.iso_class#}", "using multisets\\<GG>butlast\\<LL> quots\\<LL>notemtpy"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<GG>butlast.quotients) =\n  mset (map group.iso_class \\<LL>.quotients)\n  \\<LL>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)])) =\n    mset\n     (map group.iso_class\n       (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n    {#grpGMod\\<GG>Pn.iso_class#}", "by simp"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)])) =\n  mset\n   (map group.iso_class\n     (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n  {#grpGMod\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<GG>butlast.quotients @ [G Mod \\<GG> ! (n - 1)])) =\n  mset\n   (map group.iso_class\n     (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n  {#grpGMod\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class (\\<LL>butlast.quotients @ [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) + {# group.iso_class (G Mod \\<GG> ! (n - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n    {#grpGMod\\<GG>Pn.iso_class#} =\n    mset\n     (map group.iso_class\n       (\\<LL>butlast.quotients @\n        [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n    {#grpGMod\\<GG>Pn.iso_class#}", "using \\<LL>.quotients_butlast \\<LL>.last_quotient \\<open>length \\<LL> > 1\\<close> \\<LL>sndlast Inteq\\<LL>sndlast"], ["proof (prove)\nusing this:\n  1 < length \\<LL> \\<Longrightarrow>\n  butlast \\<LL>.quotients =\n  normal_series.quotients\n   (\\<GG>Pn\\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>)\n   (take (length \\<LL> - 1) \\<LL>)\n  1 < length \\<LL> \\<Longrightarrow>\n  last \\<LL>.quotients = \\<GG>Pn Mod \\<LL> ! (length \\<LL> - 1 - 1)\n  1 < length \\<LL>\n  \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n  \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<LL> ! (length \\<LL> - 1 - 1)\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n    {#grpGMod\\<GG>Pn.iso_class#} =\n    mset\n     (map group.iso_class\n       (\\<LL>butlast.quotients @\n        [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n    {#grpGMod\\<GG>Pn.iso_class#}", "unfolding n_def"], ["proof (prove)\nusing this:\n  1 < length \\<LL> \\<Longrightarrow>\n  butlast \\<LL>.quotients =\n  normal_series.quotients\n   (\\<GG>Pn\\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>)\n   (take (length \\<LL> - 1) \\<LL>)\n  1 < length \\<LL> \\<Longrightarrow>\n  last \\<LL>.quotients = \\<GG>Pn Mod \\<LL> ! (length \\<LL> - 1 - 1)\n  1 < length \\<LL>\n  \\<HH>PmInt\\<GG>Pn = \\<GG>Pn\n  \\<lparr>carrier := \\<LL> ! (length \\<LL> - 1 - 1)\\<rparr>\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (length \\<GG> - 1 - 1) =\n  \\<LL> ! (length \\<LL> - 1 - 1)\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n    {#group.iso_class (G Mod \\<GG> ! (length \\<GG> - 1 - 1))#} =\n    mset\n     (map group.iso_class\n       (\\<LL>butlast.quotients @\n        [\\<GG>Pn Mod\n         \\<HH> ! (m - 1) \\<inter> \\<GG> ! (length \\<GG> - 1 - 1)])) +\n    {#group.iso_class (G Mod \\<GG> ! (length \\<GG> - 1 - 1))#}", "by auto"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n  {#grpGMod\\<GG>Pn.iso_class#} =\n  mset\n   (map group.iso_class\n     (\\<LL>butlast.quotients @\n      [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n  {#grpGMod\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast \\<LL>.quotients @ [last \\<LL>.quotients])) +\n  {#grpGMod\\<GG>Pn.iso_class#} =\n  mset\n   (map group.iso_class\n     (\\<LL>butlast.quotients @\n      [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n  {#grpGMod\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<KK>butlast.quotients) + {# group.iso_class (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) #} + {# group.iso_class (G Mod \\<GG> ! (n - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<LL>butlast.quotients @\n        [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n    {#grpGMod\\<GG>Pn.iso_class#} =\n    mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<GG>Pn.iso_class#}", "using multisets\\<KK>\\<LL>butlast"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<LL>butlast.quotients) =\n  mset (map group.iso_class \\<KK>butlast.quotients)\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (\\<LL>butlast.quotients @\n        [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n    {#grpGMod\\<GG>Pn.iso_class#} =\n    mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<GG>Pn.iso_class#}", "by simp"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<LL>butlast.quotients @\n      [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n  {#grpGMod\\<GG>Pn.iso_class#} =\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (\\<LL>butlast.quotients @\n      [\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)])) +\n  {#grpGMod\\<GG>Pn.iso_class#} =\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<KK>butlast.quotients) + {# group.iso_class (G Mod \\<HH> ! (m - 1)) #} + {# group.iso_class (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<GG>Pn.iso_class#} =\n    mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#} +\n    {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#}", "using \\<phi> \\<psi>2 iso_classes_iff grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.is_group grpGMod\\<HH>Pm.is_group grpGMod\\<GG>Pn.is_group grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.is_group"], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> Group.iso (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n         (G Mod \\<HH> ! (m - 1))\n  \\<psi>2\n  \\<in> Group.iso (G Mod \\<GG> ! (n - 1))\n         (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  \\<lbrakk>Group.group ?G; Group.group ?H\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>\\<phi>. \\<phi> \\<in> Group.iso ?G ?H) =\n                    (group.iso_class ?G = group.iso_class ?H)\n  Group.group (\\<GG>Pn Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n  Group.group (G Mod \\<HH> ! (m - 1))\n  Group.group (G Mod \\<GG> ! (n - 1))\n  Group.group (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1))\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<GG>Pn.iso_class#} =\n    mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#} +\n    {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#}", "by metis"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<GG>Pn.iso_class#} =\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#} +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<GG>PnMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<GG>Pn.iso_class#} =\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#} +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<KK>butlast.quotients) + {# group.iso_class (\\<HH>Pm Mod \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1)) #} + {# group.iso_class (G Mod \\<HH> ! (m - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#} +\n    {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} =\n    mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<HH>Pm.iso_class#}", "by simp"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#} +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} =\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<HH>Pm.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#} +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} =\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<HH>Pm.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class ((butlast \\<KK>.quotients) @ [last \\<KK>.quotients])) + {# group.iso_class (G Mod \\<HH> ! (m - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<HH>Pm.iso_class#} =\n    mset\n     (map group.iso_class\n       (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n    {#grpGMod\\<HH>Pm.iso_class#}", "using \\<KK>.quotients_butlast \\<KK>.last_quotient \\<open>length \\<KK> > 1\\<close> \\<KK>sndlast Inteq\\<KK>sndlast"], ["proof (prove)\nusing this:\n  1 < length \\<KK> \\<Longrightarrow>\n  butlast \\<KK>.quotients =\n  normal_series.quotients\n   (\\<HH>Pm\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n  1 < length \\<KK> \\<Longrightarrow>\n  last \\<KK>.quotients = \\<HH>Pm Mod \\<KK> ! (length \\<KK> - 1 - 1)\n  1 < length \\<KK>\n  \\<HH>PmInt\\<GG>Pn = \\<HH>Pm\n  \\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>\n  \\<HH> ! (m - 1) \\<inter> \\<GG> ! (n - 1) = \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n    {#grpGMod\\<HH>Pm.iso_class#} =\n    mset\n     (map group.iso_class\n       (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n    {#grpGMod\\<HH>Pm.iso_class#}", "unfolding m_def"], ["proof (prove)\nusing this:\n  1 < length \\<KK> \\<Longrightarrow>\n  butlast \\<KK>.quotients =\n  normal_series.quotients\n   (\\<HH>Pm\\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>)\n   (take (length \\<KK> - 1) \\<KK>)\n  1 < length \\<KK> \\<Longrightarrow>\n  last \\<KK>.quotients = \\<HH>Pm Mod \\<KK> ! (length \\<KK> - 1 - 1)\n  1 < length \\<KK>\n  \\<HH>PmInt\\<GG>Pn = \\<HH>Pm\n  \\<lparr>carrier := \\<KK> ! (length \\<KK> - 1 - 1)\\<rparr>\n  \\<HH> ! (length \\<HH> - 1 - 1) \\<inter> \\<GG> ! (n - 1) =\n  \\<KK> ! (length \\<KK> - 1 - 1)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<KK>butlast.quotients) +\n    {#group.iso_class\n       (\\<HH>Pm Mod\n        \\<HH> ! (length \\<HH> - 1 - 1) \\<inter> \\<GG> ! (n - 1))#} +\n    {#group.iso_class (G Mod \\<HH> ! (length \\<HH> - 1 - 1))#} =\n    mset\n     (map group.iso_class\n       (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n    {#group.iso_class (G Mod \\<HH> ! (length \\<HH> - 1 - 1))#}", "by auto"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<HH>Pm.iso_class#} =\n  mset\n   (map group.iso_class\n     (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n  {#grpGMod\\<HH>Pm.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<KK>butlast.quotients) +\n  {#grp\\<HH>PmMod\\<HH>Pmint\\<GG>Pn.iso_class#} +\n  {#grpGMod\\<HH>Pm.iso_class#} =\n  mset\n   (map group.iso_class\n     (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n  {#grpGMod\\<HH>Pm.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class \\<HH>butlast.quotients) + {# group.iso_class (G Mod \\<HH> ! (m - 1)) #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n    {#grpGMod\\<HH>Pm.iso_class#} =\n    mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#}", "using multisets\\<HH>butlast\\<KK> quots\\<KK>notemtpy"], ["proof (prove)\nusing this:\n  mset (map group.iso_class \\<HH>butlast.quotients) =\n  mset (map group.iso_class \\<KK>.quotients)\n  \\<KK>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n    {#grpGMod\\<HH>Pm.iso_class#} =\n    mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#}", "by simp"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n  {#grpGMod\\<HH>Pm.iso_class#} =\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast \\<KK>.quotients @ [last \\<KK>.quotients])) +\n  {#grpGMod\\<HH>Pm.iso_class#} =\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#}\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class ((butlast comp\\<HH>.quotients) @ [last comp\\<HH>.quotients]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#} =\n    mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))", "using comp\\<HH>.quotients_butlast comp\\<HH>.last_quotient length\\<HH>big"], ["proof (prove)\nusing this:\n  1 < length \\<HH> \\<Longrightarrow>\n  butlast comp\\<HH>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<HH> ! (length \\<HH> - 1 - 1)\\<rparr>)\n   (take (length \\<HH> - 1) \\<HH>)\n  1 < length \\<HH> \\<Longrightarrow>\n  last comp\\<HH>.quotients = G Mod \\<HH> ! (length \\<HH> - 1 - 1)\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class \\<HH>butlast.quotients) +\n    {#grpGMod\\<HH>Pm.iso_class#} =\n    mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))", "unfolding m_def \\<HH>Pm_def"], ["proof (prove)\nusing this:\n  1 < length \\<HH> \\<Longrightarrow>\n  butlast comp\\<HH>.quotients =\n  normal_series.quotients\n   (G\\<lparr>carrier := \\<HH> ! (length \\<HH> - 1 - 1)\\<rparr>)\n   (take (length \\<HH> - 1) \\<HH>)\n  1 < length \\<HH> \\<Longrightarrow>\n  last comp\\<HH>.quotients = G Mod \\<HH> ! (length \\<HH> - 1 - 1)\n  3 \\<le> length \\<HH>\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (normal_series.quotients\n         (G\\<lparr>carrier := \\<HH> ! (length \\<HH> - 1 - 1)\\<rparr>)\n         (take (length \\<HH> - 1) \\<HH>))) +\n    {#group.iso_class (G Mod \\<HH> ! (length \\<HH> - 1 - 1))#} =\n    mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))", "by auto"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#} =\n  mset\n   (map group.iso_class\n     (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "also"], ["proof (state)\nthis:\n  mset (map group.iso_class \\<HH>butlast.quotients) +\n  {#grpGMod\\<HH>Pm.iso_class#} =\n  mset\n   (map group.iso_class\n     (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients]))\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "have \"\\<dots> = mset (map group.iso_class comp\\<HH>.quotients)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients])) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "using quots\\<HH>notempty"], ["proof (prove)\nusing this:\n  comp\\<HH>.quotients \\<noteq> []\n\ngoal (1 subgoal):\n 1. mset\n     (map group.iso_class\n       (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients])) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "by simp"], ["proof (state)\nthis:\n  mset\n   (map group.iso_class\n     (butlast comp\\<HH>.quotients @ [last comp\\<HH>.quotients])) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (1 subgoal):\n 1. \\<HH> ! (m - 1) \\<noteq> \\<GG> ! (n - 1) \\<Longrightarrow>\n    mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "finally"], ["proof (chain)\npicking this:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)", "show ?thesis"], ["proof (prove)\nusing this:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal (1 subgoal):\n 1. mset (map group.iso_class comp\\<GG>.quotients) =\n    mset (map group.iso_class comp\\<HH>.quotients)", "."], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (map group.iso_class comp\\<GG>.quotients) =\n  mset (map group.iso_class comp\\<HH>.quotients)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>As a corollary, we see that the composition series of a fixed group all have the same length.\\<close>"], ["", "corollary (in jordan_hoelder) jordan_hoelder_size:\n  shows \"length \\<GG> = length \\<HH>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"length \\<GG> = length comp\\<GG>.quotients + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<GG> = length comp\\<GG>.quotients + 1", "by (metis comp\\<GG>.quotients_length)"], ["proof (state)\nthis:\n  length \\<GG> = length comp\\<GG>.quotients + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "also"], ["proof (state)\nthis:\n  length \\<GG> = length comp\\<GG>.quotients + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"\\<dots> = length (map group.iso_class comp\\<GG>.quotients) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length comp\\<GG>.quotients + 1 =\n    length (map group.iso_class comp\\<GG>.quotients) + 1", "by (metis length_map)"], ["proof (state)\nthis:\n  length comp\\<GG>.quotients + 1 =\n  length (map group.iso_class comp\\<GG>.quotients) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "also"], ["proof (state)\nthis:\n  length comp\\<GG>.quotients + 1 =\n  length (map group.iso_class comp\\<GG>.quotients) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"\\<dots> = size (mset (map group.iso_class comp\\<GG>.quotients)) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map group.iso_class comp\\<GG>.quotients) + 1 =\n    size (mset (map group.iso_class comp\\<GG>.quotients)) + 1", "by (metis size_mset)"], ["proof (state)\nthis:\n  length (map group.iso_class comp\\<GG>.quotients) + 1 =\n  size (mset (map group.iso_class comp\\<GG>.quotients)) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "also"], ["proof (state)\nthis:\n  length (map group.iso_class comp\\<GG>.quotients) + 1 =\n  size (mset (map group.iso_class comp\\<GG>.quotients)) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"\\<dots> = size (mset (map group.iso_class comp\\<HH>.quotients)) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (mset (map group.iso_class comp\\<GG>.quotients)) + 1 =\n    size (mset (map group.iso_class comp\\<HH>.quotients)) + 1", "using jordan_hoelder_multisets is_group finite is_composition_series comp\\<HH>.is_composition_series"], ["proof (prove)\nusing this:\n  \\<lbrakk>Group.group ?G; finite (carrier ?G);\n   composition_series ?G ?\\<GG>; composition_series ?G ?\\<HH>\\<rbrakk>\n  \\<Longrightarrow> mset\n                     (map group.iso_class\n                       (normal_series.quotients ?G ?\\<GG>)) =\n                    mset\n                     (map group.iso_class\n                       (normal_series.quotients ?G ?\\<HH>))\n  Group.group G\n  finite (carrier G)\n  composition_series G \\<GG>\n  composition_series G \\<HH>\n\ngoal (1 subgoal):\n 1. size (mset (map group.iso_class comp\\<GG>.quotients)) + 1 =\n    size (mset (map group.iso_class comp\\<HH>.quotients)) + 1", "by metis"], ["proof (state)\nthis:\n  size (mset (map group.iso_class comp\\<GG>.quotients)) + 1 =\n  size (mset (map group.iso_class comp\\<HH>.quotients)) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "also"], ["proof (state)\nthis:\n  size (mset (map group.iso_class comp\\<GG>.quotients)) + 1 =\n  size (mset (map group.iso_class comp\\<HH>.quotients)) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"\\<dots> = length (map group.iso_class comp\\<HH>.quotients) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (mset (map group.iso_class comp\\<HH>.quotients)) + 1 =\n    length (map group.iso_class comp\\<HH>.quotients) + 1", "by (metis size_mset)"], ["proof (state)\nthis:\n  size (mset (map group.iso_class comp\\<HH>.quotients)) + 1 =\n  length (map group.iso_class comp\\<HH>.quotients) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "also"], ["proof (state)\nthis:\n  size (mset (map group.iso_class comp\\<HH>.quotients)) + 1 =\n  length (map group.iso_class comp\\<HH>.quotients) + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"\\<dots> = length comp\\<HH>.quotients + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map group.iso_class comp\\<HH>.quotients) + 1 =\n    length comp\\<HH>.quotients + 1", "by (metis length_map)"], ["proof (state)\nthis:\n  length (map group.iso_class comp\\<HH>.quotients) + 1 =\n  length comp\\<HH>.quotients + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "also"], ["proof (state)\nthis:\n  length (map group.iso_class comp\\<HH>.quotients) + 1 =\n  length comp\\<HH>.quotients + 1\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "have \"\\<dots> = length \\<HH>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length comp\\<HH>.quotients + 1 = length \\<HH>", "by (metis comp\\<HH>.quotients_length)"], ["proof (state)\nthis:\n  length comp\\<HH>.quotients + 1 = length \\<HH>\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "finally"], ["proof (chain)\npicking this:\n  length \\<GG> = length \\<HH>", "show ?thesis"], ["proof (prove)\nusing this:\n  length \\<GG> = length \\<HH>\n\ngoal (1 subgoal):\n 1. length \\<GG> = length \\<HH>", "."], ["proof (state)\nthis:\n  length \\<GG> = length \\<HH>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}