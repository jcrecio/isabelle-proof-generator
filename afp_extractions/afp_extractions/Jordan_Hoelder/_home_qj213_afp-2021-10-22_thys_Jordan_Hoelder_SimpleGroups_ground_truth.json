{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder/SimpleGroups.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Hoelder", "problem_names": ["lemma (in simple_group) is_simple_group: \"simple_group G\"", "lemma (in simple_group) simple_not_triv: \"carrier G \\<noteq> {\\<one>}\"", "lemma (in group) prime_order_simple:\n  assumes prime:\"prime (order G)\"\n  shows \"simple_group G\"", "lemma (in simple_group) iso_simple:\n  assumes H:\"group H\"\n  assumes iso:\"\\<phi> \\<in> iso G H\"\n  shows \"simple_group H\"", "lemma (in group) self_factor_not_simple:\"\\<not> simple_group (G Mod (carrier G))\""], "translations": [["", "lemma (in simple_group) is_simple_group: \"simple_group G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group G", "by (rule simple_group_axioms)"], ["", "text \\<open>Simple groups are non-trivial.\\<close>"], ["", "lemma (in simple_group) simple_not_triv: \"carrier G \\<noteq> {\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier G \\<noteq> {\\<one>}", "using order_gt_one"], ["proof (prove)\nusing this:\n  1 < order G\n\ngoal (1 subgoal):\n 1. carrier G \\<noteq> {\\<one>}", "unfolding order_def"], ["proof (prove)\nusing this:\n  1 < card (carrier G)\n\ngoal (1 subgoal):\n 1. carrier G \\<noteq> {\\<one>}", "by auto"], ["", "text \\<open>Every group of prime order is simple\\<close>"], ["", "lemma (in group) prime_order_simple:\n  assumes prime:\"prime (order G)\"\n  shows \"simple_group G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < order G\n 2. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "from prime"], ["proof (chain)\npicking this:\n  prime (order G)", "show \"1 < order G\""], ["proof (prove)\nusing this:\n  prime (order G)\n\ngoal (1 subgoal):\n 1. 1 < order G", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < order G \\<and>\n  (\\<forall>m. m dvd order G \\<longrightarrow> m = 1 \\<or> m = order G)\n\ngoal (1 subgoal):\n 1. 1 < order G", "by auto"], ["proof (state)\nthis:\n  1 < order G\n\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "fix H"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "assume \"H \\<lhd> G\""], ["proof (state)\nthis:\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "hence HG:\"subgroup H G\""], ["proof (prove)\nusing this:\n  H \\<lhd> G\n\ngoal (1 subgoal):\n 1. subgroup H G", "unfolding normal_def"], ["proof (prove)\nusing this:\n  subgroup H G \\<and> Group.group G \\<and> normal_axioms H G\n\ngoal (1 subgoal):\n 1. subgroup H G", "by simp"], ["proof (state)\nthis:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "hence \"card H dvd order G\""], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. card H dvd order G", "by (rule card_subgrp_dvd)"], ["proof (state)\nthis:\n  card H dvd order G\n\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "with prime"], ["proof (chain)\npicking this:\n  prime (order G)\n  card H dvd order G", "have \"card H = 1 \\<or> card H = order G\""], ["proof (prove)\nusing this:\n  prime (order G)\n  card H dvd order G\n\ngoal (1 subgoal):\n 1. card H = 1 \\<or> card H = order G", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < order G \\<and>\n  (\\<forall>m. m dvd order G \\<longrightarrow> m = 1 \\<or> m = order G)\n  card H dvd order G\n\ngoal (1 subgoal):\n 1. card H = 1 \\<or> card H = order G", "by simp"], ["proof (state)\nthis:\n  card H = 1 \\<or> card H = order G\n\ngoal (1 subgoal):\n 1. \\<And>H. H \\<lhd> G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "thus \"H = carrier G \\<or> H = {\\<one>}\""], ["proof (prove)\nusing this:\n  card H = 1 \\<or> card H = order G\n\ngoal (1 subgoal):\n 1. H = carrier G \\<or> H = {\\<one>}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. card H = 1 \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}\n 2. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "assume \"card H = 1\""], ["proof (state)\nthis:\n  card H = 1\n\ngoal (2 subgoals):\n 1. card H = 1 \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}\n 2. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "moreover"], ["proof (state)\nthis:\n  card H = 1\n\ngoal (2 subgoals):\n 1. card H = 1 \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}\n 2. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "from HG"], ["proof (chain)\npicking this:\n  subgroup H G", "have \"\\<one> \\<in> H\""], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. \\<one> \\<in> H", "by (metis subgroup.one_closed)"], ["proof (state)\nthis:\n  \\<one> \\<in> H\n\ngoal (2 subgoals):\n 1. card H = 1 \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}\n 2. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "ultimately"], ["proof (chain)\npicking this:\n  card H = 1\n  \\<one> \\<in> H", "show ?thesis"], ["proof (prove)\nusing this:\n  card H = 1\n  \\<one> \\<in> H\n\ngoal (1 subgoal):\n 1. H = carrier G \\<or> H = {\\<one>}", "by (auto simp: card_Suc_eq)"], ["proof (state)\nthis:\n  H = carrier G \\<or> H = {\\<one>}\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "assume \"card H = order G\""], ["proof (state)\nthis:\n  card H = order G\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "moreover"], ["proof (state)\nthis:\n  card H = order G\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "from HG"], ["proof (chain)\npicking this:\n  subgroup H G", "have \"H \\<subseteq> carrier G\""], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "unfolding subgroup_def"], ["proof (prove)\nusing this:\n  (H \\<subseteq> carrier G \\<and>\n   (\\<forall>x y.\n       x \\<in> H \\<longrightarrow>\n       y \\<in> H \\<longrightarrow> x \\<otimes> y \\<in> H)) \\<and>\n  \\<one> \\<in> H \\<and>\n  (\\<forall>x. x \\<in> H \\<longrightarrow> inv x \\<in> H)\n\ngoal (1 subgoal):\n 1. H \\<subseteq> carrier G", "by simp"], ["proof (state)\nthis:\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "moreover"], ["proof (state)\nthis:\n  H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "from prime"], ["proof (chain)\npicking this:\n  prime (order G)", "have \"card (carrier G) > 1\""], ["proof (prove)\nusing this:\n  prime (order G)\n\ngoal (1 subgoal):\n 1. 1 < card (carrier G)", "unfolding order_def prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < card (carrier G) \\<and>\n  (\\<forall>m.\n      m dvd card (carrier G) \\<longrightarrow>\n      m = 1 \\<or> m = card (carrier G))\n\ngoal (1 subgoal):\n 1. 1 < card (carrier G)", ".."], ["proof (state)\nthis:\n  1 < card (carrier G)\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "hence \"finite (carrier G)\""], ["proof (prove)\nusing this:\n  1 < card (carrier G)\n\ngoal (1 subgoal):\n 1. finite (carrier G)", "by (auto simp:card_ge_0_finite)"], ["proof (state)\nthis:\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. card H = order G \\<Longrightarrow> H = carrier G \\<or> H = {\\<one>}", "ultimately"], ["proof (chain)\npicking this:\n  card H = order G\n  H \\<subseteq> carrier G\n  finite (carrier G)", "show ?thesis"], ["proof (prove)\nusing this:\n  card H = order G\n  H \\<subseteq> carrier G\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. H = carrier G \\<or> H = {\\<one>}", "unfolding order_def"], ["proof (prove)\nusing this:\n  card H = card (carrier G)\n  H \\<subseteq> carrier G\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. H = carrier G \\<or> H = {\\<one>}", "by (metis card_subset_eq)"], ["proof (state)\nthis:\n  H = carrier G \\<or> H = {\\<one>}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  H = carrier G \\<or> H = {\\<one>}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Being simple is a property that is preserved by isomorphisms.\\<close>"], ["", "lemma (in simple_group) iso_simple:\n  assumes H:\"group H\"\n  assumes iso:\"\\<phi> \\<in> iso G H\"\n  shows \"simple_group H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_group H", "unfolding simple_group_def simple_group_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group H \\<and>\n    1 < order H \\<and>\n    (\\<forall>Ha.\n        Ha \\<lhd> H \\<longrightarrow>\n        Ha = carrier H \\<or> Ha = {\\<one>\\<^bsub>H\\<^esub>})", "using assms(1)"], ["proof (prove)\nusing this:\n  Group.group H\n\ngoal (1 subgoal):\n 1. Group.group H \\<and>\n    1 < order H \\<and>\n    (\\<forall>Ha.\n        Ha \\<lhd> H \\<longrightarrow>\n        Ha = carrier H \\<or> Ha = {\\<one>\\<^bsub>H\\<^esub>})", "proof (auto del: equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. Group.group H \\<Longrightarrow> Suc 0 < order H\n 2. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "from iso"], ["proof (chain)\npicking this:\n  \\<phi> \\<in> Group.iso G H", "have \"order G = order H\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> Group.iso G H\n\ngoal (1 subgoal):\n 1. order G = order H", "unfolding iso_def order_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> {h \\<in> hom G H. bij_betw h (carrier G) (carrier H)}\n\ngoal (1 subgoal):\n 1. card (carrier G) = card (carrier H)", "using bij_betw_same_card"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> {h \\<in> hom G H. bij_betw h (carrier G) (carrier H)}\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. card (carrier G) = card (carrier H)", "by auto"], ["proof (state)\nthis:\n  order G = order H\n\ngoal (2 subgoals):\n 1. Group.group H \\<Longrightarrow> Suc 0 < order H\n 2. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "with order_gt_one"], ["proof (chain)\npicking this:\n  1 < order G\n  order G = order H", "show \"Suc 0 < order H\""], ["proof (prove)\nusing this:\n  1 < order G\n  order G = order H\n\ngoal (1 subgoal):\n 1. Suc 0 < order H", "by simp"], ["proof (state)\nthis:\n  Suc 0 < order H\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "have inv_iso:\"(inv_into (carrier G) \\<phi>) \\<in> iso H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_into (carrier G) \\<phi> \\<in> Group.iso H G", "using iso"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> Group.iso G H\n\ngoal (1 subgoal):\n 1. inv_into (carrier G) \\<phi> \\<in> Group.iso H G", "by (simp add: iso_set_sym)"], ["proof (state)\nthis:\n  inv_into (carrier G) \\<phi> \\<in> Group.iso H G\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "fix N"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "assume NH:\"N \\<lhd> H\" and Nneq1:\"N \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\""], ["proof (state)\nthis:\n  N \\<lhd> H\n  N \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "then"], ["proof (chain)\npicking this:\n  N \\<lhd> H\n  N \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}", "interpret Nnormal: normal N H"], ["proof (prove)\nusing this:\n  N \\<lhd> H\n  N \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. N \\<lhd> H", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "define M where \"M = (inv_into (carrier G) \\<phi>) ` N\""], ["proof (state)\nthis:\n  M = inv_into (carrier G) \\<phi> ` N\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "hence MG:\"M \\<lhd> G\""], ["proof (prove)\nusing this:\n  M = inv_into (carrier G) \\<phi> ` N\n\ngoal (1 subgoal):\n 1. M \\<lhd> G", "using inv_iso NH H"], ["proof (prove)\nusing this:\n  M = inv_into (carrier G) \\<phi> ` N\n  inv_into (carrier G) \\<phi> \\<in> Group.iso H G\n  N \\<lhd> H\n  Group.group H\n\ngoal (1 subgoal):\n 1. M \\<lhd> G", "by (metis is_group iso_normal_subgroup)"], ["proof (state)\nthis:\n  M \\<lhd> G\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "have surj:\"\\<phi> ` carrier G = carrier H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> ` carrier G = carrier H", "using iso"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> Group.iso G H\n\ngoal (1 subgoal):\n 1. \\<phi> ` carrier G = carrier H", "unfolding iso_def bij_betw_def"], ["proof (prove)\nusing this:\n  \\<phi>\n  \\<in> {h \\<in> hom G H.\n         inj_on h (carrier G) \\<and> h ` carrier G = carrier H}\n\ngoal (1 subgoal):\n 1. \\<phi> ` carrier G = carrier H", "by simp"], ["proof (state)\nthis:\n  \\<phi> ` carrier G = carrier H\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "hence MN:\"\\<phi> ` M = N\""], ["proof (prove)\nusing this:\n  \\<phi> ` carrier G = carrier H\n\ngoal (1 subgoal):\n 1. \\<phi> ` M = N", "unfolding M_def"], ["proof (prove)\nusing this:\n  \\<phi> ` carrier G = carrier H\n\ngoal (1 subgoal):\n 1. \\<phi> ` inv_into (carrier G) \\<phi> ` N = N", "using Nnormal.subset image_inv_into_cancel"], ["proof (prove)\nusing this:\n  \\<phi> ` carrier G = carrier H\n  N \\<subseteq> carrier H\n  \\<lbrakk>?f ` ?A = ?A'; ?B' \\<subseteq> ?A'\\<rbrakk>\n  \\<Longrightarrow> ?f ` inv_into ?A ?f ` ?B' = ?B'\n\ngoal (1 subgoal):\n 1. \\<phi> ` inv_into (carrier G) \\<phi> ` N = N", "by metis"], ["proof (state)\nthis:\n  \\<phi> ` M = N\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "moreover"], ["proof (state)\nthis:\n  \\<phi> ` M = N\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "have \"M \\<noteq> {\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<noteq> {\\<one>}", "proof(rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. M = {\\<one>} \\<Longrightarrow> False", "assume \"M = {\\<one>}\""], ["proof (state)\nthis:\n  M = {\\<one>}\n\ngoal (1 subgoal):\n 1. M = {\\<one>} \\<Longrightarrow> False", "hence \"\\<phi> ` M = {\\<phi> \\<one>}\""], ["proof (prove)\nusing this:\n  M = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<phi> ` M = {\\<phi> \\<one>}", "by (metis (full_types) image_empty image_insert)"], ["proof (state)\nthis:\n  \\<phi> ` M = {\\<phi> \\<one>}\n\ngoal (1 subgoal):\n 1. M = {\\<one>} \\<Longrightarrow> False", "hence \"\\<phi> ` M = {\\<one>\\<^bsub>H\\<^esub>}\""], ["proof (prove)\nusing this:\n  \\<phi> ` M = {\\<phi> \\<one>}\n\ngoal (1 subgoal):\n 1. \\<phi> ` M = {\\<one>\\<^bsub>H\\<^esub>}", "by (metis (lifting) Nnormal.is_subgroup MN calculation singleton_iff subgroup.one_closed)"], ["proof (state)\nthis:\n  \\<phi> ` M = {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. M = {\\<one>} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<phi> ` M = {\\<one>\\<^bsub>H\\<^esub>}\n\ngoal (1 subgoal):\n 1. False", "using Nneq1 MN"], ["proof (prove)\nusing this:\n  \\<phi> ` M = {\\<one>\\<^bsub>H\\<^esub>}\n  N \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\n  \\<phi> ` M = N\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M \\<noteq> {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "hence \"M = carrier G\""], ["proof (prove)\nusing this:\n  M \\<noteq> {\\<one>}\n\ngoal (1 subgoal):\n 1. M = carrier G", "using no_real_normal_subgroup MG"], ["proof (prove)\nusing this:\n  M \\<noteq> {\\<one>}\n  ?H \\<lhd> G \\<Longrightarrow> ?H = carrier G \\<or> ?H = {\\<one>}\n  M \\<lhd> G\n\ngoal (1 subgoal):\n 1. M = carrier G", "by auto"], ["proof (state)\nthis:\n  M = carrier G\n\ngoal (1 subgoal):\n 1. \\<And>Ha.\n       \\<lbrakk>Group.group H; Ha \\<lhd> H;\n        Ha \\<noteq> {\\<one>\\<^bsub>H\\<^esub>}\\<rbrakk>\n       \\<Longrightarrow> Ha = carrier H", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> ` M = N\n  M = carrier G", "show \"N = carrier H\""], ["proof (prove)\nusing this:\n  \\<phi> ` M = N\n  M = carrier G\n\ngoal (1 subgoal):\n 1. N = carrier H", "using surj"], ["proof (prove)\nusing this:\n  \\<phi> ` M = N\n  M = carrier G\n  \\<phi> ` carrier G = carrier H\n\ngoal (1 subgoal):\n 1. N = carrier H", "by simp"], ["proof (state)\nthis:\n  N = carrier H\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>As a corollary of this: Factorizing a group by itself does not result in a simple group!\\<close>"], ["", "lemma (in group) self_factor_not_simple:\"\\<not> simple_group (G Mod (carrier G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> simple_group (G Mod carrier G)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. simple_group (G Mod carrier G) \\<Longrightarrow> False", "assume assm:\"simple_group (G Mod (carrier G))\""], ["proof (state)\nthis:\n  simple_group (G Mod carrier G)\n\ngoal (1 subgoal):\n 1. simple_group (G Mod carrier G) \\<Longrightarrow> False", "have \"group (G\\<lparr>carrier :=  {\\<one>}\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := {\\<one>}\\<rparr>)", "by (metis subgroup_imp_group triv_subgroup)"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. simple_group (G Mod carrier G) \\<Longrightarrow> False", "with assm self_factor_iso simple_group.iso_simple"], ["proof (chain)\npicking this:\n  simple_group (G Mod carrier G)\n  (\\<lambda>X. the_elem ((\\<lambda>x. \\<one>) ` X))\n  \\<in> Group.iso (G Mod carrier G) (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n  \\<lbrakk>simple_group ?G; Group.group ?H;\n   ?\\<phi> \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> simple_group ?H\n  Group.group (G\\<lparr>carrier := {\\<one>}\\<rparr>)", "have \"simple_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)\""], ["proof (prove)\nusing this:\n  simple_group (G Mod carrier G)\n  (\\<lambda>X. the_elem ((\\<lambda>x. \\<one>) ` X))\n  \\<in> Group.iso (G Mod carrier G) (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n  \\<lbrakk>simple_group ?G; Group.group ?H;\n   ?\\<phi> \\<in> Group.iso ?G ?H\\<rbrakk>\n  \\<Longrightarrow> simple_group ?H\n  Group.group (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. simple_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  simple_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. simple_group (G Mod carrier G) \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. False", "using simple_group.simple_not_triv"], ["proof (prove)\nusing this:\n  simple_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n  simple_group ?G \\<Longrightarrow>\n  carrier ?G \\<noteq> {\\<one>\\<^bsub>?G\\<^esub>}\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}