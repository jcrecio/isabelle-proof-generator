{"file_name": "/home/qj213/afp-2021-10-22/thys/List_Interleaving/ListInterleaving.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List_Interleaving", "problem_names": ["lemma interleaves_length [rule_format]:\n \"xs \\<simeq> {ys, zs, P} \\<longrightarrow> length xs = length ys + length zs\"", "lemma interleaves_nil:\n \"[] \\<simeq> {ys, zs, P} \\<Longrightarrow> ys = [] \\<and> zs = []\"", "lemma interleaves_swap:\n \"xs \\<simeq> {ys, zs, P} = xs \\<simeq> {zs, ys, \\<lambda>w ws. \\<not> P w ws}\"", "lemma interleaves_equal_fst [rule_format]:\n \"xs \\<simeq> {ys, zs, P} \\<longrightarrow> xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys'\"", "lemma interleaves_equal_snd:\n \"xs \\<simeq> {ys, zs, P} \\<Longrightarrow> xs \\<simeq> {ys, zs', P} \\<Longrightarrow> zs = zs'\"", "lemma interleaves_all_nil:\n \"xs \\<simeq> {xs, [], P}\"", "lemma interleaves_nil_all:\n \"xs \\<simeq> {[], xs, P}\"", "lemma interleaves_equal_all_nil:\n \"xs \\<simeq> {ys, [], P} \\<Longrightarrow> xs = ys\"", "lemma interleaves_equal_nil_all:\n \"xs \\<simeq> {[], zs, P} \\<Longrightarrow> xs = zs\"", "lemma interleaves_filter [rule_format]:\n  assumes A: \"\\<forall>x xs. P x (filter Q xs) = P x xs\"\n  shows \"xs \\<simeq> {ys, zs, P} \\<longrightarrow> filter Q xs \\<simeq> {filter Q ys, filter Q zs, P}\"", "lemma interleaves_map [rule_format]:\n  assumes A: \"inj f\"\n  shows \"xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n    map f xs \\<simeq> {map f ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\"\n    (is \"_ \\<longrightarrow> _ \\<simeq> {_, _, ?P'}\")", "lemma interleaves_prefix_fst_1 [rule_format]:\n  assumes A: \"xs \\<simeq> {ys, zs, P}\"\n  shows \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<simeq> {ws @ ys, zs, P}\"", "lemma interleaves_prefix_fst_2 [rule_format]:\n \"ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\"", "lemma interleaves_prefix_fst [rule_format]:\n \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<simeq> {ys, zs, P} = ws @ xs \\<simeq> {ws @ ys, zs, P}\"", "lemma interleaves_prefix_snd [rule_format]:\n \"\\<forall>n < length ws. \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<simeq> {ys, zs, P} = ws @ xs \\<simeq> {ys, ws @ zs, P}\"", "lemma Interleaves_interleaves [rule_format]:\n \"xs \\<cong> {ys, zs, P} \\<longrightarrow> xs \\<simeq> {ys, zs, P}\"", "lemma Interleaves_length:\n \"xs \\<cong> {ys, zs, P} \\<Longrightarrow> length xs = length ys + length zs\"", "lemma Interleaves_nil:\n \"[] \\<cong> {ys, zs, P} \\<Longrightarrow> ys = [] \\<and> zs = []\"", "lemma Interleaves_swap:\n \"xs \\<cong> {ys, zs, P} = xs \\<cong> {zs, ys, \\<lambda>w ws. \\<not> P w ws}\"", "lemma Interleaves_equal_fst:\n \"xs \\<cong> {ys, zs, P} \\<Longrightarrow> xs \\<cong> {ys', zs, P} \\<Longrightarrow> ys = ys'\"", "lemma Interleaves_equal_snd:\n \"xs \\<cong> {ys, zs, P} \\<Longrightarrow> xs \\<cong> {ys, zs', P} \\<Longrightarrow> zs = zs'\"", "lemma Interleaves_equal_all_nil:\n \"xs \\<cong> {ys, [], P} \\<Longrightarrow> xs = ys\"", "lemma Interleaves_equal_nil_all:\n \"xs \\<cong> {[], zs, P} \\<Longrightarrow> xs = zs\"", "lemma Interleaves_filter [rule_format]:\n  assumes A: \"\\<forall>x xs. P x (filter Q xs) = P x xs\"\n  shows \"xs \\<cong> {ys, zs, P} \\<longrightarrow> filter Q xs \\<cong> {filter Q ys, filter Q zs, P}\"", "lemma Interleaves_map [rule_format]:\n  assumes A: \"inj f\"\n  shows \"xs \\<cong> {ys, zs, P} \\<longrightarrow>\n    map f xs \\<cong> {map f ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\"\n    (is \"_ \\<longrightarrow> _ \\<cong> {_, _, ?P'}\")", "lemma Interleaves_prefix_fst_1 [rule_format]:\n  assumes A: \"xs \\<cong> {ys, zs, P}\"\n  shows \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<cong> {ws @ ys, zs, P}\"", "lemma Interleaves_prefix_fst_2 [rule_format]:\n \"ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\"", "lemma Interleaves_prefix_fst [rule_format]:\n \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, P} = ws @ xs \\<cong> {ws @ ys, zs, P}\"", "lemma Interleaves_prefix_snd [rule_format]:\n \"\\<forall>n < length ws. \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, P} = ws @ xs \\<cong> {ys, ws @ zs, P}\"", "lemma Interleaves_all_nil_1 [rule_format]:\n \"xs \\<cong> {xs, [], P} \\<longrightarrow> (\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs))\"", "lemma Interleaves_all_nil_2 [rule_format]:\n \"\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs) \\<Longrightarrow> xs \\<cong> {xs, [], P}\"", "lemma Interleaves_all_nil:\n \"xs \\<cong> {xs, [], P} = (\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs))\"", "lemma Interleaves_nil_all:\n \"xs \\<cong> {[], xs, P} = (\\<forall>n < length xs. \\<not> P (xs ! n) (drop (Suc n) xs))\"", "lemma Interleaves_suffix_one_aux:\n  assumes A: \"P x []\"\n  shows \"\\<not> xs @ [x] \\<cong> {[], zs, P}\"", "lemma Interleaves_suffix_one_fst_2 [rule_format]:\n  assumes A: \"P x []\"\n  shows \"xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow> xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\"\n    (is \"_ \\<longrightarrow> _ \\<cong> {_, _, ?P'}\")", "lemma Interleaves_suffix_fst_1 [rule_format]:\n  assumes A: \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws)\"\n  shows \"xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow> xs @ ws \\<cong> {ys @ ws, zs, P}\"\n    (is \"_ \\<cong> {_, _, ?P'} \\<longrightarrow> _\")", "lemma Interleaves_suffix_one_fst_1 [rule_format]:\n \"P x [] \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} \\<Longrightarrow> xs @ [x] \\<cong> {ys @ [x], zs, P}\"", "lemma Interleaves_suffix_one_fst:\n \"P x [] \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} = xs @ [x] \\<cong> {ys @ [x], zs, P}\"", "lemma Interleaves_suffix_one_snd:\n \"\\<not> P x [] \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} = xs @ [x] \\<cong> {ys, zs @ [x], P}\"", "lemma Interleaves_suffix_aux [rule_format]:\n \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n  x # xs @ ws \\<cong> {ws, zs, P} \\<longrightarrow>\n  \\<not> P x (xs @ ws)\"", "lemma Interleaves_suffix_fst_2 [rule_format]:\n  assumes A: \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws)\"\n  shows \"xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow> xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\"\n    (is \"_ \\<longrightarrow> _ \\<cong> {_, _, ?P'}\")", "lemma Interleaves_suffix_fst [rule_format]:\n \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} = xs @ ws \\<cong> {ys @ ws, zs, P}\"", "lemma Interleaves_suffix_snd [rule_format]:\n \"\\<forall>n < length ws. \\<not> P (ws ! n) (drop (Suc n) ws) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} = xs @ ws \\<cong> {ys, zs @ ws, P}\""], "translations": [["", "lemma interleaves_length [rule_format]:\n \"xs \\<simeq> {ys, zs, P} \\<longrightarrow> length xs = length ys + length zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n    length xs = length ys + length zs", "proof (induction P xs ys zs rule: interleaves.induct, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P x xs y ys z zs.\n       \\<lbrakk>P x xs \\<Longrightarrow>\n                xs \\<simeq> {ys, z # zs, P} \\<longrightarrow>\n                length xs = Suc (length ys + length zs);\n        \\<not> P x xs \\<Longrightarrow>\n        xs \\<simeq> {y # ys, zs, P} \\<longrightarrow>\n        length xs = Suc (length ys + length zs)\\<rbrakk>\n       \\<Longrightarrow> (P x xs \\<longrightarrow>\n                          x = y \\<and>\n                          xs \\<simeq> {ys, z # zs, P} \\<longrightarrow>\n                          length xs = Suc (length ys + length zs)) \\<and>\n                         (\\<not> P x xs \\<longrightarrow>\n                          x = z \\<and>\n                          xs \\<simeq> {y # ys, zs, P} \\<longrightarrow>\n                          length xs = Suc (length ys + length zs))", "qed (rule conjI, (rule_tac [!] impI)+, simp_all)"], ["", "lemma interleaves_nil:\n \"[] \\<simeq> {ys, zs, P} \\<Longrightarrow> ys = [] \\<and> zs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<simeq> {ys, zs, P} \\<Longrightarrow> ys = [] \\<and> zs = []", "by (rule interleaves.cases [of \"(P, [], ys, zs)\"], simp_all)"], ["", "lemma interleaves_swap:\n \"xs \\<simeq> {ys, zs, P} = xs \\<simeq> {zs, ys, \\<lambda>w ws. \\<not> P w ws}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, zs, P} =\n    xs \\<simeq> {zs, ys, \\<lambda>w ws. \\<not> P w ws}", "proof (induction P xs ys zs rule: interleaves.induct, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ uy_ uz_ va_.\n       \\<not> [] \\<simeq> {va_, uy_ # uz_, \\<lambda>w ws. \\<not> ux_ w ws}", "fix y' :: 'a and ys' zs' P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ uy_ uz_ va_.\n       \\<not> [] \\<simeq> {va_, uy_ # uz_, \\<lambda>w ws. \\<not> ux_ w ws}", "show \"\\<not> [] \\<simeq> {zs', y' # ys', \\<lambda>w ws. \\<not> P' w ws}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> [] \\<simeq> {zs', y' # ys', \\<lambda>w ws. \\<not> P' w ws}", "by (cases zs', simp_all)"], ["proof (state)\nthis:\n  \\<not> [] \\<simeq> {zs', y' # ys', \\<lambda>w ws. \\<not> P' w ws}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleaves_equal_fst [rule_format]:\n \"xs \\<simeq> {ys, zs, P} \\<longrightarrow> xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n    xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys'", "proof (induction xs arbitrary: ys ys' zs, (rule_tac [!] impI)+)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "fix ys ys' zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "assume \"[] \\<simeq> {ys, zs, P}\""], ["proof (state)\nthis:\n  [] \\<simeq> {ys, zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "hence \"ys = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. ys = [] \\<and> zs = []", "by (rule interleaves_nil)"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "moreover"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "assume \"[] \\<simeq> {ys', zs, P}\""], ["proof (state)\nthis:\n  [] \\<simeq> {ys', zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "hence \"ys' = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<simeq> {ys', zs, P}\n\ngoal (1 subgoal):\n 1. ys' = [] \\<and> zs = []", "by (rule interleaves_nil)"], ["proof (state)\nthis:\n  ys' = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys ys' zs.\n       \\<lbrakk>[] \\<simeq> {ys, zs, P}; [] \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'\n 2. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "ultimately"], ["proof (chain)\npicking this:\n  ys = [] \\<and> zs = []\n  ys' = [] \\<and> zs = []", "show \"ys = ys'\""], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n  ys' = [] \\<and> zs = []\n\ngoal (1 subgoal):\n 1. ys = ys'", "by simp"], ["proof (state)\nthis:\n  ys = ys'\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "fix x xs ys ys' zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "assume\n    A: \"\\<And>ys ys' zs. xs \\<simeq> {ys, zs, P} \\<longrightarrow> xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys'\" and\n    B: \"x # xs \\<simeq> {ys, zs, P}\" and\n    B': \"x # xs \\<simeq> {ys', zs, P}\""], ["proof (state)\nthis:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  xs \\<simeq> {?ys', ?zs, P} \\<longrightarrow> ?ys = ?ys'\n  x # xs \\<simeq> {ys, zs, P}\n  x # xs \\<simeq> {ys', zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys ys' zs.\n       \\<lbrakk>\\<And>ys ys' zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   xs \\<simeq> {ys', zs, P} \\<longrightarrow> ys = ys';\n        a # xs \\<simeq> {ys, zs, P}; a # xs \\<simeq> {ys', zs, P}\\<rbrakk>\n       \\<Longrightarrow> ys = ys'", "show \"ys = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = ys'", "proof (cases zs, case_tac [2] ys, case_tac [2-3] ys', simp_all)"], ["proof (state)\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume C: \"zs = []\""], ["proof (state)\nthis:\n  zs = []\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"\\<exists>w ws. ys = w # ws\""], ["proof (prove)\nusing this:\n  zs = []\n\ngoal (1 subgoal):\n 1. \\<exists>w ws. ys = w # ws", "using B"], ["proof (prove)\nusing this:\n  zs = []\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<exists>w ws. ys = w # ws", "by (cases ys, simp_all)"], ["proof (state)\nthis:\n  \\<exists>w ws. ys = w # ws\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "then"], ["proof (chain)\npicking this:\n  \\<exists>w ws. ys = w # ws", "obtain w ws where Y: \"ys = w # ws\""], ["proof (prove)\nusing this:\n  \\<exists>w ws. ys = w # ws\n\ngoal (1 subgoal):\n 1. (\\<And>w ws. ys = w # ws \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ys = w # ws\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence D: \"w = x\""], ["proof (prove)\nusing this:\n  ys = w # ws\n\ngoal (1 subgoal):\n 1. w = x", "using B and C"], ["proof (prove)\nusing this:\n  ys = w # ws\n  x # xs \\<simeq> {ys, zs, P}\n  zs = []\n\ngoal (1 subgoal):\n 1. w = x", "by simp"], ["proof (state)\nthis:\n  w = x\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {ws, [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, [], P}", "using B and C and Y"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys, zs, P}\n  zs = []\n  ys = w # ws\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, [], P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {ws, [], P}\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {ws, [], P}\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"\\<exists>w' ws'. ys' = w' # ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w' ws'. ys' = w' # ws'", "using B' and C"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys', zs, P}\n  zs = []\n\ngoal (1 subgoal):\n 1. \\<exists>w' ws'. ys' = w' # ws'", "by (cases ys', simp_all)"], ["proof (state)\nthis:\n  \\<exists>w' ws'. ys' = w' # ws'\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "then"], ["proof (chain)\npicking this:\n  \\<exists>w' ws'. ys' = w' # ws'", "obtain w' ws' where Y': \"ys' = w' # ws'\""], ["proof (prove)\nusing this:\n  \\<exists>w' ws'. ys' = w' # ws'\n\ngoal (1 subgoal):\n 1. (\\<And>w' ws'.\n        ys' = w' # ws' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ys' = w' # ws'\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence D': \"w' = x\""], ["proof (prove)\nusing this:\n  ys' = w' # ws'\n\ngoal (1 subgoal):\n 1. w' = x", "using B' and C"], ["proof (prove)\nusing this:\n  ys' = w' # ws'\n  x # xs \\<simeq> {ys', zs, P}\n  zs = []\n\ngoal (1 subgoal):\n 1. w' = x", "by simp"], ["proof (state)\nthis:\n  w' = x\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {ws', [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws', [], P}", "using B' and C and Y'"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys', zs, P}\n  zs = []\n  ys' = w' # ws'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws', [], P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {ws', [], P}\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {ws', [], P}\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {ws, [], P} \\<longrightarrow> xs \\<simeq> {ws', [], P} \\<longrightarrow> ws = ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, [], P} \\<longrightarrow>\n    xs \\<simeq> {ws', [], P} \\<longrightarrow> ws = ws'", "using A"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  xs \\<simeq> {?ys', ?zs, P} \\<longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, [], P} \\<longrightarrow>\n    xs \\<simeq> {ws', [], P} \\<longrightarrow> ws = ws'", "."], ["proof (state)\nthis:\n  xs \\<simeq> {ws, [], P} \\<longrightarrow>\n  xs \\<simeq> {ws', [], P} \\<longrightarrow> ws = ws'\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<simeq> {ws, [], P}\n  xs \\<simeq> {ws', [], P}\n  xs \\<simeq> {ws, [], P} \\<longrightarrow>\n  xs \\<simeq> {ws', [], P} \\<longrightarrow> ws = ws'", "have \"ws = ws'\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {ws, [], P}\n  xs \\<simeq> {ws', [], P}\n  xs \\<simeq> {ws, [], P} \\<longrightarrow>\n  xs \\<simeq> {ws', [], P} \\<longrightarrow> ws = ws'\n\ngoal (1 subgoal):\n 1. ws = ws'", "by simp"], ["proof (state)\nthis:\n  ws = ws'\n\ngoal (4 subgoals):\n 1. zs = [] \\<Longrightarrow> ys = ys'\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "with Y and Y' and D and D'"], ["proof (chain)\npicking this:\n  ys = w # ws\n  ys' = w' # ws'\n  w = x\n  w' = x\n  ws = ws'", "show ?thesis"], ["proof (prove)\nusing this:\n  ys = w # ws\n  ys' = w' # ws'\n  w = x\n  w' = x\n  ws = ws'\n\ngoal (1 subgoal):\n 1. ys = ys'", "by simp"], ["proof (state)\nthis:\n  ys = ys'\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "fix v vs w' ws'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume C: \"zs = v # vs\" and \"ys = []\""], ["proof (state)\nthis:\n  zs = v # vs\n  ys = []\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence D: \"xs \\<simeq> {[], vs, P}\""], ["proof (prove)\nusing this:\n  zs = v # vs\n  ys = []\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P}", "using B"], ["proof (prove)\nusing this:\n  zs = v # vs\n  ys = []\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {[], vs, P}\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume E: \"ys' = w' # ws'\""], ["proof (state)\nthis:\n  ys' = w' # ws'\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"P x xs \\<or> \\<not> P x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x xs \\<or> \\<not> P x xs", "by simp"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "{"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume \"P x xs\""], ["proof (state)\nthis:\n  P x xs\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"xs \\<simeq> {ws', v # vs, P}\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws', v # vs, P}", "using B' and C and E"], ["proof (prove)\nusing this:\n  P x xs\n  x # xs \\<simeq> {ys', zs, P}\n  zs = v # vs\n  ys' = w' # ws'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws', v # vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {ws', v # vs, P}\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"length xs = Suc (length vs) + length ws'\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {ws', v # vs, P}\n\ngoal (1 subgoal):\n 1. length xs = Suc (length vs) + length ws'", "by (simp add: interleaves_length)"], ["proof (state)\nthis:\n  length xs = Suc (length vs) + length ws'\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  length xs = Suc (length vs) + length ws'\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"length xs = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length vs", "using D"], ["proof (prove)\nusing this:\n  xs \\<simeq> {[], vs, P}\n\ngoal (1 subgoal):\n 1. length xs = length vs", "by (simp add: interleaves_length)"], ["proof (state)\nthis:\n  length xs = length vs\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  length xs = Suc (length vs) + length ws'\n  length xs = length vs", "have False"], ["proof (prove)\nusing this:\n  length xs = Suc (length vs) + length ws'\n  length xs = length vs\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "}"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "{"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume \"\\<not> P x xs\""], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"xs \\<simeq> {w' # ws', vs, P}\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w' # ws', vs, P}", "using B' and C and E"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  x # xs \\<simeq> {ys', zs, P}\n  zs = v # vs\n  ys' = w' # ws'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w' # ws', vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {w' # ws', vs, P}\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {w' # ws', vs, P}\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {[], vs, P} \\<longrightarrow> xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow>\n        [] = w' # ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P} \\<longrightarrow>\n    xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> [] = w' # ws'", "using A"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  xs \\<simeq> {?ys', ?zs, P} \\<longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P} \\<longrightarrow>\n    xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> [] = w' # ws'", "."], ["proof (state)\nthis:\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> [] = w' # ws'\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<simeq> {w' # ws', vs, P}\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> [] = w' # ws'", "have \"[] = w' # ws'\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {w' # ws', vs, P}\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> [] = w' # ws'\n\ngoal (1 subgoal):\n 1. [] = w' # ws'", "using D"], ["proof (prove)\nusing this:\n  xs \\<simeq> {w' # ws', vs, P}\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> [] = w' # ws'\n  xs \\<simeq> {[], vs, P}\n\ngoal (1 subgoal):\n 1. [] = w' # ws'", "by simp"], ["proof (state)\nthis:\n  [] = w' # ws'\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence False"], ["proof (prove)\nusing this:\n  [] = w' # ws'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "}"], ["proof (state)\nthis:\n  \\<not> P x xs \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = []; ys' = aa # lista\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  P x xs \\<or> \\<not> P x xs\n  P x xs \\<Longrightarrow> False\n  \\<not> P x xs \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  P x xs \\<or> \\<not> P x xs\n  P x xs \\<Longrightarrow> False\n  \\<not> P x xs \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "fix v vs w ws"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume C: \"zs = v # vs\" and \"ys' = []\""], ["proof (state)\nthis:\n  zs = v # vs\n  ys' = []\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence D: \"xs \\<simeq> {[], vs, P}\""], ["proof (prove)\nusing this:\n  zs = v # vs\n  ys' = []\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P}", "using B'"], ["proof (prove)\nusing this:\n  zs = v # vs\n  ys' = []\n  x # xs \\<simeq> {ys', zs, P}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {[], vs, P}\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume E: \"ys = w # ws\""], ["proof (state)\nthis:\n  ys = w # ws\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"P x xs \\<or> \\<not> P x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x xs \\<or> \\<not> P x xs", "by simp"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "{"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume \"P x xs\""], ["proof (state)\nthis:\n  P x xs\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"xs \\<simeq> {ws, v # vs, P}\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, v # vs, P}", "using B and C and E"], ["proof (prove)\nusing this:\n  P x xs\n  x # xs \\<simeq> {ys, zs, P}\n  zs = v # vs\n  ys = w # ws\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, v # vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {ws, v # vs, P}\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"length xs = Suc (length vs) + length ws\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {ws, v # vs, P}\n\ngoal (1 subgoal):\n 1. length xs = Suc (length vs) + length ws", "by (simp add: interleaves_length)"], ["proof (state)\nthis:\n  length xs = Suc (length vs) + length ws\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  length xs = Suc (length vs) + length ws\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"length xs = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length vs", "using D"], ["proof (prove)\nusing this:\n  xs \\<simeq> {[], vs, P}\n\ngoal (1 subgoal):\n 1. length xs = length vs", "by (simp add: interleaves_length)"], ["proof (state)\nthis:\n  length xs = length vs\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  length xs = Suc (length vs) + length ws\n  length xs = length vs", "have False"], ["proof (prove)\nusing this:\n  length xs = Suc (length vs) + length ws\n  length xs = length vs\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "}"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "{"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume \"\\<not> P x xs\""], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"xs \\<simeq> {w # ws, vs, P}\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w # ws, vs, P}", "using B and C and E"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  x # xs \\<simeq> {ys, zs, P}\n  zs = v # vs\n  ys = w # ws\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w # ws, vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {w # ws, vs, P}\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {w # ws, vs, P}\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {[], vs, P} \\<longrightarrow> xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P} \\<longrightarrow>\n    xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws", "using A"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  xs \\<simeq> {?ys', ?zs, P} \\<longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], vs, P} \\<longrightarrow>\n    xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws", "."], ["proof (state)\nthis:\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<simeq> {w # ws, vs, P}\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws", "have \"[] = w # ws\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {w # ws, vs, P}\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws\n\ngoal (1 subgoal):\n 1. [] = w # ws", "using D"], ["proof (prove)\nusing this:\n  xs \\<simeq> {w # ws, vs, P}\n  xs \\<simeq> {[], vs, P} \\<longrightarrow>\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> [] = w # ws\n  xs \\<simeq> {[], vs, P}\n\ngoal (1 subgoal):\n 1. [] = w # ws", "by simp"], ["proof (state)\nthis:\n  [] = w # ws\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence False"], ["proof (prove)\nusing this:\n  [] = w # ws\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "}"], ["proof (state)\nthis:\n  \\<not> P x xs \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  P x xs \\<or> \\<not> P x xs\n  P x xs \\<Longrightarrow> False\n  \\<not> P x xs \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  P x xs \\<or> \\<not> P x xs\n  P x xs \\<Longrightarrow> False\n  \\<not> P x xs \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "fix v vs w ws w' ws'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume C: \"zs = v # vs\" and D: \"ys = w # ws\" and D': \"ys' = w' # ws'\""], ["proof (state)\nthis:\n  zs = v # vs\n  ys = w # ws\n  ys' = w' # ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"P x xs \\<or> \\<not> P x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x xs \\<or> \\<not> P x xs", "by simp"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "{"], ["proof (state)\nthis:\n  P x xs \\<or> \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume E: \"P x xs\""], ["proof (state)\nthis:\n  P x xs\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence F: \"w = x\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. w = x", "using B and C and D"], ["proof (prove)\nusing this:\n  P x xs\n  x # xs \\<simeq> {ys, zs, P}\n  zs = v # vs\n  ys = w # ws\n\ngoal (1 subgoal):\n 1. w = x", "by simp"], ["proof (state)\nthis:\n  w = x\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {ws, v # vs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, v # vs, P}", "using B and C and D and E"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys, zs, P}\n  zs = v # vs\n  ys = w # ws\n  P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, v # vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {ws, v # vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {ws, v # vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have F': \"w' = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' = x", "using B' and C and D' and E"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys', zs, P}\n  zs = v # vs\n  ys' = w' # ws'\n  P x xs\n\ngoal (1 subgoal):\n 1. w' = x", "by simp"], ["proof (state)\nthis:\n  w' = x\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {ws', v # vs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws', v # vs, P}", "using B' and C and D' and E"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys', zs, P}\n  zs = v # vs\n  ys' = w' # ws'\n  P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws', v # vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {ws', v # vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {ws', v # vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {ws, v # vs, P} \\<longrightarrow> xs \\<simeq> {ws', v # vs, P} \\<longrightarrow>\n        ws = ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, v # vs, P} \\<longrightarrow>\n    xs \\<simeq> {ws', v # vs, P} \\<longrightarrow> ws = ws'", "using A"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  xs \\<simeq> {?ys', ?zs, P} \\<longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ws, v # vs, P} \\<longrightarrow>\n    xs \\<simeq> {ws', v # vs, P} \\<longrightarrow> ws = ws'", "."], ["proof (state)\nthis:\n  xs \\<simeq> {ws, v # vs, P} \\<longrightarrow>\n  xs \\<simeq> {ws', v # vs, P} \\<longrightarrow> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<simeq> {ws, v # vs, P}\n  xs \\<simeq> {ws', v # vs, P}\n  xs \\<simeq> {ws, v # vs, P} \\<longrightarrow>\n  xs \\<simeq> {ws', v # vs, P} \\<longrightarrow> ws = ws'", "have \"ws = ws'\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {ws, v # vs, P}\n  xs \\<simeq> {ws', v # vs, P}\n  xs \\<simeq> {ws, v # vs, P} \\<longrightarrow>\n  xs \\<simeq> {ws', v # vs, P} \\<longrightarrow> ws = ws'\n\ngoal (1 subgoal):\n 1. ws = ws'", "by simp"], ["proof (state)\nthis:\n  ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"w = w' \\<and> ws = ws'\""], ["proof (prove)\nusing this:\n  ws = ws'\n\ngoal (1 subgoal):\n 1. w = w' \\<and> ws = ws'", "using F and F'"], ["proof (prove)\nusing this:\n  ws = ws'\n  w = x\n  w' = x\n\ngoal (1 subgoal):\n 1. w = w' \\<and> ws = ws'", "by simp"], ["proof (state)\nthis:\n  w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "}"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "{"], ["proof (state)\nthis:\n  P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "assume E: \"\\<not> P x xs\""], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"xs \\<simeq> {w # ws, vs, P}\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w # ws, vs, P}", "using B and C and D"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  x # xs \\<simeq> {ys, zs, P}\n  zs = v # vs\n  ys = w # ws\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w # ws, vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {w # ws, vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {w # ws, vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {w' # ws', vs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {w' # ws', vs, P}", "using B' and C and D' and E"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {ys', zs, P}\n  zs = v # vs\n  ys' = w' # ws'\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w' # ws', vs, P}", "by simp"], ["proof (state)\nthis:\n  xs \\<simeq> {w' # ws', vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "moreover"], ["proof (state)\nthis:\n  xs \\<simeq> {w' # ws', vs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "have \"xs \\<simeq> {w # ws, vs, P} \\<longrightarrow> xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow>\n        w # ws = w' # ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {w # ws, vs, P} \\<longrightarrow>\n    xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> w # ws = w' # ws'", "using A"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  xs \\<simeq> {?ys', ?zs, P} \\<longrightarrow> ?ys = ?ys'\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {w # ws, vs, P} \\<longrightarrow>\n    xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> w # ws = w' # ws'", "."], ["proof (state)\nthis:\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> w # ws = w' # ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<simeq> {w # ws, vs, P}\n  xs \\<simeq> {w' # ws', vs, P}\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> w # ws = w' # ws'", "have \"w # ws = w' # ws'\""], ["proof (prove)\nusing this:\n  xs \\<simeq> {w # ws, vs, P}\n  xs \\<simeq> {w' # ws', vs, P}\n  xs \\<simeq> {w # ws, vs, P} \\<longrightarrow>\n  xs \\<simeq> {w' # ws', vs, P} \\<longrightarrow> w # ws = w' # ws'\n\ngoal (1 subgoal):\n 1. w # ws = w' # ws'", "by simp"], ["proof (state)\nthis:\n  w # ws = w' # ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "hence \"w = w' \\<and> ws = ws'\""], ["proof (prove)\nusing this:\n  w # ws = w' # ws'\n\ngoal (1 subgoal):\n 1. w = w' \\<and> ws = ws'", "by simp"], ["proof (state)\nthis:\n  w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "}"], ["proof (state)\nthis:\n  \\<not> P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista ab listb.\n       \\<lbrakk>zs = a # list; ys = aa # lista; ys' = ab # listb\\<rbrakk>\n       \\<Longrightarrow> aa = ab \\<and> lista = listb", "ultimately"], ["proof (chain)\npicking this:\n  P x xs \\<or> \\<not> P x xs\n  P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n  \\<not> P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'", "show \"w = w' \\<and> ws = ws'\""], ["proof (prove)\nusing this:\n  P x xs \\<or> \\<not> P x xs\n  P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n  \\<not> P x xs \\<Longrightarrow> w = w' \\<and> ws = ws'\n\ngoal (1 subgoal):\n 1. w = w' \\<and> ws = ws'", ".."], ["proof (state)\nthis:\n  w = w' \\<and> ws = ws'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ys = ys'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleaves_equal_snd:\n \"xs \\<simeq> {ys, zs, P} \\<Longrightarrow> xs \\<simeq> {ys, zs', P} \\<Longrightarrow> zs = zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<simeq> {ys, zs, P}; xs \\<simeq> {ys, zs', P}\\<rbrakk>\n    \\<Longrightarrow> zs = zs'", "by (subst (asm) (1 2) interleaves_swap, rule interleaves_equal_fst)"], ["", "text \\<open>\n\\null\n\nSince \\emph{interleaves} statements permit to prove equalities between lists without the need of an\ninduction, it is useful to search for rules that allow to infer such statements themselves without\ninduction, which is precisely what is done here below. Particularly, it is proven that under proper\nassumptions, predicate @{term interleaves} keeps being satisfied by applying a filter, a mapping, or\nthe addition or removal of a prefix to the input lists.\n\n\\null\n\\<close>"], ["", "lemma interleaves_all_nil:\n \"xs \\<simeq> {xs, [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {xs, [], P}", "by (induction xs, simp_all)"], ["", "lemma interleaves_nil_all:\n \"xs \\<simeq> {[], xs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], xs, P}", "by (induction xs, simp_all)"], ["", "lemma interleaves_equal_all_nil:\n \"xs \\<simeq> {ys, [], P} \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, [], P} \\<Longrightarrow> xs = ys", "by (insert interleaves_all_nil, rule interleaves_equal_fst)"], ["", "lemma interleaves_equal_nil_all:\n \"xs \\<simeq> {[], zs, P} \\<Longrightarrow> xs = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], zs, P} \\<Longrightarrow> xs = zs", "by (insert interleaves_nil_all, rule interleaves_equal_snd)"], ["", "lemma interleaves_filter [rule_format]:\n  assumes A: \"\\<forall>x xs. P x (filter Q xs) = P x xs\"\n  shows \"xs \\<simeq> {ys, zs, P} \\<longrightarrow> filter Q xs \\<simeq> {filter Q ys, filter Q zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q ys, filter Q zs, P}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "assume \"[] \\<simeq> {ys, zs, P}\""], ["proof (state)\nthis:\n  [] \\<simeq> {ys, zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "hence \"ys = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. ys = [] \\<and> zs = []", "by (rule interleaves_nil)"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "thus \"[] \\<simeq> {filter Q ys, filter Q zs, P}\""], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n\ngoal (1 subgoal):\n 1. [] \\<simeq> {filter Q ys, filter Q zs, P}", "by simp"], ["proof (state)\nthis:\n  [] \\<simeq> {filter Q ys, filter Q zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "fix x xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "assume\n    B: \"\\<And>ys' zs'. xs \\<simeq> {ys', zs', P} \\<longrightarrow>\n      filter Q xs \\<simeq> {filter Q ys', filter Q zs', P}\" and\n    C: \"x # xs \\<simeq> {ys, zs, P}\""], ["proof (state)\nthis:\n  xs \\<simeq> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ?ys', filter Q ?zs', P}\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<simeq> {filter Q ys, filter Q zs, P};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "show \"filter Q (x # xs) \\<simeq> {filter Q ys, filter Q zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q ys, filter Q zs, P}", "proof (cases ys, case_tac [!] zs, simp_all del: filter.simps, rule ccontr)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = [];\n     \\<not> filter Q (x # xs) \\<simeq> {[], [], P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "assume \"ys = []\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = []\n  zs = []\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = [];\n     \\<not> filter Q (x # xs) \\<simeq> {[], [], P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "thus False"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "fix z zs'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "assume \"ys = []\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = []\n  zs = z # zs'\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "hence D: \"x = z \\<and> xs \\<simeq> {[], zs', P}\""], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {[], zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {[], zs', P}", "by simp"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "moreover"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "have \"xs \\<simeq> {[], zs', P} \\<longrightarrow>\n      filter Q xs \\<simeq> {filter Q [], filter Q zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], zs', P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q [], filter Q zs', P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], zs', P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q [], filter Q zs', P}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {[], zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q [], filter Q zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "ultimately"], ["proof (chain)\npicking this:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n  xs \\<simeq> {[], zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q [], filter Q zs', P}", "have \"filter Q xs \\<simeq> {[], filter Q zs', P}\""], ["proof (prove)\nusing this:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n  xs \\<simeq> {[], zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q [], filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<simeq> {[], filter Q zs', P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<simeq> {[], filter Q zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "thus \"filter Q (x # xs) \\<simeq> {[], filter Q (z # zs'), P}\""], ["proof (prove)\nusing this:\n  filter Q xs \\<simeq> {[], filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {[], filter Q (z # zs'), P}", "using D"], ["proof (prove)\nusing this:\n  filter Q xs \\<simeq> {[], filter Q zs', P}\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {[], filter Q (z # zs'), P}", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {[], filter Q (z # zs'), P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "fix y ys'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "assume \"ys = y # ys'\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "hence D: \"x = y \\<and> xs \\<simeq> {ys', [], P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', [], P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', [], P}", "by simp"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "moreover"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "have \"xs \\<simeq> {ys', [], P} \\<longrightarrow>\n      filter Q xs \\<simeq> {filter Q ys', filter Q [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', [], P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q ys', filter Q [], P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', [], P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q ys', filter Q [], P}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {ys', [], P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ys', filter Q [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "ultimately"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n  xs \\<simeq> {ys', [], P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ys', filter Q [], P}", "have \"filter Q xs \\<simeq> {filter Q ys', [], P}\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n  xs \\<simeq> {ys', [], P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ys', filter Q [], P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<simeq> {filter Q ys', [], P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<simeq> {filter Q ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<simeq> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "thus \"filter Q (x # xs) \\<simeq> {filter Q (y # ys'), [], P}\""], ["proof (prove)\nusing this:\n  filter Q xs \\<simeq> {filter Q ys', [], P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), [], P}", "using D"], ["proof (prove)\nusing this:\n  filter Q xs \\<simeq> {filter Q ys', [], P}\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), [], P}", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), [], P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "fix y ys' z zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "assume \"ys = y # ys'\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "hence D: \"x # xs \\<simeq> {y # ys', z # zs', P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. x # xs \\<simeq> {y # ys', z # zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x # xs \\<simeq> {y # ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x # xs \\<simeq> {y # ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<simeq> {filter Q\n    (a # list), filter Q (aa # lista), P}", "show \"filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "proof (cases \"P x xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "case True"], ["proof (state)\nthis:\n  P x xs\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence E: \"P x (filter Q xs)\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. P x (filter Q xs)", "using A"], ["proof (prove)\nusing this:\n  P x xs\n  \\<forall>x xs. P x (filter Q xs) = P x xs\n\ngoal (1 subgoal):\n 1. P x (filter Q xs)", "by simp"], ["proof (state)\nthis:\n  P x (filter Q xs)\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have F: \"x = y \\<and> xs \\<simeq> {ys', z # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', z # zs', P}", "using D and True"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {y # ys', z # zs', P}\n  P x xs\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n        filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n  xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}", "have G: \"filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n  xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "proof (cases \"Q x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"Q x\""], ["proof (state)\nthis:\n  Q x\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = x # filter Q xs\""], ["proof (prove)\nusing this:\n  Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = x # filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (y # ys') = x # filter Q ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (y # ys') = x # filter Q ys'", "using \\<open>Q x\\<close> and F"], ["proof (prove)\nusing this:\n  Q x\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (y # ys') = x # filter Q ys'", "by simp"], ["proof (state)\nthis:\n  filter Q (y # ys') = x # filter Q ys'\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (y # ys') = x # filter Q ys'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (y # ys') = x # filter Q ys'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (y # ys') = x # filter Q ys'\n  P x (filter Q xs)\n  filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (z # zs')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"\\<not> Q x\""], ["proof (state)\nthis:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = filter Q xs\""], ["proof (prove)\nusing this:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (y # ys') = filter Q ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (y # ys') = filter Q ys'", "using \\<open>\\<not> Q x\\<close> and F"], ["proof (prove)\nusing this:\n  \\<not> Q x\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (y # ys') = filter Q ys'", "by simp"], ["proof (state)\nthis:\n  filter Q (y # ys') = filter Q ys'\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (y # ys') = filter Q ys'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (y # ys') = filter Q ys'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (y # ys') = filter Q ys'\n  P x (filter Q xs)\n  filter Q xs \\<simeq> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (z # zs')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "case False"], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence E: \"\\<not> P x (filter Q xs)\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x (filter Q xs)", "using A"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  \\<forall>x xs. P x (filter Q xs) = P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x (filter Q xs)", "by simp"], ["proof (state)\nthis:\n  \\<not> P x (filter Q xs)\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have F: \"x = z \\<and> xs \\<simeq> {y # ys', zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {y # ys', zs', P}", "using D and False"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {y # ys', z # zs', P}\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {y # ys', zs', P}", "by simp"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n        filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n    filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n  xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}", "have G: \"filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\""], ["proof (prove)\nusing this:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n  xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n  filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "proof (cases \"Q x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"Q x\""], ["proof (state)\nthis:\n  Q x\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = x # filter Q xs\""], ["proof (prove)\nusing this:\n  Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = x # filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (z # zs') = x # filter Q zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (z # zs') = x # filter Q zs'", "using \\<open>Q x\\<close> and F"], ["proof (prove)\nusing this:\n  Q x\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (z # zs') = x # filter Q zs'", "by simp"], ["proof (state)\nthis:\n  filter Q (z # zs') = x # filter Q zs'\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (z # zs') = x # filter Q zs'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (z # zs') = x # filter Q zs'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (z # zs') = x # filter Q zs'\n  \\<not> P x (filter Q xs)\n  filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (y # ys')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"\\<not> Q x\""], ["proof (state)\nthis:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = filter Q xs\""], ["proof (prove)\nusing this:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (z # zs') = filter Q zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (z # zs') = filter Q zs'", "using \\<open>\\<not> Q x\\<close> and F"], ["proof (prove)\nusing this:\n  \\<not> Q x\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (z # zs') = filter Q zs'", "by simp"], ["proof (state)\nthis:\n  filter Q (z # zs') = filter Q zs'\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (z # zs') = filter Q zs'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (z # zs') = filter Q zs'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (z # zs') = filter Q zs'\n  \\<not> P x (filter Q xs)\n  filter Q xs \\<simeq> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (z # zs')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<simeq> {filter Q ys, filter Q zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleaves_map [rule_format]:\n  assumes A: \"inj f\"\n  shows \"xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n    map f xs \\<simeq> {map f ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\"\n    (is \"_ \\<longrightarrow> _ \\<simeq> {_, _, ?P'}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   ys, map f\n                        zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {map f\n                     ys, map f\n                          zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {map f\n                     ys, map f\n                          zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"[] \\<simeq> {ys, zs, P}\""], ["proof (state)\nthis:\n  [] \\<simeq> {ys, zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {map f\n                     ys, map f\n                          zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence \"ys = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. ys = [] \\<and> zs = []", "by (rule interleaves_nil)"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<simeq> {ys, zs, P} \\<Longrightarrow>\n       [] \\<simeq> {map f\n                     ys, map f\n                          zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus \"[] \\<simeq> {map f ys, map f zs, ?P'}\""], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n\ngoal (1 subgoal):\n 1. [] \\<simeq> {map f\n                  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  [] \\<simeq> {map f\n                ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix x xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume\n    B: \"\\<And>ys zs. xs \\<simeq> {ys, zs, P} \\<longrightarrow> map f xs \\<simeq> {map f ys, map f zs, ?P'}\" and\n    C: \"x # xs \\<simeq> {ys, zs, P}\""], ["proof (state)\nthis:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ?ys, map f\n                       ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<simeq> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<simeq> {map f\n                                  ys, map f\n zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<simeq> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<simeq> {map f\n  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "show \"f x # map f xs \\<simeq> {map f ys, map f zs, ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<simeq> {map f\n                   ys, map f\n                        zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "proof (cases ys, case_tac [!] zs, simp_all del: interleaves.simps(1))"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = []\\<rbrakk> \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = []\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = []\n  zs = []\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = []\\<rbrakk> \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus False"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix z zs'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = []\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = []\n  zs = z # zs'\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence \"x = z \\<and> xs \\<simeq> {[], zs', P}\""], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {[], zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {[], zs', P}", "by simp"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<simeq> {[], zs', P} \\<longrightarrow> map f xs \\<simeq> {map f [], map f zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], zs', P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   [], map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ?ys, map f\n                       ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {[], zs', P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   [], map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {[], zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 [], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {[], map f\n      list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n  xs \\<simeq> {[], zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 [], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "show \"f x = f z \\<and> map f xs \\<simeq> {[], map f zs', ?P'}\""], ["proof (prove)\nusing this:\n  x = z \\<and> xs \\<simeq> {[], zs', P}\n  xs \\<simeq> {[], zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 [], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x = f z \\<and>\n    map f\n     xs \\<simeq> {[], map f\n                       zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x = f z \\<and>\n  map f\n   xs \\<simeq> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix y ys'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = y # ys'\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence \"x = y \\<and> xs \\<simeq> {ys', [], P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', [], P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', [], P}", "by simp"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<simeq> {ys', [], P} \\<longrightarrow> map f xs \\<simeq> {map f ys', map f [], ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', [], P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   ys', map f\n                         [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ?ys, map f\n                       ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', [], P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   ys', map f\n                         [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {ys', [], P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x = f a \\<and>\n                         map f\n                          xs \\<simeq> {map f\n  list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n  xs \\<simeq> {ys', [], P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "show \"f x = f y \\<and> map f xs \\<simeq> {map f ys', [], ?P'}\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<simeq> {ys', [], P}\n  xs \\<simeq> {ys', [], P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x = f y \\<and>\n    map f\n     xs \\<simeq> {map f\n                   ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x = f y \\<and>\n  map f\n   xs \\<simeq> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix y ys' z zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = y # ys'\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence D: \"x # xs \\<simeq> {y # ys', z # zs', P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. x # xs \\<simeq> {y # ys', z # zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n  x # xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x # xs \\<simeq> {y # ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x # xs \\<simeq> {y # ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<simeq> {f a #\n map f\n  list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "show \"f x # map f xs \\<simeq> {f y # map f ys', f z # map f zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "proof (cases \"P x xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "case True"], ["proof (state)\nthis:\n  P x xs\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence E: \"?P' (f x) (map f xs)\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. P (inv f (f x)) (map (inv f) (map f xs))", "using A"], ["proof (prove)\nusing this:\n  P x xs\n  inj f\n\ngoal (1 subgoal):\n 1. P (inv f (f x)) (map (inv f) (map f xs))", "by simp"], ["proof (state)\nthis:\n  P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"x = y \\<and> xs \\<simeq> {ys', z # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', z # zs', P}", "using D and True"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {y # ys', z # zs', P}\n  P x xs\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<simeq> {ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n        map f xs \\<simeq> {map f ys', map f (z # zs'), ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   ys', map f\n                         (z #\n                          zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ?ys, map f\n                       ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   ys', map f\n                         (z #\n                          zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f\n                       (z #\n                        zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n  xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f\n                       (z #\n                        zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"f x = f y \\<and> map f xs \\<simeq> {map f ys', map f (z # zs'), ?P'}\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<simeq> {ys', z # zs', P}\n  xs \\<simeq> {ys', z # zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f\n                       (z #\n                        zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x = f y \\<and>\n    map f\n     xs \\<simeq> {map f\n                   ys', map f\n                         (z #\n                          zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x = f y \\<and>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f\n                       (z #\n                        zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x = f y \\<and>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f\n                       (z #\n                        zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using E"], ["proof (prove)\nusing this:\n  f x = f y \\<and>\n  map f\n   xs \\<simeq> {map f\n                 ys', map f\n                       (z #\n                        zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<simeq> {f y #\n                map f\n                 ys', f z #\n                      map f\n                       zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "case False"], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence E: \"\\<not> ?P' (f x) (map f xs)\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "using A"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  inj f\n\ngoal (1 subgoal):\n 1. \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "by simp"], ["proof (state)\nthis:\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"x = z \\<and> xs \\<simeq> {y # ys', zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {y # ys', zs', P}", "using D and False"], ["proof (prove)\nusing this:\n  x # xs \\<simeq> {y # ys', z # zs', P}\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<simeq> {y # ys', zs', P}", "by simp"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n        map f xs \\<simeq> {map f (y # ys'), map f zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   (y #\n                    ys'), map f\n                           zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<simeq> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 ?ys, map f\n                       ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n    map f\n     xs \\<simeq> {map f\n                   (y #\n                    ys'), map f\n                           zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 (y #\n                  ys'), map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n  xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 (y #\n                  ys'), map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"f x = f z \\<and> map f xs \\<simeq> {map f (y # ys'), map f zs', ?P'}\""], ["proof (prove)\nusing this:\n  x = z \\<and> xs \\<simeq> {y # ys', zs', P}\n  xs \\<simeq> {y # ys', zs', P} \\<longrightarrow>\n  map f\n   xs \\<simeq> {map f\n                 (y #\n                  ys'), map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x = f z \\<and>\n    map f\n     xs \\<simeq> {map f\n                   (y #\n                    ys'), map f\n                           zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x = f z \\<and>\n  map f\n   xs \\<simeq> {map f\n                 (y #\n                  ys'), map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x = f z \\<and>\n  map f\n   xs \\<simeq> {map f\n                 (y #\n                  ys'), map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using E"], ["proof (prove)\nusing this:\n  f x = f z \\<and>\n  map f\n   xs \\<simeq> {map f\n                 (y #\n                  ys'), map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<simeq> {f y #\n                  map f\n                   ys', f z #\n                        map f\n                         zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<simeq> {f y #\n                map f\n                 ys', f z #\n                      map f\n                       zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<simeq> {f y #\n                map f\n                 ys', f z #\n                      map f\n                       zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<simeq> {map f\n                 ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleaves_prefix_fst_1 [rule_format]:\n  assumes A: \"xs \\<simeq> {ys, zs, P}\"\n  shows \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<simeq> {ws @ ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<simeq> {ws @ ys, zs, P}", "proof (induction ws, simp_all add: A, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "fix w ws"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "assume B: \"\\<forall>n < Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\""], ["proof (state)\nthis:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "assume \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<simeq> {ws @ ys, zs, P}\""], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "have \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "assume \"n < length ws\""], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "moreover"], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "have \"Suc n < Suc (length ws) \\<longrightarrow>\n      P ((w # ws) ! (Suc n)) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "using B"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", ".."], ["proof (state)\nthis:\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "ultimately"], ["proof (chain)\npicking this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "show \"P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\nusing this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. P (ws ! n) (drop (Suc n) ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "have \"ws @ xs \\<simeq> {ws @ ys, zs, P}\""], ["proof (prove)\nusing this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. ws @ xs \\<simeq> {ws @ ys, zs, P}", ".."], ["proof (state)\nthis:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "have \"0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)", "using B"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. 0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)", ".."], ["proof (state)\nthis:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "hence \"P w (ws @ xs)\""], ["proof (prove)\nusing this:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. P w (ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<simeq> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<simeq> {a # ws @ ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n  P w (ws @ xs)", "show \"w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}\""], ["proof (prove)\nusing this:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}", "by (cases zs, simp_all)"], ["proof (state)\nthis:\n  w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleaves_prefix_fst_2 [rule_format]:\n \"ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n    (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<simeq> {ys, zs, P}", "proof (induction ws, simp_all, (rule impI)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "fix w ws"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "assume A: \"\\<forall>n < Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\""], ["proof (state)\nthis:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "hence \"0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\""], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. 0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)", ".."], ["proof (state)\nthis:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "hence \"P w (ws @ xs)\""], ["proof (prove)\nusing this:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. P w (ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "assume \"w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}\""], ["proof (state)\nthis:\n  w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  P w (ws @ xs)\n  w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}", "have \"ws @ xs \\<simeq> {ws @ ys, zs, P}\""], ["proof (prove)\nusing this:\n  P w (ws @ xs)\n  w # ws @ xs \\<simeq> {w # ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. ws @ xs \\<simeq> {ws @ ys, zs, P}", "by (cases zs, simp_all)"], ["proof (state)\nthis:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "assume \"ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n    (\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<simeq> {ys, zs, P}\""], ["proof (state)\nthis:\n  ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n  ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}", "have \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<simeq> {ys, zs, P}\""], ["proof (prove)\nusing this:\n  ws @ xs \\<simeq> {ws @ ys, zs, P}\n  ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<simeq> {ys, zs, P}", "by simp"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "have \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "assume \"n < length ws\""], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "moreover"], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "have \"Suc n < Suc (length ws) \\<longrightarrow>\n      P ((w # ws) ! (Suc n)) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "using A"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", ".."], ["proof (state)\nthis:\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "ultimately"], ["proof (chain)\npicking this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "show \"P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\nusing this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. P (ws ! n) (drop (Suc n) ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<simeq> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<simeq> {ys, zs, P};\n        a # ws @ xs \\<simeq> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "show \"xs \\<simeq> {ys, zs, P}\""], ["proof (prove)\nusing this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<simeq> {ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. xs \\<simeq> {ys, zs, P}", ".."], ["proof (state)\nthis:\n  xs \\<simeq> {ys, zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interleaves_prefix_fst [rule_format]:\n \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<simeq> {ys, zs, P} = ws @ xs \\<simeq> {ws @ ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n    xs \\<simeq> {ys, zs, P} = ws @ xs \\<simeq> {ws @ ys, zs, P}", "proof (rule iffI, erule interleaves_prefix_fst_1, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs);\n     ws @ xs \\<simeq> {ws @ ys, zs, P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<simeq> {ys, zs, P}", "qed (erule interleaves_prefix_fst_2, simp)"], ["", "lemma interleaves_prefix_snd [rule_format]:\n \"\\<forall>n < length ws. \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<simeq> {ys, zs, P} = ws @ xs \\<simeq> {ys, ws @ zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n    xs \\<simeq> {ys, zs, P} = ws @ xs \\<simeq> {ys, ws @ zs, P}", "proof (subst (1 2) interleaves_swap)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n    xs \\<simeq> {zs, ys, \\<lambda>w ws. \\<not> P w ws} =\n    ws @ xs \\<simeq> {ws @ zs, ys, \\<lambda>w ws. \\<not> P w ws}", "qed (rule interleaves_prefix_fst, simp)"], ["", "subsection \"A second, stronger version of interleaving\""], ["", "text \\<open>\nSimple counterexamples show that unlike prefixes, the addition or removal of suffixes to the input\nlists does not generally preserve the validity of predicate @{term interleaves}. In fact, if\n@{term \"P y [x] = True\"} with @{term \"x \\<noteq> y\"}, then @{term \"[y, x] \\<simeq> {[x], [y], P}\"} does not hold\nalthough @{term \"[y] \\<simeq> {[], [y], \\<lambda>w ws. P w (ws @ [x])}\"} does, by virtue of lemma\n@{thm interleaves_nil_all}. Similarly, @{term \"[x, y] \\<simeq> {[], [y, x], \\<lambda>w ws. P w (ws @ [x])}\"} does\nnot hold for @{term \"x \\<noteq> y\"} even though @{term \"[x, y, x] \\<simeq> {[x], [y, x], P}\"} does.\n\nBoth counterexamples would not work any longer if the truth value of the input predicate were\nsignificant even if either the second or the third list is empty. In fact, in the former case,\ncondition @{term \"P y [x] = True\"} would entail the falseness of statement\n@{term \"[y] \\<simeq> {[], [y], \\<lambda>w ws. P w (ws @ [x])}\"}, so that the validity of rule\n@{term \"[y] \\<simeq> {[], [y], \\<lambda>w ws. P w (ws @ [x])} \\<Longrightarrow> [y, x] \\<simeq> {[x], [y], P}\"} would be preserved. In\nthe latter case, statement @{term \"[x, y, x] \\<simeq> {[x], [y, x], P}\"} may only hold provided the last\nitem \\<open>x\\<close> of the first list is extracted from the third one, which would require that\n@{term \"\\<not> P x []\"}; thus, subordinating rule\n@{term \"[x, y, x] \\<simeq> {[x], [y, x], P} \\<Longrightarrow> [x, y] \\<simeq> {[], [y, x], \\<lambda>w ws. P w (ws @ [x])}\"} to\ncondition @{term \"P x []\"} would preserve its validity.\n\nThis argument suggests that in order to obtain an \\emph{interleaves} predicate whose validity is\nalso preserved upon the addition or removal of a suffix to the input lists, the truth value of the\ninput predicate must matter until both the second and the third list are empty. In what follows,\nsuch a stronger version of the predicate, named \\<open>Interleaves\\<close>, is defined along with a\nconvenient symbolic notation for it.\n\n\\null\n\\<close>"], ["", "fun Interleaves ::\n \"('a \\<Rightarrow> 'a list \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n\"Interleaves P (x # xs) (y # ys) (z # zs) = (if P x xs\n  then x = y \\<and> Interleaves P xs ys (z # zs)\n  else x = z \\<and> Interleaves P xs (y # ys) zs)\" |\n\"Interleaves P (x # xs) (y # ys) [] =\n  (P x xs \\<and> x = y \\<and> Interleaves P xs ys [])\" |\n\"Interleaves P (x # xs) [] (z # zs) =\n  (\\<not> P x xs \\<and> x = z \\<and> Interleaves P xs [] zs)\" |\n\"Interleaves _ (_ # _) [] [] = False\" |\n\"Interleaves _ [] (_ # _) _ = False\" |\n\"Interleaves _ [] _ (_ # _) = False\" |\n\"Interleaves _ [] [] [] = True\""], ["", "abbreviation Interleaves_syntax ::\n    \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> ('a \\<Rightarrow> 'a list \\<Rightarrow> bool) \\<Rightarrow> bool\"\n    (\"(_ \\<cong> {_, _, _})\" [60, 60, 60] 51)\n  where \"xs \\<cong> {ys, zs, P} \\<equiv> Interleaves P xs ys zs\""], ["", "text \\<open>\n\\null\n\nIn what follows, it is proven that predicate @{term Interleaves} is actually not weaker than, viz.\nis a sufficient condition for, predicate @{term interleaves}. Moreover, the former predicate is\nshown to fulfil the same rules as the latter, although sometimes under more stringent assumptions\n(cf. lemmas \\<open>Interleaves_all_nil\\<close>, \\<open>Interleaves_nil_all\\<close> with lemmas\n@{thm interleaves_all_nil}, @{thm interleaves_nil_all}), and to have the further property that under\nproper assumptions, its validity is preserved upon the addition or removal of a suffix to the input\nlists.\n\n\\null\n\\<close>"], ["", "lemma Interleaves_interleaves [rule_format]:\n \"xs \\<cong> {ys, zs, P} \\<longrightarrow> xs \\<simeq> {ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, P} \\<longrightarrow> xs \\<simeq> {ys, zs, P}", "proof (induction P xs ys zs rule: interleaves.induct, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P x xs y ys z zs.\n       \\<lbrakk>P x xs \\<Longrightarrow>\n                xs \\<cong> {ys, z # zs, P} \\<longrightarrow>\n                xs \\<simeq> {ys, z # zs, P};\n        \\<not> P x xs \\<Longrightarrow>\n        xs \\<cong> {y # ys, zs, P} \\<longrightarrow>\n        xs \\<simeq> {y # ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> (P x xs \\<longrightarrow>\n                          x = y \\<and>\n                          xs \\<cong> {ys, z # zs, P} \\<longrightarrow>\n                          xs \\<simeq> {ys, z # zs, P}) \\<and>\n                         (\\<not> P x xs \\<longrightarrow>\n                          x = z \\<and>\n                          xs \\<cong> {y # ys, zs, P} \\<longrightarrow>\n                          xs \\<simeq> {y # ys, zs, P})", "qed (rule conjI, (rule_tac [!] impI)+, simp_all)"], ["", "lemma Interleaves_length:\n \"xs \\<cong> {ys, zs, P} \\<Longrightarrow> length xs = length ys + length zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, P} \\<Longrightarrow>\n    length xs = length ys + length zs", "by (drule Interleaves_interleaves, rule interleaves_length)"], ["", "lemma Interleaves_nil:\n \"[] \\<cong> {ys, zs, P} \\<Longrightarrow> ys = [] \\<and> zs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<cong> {ys, zs, P} \\<Longrightarrow> ys = [] \\<and> zs = []", "by (drule Interleaves_interleaves, rule interleaves_nil)"], ["", "lemma Interleaves_swap:\n \"xs \\<cong> {ys, zs, P} = xs \\<cong> {zs, ys, \\<lambda>w ws. \\<not> P w ws}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, P} =\n    xs \\<cong> {zs, ys, \\<lambda>w ws. \\<not> P w ws}", "proof (induction P xs ys zs rule: Interleaves.induct, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ uy_ uz_ va_.\n       \\<not> [] \\<cong> {va_, uy_ # uz_, \\<lambda>w ws. \\<not> ux_ w ws}", "fix y' :: 'a and ys' zs' P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ux_ uy_ uz_ va_.\n       \\<not> [] \\<cong> {va_, uy_ # uz_, \\<lambda>w ws. \\<not> ux_ w ws}", "show \"\\<not> [] \\<cong> {zs', y' # ys', \\<lambda>w ws. \\<not> P' w ws}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> [] \\<cong> {zs', y' # ys', \\<lambda>w ws. \\<not> P' w ws}", "by (cases zs', simp_all)"], ["proof (state)\nthis:\n  \\<not> [] \\<cong> {zs', y' # ys', \\<lambda>w ws. \\<not> P' w ws}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_equal_fst:\n \"xs \\<cong> {ys, zs, P} \\<Longrightarrow> xs \\<cong> {ys', zs, P} \\<Longrightarrow> ys = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<cong> {ys, zs, P}; xs \\<cong> {ys', zs, P}\\<rbrakk>\n    \\<Longrightarrow> ys = ys'", "by ((drule Interleaves_interleaves)+, rule interleaves_equal_fst)"], ["", "lemma Interleaves_equal_snd:\n \"xs \\<cong> {ys, zs, P} \\<Longrightarrow> xs \\<cong> {ys, zs', P} \\<Longrightarrow> zs = zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<cong> {ys, zs, P}; xs \\<cong> {ys, zs', P}\\<rbrakk>\n    \\<Longrightarrow> zs = zs'", "by ((drule Interleaves_interleaves)+, rule interleaves_equal_snd)"], ["", "lemma Interleaves_equal_all_nil:\n \"xs \\<cong> {ys, [], P} \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, [], P} \\<Longrightarrow> xs = ys", "by (drule Interleaves_interleaves, rule interleaves_equal_all_nil)"], ["", "lemma Interleaves_equal_nil_all:\n \"xs \\<cong> {[], zs, P} \\<Longrightarrow> xs = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs, P} \\<Longrightarrow> xs = zs", "by (drule Interleaves_interleaves, rule interleaves_equal_nil_all)"], ["", "lemma Interleaves_filter [rule_format]:\n  assumes A: \"\\<forall>x xs. P x (filter Q xs) = P x xs\"\n  shows \"xs \\<cong> {ys, zs, P} \\<longrightarrow> filter Q xs \\<cong> {filter Q ys, filter Q zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q ys, filter Q zs, P}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "assume \"[] \\<cong> {ys, zs, P}\""], ["proof (state)\nthis:\n  [] \\<cong> {ys, zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "hence \"ys = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. ys = [] \\<and> zs = []", "by (rule Interleaves_nil)"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {filter Q ys, filter Q zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "thus \"[] \\<cong> {filter Q ys, filter Q zs, P}\""], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n\ngoal (1 subgoal):\n 1. [] \\<cong> {filter Q ys, filter Q zs, P}", "by simp"], ["proof (state)\nthis:\n  [] \\<cong> {filter Q ys, filter Q zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "fix x xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "assume\n    B: \"\\<And>ys' zs'. xs \\<cong> {ys', zs', P} \\<longrightarrow>\n      filter Q xs \\<cong> {filter Q ys', filter Q zs', P}\" and\n    C: \"x # xs \\<cong> {ys, zs, P}\""], ["proof (state)\nthis:\n  xs \\<cong> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ?ys', filter Q ?zs', P}\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   filter Q xs \\<cong> {filter Q ys, filter Q zs, P};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (a # xs) \\<cong> {filter Q ys, filter Q zs, P}", "show \"filter Q (x # xs) \\<cong> {filter Q ys, filter Q zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q ys, filter Q zs, P}", "proof (cases ys, case_tac [!] zs, simp_all del: filter.simps, rule ccontr)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = [];\n     \\<not> filter Q (x # xs) \\<cong> {[], [], P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "assume \"ys = []\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = []\n  zs = []\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = [];\n     \\<not> filter Q (x # xs) \\<cong> {[], [], P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "thus False"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "fix z zs'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "assume \"ys = []\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = []\n  zs = z # zs'\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "hence D: \"\\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\""], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}", "by simp+"], ["proof (state)\nthis:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "moreover"], ["proof (state)\nthis:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "have \"xs \\<cong> {[], zs', P} \\<longrightarrow>\n      filter Q xs \\<cong> {filter Q [], filter Q zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q [], filter Q zs', P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q [], filter Q zs', P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {[], zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q [], filter Q zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n  xs \\<cong> {[], zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q [], filter Q zs', P}", "have \"filter Q xs \\<cong> {[], filter Q zs', P}\""], ["proof (prove)\nusing this:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n  xs \\<cong> {[], zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q [], filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<cong> {[], filter Q zs', P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<cong> {[], filter Q zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "moreover"], ["proof (state)\nthis:\n  filter Q xs \\<cong> {[], filter Q zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "have \"\\<not> P x (filter Q xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P x (filter Q xs)", "using A and D"], ["proof (prove)\nusing this:\n  \\<forall>x xs. P x (filter Q xs) = P x xs\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x (filter Q xs)", "by simp+"], ["proof (state)\nthis:\n  \\<not> P x (filter Q xs)\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {[], filter Q (a # list), P}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q xs \\<cong> {[], filter Q zs', P}\n  \\<not> P x (filter Q xs)", "show \"filter Q (x # xs) \\<cong> {[], filter Q (z # zs'), P}\""], ["proof (prove)\nusing this:\n  filter Q xs \\<cong> {[], filter Q zs', P}\n  \\<not> P x (filter Q xs)\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {[], filter Q (z # zs'), P}", "using D"], ["proof (prove)\nusing this:\n  filter Q xs \\<cong> {[], filter Q zs', P}\n  \\<not> P x (filter Q xs)\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {[], filter Q (z # zs'), P}", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {[], filter Q (z # zs'), P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "fix y ys'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "assume \"ys = y # ys'\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "hence D: \"P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n\ngoal (1 subgoal):\n 1. P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}", "by simp+"], ["proof (state)\nthis:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "moreover"], ["proof (state)\nthis:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "have \"xs \\<cong> {ys', [], P} \\<longrightarrow>\n      filter Q xs \\<cong> {filter Q ys', filter Q [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q ys', filter Q [], P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q ys', filter Q [], P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ys', filter Q [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "ultimately"], ["proof (chain)\npicking this:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n  xs \\<cong> {ys', [], P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ys', filter Q [], P}", "have \"filter Q xs \\<cong> {filter Q ys', [], P}\""], ["proof (prove)\nusing this:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n  xs \\<cong> {ys', [], P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ys', filter Q [], P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<cong> {filter Q ys', [], P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<cong> {filter Q ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "moreover"], ["proof (state)\nthis:\n  filter Q xs \\<cong> {filter Q ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "have \"P x (filter Q xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x (filter Q xs)", "using A and D"], ["proof (prove)\nusing this:\n  \\<forall>x xs. P x (filter Q xs) = P x xs\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (1 subgoal):\n 1. P x (filter Q xs)", "by simp+"], ["proof (state)\nthis:\n  P x (filter Q xs)\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x # xs) \\<cong> {filter Q (a # list), [], P}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q xs \\<cong> {filter Q ys', [], P}\n  P x (filter Q xs)", "show \"filter Q (x # xs) \\<cong> {filter Q (y # ys'), [], P}\""], ["proof (prove)\nusing this:\n  filter Q xs \\<cong> {filter Q ys', [], P}\n  P x (filter Q xs)\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), [], P}", "using D"], ["proof (prove)\nusing this:\n  filter Q xs \\<cong> {filter Q ys', [], P}\n  P x (filter Q xs)\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), [], P}", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), [], P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "fix y ys' z zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "assume \"ys = y # ys'\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "hence D: \"x # xs \\<cong> {y # ys', z # zs', P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {y # ys', z # zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {y # ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x # xs \\<cong> {y # ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> filter Q\n                          (x #\n                           xs) \\<cong> {filter Q\n   (a # list), filter Q (aa # lista), P}", "show \"filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "proof (cases \"P x xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "case True"], ["proof (state)\nthis:\n  P x xs\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence E: \"P x (filter Q xs)\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. P x (filter Q xs)", "using A"], ["proof (prove)\nusing this:\n  P x xs\n  \\<forall>x xs. P x (filter Q xs) = P x xs\n\ngoal (1 subgoal):\n 1. P x (filter Q xs)", "by simp"], ["proof (state)\nthis:\n  P x (filter Q xs)\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have F: \"x = y \\<and> xs \\<cong> {ys', z # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<cong> {ys', z # zs', P}", "using D and True"], ["proof (prove)\nusing this:\n  x # xs \\<cong> {y # ys', z # zs', P}\n  P x xs\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<cong> {ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n        filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n  xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}", "have G: \"filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n  xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "proof (cases \"Q x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"Q x\""], ["proof (state)\nthis:\n  Q x\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = x # filter Q xs\""], ["proof (prove)\nusing this:\n  Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = x # filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (y # ys') = x # filter Q ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (y # ys') = x # filter Q ys'", "using \\<open>Q x\\<close> and F"], ["proof (prove)\nusing this:\n  Q x\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (y # ys') = x # filter Q ys'", "by simp"], ["proof (state)\nthis:\n  filter Q (y # ys') = x # filter Q ys'\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (y # ys') = x # filter Q ys'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (y # ys') = x # filter Q ys'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (y # ys') = x # filter Q ys'\n  P x (filter Q xs)\n  filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (z # zs')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"\\<not> Q x\""], ["proof (state)\nthis:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = filter Q xs\""], ["proof (prove)\nusing this:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (y # ys') = filter Q ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (y # ys') = filter Q ys'", "using \\<open>\\<not> Q x\\<close> and F"], ["proof (prove)\nusing this:\n  \\<not> Q x\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (y # ys') = filter Q ys'", "by simp"], ["proof (state)\nthis:\n  filter Q (y # ys') = filter Q ys'\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (y # ys') = filter Q ys'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (y # ys') = filter Q ys'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (y # ys') = filter Q ys'\n  P x (filter Q xs)\n  filter Q xs \\<cong> {filter Q ys', filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (z # zs')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "case False"], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence E: \"\\<not> P x (filter Q xs)\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x (filter Q xs)", "using A"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  \\<forall>x xs. P x (filter Q xs) = P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x (filter Q xs)", "by simp"], ["proof (state)\nthis:\n  \\<not> P x (filter Q xs)\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have F: \"x = z \\<and> xs \\<cong> {y # ys', zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<cong> {y # ys', zs', P}", "using D and False"], ["proof (prove)\nusing this:\n  x # xs \\<cong> {y # ys', z # zs', P}\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<cong> {y # ys', zs', P}", "by simp"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n        filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys', ?zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q ?ys', filter Q ?zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n    filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n  xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}", "have G: \"filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\""], ["proof (prove)\nusing this:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n  xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n  filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}", "by simp"], ["proof (state)\nthis:\n  filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "proof (cases \"Q x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"Q x\""], ["proof (state)\nthis:\n  Q x\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = x # filter Q xs\""], ["proof (prove)\nusing this:\n  Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = x # filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = x # filter Q xs\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (z # zs') = x # filter Q zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (z # zs') = x # filter Q zs'", "using \\<open>Q x\\<close> and F"], ["proof (prove)\nusing this:\n  Q x\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (z # zs') = x # filter Q zs'", "by simp"], ["proof (state)\nthis:\n  filter Q (z # zs') = x # filter Q zs'\n\ngoal (2 subgoals):\n 1. Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n 2. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (z # zs') = x # filter Q zs'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (z # zs') = x # filter Q zs'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = x # filter Q xs\n  filter Q (z # zs') = x # filter Q zs'\n  \\<not> P x (filter Q xs)\n  filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (y # ys')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "assume \"\\<not> Q x\""], ["proof (state)\nthis:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "hence \"filter Q (x # xs) = filter Q xs\""], ["proof (prove)\nusing this:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) = filter Q xs", "by simp"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "moreover"], ["proof (state)\nthis:\n  filter Q (x # xs) = filter Q xs\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "have \"filter Q (z # zs') = filter Q zs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter Q (z # zs') = filter Q zs'", "using \\<open>\\<not> Q x\\<close> and F"], ["proof (prove)\nusing this:\n  \\<not> Q x\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (z # zs') = filter Q zs'", "by simp"], ["proof (state)\nthis:\n  filter Q (z # zs') = filter Q zs'\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow>\n    filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "ultimately"], ["proof (chain)\npicking this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (z # zs') = filter Q zs'", "show ?thesis"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (z # zs') = filter Q zs'\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "using E and G"], ["proof (prove)\nusing this:\n  filter Q (x # xs) = filter Q xs\n  filter Q (z # zs') = filter Q zs'\n  \\<not> P x (filter Q xs)\n  filter Q xs \\<cong> {filter Q (y # ys'), filter Q zs', P}\n\ngoal (1 subgoal):\n 1. filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}", "by (cases \"filter Q (z # zs')\", simp_all)"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q (y # ys'), filter Q (z # zs'), P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter Q (x # xs) \\<cong> {filter Q ys, filter Q zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_map [rule_format]:\n  assumes A: \"inj f\"\n  shows \"xs \\<cong> {ys, zs, P} \\<longrightarrow>\n    map f xs \\<cong> {map f ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\"\n    (is \"_ \\<longrightarrow> _ \\<cong> {_, _, ?P'}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {map f\n                    ys, map f\n                         zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {map f\n                    ys, map f\n                         zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"[] \\<cong> {ys, zs, P}\""], ["proof (state)\nthis:\n  [] \\<cong> {ys, zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {map f\n                    ys, map f\n                         zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence \"ys = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. ys = [] \\<and> zs = []", "by (rule Interleaves_nil)"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, P} \\<Longrightarrow>\n       [] \\<cong> {map f\n                    ys, map f\n                         zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus \"[] \\<cong> {map f ys, map f zs, ?P'}\""], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n\ngoal (1 subgoal):\n 1. [] \\<cong> {map f\n                 ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  [] \\<cong> {map f\n               ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix x xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume\n    B: \"\\<And>ys zs. xs \\<cong> {ys, zs, P} \\<longrightarrow> map f xs \\<cong> {map f ys, map f zs, ?P'}\" and\n    C: \"x # xs \\<cong> {ys, zs, P}\""], ["proof (state)\nthis:\n  xs \\<cong> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ?ys, map f ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, P} \\<longrightarrow>\n                   map f\n                    xs \\<cong> {map f\n                                 ys, map f\nzs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)};\n        a # xs \\<cong> {ys, zs, P}\\<rbrakk>\n       \\<Longrightarrow> f a #\n                         map f\n                          xs \\<cong> {map f\n ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "show \"f x # map f xs \\<cong> {map f ys, map f zs, ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {map f\n                  ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "proof (cases ys, case_tac [!] zs, simp_all del: Interleaves.simps(1-3))"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = []\\<rbrakk> \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = []\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = []\n  zs = []\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ys = []; zs = []\\<rbrakk> \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus False"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix z zs'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = []\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = []\n  zs = z # zs'\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence D: \"\\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\""], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = []\n  zs = z # zs'\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}", "by simp+"], ["proof (state)\nthis:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<cong> {[], zs', P} \\<longrightarrow> map f xs \\<cong> {map f [], map f zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  [], map f\n                       zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ?ys, map f ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  [], map f\n                       zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<cong> {[], zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                [], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n  xs \\<cong> {[], zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                [], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"map f xs \\<cong> {[], map f zs', ?P'}\""], ["proof (prove)\nusing this:\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n  xs \\<cong> {[], zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                [], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. map f\n     xs \\<cong> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  map f\n   xs \\<cong> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  map f\n   xs \\<cong> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"\\<not> ?P' (f x) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "using A and D"], ["proof (prove)\nusing this:\n  inj f\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "by simp+"], ["proof (state)\nthis:\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = []; zs = a # list\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {[], f a #\n    map f list, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  map f\n   xs \\<cong> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "show \"f x # map f xs \\<cong> {[], f z # map f zs', ?P'}\""], ["proof (prove)\nusing this:\n  map f\n   xs \\<cong> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {[], f z #\n                     map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using D"], ["proof (prove)\nusing this:\n  map f\n   xs \\<cong> {[], map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n  \\<not> P x xs \\<and> x = z \\<and> xs \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {[], f z #\n                     map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<cong> {[], f z #\n                   map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix y ys'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = y # ys'\" and \"zs = []\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence D: \"P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n\ngoal (1 subgoal):\n 1. P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = []\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}", "by simp+"], ["proof (state)\nthis:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<cong> {ys', [], P} \\<longrightarrow> map f xs \\<cong> {map f ys', map f [], ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  ys', map f\n                        [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ?ys, map f ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  ys', map f\n                        [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ys', map f [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n  xs \\<cong> {ys', [], P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ys', map f [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"map f xs \\<cong> {map f ys', [], ?P'}\""], ["proof (prove)\nusing this:\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n  xs \\<cong> {ys', [], P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ys', map f [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. map f\n     xs \\<cong> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  map f\n   xs \\<cong> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  map f\n   xs \\<cong> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"?P' (f x) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (inv f (f x)) (map (inv f) (map f xs))", "using A and D"], ["proof (prove)\nusing this:\n  inj f\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (1 subgoal):\n 1. P (inv f (f x)) (map (inv f) (map f xs))", "by simp+"], ["proof (state)\nthis:\n  P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>ys = a # list; zs = []\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  map f\n   xs \\<cong> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  P (inv f (f x)) (map (inv f) (map f xs))", "show \"f x # map f xs \\<cong> {f y # map f ys', [], ?P'}\""], ["proof (prove)\nusing this:\n  map f\n   xs \\<cong> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using D"], ["proof (prove)\nusing this:\n  map f\n   xs \\<cong> {map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  P (inv f (f x)) (map (inv f) (map f xs))\n  P x xs \\<and> x = y \\<and> xs \\<cong> {ys', [], P}\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<cong> {f y #\n               map f ys', [], \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "fix y ys' z zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "assume \"ys = y # ys'\" and \"zs = z # zs'\""], ["proof (state)\nthis:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence D: \"x # xs \\<cong> {y # ys', z # zs', P}\""], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {y # ys', z # zs', P}", "using C"], ["proof (prove)\nusing this:\n  ys = y # ys'\n  zs = z # zs'\n  x # xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {y # ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x # xs \\<cong> {y # ys', z # zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>ys = a # list; zs = aa # lista\\<rbrakk>\n       \\<Longrightarrow> f x #\n                         map f\n                          xs \\<cong> {f a #\nmap f list, f aa # map f lista, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "show \"f x # map f xs \\<cong> {f y # map f ys', f z # map f zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "proof (cases \"P x xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "case True"], ["proof (state)\nthis:\n  P x xs\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence E: \"?P' (f x) (map f xs)\""], ["proof (prove)\nusing this:\n  P x xs\n\ngoal (1 subgoal):\n 1. P (inv f (f x)) (map (inv f) (map f xs))", "using A"], ["proof (prove)\nusing this:\n  P x xs\n  inj f\n\ngoal (1 subgoal):\n 1. P (inv f (f x)) (map (inv f) (map f xs))", "by simp"], ["proof (state)\nthis:\n  P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"x = y \\<and> xs \\<cong> {ys', z # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<cong> {ys', z # zs', P}", "using D and True"], ["proof (prove)\nusing this:\n  x # xs \\<cong> {y # ys', z # zs', P}\n  P x xs\n\ngoal (1 subgoal):\n 1. x = y \\<and> xs \\<cong> {ys', z # zs', P}", "by simp"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n        map f xs \\<cong> {map f ys', map f (z # zs'), ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  ys', map f\n                        (z #\n                         zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ?ys, map f ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  ys', map f\n                        (z #\n                         zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ys', map f\n                      (z #\n                       zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n  xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ys', map f\n                      (z #\n                       zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"f x = f y \\<and> map f xs \\<cong> {map f ys', map f (z # zs'), ?P'}\""], ["proof (prove)\nusing this:\n  x = y \\<and> xs \\<cong> {ys', z # zs', P}\n  xs \\<cong> {ys', z # zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ys', map f\n                      (z #\n                       zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x = f y \\<and>\n    map f\n     xs \\<cong> {map f\n                  ys', map f\n                        (z #\n                         zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x = f y \\<and>\n  map f\n   xs \\<cong> {map f\n                ys', map f\n                      (z #\n                       zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (2 subgoals):\n 1. P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n 2. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x = f y \\<and>\n  map f\n   xs \\<cong> {map f\n                ys', map f\n                      (z #\n                       zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using E"], ["proof (prove)\nusing this:\n  f x = f y \\<and>\n  map f\n   xs \\<cong> {map f\n                ys', map f\n                      (z #\n                       zs'), \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<cong> {f y #\n               map f\n                ys', f z #\n                     map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "case False"], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "hence E: \"\\<not> ?P' (f x) (map f xs)\""], ["proof (prove)\nusing this:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "using A"], ["proof (prove)\nusing this:\n  \\<not> P x xs\n  inj f\n\ngoal (1 subgoal):\n 1. \\<not> P (inv f (f x)) (map (inv f) (map f xs))", "by simp"], ["proof (state)\nthis:\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"x = z \\<and> xs \\<cong> {y # ys', zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<cong> {y # ys', zs', P}", "using D and False"], ["proof (prove)\nusing this:\n  x # xs \\<cong> {y # ys', z # zs', P}\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. x = z \\<and> xs \\<cong> {y # ys', zs', P}", "by simp"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "moreover"], ["proof (state)\nthis:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n        map f xs \\<cong> {map f (y # ys'), map f zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  (y #\n                   ys'), map f\n                          zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using B"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                ?ys, map f ?zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n    map f\n     xs \\<cong> {map f\n                  (y #\n                   ys'), map f\n                          zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "."], ["proof (state)\nthis:\n  xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                (y #\n                 ys'), map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n  xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                (y #\n                 ys'), map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "have \"f x = f z \\<and> map f xs \\<cong> {map f (y # ys'), map f zs', ?P'}\""], ["proof (prove)\nusing this:\n  x = z \\<and> xs \\<cong> {y # ys', zs', P}\n  xs \\<cong> {y # ys', zs', P} \\<longrightarrow>\n  map f\n   xs \\<cong> {map f\n                (y #\n                 ys'), map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x = f z \\<and>\n    map f\n     xs \\<cong> {map f\n                  (y #\n                   ys'), map f\n                          zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x = f z \\<and>\n  map f\n   xs \\<cong> {map f\n                (y #\n                 ys'), map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs \\<Longrightarrow>\n    f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x = f z \\<and>\n  map f\n   xs \\<cong> {map f\n                (y #\n                 ys'), map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "using E"], ["proof (prove)\nusing this:\n  f x = f z \\<and>\n  map f\n   xs \\<cong> {map f\n                (y #\n                 ys'), map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n  \\<not> P (inv f (f x)) (map (inv f) (map f xs))\n\ngoal (1 subgoal):\n 1. f x #\n    map f\n     xs \\<cong> {f y #\n                 map f\n                  ys', f z #\n                       map f\n                        zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}", "by simp"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<cong> {f y #\n               map f\n                ys', f z #\n                     map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<cong> {f y #\n               map f\n                ys', f z #\n                     map f zs', \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x #\n  map f\n   xs \\<cong> {map f\n                ys, map f zs, \\<lambda>w ws. P (inv f w) (map (inv f) ws)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_prefix_fst_1 [rule_format]:\n  assumes A: \"xs \\<cong> {ys, zs, P}\"\n  shows \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<cong> {ws @ ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<cong> {ws @ ys, zs, P}", "proof (induction ws, simp_all add: A, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "fix w ws"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "assume B: \"\\<forall>n < Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\""], ["proof (state)\nthis:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "assume \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    ws @ xs \\<cong> {ws @ ys, zs, P}\""], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "have \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "assume \"n < length ws\""], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "moreover"], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "have \"Suc n < Suc (length ws) \\<longrightarrow>\n      P ((w # ws) ! (Suc n)) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "using B"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", ".."], ["proof (state)\nthis:\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "ultimately"], ["proof (chain)\npicking this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "show \"P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\nusing this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. P (ws ! n) (drop (Suc n) ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "have \"ws @ xs \\<cong> {ws @ ys, zs, P}\""], ["proof (prove)\nusing this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. ws @ xs \\<cong> {ws @ ys, zs, P}", ".."], ["proof (state)\nthis:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "have \"0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)", "using B"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. 0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)", ".."], ["proof (state)\nthis:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "hence \"P w (ws @ xs)\""], ["proof (prove)\nusing this:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. P w (ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>(\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                ws @ xs \\<cong> {ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> a # ws @ xs \\<cong> {a # ws @ ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n  P w (ws @ xs)", "show \"w # ws @ xs \\<cong> {w # ws @ ys, zs, P}\""], ["proof (prove)\nusing this:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. w # ws @ xs \\<cong> {w # ws @ ys, zs, P}", "by (cases zs, simp_all)"], ["proof (state)\nthis:\n  w # ws @ xs \\<cong> {w # ws @ ys, zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_prefix_fst_2 [rule_format]:\n \"ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n    (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<cong> {ys, zs, P}", "proof (induction ws, simp_all, (rule impI)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "fix w ws"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "assume A: \"\\<forall>n < Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\""], ["proof (state)\nthis:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "hence \"0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\""], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. 0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)", ".."], ["proof (state)\nthis:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "hence \"P w (ws @ xs)\""], ["proof (prove)\nusing this:\n  0 < Suc (length ws) \\<longrightarrow> P ((w # ws) ! 0) (drop 0 ws @ xs)\n\ngoal (1 subgoal):\n 1. P w (ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  P w (ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "assume \"w # ws @ xs \\<cong> {w # ws @ ys, zs, P}\""], ["proof (state)\nthis:\n  w # ws @ xs \\<cong> {w # ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  P w (ws @ xs)\n  w # ws @ xs \\<cong> {w # ws @ ys, zs, P}", "have \"ws @ xs \\<cong> {ws @ ys, zs, P}\""], ["proof (prove)\nusing this:\n  P w (ws @ xs)\n  w # ws @ xs \\<cong> {w # ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. ws @ xs \\<cong> {ws @ ys, zs, P}", "by (cases zs, simp_all)"], ["proof (state)\nthis:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "assume \"ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n    (\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<cong> {ys, zs, P}\""], ["proof (state)\nthis:\n  ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n  ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}", "have \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<cong> {ys, zs, P}\""], ["proof (prove)\nusing this:\n  ws @ xs \\<cong> {ws @ ys, zs, P}\n  ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n    xs \\<cong> {ys, zs, P}", "by simp"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "moreover"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "have \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "assume \"n < length ws\""], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "moreover"], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "have \"Suc n < Suc (length ws) \\<longrightarrow>\n      P ((w # ws) ! (Suc n)) (drop (Suc n) ws @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "using A"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws). P ((w # ws) ! n) (drop n ws @ xs)\n\ngoal (1 subgoal):\n 1. Suc n < Suc (length ws) \\<longrightarrow>\n    P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", ".."], ["proof (state)\nthis:\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ xs)", "ultimately"], ["proof (chain)\npicking this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)", "show \"P (ws ! n) (drop (Suc n) ws @ xs)\""], ["proof (prove)\nusing this:\n  n < length ws\n  Suc n < Suc (length ws) \\<longrightarrow>\n  P ((w # ws) ! Suc n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. P (ws ! n) (drop (Suc n) ws @ xs)", "by simp"], ["proof (state)\nthis:\n  P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ws.\n       \\<lbrakk>ws @ xs \\<cong> {ws @ ys, zs, P} \\<longrightarrow>\n                (\\<forall>n<length ws.\n                    P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n                xs \\<cong> {ys, zs, P};\n        a # ws @ xs \\<cong> {a # ws @ ys, zs, P};\n        \\<forall>n<Suc (length ws).\n           P ((a # ws) ! n) (drop n ws @ xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)", "show \"xs \\<cong> {ys, zs, P}\""], ["proof (prove)\nusing this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ xs)) \\<longrightarrow>\n  xs \\<cong> {ys, zs, P}\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs)\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, P}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {ys, zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_prefix_fst [rule_format]:\n \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, P} = ws @ xs \\<cong> {ws @ ys, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n    xs \\<cong> {ys, zs, P} = ws @ xs \\<cong> {ws @ ys, zs, P}", "proof (rule iffI, erule Interleaves_prefix_fst_1, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ xs);\n     ws @ xs \\<cong> {ws @ ys, zs, P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys, zs, P}", "qed (erule Interleaves_prefix_fst_2, simp)"], ["", "lemma Interleaves_prefix_snd [rule_format]:\n \"\\<forall>n < length ws. \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, P} = ws @ xs \\<cong> {ys, ws @ zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n    xs \\<cong> {ys, zs, P} = ws @ xs \\<cong> {ys, ws @ zs, P}", "proof (subst (1 2) Interleaves_swap)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       \\<not> P (ws ! n) (drop (Suc n) ws @ xs) \\<Longrightarrow>\n    xs \\<cong> {zs, ys, \\<lambda>w ws. \\<not> P w ws} =\n    ws @ xs \\<cong> {ws @ zs, ys, \\<lambda>w ws. \\<not> P w ws}", "qed (rule Interleaves_prefix_fst, simp)"], ["", "lemma Interleaves_all_nil_1 [rule_format]:\n \"xs \\<cong> {xs, [], P} \\<longrightarrow> (\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {xs, [], P} \\<longrightarrow>\n    (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs))", "proof (induction xs, simp_all, rule impI, erule conjE, rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>xs \\<cong> {xs, [], P} \\<longrightarrow>\n                (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs));\n        P a xs; xs \\<cong> {xs, [], P}; n < Suc (length xs)\\<rbrakk>\n       \\<Longrightarrow> P ((a # xs) ! n) (drop n xs)", "fix x xs n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>xs \\<cong> {xs, [], P} \\<longrightarrow>\n                (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs));\n        P a xs; xs \\<cong> {xs, [], P}; n < Suc (length xs)\\<rbrakk>\n       \\<Longrightarrow> P ((a # xs) ! n) (drop n xs)", "assume\n    \"xs \\<cong> {xs, [], P} \\<longrightarrow> (\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs))\" and\n    \"xs \\<cong> {xs, [], P}\""], ["proof (state)\nthis:\n  xs \\<cong> {xs, [], P} \\<longrightarrow>\n  (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs))\n  xs \\<cong> {xs, [], P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>xs \\<cong> {xs, [], P} \\<longrightarrow>\n                (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs));\n        P a xs; xs \\<cong> {xs, [], P}; n < Suc (length xs)\\<rbrakk>\n       \\<Longrightarrow> P ((a # xs) ! n) (drop n xs)", "hence A: \"\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs)\""], ["proof (prove)\nusing this:\n  xs \\<cong> {xs, [], P} \\<longrightarrow>\n  (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs))\n  xs \\<cong> {xs, [], P}\n\ngoal (1 subgoal):\n 1. \\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs)", ".."], ["proof (state)\nthis:\n  \\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>xs \\<cong> {xs, [], P} \\<longrightarrow>\n                (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs));\n        P a xs; xs \\<cong> {xs, [], P}; n < Suc (length xs)\\<rbrakk>\n       \\<Longrightarrow> P ((a # xs) ! n) (drop n xs)", "assume\n    B: \"P x xs\" and\n    C: \"n < Suc (length xs)\""], ["proof (state)\nthis:\n  P x xs\n  n < Suc (length xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>xs \\<cong> {xs, [], P} \\<longrightarrow>\n                (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs));\n        P a xs; xs \\<cong> {xs, [], P}; n < Suc (length xs)\\<rbrakk>\n       \\<Longrightarrow> P ((a # xs) ! n) (drop n xs)", "show \"P ((x # xs) ! n) (drop n xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((x # xs) ! n) (drop n xs)", "proof (cases n, simp_all add: B)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> P (xs ! nat) (drop (Suc nat) xs)", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> P (xs ! nat) (drop (Suc nat) xs)", "have \"m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)", "using A"], ["proof (prove)\nusing this:\n  \\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs)\n\ngoal (1 subgoal):\n 1. m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)", ".."], ["proof (state)\nthis:\n  m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> P (xs ! nat) (drop (Suc nat) xs)", "moreover"], ["proof (state)\nthis:\n  m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> P (xs ! nat) (drop (Suc nat) xs)", "have \"m < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs", "using C and Suc"], ["proof (prove)\nusing this:\n  n < Suc (length xs)\n  n = Suc m\n\ngoal (1 subgoal):\n 1. m < length xs", "by simp"], ["proof (state)\nthis:\n  m < length xs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> P (xs ! nat) (drop (Suc nat) xs)", "ultimately"], ["proof (chain)\npicking this:\n  m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)\n  m < length xs", "show \"P (xs ! m) (drop (Suc m) xs)\""], ["proof (prove)\nusing this:\n  m < length xs \\<longrightarrow> P (xs ! m) (drop (Suc m) xs)\n  m < length xs\n\ngoal (1 subgoal):\n 1. P (xs ! m) (drop (Suc m) xs)", ".."], ["proof (state)\nthis:\n  P (xs ! m) (drop (Suc m) xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P ((x # xs) ! n) (drop n xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_all_nil_2 [rule_format]:\n \"\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs) \\<Longrightarrow> xs \\<cong> {xs, [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs) \\<Longrightarrow>\n    xs \\<cong> {xs, [], P}", "by (insert Interleaves_prefix_fst [of xs P \"[]\" \"[]\" \"[]\"], simp)"], ["", "lemma Interleaves_all_nil:\n \"xs \\<cong> {xs, [], P} = (\\<forall>n < length xs. P (xs ! n) (drop (Suc n) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {xs, [], P} =\n    (\\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs))", "proof (rule iffI, rule allI, rule impI, rule Interleaves_all_nil_1, assumption+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n<length xs. P (xs ! n) (drop (Suc n) xs) \\<Longrightarrow>\n    xs \\<cong> {xs, [], P}", "qed (rule Interleaves_all_nil_2, simp)"], ["", "lemma Interleaves_nil_all:\n \"xs \\<cong> {[], xs, P} = (\\<forall>n < length xs. \\<not> P (xs ! n) (drop (Suc n) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {[], xs, P} =\n    (\\<forall>n<length xs. \\<not> P (xs ! n) (drop (Suc n) xs))", "by (subst Interleaves_swap, simp add: Interleaves_all_nil)"], ["", "lemma Interleaves_suffix_one_aux:\n  assumes A: \"P x []\"\n  shows \"\\<not> xs @ [x] \\<cong> {[], zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> xs @ [x] \\<cong> {[], zs, P}", "using [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> xs @ [x] \\<cong> {[], zs, P}", "proof (induction xs arbitrary: zs, simp_all, rule_tac [!] notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>zs. [x] \\<cong> {[], zs, P} \\<Longrightarrow> False\n 2. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "fix zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>zs. [x] \\<cong> {[], zs, P} \\<Longrightarrow> False\n 2. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"[x] \\<cong> {[], zs, P}\""], ["proof (state)\nthis:\n  [x] \\<cong> {[], zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>zs. [x] \\<cong> {[], zs, P} \\<Longrightarrow> False\n 2. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  [x] \\<cong> {[], zs, P}\n\ngoal (1 subgoal):\n 1. False", "by (cases zs, simp_all add: A)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "fix w xs zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "assume B: \"\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P}\""], ["proof (state)\nthis:\n  \\<not> xs @ [x] \\<cong> {[], ?zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"w # xs @ [x] \\<cong> {[], zs, P}\""], ["proof (state)\nthis:\n  w # xs @ [x] \\<cong> {[], zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs zs.\n       \\<lbrakk>\\<And>zs. \\<not> xs @ [x] \\<cong> {[], zs, P};\n        a # xs @ [x] \\<cong> {[], zs, P}\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  w # xs @ [x] \\<cong> {[], zs, P}\n\ngoal (1 subgoal):\n 1. False", "proof (cases zs, simp_all, (erule_tac conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>zs = a # list; \\<not> P a (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; \\<not> P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; w = a;\n        xs @ [x] \\<cong> {[], list, P}\\<rbrakk>\n       \\<Longrightarrow> False", "fix zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>zs = a # list; \\<not> P a (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; \\<not> P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; w = a;\n        xs @ [x] \\<cong> {[], list, P}\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"xs @ [x] \\<cong> {[], zs', P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>zs = a # list; \\<not> P a (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; \\<not> P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; w = a;\n        xs @ [x] \\<cong> {[], list, P}\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>zs = a # list; \\<not> P a (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; \\<not> P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; w = a;\n        xs @ [x] \\<cong> {[], list, P}\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<not> xs @ [x] \\<cong> {[], zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> xs @ [x] \\<cong> {[], zs', P}", "using B"], ["proof (prove)\nusing this:\n  \\<not> xs @ [x] \\<cong> {[], ?zs, P}\n\ngoal (1 subgoal):\n 1. \\<not> xs @ [x] \\<cong> {[], zs', P}", "."], ["proof (state)\nthis:\n  \\<not> xs @ [x] \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>zs = a # list; \\<not> P a (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; \\<not> P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {[], zs, P}; w = a;\n        xs @ [x] \\<cong> {[], list, P}\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<cong> {[], zs', P}\n  \\<not> xs @ [x] \\<cong> {[], zs', P}", "show False"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {[], zs', P}\n  \\<not> xs @ [x] \\<cong> {[], zs', P}\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_suffix_one_fst_2 [rule_format]:\n  assumes A: \"P x []\"\n  shows \"xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow> xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\"\n    (is \"_ \\<longrightarrow> _ \\<cong> {_, _, ?P'}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "using [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [x] \\<cong> {ys @ [x], zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [x] \\<cong> {ys @ [x], zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "assume \"[x] \\<cong> {ys @ [x], zs, P}\""], ["proof (state)\nthis:\n  [x] \\<cong> {ys @ [x], zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [x] \\<cong> {ys @ [x], zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "hence B: \"length [x] = length (ys @ [x]) + length zs\""], ["proof (prove)\nusing this:\n  [x] \\<cong> {ys @ [x], zs, P}\n\ngoal (1 subgoal):\n 1. length [x] = length (ys @ [x]) + length zs", "by (rule Interleaves_length)"], ["proof (state)\nthis:\n  length [x] = length (ys @ [x]) + length zs\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [x] \\<cong> {ys @ [x], zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "have ys: \"ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = []", "by (cases ys, simp, insert B, simp)"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [x] \\<cong> {ys @ [x], zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "then"], ["proof (chain)\npicking this:\n  ys = []", "have \"zs = []\""], ["proof (prove)\nusing this:\n  ys = []\n\ngoal (1 subgoal):\n 1. zs = []", "by (cases zs, simp, insert B, simp)"], ["proof (state)\nthis:\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [x] \\<cong> {ys @ [x], zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "with ys"], ["proof (chain)\npicking this:\n  ys = []\n  zs = []", "show \"[] \\<cong> {ys, zs, ?P'}\""], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n\ngoal (1 subgoal):\n 1. [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "by simp"], ["proof (state)\nthis:\n  [] \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "fix w xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "assume B: \"\\<And>ys zs. xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow> xs \\<cong> {ys, zs, ?P'}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {?ys @ [x], ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "assume \"w # xs @ [x] \\<cong> {ys @ [x], zs, P}\""], ["proof (state)\nthis:\n  w # xs @ [x] \\<cong> {ys @ [x], zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ [x] \\<cong> {ys @ [x], zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])};\n        a # xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "thus \"w # xs \\<cong> {ys, zs, ?P'}\""], ["proof (prove)\nusing this:\n  w # xs @ [x] \\<cong> {ys @ [x], zs, P}\n\ngoal (1 subgoal):\n 1. w # xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "proof (cases zs, case_tac [!] ys, simp_all del: Interleaves.simps(1,3),\n   (erule_tac [1-2] conjE)+)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>zs = []; P x (xs @ [x]); ys = [];\n     w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n     w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = x;\n     xs @ [x] \\<cong> {[], [], P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 3. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "assume \"xs @ [x] \\<cong> {[], [], P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[], [], P}\n\ngoal (4 subgoals):\n 1. \\<lbrakk>zs = []; P x (xs @ [x]); ys = [];\n     w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n     w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = x;\n     xs @ [x] \\<cong> {[], [], P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 3. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "thus False"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {[], [], P}\n\ngoal (1 subgoal):\n 1. False", "by (cases xs, simp_all)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 2. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 2. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "fix ys'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 2. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "have \"xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow> xs \\<cong> {ys', [], ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow>\n    xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}", "using B"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {?ys @ [x], ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow>\n    xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}", "."], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 2. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 2. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "assume \"xs @ [x] \\<cong> {ys' @ [x], [], P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {ys' @ [x], [], P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ [x]); ys = a # list;\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; P w (xs @ [x]);\n        w # xs @ [x] \\<cong> {ys @ [x], zs, P}; w = a;\n        xs @ [x] \\<cong> {list @ [x], [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>w ws.\n            P w (ws @ [x])}\n 2. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {ys' @ [x], [], P}", "show \"xs \\<cong> {ys', [], ?P'}\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {ys' @ [x], [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {ys' @ [x], [], P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "fix z' zs'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "assume \"w # xs @ [x] \\<cong> {[x], z' # zs', P}\""], ["proof (state)\nthis:\n  w # xs @ [x] \\<cong> {[x], z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>w # xs @ [x] \\<cong> {[x], a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "thus \"w # xs \\<cong> {[], z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  w # xs @ [x] \\<cong> {[x], z' # zs', P}\n\ngoal (1 subgoal):\n 1. w # xs \\<cong> {[], z' # zs', \\<lambda>w ws. P w (ws @ [x])}", "proof (cases \"P w (xs @ [x])\", simp_all, erule_tac [!] conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ [x]); w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = x;\n     xs @ [x] \\<cong> {[], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "assume \"xs @ [x] \\<cong> {[], z' # zs', P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[], z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ [x]); w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = x;\n     xs @ [x] \\<cong> {[], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[], z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ [x]); w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = x;\n     xs @ [x] \\<cong> {[], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "have \"\\<not> xs @ [x] \\<cong> {[], z' # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> xs @ [x] \\<cong> {[], z' # zs', P}", "using A"], ["proof (prove)\nusing this:\n  P x []\n\ngoal (1 subgoal):\n 1. \\<not> xs @ [x] \\<cong> {[], z' # zs', P}", "by (rule Interleaves_suffix_one_aux)"], ["proof (state)\nthis:\n  \\<not> xs @ [x] \\<cong> {[], z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ [x]); w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = x;\n     xs @ [x] \\<cong> {[], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<cong> {[], z' # zs', P}\n  \\<not> xs @ [x] \\<cong> {[], z' # zs', P}", "show False"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {[], z' # zs', P}\n  \\<not> xs @ [x] \\<cong> {[], z' # zs', P}\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "have \"xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow> xs \\<cong> {[], zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow>\n    xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "using B"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {?ys @ [x], ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow>\n    xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "by simp"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "assume \"xs @ [x] \\<cong> {[x], zs', P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {[x], zs', P}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {[x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {[x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {[x], zs', P}", "show \"xs \\<cong> {[], zs', ?P'}\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {[x], zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {[x], zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {[], zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w # xs \\<cong> {[], z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "fix y' ys' z' zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "assume \"w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}\""], ["proof (state)\nthis:\n  w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>w # xs @ [x] \\<cong> {aa # lista @ [x], a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> w #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>w ws. P w (ws @ [x])}", "thus \"w # xs \\<cong> {y' # ys', z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}\n\ngoal (1 subgoal):\n 1. w # xs \\<cong> {y' # ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}", "proof (cases \"P w (xs @ [x])\", simp_all, erule_tac [!] conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = y';\n     xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "have \"xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow> xs \\<cong> {ys', z' # zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow>\n    xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}", "using B"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {?ys @ [x], ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow>\n    xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}", "."], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = y';\n     xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = y';\n     xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "assume \"xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = y';\n     xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>w ws. P w (ws @ [x])}\n 2. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}", "show \"xs \\<cong> {ys', z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {ys' @ [x], z' # zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "have \"xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow> xs \\<cong> {y' # ys', zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow>\n    xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "using B"], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {?ys @ [x], ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow>\n    xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "by simp"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "assume \"xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\""], ["proof (state)\nthis:\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ [x]);\n     w # xs @ [x] \\<cong> {y' # ys' @ [x], z' # zs', P}; w = z';\n     xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>w ws. P w (ws @ [x])}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}", "show \"xs \\<cong> {y' # ys', zs', ?P'}\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}\n  xs @ [x] \\<cong> {y' # ys' @ [x], zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {y' # ys', zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w # xs \\<cong> {y' # ys', z' # zs', \\<lambda>w ws. P w (ws @ [x])}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w # xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_suffix_fst_1 [rule_format]:\n  assumes A: \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws)\"\n  shows \"xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow> xs @ ws \\<cong> {ys @ ws, zs, P}\"\n    (is \"_ \\<cong> {_, _, ?P'} \\<longrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {ys @ ws, zs, P}", "using [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {ys @ ws, zs, P}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<Longrightarrow>\n       ws \\<cong> {ys @ ws, zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<Longrightarrow>\n       ws \\<cong> {ys @ ws, zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "assume \"[] \\<cong> {ys, zs, ?P'}\""], ["proof (state)\nthis:\n  [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<Longrightarrow>\n       ws \\<cong> {ys @ ws, zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "hence \"ys = [] \\<and> zs = []\""], ["proof (prove)\nusing this:\n  [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. ys = [] \\<and> zs = []", "by (rule Interleaves_nil)"], ["proof (state)\nthis:\n  ys = [] \\<and> zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} \\<Longrightarrow>\n       ws \\<cong> {ys @ ws, zs, P}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "thus \"ws \\<cong> {ys @ ws, zs, P}\""], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n\ngoal (1 subgoal):\n 1. ws \\<cong> {ys @ ws, zs, P}", "using A"], ["proof (prove)\nusing this:\n  ys = [] \\<and> zs = []\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws)\n\ngoal (1 subgoal):\n 1. ws \\<cong> {ys @ ws, zs, P}", "by (simp add: Interleaves_all_nil)"], ["proof (state)\nthis:\n  ws \\<cong> {ys @ ws, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "fix x xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "assume A: \"\\<And>ys zs. xs \\<cong> {ys, zs, ?P'} \\<longrightarrow> xs @ ws \\<cong> {ys @ ws, zs, P}\""], ["proof (state)\nthis:\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "assume \"x # xs \\<cong> {ys, zs, ?P'}\""], ["proof (state)\nthis:\n  x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs \\<cong> {ys, zs, \\<lambda>v vs.\n    P v (vs @ ws)} \\<longrightarrow>\n                   xs @ ws \\<cong> {ys @ ws, zs, P};\n        a # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\\<rbrakk>\n       \\<Longrightarrow> a # xs @ ws \\<cong> {ys @ ws, zs, P}", "thus \"x # xs @ ws \\<cong> {ys @ ws, zs, P}\""], ["proof (prove)\nusing this:\n  x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. x # xs @ ws \\<cong> {ys @ ws, zs, P}", "proof (rule_tac Interleaves.cases [of \"(?P', x # xs, ys, zs)\"],\n   simp_all del: Interleaves.simps(1),\n   (erule_tac conjE)+, (erule_tac [2] conjE)+, (erule_tac [3] conjE)+)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>Pa xa xs y ys z zs.\n       \\<lbrakk>xa # xs \\<cong> {y # ys, z # zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = xa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> xa # xs @ ws \\<cong> {y # ys @ ws, z # zs, P}\n 2. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 3. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "fix P' x' xs' y' ys' z' zs'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>Pa xa xs y ys z zs.\n       \\<lbrakk>xa # xs \\<cong> {y # ys, z # zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = xa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> xa # xs @ ws \\<cong> {y # ys @ ws, z # zs, P}\n 2. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 3. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "assume\n      B: \"x' # xs' \\<cong> {y' # ys', z' # zs', P'}\" and\n      C: \"?P' = P'\" and\n      D: \"xs = xs'\""], ["proof (state)\nthis:\n  x' # xs' \\<cong> {y' # ys', z' # zs', P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (3 subgoals):\n 1. \\<And>Pa xa xs y ys z zs.\n       \\<lbrakk>xa # xs \\<cong> {y # ys, z # zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = xa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> xa # xs @ ws \\<cong> {y # ys @ ws, z # zs, P}\n 2. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 3. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "show \"x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "proof (cases \"P' x' xs'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "have \"xs \\<cong> {ys', z' # zs', ?P'} \\<longrightarrow> xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z' #\n                     zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {ys' @ ws, z' # zs', P}", "using A"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z' #\n                     zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {ys' @ ws, z' # zs', P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "moreover"], ["proof (state)\nthis:\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "case True"], ["proof (state)\nthis:\n  P' x' xs'\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "hence \"xs \\<cong> {ys', z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  P' x' xs'\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "using B and C and D"], ["proof (prove)\nusing this:\n  P' x' xs'\n  x' # xs' \\<cong> {y' # ys', z' # zs', P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "have \"xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\""], ["proof (prove)\nusing this:\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys' @ ws, z' # zs', P}", ".."], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "moreover"], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "have \"P x' (xs' @ ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x' (xs' @ ws)", "using C [symmetric] and True"], ["proof (prove)\nusing this:\n  P' = (\\<lambda>v vs. P v (vs @ ws))\n  P' x' xs'\n\ngoal (1 subgoal):\n 1. P x' (xs' @ ws)", "by simp"], ["proof (state)\nthis:\n  P x' (xs' @ ws)\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "moreover"], ["proof (state)\nthis:\n  P x' (xs' @ ws)\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "have \"x' = y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' = y'", "using B and True"], ["proof (prove)\nusing this:\n  x' # xs' \\<cong> {y' # ys', z' # zs', P'}\n  P' x' xs'\n\ngoal (1 subgoal):\n 1. x' = y'", "by simp"], ["proof (state)\nthis:\n  x' = y'\n\ngoal (2 subgoals):\n 1. P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n 2. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n  P x' (xs' @ ws)\n  x' = y'", "show ?thesis"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n  P x' (xs' @ ws)\n  x' = y'\n\ngoal (1 subgoal):\n 1. x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "using D"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n  P x' (xs' @ ws)\n  x' = y'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "by simp"], ["proof (state)\nthis:\n  x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "have \"xs \\<cong> {y' # ys', zs', ?P'} \\<longrightarrow> xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {y' #\n                ys', zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}", "using A"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y' #\n                ys', zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "moreover"], ["proof (state)\nthis:\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "case False"], ["proof (state)\nthis:\n  \\<not> P' x' xs'\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "hence \"xs \\<cong> {y' # ys', zs', ?P'}\""], ["proof (prove)\nusing this:\n  \\<not> P' x' xs'\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "using B and C and D"], ["proof (prove)\nusing this:\n  \\<not> P' x' xs'\n  x' # xs' \\<cong> {y' # ys', z' # zs', P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "have \"xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\""], ["proof (prove)\nusing this:\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}", ".."], ["proof (state)\nthis:\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "moreover"], ["proof (state)\nthis:\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "have \"\\<not> P x' (xs' @ ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P x' (xs' @ ws)", "using C [symmetric] and False"], ["proof (prove)\nusing this:\n  P' = (\\<lambda>v vs. P v (vs @ ws))\n  \\<not> P' x' xs'\n\ngoal (1 subgoal):\n 1. \\<not> P x' (xs' @ ws)", "by simp"], ["proof (state)\nthis:\n  \\<not> P x' (xs' @ ws)\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "moreover"], ["proof (state)\nthis:\n  \\<not> P x' (xs' @ ws)\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "have \"x' = z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' = z'", "using B and False"], ["proof (prove)\nusing this:\n  x' # xs' \\<cong> {y' # ys', z' # zs', P'}\n  \\<not> P' x' xs'\n\ngoal (1 subgoal):\n 1. x' = z'", "by simp"], ["proof (state)\nthis:\n  x' = z'\n\ngoal (1 subgoal):\n 1. \\<not> P' x' xs' \\<Longrightarrow>\n    x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n  \\<not> P x' (xs' @ ws)\n  x' = z'", "show ?thesis"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n  \\<not> P x' (xs' @ ws)\n  x' = z'\n\ngoal (1 subgoal):\n 1. x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "using D"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {(y' # ys') @ ws, zs', P}\n  \\<not> P x' (xs' @ ws)\n  x' = z'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}", "by simp"], ["proof (state)\nthis:\n  x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x' # xs' @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "fix P' x' xs' y' ys'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "have \"xs \\<cong> {ys', [], ?P'} \\<longrightarrow> xs @ ws \\<cong> {ys' @ ws, [], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {ys' @ ws, [], P}", "using A"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {ys' @ ws, [], P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "moreover"], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "assume\n      \"xs' \\<cong> {ys', [], P'}\" and\n      B: \"?P' = P'\" and\n      C: \"xs = xs'\""], ["proof (state)\nthis:\n  xs' \\<cong> {ys', [], P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "hence \"xs \\<cong> {ys', [], ?P'}\""], ["proof (prove)\nusing this:\n  xs' \\<cong> {ys', [], P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}", "have \"xs' @ ws \\<cong> {ys' @ ws, [], P}\""], ["proof (prove)\nusing this:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs' @ ws \\<cong> {ys' @ ws, [], P}", "using C"], ["proof (prove)\nusing this:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs' @ ws \\<cong> {ys' @ ws, [], P}", "by simp"], ["proof (state)\nthis:\n  xs' @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "moreover"], ["proof (state)\nthis:\n  xs' @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "assume\n      \"P' x' xs'\" and\n      \"x' = y'\""], ["proof (state)\nthis:\n  P' x' xs'\n  x' = y'\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "hence \"P y' (xs' @ ws)\""], ["proof (prove)\nusing this:\n  P' x' xs'\n  x' = y'\n\ngoal (1 subgoal):\n 1. P y' (xs' @ ws)", "using B [symmetric]"], ["proof (prove)\nusing this:\n  P' x' xs'\n  x' = y'\n  P' = (\\<lambda>v vs. P v (vs @ ws))\n\ngoal (1 subgoal):\n 1. P y' (xs' @ ws)", "by simp"], ["proof (state)\nthis:\n  P y' (xs' @ ws)\n\ngoal (2 subgoals):\n 1. \\<And>Pa xa xs y ys.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = y;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = y;\n        xs \\<cong> {ys, [], Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = y # ys;\n        zs = []\\<rbrakk>\n       \\<Longrightarrow> P y (xs @ ws) \\<and>\n                         xs @ ws \\<cong> {ys @ ws, [], P}\n 2. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  xs' @ ws \\<cong> {ys' @ ws, [], P}\n  P y' (xs' @ ws)", "show \"P y' (xs' @ ws) \\<and> xs' @ ws \\<cong> {ys' @ ws, [], P}\""], ["proof (prove)\nusing this:\n  xs' @ ws \\<cong> {ys' @ ws, [], P}\n  P y' (xs' @ ws)\n\ngoal (1 subgoal):\n 1. P y' (xs' @ ws) \\<and> xs' @ ws \\<cong> {ys' @ ws, [], P}", "by simp"], ["proof (state)\nthis:\n  P y' (xs' @ ws) \\<and> xs' @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "fix P' x' xs' z' zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "have \"xs \\<cong> {[], zs', ?P'} \\<longrightarrow> xs @ ws \\<cong> {[] @ ws, zs', P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {[] @ ws, zs', P}", "using A"], ["proof (prove)\nusing this:\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n    xs @ ws \\<cong> {[] @ ws, zs', P}", "."], ["proof (state)\nthis:\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {[] @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "moreover"], ["proof (state)\nthis:\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {[] @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "assume\n      \"xs' \\<cong> {[], zs', P'}\" and\n      B: \"?P' = P'\" and\n      C: \"xs = xs'\""], ["proof (state)\nthis:\n  xs' \\<cong> {[], zs', P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "hence \"xs \\<cong> {[], zs', ?P'}\""], ["proof (prove)\nusing this:\n  xs' \\<cong> {[], zs', P'}\n  (\\<lambda>v vs. P v (vs @ ws)) = P'\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {[] @ ws, zs', P}\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "have \"xs' @ ws \\<cong> {ws, zs', P}\""], ["proof (prove)\nusing this:\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {[] @ ws, zs', P}\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs' @ ws \\<cong> {ws, zs', P}", "using C"], ["proof (prove)\nusing this:\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)} \\<longrightarrow>\n  xs @ ws \\<cong> {[] @ ws, zs', P}\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}\n  xs = xs'\n\ngoal (1 subgoal):\n 1. xs' @ ws \\<cong> {ws, zs', P}", "by simp"], ["proof (state)\nthis:\n  xs' @ ws \\<cong> {ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "moreover"], ["proof (state)\nthis:\n  xs' @ ws \\<cong> {ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "assume\n      \"\\<not> P' x' xs'\" and\n      \"x' = z'\""], ["proof (state)\nthis:\n  \\<not> P' x' xs'\n  x' = z'\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "hence \"\\<not> P z' (xs' @ ws)\""], ["proof (prove)\nusing this:\n  \\<not> P' x' xs'\n  x' = z'\n\ngoal (1 subgoal):\n 1. \\<not> P z' (xs' @ ws)", "using B [symmetric]"], ["proof (prove)\nusing this:\n  \\<not> P' x' xs'\n  x' = z'\n  P' = (\\<lambda>v vs. P v (vs @ ws))\n\ngoal (1 subgoal):\n 1. \\<not> P z' (xs' @ ws)", "by simp"], ["proof (state)\nthis:\n  \\<not> P z' (xs' @ ws)\n\ngoal (1 subgoal):\n 1. \\<And>Pa xa xs z zs.\n       \\<lbrakk>x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        (\\<lambda>v vs. P v (vs @ ws)) = Pa;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        \\<not> Pa xa xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; x = z;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xa = z;\n        xs \\<cong> {[], zs, Pa};\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; xs = xs;\n        x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}; ys = [];\n        zs = z # zs\\<rbrakk>\n       \\<Longrightarrow> z # xs @ ws \\<cong> {ws, z # zs, P}", "ultimately"], ["proof (chain)\npicking this:\n  xs' @ ws \\<cong> {ws, zs', P}\n  \\<not> P z' (xs' @ ws)", "show \"z' # xs' @ ws \\<cong> {ws, z' # zs', P}\""], ["proof (prove)\nusing this:\n  xs' @ ws \\<cong> {ws, zs', P}\n  \\<not> P z' (xs' @ ws)\n\ngoal (1 subgoal):\n 1. z' # xs' @ ws \\<cong> {ws, z' # zs', P}", "by (cases ws, simp_all)"], ["proof (state)\nthis:\n  z' # xs' @ ws \\<cong> {ws, z' # zs', P}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ys @ ws, zs, P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_suffix_one_fst_1 [rule_format]:\n \"P x [] \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} \\<Longrightarrow> xs @ [x] \\<cong> {ys @ [x], zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x [];\n     xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<cong> {ys @ [x], zs, P}", "by (rule Interleaves_suffix_fst_1, simp)"], ["", "lemma Interleaves_suffix_one_fst:\n \"P x [] \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} = xs @ [x] \\<cong> {ys @ [x], zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x [] \\<Longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} =\n    xs @ [x] \\<cong> {ys @ [x], zs, P}", "proof (rule iffI, rule Interleaves_suffix_one_fst_1, assumption+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x []; xs @ [x] \\<cong> {ys @ [x], zs, P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])}", "qed (rule Interleaves_suffix_one_fst_2)"], ["", "lemma Interleaves_suffix_one_snd:\n \"\\<not> P x [] \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} = xs @ [x] \\<cong> {ys, zs @ [x], P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P x [] \\<Longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>w ws. P w (ws @ [x])} =\n    xs @ [x] \\<cong> {ys, zs @ [x], P}", "by (subst (1 2) Interleaves_swap, rule Interleaves_suffix_one_fst)"], ["", "lemma Interleaves_suffix_aux [rule_format]:\n \"(\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n  x # xs @ ws \\<cong> {ws, zs, P} \\<longrightarrow>\n  \\<not> P x (xs @ ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n    x # xs @ ws \\<cong> {ws, zs, P} \\<longrightarrow> \\<not> P x (xs @ ws)", "proof (induction ws arbitrary: P rule: rev_induct, simp_all,\n rule impI, (rule_tac [2] impI)+)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P. x # xs \\<cong> {[], zs, P} \\<Longrightarrow> \\<not> P x xs\n 2. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "fix P"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P. x # xs \\<cong> {[], zs, P} \\<Longrightarrow> \\<not> P x xs\n 2. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "assume \"x # xs \\<cong> {[], zs, P}\""], ["proof (state)\nthis:\n  x # xs \\<cong> {[], zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>P. x # xs \\<cong> {[], zs, P} \\<Longrightarrow> \\<not> P x xs\n 2. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "thus \"\\<not> P x xs\""], ["proof (prove)\nusing this:\n  x # xs \\<cong> {[], zs, P}\n\ngoal (1 subgoal):\n 1. \\<not> P x xs", "by (cases zs, simp_all)"], ["proof (state)\nthis:\n  \\<not> P x xs\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "fix w ws P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "assume\n    A: \"\\<And>P'. (\\<forall>n < length ws. P' (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n      x # xs @ ws \\<cong> {ws, zs, P'} \\<longrightarrow> \\<not> P' x (xs @ ws)\" and\n    B: \"\\<forall>n < Suc (length ws). P ((ws @ [w]) ! n)\n      (drop (Suc n) ws @ drop (Suc n - length ws) [w])\""], ["proof (state)\nthis:\n  (\\<forall>n<length ws. ?P' (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n  x # xs @ ws \\<cong> {ws, zs, ?P'} \\<longrightarrow> \\<not> ?P' x (xs @ ws)\n  \\<forall>n<Suc (length ws).\n     P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "assume \"x # xs @ ws @ [w] \\<cong> {ws @ [w], zs, P}\""], ["proof (state)\nthis:\n  x # xs @ ws @ [w] \\<cong> {ws @ [w], zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "hence C: \"(x # xs @ ws) @ [w] \\<cong> {ws @ [w], zs, P}\""], ["proof (prove)\nusing this:\n  x # xs @ ws @ [w] \\<cong> {ws @ [w], zs, P}\n\ngoal (1 subgoal):\n 1. (x # xs @ ws) @ [w] \\<cong> {ws @ [w], zs, P}", "by simp"], ["proof (state)\nthis:\n  (x # xs @ ws) @ [w] \\<cong> {ws @ [w], zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "let ?P' = \"\\<lambda>v vs. P v (vs @ [w])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "have \"(\\<forall>n < length ws. ?P' (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n    x # xs @ ws \\<cong> {ws, zs, ?P'} \\<longrightarrow> \\<not> ?P' x (xs @ ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ [w])) \\<longrightarrow>\n    x #\n    xs @\n    ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n    \\<not> P x ((xs @ ws) @ [w])", "using A"], ["proof (prove)\nusing this:\n  (\\<forall>n<length ws. ?P' (ws ! n) (drop (Suc n) ws)) \\<longrightarrow>\n  x # xs @ ws \\<cong> {ws, zs, ?P'} \\<longrightarrow> \\<not> ?P' x (xs @ ws)\n\ngoal (1 subgoal):\n 1. (\\<forall>n<length ws.\n        P (ws ! n) (drop (Suc n) ws @ [w])) \\<longrightarrow>\n    x #\n    xs @\n    ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n    \\<not> P x ((xs @ ws) @ [w])", "."], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ [w])) \\<longrightarrow>\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "moreover"], ["proof (state)\nthis:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ [w])) \\<longrightarrow>\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "have \"\\<forall>n < length ws. ?P' (ws ! n) (drop (Suc n) ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ [w])", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "assume D: \"n < length ws\""], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "moreover"], ["proof (state)\nthis:\n  n < length ws\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "have \"n < Suc (length ws) \\<longrightarrow> P ((ws @ [w]) ! n)\n      (drop (Suc n) ws @ drop (Suc n - length ws) [w])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc (length ws) \\<longrightarrow>\n    P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])", "using B"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws).\n     P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])\n\ngoal (1 subgoal):\n 1. n < Suc (length ws) \\<longrightarrow>\n    P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])", ".."], ["proof (state)\nthis:\n  n < Suc (length ws) \\<longrightarrow>\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "ultimately"], ["proof (chain)\npicking this:\n  n < length ws\n  n < Suc (length ws) \\<longrightarrow>\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])", "have \"P ((ws @ [w]) ! n) (drop (Suc n) ws @ [w])\""], ["proof (prove)\nusing this:\n  n < length ws\n  n < Suc (length ws) \\<longrightarrow>\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])\n\ngoal (1 subgoal):\n 1. P ((ws @ [w]) ! n) (drop (Suc n) ws @ [w])", "by simp"], ["proof (state)\nthis:\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "moreover"], ["proof (state)\nthis:\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "have \"n < length (butlast (ws @ [w]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length (butlast (ws @ [w]))", "using D"], ["proof (prove)\nusing this:\n  n < length ws\n\ngoal (1 subgoal):\n 1. n < length (butlast (ws @ [w]))", "by simp"], ["proof (state)\nthis:\n  n < length (butlast (ws @ [w]))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "hence \"butlast (ws @ [w]) ! n = (ws @ [w]) ! n\""], ["proof (prove)\nusing this:\n  n < length (butlast (ws @ [w]))\n\ngoal (1 subgoal):\n 1. butlast (ws @ [w]) ! n = (ws @ [w]) ! n", "by (rule nth_butlast)"], ["proof (state)\nthis:\n  butlast (ws @ [w]) ! n = (ws @ [w]) ! n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ws \\<Longrightarrow> P (ws ! n) (drop (Suc n) ws @ [w])", "ultimately"], ["proof (chain)\npicking this:\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ [w])\n  butlast (ws @ [w]) ! n = (ws @ [w]) ! n", "show \"P (ws ! n) (drop (Suc n) ws @ [w])\""], ["proof (prove)\nusing this:\n  P ((ws @ [w]) ! n) (drop (Suc n) ws @ [w])\n  butlast (ws @ [w]) ! n = (ws @ [w]) ! n\n\ngoal (1 subgoal):\n 1. P (ws ! n) (drop (Suc n) ws @ [w])", "by simp"], ["proof (state)\nthis:\n  P (ws ! n) (drop (Suc n) ws @ [w])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ [w])) \\<longrightarrow>\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ [w])", "have \"x # xs @ ws \\<cong> {ws, zs, ?P'} \\<longrightarrow> \\<not> ?P' x (xs @ ws)\""], ["proof (prove)\nusing this:\n  (\\<forall>n<length ws.\n      P (ws ! n) (drop (Suc n) ws @ [w])) \\<longrightarrow>\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n  \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws @ [w])\n\ngoal (1 subgoal):\n 1. x #\n    xs @\n    ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n    \\<not> P x ((xs @ ws) @ [w])", ".."], ["proof (state)\nthis:\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "moreover"], ["proof (state)\nthis:\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "have \"length ws < Suc (length ws) \\<longrightarrow> P ((ws @ [w]) ! length ws)\n    (drop (Suc (length ws)) ws @ drop (Suc (length ws) - length ws) [w])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ws < Suc (length ws) \\<longrightarrow>\n    P ((ws @ [w]) ! length ws)\n     (drop (Suc (length ws)) ws @ drop (Suc (length ws) - length ws) [w])", "using B"], ["proof (prove)\nusing this:\n  \\<forall>n<Suc (length ws).\n     P ((ws @ [w]) ! n) (drop (Suc n) ws @ drop (Suc n - length ws) [w])\n\ngoal (1 subgoal):\n 1. length ws < Suc (length ws) \\<longrightarrow>\n    P ((ws @ [w]) ! length ws)\n     (drop (Suc (length ws)) ws @ drop (Suc (length ws) - length ws) [w])", ".."], ["proof (state)\nthis:\n  length ws < Suc (length ws) \\<longrightarrow>\n  P ((ws @ [w]) ! length ws)\n   (drop (Suc (length ws)) ws @ drop (Suc (length ws) - length ws) [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "hence \"P w []\""], ["proof (prove)\nusing this:\n  length ws < Suc (length ws) \\<longrightarrow>\n  P ((ws @ [w]) ! length ws)\n   (drop (Suc (length ws)) ws @ drop (Suc (length ws) - length ws) [w])\n\ngoal (1 subgoal):\n 1. P w []", "by simp"], ["proof (state)\nthis:\n  P w []\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "hence \"x # xs @ ws \\<cong> {ws, zs, ?P'}\""], ["proof (prove)\nusing this:\n  P w []\n\ngoal (1 subgoal):\n 1. x # xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])}", "using C"], ["proof (prove)\nusing this:\n  P w []\n  (x # xs @ ws) @ [w] \\<cong> {ws @ [w], zs, P}\n\ngoal (1 subgoal):\n 1. x # xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])}", "by (rule Interleaves_suffix_one_fst_2)"], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])}\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "ultimately"], ["proof (chain)\npicking this:\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n  x # xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])}", "have \"\\<not> ?P' x (xs @ ws)\""], ["proof (prove)\nusing this:\n  x #\n  xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])} \\<longrightarrow>\n  \\<not> P x ((xs @ ws) @ [w])\n  x # xs @ ws \\<cong> {ws, zs, \\<lambda>v vs. P v (vs @ [w])}\n\ngoal (1 subgoal):\n 1. \\<not> P x ((xs @ ws) @ [w])", ".."], ["proof (state)\nthis:\n  \\<not> P x ((xs @ ws) @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>xa xsa P.\n       \\<lbrakk>\\<And>P.\n                   (\\<forall>n<length xsa.\n                       P (xsa ! n) (drop (Suc n) xsa)) \\<longrightarrow>\n                   x # xs @ xsa \\<cong> {xsa, zs, P} \\<longrightarrow>\n                   \\<not> P x (xs @ xsa);\n        \\<forall>n<Suc (length xsa).\n           P ((xsa @ [xa]) ! n)\n            (drop (Suc n) xsa @ drop (Suc n - length xsa) [xa]);\n        x # xs @ xsa @ [xa] \\<cong> {xsa @ [xa], zs, P}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P x (xs @ xsa @ [xa])", "thus \"\\<not> P x (xs @ ws @ [w])\""], ["proof (prove)\nusing this:\n  \\<not> P x ((xs @ ws) @ [w])\n\ngoal (1 subgoal):\n 1. \\<not> P x (xs @ ws @ [w])", "by simp"], ["proof (state)\nthis:\n  \\<not> P x (xs @ ws @ [w])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_suffix_fst_2 [rule_format]:\n  assumes A: \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws)\"\n  shows \"xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow> xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\"\n    (is \"_ \\<longrightarrow> _ \\<cong> {_, _, ?P'}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "using [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "proof (induction xs arbitrary: ys zs, rule_tac [!] impI, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       ws \\<cong> {ys @ ws, zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "fix ys zs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       ws \\<cong> {ys @ ws, zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "assume \"ws \\<cong> {ys @ ws, zs, P}\""], ["proof (state)\nthis:\n  ws \\<cong> {ys @ ws, zs, P}\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       ws \\<cong> {ys @ ws, zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "hence B: \"length ws = length (ys @ ws) + length zs\""], ["proof (prove)\nusing this:\n  ws \\<cong> {ys @ ws, zs, P}\n\ngoal (1 subgoal):\n 1. length ws = length (ys @ ws) + length zs", "by (rule Interleaves_length)"], ["proof (state)\nthis:\n  length ws = length (ys @ ws) + length zs\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       ws \\<cong> {ys @ ws, zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "have ys: \"ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = []", "by (cases ys, simp, insert B, simp)"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       ws \\<cong> {ys @ ws, zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "then"], ["proof (chain)\npicking this:\n  ys = []", "have \"zs = []\""], ["proof (prove)\nusing this:\n  ys = []\n\ngoal (1 subgoal):\n 1. zs = []", "by (cases zs, simp, insert B, simp)"], ["proof (state)\nthis:\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       ws \\<cong> {ys @ ws, zs, P} \\<Longrightarrow>\n       [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "with ys"], ["proof (chain)\npicking this:\n  ys = []\n  zs = []", "show \"[] \\<cong> {ys, zs, ?P'}\""], ["proof (prove)\nusing this:\n  ys = []\n  zs = []\n\ngoal (1 subgoal):\n 1. [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  [] \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "fix x xs ys zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "assume B: \"\\<And>ys zs. xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow> xs \\<cong> {ys, zs, ?P'}\""], ["proof (state)\nthis:\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "assume \"x # xs @ ws \\<cong> {ys @ ws, zs, P}\""], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ys @ ws, zs, P}\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys zs.\n       \\<lbrakk>\\<And>ys zs.\n                   xs @ ws \\<cong> {ys @ ws, zs, P} \\<longrightarrow>\n                   xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)};\n        a # xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n       \\<Longrightarrow> a #\n                         xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "thus \"x # xs \\<cong> {ys, zs, ?P'}\""], ["proof (prove)\nusing this:\n  x # xs @ ws \\<cong> {ys @ ws, zs, P}\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "proof (cases zs, case_tac [!] ys, simp_all del: Interleaves.simps(1,3),\n   (erule_tac [2] conjE)+)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>x # xs @ ws \\<cong> {ws, [], P}; zs = []; ys = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "assume C: \"x # xs @ ws \\<cong> {ws, [], P}\""], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ws, [], P}\n\ngoal (4 subgoals):\n 1. \\<lbrakk>x # xs @ ws \\<cong> {ws, [], P}; zs = []; ys = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "have \"length (x # xs @ ws) = length ws + length []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x # xs @ ws) = length ws + length []", "by (insert Interleaves_length [OF C], simp)"], ["proof (state)\nthis:\n  length (x # xs @ ws) = length ws + length []\n\ngoal (4 subgoals):\n 1. \\<lbrakk>x # xs @ ws \\<cong> {ws, [], P}; zs = []; ys = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 4. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "thus False"], ["proof (prove)\nusing this:\n  length (x # xs @ ws) = length ws + length []\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "fix ys'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "have \"xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow> xs \\<cong> {ys', [], ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow>\n    xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}", "using B"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow>\n    xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}", "."], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "moreover"], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "assume \"xs @ ws \\<cong> {ys' @ ws, [], P}\""], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (3 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>zs = []; P a (xs @ ws); ys = a # list;\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; P x (xs @ ws);\n        x # xs @ ws \\<cong> {ys @ ws, zs, P}; x = a;\n        xs @ ws \\<cong> {list @ ws, [], P}\\<rbrakk>\n       \\<Longrightarrow> xs \\<cong> {list, [], \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 3. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n  xs @ ws \\<cong> {ys' @ ws, [], P}", "show \"xs \\<cong> {ys', [], ?P'}\""], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {ys' @ ws, [], P} \\<longrightarrow>\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n  xs @ ws \\<cong> {ys' @ ws, [], P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {ys', [], \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "fix z' zs'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "assume \"x # xs @ ws \\<cong> {ws, z' # zs', P}\""], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>x # xs @ ws \\<cong> {ws, a # list, P}; zs = a # list;\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {[], a #\n   list, \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "thus \"x # xs \\<cong> {[], z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  x # xs @ ws \\<cong> {ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {[], z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "proof (cases \"P x (xs @ ws)\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ ws); x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "case True"], ["proof (state)\nthis:\n  P x (xs @ ws)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ ws); x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "moreover"], ["proof (state)\nthis:\n  P x (xs @ ws)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ ws); x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "assume \"x # xs @ ws \\<cong> {ws, z' # zs', P}\""], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ ws); x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "with A [rule_format]"], ["proof (chain)\npicking this:\n  ?n < length ws \\<Longrightarrow> P (ws ! ?n) (drop (Suc ?n) ws)\n  x # xs @ ws \\<cong> {ws, z' # zs', P}", "have \"\\<not> P x (xs @ ws)\""], ["proof (prove)\nusing this:\n  ?n < length ws \\<Longrightarrow> P (ws ! ?n) (drop (Suc ?n) ws)\n  x # xs @ ws \\<cong> {ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. \\<not> P x (xs @ ws)", "by (rule Interleaves_suffix_aux)"], ["proof (state)\nthis:\n  \\<not> P x (xs @ ws)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P x (xs @ ws); x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "ultimately"], ["proof (chain)\npicking this:\n  P x (xs @ ws)\n  \\<not> P x (xs @ ws)", "show False"], ["proof (prove)\nusing this:\n  P x (xs @ ws)\n  \\<not> P x (xs @ ws)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "case False"], ["proof (state)\nthis:\n  \\<not> P x (xs @ ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "moreover"], ["proof (state)\nthis:\n  \\<not> P x (xs @ ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "assume \"x # xs @ ws \\<cong> {ws, z' # zs', P}\""], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> P x (xs @ ws)\n  x # xs @ ws \\<cong> {ws, z' # zs', P}", "have \"x = z' \\<and> xs @ ws \\<cong> {ws, zs', P}\""], ["proof (prove)\nusing this:\n  \\<not> P x (xs @ ws)\n  x # xs @ ws \\<cong> {ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. x = z' \\<and> xs @ ws \\<cong> {ws, zs', P}", "by (cases ws, simp_all)"], ["proof (state)\nthis:\n  x = z' \\<and> xs @ ws \\<cong> {ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "moreover"], ["proof (state)\nthis:\n  x = z' \\<and> xs @ ws \\<cong> {ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "have \"xs @ ws \\<cong> {[] @ ws, zs', P} \\<longrightarrow> xs \\<cong> {[], zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {[] @ ws, zs', P} \\<longrightarrow>\n    xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "using B"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {[] @ ws, zs', P} \\<longrightarrow>\n    xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "."], ["proof (state)\nthis:\n  xs @ ws \\<cong> {[] @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P x (xs @ ws);\n     x # xs @ ws \\<cong> {ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> x = z' \\<and>\n                      xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "ultimately"], ["proof (chain)\npicking this:\n  x = z' \\<and> xs @ ws \\<cong> {ws, zs', P}\n  xs @ ws \\<cong> {[] @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "show \"x = z' \\<and> xs \\<cong> {[], zs', ?P'}\""], ["proof (prove)\nusing this:\n  x = z' \\<and> xs @ ws \\<cong> {ws, zs', P}\n  xs @ ws \\<cong> {[] @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. x = z' \\<and> xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  x = z' \\<and> xs \\<cong> {[], zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x # xs \\<cong> {[], z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "fix y' ys' z' zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "assume \"x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\""], ["proof (state)\nthis:\n  x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. \\<And>a list aa lista.\n       \\<lbrakk>x # xs @ ws \\<cong> {aa # lista @ ws, a # list, P};\n        zs = a # list; ys = aa # lista\\<rbrakk>\n       \\<Longrightarrow> x #\n                         xs \\<cong> {aa #\n                                     lista, a #\n      list, \\<lambda>v vs. P v (vs @ ws)}", "thus \"x # xs \\<cong> {y' # ys', z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. x # xs \\<cong> {y' # ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "proof (cases \"P x (xs @ ws)\", simp_all, erule_tac [!] conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = y';\n     xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "have \"xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow> xs \\<cong> {ys', z' # zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow>\n    xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "using B"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow>\n    xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", "."], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = y';\n     xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "moreover"], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = y';\n     xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "assume \"xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\""], ["proof (state)\nthis:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P y' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = y';\n     xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys', z' #\n zs', \\<lambda>v vs. P v (vs @ ws)}\n 2. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}", "show \"xs \\<cong> {ys', z' # zs', ?P'}\""], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P} \\<longrightarrow>\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n  xs @ ws \\<cong> {ys' @ ws, z' # zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "have \"xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow> xs \\<cong> {y' # ys', zs', ?P'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow>\n    xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "using B"], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {?ys @ ws, ?zs, P} \\<longrightarrow>\n  xs \\<cong> {?ys, ?zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow>\n    xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "by simp"], ["proof (state)\nthis:\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "moreover"], ["proof (state)\nthis:\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "assume \"xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\""], ["proof (state)\nthis:\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P z' (xs @ ws);\n     x # xs @ ws \\<cong> {y' # ys' @ ws, z' # zs', P}; x = z';\n     xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {y' #\n                                  ys', zs', \\<lambda>v vs. P v (vs @ ws)}", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P}", "show \"xs \\<cong> {y' # ys', zs', ?P'}\""], ["proof (prove)\nusing this:\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P} \\<longrightarrow>\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n  xs @ ws \\<cong> {y' # ys' @ ws, zs', P}\n\ngoal (1 subgoal):\n 1. xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}", ".."], ["proof (state)\nthis:\n  xs \\<cong> {y' # ys', zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x # xs \\<cong> {y' # ys', z' # zs', \\<lambda>v vs. P v (vs @ ws)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x # xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Interleaves_suffix_fst [rule_format]:\n \"\\<forall>n < length ws. P (ws ! n) (drop (Suc n) ws) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} = xs @ ws \\<cong> {ys @ ws, zs, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws) \\<Longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} =\n    xs @ ws \\<cong> {ys @ ws, zs, P}", "proof (rule iffI, rule Interleaves_suffix_fst_1, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n<length ws. P (ws ! n) (drop (Suc n) ws);\n     xs @ ws \\<cong> {ys @ ws, zs, P}\\<rbrakk>\n    \\<Longrightarrow> xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)}", "qed (rule Interleaves_suffix_fst_2, simp)"], ["", "lemma Interleaves_suffix_snd [rule_format]:\n \"\\<forall>n < length ws. \\<not> P (ws ! n) (drop (Suc n) ws) \\<Longrightarrow>\n  xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} = xs @ ws \\<cong> {ys, zs @ ws, P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length ws.\n       \\<not> P (ws ! n) (drop (Suc n) ws) \\<Longrightarrow>\n    xs \\<cong> {ys, zs, \\<lambda>v vs. P v (vs @ ws)} =\n    xs @ ws \\<cong> {ys, zs @ ws, P}", "by (subst (1 2) Interleaves_swap, rule Interleaves_suffix_fst, simp)"], ["", "end"]]}