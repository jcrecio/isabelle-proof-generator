{"file_name": "/home/qj213/afp-2021-10-22/thys/Noninterference_CSP/CSPNoninterference.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Noninterference_CSP", "problem_names": ["lemma process_rule_2: \"(xs @ [x], X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\"", "lemma process_rule_3: \"(xs, Y) \\<in> failures P \\<Longrightarrow> X \\<subseteq> Y \\<Longrightarrow> (xs, X) \\<in> failures P\"", "lemma process_rule_2_failures [rule_format]:\n \"(xs @ xs', X) \\<in> failures P \\<longrightarrow> (xs, {}) \\<in> failures P\"", "lemma process_rule_2_futures:\n \"(ys @ ys', Y) \\<in> futures P xs \\<Longrightarrow> (ys, {}) \\<in> futures P xs\"", "lemma sinks_cons_same:\n  assumes R: \"refl I\"\n  shows \"sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\"", "lemma ipurge_tr_cons_same:\n  assumes R: \"refl I\"\n  shows \"ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs\"", "lemma sinks_cons_nonint:\n  assumes A: \"(u, D x) \\<notin> I\"\n  shows \"sinks I D u (x # xs) = sinks I D u xs\"", "lemma sinks_empty [rule_format]:\n \"sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs\"", "lemma ipurge_ref_eq:\n  assumes A: \"D x \\<in> sinks I D u (xs @ [x])\"\n  shows \"ipurge_ref I D u (xs @ [x]) X =\n    ipurge_ref I D u xs {x' \\<in> X. (D x, D x') \\<notin> I}\""], "translations": [["", "lemma process_rule_2: \"(xs @ [x], X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> failures P \\<Longrightarrow>\n    (xs, {}) \\<in> failures P", "proof (simp add: failures_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> fst (Rep_process P) \\<Longrightarrow>\n    (xs, {}) \\<in> fst (Rep_process P)", "have \"Rep_process P \\<in> process_set\" (is \"?P' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process P \\<in> process_set", "by (rule Rep_process)"], ["proof (state)\nthis:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> fst (Rep_process P) \\<Longrightarrow>\n    (xs, {}) \\<in> fst (Rep_process P)", "hence \"\\<forall>xs x X. (xs @ [x], X) \\<in> fst ?P' \\<longrightarrow> (xs, {}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<forall>xs x X.\n       (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n       (xs, {}) \\<in> fst (Rep_process P)", "by (simp add: process_set_def process_prop_2_def)"], ["proof (state)\nthis:\n  \\<forall>xs x X.\n     (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n     (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> fst (Rep_process P) \\<Longrightarrow>\n    (xs, {}) \\<in> fst (Rep_process P)", "thus \"(xs @ [x], X) \\<in> fst ?P' \\<Longrightarrow> (xs, {}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  \\<forall>xs x X.\n     (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n     (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> fst (Rep_process P) \\<Longrightarrow>\n    (xs, {}) \\<in> fst (Rep_process P)", "by blast"], ["proof (state)\nthis:\n  (xs @ [x], X) \\<in> fst (Rep_process P) \\<Longrightarrow>\n  (xs, {}) \\<in> fst (Rep_process P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma process_rule_3: \"(xs, Y) \\<in> failures P \\<Longrightarrow> X \\<subseteq> Y \\<Longrightarrow> (xs, X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, Y) \\<in> failures P; X \\<subseteq> Y\\<rbrakk>\n    \\<Longrightarrow> (xs, X) \\<in> failures P", "proof (simp add: failures_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, Y) \\<in> fst (Rep_process P); X \\<subseteq> Y\\<rbrakk>\n    \\<Longrightarrow> (xs, X) \\<in> fst (Rep_process P)", "have \"Rep_process P \\<in> process_set\" (is \"?P' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process P \\<in> process_set", "by (rule Rep_process)"], ["proof (state)\nthis:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, Y) \\<in> fst (Rep_process P); X \\<subseteq> Y\\<rbrakk>\n    \\<Longrightarrow> (xs, X) \\<in> fst (Rep_process P)", "hence \"\\<forall>xs X Y. (xs, Y) \\<in> fst ?P' \\<and> X \\<subseteq> Y \\<longrightarrow> (xs, X) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<forall>xs X Y.\n       (xs, Y) \\<in> fst (Rep_process P) \\<and>\n       X \\<subseteq> Y \\<longrightarrow>\n       (xs, X) \\<in> fst (Rep_process P)", "by (simp add: process_set_def process_prop_3_def)"], ["proof (state)\nthis:\n  \\<forall>xs X Y.\n     (xs, Y) \\<in> fst (Rep_process P) \\<and>\n     X \\<subseteq> Y \\<longrightarrow>\n     (xs, X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, Y) \\<in> fst (Rep_process P); X \\<subseteq> Y\\<rbrakk>\n    \\<Longrightarrow> (xs, X) \\<in> fst (Rep_process P)", "thus \"(xs, Y) \\<in> fst ?P' \\<Longrightarrow> X \\<subseteq> Y \\<Longrightarrow> (xs, X) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  \\<forall>xs X Y.\n     (xs, Y) \\<in> fst (Rep_process P) \\<and>\n     X \\<subseteq> Y \\<longrightarrow>\n     (xs, X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, Y) \\<in> fst (Rep_process P); X \\<subseteq> Y\\<rbrakk>\n    \\<Longrightarrow> (xs, X) \\<in> fst (Rep_process P)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>(xs, Y) \\<in> fst (Rep_process P); X \\<subseteq> Y\\<rbrakk>\n  \\<Longrightarrow> (xs, X) \\<in> fst (Rep_process P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma process_rule_2_failures [rule_format]:\n \"(xs @ xs', X) \\<in> failures P \\<longrightarrow> (xs, {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ xs', X) \\<in> failures P \\<longrightarrow>\n    (xs, {}) \\<in> failures P", "proof (induction xs' arbitrary: X rule: rev_induct, rule_tac [!] impI, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       (xs, X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\n 2. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       (xs, X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\n 2. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "assume \"(xs, X) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       (xs, X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\n 2. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       (xs, X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\n 2. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "have \"{} \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> X", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> X\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       (xs, X) \\<in> failures P \\<Longrightarrow> (xs, {}) \\<in> failures P\n 2. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs, X) \\<in> failures P\n  {} \\<subseteq> X", "show \"(xs, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n  {} \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "fix x xs' X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "assume \"\\<And>X. (xs @ xs', X) \\<in> failures P \\<longrightarrow> (xs, {}) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ xs', ?X) \\<in> failures P \\<longrightarrow>\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "hence \"(xs @ xs', {}) \\<in> failures P \\<longrightarrow> (xs, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ xs', ?X) \\<in> failures P \\<longrightarrow>\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ xs', {}) \\<in> failures P \\<longrightarrow>\n    (xs, {}) \\<in> failures P", "."], ["proof (state)\nthis:\n  (xs @ xs', {}) \\<in> failures P \\<longrightarrow>\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ xs', {}) \\<in> failures P \\<longrightarrow>\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "assume \"(xs @ xs' @ [x], X) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ xs' @ [x], X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "hence \"((xs @ xs') @ [x], X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ xs' @ [x], X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ((xs @ xs') @ [x], X) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  ((xs @ xs') @ [x], X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "hence \"(xs @ xs', {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  ((xs @ xs') @ [x], X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ xs', {}) \\<in> failures P", "by (rule process_rule_2)"], ["proof (state)\nthis:\n  (xs @ xs', {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>x xsa X.\n       \\<lbrakk>\\<And>X.\n                   (xs @ xsa, X) \\<in> failures P \\<longrightarrow>\n                   (xs, {}) \\<in> failures P;\n        (xs @ xsa @ [x], X) \\<in> failures P\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ xs', {}) \\<in> failures P \\<longrightarrow>\n  (xs, {}) \\<in> failures P\n  (xs @ xs', {}) \\<in> failures P", "show \"(xs, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ xs', {}) \\<in> failures P \\<longrightarrow>\n  (xs, {}) \\<in> failures P\n  (xs @ xs', {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs, {}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma process_rule_2_futures:\n \"(ys @ ys', Y) \\<in> futures P xs \\<Longrightarrow> (ys, {}) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys @ ys', Y) \\<in> futures P xs \\<Longrightarrow>\n    (ys, {}) \\<in> futures P xs", "by (simp add: futures_def, simp only: append_assoc [symmetric], rule process_rule_2_failures)"], ["", "subsection \"Noninterference\""], ["", "text \\<open>\nIn the classical theory of noninterference, a deterministic state machine is considered to be secure\njust in case, for any trace of the machine and any action occurring next, the observable effect of\nthe action, i.e. the produced output, is compatible with the assigned noninterference policy.\n\nThus, by analogy, it seems reasonable to regard a process as being noninterference-secure just in\ncase, for any of its traces and any event occurring next, the observable effect of the event, i.e.\nthe set of the possible futures of the process, is compatible with a given noninterference policy.\n\nMore precisely, let \\<open>sinks I D u xs\\<close> be the set of the security domains of the events within\nevent list \\<open>xs\\<close> that may be affected by domain \\<open>u\\<close> according to interference relation\n\\<open>I\\<close>, where \\<open>D\\<close> is the mapping of events into their domains. Since the general case of a\npossibly intransitive relation \\<open>I\\<close> is considered, function \\<open>sinks\\<close> has to be defined\nrecursively, similarly to what happens for function \\emph{sources} in \\cite{R3}. However,\ncontrariwise to function \\emph{sources}, function \\<open>sinks\\<close> takes into account the influence of\nthe input domain on the input event list, so that the recursive decomposition of the latter has to\nbe performed by item appending rather than prepending.\n\nFurthermore, let \\<open>ipurge_tr I D u xs\\<close> be the sublist of event list \\<open>xs\\<close> obtained by\nrecursively deleting the events that may be affected by domain \\<open>u\\<close> as detected via function\n\\<open>sinks\\<close>, and \\<open>ipurge_ref I D u xs X\\<close> be the subset of refusal \\<open>X\\<close> whose elements\nmay not be affected by either \\<open>u\\<close> or any domain in \\<open>sinks I D u xs\\<close>.\n\nThen, a process \\<open>P\\<close> is secure just in case, for each event list \\<open>xs\\<close> and each\n\\<open>(y # ys, Y), (zs, Z) \\<in> futures P xs\\<close>, both of the following conditions are satisfied:\n\n\\begin{itemize}\n\n\\item\n\\<open>(ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> futures P xs\\<close>.\n\\\\Otherwise, the absence of event \\<open>y\\<close> after \\<open>xs\\<close> would affect the possibility for pair\n\\<open>(ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\\<close> to occur as a future of \\<open>xs\\<close>,\nalthough its components, except for the deletion of \\<open>y\\<close>, are those of possible future\n\\<open>(y # ys, Y)\\<close> deprived of any event allowed to be affected by \\<open>y\\<close>.\n\n\\item\n\\<open>(y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\\<close>\n\\\\\\<open>\\<in> futures P xs\\<close>.\n\\\\Otherwise, the presence of event \\<open>y\\<close> after \\<open>xs\\<close> would affect the possibility for pair\n\\<open>(y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\\<close> to occur as a future of\n\\<open>xs\\<close>, although its components, except for the addition of \\<open>y\\<close>, are those of possible\nfuture \\<open>(zs, Z)\\<close> deprived of any event allowed to be affected by \\<open>y\\<close>.\n\n\\end{itemize}\n\nObserve that this definition of security, henceforth referred to as\n\\emph{CSP noninterference security}, does not rest on the supposition that noninterference policy\n\\<open>I\\<close> be reflexive, even though any policy of practical significance will be such.\n\nMoreover, this simpler formulation is equivalent to the one obtained by restricting the range of\nevent list \\<open>xs\\<close> to the traces of process \\<open>P\\<close>. In fact, for each \\<open>zs\\<close>, \\<open>Z\\<close>,\n\\<open>(zs, Z) \\<in> futures P xs\\<close> just in case \\<open>(xs @ zs, Z) \\<in> failures P\\<close>, which by virtue\nof rule \\<open>process_rule_2_failures\\<close> implies that \\<open>xs\\<close> is a trace of \\<open>P\\<close>. Therefore,\nformula \\<open>(zs, Z) \\<in> futures P xs\\<close> is invariably false in case \\<open>xs\\<close> is not a trace of\n\\<open>P\\<close>.\n\nHere below are the formal counterparts of the definitions discussed so far.\n\n\\null\n\\<close>"], ["", "function sinks :: \"('d \\<times> 'd) set \\<Rightarrow> ('a \\<Rightarrow> 'd) \\<Rightarrow> 'd \\<Rightarrow> 'a list \\<Rightarrow> 'd set\" where\n\"sinks _ _ _ [] = {}\" |\n\"sinks I D u (xs @ [x]) = (if (u, D x) \\<in> I \\<or> (\\<exists>v \\<in> sinks I D u xs. (v, D x) \\<in> I)\n  then insert (D x) (sinks I D u xs)\n  else sinks I D u xs)\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>uu_ uv_ uw_.\n                   x = (uu_, uv_, uw_, []) \\<Longrightarrow> P;\n        \\<And>I D u xs xa.\n           x = (I, D, u, xs @ [xa]) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>uu_ uv_ uw_ uua_ uva_ uwa_.\n       (uu_, uv_, uw_, []) = (uua_, uva_, uwa_, []) \\<Longrightarrow>\n       {} = {}\n 3. \\<And>uu_ uv_ uw_ I D u xs x.\n       (uu_, uv_, uw_, []) = (I, D, u, xs @ [x]) \\<Longrightarrow>\n       {} =\n       (if (u, D x) \\<in> I \\<or>\n           (\\<exists>v\\<in>sinks_sumC (I, D, u, xs). (v, D x) \\<in> I)\n        then insert (D x) (sinks_sumC (I, D, u, xs))\n        else sinks_sumC (I, D, u, xs))\n 4. \\<And>I D u xs x Ia Da ua xsa xa.\n       (I, D, u, xs @ [x]) = (Ia, Da, ua, xsa @ [xa]) \\<Longrightarrow>\n       (if (u, D x) \\<in> I \\<or>\n           (\\<exists>v\\<in>sinks_sumC (I, D, u, xs). (v, D x) \\<in> I)\n        then insert (D x) (sinks_sumC (I, D, u, xs))\n        else sinks_sumC (I, D, u, xs)) =\n       (if (ua, Da xa) \\<in> Ia \\<or>\n           (\\<exists>v\\<in>sinks_sumC (Ia, Da, ua, xsa).\n               (v, Da xa) \\<in> Ia)\n        then insert (Da xa) (sinks_sumC (Ia, Da, ua, xsa))\n        else sinks_sumC (Ia, Da, ua, xsa))", "proof (atomize_elim, simp_all add: split_paired_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b = [] \\<or> (\\<exists>xs x. b = xs @ [x])", "qed (rule rev_cases, rule disjI1, assumption, simp)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All sinks_dom", "by lexicographic_order"], ["", "function ipurge_tr :: \"('d \\<times> 'd) set \\<Rightarrow> ('a \\<Rightarrow> 'd) \\<Rightarrow> 'd \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n\"ipurge_tr _ _ _ [] = []\" |\n\"ipurge_tr I D u (xs @ [x]) = (if D x \\<in> sinks I D u (xs @ [x])\n  then ipurge_tr I D u xs\n  else ipurge_tr I D u xs @ [x])\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>uu_ uv_ uw_.\n                   x = (uu_, uv_, uw_, []) \\<Longrightarrow> P;\n        \\<And>I D u xs xa.\n           x = (I, D, u, xs @ [xa]) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>uu_ uv_ uw_ uua_ uva_ uwa_.\n       (uu_, uv_, uw_, []) = (uua_, uva_, uwa_, []) \\<Longrightarrow>\n       [] = []\n 3. \\<And>uu_ uv_ uw_ I D u xs x.\n       (uu_, uv_, uw_, []) = (I, D, u, xs @ [x]) \\<Longrightarrow>\n       [] =\n       (if D x \\<in> sinks I D u (xs @ [x])\n        then ipurge_tr_sumC (I, D, u, xs)\n        else ipurge_tr_sumC (I, D, u, xs) @ [x])\n 4. \\<And>I D u xs x Ia Da ua xsa xa.\n       (I, D, u, xs @ [x]) = (Ia, Da, ua, xsa @ [xa]) \\<Longrightarrow>\n       (if D x \\<in> sinks I D u (xs @ [x])\n        then ipurge_tr_sumC (I, D, u, xs)\n        else ipurge_tr_sumC (I, D, u, xs) @ [x]) =\n       (if Da xa \\<in> sinks Ia Da ua (xsa @ [xa])\n        then ipurge_tr_sumC (Ia, Da, ua, xsa)\n        else ipurge_tr_sumC (Ia, Da, ua, xsa) @ [xa])", "proof (atomize_elim, simp_all add: split_paired_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b = [] \\<or> (\\<exists>xs x. b = xs @ [x])", "qed (rule rev_cases, rule disjI1, assumption, simp)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All ipurge_tr_dom", "by lexicographic_order"], ["", "definition ipurge_ref ::\n \"('d \\<times> 'd) set \\<Rightarrow> ('a \\<Rightarrow> 'd) \\<Rightarrow> 'd \\<Rightarrow> 'a list \\<Rightarrow> 'a set \\<Rightarrow> 'a set\" where\n\"ipurge_ref I D u xs X \\<equiv>\n  {x \\<in> X. (u, D x) \\<notin> I \\<and> (\\<forall>v \\<in> sinks I D u xs. (v, D x) \\<notin> I)}\""], ["", "definition secure :: \"'a process \\<Rightarrow> ('d \\<times> 'd) set \\<Rightarrow> ('a \\<Rightarrow> 'd) \\<Rightarrow> bool\" where\n\"secure P I D \\<equiv>\n  \\<forall>xs y ys Y zs Z. (y # ys, Y) \\<in> futures P xs \\<and> (zs, Z) \\<in> futures P xs \\<longrightarrow>\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> futures P xs \\<and>\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z) \\<in> futures P xs\""], ["", "text \\<open>\n\\null\n\nThe continuation of this section is dedicated to the demonstration of some lemmas concerning\nfunctions \\<open>sinks\\<close>, \\<open>ipurge_tr\\<close>, and \\<open>ipurge_ref\\<close> which will turn out to be useful\nin subsequent proofs.\n\n\\null\n\\<close>"], ["", "lemma sinks_cons_same:\n  assumes R: \"refl I\"\n  shows \"sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)", "proof (rule rev_induct, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. sinks I D (D x) [x] = {D x}\n 2. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "have A: \"[x] = [] @ [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] = [] @ [x]", "by simp"], ["proof (state)\nthis:\n  [x] = [] @ [x]\n\ngoal (2 subgoals):\n 1. sinks I D (D x) [x] = {D x}\n 2. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "have \"sinks I D (D x) [x] = (if (D x, D x) \\<in> I \\<or> (\\<exists>v \\<in> {}. (v, D x) \\<in> I)\n    then insert (D x) {}\n    else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D (D x) [x] =\n    (if (D x, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n     then {D x} else {})", "by (subst A, simp only: sinks.simps)"], ["proof (state)\nthis:\n  sinks I D (D x) [x] =\n  (if (D x, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n\ngoal (2 subgoals):\n 1. sinks I D (D x) [x] = {D x}\n 2. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "moreover"], ["proof (state)\nthis:\n  sinks I D (D x) [x] =\n  (if (D x, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n\ngoal (2 subgoals):\n 1. sinks I D (D x) [x] = {D x}\n 2. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "have \"(D x, D x) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D x, D x) \\<in> I", "using R"], ["proof (prove)\nusing this:\n  refl I\n\ngoal (1 subgoal):\n 1. (D x, D x) \\<in> I", "by (simp add: refl_on_def)"], ["proof (state)\nthis:\n  (D x, D x) \\<in> I\n\ngoal (2 subgoals):\n 1. sinks I D (D x) [x] = {D x}\n 2. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "ultimately"], ["proof (chain)\npicking this:\n  sinks I D (D x) [x] =\n  (if (D x, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n  (D x, D x) \\<in> I", "show \"sinks I D (D x) [x] = {D x}\""], ["proof (prove)\nusing this:\n  sinks I D (D x) [x] =\n  (if (D x, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n  (D x, D x) \\<in> I\n\ngoal (1 subgoal):\n 1. sinks I D (D x) [x] = {D x}", "by simp"], ["proof (state)\nthis:\n  sinks I D (D x) [x] = {D x}\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "fix x' xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "assume A: \"sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\""], ["proof (state)\nthis:\n  sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D (D x) (x # xs) =\n       insert (D x) (sinks I D (D x) xs) \\<Longrightarrow>\n       sinks I D (D x) (x # xs @ [xa]) =\n       insert (D x) (sinks I D (D x) (xs @ [xa]))", "show \"sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (sinks I D (D x) (xs @ [x']))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (sinks I D (D x) (xs @ [x']))", "proof (cases \"(D x, D x') \\<in> I \\<or> (\\<exists>v \\<in> sinks I D (D x) xs. (v, D x') \\<in> I)\",\n   simp_all (no_asm_simp))"], ["proof (state)\ngoal (2 subgoals):\n 1. (D x, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (insert (D x') (sinks I D (D x) xs))\n 2. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "case True"], ["proof (state)\nthis:\n  (D x, D x') \\<in> I \\<or>\n  (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I)\n\ngoal (2 subgoals):\n 1. (D x, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (insert (D x') (sinks I D (D x) xs))\n 2. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "hence \"(D x, D x') \\<in> I \\<or> (\\<exists>v \\<in> sinks I D (D x) (x # xs). (v, D x') \\<in> I)\""], ["proof (prove)\nusing this:\n  (D x, D x') \\<in> I \\<or>\n  (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. (D x, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  (D x, D x') \\<in> I \\<or>\n  (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I)\n  sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\n\ngoal (1 subgoal):\n 1. (D x, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I)", "by simp"], ["proof (state)\nthis:\n  (D x, D x') \\<in> I \\<or>\n  (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I)\n\ngoal (2 subgoals):\n 1. (D x, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (insert (D x') (sinks I D (D x) xs))\n 2. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "hence \"sinks I D (D x) ((x # xs) @ [x']) =\n      insert (D x') (sinks I D (D x) (x # xs))\""], ["proof (prove)\nusing this:\n  (D x, D x') \\<in> I \\<or>\n  (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. sinks I D (D x) ((x # xs) @ [x']) =\n    insert (D x') (sinks I D (D x) (x # xs))", "by (simp only: sinks.simps if_True)"], ["proof (state)\nthis:\n  sinks I D (D x) ((x # xs) @ [x']) =\n  insert (D x') (sinks I D (D x) (x # xs))\n\ngoal (2 subgoals):\n 1. (D x, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (insert (D x') (sinks I D (D x) xs))\n 2. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "thus \"sinks I D (D x) (x # xs @ [x']) =\n      insert (D x) (insert (D x') (sinks I D (D x) xs))\""], ["proof (prove)\nusing this:\n  sinks I D (D x) ((x # xs) @ [x']) =\n  insert (D x') (sinks I D (D x) (x # xs))\n\ngoal (1 subgoal):\n 1. sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (insert (D x') (sinks I D (D x) xs))", "using A"], ["proof (prove)\nusing this:\n  sinks I D (D x) ((x # xs) @ [x']) =\n  insert (D x') (sinks I D (D x) (x # xs))\n  sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\n\ngoal (1 subgoal):\n 1. sinks I D (D x) (x # xs @ [x']) =\n    insert (D x) (insert (D x') (sinks I D (D x) xs))", "by (simp add: insert_commute)"], ["proof (state)\nthis:\n  sinks I D (D x) (x # xs @ [x']) =\n  insert (D x) (insert (D x') (sinks I D (D x) xs))\n\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "case False"], ["proof (state)\nthis:\n  \\<not> ((D x, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "hence \"\\<not> ((D x, D x') \\<in> I \\<or> (\\<exists>v \\<in> sinks I D (D x) (x # xs). (v, D x') \\<in> I))\""], ["proof (prove)\nusing this:\n  \\<not> ((D x, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I))", "using A"], ["proof (prove)\nusing this:\n  \\<not> ((D x, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D x) xs. (v, D x') \\<in> I))\n  sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\n\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I))", "by simp"], ["proof (state)\nthis:\n  \\<not> ((D x, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "hence \"sinks I D (D x) ((x # xs) @ [x']) = sinks I D (D x) (x # xs)\""], ["proof (prove)\nusing this:\n  \\<not> ((D x, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D (D x) (x # xs). (v, D x') \\<in> I))\n\ngoal (1 subgoal):\n 1. sinks I D (D x) ((x # xs) @ [x']) = sinks I D (D x) (x # xs)", "by (simp only: sinks.simps if_False)"], ["proof (state)\nthis:\n  sinks I D (D x) ((x # xs) @ [x']) = sinks I D (D x) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<not> ((D x, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D (D x) xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "thus \"sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)\""], ["proof (prove)\nusing this:\n  sinks I D (D x) ((x # xs) @ [x']) = sinks I D (D x) (x # xs)\n\ngoal (1 subgoal):\n 1. sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "using A"], ["proof (prove)\nusing this:\n  sinks I D (D x) ((x # xs) @ [x']) = sinks I D (D x) (x # xs)\n  sinks I D (D x) (x # xs) = insert (D x) (sinks I D (D x) xs)\n\ngoal (1 subgoal):\n 1. sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)", "by simp"], ["proof (state)\nthis:\n  sinks I D (D x) (x # xs @ [x']) = insert (D x) (sinks I D (D x) xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sinks I D (D x) (x # xs @ [x']) =\n  insert (D x) (sinks I D (D x) (xs @ [x']))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipurge_tr_cons_same:\n  assumes R: \"refl I\"\n  shows \"ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs", "proof (induction xs rule: rev_induct, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. ipurge_tr I D (D x) [x] = []\n 2. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "have A: \"[x] = [] @ [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] = [] @ [x]", "by simp"], ["proof (state)\nthis:\n  [x] = [] @ [x]\n\ngoal (2 subgoals):\n 1. ipurge_tr I D (D x) [x] = []\n 2. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "have \"ipurge_tr I D (D x) [x] = (if D x \\<in> sinks I D (D x) ([] @ [x])\n    then []\n    else [] @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) [x] =\n    (if D x \\<in> sinks I D (D x) ([] @ [x]) then [] else [] @ [x])", "by (subst A, simp only: ipurge_tr.simps)"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) [x] =\n  (if D x \\<in> sinks I D (D x) ([] @ [x]) then [] else [] @ [x])\n\ngoal (2 subgoals):\n 1. ipurge_tr I D (D x) [x] = []\n 2. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "moreover"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) [x] =\n  (if D x \\<in> sinks I D (D x) ([] @ [x]) then [] else [] @ [x])\n\ngoal (2 subgoals):\n 1. ipurge_tr I D (D x) [x] = []\n 2. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "have \"sinks I D (D x) [x] = {D x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D (D x) [x] = {D x}", "using R"], ["proof (prove)\nusing this:\n  refl I\n\ngoal (1 subgoal):\n 1. sinks I D (D x) [x] = {D x}", "by (simp add: sinks_cons_same)"], ["proof (state)\nthis:\n  sinks I D (D x) [x] = {D x}\n\ngoal (2 subgoals):\n 1. ipurge_tr I D (D x) [x] = []\n 2. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr I D (D x) [x] =\n  (if D x \\<in> sinks I D (D x) ([] @ [x]) then [] else [] @ [x])\n  sinks I D (D x) [x] = {D x}", "show \"ipurge_tr I D (D x) [x] = []\""], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) [x] =\n  (if D x \\<in> sinks I D (D x) ([] @ [x]) then [] else [] @ [x])\n  sinks I D (D x) [x] = {D x}\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) [x] = []", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) [x] = []\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "fix x' xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "assume A: \"ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs\""], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       ipurge_tr I D (D x) (x # xs) =\n       ipurge_tr I D (D x) xs \\<Longrightarrow>\n       ipurge_tr I D (D x) (x # xs @ [xa]) = ipurge_tr I D (D x) (xs @ [xa])", "show \"ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "proof (cases \"D x' \\<in> sinks I D (D x) (x # xs @ [x'])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "assume B: \"D x' \\<in> sinks I D (D x) (x # xs @ [x'])\""], ["proof (state)\nthis:\n  D x' \\<in> sinks I D (D x) (x # xs @ [x'])\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"D x' \\<in> sinks I D (D x) ((x # xs) @ [x'])\""], ["proof (prove)\nusing this:\n  D x' \\<in> sinks I D (D x) (x # xs @ [x'])\n\ngoal (1 subgoal):\n 1. D x' \\<in> sinks I D (D x) ((x # xs) @ [x'])", "by simp"], ["proof (state)\nthis:\n  D x' \\<in> sinks I D (D x) ((x # xs) @ [x'])\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"ipurge_tr I D (D x) ((x # xs) @ [x']) = ipurge_tr I D (D x) (x # xs)\""], ["proof (prove)\nusing this:\n  D x' \\<in> sinks I D (D x) ((x # xs) @ [x'])\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) ((x # xs) @ [x']) = ipurge_tr I D (D x) (x # xs)", "by (simp only: ipurge_tr.simps if_True)"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) ((x # xs) @ [x']) = ipurge_tr I D (D x) (x # xs)\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence C: \"ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs\""], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) ((x # xs) @ [x']) = ipurge_tr I D (D x) (x # xs)\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) ((x # xs) @ [x']) = ipurge_tr I D (D x) (x # xs)\n  ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "have \"D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])", "using R and B"], ["proof (prove)\nusing this:\n  refl I\n  D x' \\<in> sinks I D (D x) (x # xs @ [x'])\n\ngoal (1 subgoal):\n 1. D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])", "by (simp add: sinks_cons_same)"], ["proof (state)\nthis:\n  D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "{"], ["proof (state)\nthis:\n  D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "assume \"D x' = D x\""], ["proof (state)\nthis:\n  D x' = D x\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"(D x, D x') \\<in> I\""], ["proof (prove)\nusing this:\n  D x' = D x\n\ngoal (1 subgoal):\n 1. (D x, D x') \\<in> I", "using R"], ["proof (prove)\nusing this:\n  D x' = D x\n  refl I\n\ngoal (1 subgoal):\n 1. (D x, D x') \\<in> I", "by (simp add: refl_on_def)"], ["proof (state)\nthis:\n  (D x, D x') \\<in> I\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\""], ["proof (prove)\nusing this:\n  (D x, D x') \\<in> I\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "}"], ["proof (state)\nthis:\n  D x' = D x \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  D x' = D x \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "{"], ["proof (state)\nthis:\n  D x' = D x \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "assume \"D x' \\<in> sinks I D (D x) (xs @ [x'])\""], ["proof (state)\nthis:\n  D x' \\<in> sinks I D (D x) (xs @ [x'])\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\""], ["proof (prove)\nusing this:\n  D x' \\<in> sinks I D (D x) (xs @ [x'])\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "}"], ["proof (state)\nthis:\n  D x' \\<in> sinks I D (D x) (xs @ [x']) \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "ultimately"], ["proof (chain)\npicking this:\n  D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])\n  D x' = D x \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n  D x' \\<in> sinks I D (D x) (xs @ [x']) \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs", "have D: \"ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\""], ["proof (prove)\nusing this:\n  D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x'])\n  D x' = D x \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n  D x' \\<in> sinks I D (D x) (xs @ [x']) \\<Longrightarrow>\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs", "by blast"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (2 subgoals):\n 1. D x' \\<in> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n 2. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "using C and D"], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "assume B: \"D x' \\<notin> sinks I D (D x) (x # xs @ [x'])\""], ["proof (state)\nthis:\n  D x' \\<notin> sinks I D (D x) (x # xs @ [x'])\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"D x' \\<notin> sinks I D (D x) ((x # xs) @ [x'])\""], ["proof (prove)\nusing this:\n  D x' \\<notin> sinks I D (D x) (x # xs @ [x'])\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) ((x # xs) @ [x'])", "by simp"], ["proof (state)\nthis:\n  D x' \\<notin> sinks I D (D x) ((x # xs) @ [x'])\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"ipurge_tr I D (D x) ((x # xs) @ [x']) =\n      ipurge_tr I D (D x) (x # xs) @ [x']\""], ["proof (prove)\nusing this:\n  D x' \\<notin> sinks I D (D x) ((x # xs) @ [x'])\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) ((x # xs) @ [x']) =\n    ipurge_tr I D (D x) (x # xs) @ [x']", "by (simp only: ipurge_tr.simps if_False)"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) ((x # xs) @ [x']) =\n  ipurge_tr I D (D x) (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\""], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) ((x # xs) @ [x']) =\n  ipurge_tr I D (D x) (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) ((x # xs) @ [x']) =\n  ipurge_tr I D (D x) (x # xs) @ [x']\n  ipurge_tr I D (D x) (x # xs) = ipurge_tr I D (D x) xs\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "moreover"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "have \"\\<not> (D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x']))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x']))", "using R and B"], ["proof (prove)\nusing this:\n  refl I\n  D x' \\<notin> sinks I D (D x) (x # xs @ [x'])\n\ngoal (1 subgoal):\n 1. \\<not> (D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x']))", "by (simp add: sinks_cons_same)"], ["proof (state)\nthis:\n  \\<not> (D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x']))\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "hence \"ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\""], ["proof (prove)\nusing this:\n  \\<not> (D x' = D x \\<or> D x' \\<in> sinks I D (D x) (xs @ [x']))\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs @ [x']", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\n\ngoal (1 subgoal):\n 1. D x' \\<notin> sinks I D (D x) (x # xs @ [x']) \\<Longrightarrow>\n    ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs @ [x']", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\n  ipurge_tr I D (D x) (xs @ [x']) = ipurge_tr I D (D x) xs @ [x']\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr I D (D x) (x # xs @ [x']) = ipurge_tr I D (D x) (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sinks_cons_nonint:\n  assumes A: \"(u, D x) \\<notin> I\"\n  shows \"sinks I D u (x # xs) = sinks I D u xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D u (x # xs) = sinks I D u xs", "proof (rule rev_induct, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. sinks I D u [x] = {}\n 2. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "have \"sinks I D u [x] = sinks I D u ([] @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D u [x] = sinks I D u ([] @ [x])", "by simp"], ["proof (state)\nthis:\n  sinks I D u [x] = sinks I D u ([] @ [x])\n\ngoal (2 subgoals):\n 1. sinks I D u [x] = {}\n 2. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "hence \"sinks I D u [x] = (if (u, D x) \\<in> I \\<or> (\\<exists>v \\<in> {}. (v, D x) \\<in> I)\n    then insert (D x) {}\n    else {})\""], ["proof (prove)\nusing this:\n  sinks I D u [x] = sinks I D u ([] @ [x])\n\ngoal (1 subgoal):\n 1. sinks I D u [x] =\n    (if (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n     then {D x} else {})", "by (simp only: sinks.simps)"], ["proof (state)\nthis:\n  sinks I D u [x] =\n  (if (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n\ngoal (2 subgoals):\n 1. sinks I D u [x] = {}\n 2. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "thus \"sinks I D u [x] = {}\""], ["proof (prove)\nusing this:\n  sinks I D u [x] =\n  (if (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n\ngoal (1 subgoal):\n 1. sinks I D u [x] = {}", "using A"], ["proof (prove)\nusing this:\n  sinks I D u [x] =\n  (if (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>{}. (v, D x) \\<in> I)\n   then {D x} else {})\n  (u, D x) \\<notin> I\n\ngoal (1 subgoal):\n 1. sinks I D u [x] = {}", "by simp"], ["proof (state)\nthis:\n  sinks I D u [x] = {}\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "fix xs x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "assume B: \"sinks I D u (x # xs) = sinks I D u xs\" (is \"?d' = ?d\")"], ["proof (state)\nthis:\n  sinks I D u (x # xs) = sinks I D u xs\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "have \"x # xs @ [x'] = (x # xs) @ [x']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x # xs @ [x'] = (x # xs) @ [x']", "by simp"], ["proof (state)\nthis:\n  x # xs @ [x'] = (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "hence C: \"sinks I D u (x # xs @ [x']) =\n    (if (u, D x') \\<in> I \\<or> (\\<exists>v \\<in> ?d'. (v, D x') \\<in> I)\n    then insert (D x') ?d'\n    else ?d')\""], ["proof (prove)\nusing this:\n  x # xs @ [x'] = (x # xs) @ [x']\n\ngoal (1 subgoal):\n 1. sinks I D u (x # xs @ [x']) =\n    (if (u, D x') \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u (x # xs). (v, D x') \\<in> I)\n     then insert (D x') (sinks I D u (x # xs)) else sinks I D u (x # xs))", "by (simp only: sinks.simps)"], ["proof (state)\nthis:\n  sinks I D u (x # xs @ [x']) =\n  (if (u, D x') \\<in> I \\<or>\n      (\\<exists>v\\<in>sinks I D u (x # xs). (v, D x') \\<in> I)\n   then insert (D x') (sinks I D u (x # xs)) else sinks I D u (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>xa xs.\n       sinks I D u (x # xs) = sinks I D u xs \\<Longrightarrow>\n       sinks I D u (x # xs @ [xa]) = sinks I D u (xs @ [xa])", "show \"sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "proof (cases \"(u, D x') \\<in> I \\<or> (\\<exists>v \\<in> ?d. (v, D x') \\<in> I)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (u, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\n 2. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "case True"], ["proof (state)\nthis:\n  (u, D x') \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I)\n\ngoal (2 subgoals):\n 1. (u, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\n 2. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "with B and C"], ["proof (chain)\npicking this:\n  sinks I D u (x # xs) = sinks I D u xs\n  sinks I D u (x # xs @ [x']) =\n  (if (u, D x') \\<in> I \\<or>\n      (\\<exists>v\\<in>sinks I D u (x # xs). (v, D x') \\<in> I)\n   then insert (D x') (sinks I D u (x # xs)) else sinks I D u (x # xs))\n  (u, D x') \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I)", "have \"sinks I D u (x # xs @ [x']) = insert (D x') ?d\""], ["proof (prove)\nusing this:\n  sinks I D u (x # xs) = sinks I D u xs\n  sinks I D u (x # xs @ [x']) =\n  (if (u, D x') \\<in> I \\<or>\n      (\\<exists>v\\<in>sinks I D u (x # xs). (v, D x') \\<in> I)\n   then insert (D x') (sinks I D u (x # xs)) else sinks I D u (x # xs))\n  (u, D x') \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I)\n\ngoal (1 subgoal):\n 1. sinks I D u (x # xs @ [x']) = insert (D x') (sinks I D u xs)", "by simp"], ["proof (state)\nthis:\n  sinks I D u (x # xs @ [x']) = insert (D x') (sinks I D u xs)\n\ngoal (2 subgoals):\n 1. (u, D x') \\<in> I \\<or>\n    (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\n 2. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "with True"], ["proof (chain)\npicking this:\n  (u, D x') \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I)\n  sinks I D u (x # xs @ [x']) = insert (D x') (sinks I D u xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (u, D x') \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I)\n  sinks I D u (x # xs @ [x']) = insert (D x') (sinks I D u xs)\n\ngoal (1 subgoal):\n 1. sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\n\ngoal (1 subgoal):\n 1. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "case False"], ["proof (state)\nthis:\n  \\<not> ((u, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "with B and C"], ["proof (chain)\npicking this:\n  sinks I D u (x # xs) = sinks I D u xs\n  sinks I D u (x # xs @ [x']) =\n  (if (u, D x') \\<in> I \\<or>\n      (\\<exists>v\\<in>sinks I D u (x # xs). (v, D x') \\<in> I)\n   then insert (D x') (sinks I D u (x # xs)) else sinks I D u (x # xs))\n  \\<not> ((u, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I))", "have \"sinks I D u (x # xs @ [x']) = ?d\""], ["proof (prove)\nusing this:\n  sinks I D u (x # xs) = sinks I D u xs\n  sinks I D u (x # xs @ [x']) =\n  (if (u, D x') \\<in> I \\<or>\n      (\\<exists>v\\<in>sinks I D u (x # xs). (v, D x') \\<in> I)\n   then insert (D x') (sinks I D u (x # xs)) else sinks I D u (x # xs))\n  \\<not> ((u, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I))\n\ngoal (1 subgoal):\n 1. sinks I D u (x # xs @ [x']) = sinks I D u xs", "by simp"], ["proof (state)\nthis:\n  sinks I D u (x # xs @ [x']) = sinks I D u xs\n\ngoal (1 subgoal):\n 1. \\<not> ((u, D x') \\<in> I \\<or>\n            (\\<exists>v\\<in>sinks I D u xs.\n                (v, D x') \\<in> I)) \\<Longrightarrow>\n    sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "with False"], ["proof (chain)\npicking this:\n  \\<not> ((u, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I))\n  sinks I D u (x # xs @ [x']) = sinks I D u xs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ((u, D x') \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x') \\<in> I))\n  sinks I D u (x # xs @ [x']) = sinks I D u xs\n\ngoal (1 subgoal):\n 1. sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])", "by simp"], ["proof (state)\nthis:\n  sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sinks I D u (x # xs @ [x']) = sinks I D u (xs @ [x'])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sinks_empty [rule_format]:\n \"sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs", "proof (rule rev_induct, simp, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "fix x xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "assume A: \"sinks I D u (xs @ [x]) = {}\""], ["proof (state)\nthis:\n  sinks I D u (xs @ [x]) = {}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "moreover"], ["proof (state)\nthis:\n  sinks I D u (xs @ [x]) = {}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "have \"sinks I D u xs \\<subseteq> sinks I D u (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D u xs \\<subseteq> sinks I D u (xs @ [x])", "by (simp add: subset_insertI)"], ["proof (state)\nthis:\n  sinks I D u xs \\<subseteq> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "ultimately"], ["proof (chain)\npicking this:\n  sinks I D u (xs @ [x]) = {}\n  sinks I D u xs \\<subseteq> sinks I D u (xs @ [x])", "have \"sinks I D u xs = {}\""], ["proof (prove)\nusing this:\n  sinks I D u (xs @ [x]) = {}\n  sinks I D u xs \\<subseteq> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. sinks I D u xs = {}", "by simp"], ["proof (state)\nthis:\n  sinks I D u xs = {}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "moreover"], ["proof (state)\nthis:\n  sinks I D u xs = {}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "assume \"sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs\""], ["proof (state)\nthis:\n  sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "ultimately"], ["proof (chain)\npicking this:\n  sinks I D u xs = {}\n  sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs", "have \"ipurge_tr I D u xs = xs\""], ["proof (prove)\nusing this:\n  sinks I D u xs = {}\n  sinks I D u xs = {} \\<longrightarrow> ipurge_tr I D u xs = xs\n\ngoal (1 subgoal):\n 1. ipurge_tr I D u xs = xs", "by (rule rev_mp)"], ["proof (state)\nthis:\n  ipurge_tr I D u xs = xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sinks I D u xs = {} \\<longrightarrow>\n                ipurge_tr I D u xs = xs;\n        sinks I D u (xs @ [x]) = {}\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr I D u (xs @ [x]) = xs @ [x]", "thus \"ipurge_tr I D u (xs @ [x]) = xs @ [x]\""], ["proof (prove)\nusing this:\n  ipurge_tr I D u xs = xs\n\ngoal (1 subgoal):\n 1. ipurge_tr I D u (xs @ [x]) = xs @ [x]", "using A"], ["proof (prove)\nusing this:\n  ipurge_tr I D u xs = xs\n  sinks I D u (xs @ [x]) = {}\n\ngoal (1 subgoal):\n 1. ipurge_tr I D u (xs @ [x]) = xs @ [x]", "by simp"], ["proof (state)\nthis:\n  ipurge_tr I D u (xs @ [x]) = xs @ [x]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipurge_ref_eq:\n  assumes A: \"D x \\<in> sinks I D u (xs @ [x])\"\n  shows \"ipurge_ref I D u (xs @ [x]) X =\n    ipurge_ref I D u xs {x' \\<in> X. (D x, D x') \\<notin> I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D u (xs @ [x]) X =\n    ipurge_ref I D u xs {x' \\<in> X. (D x, D x') \\<notin> I}", "proof (rule equalityI, rule_tac [!] subsetI, simp_all add: ipurge_ref_def del: sinks.simps,\n (erule conjE)+, (erule_tac [2] conjE)+)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (D x, D xa) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D u xs.\n                             (v, D xa) \\<notin> I)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (D x, D xa) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D u xs.\n                             (v, D xa) \\<notin> I)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "assume B: \"\\<forall>v \\<in> sinks I D u (xs @ [x]). (v, D y) \\<notin> I\""], ["proof (state)\nthis:\n  \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (D x, D xa) \\<notin> I \\<and>\n                         (\\<forall>v\\<in>sinks I D u xs.\n                             (v, D xa) \\<notin> I)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "show \"(D x, D y) \\<notin> I \\<and> (\\<forall>v \\<in> sinks I D u xs. (v, D y) \\<notin> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D x, D y) \\<notin> I \\<and>\n    (\\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I)", "proof (rule conjI, rule_tac [2] ballI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D x, D y) \\<notin> I\n 2. \\<And>v. v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "show \"(D x, D y) \\<notin> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D x, D y) \\<notin> I", "using B and A"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D y) \\<notin> I\n  D x \\<in> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. (D x, D y) \\<notin> I", ".."], ["proof (state)\nthis:\n  (D x, D y) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "assume \"v \\<in> sinks I D u xs\""], ["proof (state)\nthis:\n  v \\<in> sinks I D u xs\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "hence \"v \\<in> sinks I D u (xs @ [x])\""], ["proof (prove)\nusing this:\n  v \\<in> sinks I D u xs\n\ngoal (1 subgoal):\n 1. v \\<in> sinks I D u (xs @ [x])", "by simp"], ["proof (state)\nthis:\n  v \\<in> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "with B"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D y) \\<notin> I\n  v \\<in> sinks I D u (xs @ [x])", "show \"(v, D y) \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D y) \\<notin> I\n  v \\<in> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. (v, D y) \\<notin> I", ".."], ["proof (state)\nthis:\n  (v, D y) \\<notin> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (D x, D y) \\<notin> I \\<and>\n  (\\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "assume\n    B: \"(D x, D y) \\<notin> I\" and\n    C: \"\\<forall>v \\<in> sinks I D u xs. (v, D y) \\<notin> I\""], ["proof (state)\nthis:\n  (D x, D y) \\<notin> I\n  \\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> X; (D x, D xa) \\<notin> I; (u, D xa) \\<notin> I;\n        \\<forall>v\\<in>sinks I D u xs. (v, D xa) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>sinks I D u (xs @ [x]).\n                            (v, D xa) \\<notin> I", "show \"\\<forall>v \\<in> sinks I D u (xs @ [x]). (v, D y) \\<notin> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D y) \\<notin> I", "proof (rule ballI, cases \"(u, D x) \\<in> I \\<or> (\\<exists>v \\<in> sinks I D u xs. (v, D x) \\<in> I)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "case True"], ["proof (state)\nthis:\n  (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "moreover"], ["proof (state)\nthis:\n  (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "assume \"v \\<in> sinks I D u (xs @ [x])\""], ["proof (state)\nthis:\n  v \\<in> sinks I D u (xs @ [x])\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "ultimately"], ["proof (chain)\npicking this:\n  (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\n  v \\<in> sinks I D u (xs @ [x])", "have \"v = D x \\<or> v \\<in> sinks I D u xs\""], ["proof (prove)\nusing this:\n  (u, D x) \\<in> I \\<or> (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\n  v \\<in> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. v = D x \\<or> v \\<in> sinks I D u xs", "by simp"], ["proof (state)\nthis:\n  v = D x \\<or> v \\<in> sinks I D u xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "moreover"], ["proof (state)\nthis:\n  v = D x \\<or> v \\<in> sinks I D u xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "{"], ["proof (state)\nthis:\n  v = D x \\<or> v \\<in> sinks I D u xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "assume \"v = D x\""], ["proof (state)\nthis:\n  v = D x\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "with B"], ["proof (chain)\npicking this:\n  (D x, D y) \\<notin> I\n  v = D x", "have \"(v, D y) \\<notin> I\""], ["proof (prove)\nusing this:\n  (D x, D y) \\<notin> I\n  v = D x\n\ngoal (1 subgoal):\n 1. (v, D y) \\<notin> I", "by simp"], ["proof (state)\nthis:\n  (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "}"], ["proof (state)\nthis:\n  v = D x \\<Longrightarrow> (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "moreover"], ["proof (state)\nthis:\n  v = D x \\<Longrightarrow> (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "{"], ["proof (state)\nthis:\n  v = D x \\<Longrightarrow> (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "assume \"v \\<in> sinks I D u xs\""], ["proof (state)\nthis:\n  v \\<in> sinks I D u xs\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "with C"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I\n  v \\<in> sinks I D u xs", "have \"(v, D y) \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I\n  v \\<in> sinks I D u xs\n\ngoal (1 subgoal):\n 1. (v, D y) \\<notin> I", ".."], ["proof (state)\nthis:\n  (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "}"], ["proof (state)\nthis:\n  v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        (u, D x) \\<in> I \\<or>\n        (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I)\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "ultimately"], ["proof (chain)\npicking this:\n  v = D x \\<or> v \\<in> sinks I D u xs\n  v = D x \\<Longrightarrow> (v, D y) \\<notin> I\n  v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I", "show \"(v, D y) \\<notin> I\""], ["proof (prove)\nusing this:\n  v = D x \\<or> v \\<in> sinks I D u xs\n  v = D x \\<Longrightarrow> (v, D y) \\<notin> I\n  v \\<in> sinks I D u xs \\<Longrightarrow> (v, D y) \\<notin> I\n\ngoal (1 subgoal):\n 1. (v, D y) \\<notin> I", "by blast"], ["proof (state)\nthis:\n  (v, D y) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "case False"], ["proof (state)\nthis:\n  \\<not> ((u, D x) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "moreover"], ["proof (state)\nthis:\n  \\<not> ((u, D x) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "assume \"v \\<in> sinks I D u (xs @ [x])\""], ["proof (state)\nthis:\n  v \\<in> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> ((u, D x) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\n  v \\<in> sinks I D u (xs @ [x])", "have \"v \\<in> sinks I D u xs\""], ["proof (prove)\nusing this:\n  \\<not> ((u, D x) \\<in> I \\<or>\n          (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\n  v \\<in> sinks I D u (xs @ [x])\n\ngoal (1 subgoal):\n 1. v \\<in> sinks I D u xs", "by simp"], ["proof (state)\nthis:\n  v \\<in> sinks I D u xs\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> sinks I D u (xs @ [x]);\n        \\<not> ((u, D x) \\<in> I \\<or>\n                (\\<exists>v\\<in>sinks I D u xs. (v, D x) \\<in> I))\\<rbrakk>\n       \\<Longrightarrow> (v, D y) \\<notin> I", "with C"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I\n  v \\<in> sinks I D u xs", "show \"(v, D y) \\<notin> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>sinks I D u xs. (v, D y) \\<notin> I\n  v \\<in> sinks I D u xs\n\ngoal (1 subgoal):\n 1. (v, D y) \\<notin> I", ".."], ["proof (state)\nthis:\n  (v, D y) \\<notin> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v\\<in>sinks I D u (xs @ [x]). (v, D y) \\<notin> I\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}