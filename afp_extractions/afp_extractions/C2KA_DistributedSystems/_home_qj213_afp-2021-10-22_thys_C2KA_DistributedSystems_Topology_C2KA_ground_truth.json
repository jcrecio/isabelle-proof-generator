{"file_name": "/home/qj213/afp-2021-10-22/thys/C2KA_DistributedSystems/Topology_C2KA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/C2KA_DistributedSystems", "problem_names": ["lemma inf_K_enc_orb: \"a \\<le>\\<^sub>\\<K> b \\<Longrightarrow> Orb(a) \\<lless>\\<^sub>\\<K> Orb(b)\"", "lemma enc_orb_add: \"Orb(a) \\<lless>\\<^sub>\\<K> Orb(a + b)\"", "lemma enc_orb_exchange: \"Orb((a*b) ; (c*d)) \\<lless>\\<^sub>\\<K> Orb((a;c) * (b;d))\"", "lemma enc_orb_seq_par: \"Orb(a;b) \\<lless>\\<^sub>\\<K> Orb(a*b)\"", "lemma enc_orb_add_seq_par: \"Orb(a;b + b;a) \\<lless>\\<^sub>\\<K> Orb(a*b)\"", "lemma enc_orb_parseq: \"Orb((a*b);c) \\<lless>\\<^sub>\\<K> Orb(a*(b;c))\"", "lemma enc_orb_seqpar: \"Orb(a;(b*c)) \\<lless>\\<^sub>\\<K> Orb((a;b)*c)\"", "lemma enc_orb_seqstar_parstar: \"Orb(a\\<^sup>;) \\<lless>\\<^sub>\\<K> Orb(a\\<^sup>*)\"", "lemma enc_orb_union: \"Orb(a) \\<lless>\\<^sub>\\<K> Orb(c) \\<and> Orb(b) \\<lless>\\<^sub>\\<K> Orb(c) \n\\<longleftrightarrow> Orb(a) \\<union> Orb(b) \\<lless>\\<^sub>\\<K>  Orb(c)\"", "lemma enc_stab_inter_add: \"Stab(a) \\<inter> Stab(b) \\<lless>\\<^sub>\\<S> Stab(a + b)\"", "lemma zerofix [simp]: \"s \\<circ> 0 = 0\"", "lemma fixed_zero: \"fixed(0)\"", "lemma fixed_a_b_add: \"fixed(a) \\<and> fixed(b) \\<longrightarrow> fixed(a + b)\"", "lemma fix_not_deactivation: \"s \\<circ> a = a \\<and> \\<lambda>(s,a) = \\<dd> \\<Longrightarrow> a = 0\"", "lemma fixed_a_b_seq: \"fixed(a) \\<and> fixed(b) \\<longrightarrow> fixed(a ; b)\"", "lemma fixed_not_induce: \"fixed(a) \\<longrightarrow> (\\<forall>b. b \\<noteq> 0 \\<and> b \\<noteq> a \\<longrightarrow> \\<not>(a \\<lhd> b))\"", "lemma in_own_orbit: \"a \\<in> Orb(a)\"", "lemma strong_orbit_both_induced: \"a \\<sim>\\<^sub>\\<K> b \\<longrightarrow> a \\<lhd> b \\<and> b \\<lhd> a\"", "lemma strong_orbit_induce_same: \"a \\<sim>\\<^sub>\\<K> b \\<longrightarrow> (a \\<lhd> c \\<longleftrightarrow> b \\<lhd> c)\""], "translations": [["", "lemma inf_K_enc_orb: \"a \\<le>\\<^sub>\\<K> b \\<Longrightarrow> Orb(a) \\<lless>\\<^sub>\\<K> Orb(b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le>\\<^sub>\\<K> b \\<Longrightarrow> Orb a \\<lless>\\<^sub>\\<K> Orb b", "unfolding erb_def orb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le>\\<^sub>\\<K> b \\<Longrightarrow>\n    \\<forall>aa.\n       (\\<exists>s. s \\<circ> a = aa) \\<longrightarrow>\n       (\\<exists>ba.\n           (\\<exists>s. s \\<circ> b = ba) \\<and> aa \\<le>\\<^sub>\\<K> ba)", "using inf_K_next_behaviour"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow>\n  ?s \\<circ> ?a \\<le>\\<^sub>\\<K> ?s \\<circ> ?b\n\ngoal (1 subgoal):\n 1. a \\<le>\\<^sub>\\<K> b \\<Longrightarrow>\n    \\<forall>aa.\n       (\\<exists>s. s \\<circ> a = aa) \\<longrightarrow>\n       (\\<exists>ba.\n           (\\<exists>s. s \\<circ> b = ba) \\<and> aa \\<le>\\<^sub>\\<K> ba)", "by blast"], ["", "text \\<open>\nThe following lemmas provide a selection of properties regarding orbits and the encompassing relation for agent behaviours.\n\\<close>"], ["", "lemma enc_orb_add: \"Orb(a) \\<lless>\\<^sub>\\<K> Orb(a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb a \\<lless>\\<^sub>\\<K> Orb (a + b)", "using  inf_K_enc_orb inf_add_K_right"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a \\<le>\\<^sub>\\<K> ?a + ?b\n\ngoal (1 subgoal):\n 1. Orb a \\<lless>\\<^sub>\\<K> Orb (a + b)", "by auto"], ["", "lemma enc_orb_exchange: \"Orb((a*b) ; (c*d)) \\<lless>\\<^sub>\\<K> Orb((a;c) * (b;d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb (a * b ; (c * d)) \\<lless>\\<^sub>\\<K> Orb (a ; c * (b ; d))", "using inf_K_enc_orb exchange_2"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a * ?b ; (?c * ?d) \\<le>\\<^sub>\\<K> ?a ; ?c * (?b ; ?d)\n\ngoal (1 subgoal):\n 1. Orb (a * b ; (c * d)) \\<lless>\\<^sub>\\<K> Orb (a ; c * (b ; d))", "by blast"], ["", "lemma enc_orb_seq_par: \"Orb(a;b) \\<lless>\\<^sub>\\<K> Orb(a*b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb (a ; b) \\<lless>\\<^sub>\\<K> Orb (a * b)", "using inf_K_enc_orb seq_inf_par"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a ; ?b \\<le>\\<^sub>\\<K> ?a * ?b\n\ngoal (1 subgoal):\n 1. Orb (a ; b) \\<lless>\\<^sub>\\<K> Orb (a * b)", "by auto"], ["", "lemma enc_orb_add_seq_par: \"Orb(a;b + b;a) \\<lless>\\<^sub>\\<K> Orb(a*b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb (a ; b + b ; a) \\<lless>\\<^sub>\\<K> Orb (a * b)", "using inf_K_enc_orb add_seq_inf_par"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a ; ?b + ?b ; ?a \\<le>\\<^sub>\\<K> ?a * ?b\n\ngoal (1 subgoal):\n 1. Orb (a ; b + b ; a) \\<lless>\\<^sub>\\<K> Orb (a * b)", "by auto"], ["", "lemma enc_orb_parseq: \"Orb((a*b);c) \\<lless>\\<^sub>\\<K> Orb(a*(b;c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb (a * b ; c) \\<lless>\\<^sub>\\<K> Orb (a * (b ; c))", "using inf_K_enc_orb exchange_3"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a * ?b ; ?c \\<le>\\<^sub>\\<K> ?a * (?b ; ?c)\n\ngoal (1 subgoal):\n 1. Orb (a * b ; c) \\<lless>\\<^sub>\\<K> Orb (a * (b ; c))", "by blast"], ["", "lemma enc_orb_seqpar: \"Orb(a;(b*c)) \\<lless>\\<^sub>\\<K> Orb((a;b)*c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb (a ; (b * c)) \\<lless>\\<^sub>\\<K> Orb (a ; b * c)", "using inf_K_enc_orb exchange_4"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a ; (?b * ?c) \\<le>\\<^sub>\\<K> ?a ; ?b * ?c\n\ngoal (1 subgoal):\n 1. Orb (a ; (b * c)) \\<lless>\\<^sub>\\<K> Orb (a ; b * c)", "by blast"], ["", "lemma enc_orb_seqstar_parstar: \"Orb(a\\<^sup>;) \\<lless>\\<^sub>\\<K> Orb(a\\<^sup>*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb (a\\<^sup>;) \\<lless>\\<^sub>\\<K> Orb (a\\<^sup>*)", "using inf_K_enc_orb seqstar_inf_parstar"], ["proof (prove)\nusing this:\n  ?a \\<le>\\<^sub>\\<K> ?b \\<Longrightarrow> Orb ?a \\<lless>\\<^sub>\\<K> Orb ?b\n  ?a\\<^sup>; \\<le>\\<^sub>\\<K> ?a\\<^sup>*\n\ngoal (1 subgoal):\n 1. Orb (a\\<^sup>;) \\<lless>\\<^sub>\\<K> Orb (a\\<^sup>*)", "by auto"], ["", "lemma enc_orb_union: \"Orb(a) \\<lless>\\<^sub>\\<K> Orb(c) \\<and> Orb(b) \\<lless>\\<^sub>\\<K> Orb(c) \n\\<longleftrightarrow> Orb(a) \\<union> Orb(b) \\<lless>\\<^sub>\\<K>  Orb(c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Orb a \\<lless>\\<^sub>\\<K> Orb c \\<and>\n     Orb b \\<lless>\\<^sub>\\<K> Orb c) =\n    (Orb a \\<union> Orb b \\<lless>\\<^sub>\\<K> Orb c)", "unfolding erb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>aa.\n         aa \\<in> Orb a \\<longrightarrow>\n         (\\<exists>b. b \\<in> Orb c \\<and> aa \\<le>\\<^sub>\\<K> b)) \\<and>\n     (\\<forall>a.\n         a \\<in> Orb b \\<longrightarrow>\n         (\\<exists>b. b \\<in> Orb c \\<and> a \\<le>\\<^sub>\\<K> b))) =\n    (\\<forall>aa.\n        aa \\<in> Orb a \\<union> Orb b \\<longrightarrow>\n        (\\<exists>b. b \\<in> Orb c \\<and> aa \\<le>\\<^sub>\\<K> b))", "by auto"], ["", "subsection \\<open>Stabilisers \\label{sub:stabilisers}\\<close>"], ["", "text \\<open>\nThe \\emph{stabiliser} of~$a$ in~$\\stim$ is the set given by~$\\stab{a} = \\sets{s \\in \\STIMset}{\\lAct{a}{s} = a}$. \nThe stabiliser of an agent~$a \\in \\CKAset$ represents the set of stimuli which have no observable influence \n(or act as neutral stimuli) on an agent behaving as~$a$.\n\\<close>"], ["", "text \\<open>\nLemma \\emph{enc-stab-inter-add} provides a property regarding stabilisers and the encompassing relation for stimuli.\n\\<close>"], ["", "lemma enc_stab_inter_add: \"Stab(a) \\<inter> Stab(b) \\<lless>\\<^sub>\\<S> Stab(a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Stab a \\<inter> Stab b \\<lless>\\<^sub>\\<S> Stab (a + b)", "unfolding ers_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>aa.\n       aa \\<in> Stab a \\<inter> Stab b \\<longrightarrow>\n       (\\<exists>ba. ba \\<in> Stab (a + b) \\<and> aa \\<le>\\<^sub>\\<S> ba)", "by (auto simp add: stab_def, rename_tac s, rule_tac x=\"s\" in exI, simp)"], ["", "subsection \\<open>Fixed Points \\label{sub:fixed_points}\\<close>"], ["", "text \\<open>\nAn element~$a \\in \\CKAset$ is called a \\emph{fixed point} if~$\\lnotation{\\forall}{s}{s \\in \\STIMset \\STdiff \\set{\\Dstim}}{\\lAct{a}{s} = a}$.\\linebreak \nWhen an agent behaviour is a fixed point, it is not influenced by any stimulus other than the deactivation stimulus~$\\Dstim$. \nIt is important to note that since~$\\ActSemimodule$ is zero-preserving, every agent behaviour becomes inactive when subjected to the \ndeactivation stimulus~$\\Dstim$. Because of this, we exclude this special case when discussing fixed point agent behaviours.\n\\<close>"], ["", "lemma zerofix [simp]: \"s \\<circ> 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (0::'a)", "have \"0 = \\<dd> \\<circ> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) = \\<dd> \\<circ> a", "by simp"], ["proof (state)\nthis:\n  (0::'a) = \\<dd> \\<circ> a\n\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (0::'a)", "hence \"s \\<circ> 0 = s \\<circ> (\\<dd> \\<circ> a)\""], ["proof (prove)\nusing this:\n  (0::'a) = \\<dd> \\<circ> a\n\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = s \\<circ> \\<dd> \\<circ> a", "by simp"], ["proof (state)\nthis:\n  s \\<circ> (0::'a) = s \\<circ> \\<dd> \\<circ> a\n\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (0::'a)", "hence \"s \\<circ> 0 = (s \\<odot> \\<dd>) \\<circ> a\""], ["proof (prove)\nusing this:\n  s \\<circ> (0::'a) = s \\<circ> \\<dd> \\<circ> a\n\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (s \\<odot> \\<dd>) \\<circ> a", "by (simp only: lsemimodule3 [symmetric])"], ["proof (state)\nthis:\n  s \\<circ> (0::'a) = (s \\<odot> \\<dd>) \\<circ> a\n\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (0::'a)", "thus \"s \\<circ> 0 = 0\""], ["proof (prove)\nusing this:\n  s \\<circ> (0::'a) = (s \\<odot> \\<dd>) \\<circ> a\n\ngoal (1 subgoal):\n 1. s \\<circ> (0::'a) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  s \\<circ> (0::'a) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThe following lemmas provide a selection of properties regarding fixed agent behaviours.\n\\<close>"], ["", "lemma fixed_zero: \"fixed(0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixed (0::'a)", "unfolding fixed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (0::'a) = (0::'a)", "by simp"], ["", "lemma fixed_a_b_add: \"fixed(a) \\<and> fixed(b) \\<longrightarrow> fixed(a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixed a \\<and> fixed b \\<longrightarrow> fixed (a + b)", "unfolding fixed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<longrightarrow>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a + b) = a + b)", "by simp"], ["", "lemma fix_not_deactivation: \"s \\<circ> a = a \\<and> \\<lambda>(s,a) = \\<dd> \\<Longrightarrow> a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<Longrightarrow>\n    a = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<Longrightarrow>\n    a = (0::'a)", "assume E: \"s \\<circ> a = a \\<and> \\<lambda>(s,a) = \\<dd>\""], ["proof (state)\nthis:\n  s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>\n\ngoal (1 subgoal):\n 1. s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<Longrightarrow>\n    a = (0::'a)", "hence \"s \\<circ> (a;1) = a\""], ["proof (prove)\nusing this:\n  s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>\n\ngoal (1 subgoal):\n 1. s \\<circ> (a ; (1::'a)) = a", "by simp"], ["proof (state)\nthis:\n  s \\<circ> (a ; (1::'a)) = a\n\ngoal (1 subgoal):\n 1. s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<Longrightarrow>\n    a = (0::'a)", "hence \"(s\\<circ>a) ; (\\<lambda>(s,a)\\<circ>1) = a\""], ["proof (prove)\nusing this:\n  s \\<circ> (a ; (1::'a)) = a\n\ngoal (1 subgoal):\n 1. s \\<circ> a ; \\<lambda> (s, a) \\<circ> (1::'a) = a", "by (simp only: cascadingaxiom)"], ["proof (state)\nthis:\n  s \\<circ> a ; \\<lambda> (s, a) \\<circ> (1::'a) = a\n\ngoal (1 subgoal):\n 1. s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<Longrightarrow>\n    a = (0::'a)", "hence \"0 = a\""], ["proof (prove)\nusing this:\n  s \\<circ> a ; \\<lambda> (s, a) \\<circ> (1::'a) = a\n\ngoal (1 subgoal):\n 1. (0::'a) = a", "by (simp add: E)"], ["proof (state)\nthis:\n  (0::'a) = a\n\ngoal (1 subgoal):\n 1. s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<Longrightarrow>\n    a = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (0::'a) = a\n\ngoal (1 subgoal):\n 1. a = (0::'a)", "by auto"], ["proof (state)\nthis:\n  a = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fixed_a_b_seq: \"fixed(a) \\<and> fixed(b) \\<longrightarrow> fixed(a ; b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixed a \\<and> fixed b \\<longrightarrow> fixed (a ; b)", "unfolding fixed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<longrightarrow>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b)", "proof (rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<Longrightarrow>\n    \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "assume hyp: \"(\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and> (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> b = b)\""], ["proof (state)\nthis:\n  (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n  (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> b = b)\n\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<Longrightarrow>\n    \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "have C1: \"(\\<forall>s. \\<lambda>(s,a) = \\<dd> \\<longrightarrow> s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "have E: \"(\\<forall>s. s \\<noteq> \\<dd> \\<and> \\<lambda>(s,a) = \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<circ> (a ; b) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<circ> (a ; b) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "hence \"(\\<forall>s. s \\<noteq> \\<dd> \\<and> \\<lambda>(s,a) = \\<dd> \\<longrightarrow> s \\<circ> a = a \\<and> \\<lambda>(s,a) = \\<dd>)\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<circ> (a ; b) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>", "by (simp add: hyp)"], ["proof (state)\nthis:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "moreover"], ["proof (state)\nthis:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "have \"(\\<forall>s. s \\<circ> a = a \\<and> \\<lambda>(s,a) = \\<dd> \\<longrightarrow> a = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       a = (0::'a)", "by (simp add: fix_not_deactivation)"], ["proof (state)\nthis:\n  \\<forall>s.\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     a = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>\n  \\<forall>s.\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     a = (0::'a)", "have \"(\\<forall>s. s \\<noteq> \\<dd> \\<and> \\<lambda>(s,a) = \\<dd> \\<longrightarrow> a = 0)\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd>\n  \\<forall>s.\n     s \\<circ> a = a \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     a = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       a = (0::'a)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     a = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s.\n     s \\<noteq> \\<dd> \\<and> \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     a = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "by (auto simp add: E)"], ["proof (state)\nthis:\n  \\<forall>s.\n     \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s.\n     \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<Longrightarrow>\n    \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "moreover"], ["proof (state)\nthis:\n  \\<forall>s.\n     \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<Longrightarrow>\n    \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "have C2: \"(\\<forall>s. \\<lambda>(s,a) \\<noteq> \\<dd> \\<longrightarrow> s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       \\<lambda> (s, a) \\<noteq> \\<dd> \\<longrightarrow>\n       s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "by (simp add: hyp)"], ["proof (state)\nthis:\n  \\<forall>s.\n     \\<lambda> (s, a) \\<noteq> \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n\ngoal (1 subgoal):\n 1. (\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> a = a) \\<and>\n    (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> b = b) \\<Longrightarrow>\n    \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>s.\n     \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n  \\<forall>s.\n     \\<lambda> (s, a) \\<noteq> \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "show \"(\\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b)\""], ["proof (prove)\nusing this:\n  \\<forall>s.\n     \\<lambda> (s, a) = \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n  \\<forall>s.\n     \\<lambda> (s, a) \\<noteq> \\<dd> \\<longrightarrow>\n     s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n\ngoal (1 subgoal):\n 1. \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b", "by blast"], ["proof (state)\nthis:\n  \\<forall>s. s \\<noteq> \\<dd> \\<longrightarrow> s \\<circ> (a ; b) = a ; b\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Strong Orbits and Induced Behaviours \\label{sub:strong_orbits_and_induced_behaviours}\\<close>"], ["", "text \\<open>\nThe \\emph{strong orbit} of~$a$ in~$\\stim$ is the set given by~$\\orbS{a} = \\sets{b \\in \\CKAset}{\\orb{b} = \\orb{a}}$. \nTwo agents are in the same strong orbit, denoted~$a \\CKAsim b$ for~$a,b \\in \\CKAset$, if and only if their orbits are \nidentical. This is to say when~$a \\CKAsim b$, if an agent behaving as~$a$ is influenced by a stimulus to behave as~$b$, \nthen there exists a stimulus which influences the agent, now behaving as~$b$, to revert back to its original behaviour~$a$. \n\nThe influence of stimuli on agent behaviours is called the \\emph{induced behaviours} via stimuli. Let~$a,b \\in \\CKAset$ \nbe agent behaviours with~$a \\neq b$. We say that~$b$ is \\emph{induced by~$a$ via stimuli} (denoted by~$\\induced{b}{a}$) \nif and only if~$\\lnotation{\\exists}{s}{s \\in \\STIMset}{\\lAct{a}{s} = b}$. The notion of induced behaviours allows us to make \nsome predictions about the evolution of agent behaviours in a given system by providing some insight into how different agents \ncan respond to any stimuli.\n\\<close>"], ["", "text \\<open>\nLemma \\emph{fixed-not-induce} states that if an agent has a fixed point behaviour, then it does not induce any agent behaviours via  stimuli besides the inactive behaviour~$0$.\n\\<close>"], ["", "lemma fixed_not_induce: \"fixed(a) \\<longrightarrow> (\\<forall>b. b \\<noteq> 0 \\<and> b \\<noteq> a \\<longrightarrow> \\<not>(a \\<lhd> b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixed a \\<longrightarrow>\n    (\\<forall>b.\n        b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n        \\<not> a \\<lhd> b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fixed a \\<longrightarrow>\n    (\\<forall>b.\n        b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n        \\<not> a \\<lhd> b)", "have \"\\<And>s. s = \\<dd> \\<or> s \\<noteq> \\<dd> \\<Longrightarrow> (\\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a) \\<Longrightarrow> s \\<circ> a \\<noteq> 0 \n\\<Longrightarrow> s \\<circ> a \\<noteq> a \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>s = \\<dd> \\<or> s \\<noteq> \\<dd>;\n        \\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n        s \\<circ> a \\<noteq> (0::'a); s \\<circ> a \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> False", "by (erule disjE, simp_all)"], ["proof (state)\nthis:\n  \\<lbrakk>?s = \\<dd> \\<or> ?s \\<noteq> \\<dd>;\n   \\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n   ?s \\<circ> a \\<noteq> (0::'a); ?s \\<circ> a \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. fixed a \\<longrightarrow>\n    (\\<forall>b.\n        b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n        \\<not> a \\<lhd> b)", "hence \"\\<And>s. (\\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a) \\<Longrightarrow> s \\<circ> a \\<noteq> 0 \\<Longrightarrow> s \\<circ> a \\<noteq> a \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s = \\<dd> \\<or> ?s \\<noteq> \\<dd>;\n   \\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n   ?s \\<circ> a \\<noteq> (0::'a); ?s \\<circ> a \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<forall>t.\n                   t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n        s \\<circ> a \\<noteq> (0::'a); s \\<circ> a \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n   ?s \\<circ> a \\<noteq> (0::'a); ?s \\<circ> a \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. fixed a \\<longrightarrow>\n    (\\<forall>b.\n        b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n        \\<not> a \\<lhd> b)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n   ?s \\<circ> a \\<noteq> (0::'a); ?s \\<circ> a \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. fixed a \\<longrightarrow>\n    (\\<forall>b.\n        b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n        \\<not> a \\<lhd> b)", "unfolding fixed_def induced_def orb_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>t. t \\<noteq> \\<dd> \\<longrightarrow> t \\<circ> a = a;\n   ?s \\<circ> a \\<noteq> (0::'a); ?s \\<circ> a \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (\\<forall>s.\n        s \\<noteq> \\<dd> \\<longrightarrow>\n        s \\<circ> a = a) \\<longrightarrow>\n    (\\<forall>b.\n        b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n        (\\<nexists>s. s \\<circ> a = b))", "by auto"], ["proof (state)\nthis:\n  fixed a \\<longrightarrow>\n  (\\<forall>b.\n      b \\<noteq> (0::'a) \\<and> b \\<noteq> a \\<longrightarrow>\n      \\<not> a \\<lhd> b)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nLemma \\emph{strong-orbit-both-induced} states that all agent behaviours which belong to the same strong orbit are mutually induced via some (possibly different) stimuli.\nThis is to say that if two agent behaviours are in the same strong orbit, then there exists inverse stimuli for each agent behaviour in a \nstrong orbit allowing an agent to revert back to its previous behaviour.\n\\<close>"], ["", "lemma in_own_orbit: \"a \\<in> Orb(a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> Orb a", "unfolding orb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<circ> a = a", "by (rule_tac x=\"\\<nn>\" in exI, simp)"], ["", "lemma strong_orbit_both_induced: \"a \\<sim>\\<^sub>\\<K> b \\<longrightarrow> a \\<lhd> b \\<and> b \\<lhd> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sim>\\<^sub>\\<K> b \\<longrightarrow> a \\<lhd> b \\<and> b \\<lhd> a", "unfolding orbit_equivalent_def induced_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb a = Orb b \\<longrightarrow> b \\<in> Orb a \\<and> a \\<in> Orb b", "by (blast intro: in_own_orbit)"], ["", "text \\<open>\nLemma \\emph{strong-orbit-induce-same} states that if two agent behaviours are in the same strong orbit, then a third behaviour can be induced via  stimuli by either of \nthe behaviours within the strong orbit. This is to say that each behaviour in a strong orbit can induce the same set of behaviours\n(perhaps via different stimuli).\n\\<close>"], ["", "lemma strong_orbit_induce_same: \"a \\<sim>\\<^sub>\\<K> b \\<longrightarrow> (a \\<lhd> c \\<longleftrightarrow> b \\<lhd> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sim>\\<^sub>\\<K> b \\<longrightarrow> (a \\<lhd> c) = (b \\<lhd> c)", "unfolding induced_def orbit_equivalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Orb a = Orb b \\<longrightarrow> (c \\<in> Orb a) = (c \\<in> Orb b)", "by simp"], ["", "end"], ["", "end"]]}