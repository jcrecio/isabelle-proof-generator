{"file_name": "/home/qj213/afp-2021-10-22/thys/Vickrey_Clarke_Groves/MiscTools.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Vickrey_Clarke_Groves", "problem_names": ["lemma \n  \"toFunction = eval_rel\"", "lemma lm001: \n  \"((P \\<union> Q) || X) = ((P || X) \\<union> (Q||X))\"", "lemma lm002: \n  assumes \"runiq R\" \n  shows \"R \\<supseteq> graph (Domain R) (toFunction R)\"", "lemma lm003: \n  assumes \"runiq R\" \n  shows \"R \\<subseteq> graph (Domain R) (toFunction R)\"", "lemma lm004: \n  assumes \"runiq R\" \n  shows \"R = graph (Domain R) (toFunction R)\"", "lemma domainOfGraph: \n  \"runiq(graph X f) & Domain(graph X f)=X\"", "lemma imageEquivalence: \n  assumes \"runiq (f::(('a \\<times> ('b set)) set))\" \"x \\<in> Domain f\" \n  shows \"f,,x = f,,,x\"", "lemma lm005: \n  \"Graph f=graph UNIV f\"", "lemma graphIntersection: \n  \"graph (X \\<inter> Y) f \\<subseteq> ((graph X f) || Y)\"", "lemma outsideOutside: \n  \"((P outside X) outside Y) = P outside (X\\<union>Y)\"", "lemma lm007: \n  assumes \"(X \\<inter> Domain P) \\<subseteq> Domain Q\" \n  shows \"P +* Q = (P outside X) +* Q\"", "lemma lm009: \n  \"P = P \\<union> {x}\\<times>P``{x}\"", "lemma lm011: \n  \"R \\<subseteq> R +* ({x} \\<times> (R``{x}))\"", "lemma lm012: \n  \"R \\<supseteq> R+*({x} \\<times> (R``{x}))\"", "lemma lm013: \n  \"R = R +* ({x} \\<times> (R``{x}))\"", "lemma rightUniqueTrivialCartes: \n  assumes \"trivial Y\" \n  shows \"runiq (X \\<times> Y)\"", "lemma lm014: \n  \"runiq ((X \\<times> {x}) +* (Y \\<times> {y}))\"", "lemma lm015: \n  \"(P || (X \\<inter> Y)) \\<subseteq> (P||X)    &    P outside (X \\<union> Y) \\<subseteq> P outside X\"", "lemma lm016: \n  \"P || X \\<subseteq> (P||(X \\<union> Y))       &    P outside X \\<subseteq> P outside (X \\<inter> Y)\"", "lemma lm017: \n  \"P``(X \\<inter> Domain P) = P``X\"", "lemma cardinalityOneSubset: \n  assumes \"card X=1\" and \"X \\<subseteq> Y\" \n  shows \"Union X \\<in> Y\"", "lemma cardinalityOneTheElem: \n  assumes \"card X=1\" \"X \\<subseteq> Y\" \n  shows \"the_elem X \\<in> Y\"", "lemma lm018: \n  \"(R outside X1) outside X2 = (R outside X2) outside X1\"", "lemma lm019: \n  assumes \"card X\\<ge>1\" \"\\<forall>x\\<in>X. y > x\" \n  shows \"y > Max X\"", "lemma lm020: \n  assumes \"finite X\" \"mx \\<in> X\" \"f x < f mx\" \n  shows\"x \\<notin> argmax f X\"", "lemma lm021: \n  assumes \"finite X\" \"mx \\<in> X\" \"\\<forall>x \\<in> X-{mx}. f x < f mx\" \n  shows \"argmax f X \\<subseteq> {mx}\"", "lemma lm022: \n  assumes \"finite X\" \"mx \\<in> X\" \"\\<forall>x \\<in> X-{mx}. f x < f mx\" \n  shows \"argmax f X = {mx}\"", "lemma lm024: \n  assumes \"f \\<circ> g = id\" \n  shows \"inj_on g UNIV\"", "lemma lm025: \n  assumes \"inj_on f X\" \n  shows \"inj_on (image f) (Pow X)\"", "lemma injectionPowerset: \n  assumes \"inj_on f Y\" \"X \\<subseteq> Y\" \n  shows \"inj_on (image f) (Pow X)\"", "lemma finestPart: \n  \"finestpart X = {{x}|x . x\\<in>X}\"", "lemma finestPartUnion: \n  \"X=\\<Union> (finestpart X)\"", "lemma lm026: \n  \"Union \\<circ> finestpart = id\"", "lemma lm027: \n  \"inj_on Union (finestpart ` UNIV)\"", "lemma nonEqualitySetOfSets: \n  assumes \"X \\<noteq> Y\" \n  shows \"{{x}| x. x \\<in> X} \\<noteq> {{x}| x. x \\<in> Y}\"", "lemma unionFinestPart: \n  \"{Y | Y. \\<exists>x.((Y \\<in> finestpart x) \\<and> (x \\<in> X))} = \\<Union>(finestpart`X)\"", "lemma rangeSetOfPairs: \n  \"Range {(fst pair, Y)| Y pair. Y \\<in> finestpart (snd pair) & pair \\<in> X} = \n   {Y. \\<exists>x. ((Y \\<in> finestpart x) \\<and> (x \\<in> Range X))}\"", "lemma setOfPairsEquality: \n  \"{(fst pair, {y})| y pair. y \\<in> snd pair & pair \\<in> X} = \n   {(fst pair, Y)| Y pair. Y \\<in> finestpart (snd pair) & pair \\<in> X}\"", "lemma setOfPairs: \n  \"{(fst pair, {y})| y. y \\<in>  snd pair} = \n   {fst pair} \\<times> {{y}| y. y \\<in> snd pair}\"", "lemma lm029: \n  \"x \\<in> X = ({x} \\<in> finestpart X)\"", "lemma pairDifference: \n  \"{(x,X)}-{(x,Y)} = {x}\\<times>({X}-{Y})\"", "lemma lm030: \n  assumes \"\\<Union> P = X\" \n  shows \"P \\<subseteq> Pow X\"", "lemma lm031: \n  \"argmax f {x} = {x}\"", "lemma sortingSameSet: \n  assumes \"finite X\" \n  shows \"set (sorted_list_of_set X) = X\"", "lemma lm032: \n  assumes \"finite A\" \n  shows \"sum f A = sum f (A \\<inter> B) + sum f (A - B)\"", "lemma lm033: \n  assumes \"(Domain P \\<subseteq> Domain Q)\" \n  shows \"(P +* Q) = Q\"", "lemma lm034: \n  assumes \"(P +* Q=Q)\" \n  shows \"(Domain P \\<subseteq> Domain Q)\"", "lemma lm035: \n  \"(Domain P \\<subseteq> Domain Q) = (P +* Q=Q)\"", "lemma \n  \"(P||(Domain Q)) +* Q = Q\"", "lemma lm036: \n  \"P||X   =   P outside (Domain P - X)\"", "lemma lm037: \n  \"(P outside X) \\<subseteq>    P || ((Domain P)-X)\"", "lemma lm038: \n  \"Domain (P outside X) \\<inter> Domain (Q || X) = {}\"", "lemma lm039: \n  \"(P outside X) \\<inter> (Q || X) = {}\"", "lemma lm040: \n  \"(P outside (X \\<union> Y)) \\<inter> (Q || X) = {}   &   (P outside X) \\<inter> (Q || (X \\<inter> Z)) = {}\"", "lemma lm041: \n  \"P outside X    =    P || ((Domain P) - X)\"", "lemma lm042: \n  \"R``(X-Y) = (R||X)``(X-Y)\"", "lemma lm043: \n  assumes \"\\<Union> XX \\<subseteq> X\" \"x \\<in> XX\" \"x \\<noteq> {}\" \n  shows \"x \\<inter> X \\<noteq> {}\"", "lemma lm044: \n  assumes \"\\<forall>l \\<in> set L1. set L2 = f2 (set l) N\" \n  shows \"set [set L2. l <- L1]  =  {f2 P N| P. P \\<in> set (map set L1)}\"", "lemma setVsList: \n  assumes \"\\<forall>l \\<in> set (g1 G). set (g2 l N) = f2 (set l) N\" \n  shows \"set [set (g2 l N). l <- (g1 G)]  =  {f2 P N| P. P \\<in> set (map set (g1 G))}\"", "lemma lm045: \n  \"(\\<forall>l \\<in> set (g1 G). set (g2 l N) = f2 (set l) N) -->  \n     {f2 P N| P. P \\<in> set (map set (g1 G))} = set [set (g2 l N). l <- g1 G]\"", "lemma lm046: \n  assumes \"X \\<inter> Y  =  {}\" \n  shows \"R``X = (R outside Y)``X\"", "lemma lm047: \n  assumes \"(Range P) \\<inter> (Range Q) = {}\" \"runiq (P^-1)\" \"runiq (Q^-1)\" \n  shows \"runiq ((P \\<union> Q)^-1)\"", "lemma lm048: \n  assumes \"(Range P) \\<inter> (Range Q) = {}\" \"runiq (P^-1)\" \"runiq (Q^-1)\" \n  shows \"runiq ((P +* Q)^-1)\"", "lemma lm049: \n  assumes \"runiq R\" \n  shows \"card (R `` {a}) = 1 \\<longleftrightarrow> a \\<in> Domain R\"", "lemma lm050: \n  \"inj (\\<lambda>a. ((fst a, fst (snd a)), snd (snd a)))\"", "lemma lm051: \n  assumes \"finite X\" \"x > Max X\" \n  shows \"x \\<notin> X\"", "lemma lm052: \n  assumes \"finite A\" \"A \\<noteq> {}\" \n  shows \"Max (f`A) \\<in> f`A\"", "lemma lm053: \n  \"argmax f A \\<subseteq> f -` {Max (f ` A)}\"", "lemma lm054: \n  \"argmax f A = A \\<inter> { x . f x = Max (f ` A) }\"", "lemma lm055: \n  \"(x \\<in> argmax f X) = (x \\<in> X & f x = Max (f ` X))\"", "lemma rangeEmpty: \n  \"Range -` {{}} = {{}}\"", "lemma finitePairSecondRange: \n  \"(\\<forall> pair \\<in> R. finite (snd pair)) = (\\<forall> y \\<in> Range R. finite y)\"", "lemma lm056: \n  \"fst ` P = snd ` (P^-1)\"", "lemma lm057: \n  \"fst pair = snd (flip pair) & snd pair = fst (flip pair)\"", "lemma flip_flip2: \n  \"flip \\<circ> flip   =   id\"", "lemma lm058: \n  \"fst = (snd\\<circ>flip)\"", "lemma lm059: \n  \"snd = (fst\\<circ>flip)\"", "lemma lm060: \n  \"inj_on fst P = inj_on (snd\\<circ>flip) P\"", "lemma lm062: \n  \"inj_on fst P = inj_on snd (P^-1)\"", "lemma sumPairsInverse: \n  assumes \"runiq (P^-1)\" \n  shows \"sum (f \\<circ> snd) P = sum f (Range P)\"", "lemma notEmptyFinestpart: \n  assumes \"X \\<noteq> {}\" \n  shows \"finestpart X \\<noteq> {}\"", "lemma lm063: \n  assumes \"inj_on g X\" \n  shows \"sum f (g`X) = sum (f \\<circ> g) X\"", "lemma functionOnFirstEqualsSecond: \n  assumes \"runiq R\" \"z \\<in> R\" \n  shows \"R,,(fst z) = snd z\"", "lemma lm064: \n  assumes \"runiq R\" \n  shows \"sum (toFunction R) (Domain R) = sum snd R\"", "lemma lm066: \n  \"Range (R outside X) = R``((Domain R) - X)\"", "lemma lm067: \n  \"(R||X) `` X = R``X\"", "lemma lm068: \n  assumes \"x \\<in> Domain (f||X)\" \n  shows \"(f||X)``{x} = f``{x}\"", "lemma lm069: \n  assumes \"x \\<in> X \\<inter> Domain f\" \"runiq (f||X)\" \n  shows \"(f||X),,x = f,,x\"", "lemma lm070: \n  assumes \"runiq (f||X)\" \n  shows \"sum (toFunction (f||X)) (X \\<inter> Domain f) = sum (toFunction f) (X \\<inter> Domain f)\"", "lemma cardFinestpart: \n  \"card (finestpart X) = card X\"", "lemma finiteFinestpart: \n  \"finite (finestpart X) = finite X\"", "lemma lm072: \n  \"finite \\<circ> finestpart = finite\"", "lemma finestpartSubset: \n  assumes \"X \\<subseteq> Y\" \n  shows \"finestpart X \\<subseteq> finestpart Y\"", "lemma lm074: \n  \"\\<Union> (finestpart ` XX) \\<subseteq> finestpart (\\<Union> XX)\"", "lemma lm075: \n  \"\\<Union> (finestpart ` XX) \\<supseteq> finestpart (\\<Union> XX)\" \n  (is \"?L \\<supseteq> ?R\")", "lemma unionImage: \n  assumes \"runiq a\" \n  shows \"{(x, {y})| x y. y \\<in> \\<Union> (a``{x}) & x \\<in> Domain a} = \n         {(x, {y})| x y. y \\<in> a,,x & x \\<in> Domain a}\"", "lemma lm076: \n  assumes \"runiq P\" \n  shows \"card (Domain P) = card P\"", "lemma finiteDomainImpliesFinite: \n  assumes \"runiq f\" \n  shows \"finite (Domain f) = finite f\"", "lemma sumCurry: \n  \"sum ((curry f) x) Y = sum f ({x} \\<times> Y)\"", "lemma lm077: \n  \"sum (%y. f (x,y)) Y = sum f ({x}\\<times>Y)\"", "lemma lm079: \n  \"(P +* Q)``(Domain Q\\<inter>X)  =  Q``(Domain Q\\<inter>X)\"", "lemma lm082: \n  assumes \"X\\<inter>Y = {}\" \n  shows \"(P outside Y)``X=P``X\"", "lemma lm084: \n  assumes \"finite X\" \"finite Y\" \"card(X\\<inter>Y) = card X\" \n  shows \"X \\<subseteq> Y\"", "lemma cardinalityIntersectionEquality: \n  assumes \"finite X\" \"finite Y\" \"card X = card Y\" \n  shows \"(card (X\\<inter>Y) = card X)     =    (X = Y)\"", "lemma lm085: (*fixes f::\"'a => 'b\" fixes P::\"'a => bool\" fixes xx::\"'a\"*) \n  assumes \"P xx\" \n  shows \"{(x,f x)| x. P x},,xx   =   f xx\"", "lemma graphEqImage: \n  assumes \"x \\<in> X\" \n  shows \"graph X f,,x   =   f x\"", "lemma lm086: \n  \"Graph f,,x    =    f x\"", "lemma lm087: \n  \"toFunction (Graph f)    =    f\"    (is \"?L=_\")", "lemma lm088: \n  \"R outside X \\<subseteq> R\"", "lemma lm089: \n  \"Range(f outside X) \\<supseteq> (Range f)-(f``X)\"", "lemma lm090: \n  assumes \"runiq P\" \n  shows \"(P\\<inverse>``((Range P)-Y)) \\<inter> ((P\\<inverse>)``Y)   =   {}\"", "lemma lm091: \n  assumes \"runiq (P\\<inverse>)\"\n  shows \"(P``((Domain P) - X)) \\<inter> (P``X)  =  {}\"", "lemma lm092: \n  assumes \"runiq f\" \"runiq (f^-1)\" \n  shows \"Range(f outside X) \\<subseteq> (Range f)-(f``X)\"", "lemma rangeOutside: \n  assumes \"runiq f\" \"runiq (f^-1)\" \n  shows \"Range(f outside X) = (Range f)-(f``X)\"", "lemma unionIntersectionEmpty: \n  \"(\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x\\<inter>y = {}) = ((\\<Union>X)\\<inter>(\\<Union> Y)={})\"", "lemma setEqualityAsDifference: \n  \"{x}-{y} = {}  =  (x = y)\"", "lemma lm093: \n  assumes \"R \\<noteq> {}\" \"Domain R \\<inter> X \\<noteq> {}\" \n  shows \"R``X \\<noteq> {}\"", "lemma lm095: \n  \"R \\<subseteq> (Domain R) \\<times> (Range R)\"", "lemma finiteRelationCharacterization: \n  \"(finite (Domain Q) & finite (Range Q)) = finite Q\"", "lemma familyUnionFiniteEverySetFinite: \n  assumes \"finite (\\<Union> XX)\" \n  shows \"\\<forall>X \\<in> XX. finite X\"", "lemma lm096: \n  assumes \"runiq f\" \"X \\<subseteq> (f^-1)``Y\" \n  shows \"f``X \\<subseteq> Y\"", "lemma lm097: \n  assumes \"y \\<in> f``{x}\" \"runiq f\" \n  shows \"f,,x = y\"", "lemma lm098: \n  \"runiq (X <|| Y)\"", "lemma lm099: \n  assumes \"x \\<in> X\" \n  shows \"1 \\<in> (X <|| Y) `` {x}\"", "lemma lm100: \n  assumes \"x \\<in> Y-X\" \n  shows \"0 \\<in> (X <|| Y) `` {x}\"", "lemma lm101: \n  assumes \"x \\<in> X \\<union> Y\" \n  shows \"(X <|| Y),,x = chi X x\" (is \"?L=?R\")", "lemma lm102: \n  assumes \"x \\<in> X \\<union> Y\" \n  shows \"(X <| Y) x = chi X x\"", "lemma lm113: \n  \"int (n::nat) = real n\"", "lemma lm114: \n  assumes \"\\<exists> n \\<in> {0..<size l}. P (l!n)\" \n  shows \"[n. n \\<leftarrow> [0..<size l], P (l!n)] \\<noteq> []\"", "lemma lm115: \n  assumes \"ll \\<in> set (l::'a list)\" \n  shows \"\\<exists> n\\<in> (nth l) -` (set l). ll=l!n\"", "lemma lm116: \n  assumes \"ll \\<in> set (l::'a list)\" \n  shows \"\\<exists> n. ll=l!n & n < size l & n >= 0\"", "lemma lm117: \n  assumes \"P -` {True} \\<inter> set l \\<noteq> {}\" \n  shows \"\\<exists> n \\<in> {0..<size l}. P (l!n)\"", "lemma nonEmptyListFiltered: \n  assumes \"P -` {True} \\<inter> set l \\<noteq> {}\" \n  shows \"[n. n \\<leftarrow> [0..<size l], P (l!n)] \\<noteq> []\"", "lemma lm118: \n  \"(nth l) ` set ([n. n \\<leftarrow> [0..<size l], (%x. x\\<in>X) (l!n)]) \\<subseteq> X\\<inter>set l\"", "lemma lm120: \n  \"(n\\<in>{0..<N}) = ((n::nat) < N)\"", "lemma lm121: \n  assumes \"X \\<subseteq> {0..<size list}\" \n  shows \"(nth list)`X \\<subseteq> set list\"", "lemma lm122: \n  \"set ([n. n \\<leftarrow> [0..<size l], P (l!n)]) \\<subseteq> {0..<size l}\"", "lemma lm123: \n  \"set (filterpositions2 pre list) \\<subseteq> {0..<size list}\"", "lemma permutationNotEmpty: \n  assumes \"l \\<noteq> []\" \n  shows \"perm2 l n \\<noteq> []\"", "lemma lm124: \n  \"set (takeAll P list) = ((nth list) ` set (filterpositions2 P list))\"", "lemma takeAllSubset:\n  \"set (takeAll (%x. x\\<in> P) list) \\<subseteq> P\"", "lemma lm126: \n  \"set (insertAt x l n) = {x} \\<union> set l\"", "lemma lm127: \n  \"\\<forall>n. set (perm2 [] n) = set []\"", "lemma lm128: \n  assumes \"\\<forall>n. (set (perm2 l n) = set l)\" \n  shows \"set (perm2 (x#l) n) = {x} \\<union> set l\"", "lemma lm129: \n  assumes \"runiq f\" \"x \\<in> Domain f\" \n  shows \"(f Else 0) x = (toFunction f) x\"", "lemma lm130: \n  assumes \"runiq f\" \n  shows \"sum (f Else 0) (X\\<inter>(Domain f))  =  sum (toFunction f) (X\\<inter>(Domain f))\"", "lemma lm131: \n  assumes \"Y \\<subseteq> f-`{0}\" \n  shows \"sum f Y  =  0\"", "lemma lm132: \n  assumes \"Y \\<subseteq> f-`{0}\" \"finite X\" \n  shows \"sum f X = sum f (X-Y)\"", "lemma lm133: \n  \"-(Domain f) \\<subseteq> (f Else 0)-`{0}\"", "lemma lm137: \n  \"sum (f Else 0) X = sum' f X\"", "lemma lm139: \n  \"argmax (sum' b) = (argmax \\<circ> sum') b\"", "lemma domainConstant: \n  \"Domain (Y \\<times> {0::nat}) = Y & Domain (X \\<times> {1}) = X\"", "lemma domainCharacteristicFunction: \n  \"Domain (X <|| Y) = X \\<union> Y\"", "lemma functionEquivalenceOnSets: \n  assumes \"\\<forall>x \\<in> X. f x = g x\" \n  shows \"f`X = g`X\"", "lemma lm140: \n  assumes \"runiq R\" \"runiq (R^-1)\" \n  shows \"(R``A) \\<inter> (R``B) = R``(A\\<inter>B)\"", "lemma intersectionEmptyRelationIntersectionEmpty: \n  assumes \"runiq (R^-1)\" \"runiq R\" \"X1 \\<inter> X2 = {}\" \n  shows \"(R``X1) \\<inter> (R``X2) = {}\"", "lemma lm141: \n  assumes \"runiq f\" \"trivial Y\" \n  shows \"trivial (f `` (f^-1 `` Y))\"", "lemma lm142: \n  assumes \"trivial X\" \n  shows \"card (Pow X)\\<in>{1,2}\"", "lemma lm143: \n  assumes \"card (Pow A) = 1\" \n  shows \"A = {}\"", "lemma lm144: \n  \"(\\<not> (finite A)) = (card (Pow A) = 0)\"", "lemma lm146: \n  assumes \"card (Pow A) \\<noteq> 0\" \n  shows \"card A=Discrete.log (card (Pow A))\"", "lemma log_2 [simp]:\n  \"Discrete.log 2 = 1\"", "lemma lm147: \n  assumes \"card (Pow A) = 2\" \n  shows \"card A = 1\"", "lemma lm148: \n  assumes \"card (Pow X) = 1 \\<or> card (Pow X) = 2\" \n  shows \"trivial X\"", "lemma lm149: \n  \"trivial A = (card (Pow A) \\<in> {1,2})\"", "lemma lm150: \n  assumes \"R \\<subseteq> f\" \"runiq f\" \"Domain f = Domain R\" \n  shows \"runiq R\"", "lemma lm151: \n  assumes \"f \\<subseteq> g\" \"runiq g\" \"Domain f = Domain g\" \n  shows \"g \\<subseteq> f\"", "lemma lm152: \n  assumes \"R \\<subseteq> f\" \"runiq f\" \"Domain f \\<subseteq> Domain R\" \n  shows \"f = R\"", "lemma lm153: \n  \"graph X f = (Graph f) || X\"", "lemma lm154: \n  \"graph (X \\<inter> Y) f = (graph X f) || Y\"", "lemma restrictionVsIntersection:\n  \"{(x, f x)| x. x \\<in> X2} || X1 = {(x, f x)| x. x \\<in> X2 \\<inter> X1}\"", "lemma lm155: \n  assumes \"runiq f\" \"X \\<subseteq> Domain f\" \n  shows \"graph X (toFunction f) = (f||X)\"", "lemma lm156: \n  \"(Graph f) `` X = f ` X\"", "lemma lm157: \n  assumes \"X \\<subseteq> Domain f\" \"runiq f\" \n  shows \"f``X = (eval_rel f)`X\"", "lemma cardOneImageCardOne: \n  assumes \"card A = 1\" \n  shows \"card (f`A) = 1\"", "lemma cardOneTheElem: \n  assumes \"card A = 1\" \n  shows \"the_elem (f`A) = f (the_elem A)\"", "lemma lm158: \n  \"finite X   =  (X \\<in> range set)\"", "lemma lm159: \n  \"finite = (%X. X\\<in>range set)\"", "lemma lm160: \n  \"swap f = (%x. %y. f y x)\"", "lemma lm161: \n  fixes a::real \n  fixes b c \n  shows \"a*b - a*c=a*(b-c)\"", "lemma lm162: \n  fixes a::real \n  fixes b c \n  shows \"a*b - c*b=(a-c)*b\""], "translations": [["", "lemma \n  \"toFunction = eval_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toFunction = (,,)", "using toFunction_def"], ["proof (prove)\nusing this:\n  toFunction ?R = (,,) ?R\n\ngoal (1 subgoal):\n 1. toFunction = (,,)", "by blast"], ["", "lemma lm001: \n  \"((P \\<union> Q) || X) = ((P || X) \\<union> (Q||X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<union> Q) || X = P || X \\<union> Q || X", "unfolding restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<times> Range (P \\<union> Q) \\<inter> (P \\<union> Q) =\n    X \\<times> Range P \\<inter> P \\<union> X \\<times> Range Q \\<inter> Q", "by blast"], ["", "text \\<open>update behaves like P +* Q (paste), but without enlarging P's Domain. update is the set theoretic equivalent of the lambda function update @{term fun_upd}\\<close>"], ["", "definition update \n  where \"update P Q = P +* (Q || (Domain P))\""], ["", "notation update (infix \"+^\" 75)"], ["", "(* The operator runiqer will make out of an arbitrary relation a function by making a choice to all those elements in the domain for which the value is not unique by applying the axiom of choice. *)"], ["", "definition runiqer  :: \"('a \\<times> 'b) set => ('a \\<times> 'b) set\"\n  where \"runiqer R = { (x, THE y. y \\<in> R `` {x})| x. x \\<in> Domain R }\""], ["", "text \\<open>@{term graph} is like @{term Graph}, but with a built-in restriction to a given set @{term X}.\nThis makes it computable for finite X, whereas @{term \"Graph f || X\"} is not computable. \nDuplicates the eponymous definition found in \\<open>Function_Order\\<close>, which is otherwise not needed.\\<close>"], ["", "definition graph \n  where \"graph X f = {(x, f x) | x. x \\<in> X}\""], ["", "lemma lm002: \n  assumes \"runiq R\" \n  shows \"R \\<supseteq> graph (Domain R) (toFunction R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (Domain R) (toFunction R) \\<subseteq> R", "unfolding graph_def toFunction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, R ,, x) |x. x \\<in> Domain R} \\<subseteq> R", "using assms graph_def toFunction_def eval_runiq_rel"], ["proof (prove)\nusing this:\n  runiq R\n  graph ?X ?f = {(x, ?f x) |x. x \\<in> ?X}\n  toFunction ?R = (,,) ?R\n  \\<lbrakk>?x \\<in> Domain ?R; runiq ?R\\<rbrakk>\n  \\<Longrightarrow> (?x, ?R ,, ?x) \\<in> ?R\n\ngoal (1 subgoal):\n 1. {(x, R ,, x) |x. x \\<in> Domain R} \\<subseteq> R", "by fastforce"], ["", "lemma lm003: \n  assumes \"runiq R\" \n  shows \"R \\<subseteq> graph (Domain R) (toFunction R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<subseteq> graph (Domain R) (toFunction R)", "unfolding graph_def toFunction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<subseteq> {(x, R ,, x) |x. x \\<in> Domain R}", "using assms eval_runiq_rel runiq_basic Domain.DomainI mem_Collect_eq subrelI"], ["proof (prove)\nusing this:\n  runiq R\n  \\<lbrakk>?x \\<in> Domain ?R; runiq ?R\\<rbrakk>\n  \\<Longrightarrow> (?x, ?R ,, ?x) \\<in> ?R\n  runiq ?R =\n  (\\<forall>x y y'.\n      (x, y) \\<in> ?R \\<and> (x, y') \\<in> ?R \\<longrightarrow> y = y')\n  (?a, ?b) \\<in> ?r \\<Longrightarrow> ?a \\<in> Domain ?r\n  (?a \\<in> Collect ?P) = ?P ?a\n  (\\<And>x y.\n      (x, y) \\<in> ?r \\<Longrightarrow> (x, y) \\<in> ?s) \\<Longrightarrow>\n  ?r \\<subseteq> ?s\n\ngoal (1 subgoal):\n 1. R \\<subseteq> {(x, R ,, x) |x. x \\<in> Domain R}", "by fastforce"], ["", "lemma lm004: \n  assumes \"runiq R\" \n  shows \"R = graph (Domain R) (toFunction R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = graph (Domain R) (toFunction R)", "using assms lm002 lm003"], ["proof (prove)\nusing this:\n  runiq R\n  runiq ?R \\<Longrightarrow>\n  graph (Domain ?R) (toFunction ?R) \\<subseteq> ?R\n  runiq ?R \\<Longrightarrow>\n  ?R \\<subseteq> graph (Domain ?R) (toFunction ?R)\n\ngoal (1 subgoal):\n 1. R = graph (Domain R) (toFunction R)", "by fast"], ["", "lemma domainOfGraph: \n  \"runiq(graph X f) & Domain(graph X f)=X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (graph X f) \\<and> Domain (graph X f) = X", "unfolding graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq {(x, f x) |x. x \\<in> X} \\<and>\n    Domain {(x, f x) |x. x \\<in> X} = X", "using rightUniqueRestrictedGraph"], ["proof (prove)\nusing this:\n  runiq {(x, ?f x) |x. ?P x}\n\ngoal (1 subgoal):\n 1. runiq {(x, f x) |x. x \\<in> X} \\<and>\n    Domain {(x, f x) |x. x \\<in> X} = X", "by fast"], ["", "(* The following definition gives the image of a relation R for a fixed element x. It is equivalent to eval_rel for right unique R, but more general since it determines values even when R is not right unique. *)"], ["", "abbreviation \"eval_rel2 (R::('a \\<times> ('b set)) set) (x::'a) == \\<Union> (R``{x})\""], ["", "notation eval_rel2 (infix \",,,\" 75)"], ["", "lemma imageEquivalence: \n  assumes \"runiq (f::(('a \\<times> ('b set)) set))\" \"x \\<in> Domain f\" \n  shows \"f,,x = f,,,x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ,, x = f ,,, x", "using assms Image_runiq_eq_eval cSup_singleton"], ["proof (prove)\nusing this:\n  runiq f\n  x \\<in> Domain f\n  \\<lbrakk>?x \\<in> Domain ?R; runiq ?R\\<rbrakk>\n  \\<Longrightarrow> ?R `` {?x} = {?R ,, ?x}\n  Sup {?x} = ?x\n\ngoal (1 subgoal):\n 1. f ,, x = f ,,, x", "by metis"], ["", "(* UNIV is the universal set containing everything of the given type. It is defined in Set.thy.*)"], ["", "lemma lm005: \n  \"Graph f=graph UNIV f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph f = graph UNIV f", "unfolding Graph_def graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. True} = {(x, f x) |x. x \\<in> UNIV}", "by simp"], ["", "lemma graphIntersection: \n  \"graph (X \\<inter> Y) f \\<subseteq> ((graph X f) || Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (X \\<inter> Y) f \\<subseteq> graph X f || Y", "unfolding graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. x \\<in> X \\<inter> Y}\n    \\<subseteq> {(x, f x) |x. x \\<in> X} || Y", "using Int_iff mem_Collect_eq restrict_ext subrelI"], ["proof (prove)\nusing this:\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  (?a \\<in> Collect ?P) = ?P ?a\n  ?R || ?X = {(x, y) |x y. x \\<in> ?X \\<and> (x, y) \\<in> ?R}\n  (\\<And>x y.\n      (x, y) \\<in> ?r \\<Longrightarrow> (x, y) \\<in> ?s) \\<Longrightarrow>\n  ?r \\<subseteq> ?s\n\ngoal (1 subgoal):\n 1. {(x, f x) |x. x \\<in> X \\<inter> Y}\n    \\<subseteq> {(x, f x) |x. x \\<in> X} || Y", "by auto"], ["", "definition runiqs \n  where \"runiqs={f. runiq f}\""], ["", "lemma outsideOutside: \n  \"((P outside X) outside Y) = P outside (X\\<union>Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P outside X) outside Y = P outside (X \\<union> Y)", "unfolding Outside_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P - X \\<times> Range P - Y \\<times> Range (P - X \\<times> Range P) =\n    P - (X \\<union> Y) \\<times> Range P", "by blast"], ["", "corollary lm006: \n  \"((P outside X) outside X) = P outside X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P outside X) outside X = P outside X", "using outsideOutside"], ["proof (prove)\nusing this:\n  (?P outside ?X) outside ?Y = ?P outside (?X \\<union> ?Y)\n\ngoal (1 subgoal):\n 1. (P outside X) outside X = P outside X", "by force"], ["", "lemma lm007: \n  assumes \"(X \\<inter> Domain P) \\<subseteq> Domain Q\" \n  shows \"P +* Q = (P outside X) +* Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P +< Q = (P outside X) +< Q", "unfolding paste_def Outside_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P - Domain Q \\<times> Range P \\<union> Q =\n    P - X \\<times> Range P -\n    Domain Q \\<times> Range (P - X \\<times> Range P) \\<union>\n    Q", "using assms"], ["proof (prove)\nusing this:\n  X \\<inter> Domain P \\<subseteq> Domain Q\n\ngoal (1 subgoal):\n 1. P - Domain Q \\<times> Range P \\<union> Q =\n    P - X \\<times> Range P -\n    Domain Q \\<times> Range (P - X \\<times> Range P) \\<union>\n    Q", "by blast"], ["", "corollary lm008: \n  \"P +* Q = (P outside (Domain Q)) +* Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P +< Q = (P outside Domain Q) +< Q", "using lm007"], ["proof (prove)\nusing this:\n  ?X \\<inter> Domain ?P \\<subseteq> Domain ?Q \\<Longrightarrow>\n  ?P +< ?Q = (?P outside ?X) +< ?Q\n\ngoal (1 subgoal):\n 1. P +< Q = (P outside Domain Q) +< Q", "by fast"], ["", "corollary outsideUnion: \n  \"R = (R outside {x}) \\<union> ({x} \\<times> (R `` {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = R -- x \\<union> {x} \\<times> R `` {x}", "using restrict_to_singleton outside_union_restrict"], ["proof (prove)\nusing this:\n  ?P || {?x} = {?x} \\<times> ?P `` {?x}\n  ?P = ?P outside ?X \\<union> ?P || ?X\n\ngoal (1 subgoal):\n 1. R = R -- x \\<union> {x} \\<times> R `` {x}", "by metis"], ["", "lemma lm009: \n  \"P = P \\<union> {x}\\<times>P``{x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = P \\<union> {x} \\<times> P `` {x}", "by (metis outsideUnion sup.right_idem)"], ["", "corollary lm010: \n  \"R = (R outside {x}) +* ({x} \\<times> (R `` {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = (R -- x) +< {x} \\<times> R `` {x}", "by (metis paste_outside_restrict restrict_to_singleton)"], ["", "lemma lm011: \n  \"R \\<subseteq> R +* ({x} \\<times> (R``{x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<subseteq> R +< {x} \\<times> R `` {x}", "using lm010 lm008 paste_def Outside_def"], ["proof (prove)\nusing this:\n  ?R = (?R -- ?x) +< {?x} \\<times> ?R `` {?x}\n  ?P +< ?Q = (?P outside Domain ?Q) +< ?Q\n  ?P +< ?Q = ?P outside Domain ?Q \\<union> ?Q\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. R \\<subseteq> R +< {x} \\<times> R `` {x}", "by fast"], ["", "lemma lm012: \n  \"R \\<supseteq> R+*({x} \\<times> (R``{x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R +< {x} \\<times> R `` {x} \\<subseteq> R", "by (metis Un_least Un_upper1 outside_union_restrict paste_def \n            restrict_to_singleton restriction_is_subrel)"], ["", "lemma lm013: \n  \"R = R +* ({x} \\<times> (R``{x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R = R +< {x} \\<times> R `` {x}", "using lm011 lm012"], ["proof (prove)\nusing this:\n  ?R \\<subseteq> ?R +< {?x} \\<times> ?R `` {?x}\n  ?R +< {?x} \\<times> ?R `` {?x} \\<subseteq> ?R\n\ngoal (1 subgoal):\n 1. R = R +< {x} \\<times> R `` {x}", "by force"], ["", "lemma rightUniqueTrivialCartes: \n  assumes \"trivial Y\" \n  shows \"runiq (X \\<times> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (X \\<times> Y)", "using assms runiq_def Image_subset lm013 trivial_subset lm011"], ["proof (prove)\nusing this:\n  trivial Y\n  runiq ?R = (\\<forall>X. trivial X \\<longrightarrow> trivial (?R `` X))\n  ?r \\<subseteq> ?A \\<times> ?B \\<Longrightarrow> ?r `` ?C \\<subseteq> ?B\n  ?R = ?R +< {?x} \\<times> ?R `` {?x}\n  \\<lbrakk>trivial ?Y; ?X \\<subseteq> ?Y\\<rbrakk>\n  \\<Longrightarrow> trivial ?X\n  ?R \\<subseteq> ?R +< {?x} \\<times> ?R `` {?x}\n\ngoal (1 subgoal):\n 1. runiq (X \\<times> Y)", "by (metis(no_types))"], ["", "(* Two constant functions can be combined to a function *)"], ["", "lemma lm014: \n  \"runiq ((X \\<times> {x}) +* (Y \\<times> {y}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (X \\<times> {x} +< Y \\<times> {y})", "using rightUniqueTrivialCartes trivial_singleton runiq_paste2"], ["proof (prove)\nusing this:\n  trivial ?Y \\<Longrightarrow> runiq (?X \\<times> ?Y)\n  trivial {?x}\n  \\<lbrakk>runiq ?Q; runiq ?P\\<rbrakk> \\<Longrightarrow> runiq (?P +< ?Q)\n\ngoal (1 subgoal):\n 1. runiq (X \\<times> {x} +< Y \\<times> {y})", "by metis"], ["", "lemma lm015: \n  \"(P || (X \\<inter> Y)) \\<subseteq> (P||X)    &    P outside (X \\<union> Y) \\<subseteq> P outside X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P || (X \\<inter> Y) \\<subseteq> P || X \\<and>\n    P outside (X \\<union> Y) \\<subseteq> P outside X", "using Outside_def restrict_def Sigma_Un_distrib1 Un_upper1 inf_mono Diff_mono subset_refl"], ["proof (prove)\nusing this:\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n  ?R || ?X = ?X \\<times> Range ?R \\<inter> ?R\n  Sigma (?I \\<union> ?J) ?C = Sigma ?I ?C \\<union> Sigma ?J ?C\n  ?A \\<subseteq> ?A \\<union> ?B\n  \\<lbrakk>?a \\<le> ?c; ?b \\<le> ?d\\<rbrakk>\n  \\<Longrightarrow> inf ?a ?b \\<le> inf ?c ?d\n  \\<lbrakk>?A \\<subseteq> ?C; ?D \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?A - ?B \\<subseteq> ?C - ?D\n  ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. P || (X \\<inter> Y) \\<subseteq> P || X \\<and>\n    P outside (X \\<union> Y) \\<subseteq> P outside X", "by (metis (lifting) Sigma_mono inf_le1)"], ["", "lemma lm016: \n  \"P || X \\<subseteq> (P||(X \\<union> Y))       &    P outside X \\<subseteq> P outside (X \\<inter> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P || X \\<subseteq> P || (X \\<union> Y) \\<and>\n    P outside X \\<subseteq> P outside (X \\<inter> Y)", "using lm015 distrib_sup_le sup_idem le_inf_iff subset_antisym sup_commute"], ["proof (prove)\nusing this:\n  ?P || (?X \\<inter> ?Y) \\<subseteq> ?P || ?X \\<and>\n  ?P outside (?X \\<union> ?Y) \\<subseteq> ?P outside ?X\n  sup ?x (inf ?y ?z) \\<le> inf (sup ?x ?y) (sup ?x ?z)\n  sup ?x ?x = ?x\n  (?x \\<le> inf ?y ?z) = (?x \\<le> ?y \\<and> ?x \\<le> ?z)\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n  sup ?x ?y = sup ?y ?x\n\ngoal (1 subgoal):\n 1. P || X \\<subseteq> P || (X \\<union> Y) \\<and>\n    P outside X \\<subseteq> P outside (X \\<inter> Y)", "by (metis sup_ge1)"], ["", "lemma lm017: \n  \"P``(X \\<inter> Domain P) = P``X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P `` (X \\<inter> Domain P) = P `` X", "by blast"], ["", "lemma cardinalityOneSubset: \n  assumes \"card X=1\" and \"X \\<subseteq> Y\" \n  shows \"Union X \\<in> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> X \\<in> Y", "using assms cardinalityOneTheElemIdentity"], ["proof (prove)\nusing this:\n  card X = 1\n  X \\<subseteq> Y\n  (card ?X = 1) = (?X = {the_elem ?X})\n\ngoal (1 subgoal):\n 1. \\<Union> X \\<in> Y", "by (metis cSup_singleton insert_subset)"], ["", "lemma cardinalityOneTheElem: \n  assumes \"card X=1\" \"X \\<subseteq> Y\" \n  shows \"the_elem X \\<in> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_elem X \\<in> Y", "using assms"], ["proof (prove)\nusing this:\n  card X = 1\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. the_elem X \\<in> Y", "by (metis (full_types) insert_subset cardinalityOneTheElemIdentity)"], ["", "lemma lm018: \n  \"(R outside X1) outside X2 = (R outside X2) outside X1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R outside X1) outside X2 = (R outside X2) outside X1", "by (metis outsideOutside sup_commute)"], ["", "subsection \\<open>Ordered relations\\<close>"], ["", "(* note that card \\<^bold>X\\<ge>1 means in Isabelle that X is finite and not empty *)"], ["", "lemma lm019: \n  assumes \"card X\\<ge>1\" \"\\<forall>x\\<in>X. y > x\" \n  shows \"y > Max X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max X < y", "using assms"], ["proof (prove)\nusing this:\n  1 \\<le> card X\n  \\<forall>x\\<in>X. x < y\n\ngoal (1 subgoal):\n 1. Max X < y", "by (metis (poly_guards_query) Max_in One_nat_def card_eq_0_iff lessI not_le)"], ["", "(* assume the function f has a maximum in mx *)"], ["", "lemma lm020: \n  assumes \"finite X\" \"mx \\<in> X\" \"f x < f mx\" \n  shows\"x \\<notin> argmax f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> argmax f X", "using assms not_less"], ["proof (prove)\nusing this:\n  finite X\n  mx \\<in> X\n  f x < f mx\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. x \\<notin> argmax f X", "by fastforce"], ["", "lemma lm021: \n  assumes \"finite X\" \"mx \\<in> X\" \"\\<forall>x \\<in> X-{mx}. f x < f mx\" \n  shows \"argmax f X \\<subseteq> {mx}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax f X \\<subseteq> {mx}", "using assms mk_disjoint_insert"], ["proof (prove)\nusing this:\n  finite X\n  mx \\<in> X\n  \\<forall>x\\<in>X - {mx}. f x < f mx\n  ?a \\<in> ?A \\<Longrightarrow>\n  \\<exists>B. ?A = insert ?a B \\<and> ?a \\<notin> B\n\ngoal (1 subgoal):\n 1. argmax f X \\<subseteq> {mx}", "by force"], ["", "lemma lm022: \n  assumes \"finite X\" \"mx \\<in> X\" \"\\<forall>x \\<in> X-{mx}. f x < f mx\" \n  shows \"argmax f X = {mx}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax f X = {mx}", "using assms lm021"], ["proof (prove)\nusing this:\n  finite X\n  mx \\<in> X\n  \\<forall>x\\<in>X - {mx}. f x < f mx\n  \\<lbrakk>finite ?X; ?mx \\<in> ?X;\n   \\<forall>x\\<in>?X - {?mx}. ?f x < ?f ?mx\\<rbrakk>\n  \\<Longrightarrow> argmax ?f ?X \\<subseteq> {?mx}\n\ngoal (1 subgoal):\n 1. argmax f X = {mx}", "by (metis argmax_non_empty_iff equals0D subset_singletonD)"], ["", "(* The following corollary is essentially the same as lm022, however, is simplifies a proof in UniformTieBreaking.thy *)"], ["", "corollary argmaxProperty: \n  \"(finite X & mx \\<in> X & (\\<forall>aa \\<in> X-{mx}. f aa < f mx)) \\<longrightarrow> argmax f X = {mx}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<and>\n    mx \\<in> X \\<and>\n    (\\<forall>aa\\<in>X - {mx}. f aa < f mx) \\<longrightarrow>\n    argmax f X = {mx}", "using lm022"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?X; ?mx \\<in> ?X;\n   \\<forall>x\\<in>?X - {?mx}. ?f x < ?f ?mx\\<rbrakk>\n  \\<Longrightarrow> argmax ?f ?X = {?mx}\n\ngoal (1 subgoal):\n 1. finite X \\<and>\n    mx \\<in> X \\<and>\n    (\\<forall>aa\\<in>X - {mx}. f aa < f mx) \\<longrightarrow>\n    argmax f X = {mx}", "by metis"], ["", "corollary lm023: \n  assumes \"finite X\" \"mx \\<in> X\" \"\\<forall>x \\<in> X. x \\<noteq> mx \\<longrightarrow> f x < f mx\" \n  shows \"argmax f X = {mx}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax f X = {mx}", "using assms lm022"], ["proof (prove)\nusing this:\n  finite X\n  mx \\<in> X\n  \\<forall>x\\<in>X. x \\<noteq> mx \\<longrightarrow> f x < f mx\n  \\<lbrakk>finite ?X; ?mx \\<in> ?X;\n   \\<forall>x\\<in>?X - {?mx}. ?f x < ?f ?mx\\<rbrakk>\n  \\<Longrightarrow> argmax ?f ?X = {?mx}\n\ngoal (1 subgoal):\n 1. argmax f X = {mx}", "by (metis Diff_iff insertI1)"], ["", "lemma lm024: \n  assumes \"f \\<circ> g = id\" \n  shows \"inj_on g UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj g", "using assms"], ["proof (prove)\nusing this:\n  f \\<circ> g = id\n\ngoal (1 subgoal):\n 1. inj g", "by (metis inj_on_id inj_on_imageI2)"], ["", "(* Note that Pow X is the powerset of X *)"], ["", "lemma lm025: \n  assumes \"inj_on f X\" \n  shows \"inj_on (image f) (Pow X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) f) (Pow X)", "using assms inj_on_image_eq_iff inj_onI PowD"], ["proof (prove)\nusing this:\n  inj_on f X\n  \\<lbrakk>inj_on ?f ?C; ?A \\<subseteq> ?C; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> (?f ` ?A = ?f ` ?B) = (?A = ?B)\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> ?A; y \\<in> ?A; ?f x = ?f y\\<rbrakk>\n      \\<Longrightarrow> x = y) \\<Longrightarrow>\n  inj_on ?f ?A\n  ?A \\<in> Pow ?B \\<Longrightarrow> ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. inj_on ((`) f) (Pow X)", "by (metis (mono_tags, lifting))"], ["", "lemma injectionPowerset: \n  assumes \"inj_on f Y\" \"X \\<subseteq> Y\" \n  shows \"inj_on (image f) (Pow X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) f) (Pow X)", "using assms lm025"], ["proof (prove)\nusing this:\n  inj_on f Y\n  X \\<subseteq> Y\n  inj_on ?f ?X \\<Longrightarrow> inj_on ((`) ?f) (Pow ?X)\n\ngoal (1 subgoal):\n 1. inj_on ((`) f) (Pow X)", "by (metis subset_inj_on)"], ["", "(* the finest possible partition of X, e.g., X = {1, 2, 3} goes to {{1}, {2}, {3}}. *)"], ["", "definition finestpart \n  where \"finestpart X = (%x. {x}) ` X\""], ["", "lemma finestPart: \n  \"finestpart X = {{x}|x . x\\<in>X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finestpart X = {{x} |x. x \\<in> X}", "unfolding finestpart_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. {x}) ` X = {{x} |x. x \\<in> X}", "by blast"], ["", "lemma finestPartUnion: \n  \"X=\\<Union> (finestpart X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = \\<Union> (finestpart X)", "using finestPart"], ["proof (prove)\nusing this:\n  finestpart ?X = {{x} |x. x \\<in> ?X}\n\ngoal (1 subgoal):\n 1. X = \\<Union> (finestpart X)", "by auto"], ["", "lemma lm026: \n  \"Union \\<circ> finestpart = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> \\<circ> finestpart = id", "using finestpart_def finestPartUnion"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n  ?X = \\<Union> (finestpart ?X)\n\ngoal (1 subgoal):\n 1. \\<Union> \\<circ> finestpart = id", "by fastforce"], ["", "lemma lm027: \n  \"inj_on Union (finestpart ` UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on \\<Union> (range finestpart)", "using lm026"], ["proof (prove)\nusing this:\n  \\<Union> \\<circ> finestpart = id\n\ngoal (1 subgoal):\n 1. inj_on \\<Union> (range finestpart)", "by (metis inj_on_id inj_on_imageI)"], ["", "lemma nonEqualitySetOfSets: \n  assumes \"X \\<noteq> Y\" \n  shows \"{{x}| x. x \\<in> X} \\<noteq> {{x}| x. x \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {{x} |x. x \\<in> X} \\<noteq> {{x} |x. x \\<in> Y}", "using assms"], ["proof (prove)\nusing this:\n  X \\<noteq> Y\n\ngoal (1 subgoal):\n 1. {{x} |x. x \\<in> X} \\<noteq> {{x} |x. x \\<in> Y}", "by auto"], ["", "corollary lm028: \n  \"inj_on finestpart UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj finestpart", "using nonEqualitySetOfSets finestPart"], ["proof (prove)\nusing this:\n  ?X \\<noteq> ?Y \\<Longrightarrow>\n  {{x} |x. x \\<in> ?X} \\<noteq> {{x} |x. x \\<in> ?Y}\n  finestpart ?X = {{x} |x. x \\<in> ?X}\n\ngoal (1 subgoal):\n 1. inj finestpart", "by (metis (lifting, no_types) injI)"], ["", "(* E.g. in the following example, with X = {{1}, {1,2}}, x can be {1} and {1,2} and Y is {{1}} and {{1},{2}}, that is, the lefthand and righthand sides evaluate to {{1},{2}} *)"], ["", "lemma unionFinestPart: \n  \"{Y | Y. \\<exists>x.((Y \\<in> finestpart x) \\<and> (x \\<in> X))} = \\<Union>(finestpart`X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Y |Y. \\<exists>x. Y \\<in> finestpart x \\<and> x \\<in> X} =\n    \\<Union> (finestpart ` X)", "by auto"], ["", "(* Now we specialize the previous lemma to the situation where X consists of a relation (that is is a set of pairs) *)"], ["", "lemma rangeSetOfPairs: \n  \"Range {(fst pair, Y)| Y pair. Y \\<in> finestpart (snd pair) & pair \\<in> X} = \n   {Y. \\<exists>x. ((Y \\<in> finestpart x) \\<and> (x \\<in> Range X))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range\n     {(fst pair, Y) |Y pair.\n      Y \\<in> finestpart (snd pair) \\<and> pair \\<in> X} =\n    {Y. \\<exists>x. Y \\<in> finestpart x \\<and> x \\<in> Range X}", "by auto"], ["", "(* Further specialization to a singleton for Y *)"], ["", "lemma setOfPairsEquality: \n  \"{(fst pair, {y})| y pair. y \\<in> snd pair & pair \\<in> X} = \n   {(fst pair, Y)| Y pair. Y \\<in> finestpart (snd pair) & pair \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(fst pair, {y}) |y pair. y \\<in> snd pair \\<and> pair \\<in> X} =\n    {(fst pair, Y) |Y pair.\n     Y \\<in> finestpart (snd pair) \\<and> pair \\<in> X}", "using finestpart_def"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. {(fst pair, {y}) |y pair. y \\<in> snd pair \\<and> pair \\<in> X} =\n    {(fst pair, Y) |Y pair.\n     Y \\<in> finestpart (snd pair) \\<and> pair \\<in> X}", "by fastforce"], ["", "lemma setOfPairs: \n  \"{(fst pair, {y})| y. y \\<in>  snd pair} = \n   {fst pair} \\<times> {{y}| y. y \\<in> snd pair}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(fst pair, {y}) |y. y \\<in> snd pair} =\n    {fst pair} \\<times> {{y} |y. y \\<in> snd pair}", "by fastforce"], ["", "lemma lm029: \n  \"x \\<in> X = ({x} \\<in> finestpart X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> X) = ({x} \\<in> finestpart X)", "using finestpart_def"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. (x \\<in> X) = ({x} \\<in> finestpart X)", "by force"], ["", "lemma pairDifference: \n  \"{(x,X)}-{(x,Y)} = {x}\\<times>({X}-{Y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, X)} - {(x, Y)} = {x} \\<times> ({X} - {Y})", "by blast"], ["", "lemma lm030: \n  assumes \"\\<Union> P = X\" \n  shows \"P \\<subseteq> Pow X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<subseteq> Pow X", "using assms"], ["proof (prove)\nusing this:\n  \\<Union> P = X\n\ngoal (1 subgoal):\n 1. P \\<subseteq> Pow X", "by blast"], ["", "lemma lm031: \n  \"argmax f {x} = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax f {x} = {x}", "by auto"], ["", "lemma sortingSameSet: \n  assumes \"finite X\" \n  shows \"set (sorted_list_of_set X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (sorted_list_of_set X) = X", "using assms"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. set (sorted_list_of_set X) = X", "by simp"], ["", "(* We assume for the next lemma that f has value in numbers, and sum f A is\n   sum f(x) for x in A. *)"], ["", "lemma lm032: \n  assumes \"finite A\" \n  shows \"sum f A = sum f (A \\<inter> B) + sum f (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f A = sum f (A \\<inter> B) + sum f (A - B)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. sum f A = sum f (A \\<inter> B) + sum f (A - B)", "by (metis DiffD2 Int_iff Un_Diff_Int Un_commute finite_Un sum.union_inter_neutral)"], ["", "corollary sumOutside: \n  assumes \"finite g\" \n  shows \"sum f g = sum f (g outside X) + (sum f (g||X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f g = sum f (g outside X) + sum f (g || X)", "unfolding Outside_def restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f g =\n    sum f (g - X \\<times> Range g) + sum f (X \\<times> Range g \\<inter> g)", "using assms add.commute inf_commute lm032"], ["proof (prove)\nusing this:\n  finite g\n  ?a + ?b = ?b + ?a\n  inf ?x ?y = inf ?y ?x\n  finite ?A \\<Longrightarrow>\n  sum ?f ?A = sum ?f (?A \\<inter> ?B) + sum ?f (?A - ?B)\n\ngoal (1 subgoal):\n 1. sum f g =\n    sum f (g - X \\<times> Range g) + sum f (X \\<times> Range g \\<inter> g)", "by (metis)"], ["", "lemma lm033: \n  assumes \"(Domain P \\<subseteq> Domain Q)\" \n  shows \"(P +* Q) = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P +< Q = Q", "unfolding paste_def Outside_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P - Domain Q \\<times> Range P \\<union> Q = Q", "using assms"], ["proof (prove)\nusing this:\n  Domain P \\<subseteq> Domain Q\n\ngoal (1 subgoal):\n 1. P - Domain Q \\<times> Range P \\<union> Q = Q", "by fast"], ["", "lemma lm034: \n  assumes \"(P +* Q=Q)\" \n  shows \"(Domain P \\<subseteq> Domain Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain P \\<subseteq> Domain Q", "using assms paste_def Outside_def"], ["proof (prove)\nusing this:\n  P +< Q = Q\n  ?P +< ?Q = ?P outside Domain ?Q \\<union> ?Q\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. Domain P \\<subseteq> Domain Q", "by blast"], ["", "lemma lm035: \n  \"(Domain P \\<subseteq> Domain Q) = (P +* Q=Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Domain P \\<subseteq> Domain Q) = (P +< Q = Q)", "using lm033 lm034"], ["proof (prove)\nusing this:\n  Domain ?P \\<subseteq> Domain ?Q \\<Longrightarrow> ?P +< ?Q = ?Q\n  ?P +< ?Q = ?Q \\<Longrightarrow> Domain ?P \\<subseteq> Domain ?Q\n\ngoal (1 subgoal):\n 1. (Domain P \\<subseteq> Domain Q) = (P +< Q = Q)", "by metis"], ["", "lemma \n  \"(P||(Domain Q)) +* Q = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P || Domain Q) +< Q = Q", "by (metis Int_lower2 restrictedDomain lm035)"], ["", "lemma lm036: \n  \"P||X   =   P outside (Domain P - X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P || X = P outside (Domain P - X)", "using Outside_def restrict_def"], ["proof (prove)\nusing this:\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n  ?R || ?X = ?X \\<times> Range ?R \\<inter> ?R\n\ngoal (1 subgoal):\n 1. P || X = P outside (Domain P - X)", "by fastforce"], ["", "lemma lm037: \n  \"(P outside X) \\<subseteq>    P || ((Domain P)-X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P outside X \\<subseteq> P || (Domain P - X)", "using lm036 lm016"], ["proof (prove)\nusing this:\n  ?P || ?X = ?P outside (Domain ?P - ?X)\n  ?P || ?X \\<subseteq> ?P || (?X \\<union> ?Y) \\<and>\n  ?P outside ?X \\<subseteq> ?P outside (?X \\<inter> ?Y)\n\ngoal (1 subgoal):\n 1. P outside X \\<subseteq> P || (Domain P - X)", "by (metis Int_commute restrictedDomain outside_reduces_domain)"], ["", "lemma lm038: \n  \"Domain (P outside X) \\<inter> Domain (Q || X) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (P outside X) \\<inter> Domain (Q || X) = {}", "using lm036"], ["proof (prove)\nusing this:\n  ?P || ?X = ?P outside (Domain ?P - ?X)\n\ngoal (1 subgoal):\n 1. Domain (P outside X) \\<inter> Domain (Q || X) = {}", "by (metis Diff_disjoint Domain_empty_iff Int_Diff inf_commute restrictedDomain     \n            outside_reduces_domain restrict_empty)"], ["", "lemma lm039: \n  \"(P outside X) \\<inter> (Q || X) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P outside X \\<inter> Q || X = {}", "using lm038"], ["proof (prove)\nusing this:\n  Domain (?P outside ?X) \\<inter> Domain (?Q || ?X) = {}\n\ngoal (1 subgoal):\n 1. P outside X \\<inter> Q || X = {}", "by fast"], ["", "lemma lm040: \n  \"(P outside (X \\<union> Y)) \\<inter> (Q || X) = {}   &   (P outside X) \\<inter> (Q || (X \\<inter> Z)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P outside (X \\<union> Y) \\<inter> Q || X = {} \\<and>\n    P outside X \\<inter> Q || (X \\<inter> Z) = {}", "using Outside_def restrict_def lm039 lm015"], ["proof (prove)\nusing this:\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n  ?R || ?X = ?X \\<times> Range ?R \\<inter> ?R\n  ?P outside ?X \\<inter> ?Q || ?X = {}\n  ?P || (?X \\<inter> ?Y) \\<subseteq> ?P || ?X \\<and>\n  ?P outside (?X \\<union> ?Y) \\<subseteq> ?P outside ?X\n\ngoal (1 subgoal):\n 1. P outside (X \\<union> Y) \\<inter> Q || X = {} \\<and>\n    P outside X \\<inter> Q || (X \\<inter> Z) = {}", "by fast"], ["", "lemma lm041: \n  \"P outside X    =    P || ((Domain P) - X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P outside X = P || (Domain P - X)", "using Outside_def restrict_def  lm037"], ["proof (prove)\nusing this:\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n  ?R || ?X = ?X \\<times> Range ?R \\<inter> ?R\n  ?P outside ?X \\<subseteq> ?P || (Domain ?P - ?X)\n\ngoal (1 subgoal):\n 1. P outside X = P || (Domain P - X)", "by fast"], ["", "lemma lm042: \n  \"R``(X-Y) = (R||X)``(X-Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` (X - Y) = (R || X) `` (X - Y)", "using restrict_def"], ["proof (prove)\nusing this:\n  ?R || ?X = ?X \\<times> Range ?R \\<inter> ?R\n\ngoal (1 subgoal):\n 1. R `` (X - Y) = (R || X) `` (X - Y)", "by blast"], ["", "(* x is a (non-empty) element of the family XX whose union is a subset of X *)"], ["", "lemma lm043: \n  assumes \"\\<Union> XX \\<subseteq> X\" \"x \\<in> XX\" \"x \\<noteq> {}\" \n  shows \"x \\<inter> X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<inter> X \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  \\<Union> XX \\<subseteq> X\n  x \\<in> XX\n  x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. x \\<inter> X \\<noteq> {}", "by blast"], ["", "(* Note that set converts lists such as L1 into sets. L1 is here a list of lists and l an element, that is, a list. We assume furthermore that f2 is constant function with the fixed 2nd argument N. Then we can convert lists to sets in a canonical way. *)"], ["", "lemma lm044: \n  assumes \"\\<forall>l \\<in> set L1. set L2 = f2 (set l) N\" \n  shows \"set [set L2. l <- L1]  =  {f2 P N| P. P \\<in> set (map set L1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>l. set L2) L1) =\n    {f2 P N |P. P \\<in> set (map set L1)}", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>set L1. set L2 = f2 (set l) N\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>l. set L2) L1) =\n    {f2 P N |P. P \\<in> set (map set L1)}", "by auto"], ["", "(* Two Variants of the previous lemma *)"], ["", "lemma setVsList: \n  assumes \"\\<forall>l \\<in> set (g1 G). set (g2 l N) = f2 (set l) N\" \n  shows \"set [set (g2 l N). l <- (g1 G)]  =  {f2 P N| P. P \\<in> set (map set (g1 G))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>l. set (g2 l N)) (g1 G)) =\n    {f2 P N |P. P \\<in> set (map set (g1 G))}", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>set (g1 G). set (g2 l N) = f2 (set l) N\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>l. set (g2 l N)) (g1 G)) =\n    {f2 P N |P. P \\<in> set (map set (g1 G))}", "by auto"], ["", "lemma lm045: \n  \"(\\<forall>l \\<in> set (g1 G). set (g2 l N) = f2 (set l) N) -->  \n     {f2 P N| P. P \\<in> set (map set (g1 G))} = set [set (g2 l N). l <- g1 G]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>l\\<in>set (g1 G).\n        set (g2 l N) = f2 (set l) N) \\<longrightarrow>\n    {f2 P N |P. P \\<in> set (map set (g1 G))} =\n    set (map (\\<lambda>l. set (g2 l N)) (g1 G))", "by auto"], ["", "lemma lm046: \n  assumes \"X \\<inter> Y  =  {}\" \n  shows \"R``X = (R outside Y)``X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` X = (R outside Y) `` X", "using assms Outside_def Image_def"], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n  ?r `` ?s = {y. \\<exists>x\\<in>?s. (x, y) \\<in> ?r}\n\ngoal (1 subgoal):\n 1. R `` X = (R outside Y) `` X", "by blast"], ["", "lemma lm047: \n  assumes \"(Range P) \\<inter> (Range Q) = {}\" \"runiq (P^-1)\" \"runiq (Q^-1)\" \n  shows \"runiq ((P \\<union> Q)^-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq ((P \\<union> Q)\\<inverse>)", "using assms"], ["proof (prove)\nusing this:\n  Range P \\<inter> Range Q = {}\n  runiq (P\\<inverse>)\n  runiq (Q\\<inverse>)\n\ngoal (1 subgoal):\n 1. runiq ((P \\<union> Q)\\<inverse>)", "by (metis Domain_converse converse_Un disj_Un_runiq)"], ["", "lemma lm048: \n  assumes \"(Range P) \\<inter> (Range Q) = {}\" \"runiq (P^-1)\" \"runiq (Q^-1)\" \n  shows \"runiq ((P +* Q)^-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq ((P +< Q)\\<inverse>)", "using lm047 assms subrel_runiq"], ["proof (prove)\nusing this:\n  \\<lbrakk>Range ?P \\<inter> Range ?Q = {}; runiq (?P\\<inverse>);\n   runiq (?Q\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> runiq ((?P \\<union> ?Q)\\<inverse>)\n  Range P \\<inter> Range Q = {}\n  runiq (P\\<inverse>)\n  runiq (Q\\<inverse>)\n  \\<lbrakk>runiq ?Q; ?P \\<subseteq> ?Q\\<rbrakk> \\<Longrightarrow> runiq ?P\n\ngoal (1 subgoal):\n 1. runiq ((P +< Q)\\<inverse>)", "by (metis converse_converse converse_subset_swap paste_sub_Un)"], ["", "lemma lm049: \n  assumes \"runiq R\" \n  shows \"card (R `` {a}) = 1 \\<longleftrightarrow> a \\<in> Domain R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (R `` {a}) = 1) = (a \\<in> Domain R)", "using assms card_Suc_eq One_nat_def"], ["proof (prove)\nusing this:\n  runiq R\n  (card ?A = Suc ?k) =\n  (\\<exists>b B.\n      ?A = insert b B \\<and>\n      b \\<notin> B \\<and>\n      card B = ?k \\<and> (?k = 0 \\<longrightarrow> B = {}))\n  1 = Suc 0\n\ngoal (1 subgoal):\n 1. (card (R `` {a}) = 1) = (a \\<in> Domain R)", "by (metis Image_within_domain' Suc_neq_Zero assms rightUniqueSetCardinality)"], ["", "(* triples a can be bracket in any way, i.e., (1st, (2nd, 3rd)) \\<rightarrow> ((1st, 2nd), 3rd).*)"], ["", "lemma lm050: \n  \"inj (\\<lambda>a. ((fst a, fst (snd a)), snd (snd a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>a. ((fst a, fst (snd a)), snd (snd a)))", "by (auto intro: injI)"], ["", "lemma lm051: \n  assumes \"finite X\" \"x > Max X\" \n  shows \"x \\<notin> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> X", "using assms Max.coboundedI"], ["proof (prove)\nusing this:\n  finite X\n  Max X < x\n  \\<lbrakk>finite ?A; ?a \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?a \\<le> Max ?A\n\ngoal (1 subgoal):\n 1. x \\<notin> X", "by (metis leD)"], ["", "lemma lm052: \n  assumes \"finite A\" \"A \\<noteq> {}\" \n  shows \"Max (f`A) \\<in> f`A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (f ` A) \\<in> f ` A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (f ` A) \\<in> f ` A", "by (metis Max_in finite_imageI image_is_empty)"], ["", "(* Note that in the following -` means the inverse image of the following set. *)"], ["", "lemma lm053: \n  \"argmax f A \\<subseteq> f -` {Max (f ` A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax f A \\<subseteq> f -` {Max (f ` A)}", "by force"], ["", "lemma lm054: \n  \"argmax f A = A \\<inter> { x . f x = Max (f ` A) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax f A = A \\<inter> {x. f x = Max (f ` A)}", "by auto"], ["", "lemma lm055: \n  \"(x \\<in> argmax f X) = (x \\<in> X & f x = Max (f ` X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> argmax f X) = (x \\<in> X \\<and> f x = Max (f ` X))", "using argmax.simps mem_Collect_eq"], ["proof (prove)\nusing this:\n  argmax ?f ?A = {x \\<in> ?A. ?f x = Max (?f ` ?A)}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. (x \\<in> argmax f X) = (x \\<in> X \\<and> f x = Max (f ` X))", "by (metis (mono_tags, lifting))"], ["", "lemma rangeEmpty: \n  \"Range -` {{}} = {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range -` {{}} = {{}}", "by auto"], ["", "lemma finitePairSecondRange: \n  \"(\\<forall> pair \\<in> R. finite (snd pair)) = (\\<forall> y \\<in> Range R. finite y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>pair\\<in>R. finite (snd pair)) =\n    (\\<forall>y\\<in>Range R. finite y)", "by fastforce"], ["", "lemma lm056: \n  \"fst ` P = snd ` (P^-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` P = snd ` P\\<inverse>", "by force"], ["", "lemma lm057: \n  \"fst pair = snd (flip pair) & snd pair = fst (flip pair)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst pair = snd (flip pair) \\<and> snd pair = fst (flip pair)", "unfolding flip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst pair = snd (snd pair, fst pair) \\<and>\n    snd pair = fst (snd pair, fst pair)", "by simp"], ["", "lemma flip_flip2: \n  \"flip \\<circ> flip   =   id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flip \\<circ> flip = id", "using flip_flip"], ["proof (prove)\nusing this:\n  flip (flip ?tup) = ?tup\n\ngoal (1 subgoal):\n 1. flip \\<circ> flip = id", "by fastforce"], ["", "lemma lm058: \n  \"fst = (snd\\<circ>flip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst = snd \\<circ> flip", "using lm057"], ["proof (prove)\nusing this:\n  fst ?pair = snd (flip ?pair) \\<and> snd ?pair = fst (flip ?pair)\n\ngoal (1 subgoal):\n 1. fst = snd \\<circ> flip", "by fastforce"], ["", "lemma lm059: \n  \"snd = (fst\\<circ>flip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd = fst \\<circ> flip", "using lm057"], ["proof (prove)\nusing this:\n  fst ?pair = snd (flip ?pair) \\<and> snd ?pair = fst (flip ?pair)\n\ngoal (1 subgoal):\n 1. snd = fst \\<circ> flip", "by fastforce"], ["", "lemma lm060: \n  \"inj_on fst P = inj_on (snd\\<circ>flip) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on fst P = inj_on (snd \\<circ> flip) P", "using lm058"], ["proof (prove)\nusing this:\n  fst = snd \\<circ> flip\n\ngoal (1 subgoal):\n 1. inj_on fst P = inj_on (snd \\<circ> flip) P", "by metis"], ["", "lemma lm062: \n  \"inj_on fst P = inj_on snd (P^-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on fst P = inj_on snd (P\\<inverse>)", "using lm060 flip_conv"], ["proof (prove)\nusing this:\n  inj_on fst ?P = inj_on (snd \\<circ> flip) ?P\n  flip ` ?R = ?R\\<inverse>\n\ngoal (1 subgoal):\n 1. inj_on fst P = inj_on snd (P\\<inverse>)", "by (metis converse_converse inj_on_imageI lm059)"], ["", "lemma sumPairsInverse: \n  assumes \"runiq (P^-1)\" \n  shows \"sum (f \\<circ> snd) P = sum f (Range P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f \\<circ> snd) P = sum f (Range P)", "using assms lm062 converse_converse rightUniqueInjectiveOnFirst rightUniqueInjectiveOnFirst\n        sum.reindex snd_eq_Range"], ["proof (prove)\nusing this:\n  runiq (P\\<inverse>)\n  inj_on fst ?P = inj_on snd (?P\\<inverse>)\n  (?r\\<inverse>)\\<inverse> = ?r\n  runiq ?P = inj_on fst ?P\n  runiq ?P = inj_on fst ?P\n  inj_on ?h ?A \\<Longrightarrow> sum ?g (?h ` ?A) = sum (?g \\<circ> ?h) ?A\n  snd ` ?R = Range ?R\n\ngoal (1 subgoal):\n 1. sum (f \\<circ> snd) P = sum f (Range P)", "by metis"], ["", "lemma notEmptyFinestpart: \n  assumes \"X \\<noteq> {}\" \n  shows \"finestpart X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finestpart X \\<noteq> {}", "using assms finestpart_def"], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. finestpart X \\<noteq> {}", "by blast"], ["", "lemma lm063: \n  assumes \"inj_on g X\" \n  shows \"sum f (g`X) = sum (f \\<circ> g) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (g ` X) = sum (f \\<circ> g) X", "using assms"], ["proof (prove)\nusing this:\n  inj_on g X\n\ngoal (1 subgoal):\n 1. sum f (g ` X) = sum (f \\<circ> g) X", "by (metis sum.reindex)"], ["", "lemma functionOnFirstEqualsSecond: \n  assumes \"runiq R\" \"z \\<in> R\" \n  shows \"R,,(fst z) = snd z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R ,, fst z = snd z", "using assms"], ["proof (prove)\nusing this:\n  runiq R\n  z \\<in> R\n\ngoal (1 subgoal):\n 1. R ,, fst z = snd z", "by (metis rightUniquePair surjective_pairing)"], ["", "lemma lm064: \n  assumes \"runiq R\" \n  shows \"sum (toFunction R) (Domain R) = sum snd R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction R) (Domain R) = sum snd R", "using assms toFunction_def sum.reindex_cong functionOnFirstEqualsSecond\n        rightUniqueInjectiveOnFirst"], ["proof (prove)\nusing this:\n  runiq R\n  toFunction ?R = (,,) ?R\n  \\<lbrakk>inj_on ?l ?B; ?A = ?l ` ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g (?l x) = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n  \\<lbrakk>runiq ?R; ?z \\<in> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R ,, fst ?z = snd ?z\n  runiq ?P = inj_on fst ?P\n\ngoal (1 subgoal):\n 1. sum (toFunction R) (Domain R) = sum snd R", "by (metis (no_types) fst_eq_Domain)"], ["", "corollary lm065: \n  assumes \"runiq (f||X)\" \n  shows \"sum (toFunction (f||X)) (X \\<inter> Domain f) = sum snd (f||X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction (f || X)) (X \\<inter> Domain f) = sum snd (f || X)", "using assms lm064"], ["proof (prove)\nusing this:\n  runiq (f || X)\n  runiq ?R \\<Longrightarrow> sum (toFunction ?R) (Domain ?R) = sum snd ?R\n\ngoal (1 subgoal):\n 1. sum (toFunction (f || X)) (X \\<inter> Domain f) = sum snd (f || X)", "by (metis Int_commute restrictedDomain)"], ["", "lemma lm066: \n  \"Range (R outside X) = R``((Domain R) - X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (R outside X) = R `` (Domain R - X)", "by (metis Diff_idemp ImageE Range.intros Range_outside_sub_Image_Domain lm041\n            lm042 order_class.order.antisym subsetI)"], ["", "lemma lm067: \n  \"(R||X) `` X = R``X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R || X) `` X = R `` X", "using Int_absorb doubleRestriction restrictedRange"], ["proof (prove)\nusing this:\n  ?A \\<inter> ?A = ?A\n  (?P || ?X) || ?Y = ?P || (?X \\<inter> ?Y)\n  Range (?P || ?X) = ?P `` ?X\n\ngoal (1 subgoal):\n 1. (R || X) `` X = R `` X", "by metis"], ["", "lemma lm068: \n  assumes \"x \\<in> Domain (f||X)\" \n  shows \"(f||X)``{x} = f``{x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f || X) `` {x} = f `` {x}", "using assms doubleRestriction restrictedRange Int_empty_right Int_iff \n        Int_insert_right_if1 restrictedDomain"], ["proof (prove)\nusing this:\n  x \\<in> Domain (f || X)\n  (?P || ?X) || ?Y = ?P || (?X \\<inter> ?Y)\n  Range (?P || ?X) = ?P `` ?X\n  ?A \\<inter> {} = {}\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  ?a \\<in> ?A \\<Longrightarrow>\n  ?A \\<inter> insert ?a ?B = insert ?a (?A \\<inter> ?B)\n  Domain (?R || ?X) = Domain ?R \\<inter> ?X\n\ngoal (1 subgoal):\n 1. (f || X) `` {x} = f `` {x}", "by metis"], ["", "lemma lm069: \n  assumes \"x \\<in> X \\<inter> Domain f\" \"runiq (f||X)\" \n  shows \"(f||X),,x = f,,x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f || X) ,, x = f ,, x", "using assms doubleRestriction restrictedRange Int_empty_right Int_iff Int_insert_right_if1\n        eval_rel.simps"], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> Domain f\n  runiq (f || X)\n  (?P || ?X) || ?Y = ?P || (?X \\<inter> ?Y)\n  Range (?P || ?X) = ?P `` ?X\n  ?A \\<inter> {} = {}\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  ?a \\<in> ?A \\<Longrightarrow>\n  ?A \\<inter> insert ?a ?B = insert ?a (?A \\<inter> ?B)\n  ?R ,, ?a = the_elem (?R `` {?a})\n\ngoal (1 subgoal):\n 1. (f || X) ,, x = f ,, x", "by metis"], ["", "lemma lm070: \n  assumes \"runiq (f||X)\" \n  shows \"sum (toFunction (f||X)) (X \\<inter> Domain f) = sum (toFunction f) (X \\<inter> Domain f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction (f || X)) (X \\<inter> Domain f) =\n    sum (toFunction f) (X \\<inter> Domain f)", "using assms sum.cong lm069 toFunction_def"], ["proof (prove)\nusing this:\n  runiq (f || X)\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n  \\<lbrakk>?x \\<in> ?X \\<inter> Domain ?f; runiq (?f || ?X)\\<rbrakk>\n  \\<Longrightarrow> (?f || ?X) ,, ?x = ?f ,, ?x\n  toFunction ?R = (,,) ?R\n\ngoal (1 subgoal):\n 1. sum (toFunction (f || X)) (X \\<inter> Domain f) =\n    sum (toFunction f) (X \\<inter> Domain f)", "by metis"], ["", "corollary sumRestrictedToDomainInvariant: \n  assumes \"runiq (f||X)\" \n  shows \"sum (toFunction f) (X \\<inter> Domain f) = sum snd (f||X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction f) (X \\<inter> Domain f) = sum snd (f || X)", "using assms lm065 lm070"], ["proof (prove)\nusing this:\n  runiq (f || X)\n  runiq (?f || ?X) \\<Longrightarrow>\n  sum (toFunction (?f || ?X)) (?X \\<inter> Domain ?f) = sum snd (?f || ?X)\n  runiq (?f || ?X) \\<Longrightarrow>\n  sum (toFunction (?f || ?X)) (?X \\<inter> Domain ?f) =\n  sum (toFunction ?f) (?X \\<inter> Domain ?f)\n\ngoal (1 subgoal):\n 1. sum (toFunction f) (X \\<inter> Domain f) = sum snd (f || X)", "by fastforce"], ["", "corollary sumRestrictedOnFunction: \n  assumes \"runiq (f||X)\" \n  shows \"sum (toFunction (f||X)) (X \\<inter> Domain f) = sum snd (f||X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction (f || X)) (X \\<inter> Domain f) = sum snd (f || X)", "using assms lm064 restrictedDomain Int_commute"], ["proof (prove)\nusing this:\n  runiq (f || X)\n  runiq ?R \\<Longrightarrow> sum (toFunction ?R) (Domain ?R) = sum snd ?R\n  Domain (?R || ?X) = Domain ?R \\<inter> ?X\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n\ngoal (1 subgoal):\n 1. sum (toFunction (f || X)) (X \\<inter> Domain f) = sum snd (f || X)", "by metis"], ["", "lemma cardFinestpart: \n  \"card (finestpart X) = card X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (finestpart X) = card X", "using finestpart_def"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. card (finestpart X) = card X", "by (metis (lifting) card_image inj_on_inverseI the_elem_eq)"], ["", "corollary lm071: \n  \"finestpart {} = {}    &    card \\<circ> finestpart = card\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finestpart {} = {} \\<and> card \\<circ> finestpart = card", "using cardFinestpart finestpart_def"], ["proof (prove)\nusing this:\n  card (finestpart ?X) = card ?X\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. finestpart {} = {} \\<and> card \\<circ> finestpart = card", "by fastforce"], ["", "lemma finiteFinestpart: \n  \"finite (finestpart X) = finite X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (finestpart X) = finite X", "using finestpart_def lm071"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n  finestpart {} = {} \\<and> card \\<circ> finestpart = card\n\ngoal (1 subgoal):\n 1. finite (finestpart X) = finite X", "by (metis card_eq_0_iff empty_is_image finite.simps cardFinestpart)"], ["", "lemma lm072: \n  \"finite \\<circ> finestpart = finite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite \\<circ> finestpart = finite", "using finiteFinestpart"], ["proof (prove)\nusing this:\n  finite (finestpart ?X) = finite ?X\n\ngoal (1 subgoal):\n 1. finite \\<circ> finestpart = finite", "by fastforce"], ["", "lemma finestpartSubset: \n  assumes \"X \\<subseteq> Y\" \n  shows \"finestpart X \\<subseteq> finestpart Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finestpart X \\<subseteq> finestpart Y", "using assms finestpart_def"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. finestpart X \\<subseteq> finestpart Y", "by (metis image_mono)"], ["", "corollary lm073: \n  assumes \"x \\<in> X\" \n  shows \"finestpart x \\<subseteq> finestpart (\\<Union> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finestpart x \\<subseteq> finestpart (\\<Union> X)", "using assms finestpartSubset"], ["proof (prove)\nusing this:\n  x \\<in> X\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  finestpart ?X \\<subseteq> finestpart ?Y\n\ngoal (1 subgoal):\n 1. finestpart x \\<subseteq> finestpart (\\<Union> X)", "by (metis Union_upper)"], ["", "lemma lm074: \n  \"\\<Union> (finestpart ` XX) \\<subseteq> finestpart (\\<Union> XX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (finestpart ` XX) \\<subseteq> finestpart (\\<Union> XX)", "using finestpart_def lm073"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n  ?x \\<in> ?X \\<Longrightarrow>\n  finestpart ?x \\<subseteq> finestpart (\\<Union> ?X)\n\ngoal (1 subgoal):\n 1. \\<Union> (finestpart ` XX) \\<subseteq> finestpart (\\<Union> XX)", "by force"], ["", "lemma lm075: \n  \"\\<Union> (finestpart ` XX) \\<supseteq> finestpart (\\<Union> XX)\" \n  (is \"?L \\<supseteq> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finestpart (\\<Union> XX) \\<subseteq> \\<Union> (finestpart ` XX)", "unfolding finestpart_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. {x}) ` \\<Union> XX\n    \\<subseteq> \\<Union> ((`) (\\<lambda>x. {x}) ` XX)", "using finestpart_def"], ["proof (prove)\nusing this:\n  finestpart ?X = (\\<lambda>x. {x}) ` ?X\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. {x}) ` \\<Union> XX\n    \\<subseteq> \\<Union> ((`) (\\<lambda>x. {x}) ` XX)", "by auto"], ["", "corollary commuteUnionFinestpart: \n  \"\\<Union> (finestpart ` XX) = finestpart (\\<Union> XX)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (finestpart ` XX) = finestpart (\\<Union> XX)", "using lm074 lm075"], ["proof (prove)\nusing this:\n  \\<Union> (finestpart ` ?XX) \\<subseteq> finestpart (\\<Union> ?XX)\n  finestpart (\\<Union> ?XX) \\<subseteq> \\<Union> (finestpart ` ?XX)\n\ngoal (1 subgoal):\n 1. \\<Union> (finestpart ` XX) = finestpart (\\<Union> XX)", "by fast"], ["", "lemma unionImage: \n  assumes \"runiq a\" \n  shows \"{(x, {y})| x y. y \\<in> \\<Union> (a``{x}) & x \\<in> Domain a} = \n         {(x, {y})| x y. y \\<in> a,,x & x \\<in> Domain a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, {y}) |x y. y \\<in> a ,,, x \\<and> x \\<in> Domain a} =\n    {(x, {y}) |x y. y \\<in> a ,, x \\<and> x \\<in> Domain a}", "using assms Image_runiq_eq_eval"], ["proof (prove)\nusing this:\n  runiq a\n  \\<lbrakk>?x \\<in> Domain ?R; runiq ?R\\<rbrakk>\n  \\<Longrightarrow> ?R `` {?x} = {?R ,, ?x}\n\ngoal (1 subgoal):\n 1. {(x, {y}) |x y. y \\<in> a ,,, x \\<and> x \\<in> Domain a} =\n    {(x, {y}) |x y. y \\<in> a ,, x \\<and> x \\<in> Domain a}", "by (metis (lifting, no_types) cSup_singleton)"], ["", "lemma lm076: \n  assumes \"runiq P\" \n  shows \"card (Domain P) = card P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (Domain P) = card P", "using assms rightUniqueInjectiveOnFirst card_image"], ["proof (prove)\nusing this:\n  runiq P\n  runiq ?P = inj_on fst ?P\n  inj_on ?f ?A \\<Longrightarrow> card (?f ` ?A) = card ?A\n\ngoal (1 subgoal):\n 1. card (Domain P) = card P", "by (metis Domain_fst)"], ["", "lemma finiteDomainImpliesFinite: \n  assumes \"runiq f\" \n  shows \"finite (Domain f) = finite f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Domain f) = finite f", "using assms Domain_empty_iff card_eq_0_iff finite.emptyI lm076"], ["proof (prove)\nusing this:\n  runiq f\n  (Domain ?r = {}) = (?r = {})\n  (card ?A = 0) = (?A = {} \\<or> infinite ?A)\n  finite {}\n  runiq ?P \\<Longrightarrow> card (Domain ?P) = card ?P\n\ngoal (1 subgoal):\n 1. finite (Domain f) = finite f", "by metis"], ["", "(* A relation for the sum of all y\\<in>Y of f(x,y) for a fixed x. *)"], ["", "lemma sumCurry: \n  \"sum ((curry f) x) Y = sum f ({x} \\<times> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "let ?f=\"% y. (x, y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "let ?g=\"(curry f) x\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "let ?h=f"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "have \"inj_on ?f Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (Pair x) Y", "by (metis(no_types) Pair_inject inj_onI)"], ["proof (state)\nthis:\n  inj_on (Pair x) Y\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "moreover"], ["proof (state)\nthis:\n  inj_on (Pair x) Y\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "have \"{x} \\<times> Y = ?f ` Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<times> Y = Pair x ` Y", "by fast"], ["proof (state)\nthis:\n  {x} \\<times> Y = Pair x ` Y\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "moreover"], ["proof (state)\nthis:\n  {x} \\<times> Y = Pair x ` Y\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "have \"\\<forall> y. y \\<in> Y \\<longrightarrow> ?g y = ?h (?f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. y \\<in> Y \\<longrightarrow> curry f x y = f (x, y)", "by simp"], ["proof (state)\nthis:\n  \\<forall>y. y \\<in> Y \\<longrightarrow> curry f x y = f (x, y)\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (Pair x) Y\n  {x} \\<times> Y = Pair x ` Y\n  \\<forall>y. y \\<in> Y \\<longrightarrow> curry f x y = f (x, y)", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on (Pair x) Y\n  {x} \\<times> Y = Pair x ` Y\n  \\<forall>y. y \\<in> Y \\<longrightarrow> curry f x y = f (x, y)\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "using sum.reindex_cong"], ["proof (prove)\nusing this:\n  inj_on (Pair x) Y\n  {x} \\<times> Y = Pair x ` Y\n  \\<forall>y. y \\<in> Y \\<longrightarrow> curry f x y = f (x, y)\n  \\<lbrakk>inj_on ?l ?B; ?A = ?l ` ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g (?l x) = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n\ngoal (1 subgoal):\n 1. sum (curry f x) Y = sum f ({x} \\<times> Y)", "by metis"], ["proof (state)\nthis:\n  sum (curry f x) Y = sum f ({x} \\<times> Y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm077: \n  \"sum (%y. f (x,y)) Y = sum f ({x}\\<times>Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>Y. f (x, y)) = sum f ({x} \\<times> Y)", "using sumCurry Sigma_cong curry_def sum.cong"], ["proof (prove)\nusing this:\n  sum (curry ?f ?x) ?Y = sum ?f ({?x} \\<times> ?Y)\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?C x = ?D x\\<rbrakk>\n  \\<Longrightarrow> Sigma ?A ?C = Sigma ?B ?D\n  curry = (\\<lambda>c x y. c (x, y))\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>Y. f (x, y)) = sum f ({x} \\<times> Y)", "by fastforce"], ["", "corollary lm078: \n  assumes \"finite X\" \n  shows \"sum f X = sum f (X-Y) + (sum f (X \\<inter> Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f X = sum f (X - Y) + sum f (X \\<inter> Y)", "using assms Diff_iff IntD2 Un_Diff_Int finite_Un inf_commute sum.union_inter_neutral"], ["proof (prove)\nusing this:\n  finite X\n  (?c \\<in> ?A - ?B) = (?c \\<in> ?A \\<and> ?c \\<notin> ?B)\n  ?c \\<in> ?A \\<inter> ?B \\<Longrightarrow> ?c \\<in> ?B\n  ?A - ?B \\<union> ?A \\<inter> ?B = ?A\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n  inf ?x ?y = inf ?y ?x\n  \\<lbrakk>finite ?A; finite ?B;\n   \\<forall>x\\<in>?A \\<inter> ?B. ?g x = (0::?'a)\\<rbrakk>\n  \\<Longrightarrow> sum ?g (?A \\<union> ?B) = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. sum f X = sum f (X - Y) + sum f (X \\<inter> Y)", "by metis"], ["", "lemma lm079: \n  \"(P +* Q)``(Domain Q\\<inter>X)  =  Q``(Domain Q\\<inter>X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P +< Q) `` (Domain Q \\<inter> X) = Q `` (Domain Q \\<inter> X)", "unfolding paste_def Outside_def Image_def Domain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>Collect\n                        (Domainp (\\<lambda>x xa. (x, xa) \\<in> Q)) \\<inter>\n                       X.\n           (x, y)\n           \\<in> P -\n                 Collect (Domainp (\\<lambda>x xa. (x, xa) \\<in> Q)) \\<times>\n                 Range P \\<union>\n                 Q} =\n    {y. \\<exists>x\\<in>Collect\n                        (Domainp (\\<lambda>x xa. (x, xa) \\<in> Q)) \\<inter>\n                       X.\n           (x, y) \\<in> Q}", "by blast"], ["", "corollary lm080: \n  \"(P +* Q)``(X\\<inter>(Domain Q))  =  Q``X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P +< Q) `` (X \\<inter> Domain Q) = Q `` X", "using Int_commute lm079"], ["proof (prove)\nusing this:\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n  (?P +< ?Q) `` (Domain ?Q \\<inter> ?X) = ?Q `` (Domain ?Q \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. (P +< Q) `` (X \\<inter> Domain Q) = Q `` X", "by (metis lm017)"], ["", "corollary lm081: \n  assumes \"X \\<inter> (Domain Q) = {}\"\n  shows \"(P +* Q) `` X = (P outside (Domain Q))`` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P +< Q) `` X = (P outside Domain Q) `` X", "using assms paste_def"], ["proof (prove)\nusing this:\n  X \\<inter> Domain Q = {}\n  ?P +< ?Q = ?P outside Domain ?Q \\<union> ?Q\n\ngoal (1 subgoal):\n 1. (P +< Q) `` X = (P outside Domain Q) `` X", "by fast"], ["", "lemma lm082: \n  assumes \"X\\<inter>Y = {}\" \n  shows \"(P outside Y)``X=P``X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P outside Y) `` X = P `` X", "using assms Outside_def"], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. (P outside Y) `` X = P `` X", "by blast"], ["", "corollary lm083: \n  assumes \"X\\<inter> (Domain Q) = {}\" \n  shows \"(P +* Q)``X=P``X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P +< Q) `` X = P `` X", "using assms lm081 lm082"], ["proof (prove)\nusing this:\n  X \\<inter> Domain Q = {}\n  ?X \\<inter> Domain ?Q = {} \\<Longrightarrow>\n  (?P +< ?Q) `` ?X = (?P outside Domain ?Q) `` ?X\n  ?X \\<inter> ?Y = {} \\<Longrightarrow> (?P outside ?Y) `` ?X = ?P `` ?X\n\ngoal (1 subgoal):\n 1. (P +< Q) `` X = P `` X", "by metis"], ["", "lemma lm084: \n  assumes \"finite X\" \"finite Y\" \"card(X\\<inter>Y) = card X\" \n  shows \"X \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> Y", "using assms"], ["proof (prove)\nusing this:\n  finite X\n  finite Y\n  card (X \\<inter> Y) = card X\n\ngoal (1 subgoal):\n 1. X \\<subseteq> Y", "by (metis Int_lower1 Int_lower2 card_seteq order_refl)"], ["", "lemma cardinalityIntersectionEquality: \n  assumes \"finite X\" \"finite Y\" \"card X = card Y\" \n  shows \"(card (X\\<inter>Y) = card X)     =    (X = Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (X \\<inter> Y) = card X) = (X = Y)", "using assms lm084"], ["proof (prove)\nusing this:\n  finite X\n  finite Y\n  card X = card Y\n  \\<lbrakk>finite ?X; finite ?Y; card (?X \\<inter> ?Y) = card ?X\\<rbrakk>\n  \\<Longrightarrow> ?X \\<subseteq> ?Y\n\ngoal (1 subgoal):\n 1. (card (X \\<inter> Y) = card X) = (X = Y)", "by (metis card_seteq le_iff_inf order_refl)"], ["", "lemma lm085: (*fixes f::\"'a => 'b\" fixes P::\"'a => bool\" fixes xx::\"'a\"*) \n  assumes \"P xx\" \n  shows \"{(x,f x)| x. P x},,xx   =   f xx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} ,, xx = f xx", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} ,, xx = f xx", "let ?F=\"{(x,f x)| x. P x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} ,, xx = f xx", "let ?X=\"?F``{xx}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} ,, xx = f xx", "have \"?X={f xx}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} `` {xx} = {f xx}", "using Image_def assms"], ["proof (prove)\nusing this:\n  ?r `` ?s = {y. \\<exists>x\\<in>?s. (x, y) \\<in> ?r}\n  P xx\n\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} `` {xx} = {f xx}", "by blast"], ["proof (state)\nthis:\n  {(x, f x) |x. P x} `` {xx} = {f xx}\n\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} ,, xx = f xx", "thus ?thesis"], ["proof (prove)\nusing this:\n  {(x, f x) |x. P x} `` {xx} = {f xx}\n\ngoal (1 subgoal):\n 1. {(x, f x) |x. P x} ,, xx = f xx", "by fastforce"], ["proof (state)\nthis:\n  {(x, f x) |x. P x} ,, xx = f xx\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma graphEqImage: \n  assumes \"x \\<in> X\" \n  shows \"graph X f,,x   =   f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph X f ,, x = f x", "unfolding graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. x \\<in> X} ,, x = f x", "using assms lm085"], ["proof (prove)\nusing this:\n  x \\<in> X\n  ?P ?xx \\<Longrightarrow> {(x, ?f x) |x. ?P x} ,, ?xx = ?f ?xx\n\ngoal (1 subgoal):\n 1. {(x, f x) |x. x \\<in> X} ,, x = f x", "by (metis (mono_tags) Gr_def)"], ["", "lemma lm086: \n  \"Graph f,,x    =    f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph f ,, x = f x", "using UNIV_I graphEqImage lm005"], ["proof (prove)\nusing this:\n  ?x \\<in> UNIV\n  ?x \\<in> ?X \\<Longrightarrow> graph ?X ?f ,, ?x = ?f ?x\n  Graph ?f = graph UNIV ?f\n\ngoal (1 subgoal):\n 1. Graph f ,, x = f x", "by (metis(no_types))"], ["", "lemma lm087: \n  \"toFunction (Graph f)    =    f\"    (is \"?L=_\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "have \"?L x=f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toFunction (Graph f) x = f x", "unfolding toFunction_def lm086"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = f x", "by metis"], ["proof (state)\nthis:\n  toFunction (Graph f) x = f x\n\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "}"], ["proof (state)\nthis:\n  toFunction (Graph f) ?x2 = f ?x2\n\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "thus ?thesis"], ["proof (prove)\nusing this:\n  toFunction (Graph f) ?x2 = f ?x2\n\ngoal (1 subgoal):\n 1. toFunction (Graph f) = f", "by blast"], ["proof (state)\nthis:\n  toFunction (Graph f) = f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm088: \n  \"R outside X \\<subseteq> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R outside X \\<subseteq> R", "by (metis outside_union_restrict subset_Un_eq sup_left_idem)"], ["", "lemma lm089: \n  \"Range(f outside X) \\<supseteq> (Range f)-(f``X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range f - f `` X \\<subseteq> Range (f outside X)", "using Outside_def"], ["proof (prove)\nusing this:\n  ?R outside ?X = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. Range f - f `` X \\<subseteq> Range (f outside X)", "by blast"], ["", "lemma lm090: \n  assumes \"runiq P\" \n  shows \"(P\\<inverse>``((Range P)-Y)) \\<inter> ((P\\<inverse>)``Y)   =   {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P\\<inverse> `` (Range P - Y) \\<inter> P\\<inverse> `` Y = {}", "using assms rightUniqueFunctionAfterInverse"], ["proof (prove)\nusing this:\n  runiq P\n  runiq ?f \\<Longrightarrow> ?f `` ?f\\<inverse> `` ?Y \\<subseteq> ?Y\n\ngoal (1 subgoal):\n 1. P\\<inverse> `` (Range P - Y) \\<inter> P\\<inverse> `` Y = {}", "by blast"], ["", "lemma lm091: \n  assumes \"runiq (P\\<inverse>)\"\n  shows \"(P``((Domain P) - X)) \\<inter> (P``X)  =  {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P `` (Domain P - X) \\<inter> P `` X = {}", "using assms rightUniqueFunctionAfterInverse"], ["proof (prove)\nusing this:\n  runiq (P\\<inverse>)\n  runiq ?f \\<Longrightarrow> ?f `` ?f\\<inverse> `` ?Y \\<subseteq> ?Y\n\ngoal (1 subgoal):\n 1. P `` (Domain P - X) \\<inter> P `` X = {}", "by fast"], ["", "lemma lm092: \n  assumes \"runiq f\" \"runiq (f^-1)\" \n  shows \"Range(f outside X) \\<subseteq> (Range f)-(f``X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (f outside X) \\<subseteq> Range f - f `` X", "using assms Diff_triv lm091 lm066 Diff_iff ImageE Range_iff subsetI"], ["proof (prove)\nusing this:\n  runiq f\n  runiq (f\\<inverse>)\n  ?A \\<inter> ?B = {} \\<Longrightarrow> ?A - ?B = ?A\n  runiq (?P\\<inverse>) \\<Longrightarrow>\n  ?P `` (Domain ?P - ?X) \\<inter> ?P `` ?X = {}\n  Range (?R outside ?X) = ?R `` (Domain ?R - ?X)\n  (?c \\<in> ?A - ?B) = (?c \\<in> ?A \\<and> ?c \\<notin> ?B)\n  \\<lbrakk>?b \\<in> ?r `` ?A;\n   \\<And>x.\n      \\<lbrakk>(x, ?b) \\<in> ?r; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  (?a \\<in> Range ?r) = (\\<exists>y. (y, ?a) \\<in> ?r)\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. Range (f outside X) \\<subseteq> Range f - f `` X", "by metis"], ["", "lemma rangeOutside: \n  assumes \"runiq f\" \"runiq (f^-1)\" \n  shows \"Range(f outside X) = (Range f)-(f``X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (f outside X) = Range f - f `` X", "using assms lm089 lm092"], ["proof (prove)\nusing this:\n  runiq f\n  runiq (f\\<inverse>)\n  Range ?f - ?f `` ?X \\<subseteq> Range (?f outside ?X)\n  \\<lbrakk>runiq ?f; runiq (?f\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> Range (?f outside ?X) \\<subseteq> Range ?f - ?f `` ?X\n\ngoal (1 subgoal):\n 1. Range (f outside X) = Range f - f `` X", "by (metis order_class.order.antisym)"], ["", "(* X and Y are family of sets such that any x and y in X and Y resp. are disjoint. *)"], ["", "lemma unionIntersectionEmpty: \n  \"(\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x\\<inter>y = {}) = ((\\<Union>X)\\<inter>(\\<Union> Y)={})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<inter> y = {}) =\n    (\\<Union> X \\<inter> \\<Union> Y = {})", "by blast"], ["", "lemma setEqualityAsDifference: \n  \"{x}-{y} = {}  =  (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x} - {y} = {}) = (x = y)", "by auto"], ["", "lemma lm093: \n  assumes \"R \\<noteq> {}\" \"Domain R \\<inter> X \\<noteq> {}\" \n  shows \"R``X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` X \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  R \\<noteq> {}\n  Domain R \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. R `` X \\<noteq> {}", "by blast"], ["", "lemma lm095: \n  \"R \\<subseteq> (Domain R) \\<times> (Range R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<subseteq> Domain R \\<times> Range R", "by auto"], ["", "lemma finiteRelationCharacterization: \n  \"(finite (Domain Q) & finite (Range Q)) = finite Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (finite (Domain Q) \\<and> finite (Range Q)) = finite Q", "using rev_finite_subset finite_SigmaI lm095 finite_Domain finite_Range"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  \\<lbrakk>finite ?A;\n   \\<And>a. a \\<in> ?A \\<Longrightarrow> finite (?B a)\\<rbrakk>\n  \\<Longrightarrow> finite (Sigma ?A ?B)\n  ?R \\<subseteq> Domain ?R \\<times> Range ?R\n  finite ?r \\<Longrightarrow> finite (Domain ?r)\n  finite ?r \\<Longrightarrow> finite (Range ?r)\n\ngoal (1 subgoal):\n 1. (finite (Domain Q) \\<and> finite (Range Q)) = finite Q", "by metis"], ["", "lemma familyUnionFiniteEverySetFinite: \n  assumes \"finite (\\<Union> XX)\" \n  shows \"\\<forall>X \\<in> XX. finite X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XX. finite X", "using assms"], ["proof (prove)\nusing this:\n  finite (\\<Union> XX)\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XX. finite X", "by (metis Union_upper finite_subset)"], ["", "lemma lm096: \n  assumes \"runiq f\" \"X \\<subseteq> (f^-1)``Y\" \n  shows \"f``X \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` X \\<subseteq> Y", "using assms rightUniqueFunctionAfterInverse"], ["proof (prove)\nusing this:\n  runiq f\n  X \\<subseteq> f\\<inverse> `` Y\n  runiq ?f \\<Longrightarrow> ?f `` ?f\\<inverse> `` ?Y \\<subseteq> ?Y\n\ngoal (1 subgoal):\n 1. f `` X \\<subseteq> Y", "by (metis Image_mono order_refl subset_trans)"], ["", "lemma lm097: \n  assumes \"y \\<in> f``{x}\" \"runiq f\" \n  shows \"f,,x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ,, x = y", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> f `` {x}\n  runiq f\n\ngoal (1 subgoal):\n 1. f ,, x = y", "by (metis Image_singleton_iff rightUniquePair)"], ["", "subsection \\<open>Indicator function in set-theoretical form.\\<close>"], ["", "abbreviation \n  \"Outside' X f == f outside X\""], ["", "abbreviation \n  \"Chi X Y == (Y \\<times> {0::nat}) +* (X \\<times> {1})\""], ["", "notation Chi (infix \"<||\" 80)"], ["", "abbreviation \n  \"chii X Y == toFunction (X <|| Y)\""], ["", "notation chii (infix \"<|\" 80)"], ["", "(* X is a set and chi X is a function that returns 1 for elements X and 0 else. *)"], ["", "abbreviation \n  \"chi X == indicator X\""], ["", "lemma lm098: \n  \"runiq (X <|| Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (X <|| Y)", "by (rule lm014)"], ["", "lemma lm099: \n  assumes \"x \\<in> X\" \n  shows \"1 \\<in> (X <|| Y) `` {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> (X <|| Y) `` {x}", "using assms toFunction_def paste_def Outside_def runiq_def lm014"], ["proof (prove)\nusing this:\n  x \\<in> X\n  toFunction ?R = (,,) ?R\n  ?P +< ?Q = Outside' (Domain ?Q) ?P \\<union> ?Q\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n  runiq ?R = (\\<forall>X. trivial X \\<longrightarrow> trivial (?R `` X))\n  runiq (?X \\<times> {?x} +< ?Y \\<times> {?y})\n\ngoal (1 subgoal):\n 1. 1 \\<in> (X <|| Y) `` {x}", "by blast"], ["", "lemma lm100: \n  assumes \"x \\<in> Y-X\" \n  shows \"0 \\<in> (X <|| Y) `` {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> (X <|| Y) `` {x}", "using assms toFunction_def paste_def Outside_def runiq_def lm014"], ["proof (prove)\nusing this:\n  x \\<in> Y - X\n  toFunction ?R = (,,) ?R\n  ?P +< ?Q = Outside' (Domain ?Q) ?P \\<union> ?Q\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n  runiq ?R = (\\<forall>X. trivial X \\<longrightarrow> trivial (?R `` X))\n  runiq (?X \\<times> {?x} +< ?Y \\<times> {?y})\n\ngoal (1 subgoal):\n 1. 0 \\<in> (X <|| Y) `` {x}", "by blast"], ["", "lemma lm101: \n  assumes \"x \\<in> X \\<union> Y\" \n  shows \"(X <|| Y),,x = chi X x\" (is \"?L=?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. X <|| Y ,, x = chi X x", "using assms lm014 lm099 lm100 lm097"], ["proof (prove)\nusing this:\n  x \\<in> X \\<union> Y\n  runiq (?X \\<times> {?x} +< ?Y \\<times> {?y})\n  ?x \\<in> ?X \\<Longrightarrow> 1 \\<in> (?X <|| ?Y) `` {?x}\n  ?x \\<in> ?Y - ?X \\<Longrightarrow> 0 \\<in> (?X <|| ?Y) `` {?x}\n  \\<lbrakk>?y \\<in> ?f `` {?x}; runiq ?f\\<rbrakk>\n  \\<Longrightarrow> ?f ,, ?x = ?y\n\ngoal (1 subgoal):\n 1. X <|| Y ,, x = chi X x", "by (metis DiffI Un_iff indicator_simps(1) indicator_simps(2))"], ["", "lemma lm102: \n  assumes \"x \\<in> X \\<union> Y\" \n  shows \"(X <| Y) x = chi X x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X <| Y) x = chi X x", "using assms toFunction_def lm101"], ["proof (prove)\nusing this:\n  x \\<in> X \\<union> Y\n  toFunction ?R = (,,) ?R\n  ?x \\<in> ?X \\<union> ?Y \\<Longrightarrow> ?X <|| ?Y ,, ?x = chi ?X ?x\n\ngoal (1 subgoal):\n 1. (X <| Y) x = chi X x", "by metis"], ["", "corollary lm103: \n  \"sum (X <| Y) (X\\<union>Y) = sum (chi X) (X\\<union>Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) (X \\<union> Y) = sum (chi X) (X \\<union> Y)", "using lm102 sum.cong"], ["proof (prove)\nusing this:\n  ?x \\<in> ?X \\<union> ?Y \\<Longrightarrow> (?X <| ?Y) ?x = chi ?X ?x\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n\ngoal (1 subgoal):\n 1. sum (X <| Y) (X \\<union> Y) = sum (chi X) (X \\<union> Y)", "by metis"], ["", "corollary lm104: \n  assumes \"\\<forall>x\\<in>X. f x = g x\" \n  shows \"sum f X = sum g X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f X = sum g X", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. f x = g x\n\ngoal (1 subgoal):\n 1. sum f X = sum g X", "by (metis (poly_guards_query) sum.cong)"], ["", "corollary lm105: \n  assumes \"\\<forall>x\\<in>X. f x = g x\" \"Y\\<subseteq>X\" \n  shows \"sum f Y = sum g Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f Y = sum g Y", "using assms lm104"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. f x = g x\n  Y \\<subseteq> X\n  \\<forall>x\\<in>?X. ?f x = ?g x \\<Longrightarrow> sum ?f ?X = sum ?g ?X\n\ngoal (1 subgoal):\n 1. sum f Y = sum g Y", "by (metis contra_subsetD)"], ["", "corollary lm106: \n  assumes \"Z \\<subseteq> X \\<union> Y\" \n  shows \"sum (X <| Y) Z = sum (chi X) Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (chi X) Z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (chi X) Z", "have \"\\<forall>x\\<in>Z.(X<|Y) x=(chi X) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Z. (X <| Y) x = chi X x", "using assms lm102 in_mono"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  ?x \\<in> ?X \\<union> ?Y \\<Longrightarrow> (?X <| ?Y) ?x = chi ?X ?x\n  ?A \\<subseteq> ?B \\<Longrightarrow>\n  ?x \\<in> ?A \\<longrightarrow> ?x \\<in> ?B\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Z. (X <| Y) x = chi X x", "by metis"], ["proof (state)\nthis:\n  \\<forall>x\\<in>Z. (X <| Y) x = chi X x\n\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (chi X) Z", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>Z. (X <| Y) x = chi X x\n\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (chi X) Z", "using lm104"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>Z. (X <| Y) x = chi X x\n  \\<forall>x\\<in>?X. ?f x = ?g x \\<Longrightarrow> sum ?f ?X = sum ?g ?X\n\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (chi X) Z", "by blast"], ["proof (state)\nthis:\n  sum (X <| Y) Z = sum (chi X) Z\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm107: \n  \"sum (chi X) (Z - X) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (chi X) (Z - X) = (0::'a)", "by simp"], ["", "corollary lm108: \n  assumes \"Z \\<subseteq> X \\<union> Y\" \n  shows \"sum (X <| Y) (Z - X) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) (Z - X) = 0", "using assms lm107 lm106 Diff_iff in_mono subsetI"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  sum (chi ?X) (?Z - ?X) = (0::?'a)\n  ?Z \\<subseteq> ?X \\<union> ?Y \\<Longrightarrow>\n  sum (?X <| ?Y) ?Z = sum (chi ?X) ?Z\n  (?c \\<in> ?A - ?B) = (?c \\<in> ?A \\<and> ?c \\<notin> ?B)\n  ?A \\<subseteq> ?B \\<Longrightarrow>\n  ?x \\<in> ?A \\<longrightarrow> ?x \\<in> ?B\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. sum (X <| Y) (Z - X) = 0", "by metis"], ["", "corollary lm109: \n  assumes \"finite Z\" \n  shows \"sum (X <| Y) Z    =    sum (X <| Y) (Z - X)   +  (sum (X <| Y) (Z \\<inter> X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (X <| Y) (Z - X) + sum (X <| Y) (Z \\<inter> X)", "using lm078 assms"], ["proof (prove)\nusing this:\n  finite ?X \\<Longrightarrow>\n  sum ?f ?X = sum ?f (?X - ?Y) + sum ?f (?X \\<inter> ?Y)\n  finite Z\n\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (X <| Y) (Z - X) + sum (X <| Y) (Z \\<inter> X)", "by blast"], ["", "corollary lm110: \n  assumes \"Z \\<subseteq> X \\<union> Y\" \"finite Z\" \n  shows \"sum (X <| Y) Z = sum (X <| Y) (Z \\<inter> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (X <| Y) (Z \\<inter> X)", "using assms lm078 lm108 comm_monoid_add_class.add_0"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  finite Z\n  finite ?X \\<Longrightarrow>\n  sum ?f ?X = sum ?f (?X - ?Y) + sum ?f (?X \\<inter> ?Y)\n  ?Z \\<subseteq> ?X \\<union> ?Y \\<Longrightarrow>\n  sum (?X <| ?Y) (?Z - ?X) = 0\n  (0::?'a) + ?a = ?a\n\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = sum (X <| Y) (Z \\<inter> X)", "by metis"], ["", "corollary lm111: \n  assumes \"finite Z\" \n  shows \"sum (chi X) Z = card (X \\<inter> Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (chi X) Z = card (X \\<inter> Z)", "using assms sum_indicator_eq_card"], ["proof (prove)\nusing this:\n  finite Z\n  finite ?A \\<Longrightarrow> sum (chi ?B) ?A = card (?A \\<inter> ?B)\n\ngoal (1 subgoal):\n 1. sum (chi X) Z = card (X \\<inter> Z)", "by (metis Int_commute)"], ["", "corollary lm112: \n  assumes \"Z \\<subseteq> X \\<union> Y\" \"finite Z\" \n  shows \"sum (X <| Y) Z = card (Z \\<inter> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = card (Z \\<inter> X)", "using assms lm111"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  finite Z\n  finite ?Z \\<Longrightarrow> sum (chi ?X) ?Z = card (?X \\<inter> ?Z)\n\ngoal (1 subgoal):\n 1. sum (X <| Y) Z = card (Z \\<inter> X)", "by (metis lm106 sum_indicator_eq_card)"], ["", "corollary subsetCardinality: \n  assumes \"Z \\<subseteq> X \\<union> Y\" \"finite Z\" \n  shows \"(sum (X <| Y) X) - (sum (X <| Y) Z) = card X - card (Z \\<inter> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (X <| Y) X - sum (X <| Y) Z = card X - card (Z \\<inter> X)", "using assms lm112"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  finite Z\n  \\<lbrakk>?Z \\<subseteq> ?X \\<union> ?Y; finite ?Z\\<rbrakk>\n  \\<Longrightarrow> sum (?X <| ?Y) ?Z = card (?Z \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. sum (X <| Y) X - sum (X <| Y) Z = card X - card (Z \\<inter> X)", "by (metis Int_absorb2 Un_upper1 card.infinite equalityE sum.infinite)"], ["", "corollary differenceSumVsCardinality: \n  assumes \"Z \\<subseteq> X \\<union> Y\" \"finite Z\" \n  shows \"int (sum (X <| Y) X) - int (sum (X <| Y) Z) =  int (card X) - int (card (Z \\<inter> X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (sum (X <| Y) X) - int (sum (X <| Y) Z) =\n    int (card X) - int (card (Z \\<inter> X))", "using assms lm112"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  finite Z\n  \\<lbrakk>?Z \\<subseteq> ?X \\<union> ?Y; finite ?Z\\<rbrakk>\n  \\<Longrightarrow> sum (?X <| ?Y) ?Z = card (?Z \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. int (sum (X <| Y) X) - int (sum (X <| Y) Z) =\n    int (card X) - int (card (Z \\<inter> X))", "by (metis Int_absorb2 Un_upper1 card.infinite equalityE sum.infinite)"], ["", "(* type conversion in Isabelle *)"], ["", "lemma lm113: \n  \"int (n::nat) = real n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (int n) = real n", "by simp"], ["", "(* same as differenceSumVsCardinality but for type real *)"], ["", "corollary differenceSumVsCardinalityReal: \n  assumes \"Z\\<subseteq>X\\<union>Y\" \"finite Z\" \n  shows \"real (sum (X <| Y) X) - real (sum (X <| Y) Z) = \n         real (card X) - real (card (Z \\<inter> X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (sum (X <| Y) X) - real (sum (X <| Y) Z) =\n    real (card X) - real (card (Z \\<inter> X))", "using assms lm112"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n  finite Z\n  \\<lbrakk>?Z \\<subseteq> ?X \\<union> ?Y; finite ?Z\\<rbrakk>\n  \\<Longrightarrow> sum (?X <| ?Y) ?Z = card (?Z \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. real (sum (X <| Y) X) - real (sum (X <| Y) Z) =\n    real (card X) - real (card (Z \\<inter> X))", "by (metis Int_absorb2 Un_upper1 card.infinite equalityE sum.infinite)"], ["", "subsection \\<open>Lists\\<close>"], ["", "(* If there is an element in a list satisfying P, then the list of all elements satisfying P is not the empty list *)"], ["", "lemma lm114: \n  assumes \"\\<exists> n \\<in> {0..<size l}. P (l!n)\" \n  shows \"[n. n \\<leftarrow> [0..<size l], P (l!n)] \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>n. if P (l ! n) then [n] else [])\n       [0..<length l]) \\<noteq>\n    []", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{0..<length l}. P (l ! n)\n\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>n. if P (l ! n) then [n] else [])\n       [0..<length l]) \\<noteq>\n    []", "by auto"], ["", "(* Assume ll is an element of list l, then there is an index n such that the n-th entry of l is ll. *)"], ["", "lemma lm115: \n  assumes \"ll \\<in> set (l::'a list)\" \n  shows \"\\<exists> n\\<in> (nth l) -` (set l). ll=l!n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>(!) l -` set l. ll = l ! n", "using assms(1)"], ["proof (prove)\nusing this:\n  ll \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>(!) l -` set l. ll = l ! n", "by (metis in_set_conv_nth vimageI2)"], ["", "(* variant of the above *)"], ["", "lemma lm116: \n  assumes \"ll \\<in> set (l::'a list)\" \n  shows \"\\<exists> n. ll=l!n & n < size l & n >= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. ll = l ! n \\<and> n < length l \\<and> 0 \\<le> n", "using assms in_set_conv_nth"], ["proof (prove)\nusing this:\n  ll \\<in> set l\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. \\<exists>n. ll = l ! n \\<and> n < length l \\<and> 0 \\<le> n", "by (metis le0)"], ["", "(* another variant of the above *)"], ["", "lemma lm117: \n  assumes \"P -` {True} \\<inter> set l \\<noteq> {}\" \n  shows \"\\<exists> n \\<in> {0..<size l}. P (l!n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{0..<length l}. P (l ! n)", "using assms lm116"], ["proof (prove)\nusing this:\n  P -` {True} \\<inter> set l \\<noteq> {}\n  ?ll \\<in> set ?l \\<Longrightarrow>\n  \\<exists>n. ?ll = ?l ! n \\<and> n < length ?l \\<and> 0 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{0..<length l}. P (l ! n)", "by fastforce"], ["", "(* variant of lm114 *)"], ["", "lemma nonEmptyListFiltered: \n  assumes \"P -` {True} \\<inter> set l \\<noteq> {}\" \n  shows \"[n. n \\<leftarrow> [0..<size l], P (l!n)] \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>n. if P (l ! n) then [n] else [])\n       [0..<length l]) \\<noteq>\n    []", "using assms filterpositions2_def lm117 lm114"], ["proof (prove)\nusing this:\n  P -` {True} \\<inter> set l \\<noteq> {}\n  filterpositions2 ?P ?l =\n  concat (map (\\<lambda>n. if ?P (?l ! n) then [n] else []) [0..<length ?l])\n  ?P -` {True} \\<inter> set ?l \\<noteq> {} \\<Longrightarrow>\n  \\<exists>n\\<in>{0..<length ?l}. ?P (?l ! n)\n  \\<exists>n\\<in>{0..<length ?l}. ?P (?l ! n) \\<Longrightarrow>\n  concat\n   (map (\\<lambda>n. if ?P (?l ! n) then [n] else [])\n     [0..<length ?l]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>n. if P (l ! n) then [n] else [])\n       [0..<length l]) \\<noteq>\n    []", "by metis"], ["", "(* take the elements of a list l which are also in a set X then this forms a subset of X intersection with the elements of the list *)"], ["", "lemma lm118: \n  \"(nth l) ` set ([n. n \\<leftarrow> [0..<size l], (%x. x\\<in>X) (l!n)]) \\<subseteq> X\\<inter>set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (!) l `\n    set (concat\n          (map (\\<lambda>n. if l ! n \\<in> X then [n] else [])\n            [0..<length l]))\n    \\<subseteq> X \\<inter> set l", "by force"], ["", "(* variant of the above *)"], ["", "corollary lm119: \n  \"(nth l)` set (filterpositions2 (%x.(x\\<in>X)) l) \\<subseteq> X \\<inter>  set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (!) l ` set (filterpositions2 (\\<lambda>x. x \\<in> X) l)\n    \\<subseteq> X \\<inter> set l", "unfolding filterpositions2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (!) l `\n    set (concat\n          (map (\\<lambda>n. if l ! n \\<in> X then [n] else [])\n            [0..<length l]))\n    \\<subseteq> X \\<inter> set l", "using lm118"], ["proof (prove)\nusing this:\n  (!) ?l `\n  set (concat\n        (map (\\<lambda>n. if ?l ! n \\<in> ?X then [n] else [])\n          [0..<length ?l]))\n  \\<subseteq> ?X \\<inter> set ?l\n\ngoal (1 subgoal):\n 1. (!) l `\n    set (concat\n          (map (\\<lambda>n. if l ! n \\<in> X then [n] else [])\n            [0..<length l]))\n    \\<subseteq> X \\<inter> set l", "by fast"], ["", "lemma lm120: \n  \"(n\\<in>{0..<N}) = ((n::nat) < N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> {0..<N}) = (n < N)", "using atLeast0LessThan lessThan_iff"], ["proof (prove)\nusing this:\n  {0..<?n} = {..<?n}\n  (?i \\<in> {..<?k}) = (?i < ?k)\n\ngoal (1 subgoal):\n 1. (n \\<in> {0..<N}) = (n < N)", "by metis"], ["", "(* If X is a set of indices then the corresponding elements combined are a subset of all the elements of the list. *)"], ["", "lemma lm121: \n  assumes \"X \\<subseteq> {0..<size list}\" \n  shows \"(nth list)`X \\<subseteq> set list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (!) list ` X \\<subseteq> set list", "using assms atLeastLessThan_def atLeast0LessThan lessThan_iff"], ["proof (prove)\nusing this:\n  X \\<subseteq> {0..<length list}\n  {?l..<?u} \\<equiv> {?l..} \\<inter> {..<?u}\n  {0..<?n} = {..<?n}\n  (?i \\<in> {..<?k}) = (?i < ?k)\n\ngoal (1 subgoal):\n 1. (!) list ` X \\<subseteq> set list", "by auto"], ["", "(* The indices of the elements of a list satisfying a predicate P are a subset of all the indices. *)"], ["", "lemma lm122: \n  \"set ([n. n \\<leftarrow> [0..<size l], P (l!n)]) \\<subseteq> {0..<size l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>n. if P (l ! n) then [n] else []) [0..<length l]))\n    \\<subseteq> {0..<length l}", "by force"], ["", "(* variant of the above *)"], ["", "lemma lm123: \n  \"set (filterpositions2 pre list) \\<subseteq> {0..<size list}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filterpositions2 pre list) \\<subseteq> {0..<length list}", "using filterpositions2_def lm122"], ["proof (prove)\nusing this:\n  filterpositions2 ?P ?l =\n  concat (map (\\<lambda>n. if ?P (?l ! n) then [n] else []) [0..<length ?l])\n  set (concat\n        (map (\\<lambda>n. if ?P (?l ! n) then [n] else []) [0..<length ?l]))\n  \\<subseteq> {0..<length ?l}\n\ngoal (1 subgoal):\n 1. set (filterpositions2 pre list) \\<subseteq> {0..<length list}", "by metis"], ["", "subsection \\<open>Computing all the permutations of a list\\<close>"], ["", "abbreviation \n  \"rotateLeft == rotate\""], ["", "abbreviation \n  \"rotateRight n l == rotateLeft (size l - (n mod (size l))) l\""], ["", "(* for n in {0, ..., size l} inserts x in l so that it will have index n in the output*)\n(* note that for other n, the behaviour is not guaranteed to be consistent with that *)"], ["", "abbreviation \n  \"insertAt x l n == rotateRight n (x#(rotateLeft n l))\""], ["", "(* for n in {0,..., fact(size l) - 1 }, \n   perm2 l n gives all and only the possible permutations of l *)"], ["", "fun perm2 where\n  \"perm2 [] = (%n. [])\" | \n  \"perm2 (x#l) = (%n. insertAt x ((perm2 l) (n div (1+size l)))\n                      (n mod (1+size l)))\""], ["", "abbreviation \n  \"takeAll P list == map (nth list) (filterpositions2 P list)\""], ["", "lemma permutationNotEmpty: \n  assumes \"l \\<noteq> []\" \n  shows \"perm2 l n \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm2 l n \\<noteq> []", "using assms perm2.simps(2) rotate_is_Nil_conv"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n  perm2 (?x # ?l) =\n  (\\<lambda>n.\n      rotateLeft\n       (length\n         (?x #\n          rotateLeft (n mod (1 + length ?l))\n           (perm2 ?l (n div (1 + length ?l)))) -\n        n mod (1 + length ?l) mod\n        length\n         (?x #\n          rotateLeft (n mod (1 + length ?l))\n           (perm2 ?l (n div (1 + length ?l)))))\n       (?x #\n        rotateLeft (n mod (1 + length ?l))\n         (perm2 ?l (n div (1 + length ?l)))))\n  (rotateLeft ?n ?xs = []) = (?xs = [])\n\ngoal (1 subgoal):\n 1. perm2 l n \\<noteq> []", "by (metis neq_Nil_conv)"], ["", "lemma lm124: \n  \"set (takeAll P list) = ((nth list) ` set (filterpositions2 P list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeAll P list) = (!) list ` set (filterpositions2 P list)", "by simp"], ["", "corollary listIntersectionWithSet: \n  \"set (takeAll (%x.(x\\<in>X)) l) \\<subseteq>  (X \\<inter> set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeAll (\\<lambda>x. x \\<in> X) l) \\<subseteq> X \\<inter> set l", "using lm119 lm124"], ["proof (prove)\nusing this:\n  (!) ?l ` set (filterpositions2 (\\<lambda>x. x \\<in> ?X) ?l)\n  \\<subseteq> ?X \\<inter> set ?l\n  set (takeAll ?P ?list) = (!) ?list ` set (filterpositions2 ?P ?list)\n\ngoal (1 subgoal):\n 1. set (takeAll (\\<lambda>x. x \\<in> X) l) \\<subseteq> X \\<inter> set l", "by metis"], ["", "corollary lm125: \n  \"set (takeAll P list) \\<subseteq> set list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeAll P list) \\<subseteq> set list", "using lm123 lm124 lm121"], ["proof (prove)\nusing this:\n  set (filterpositions2 ?pre ?list) \\<subseteq> {0..<length ?list}\n  set (takeAll ?P ?list) = (!) ?list ` set (filterpositions2 ?P ?list)\n  ?X \\<subseteq> {0..<length ?list} \\<Longrightarrow>\n  (!) ?list ` ?X \\<subseteq> set ?list\n\ngoal (1 subgoal):\n 1. set (takeAll P list) \\<subseteq> set list", "by metis"], ["", "lemma takeAllSubset:\n  \"set (takeAll (%x. x\\<in> P) list) \\<subseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (takeAll (\\<lambda>x. x \\<in> P) list) \\<subseteq> P", "by (metis Int_subset_iff listIntersectionWithSet)"], ["", "lemma lm126: \n  \"set (insertAt x l n) = {x} \\<union> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rotateLeft\n          (length (x # rotateLeft n l) - n mod length (x # rotateLeft n l))\n          (x # rotateLeft n l)) =\n    {x} \\<union> set l", "by simp"], ["", "lemma lm127: \n  \"\\<forall>n. set (perm2 [] n) = set []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. set (perm2 [] n) = set []", "by simp"], ["", "lemma lm128: \n  assumes \"\\<forall>n. (set (perm2 l n) = set l)\" \n  shows \"set (perm2 (x#l) n) = {x} \\<union> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (perm2 (x # l) n) = {x} \\<union> set l", "using assms lm126"], ["proof (prove)\nusing this:\n  \\<forall>n. set (perm2 l n) = set l\n  set (rotateLeft\n        (length (?x # rotateLeft ?n ?l) -\n         ?n mod length (?x # rotateLeft ?n ?l))\n        (?x # rotateLeft ?n ?l)) =\n  {?x} \\<union> set ?l\n\ngoal (1 subgoal):\n 1. set (perm2 (x # l) n) = {x} \\<union> set l", "by force"], ["", "(* Combining the previous two lemmas we get inductively that the set of elements in a permuted list are the same as the elements in the original list. This is weaker than saying (perm2 l n) is a permutation of l, but suffices for our purposes. *)"], ["", "corollary permutationInvariance: \n   \"\\<forall>n. set (perm2 (l::'a list) n) = set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. set (perm2 l n) = set l", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n. set (perm2 [] n) = set []\n 2. \\<And>a l.\n       \\<forall>n. set (perm2 l n) = set l \\<Longrightarrow>\n       \\<forall>n. set (perm2 (a # l) n) = set (a # l)", "let ?P = \"%l::('a list). (\\<forall>n. set (perm2 l n)  =  set l)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n. set (perm2 [] n) = set []\n 2. \\<And>a l.\n       \\<forall>n. set (perm2 l n) = set l \\<Longrightarrow>\n       \\<forall>n. set (perm2 (a # l) n) = set (a # l)", "show \"?P []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. set (perm2 [] n) = set []", "using lm127"], ["proof (prove)\nusing this:\n  \\<forall>n. set (perm2 [] n) = set []\n\ngoal (1 subgoal):\n 1. \\<forall>n. set (perm2 [] n) = set []", "by force"], ["proof (state)\nthis:\n  \\<forall>n. set (perm2 [] n) = set []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<forall>n. set (perm2 l n) = set l \\<Longrightarrow>\n       \\<forall>n. set (perm2 (a # l) n) = set (a # l)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<forall>n. set (perm2 l n) = set l \\<Longrightarrow>\n       \\<forall>n. set (perm2 (a # l) n) = set (a # l)", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<forall>n. set (perm2 l n) = set l \\<Longrightarrow>\n       \\<forall>n. set (perm2 (a # l) n) = set (a # l)", "assume \"?P l\""], ["proof (state)\nthis:\n  \\<forall>n. set (perm2 l n) = set l\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<forall>n. set (perm2 l n) = set l \\<Longrightarrow>\n       \\<forall>n. set (perm2 (a # l) n) = set (a # l)", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. set (perm2 l n) = set l", "show \"?P (x#l)\""], ["proof (prove)\nusing this:\n  \\<forall>n. set (perm2 l n) = set l\n\ngoal (1 subgoal):\n 1. \\<forall>n. set (perm2 (x # l) n) = set (x # l)", "by force"], ["proof (state)\nthis:\n  \\<forall>n. set (perm2 (x # l) n) = set (x # l)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* variant of listIntersectionWithSet with permutation added *)"], ["", "corollary takeAllPermutation: \n  \"set (perm2 (takeAll (%x.(x\\<in>X)) l) n)  \\<subseteq>  X \\<inter> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (perm2 (takeAll (\\<lambda>x. x \\<in> X) l) n)\n    \\<subseteq> X \\<inter> set l", "using listIntersectionWithSet permutationInvariance"], ["proof (prove)\nusing this:\n  set (takeAll (\\<lambda>x. x \\<in> ?X) ?l) \\<subseteq> ?X \\<inter> set ?l\n  \\<forall>n. set (perm2 ?l n) = set ?l\n\ngoal (1 subgoal):\n 1. set (perm2 (takeAll (\\<lambda>x. x \\<in> X) l) n)\n    \\<subseteq> X \\<inter> set l", "by metis"], ["", "(* \"subList list1 list2\" extracts the components of list1 according to the indices given in list2, e.g.,  \"subList [1::nat,2,3,4] [0,2]\" gives [1,3] *)"], ["", "abbreviation \"subList l xl == map (nth l) (takeAll (%x. x \\<le> size l) xl)\""], ["", "subsection \\<open>A more computable version of @{term toFunction}.\\<close>"], ["", "(* If R is a relation and the image of x is unique then take that, else take the fallback *)"], ["", "abbreviation \"toFunctionWithFallback R fallback == \n              (% x. if (R``{x} = {R,,x}) then (R,,x) else fallback)\""], ["", "notation \n  toFunctionWithFallback (infix \"Else\" 75)"], ["", "abbreviation sum' where\n  \"sum' R X == sum (R Else 0) X\""], ["", "lemma lm129: \n  assumes \"runiq f\" \"x \\<in> Domain f\" \n  shows \"(f Else 0) x = (toFunction f) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f Else (0::'b)) x = toFunction f x", "using assms"], ["proof (prove)\nusing this:\n  runiq f\n  x \\<in> Domain f\n\ngoal (1 subgoal):\n 1. (f Else (0::'b)) x = toFunction f x", "by (metis Image_runiq_eq_eval toFunction_def)"], ["", "lemma lm130: \n  assumes \"runiq f\" \n  shows \"sum (f Else 0) (X\\<inter>(Domain f))  =  sum (toFunction f) (X\\<inter>(Domain f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) =\n    sum (toFunction f) (X \\<inter> Domain f)", "using assms sum.cong lm129"], ["proof (prove)\nusing this:\n  runiq f\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n  \\<lbrakk>runiq ?f; ?x \\<in> Domain ?f\\<rbrakk>\n  \\<Longrightarrow> (?f Else (0::?'b)) ?x = toFunction ?f ?x\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) =\n    sum (toFunction f) (X \\<inter> Domain f)", "by fastforce"], ["", "lemma lm131: \n  assumes \"Y \\<subseteq> f-`{0}\" \n  shows \"sum f Y  =  0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f Y = (0::'b)", "using assms"], ["proof (prove)\nusing this:\n  Y \\<subseteq> f -` {0::'b}\n\ngoal (1 subgoal):\n 1. sum f Y = (0::'b)", "by (metis rev_subsetD sum.neutral vimage_singleton_eq)"], ["", "lemma lm132: \n  assumes \"Y \\<subseteq> f-`{0}\" \"finite X\" \n  shows \"sum f X = sum f (X-Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f X = sum f (X - Y)", "using Int_lower2 add.comm_neutral assms(1) assms(2) lm078 lm131 order_trans"], ["proof (prove)\nusing this:\n  ?A \\<inter> ?B \\<subseteq> ?B\n  ?a + (0::?'a) = ?a\n  Y \\<subseteq> f -` {0::'b}\n  finite X\n  finite ?X \\<Longrightarrow>\n  sum ?f ?X = sum ?f (?X - ?Y) + sum ?f (?X \\<inter> ?Y)\n  ?Y \\<subseteq> ?f -` {0::?'b} \\<Longrightarrow> sum ?f ?Y = (0::?'b)\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. sum f X = sum f (X - Y)", "by (metis (no_types))"], ["", "(* - means the complement of a set. *)"], ["", "lemma lm133: \n  \"-(Domain f) \\<subseteq> (f Else 0)-`{0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - Domain f \\<subseteq> (f Else (0::'b)) -` {0::'b}", "by fastforce"], ["", "corollary lm134: \n  assumes \"finite X\" \n  shows \"sum (f Else 0) X    =   sum (f Else 0) (X\\<inter>Domain f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "have \"X\\<inter>Domain f=X-(-Domain f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> Domain f = X - - Domain f", "by simp"], ["proof (state)\nthis:\n  X \\<inter> Domain f = X - - Domain f\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  X \\<inter> Domain f = X - - Domain f\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "using assms lm133 lm132"], ["proof (prove)\nusing this:\n  X \\<inter> Domain f = X - - Domain f\n  finite X\n  - Domain ?f \\<subseteq> (?f Else (0::?'b)) -` {0::?'b}\n  \\<lbrakk>?Y \\<subseteq> ?f -` {0::?'b}; finite ?X\\<rbrakk>\n  \\<Longrightarrow> sum ?f ?X = sum ?f (?X - ?Y)\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "by fastforce"], ["proof (state)\nthis:\n  MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm135: \n  assumes \"finite X\" \n  shows \"sum (f Else 0) (X\\<inter>Domain f)   =   sum (f Else 0) X\"\n  (is \"?L=?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "have \"?R=?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "using assms"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)", "by (rule lm134)"], ["proof (state)\nthis:\n  MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "thus ?thesis"], ["proof (prove)\nusing this:\n  MiscTools.sum' f X = MiscTools.sum' f (X \\<inter> Domain f)\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "by simp"], ["proof (state)\nthis:\n  MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm136: \n  assumes \"finite X\" \"runiq f\" \n  shows \"sum (f Else 0) X = sum (toFunction f) (X\\<inter>Domain f)\" \n  (is \"?L=?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)", "have \"?R = sum (f Else 0) (X\\<inter>Domain f) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction f) (X \\<inter> Domain f) =\n    MiscTools.sum' f (X \\<inter> Domain f)", "using assms(2) lm130"], ["proof (prove)\nusing this:\n  runiq f\n  runiq ?f \\<Longrightarrow>\n  MiscTools.sum' ?f (?X \\<inter> Domain ?f) =\n  sum (toFunction ?f) (?X \\<inter> Domain ?f)\n\ngoal (1 subgoal):\n 1. sum (toFunction f) (X \\<inter> Domain f) =\n    MiscTools.sum' f (X \\<inter> Domain f)", "by fastforce"], ["proof (state)\nthis:\n  sum (toFunction f) (X \\<inter> Domain f) =\n  MiscTools.sum' f (X \\<inter> Domain f)\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)", "moreover"], ["proof (state)\nthis:\n  sum (toFunction f) (X \\<inter> Domain f) =\n  MiscTools.sum' f (X \\<inter> Domain f)\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)", "have \"... = ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "using assms(1)"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "by (rule lm135)"], ["proof (state)\nthis:\n  MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)", "ultimately"], ["proof (chain)\npicking this:\n  sum (toFunction f) (X \\<inter> Domain f) =\n  MiscTools.sum' f (X \\<inter> Domain f)\n  MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X", "show ?thesis"], ["proof (prove)\nusing this:\n  sum (toFunction f) (X \\<inter> Domain f) =\n  MiscTools.sum' f (X \\<inter> Domain f)\n  MiscTools.sum' f (X \\<inter> Domain f) = MiscTools.sum' f X\n\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)", "by presburger"], ["proof (state)\nthis:\n  MiscTools.sum' f X = sum (toFunction f) (X \\<inter> Domain f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm137: \n  \"sum (f Else 0) X = sum' f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MiscTools.sum' f X = MiscTools.sum' f X", "by fast"], ["", "corollary lm138: \n  assumes \"finite X\" \"runiq f\" \n  shows \"sum (toFunction f) (X\\<inter>Domain f)   =   sum' f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (toFunction f) (X \\<inter> Domain f) = MiscTools.sum' f X", "using assms lm137 lm136"], ["proof (prove)\nusing this:\n  finite X\n  runiq f\n  MiscTools.sum' ?f ?X = MiscTools.sum' ?f ?X\n  \\<lbrakk>finite ?X; runiq ?f\\<rbrakk>\n  \\<Longrightarrow> MiscTools.sum' ?f ?X =\n                    sum (toFunction ?f) (?X \\<inter> Domain ?f)\n\ngoal (1 subgoal):\n 1. sum (toFunction f) (X \\<inter> Domain f) = MiscTools.sum' f X", "by fastforce"], ["", "lemma lm139: \n  \"argmax (sum' b) = (argmax \\<circ> sum') b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. argmax (MiscTools.sum' b) = (argmax \\<circ> MiscTools.sum') b", "by simp"], ["", "lemma domainConstant: \n  \"Domain (Y \\<times> {0::nat}) = Y & Domain (X \\<times> {1}) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (Y \\<times> {0}) = Y \\<and> Domain (X \\<times> {1::'c}) = X", "by blast"], ["", "lemma domainCharacteristicFunction: \n  \"Domain (X <|| Y) = X \\<union> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (X <|| Y) = X \\<union> Y", "using domainConstant paste_Domain sup_commute"], ["proof (prove)\nusing this:\n  Domain (?Y \\<times> {0}) = ?Y \\<and> Domain (?X \\<times> {1::?'c}) = ?X\n  Domain (?P +< ?Q) = Domain ?P \\<union> Domain ?Q\n  sup ?x ?y = sup ?y ?x\n\ngoal (1 subgoal):\n 1. Domain (X <|| Y) = X \\<union> Y", "by metis"], ["", "lemma functionEquivalenceOnSets: \n  assumes \"\\<forall>x \\<in> X. f x = g x\" \n  shows \"f`X = g`X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` X = g ` X", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. f x = g x\n\ngoal (1 subgoal):\n 1. f ` X = g ` X", "by (metis image_cong)"], ["", "subsection \\<open>Cardinalities of sets.\\<close>"], ["", "lemma lm140: \n  assumes \"runiq R\" \"runiq (R^-1)\" \n  shows \"(R``A) \\<inter> (R``B) = R``(A\\<inter>B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` A \\<inter> R `` B = R `` (A \\<inter> B)", "using assms rightUniqueInjectiveOnFirst converse_Image"], ["proof (prove)\nusing this:\n  runiq R\n  runiq (R\\<inverse>)\n  runiq ?P = inj_on fst ?P\n  \\<lbrakk>runiq ?R; runiq (?R\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> ?R\\<inverse> `` ?R `` ?X \\<subseteq> ?X\n\ngoal (1 subgoal):\n 1. R `` A \\<inter> R `` B = R `` (A \\<inter> B)", "by force"], ["", "lemma intersectionEmptyRelationIntersectionEmpty: \n  assumes \"runiq (R^-1)\" \"runiq R\" \"X1 \\<inter> X2 = {}\" \n  shows \"(R``X1) \\<inter> (R``X2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` X1 \\<inter> R `` X2 = {}", "using assms"], ["proof (prove)\nusing this:\n  runiq (R\\<inverse>)\n  runiq R\n  X1 \\<inter> X2 = {}\n\ngoal (1 subgoal):\n 1. R `` X1 \\<inter> R `` X2 = {}", "by (metis disj_Domain_imp_disj_Image inf_assoc inf_bot_right)"], ["", "lemma lm141: \n  assumes \"runiq f\" \"trivial Y\" \n  shows \"trivial (f `` (f^-1 `` Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trivial (f `` f\\<inverse> `` Y)", "using assms"], ["proof (prove)\nusing this:\n  runiq f\n  trivial Y\n\ngoal (1 subgoal):\n 1. trivial (f `` f\\<inverse> `` Y)", "by (metis rightUniqueFunctionAfterInverse trivial_subset)"], ["", "lemma lm142: \n  assumes \"trivial X\" \n  shows \"card (Pow X)\\<in>{1,2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (Pow X) \\<in> {1, 2}", "using trivial_empty_or_singleton card_Pow Pow_empty assms trivial_implies_finite\n        cardinalityOneTheElemIdentity power_one_right the_elem_eq"], ["proof (prove)\nusing this:\n  trivial ?X = (?X = {} \\<or> ?X = {the_elem ?X})\n  finite ?A \\<Longrightarrow> card (Pow ?A) = 2 ^ card ?A\n  Pow {} = {{}}\n  trivial X\n  trivial ?X \\<Longrightarrow> finite ?X\n  (card ?X = 1) = (?X = {the_elem ?X})\n  ?a ^ 1 = ?a\n  the_elem {?x} = ?x\n\ngoal (1 subgoal):\n 1. card (Pow X) \\<in> {1, 2}", "by (metis insert_iff)"], ["", "lemma lm143: \n  assumes \"card (Pow A) = 1\" \n  shows \"A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = {}", "using assms"], ["proof (prove)\nusing this:\n  card (Pow A) = 1\n\ngoal (1 subgoal):\n 1. A = {}", "by (metis Pow_bottom Pow_top cardinalityOneTheElemIdentity singletonD)"], ["", "(* Note that in Isabelle infinite sets have cardinality 0 *)"], ["", "lemma lm144: \n  \"(\\<not> (finite A)) = (card (Pow A) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite A = (card (Pow A) = 0)", "by auto"], ["", "corollary lm145: \n  \"(finite A) = (card (Pow A) \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A = (card (Pow A) \\<noteq> 0)", "using lm144"], ["proof (prove)\nusing this:\n  infinite ?A = (card (Pow ?A) = 0)\n\ngoal (1 subgoal):\n 1. finite A = (card (Pow A) \\<noteq> 0)", "by metis"], ["", "lemma lm146: \n  assumes \"card (Pow A) \\<noteq> 0\" \n  shows \"card A=Discrete.log (card (Pow A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A = Discrete.log (card (Pow A))", "using assms log_exp card_Pow"], ["proof (prove)\nusing this:\n  card (Pow A) \\<noteq> 0\n  Discrete.log (2 ^ ?n) = ?n\n  finite ?A \\<Longrightarrow> card (Pow ?A) = 2 ^ card ?A\n\ngoal (1 subgoal):\n 1. card A = Discrete.log (card (Pow A))", "by (metis card.infinite finite_Pow_iff)"], ["", "lemma log_2 [simp]:\n  \"Discrete.log 2 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Discrete.log 2 = 1", "using log_exp [of 1]"], ["proof (prove)\nusing this:\n  Discrete.log (2 ^ 1) = 1\n\ngoal (1 subgoal):\n 1. Discrete.log 2 = 1", "by simp"], ["", "lemma lm147: \n  assumes \"card (Pow A) = 2\" \n  shows \"card A = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A = 1", "using assms lm146 [of A]"], ["proof (prove)\nusing this:\n  card (Pow A) = 2\n  card (Pow A) \\<noteq> 0 \\<Longrightarrow>\n  card A = Discrete.log (card (Pow A))\n\ngoal (1 subgoal):\n 1. card A = 1", "by simp"], ["", "lemma lm148: \n  assumes \"card (Pow X) = 1 \\<or> card (Pow X) = 2\" \n  shows \"trivial X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trivial X", "using assms trivial_empty_or_singleton lm143 lm147 cardinalityOneTheElemIdentity"], ["proof (prove)\nusing this:\n  card (Pow X) = 1 \\<or> card (Pow X) = 2\n  trivial ?X = (?X = {} \\<or> ?X = {the_elem ?X})\n  card (Pow ?A) = 1 \\<Longrightarrow> ?A = {}\n  card (Pow ?A) = 2 \\<Longrightarrow> card ?A = 1\n  (card ?X = 1) = (?X = {the_elem ?X})\n\ngoal (1 subgoal):\n 1. trivial X", "by metis"], ["", "lemma lm149: \n  \"trivial A = (card (Pow A) \\<in> {1,2})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trivial A = (card (Pow A) \\<in> {1, 2})", "using lm148 lm142"], ["proof (prove)\nusing this:\n  card (Pow ?X) = 1 \\<or> card (Pow ?X) = 2 \\<Longrightarrow> trivial ?X\n  trivial ?X \\<Longrightarrow> card (Pow ?X) \\<in> {1, 2}\n\ngoal (1 subgoal):\n 1. trivial A = (card (Pow A) \\<in> {1, 2})", "by blast"], ["", "lemma lm150: \n  assumes \"R \\<subseteq> f\" \"runiq f\" \"Domain f = Domain R\" \n  shows \"runiq R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq R", "using assms"], ["proof (prove)\nusing this:\n  R \\<subseteq> f\n  runiq f\n  Domain f = Domain R\n\ngoal (1 subgoal):\n 1. runiq R", "by (metis subrel_runiq)"], ["", "lemma lm151: \n  assumes \"f \\<subseteq> g\" \"runiq g\" \"Domain f = Domain g\" \n  shows \"g \\<subseteq> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<subseteq> f", "using assms Domain_iff contra_subsetD runiq_wrt_ex1 subrelI"], ["proof (prove)\nusing this:\n  f \\<subseteq> g\n  runiq g\n  Domain f = Domain g\n  (?a \\<in> Domain ?r) = (\\<exists>y. (?a, y) \\<in> ?r)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n  runiq ?R = (\\<forall>a\\<in>Domain ?R. \\<exists>!b. (a, b) \\<in> ?R)\n  (\\<And>x y.\n      (x, y) \\<in> ?r \\<Longrightarrow> (x, y) \\<in> ?s) \\<Longrightarrow>\n  ?r \\<subseteq> ?s\n\ngoal (1 subgoal):\n 1. g \\<subseteq> f", "by (metis (full_types,hide_lams))"], ["", "lemma lm152: \n  assumes \"R \\<subseteq> f\" \"runiq f\" \"Domain f \\<subseteq> Domain R\" \n  shows \"f = R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = R", "using assms lm151"], ["proof (prove)\nusing this:\n  R \\<subseteq> f\n  runiq f\n  Domain f \\<subseteq> Domain R\n  \\<lbrakk>?f \\<subseteq> ?g; runiq ?g; Domain ?f = Domain ?g\\<rbrakk>\n  \\<Longrightarrow> ?g \\<subseteq> ?f\n\ngoal (1 subgoal):\n 1. f = R", "by (metis Domain_mono dual_order.antisym)"], ["", "lemma lm153: \n  \"graph X f = (Graph f) || X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph X f = Graph f || X", "using inf_top.left_neutral lm005 domainOfGraph restrictedDomain lm152 graphIntersection\n        restriction_is_subrel subrel_runiq subset_iff"], ["proof (prove)\nusing this:\n  inf top ?a = ?a\n  Graph ?f = graph UNIV ?f\n  runiq (graph ?X ?f) \\<and> Domain (graph ?X ?f) = ?X\n  Domain (?R || ?X) = Domain ?R \\<inter> ?X\n  \\<lbrakk>?R \\<subseteq> ?f; runiq ?f;\n   Domain ?f \\<subseteq> Domain ?R\\<rbrakk>\n  \\<Longrightarrow> ?f = ?R\n  graph (?X \\<inter> ?Y) ?f \\<subseteq> graph ?X ?f || ?Y\n  ?P || ?X \\<subseteq> ?P\n  \\<lbrakk>runiq ?Q; ?P \\<subseteq> ?Q\\<rbrakk> \\<Longrightarrow> runiq ?P\n  (?A \\<subseteq> ?B) =\n  (\\<forall>t. t \\<in> ?A \\<longrightarrow> t \\<in> ?B)\n\ngoal (1 subgoal):\n 1. graph X f = Graph f || X", "by (metis (erased, lifting))"], ["", "lemma lm154: \n  \"graph (X \\<inter> Y) f = (graph X f) || Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (X \\<inter> Y) f = graph X f || Y", "using doubleRestriction lm153"], ["proof (prove)\nusing this:\n  (?P || ?X) || ?Y = ?P || (?X \\<inter> ?Y)\n  graph ?X ?f = Graph ?f || ?X\n\ngoal (1 subgoal):\n 1. graph (X \\<inter> Y) f = graph X f || Y", "by metis"], ["", "lemma restrictionVsIntersection:\n  \"{(x, f x)| x. x \\<in> X2} || X1 = {(x, f x)| x. x \\<in> X2 \\<inter> X1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. x \\<in> X2} || X1 = {(x, f x) |x. x \\<in> X2 \\<inter> X1}", "using graph_def lm154"], ["proof (prove)\nusing this:\n  graph ?X ?f = {(x, ?f x) |x. x \\<in> ?X}\n  graph (?X \\<inter> ?Y) ?f = graph ?X ?f || ?Y\n\ngoal (1 subgoal):\n 1. {(x, f x) |x. x \\<in> X2} || X1 = {(x, f x) |x. x \\<in> X2 \\<inter> X1}", "by metis"], ["", "lemma lm155: \n  assumes \"runiq f\" \"X \\<subseteq> Domain f\" \n  shows \"graph X (toFunction f) = (f||X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph X (toFunction f) = f || X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. graph X (toFunction f) = f || X", "have \"\\<And>v w. (v::'a set) \\<subseteq> w \\<longrightarrow> w \\<inter> v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v w. v \\<subseteq> w \\<longrightarrow> w \\<inter> v = v", "by (simp add: Int_commute inf.absorb1)"], ["proof (state)\nthis:\n  ?v \\<subseteq> ?w \\<longrightarrow> ?w \\<inter> ?v = ?v\n\ngoal (1 subgoal):\n 1. graph X (toFunction f) = f || X", "thus \"graph X (toFunction f) = f || X\""], ["proof (prove)\nusing this:\n  ?v \\<subseteq> ?w \\<longrightarrow> ?w \\<inter> ?v = ?v\n\ngoal (1 subgoal):\n 1. graph X (toFunction f) = f || X", "by (metis assms(1) assms(2) doubleRestriction lm004 lm153)"], ["proof (state)\nthis:\n  graph X (toFunction f) = f || X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm156: \n  \"(Graph f) `` X = f ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Graph f `` X = f ` X", "unfolding Graph_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, f x) |x. True} `` X = {y. \\<exists>x\\<in>X. y = f x}", "by auto"], ["", "lemma lm157: \n  assumes \"X \\<subseteq> Domain f\" \"runiq f\" \n  shows \"f``X = (eval_rel f)`X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` X = (,,) f ` X", "using assms lm156"], ["proof (prove)\nusing this:\n  X \\<subseteq> Domain f\n  runiq f\n  Graph ?f `` ?X = ?f ` ?X\n\ngoal (1 subgoal):\n 1. f `` X = (,,) f ` X", "by (metis restrictedRange lm153 lm155 toFunction_def)"], ["", "lemma cardOneImageCardOne: \n  assumes \"card A = 1\" \n  shows \"card (f`A) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f ` A) = 1", "using assms card_image card_image_le"], ["proof (prove)\nusing this:\n  card A = 1\n  inj_on ?f ?A \\<Longrightarrow> card (?f ` ?A) = card ?A\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n\ngoal (1 subgoal):\n 1. card (f ` A) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 1;\n     \\<And>f A. inj_on f A \\<Longrightarrow> card (f ` A) = card A;\n     \\<And>A f.\n        finite A \\<Longrightarrow> card (f ` A) \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> card (f ` A) = 1", "have \"finite (f`A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (f ` A)", "using assms One_nat_def Suc_not_Zero card.infinite finite_imageI"], ["proof (prove)\nusing this:\n  card A = 1\n  1 = Suc 0\n  Suc ?m \\<noteq> 0\n  infinite ?A \\<Longrightarrow> card ?A = 0\n  finite ?F \\<Longrightarrow> finite (?h ` ?F)\n\ngoal (1 subgoal):\n 1. finite (f ` A)", "by (metis(no_types))"], ["proof (state)\nthis:\n  finite (f ` A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 1;\n     \\<And>f A. inj_on f A \\<Longrightarrow> card (f ` A) = card A;\n     \\<And>A f.\n        finite A \\<Longrightarrow> card (f ` A) \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> card (f ` A) = 1", "moreover"], ["proof (state)\nthis:\n  finite (f ` A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 1;\n     \\<And>f A. inj_on f A \\<Longrightarrow> card (f ` A) = card A;\n     \\<And>A f.\n        finite A \\<Longrightarrow> card (f ` A) \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> card (f ` A) = 1", "have \"f`A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` A \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  card A = 1\n\ngoal (1 subgoal):\n 1. f ` A \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  f ` A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 1;\n     \\<And>f A. inj_on f A \\<Longrightarrow> card (f ` A) = card A;\n     \\<And>A f.\n        finite A \\<Longrightarrow> card (f ` A) \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> card (f ` A) = 1", "moreover"], ["proof (state)\nthis:\n  f ` A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 1;\n     \\<And>f A. inj_on f A \\<Longrightarrow> card (f ` A) = card A;\n     \\<And>A f.\n        finite A \\<Longrightarrow> card (f ` A) \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> card (f ` A) = 1", "have \"card (f`A) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f ` A) \\<le> 1", "using assms card_image_le One_nat_def Suc_not_Zero card.infinite"], ["proof (prove)\nusing this:\n  card A = 1\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n  1 = Suc 0\n  Suc ?m \\<noteq> 0\n  infinite ?A \\<Longrightarrow> card ?A = 0\n\ngoal (1 subgoal):\n 1. card (f ` A) \\<le> 1", "by (metis)"], ["proof (state)\nthis:\n  card (f ` A) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 1;\n     \\<And>f A. inj_on f A \\<Longrightarrow> card (f ` A) = card A;\n     \\<And>A f.\n        finite A \\<Longrightarrow> card (f ` A) \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> card (f ` A) = 1", "ultimately"], ["proof (chain)\npicking this:\n  finite (f ` A)\n  f ` A \\<noteq> {}\n  card (f ` A) \\<le> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (f ` A)\n  f ` A \\<noteq> {}\n  card (f ` A) \\<le> 1\n\ngoal (1 subgoal):\n 1. card (f ` A) = 1", "by (metis assms image_empty image_insert \n                                    cardinalityOneTheElemIdentity the_elem_eq)"], ["proof (state)\nthis:\n  card (f ` A) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cardOneTheElem: \n  assumes \"card A = 1\" \n  shows \"the_elem (f`A) = f (the_elem A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_elem (f ` A) = f (the_elem A)", "using assms image_empty image_insert the_elem_eq"], ["proof (prove)\nusing this:\n  card A = 1\n  ?f ` {} = {}\n  ?f ` insert ?a ?B = insert (?f ?a) (?f ` ?B)\n  the_elem {?x} = ?x\n\ngoal (1 subgoal):\n 1. the_elem (f ` A) = f (the_elem A)", "by (metis cardinalityOneTheElemIdentity)"], ["", "(* With split being the inverse of curry we have with g as swap f,  (g x y) = (f y x) *)"], ["", "abbreviation \n  \"swap f == curry ((case_prod f) \\<circ> flip)\""], ["", "(*swaps the two arguments of a function*)\n\n(* X is finite if and only if X is the set of elements of some list. *)"], ["", "lemma lm158: \n  \"finite X   =  (X \\<in> range set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X = (X \\<in> range set)", "by (metis List.finite_set finite_list image_iff rangeI)"], ["", "(* as above, just as lambda expression *)"], ["", "lemma lm159: \n  \"finite = (%X. X\\<in>range set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite = (\\<lambda>X. X \\<in> range set)", "using lm158"], ["proof (prove)\nusing this:\n  finite ?X = (?X \\<in> range set)\n\ngoal (1 subgoal):\n 1. finite = (\\<lambda>X. X \\<in> range set)", "by metis"], ["", "lemma lm160: \n  \"swap f = (%x. %y. f y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swap f = (\\<lambda>x y. f y x)", "by (metis comp_eq_dest_lhs curry_def flip_def fst_conv old.prod.case snd_conv)"], ["", "subsection \\<open>Some easy properties on real numbers\\<close>"], ["", "lemma lm161: \n  fixes a::real \n  fixes b c \n  shows \"a*b - a*c=a*(b-c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b - a * c = a * (b - c)", "by (metis real_scaleR_def real_vector.scale_right_diff_distrib)"], ["", "lemma lm162: \n  fixes a::real \n  fixes b c \n  shows \"a*b - c*b=(a-c)*b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b - c * b = (a - c) * b", "using lm161"], ["proof (prove)\nusing this:\n  ?a * ?b - ?a * ?c = ?a * (?b - ?c)\n\ngoal (1 subgoal):\n 1. a * b - c * b = (a - c) * b", "by (metis mult.commute)"], ["", "end"]]}