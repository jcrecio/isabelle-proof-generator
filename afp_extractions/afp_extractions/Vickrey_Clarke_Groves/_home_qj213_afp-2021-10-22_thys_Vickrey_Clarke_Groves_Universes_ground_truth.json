{"file_name": "/home/qj213/afp-2021-10-22/thys/Vickrey_Clarke_Groves/Universes.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Vickrey_Clarke_Groves", "problem_names": ["lemma lm001: \n  assumes \"Y \\<in> set (all_partitions_alg X)\" \n  shows \"distinct Y\"", "lemma lm002: \n  assumes \"finite G\" \n  shows \"all_partitions G  =  set ` (set (all_partitions_alg G))\"", "lemma \"partitionsUniverse \\<subseteq> Pow UNIV\"", "lemma \"partitionValuedUniverse \\<subseteq> Pow (UNIV \\<times> (Pow UNIV))\"", "lemma lm003: \n  assumes \"\\<forall> x1 \\<in> X. (x1 \\<noteq> {} & (\\<forall> x2 \\<in> X-{x1}. x1 \\<inter> x2  =  {}))\" \n  shows \"is_non_overlapping X\"", "lemma lm004: \n  assumes \"\\<forall>x \\<in> X. f x \\<in> x\" \n  shows \"isChoice (graph X f)\"", "lemma lm006: \"injections X Y \\<subseteq> injectionsUniverse\"", "lemma lm007: \"injections X Y \\<subseteq> injectionsUniverse\"", "lemma lm008: \"injections X Y = totalRels X Y \\<inter> injectionsUniverse\"", "lemma allocationInverseRangeDomainProperty: \n  assumes \"a \\<in> allAllocations N G\" \n  shows  \"a^-1 \\<in> injections (Range a) N & \n          (Range a) partitions G & \n          Domain a \\<subseteq> N\"", "lemma lm009: \n  assumes \"is_non_overlapping XX\" \"YY \\<subseteq> XX\" \n  shows \"(XX - YY) partitions (\\<Union> XX - \\<Union> YY)\"", "lemma allocationRightUniqueRangeDomain: \n  assumes \"a \\<in> possible_allocations_rel G N\" \n  shows \"runiq a & \n         runiq (a\\<inverse>) & \n         (Domain a) partitions G & \n         Range a \\<subseteq> N\"", "lemma lm010: \n  assumes \"runiq a\" \"runiq (a\\<inverse>)\" \"(Domain a) partitions G\" \"Range a \\<subseteq> N\"\n  shows \"a \\<in> possible_allocations_rel G N\"", "lemma allocationProperty: \n  \"a \\<in> possible_allocations_rel G N \\<longleftrightarrow>\n   runiq a & runiq (a\\<inverse>) & (Domain a) partitions G & Range a \\<subseteq> N\"", "lemma lm011: \n  \"possible_allocations_rel' G N \\<subseteq> injectionsUniverse\"", "lemma lm012: \n  \"possible_allocations_rel G N \\<subseteq> {a. (Range a) \\<subseteq> N & (Domain a) \\<in> all_partitions G}\"", "lemma lm013: \n  \"injections X Y = injections X Y\"", "lemma lm014: \n  \"all_partitions X = all_partitions' X\"", "lemma lm015: \n  \"possible_allocations_rel' A B  =  possible_allocations_rel A B\" \n  (is \"?A=?B\")", "lemma lm016: \n  \"possible_allocations_rel G N \\<subseteq> \n   injectionsUniverse \\<inter> {a. Range a \\<subseteq> N & Domain a \\<in> all_partitions G}\"", "lemma lm017: \n  \"possible_allocations_rel G N \\<supseteq> \n   injectionsUniverse \\<inter> {a. Domain a \\<in> all_partitions G & Range a \\<subseteq> N}\"", "lemma lm018: \n  \"possible_allocations_rel G N   = \n   injectionsUniverse \\<inter> {a. Domain a \\<in> all_partitions G & Range a \\<subseteq> N}\"", "lemma lm019: \n  \"converse ` injectionsUniverse = injectionsUniverse\"", "lemma lm020: \n  \"converse`(A \\<inter> B)  =  (converse`A) \\<inter> (converse`B)\"", "lemma allocationInjectionsUnivervseProperty: \n  \"allAllocations N G = \n   injectionsUniverse \\<inter> {a. Domain a \\<subseteq> N & Range a \\<in> all_partitions G}\"", "lemma lm021: \n  \"allAllocations N G \\<subseteq> injectionsUniverse\"", "lemma lm022: \n  \"allAllocations N G \\<subseteq> partitionValuedUniverse\"", "lemma lm025: \n  assumes \"(\\<Union> P1) \\<inter> (\\<Union> P2) = {}\" \n          \"is_non_overlapping P1\" \"is_non_overlapping P2\" \n          \"X \\<in> P1 \\<union> P2\" \"Y \\<in> P1 \\<union> P2\" \"X \\<inter> Y \\<noteq> {}\" \n  shows \"(X = Y)\"", "lemma lm026: \n  assumes \"(\\<Union> P1) \\<inter> (\\<Union> P2) = {}\" \n          \"is_non_overlapping P1\"\n          \"is_non_overlapping P2\" \n          \"X \\<in> P1 \\<union> P2\" \n          \"Y \\<in> P1 \\<union> P2\" \n          \"(X = Y)\" \n  shows \"X \\<inter> Y \\<noteq> {}\"", "lemma lm027:  \n  assumes \"(\\<Union> P1) \\<inter> (\\<Union> P2) = {}\" \n          \"is_non_overlapping P1\" \n          \"is_non_overlapping P2\"\n  shows \"is_non_overlapping (P1 \\<union> P2)\"", "lemma lm028: \n  \"Range Q \\<union> (Range (P outside (Domain Q))) = Range (P +* Q)\"", "lemma lm029: \n  assumes \"a1 \\<in> injectionsUniverse\" \n          \"a2 \\<in> injectionsUniverse\" \n          \"(Range a1) \\<inter> (Range a2)={}\" \n          \"(Domain a1) \\<inter> (Domain a2) = {}\" \n  shows \"a1 \\<union> a2 \\<in> injectionsUniverse\"", "lemma nonOverlapping:  \n  assumes \"R \\<in> partitionValuedUniverse\" \n  shows \"is_non_overlapping (Range R)\"", "lemma allocationUnion: \n  assumes \"a1 \\<in> allocationsUniverse\" \n          \"a2 \\<in> allocationsUniverse\" \n          \"(\\<Union> (Range a1)) \\<inter> (\\<Union> (Range a2)) = {}\"\n          \"(Domain a1) \\<inter> (Domain a2) = {}\" \n  shows \"a1 \\<union> a2 \\<in> allocationsUniverse\"", "lemma lm030: \n  assumes \"a \\<in> injectionsUniverse\" \n  shows \"a - b \\<in> injectionsUniverse\"", "lemma lm031: \n  \"{a. Domain a \\<subseteq> N    &   Range a \\<in> all_partitions G} =\n   (Domain -`(Pow N))  \\<inter>  (Range -` (all_partitions G)) \"", "lemma lm032: \n  \"allAllocations N G = \n   injectionsUniverse \\<inter> ((Range -` (all_partitions G)) \\<inter> (Domain -`(Pow N)))\"", "lemma lm034: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"(a^-1 \\<in> injections (Range a) N & \n         Range a \\<in> all_partitions G)\"", "lemma lm035: \n  assumes \"a^-1 \\<in> injections (Range a) N\" \"Range a \\<in> all_partitions G\" \n  shows \"a \\<in> allAllocations N G\"", "lemma allocationReverseInjective: \n  \"a \\<in> allAllocations N G = \n   (a^-1 \\<in> injections (Range a) N  &  Range a \\<in> all_partitions G)\"", "lemma lm036: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"a \\<in> injections (Domain a) (Range a) & \n         Range a \\<in> all_partitions G &\n         Domain a \\<subseteq> N\"", "lemma lm037: \n  assumes \"a \\<in> injections (Domain a) (Range a)\" \n          \"Range a \\<in> all_partitions G\" \n          \"Domain a \\<subseteq> N\" \n  shows \"a \\<in> allAllocations N G\"", "lemma characterizationallAllocations: \n  \"a \\<in> allAllocations N G = (a \\<in> injections (Domain a) (Range a)  & \n   Range a \\<in> all_partitions G & \n   Domain a \\<subseteq> N)\"", "lemma lm038: \n  assumes \"a \\<in> partitionValuedUniverse\" \n  shows \"a - b \\<in> partitionValuedUniverse\"", "lemma reducedAllocation: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"a - b \\<in> allocationsUniverse\"", "lemma lm039: \n  assumes \"a \\<in> injectionsUniverse\" \n  shows \"a \\<in> injections (Domain a) (Range a)\"", "lemma lm040: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"a \\<in> allAllocations (Domain a) (\\<Union> (Range a))\"", "lemma lm041: \n  \"({X} \\<in> partitionsUniverse) = (X \\<noteq> {})\"", "lemma lm042: \n  \"{(x, X)} - {(x, {})} \\<in> partitionValuedUniverse\"", "lemma singlePairInInjectionsUniverse: \n  \"{(x, X)} \\<in> injectionsUniverse\"", "lemma allocationUniverseProperty: \n  \"{(x,X)} - {(x,{})} \\<in> allocationsUniverse\"", "lemma lm043: \n  assumes \"is_non_overlapping PP\" \"is_non_overlapping (Union PP)\" \n  shows \"is_non_overlapping (Union ` PP)\"", "lemma lm044: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"(a - ((X\\<union>{i})\\<times>(Range a))) \\<union> \n         ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}) \\<in> allocationsUniverse & \n         \\<Union> (Range ((a - ((X\\<union>{i})\\<times>(Range a))) \\<union> ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}))) =\n         \\<Union>(Range a)\"", "lemma lm045: \n  assumes \"Domain a \\<inter> X \\<noteq> {}\" \"a \\<in> allocationsUniverse\" \n  shows   \"\\<Union>(a``X) \\<noteq> {}\"", "lemma lm048: \n  assumes \"bidMonotonicity b i\" \"runiq a\" \n  shows  \"sum b ({i}\\<times>((a outside X)``{i})) \\<le> sum b ({i}\\<times>{\\<Union>(a``(X\\<union>{i}))})\"", "lemma lm049:  \n  assumes \"XX \\<in> partitionValuedUniverse\" \n  shows \"{} \\<notin> Range XX\"", "lemma lm050: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"Range a \\<subseteq> Pow G\"", "lemma lm053: \n  assumes  \"a \\<in> allAllocations N G\" \n           \"i \\<in> N-X\" \n           \"Domain a \\<inter> X \\<noteq> {}\" \n  shows   \"a outside (X \\<union> {i}) \\<union> ({i} \\<times> {\\<Union>(a``(X\\<union>{i}))}) \\<in> \n           allAllocations (N-X) (\\<Union> (Range a))\"", "lemma lm054: \n  assumes \"bidMonotonicity (b::_ => real) i\" \n          \"a \\<in> allocationsUniverse\" \n          \"Domain a \\<inter> X \\<noteq> {}\" \n          \"finite a\"\n  shows   \"sum b (a outside X) \\<le> \n           sum b (a outside (X \\<union> {i}) \\<union> ({i} \\<times> {\\<Union>(a``(X\\<union>{i}))}))\"", "lemma elementOfPartitionOfFiniteSetIsFinite: \n  assumes \"finite X\" \"XX \\<in> all_partitions X\" \n  shows \"finite XX\"", "lemma lm055: \n  assumes \"finite N\" \"finite G\" \"a \\<in> allAllocations N G\"\n  shows \"finite a\"", "lemma allAllocationsFinite: \n  assumes \"finite N\" \"finite G\" \n  shows \"finite (allAllocations N G)\"", "lemma cardinalityPreservation: \n  assumes \"\\<forall>X \\<in> XX. finite X\" \"is_non_overlapping XX\" \n  shows   \"card (\\<Union> XX) = sum card XX\"", "lemma sumUnionDisjoint1: \n  assumes \"\\<forall>A\\<in>C. finite A\" \"\\<forall>A\\<in>C. \\<forall>B\\<in>C. A \\<noteq> B \\<longrightarrow> A Int B = {}\" \n  shows \"sum f (Union C) = sum (sum f) C\"", "lemma lm057: \n  assumes \"a \\<in> allocationsUniverse\" \"Domain a \\<subseteq> N\" \"\\<Union>(Range a) = G\" \n  shows   \"a \\<in> allAllocations N G\"", "lemma lm062: \n  \"totalRels {} Y = {{}}\"", "lemma lm063: \n  \"{} \\<in> injectionsUniverse\"", "lemma lm064: \n  \"injectionsUniverse \\<inter> (totalRels {} Y)  =  {{}}\"", "lemma lm065: \n  assumes \"runiq f\" \"x\\<notin>Domain f\" \n  shows \"{ f \\<union> {(x, y)} | y . y \\<in> A } \\<subseteq> runiqs\"", "lemma lm066: \n  \"converse ` (converse ` X)  =  X\"", "lemma lm067: \n  \"runiq (f^-1) = (f \\<in> converse`runiqs)\"", "lemma lm068: \n  assumes \"runiq (f^-1)\" \"A \\<inter> Range f  =  {}\" \n  shows   \"converse ` { f \\<union> {(x, y)} | y . y \\<in> A } \\<subseteq> runiqs\"", "lemma lm069: \n  assumes \"f\\<in>converse`runiqs\" \"A \\<inter> Range f  =  {}\" \n  shows   \"{f \\<union> {(x, y)}| y. y \\<in> A} \\<subseteq> converse`runiqs\" \n  (is \"?l \\<subseteq> ?r\")", "lemma lm070: \n  \"{ R \\<union> {(x, y)} | y . y \\<in> A } \\<subseteq> totalRels ({x} \\<union> Domain R) (A \\<union> Range R)\"", "lemma lm071: \n  \"injectionsUniverse  =  runiqs \\<inter> converse`runiqs\"", "lemma lm072: \n  assumes \"f \\<in> injectionsUniverse\" \"x \\<notin> Domain f\" \"A \\<inter> (Range f) = {}\" \n  shows   \"{f \\<union> {(x, y)}| y. y \\<in> A} \\<subseteq> injectionsUniverse\" \n  (is \"?l \\<subseteq> ?r\")", "lemma lm073: \n  \"injections X Y = totalRels X Y \\<inter> injectionsUniverse\"", "lemma lm074: \n  assumes \"f \\<in> injectionsUniverse\" \n  shows   \"f outside A \\<in> injectionsUniverse\"", "lemma lm075: \n  assumes \"R \\<in> totalRels A B\" \n  shows   \"R outside C \\<in> totalRels (A-C) B\"", "lemma lm076: \n  assumes \"g \\<in> injections A B\" \n  shows   \"g outside C \\<in> injections (A - C) B\"", "lemma lm077: \n  assumes \"g \\<in> injections A B\" \n  shows   \"g outside C \\<in> injections (A - C) B\"", "lemma lm078: \n  \"{x}\\<times>{y}={(x,y)}\"", "lemma lm079: \n  assumes \"x \\<in> Domain f\" \"runiq f\" \n  shows \"{x}\\<times>f``{x} = {(x,f,,x)}\"", "lemma lm081: \n  assumes \"f \\<in> injectionsUniverse\" \n  shows   \"Range(f outside A) = Range f - f``A\"", "lemma lm082: \n  assumes \"g \\<in> injections X Y\" \"x \\<in> Domain g\" \n  shows   \"g \\<in> {g--x \\<union> {(x,y)}|y. y \\<in> Y - (Range(g--x))}\"", "lemma lm086: \n  assumes \"x \\<notin> X\" \n  shows  \"(\\<Union> f\\<in>injections X Y. {f \\<union> {(x, y)} | y . y \\<in> Y-Range f}) \\<subseteq> \n          injections ({x} \\<union> X) Y\"", "lemma lm087: \n  assumes \"\\<forall> x. (P x \\<longrightarrow> (f x = g x))\" \n  shows   \"Union {f x|x. P x} = Union {g x | x. P x}\"", "lemma lm088: \n  assumes \"x \\<notin> Domain R\" \n  shows \"R +* {(x,y)} = R \\<union> {(x,y)}\"", "lemma lm089: \n  assumes \"x \\<notin> X\" \n  shows \"(\\<Union> f \\<in> injections X Y. {f +* {(x, y)} | y . y \\<in> Y-Range f}) = \n         (\\<Union> f \\<in> injections X Y. {f \\<union>  {(x, y)}  | y . y \\<in> Y-Range f})\" \n  (is \"?l = ?r\")", "lemma lm091: \n  \"set [ f \\<union> {(x,y)} . y \\<leftarrow> (filter (%y. y \\<notin> (Range f)) Y) ] = \n   {f \\<union> {(x,y)} | y . y \\<in> (set Y) -     (Range f)}\"", "lemma lm092: \n  assumes \"\\<forall>x \\<in> set L. set (F x) = G x\" \n  shows \"set (concat [ F x . x <- L]) = (\\<Union> x\\<in>set L. G x)\"", "lemma lm093: \n  \"set (concat [ [ f \\<union> {(x,y)} . y \\<leftarrow> (filter (%y. y \\<notin> Range f) Y) ]. f \\<leftarrow> F ]) =\n   (\\<Union> f \\<in> set F. {f \\<union> {(x,y)} | y . y \\<in> (set Y) - (Range f)})\"", "lemma lm094: \n  assumes \"finite Y\" \n  shows   \"set [ f +* {(x,y)} . y \\<leftarrow> sorted_list_of_set (Y - (Range f)) ] =\n           {      f +* {(x,y)} | y . y \\<in>                 Y - (Range f)}\"", "lemma lm095: \n  assumes \"finite Y\" \n  shows \"set (concat [[f +* {(x,y)}. y \\<leftarrow> sorted_list_of_set(Y - (Range f))]. f \\<leftarrow> F]) =\n         (\\<Union> f \\<in> set F.{f +* {(x,y)} | y . y \\<in> Y - (Range f)})\"", "lemma lm098:  \n  \"injections {} Y  =  {{}}\"", "lemma lm099: \n  \"injections {} Y  =  {{}}\"", "lemma injectionsFromEmptyIsEmpty: \n  \"injectionsAlg [] Y  =  [{}]\"", "lemma lm100: \n  assumes \"x \\<notin> set xs\" \"set (injectionsAlg xs Y) = injections (set xs) (set Y)\" \n  shows   \"set (injectionsAlg (x # xs) Y) = injections ({x} \\<union> set xs) (set Y)\" \n  (is \"?l=?r\")", "lemma lm101: \n  assumes \"x \\<notin> set xs\" \n          \"set (injections_alg xs Y) = injections (set xs) Y\" \n          \"finite Y\" \n  shows    \"set (injections_alg (x#xs) Y) = injections ({x} \\<union> set xs) Y\" \n  (is \"?l=?r\")", "lemma listInduct: \n  assumes \"P []\" \"\\<forall> xs x. P xs \\<longrightarrow> P (x#xs)\" \n  shows   \"\\<forall>x. P x\"", "lemma injectionsFromEmptyAreEmpty: \n  \"set (injections_alg [] Z) = {{}}\"", "theorem injections_equiv: \n  assumes \"finite Y\" and \"distinct X\" \n  shows  \"set (injections_alg X Y) = injections (set X) Y\"", "lemma lm102: \n  assumes \"l \\<in> set (all_partitions_list G)\" \"distinct G\" \n  shows   \"distinct l\"", "lemma bridgingInjection: \n  assumes \"card N > 0\" \"distinct G\" \n  shows \"\\<forall>l \\<in> set (all_partitions_list G). set (injections_alg l N) = \n         injections (set l) N\"", "lemma lm103: \n  assumes \"card N > 0\" \"distinct G\"\n  shows \"{injections P N| P. P \\<in> all_partitions (set G)} =\n         set [set (injections_alg l N) . l \\<leftarrow> all_partitions_list G]\"", "lemma lm104: \n  assumes \"card N > 0\" \"distinct G\" \n  shows   \"Union {injections P N| P. P \\<in> all_partitions (set G)} =\n           Union (set [set (injections_alg l N) . l \\<leftarrow> all_partitions_list G])\" \n  (is \"Union ?L = Union ?R\")"], "translations": [["", "lemma lm001: \n  assumes \"Y \\<in> set (all_partitions_alg X)\" \n  shows \"distinct Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct Y", "using assms distinct_sorted_list_of_set all_partitions_alg_def all_partitions_equivalence'"], ["proof (prove)\nusing this:\n  Y \\<in> set (all_partitions_alg X)\n  distinct (sorted_list_of_set ?A)\n  all_partitions_alg ?X = all_partitions_list (sorted_list_of_set ?X)\n  distinct ?xs \\<Longrightarrow>\n  set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs) \\<and>\n  (\\<forall>ps\\<in>set (all_partitions_list ?xs). distinct ps)\n\ngoal (1 subgoal):\n 1. distinct Y", "by metis"], ["", "(* This is a variant of the bridging theorem that the classical and constructive definitions of all_partitions characterize the same set *)"], ["", "lemma lm002: \n  assumes \"finite G\" \n  shows \"all_partitions G  =  set ` (set (all_partitions_alg G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_partitions G = set ` set (all_partitions_alg G)", "using assms sortingSameSet all_partitions_alg_def all_partitions_paper_equiv_alg\n        distinct_sorted_list_of_set image_set"], ["proof (prove)\nusing this:\n  finite G\n  finite ?X \\<Longrightarrow> set (sorted_list_of_set ?X) = ?X\n  all_partitions_alg ?X = all_partitions_list (sorted_list_of_set ?X)\n  distinct ?xs \\<Longrightarrow>\n  set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs)\n  distinct (sorted_list_of_set ?A)\n  ?f ` set ?xs = set (map ?f ?xs)\n\ngoal (1 subgoal):\n 1. all_partitions G = set ` set (all_partitions_alg G)", "by metis"], ["", "subsection \\<open>Definitions of various subsets of @{term UNIV}.\\<close>"], ["", "(* For with R = {({1,2},2), ({2,3},3)} is a choice relation, choosing one element of the set. *)"], ["", "abbreviation \"isChoice R == \\<forall>x. R``{x} \\<subseteq> x\""], ["", "abbreviation \"partitionsUniverse == {X. is_non_overlapping X}\""], ["", "lemma \"partitionsUniverse \\<subseteq> Pow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partitionsUniverse \\<subseteq> Pow UNIV", "by simp"], ["", "abbreviation \"partitionValuedUniverse == \\<Union> P \\<in> partitionsUniverse. Pow (UNIV \\<times> P)\""], ["", "lemma \"partitionValuedUniverse \\<subseteq> Pow (UNIV \\<times> (Pow UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partitionValuedUniverse \\<subseteq> Pow (UNIV \\<times> Pow UNIV)", "by simp"], ["", "abbreviation \"injectionsUniverse == {R. (runiq R) & (runiq (R^-1))}\""], ["", "(* allocations are injections so that goods are allocated at most once and the range from a partition of the goods. *)"], ["", "abbreviation \"allocationsUniverse == injectionsUniverse \\<inter> partitionValuedUniverse\""], ["", "abbreviation \"totalRels X Y == {R. Domain R = X & Range R \\<subseteq> Y}\""], ["", "subsection \\<open>Results about the sets defined in the previous section\\<close>"], ["", "lemma lm003: \n  assumes \"\\<forall> x1 \\<in> X. (x1 \\<noteq> {} & (\\<forall> x2 \\<in> X-{x1}. x1 \\<inter> x2  =  {}))\" \n  shows \"is_non_overlapping X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping X", "unfolding is_non_overlapping_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Xa\\<in>X.\n       \\<forall>Y\\<in>X. (Xa \\<inter> Y \\<noteq> {}) = (Xa = Y)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x1\\<in>X.\n     x1 \\<noteq> {} \\<and> (\\<forall>x2\\<in>X - {x1}. x1 \\<inter> x2 = {})\n\ngoal (1 subgoal):\n 1. \\<forall>Xa\\<in>X.\n       \\<forall>Y\\<in>X. (Xa \\<inter> Y \\<noteq> {}) = (Xa = Y)", "by fast"], ["", "lemma lm004: \n  assumes \"\\<forall>x \\<in> X. f x \\<in> x\" \n  shows \"isChoice (graph X f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isChoice (graph X f)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. f x \\<in> x\n\ngoal (1 subgoal):\n 1. isChoice (graph X f)", "by (metis Image_within_domain' empty_subsetI insert_subset graphEqImage domainOfGraph \n            runiq_wrt_eval_rel subset_trans)"], ["", "lemma lm006: \"injections X Y \\<subseteq> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections X Y \\<subseteq> injectionsUniverse", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. injections X Y \\<subseteq> injectionsUniverse", "by fast"], ["", "lemma lm007: \"injections X Y \\<subseteq> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections X Y \\<subseteq> injectionsUniverse", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. injections X Y \\<subseteq> injectionsUniverse", "by blast"], ["", "lemma lm008: \"injections X Y = totalRels X Y \\<inter> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections X Y = totalRels X Y \\<inter> injectionsUniverse", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. injections X Y = totalRels X Y \\<inter> injectionsUniverse", "by (simp add: Collect_conj_eq Int_assoc)"], ["", "lemma allocationInverseRangeDomainProperty: \n  assumes \"a \\<in> allAllocations N G\" \n  shows  \"a^-1 \\<in> injections (Range a) N & \n          (Range a) partitions G & \n          Domain a \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<inverse> \\<in> injections (Range a) N \\<and>\n    Range a partitions G \\<and> Domain a \\<subseteq> N", "unfolding injections_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<inverse>\n    \\<in> {R. Domain R = Range a \\<and>\n              Range R \\<subseteq> N \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)} \\<and>\n    Range a partitions G \\<and> Domain a \\<subseteq> N", "using assms all_partitions_def injections_def"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  all_partitions ?A = {P. P partitions ?A}\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. a\\<inverse>\n    \\<in> {R. Domain R = Range a \\<and>\n              Range R \\<subseteq> N \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)} \\<and>\n    Range a partitions G \\<and> Domain a \\<subseteq> N", "by fastforce"], ["", "lemma lm009: \n  assumes \"is_non_overlapping XX\" \"YY \\<subseteq> XX\" \n  shows \"(XX - YY) partitions (\\<Union> XX - \\<Union> YY)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "let ?xx=\"XX - YY\""], ["proof (state)\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "let ?X=\"\\<Union> XX\""], ["proof (state)\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "let ?Y=\"\\<Union> YY\""], ["proof (state)\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "let ?x=\"?X - ?Y\""], ["proof (state)\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "have \"\\<forall> y \\<in> YY. \\<forall> x\\<in>?xx. y \\<inter> x={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>YY. \\<forall>x\\<in>XX - YY. y \\<inter> x = {}", "using assms is_non_overlapping_def"], ["proof (prove)\nusing this:\n  is_non_overlapping XX\n  YY \\<subseteq> XX\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>YY. \\<forall>x\\<in>XX - YY. y \\<inter> x = {}", "by (metis Diff_iff rev_subsetD)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>YY. \\<forall>x\\<in>XX - YY. y \\<inter> x = {}\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "then"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>YY. \\<forall>x\\<in>XX - YY. y \\<inter> x = {}", "have \"\\<Union> ?xx \\<subseteq> ?x\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>YY. \\<forall>x\\<in>XX - YY. y \\<inter> x = {}\n\ngoal (1 subgoal):\n 1. \\<Union> (XX - YY) \\<subseteq> \\<Union> XX - \\<Union> YY", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>YY. \\<forall>x\\<in>XX - YY. y \\<inter> x = {}\n  is_non_overlapping XX\n  YY \\<subseteq> XX\n\ngoal (1 subgoal):\n 1. \\<Union> (XX - YY) \\<subseteq> \\<Union> XX - \\<Union> YY", "by blast"], ["proof (state)\nthis:\n  \\<Union> (XX - YY) \\<subseteq> \\<Union> XX - \\<Union> YY\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "then"], ["proof (chain)\npicking this:\n  \\<Union> (XX - YY) \\<subseteq> \\<Union> XX - \\<Union> YY", "have \"\\<Union> ?xx = ?x\""], ["proof (prove)\nusing this:\n  \\<Union> (XX - YY) \\<subseteq> \\<Union> XX - \\<Union> YY\n\ngoal (1 subgoal):\n 1. \\<Union> (XX - YY) = \\<Union> XX - \\<Union> YY", "by blast"], ["proof (state)\nthis:\n  \\<Union> (XX - YY) = \\<Union> XX - \\<Union> YY\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "moreover"], ["proof (state)\nthis:\n  \\<Union> (XX - YY) = \\<Union> XX - \\<Union> YY\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "have \"is_non_overlapping ?xx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (XX - YY)", "using subset_is_non_overlapping"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P \\<subseteq> ?Q; is_non_overlapping ?Q\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping ?P\n\ngoal (1 subgoal):\n 1. is_non_overlapping (XX - YY)", "by (metis Diff_subset assms(1))"], ["proof (state)\nthis:\n  is_non_overlapping (XX - YY)\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Union> (XX - YY) = \\<Union> XX - \\<Union> YY\n  is_non_overlapping (XX - YY)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> (XX - YY) = \\<Union> XX - \\<Union> YY\n  is_non_overlapping (XX - YY)\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "using is_partition_of_def"], ["proof (prove)\nusing this:\n  \\<Union> (XX - YY) = \\<Union> XX - \\<Union> YY\n  is_non_overlapping (XX - YY)\n  ?P partitions ?A = is_partition_of' ?P ?A\n\ngoal (1 subgoal):\n 1. (XX - YY) partitions (\\<Union> XX - \\<Union> YY)", "by blast"], ["proof (state)\nthis:\n  (XX - YY) partitions (\\<Union> XX - \\<Union> YY)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allocationRightUniqueRangeDomain: \n  assumes \"a \\<in> possible_allocations_rel G N\" \n  shows \"runiq a & \n         runiq (a\\<inverse>) & \n         (Domain a) partitions G & \n         Range a \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    Domain a partitions G \\<and> Range a \\<subseteq> N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    Domain a partitions G \\<and> Range a \\<subseteq> N", "obtain Y where\n  0: \"a \\<in> injections Y N & Y \\<in> all_partitions G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        a \\<in> injections Y N \\<and>\n        Y \\<in> all_partitions G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> possible_allocations_rel G N\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        a \\<in> injections Y N \\<and>\n        Y \\<in> all_partitions G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> injections Y N \\<and> Y \\<in> all_partitions G\n\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    Domain a partitions G \\<and> Range a \\<subseteq> N", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    Domain a partitions G \\<and> Range a \\<subseteq> N", "using 0 injections_def all_partitions_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  a \\<in> injections Y N \\<and> Y \\<in> all_partitions G\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n  all_partitions ?A = {P. P partitions ?A}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    Domain a partitions G \\<and> Range a \\<subseteq> N", "by fastforce"], ["proof (state)\nthis:\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  Domain a partitions G \\<and> Range a \\<subseteq> N\n\ngoal:\nNo subgoals!", "qed"], ["", "(* converse of the previous lemma *)"], ["", "lemma lm010: \n  assumes \"runiq a\" \"runiq (a\\<inverse>)\" \"(Domain a) partitions G\" \"Range a \\<subseteq> N\"\n  shows \"a \\<in> possible_allocations_rel G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "have \"a \\<in> injections (Domain a) N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> injections (Domain a) N", "unfolding injections_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {R. Domain R = Domain a \\<and>\n                Range R \\<subseteq> N \\<and>\n                runiq R \\<and> runiq (R\\<inverse>)}", "using assms(1) assms(2)  assms(4)"], ["proof (prove)\nusing this:\n  runiq a\n  runiq (a\\<inverse>)\n  Range a \\<subseteq> N\n\ngoal (1 subgoal):\n 1. a \\<in> {R. Domain R = Domain a \\<and>\n                Range R \\<subseteq> N \\<and>\n                runiq R \\<and> runiq (R\\<inverse>)}", "by blast"], ["proof (state)\nthis:\n  a \\<in> injections (Domain a) N\n\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "moreover"], ["proof (state)\nthis:\n  a \\<in> injections (Domain a) N\n\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "have \"Domain a \\<in> all_partitions G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a \\<in> all_partitions G", "using assms(3) all_partitions_def"], ["proof (prove)\nusing this:\n  Domain a partitions G\n  all_partitions ?A = {P. P partitions ?A}\n\ngoal (1 subgoal):\n 1. Domain a \\<in> all_partitions G", "by fast"], ["proof (state)\nthis:\n  Domain a \\<in> all_partitions G\n\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> injections (Domain a) N\n  Domain a \\<in> all_partitions G", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> injections (Domain a) N\n  Domain a \\<in> all_partitions G\n\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in> injections (Domain a) N\n  Domain a \\<in> all_partitions G\n  runiq a\n\ngoal (1 subgoal):\n 1. a \\<in> possible_allocations_rel G N", "by auto"], ["proof (state)\nthis:\n  a \\<in> possible_allocations_rel G N\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lemma allocationRightUniqueRangeDomain and lm010 combined *)"], ["", "lemma allocationProperty: \n  \"a \\<in> possible_allocations_rel G N \\<longleftrightarrow>\n   runiq a & runiq (a\\<inverse>) & (Domain a) partitions G & Range a \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> possible_allocations_rel G N) =\n    (runiq a \\<and>\n     runiq (a\\<inverse>) \\<and>\n     Domain a partitions G \\<and> Range a \\<subseteq> N)", "using allocationRightUniqueRangeDomain lm010"], ["proof (prove)\nusing this:\n  ?a \\<in> possible_allocations_rel ?G ?N \\<Longrightarrow>\n  runiq ?a \\<and>\n  runiq (?a\\<inverse>) \\<and>\n  Domain ?a partitions ?G \\<and> Range ?a \\<subseteq> ?N\n  \\<lbrakk>runiq ?a; runiq (?a\\<inverse>); Domain ?a partitions ?G;\n   Range ?a \\<subseteq> ?N\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> possible_allocations_rel ?G ?N\n\ngoal (1 subgoal):\n 1. (a \\<in> possible_allocations_rel G N) =\n    (runiq a \\<and>\n     runiq (a\\<inverse>) \\<and>\n     Domain a partitions G \\<and> Range a \\<subseteq> N)", "by blast"], ["", "lemma lm011: \n  \"possible_allocations_rel' G N \\<subseteq> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible_allocations_rel' G N \\<subseteq> injectionsUniverse", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. possible_allocations_rel' G N \\<subseteq> injectionsUniverse", "by force"], ["", "lemma lm012: \n  \"possible_allocations_rel G N \\<subseteq> {a. (Range a) \\<subseteq> N & (Domain a) \\<in> all_partitions G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible_allocations_rel G N\n    \\<subseteq> {a. Range a \\<subseteq> N \\<and>\n                    Domain a \\<in> all_partitions G}", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. possible_allocations_rel G N\n    \\<subseteq> {a. Range a \\<subseteq> N \\<and>\n                    Domain a \\<in> all_partitions G}", "by fastforce"], ["", "lemma lm013: \n  \"injections X Y = injections X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections X Y = injections X Y", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. injections X Y = injections X Y", "by metis"], ["", "lemma lm014: \n  \"all_partitions X = all_partitions' X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_partitions X = all_partitions' X", "using all_partitions_def is_partition_of_def"], ["proof (prove)\nusing this:\n  all_partitions ?A = {P. P partitions ?A}\n  ?P partitions ?A = is_partition_of' ?P ?A\n\ngoal (1 subgoal):\n 1. all_partitions X = all_partitions' X", "by auto"], ["", "lemma lm015: \n  \"possible_allocations_rel' A B  =  possible_allocations_rel A B\" \n  (is \"?A=?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. possible_allocations_rel' A B = possible_allocations_rel A B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. possible_allocations_rel' A B = possible_allocations_rel A B", "have \"?B=\\<Union> { injections Y B | Y . Y \\<in> all_partitions A }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible_allocations_rel A B =\n    \\<Union> {injections Y B |Y. Y \\<in> all_partitions A}", "by auto"], ["proof (state)\nthis:\n  possible_allocations_rel A B =\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A}\n\ngoal (1 subgoal):\n 1. possible_allocations_rel' A B = possible_allocations_rel A B", "moreover"], ["proof (state)\nthis:\n  possible_allocations_rel A B =\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A}\n\ngoal (1 subgoal):\n 1. possible_allocations_rel' A B = possible_allocations_rel A B", "have \"... = ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {injections Y B |Y. Y \\<in> all_partitions A} =\n    possible_allocations_rel' A B", "using lm014"], ["proof (prove)\nusing this:\n  all_partitions ?X = all_partitions' ?X\n\ngoal (1 subgoal):\n 1. \\<Union> {injections Y B |Y. Y \\<in> all_partitions A} =\n    possible_allocations_rel' A B", "by metis"], ["proof (state)\nthis:\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A} =\n  possible_allocations_rel' A B\n\ngoal (1 subgoal):\n 1. possible_allocations_rel' A B = possible_allocations_rel A B", "ultimately"], ["proof (chain)\npicking this:\n  possible_allocations_rel A B =\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A}\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A} =\n  possible_allocations_rel' A B", "show ?thesis"], ["proof (prove)\nusing this:\n  possible_allocations_rel A B =\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A}\n  \\<Union> {injections Y B |Y. Y \\<in> all_partitions A} =\n  possible_allocations_rel' A B\n\ngoal (1 subgoal):\n 1. possible_allocations_rel' A B = possible_allocations_rel A B", "by presburger"], ["proof (state)\nthis:\n  possible_allocations_rel' A B = possible_allocations_rel A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm016: \n  \"possible_allocations_rel G N \\<subseteq> \n   injectionsUniverse \\<inter> {a. Range a \\<subseteq> N & Domain a \\<in> all_partitions G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible_allocations_rel G N\n    \\<subseteq> injectionsUniverse \\<inter>\n                {a. Range a \\<subseteq> N \\<and>\n                    Domain a \\<in> all_partitions G}", "using lm012 lm011 injections_def"], ["proof (prove)\nusing this:\n  possible_allocations_rel ?G ?N\n  \\<subseteq> {a. Range a \\<subseteq> ?N \\<and>\n                  Domain a \\<in> all_partitions ?G}\n  possible_allocations_rel' ?G ?N \\<subseteq> injectionsUniverse\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. possible_allocations_rel G N\n    \\<subseteq> injectionsUniverse \\<inter>\n                {a. Range a \\<subseteq> N \\<and>\n                    Domain a \\<in> all_partitions G}", "by fastforce"], ["", "lemma lm017: \n  \"possible_allocations_rel G N \\<supseteq> \n   injectionsUniverse \\<inter> {a. Domain a \\<in> all_partitions G & Range a \\<subseteq> N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injectionsUniverse \\<inter>\n    {a. Domain a \\<in> all_partitions G \\<and> Range a \\<subseteq> N}\n    \\<subseteq> possible_allocations_rel G N", "using injections_def"], ["proof (prove)\nusing this:\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. injectionsUniverse \\<inter>\n    {a. Domain a \\<in> all_partitions G \\<and> Range a \\<subseteq> N}\n    \\<subseteq> possible_allocations_rel G N", "by auto"], ["", "(* combination of the previous two lemmas *)"], ["", "lemma lm018: \n  \"possible_allocations_rel G N   = \n   injectionsUniverse \\<inter> {a. Domain a \\<in> all_partitions G & Range a \\<subseteq> N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible_allocations_rel G N =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<in> all_partitions G \\<and> Range a \\<subseteq> N}", "using lm016 lm017"], ["proof (prove)\nusing this:\n  possible_allocations_rel ?G ?N\n  \\<subseteq> injectionsUniverse \\<inter>\n              {a. Range a \\<subseteq> ?N \\<and>\n                  Domain a \\<in> all_partitions ?G}\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<in> all_partitions ?G \\<and> Range a \\<subseteq> ?N}\n  \\<subseteq> possible_allocations_rel ?G ?N\n\ngoal (1 subgoal):\n 1. possible_allocations_rel G N =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<in> all_partitions G \\<and> Range a \\<subseteq> N}", "by blast"], ["", "(* all possible injections can be flipped and gives the same *)"], ["", "lemma lm019: \n  \"converse ` injectionsUniverse = injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` injectionsUniverse = injectionsUniverse", "by auto"], ["", "lemma lm020: \n  \"converse`(A \\<inter> B)  =  (converse`A) \\<inter> (converse`B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` (A \\<inter> B) = converse ` A \\<inter> converse ` B", "by force"], ["", "lemma allocationInjectionsUnivervseProperty: \n  \"allAllocations N G = \n   injectionsUniverse \\<inter> {a. Domain a \\<subseteq> N & Range a \\<in> all_partitions G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "let ?A=\"possible_allocations_rel G N\""], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "let ?c=converse"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "let ?I=injectionsUniverse"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "let ?P=\"all_partitions G\""], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "let ?d=Domain"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "let ?r=Range"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "have \"?c`?A = (?c`?I) \\<inter> ?c` ({a. ?r a \\<subseteq> N & ?d a \\<in> ?P})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    converse ` injectionsUniverse \\<inter>\n    converse `\n    {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G}", "using lm018"], ["proof (prove)\nusing this:\n  possible_allocations_rel ?G ?N =\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<in> all_partitions ?G \\<and> Range a \\<subseteq> ?N}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    converse ` injectionsUniverse \\<inter>\n    converse `\n    {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G}", "by fastforce"], ["proof (state)\nthis:\n  allAllocations N G =\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "moreover"], ["proof (state)\nthis:\n  allAllocations N G =\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "have \"... = (?c`?I) \\<inter> {aa. ?d aa \\<subseteq> N & ?r aa \\<in> ?P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` injectionsUniverse \\<inter>\n    converse `\n    {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G} =\n    converse ` injectionsUniverse \\<inter>\n    {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}", "by fastforce"], ["proof (state)\nthis:\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G} =\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "moreover"], ["proof (state)\nthis:\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G} =\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "have \"... = ?I \\<inter> {aa. ?d aa \\<subseteq> N & ?r aa \\<in> ?P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` injectionsUniverse \\<inter>\n    {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G} =\n    injectionsUniverse \\<inter>\n    {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}", "using lm019"], ["proof (prove)\nusing this:\n  converse ` injectionsUniverse = injectionsUniverse\n\ngoal (1 subgoal):\n 1. converse ` injectionsUniverse \\<inter>\n    {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G} =\n    injectionsUniverse \\<inter>\n    {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}", "by metis"], ["proof (state)\nthis:\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G} =\n  injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "ultimately"], ["proof (chain)\npicking this:\n  allAllocations N G =\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G}\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G} =\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G} =\n  injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}", "show ?thesis"], ["proof (prove)\nusing this:\n  allAllocations N G =\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G}\n  converse ` injectionsUniverse \\<inter>\n  converse `\n  {a. Range a \\<subseteq> N \\<and> Domain a \\<in> all_partitions G} =\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}\n  converse ` injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G} =\n  injectionsUniverse \\<inter>\n  {aa. Domain aa \\<subseteq> N \\<and> Range aa \\<in> all_partitions G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}", "by presburger"], ["proof (state)\nthis:\n  allAllocations N G =\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm021: \n  \"allAllocations N G \\<subseteq> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> injectionsUniverse", "using allocationInjectionsUnivervseProperty"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G =\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<subseteq> ?N \\<and> Range a \\<in> all_partitions ?G}\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> injectionsUniverse", "by fast"], ["", "lemma lm022: \n  \"allAllocations N G \\<subseteq> partitionValuedUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> partitionValuedUniverse", "using allocationInverseRangeDomainProperty is_partition_of_def is_non_overlapping_def"], ["proof (prove)\nusing this:\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n  ?P partitions ?A = is_partition_of' ?P ?A\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> partitionValuedUniverse", "by auto blast"], ["", "corollary allAllocationsUniverse: \n  \"allAllocations N G \\<subseteq> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> allocationsUniverse", "using lm021 lm022"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G \\<subseteq> injectionsUniverse\n  allAllocations ?N ?G \\<subseteq> partitionValuedUniverse\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> allocationsUniverse", "by (metis (lifting, mono_tags) inf.bounded_iff)"], ["", "corollary posssibleAllocationsRelCharacterization: \n  \"a \\<in> allAllocations N G = \n   (a \\<in> injectionsUniverse & Domain a \\<subseteq> N & Range a \\<in> all_partitions G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a \\<in> injectionsUniverse \\<and>\n     Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G)", "using allocationInjectionsUnivervseProperty Int_Collect Int_iff"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G =\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<subseteq> ?N \\<and> Range a \\<in> all_partitions ?G}\n  (?x \\<in> ?A \\<inter> {x. ?P x}) = (?x \\<in> ?A \\<and> ?P ?x)\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a \\<in> injectionsUniverse \\<and>\n     Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G)", "by (metis (lifting))"], ["", "corollary lm023: \n  assumes \"a \\<in> allAllocations N1 G\" \n  shows   \"a \\<in> allAllocations (N1 \\<union> N2) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "have \"Domain a \\<subseteq> N1 \\<union> N2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a \\<subseteq> N1 \\<union> N2", "using assms(1) posssibleAllocationsRelCharacterization"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N1 G\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n\ngoal (1 subgoal):\n 1. Domain a \\<subseteq> N1 \\<union> N2", "by (metis le_supI1)"], ["proof (state)\nthis:\n  Domain a \\<subseteq> N1 \\<union> N2\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "moreover"], ["proof (state)\nthis:\n  Domain a \\<subseteq> N1 \\<union> N2\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "have \"a \\<in> injectionsUniverse & Range a \\<in> all_partitions G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> injectionsUniverse \\<and> Range a \\<in> all_partitions G", "using assms posssibleAllocationsRelCharacterization"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N1 G\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n\ngoal (1 subgoal):\n 1. a \\<in> injectionsUniverse \\<and> Range a \\<in> all_partitions G", "by blast"], ["proof (state)\nthis:\n  a \\<in> injectionsUniverse \\<and> Range a \\<in> all_partitions G\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "ultimately"], ["proof (chain)\npicking this:\n  Domain a \\<subseteq> N1 \\<union> N2\n  a \\<in> injectionsUniverse \\<and> Range a \\<in> all_partitions G", "show ?thesis"], ["proof (prove)\nusing this:\n  Domain a \\<subseteq> N1 \\<union> N2\n  a \\<in> injectionsUniverse \\<and> Range a \\<in> all_partitions G\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "using posssibleAllocationsRelCharacterization"], ["proof (prove)\nusing this:\n  Domain a \\<subseteq> N1 \\<union> N2\n  a \\<in> injectionsUniverse \\<and> Range a \\<in> all_partitions G\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (N1 \\<union> N2) G", "by blast"], ["proof (state)\nthis:\n  a \\<in> allAllocations (N1 \\<union> N2) G\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm024: \n  \"allAllocations N1 G \\<subseteq> allAllocations (N1 \\<union> N2) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N1 G \\<subseteq> allAllocations (N1 \\<union> N2) G", "using lm023"], ["proof (prove)\nusing this:\n  ?a \\<in> allAllocations ?N1.0 ?G \\<Longrightarrow>\n  ?a \\<in> allAllocations (?N1.0 \\<union> ?N2.0) ?G\n\ngoal (1 subgoal):\n 1. allAllocations N1 G \\<subseteq> allAllocations (N1 \\<union> N2) G", "by (metis subsetI)"], ["", "lemma lm025: \n  assumes \"(\\<Union> P1) \\<inter> (\\<Union> P2) = {}\" \n          \"is_non_overlapping P1\" \"is_non_overlapping P2\" \n          \"X \\<in> P1 \\<union> P2\" \"Y \\<in> P1 \\<union> P2\" \"X \\<inter> Y \\<noteq> {}\" \n  shows \"(X = Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Y", "unfolding is_non_overlapping_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Y", "using assms is_non_overlapping_def"], ["proof (prove)\nusing this:\n  \\<Union> P1 \\<inter> \\<Union> P2 = {}\n  is_non_overlapping P1\n  is_non_overlapping P2\n  X \\<in> P1 \\<union> P2\n  Y \\<in> P1 \\<union> P2\n  X \\<inter> Y \\<noteq> {}\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. X = Y", "by fast"], ["", "lemma lm026: \n  assumes \"(\\<Union> P1) \\<inter> (\\<Union> P2) = {}\" \n          \"is_non_overlapping P1\"\n          \"is_non_overlapping P2\" \n          \"X \\<in> P1 \\<union> P2\" \n          \"Y \\<in> P1 \\<union> P2\" \n          \"(X = Y)\" \n  shows \"X \\<inter> Y \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> Y \\<noteq> {}", "unfolding is_non_overlapping_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> Y \\<noteq> {}", "using assms is_non_overlapping_def"], ["proof (prove)\nusing this:\n  \\<Union> P1 \\<inter> \\<Union> P2 = {}\n  is_non_overlapping P1\n  is_non_overlapping P2\n  X \\<in> P1 \\<union> P2\n  Y \\<in> P1 \\<union> P2\n  X = Y\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. X \\<inter> Y \\<noteq> {}", "by fast"], ["", "lemma lm027:  \n  assumes \"(\\<Union> P1) \\<inter> (\\<Union> P2) = {}\" \n          \"is_non_overlapping P1\" \n          \"is_non_overlapping P2\"\n  shows \"is_non_overlapping (P1 \\<union> P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (P1 \\<union> P2)", "unfolding is_non_overlapping_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P1 \\<union> P2.\n       \\<forall>Y\\<in>P1 \\<union> P2. (X \\<inter> Y \\<noteq> {}) = (X = Y)", "using assms lm025 lm026"], ["proof (prove)\nusing this:\n  \\<Union> P1 \\<inter> \\<Union> P2 = {}\n  is_non_overlapping P1\n  is_non_overlapping P2\n  \\<lbrakk>\\<Union> ?P1.0 \\<inter> \\<Union> ?P2.0 = {};\n   is_non_overlapping ?P1.0; is_non_overlapping ?P2.0;\n   ?X \\<in> ?P1.0 \\<union> ?P2.0; ?Y \\<in> ?P1.0 \\<union> ?P2.0;\n   ?X \\<inter> ?Y \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> ?X = ?Y\n  \\<lbrakk>\\<Union> ?P1.0 \\<inter> \\<Union> ?P2.0 = {};\n   is_non_overlapping ?P1.0; is_non_overlapping ?P2.0;\n   ?X \\<in> ?P1.0 \\<union> ?P2.0; ?Y \\<in> ?P1.0 \\<union> ?P2.0;\n   ?X = ?Y\\<rbrakk>\n  \\<Longrightarrow> ?X \\<inter> ?Y \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>P1 \\<union> P2.\n       \\<forall>Y\\<in>P1 \\<union> P2. (X \\<inter> Y \\<noteq> {}) = (X = Y)", "by metis"], ["", "lemma lm028: \n  \"Range Q \\<union> (Range (P outside (Domain Q))) = Range (P +* Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range Q \\<union> Range (Outside' (Domain Q) P) = Range (P +< Q)", "by (simp add: paste_def Range_Un_eq Un_commute)"], ["", "lemma lm029: \n  assumes \"a1 \\<in> injectionsUniverse\" \n          \"a2 \\<in> injectionsUniverse\" \n          \"(Range a1) \\<inter> (Range a2)={}\" \n          \"(Domain a1) \\<inter> (Domain a2) = {}\" \n  shows \"a1 \\<union> a2 \\<in> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> injectionsUniverse", "using assms disj_Un_runiq"], ["proof (prove)\nusing this:\n  a1 \\<in> injectionsUniverse\n  a2 \\<in> injectionsUniverse\n  Range a1 \\<inter> Range a2 = {}\n  Domain a1 \\<inter> Domain a2 = {}\n  \\<lbrakk>runiq ?P; runiq ?Q; Domain ?P \\<inter> Domain ?Q = {}\\<rbrakk>\n  \\<Longrightarrow> runiq (?P \\<union> ?Q)\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> injectionsUniverse", "by (metis (no_types) Domain_converse converse_Un mem_Collect_eq)"], ["", "lemma nonOverlapping:  \n  assumes \"R \\<in> partitionValuedUniverse\" \n  shows \"is_non_overlapping (Range R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (Range R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (Range R)", "obtain P where\n  0: \"P \\<in> partitionsUniverse & R \\<subseteq> UNIV \\<times> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        P \\<in> partitionsUniverse \\<and>\n        R \\<subseteq> UNIV \\<times> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  R \\<in> partitionValuedUniverse\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        P \\<in> partitionsUniverse \\<and>\n        R \\<subseteq> UNIV \\<times> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<in> partitionsUniverse \\<and> R \\<subseteq> UNIV \\<times> P\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range R)", "have \"Range R \\<subseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range R \\<subseteq> P", "using 0"], ["proof (prove)\nusing this:\n  P \\<in> partitionsUniverse \\<and> R \\<subseteq> UNIV \\<times> P\n\ngoal (1 subgoal):\n 1. Range R \\<subseteq> P", "by fast"], ["proof (state)\nthis:\n  Range R \\<subseteq> P\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range R)", "then"], ["proof (chain)\npicking this:\n  Range R \\<subseteq> P", "show ?thesis"], ["proof (prove)\nusing this:\n  Range R \\<subseteq> P\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range R)", "using 0 mem_Collect_eq subset_is_non_overlapping"], ["proof (prove)\nusing this:\n  Range R \\<subseteq> P\n  P \\<in> partitionsUniverse \\<and> R \\<subseteq> UNIV \\<times> P\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>?P \\<subseteq> ?Q; is_non_overlapping ?Q\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping ?P\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range R)", "by (metis)"], ["proof (state)\nthis:\n  is_non_overlapping (Range R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allocationUnion: \n  assumes \"a1 \\<in> allocationsUniverse\" \n          \"a2 \\<in> allocationsUniverse\" \n          \"(\\<Union> (Range a1)) \\<inter> (\\<Union> (Range a2)) = {}\"\n          \"(Domain a1) \\<inter> (Domain a2) = {}\" \n  shows \"a1 \\<union> a2 \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?a=\"a1 \\<union> a2\""], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?b1=\"a1^-1\""], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?b2=\"a2^-1\""], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?r=Range"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?d=Domain"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?I=injectionsUniverse"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?P=partitionsUniverse"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?PV=partitionValuedUniverse"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?u=runiq"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?b=\"?a^-1\""], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "let ?p=is_non_overlapping"], ["proof (state)\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "have \"?p (?r a1) & ?p (?r a2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)", "using assms nonOverlapping"], ["proof (prove)\nusing this:\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n  ?R \\<in> partitionValuedUniverse \\<Longrightarrow>\n  is_non_overlapping (Range ?R)\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)", "by blast"], ["proof (state)\nthis:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "then"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)", "have \"?p (?r a1 \\<union> ?r a2)\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a1 \\<union> Range a2)", "using assms"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a1 \\<union> Range a2)", "by (metis lm027)"], ["proof (state)\nthis:\n  is_non_overlapping (Range a1 \\<union> Range a2)\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "then"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1 \\<union> Range a2)", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1 \\<union> Range a2)", "have \"(?r a1 \\<union> ?r a2) \\<in> ?P\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1 \\<union> Range a2)\n\ngoal (1 subgoal):\n 1. Range a1 \\<union> Range a2 \\<in> partitionsUniverse", "by simp"], ["proof (state)\nthis:\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "moreover"], ["proof (state)\nthis:\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "have \"?r ?a = (?r a1 \\<union> ?r a2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (a1 \\<union> a2) = Range a1 \\<union> Range a2", "using assms"], ["proof (prove)\nusing this:\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n\ngoal (1 subgoal):\n 1. Range (a1 \\<union> a2) = Range a1 \\<union> Range a2", "by fast"], ["proof (state)\nthis:\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2", "have \"?p (?r ?a)\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range (a1 \\<union> a2))", "using lm027 assms"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  \\<lbrakk>\\<Union> ?P1.0 \\<inter> \\<Union> ?P2.0 = {};\n   is_non_overlapping ?P1.0; is_non_overlapping ?P2.0\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping (?P1.0 \\<union> ?P2.0)\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range (a1 \\<union> a2))", "by fastforce"], ["proof (state)\nthis:\n  is_non_overlapping (Range (a1 \\<union> a2))\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "then"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range (a1 \\<union> a2))", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range (a1 \\<union> a2))", "have \"?a \\<in> ?PV\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range (a1 \\<union> a2))\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> partitionValuedUniverse", "using assms"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> partitionValuedUniverse", "by fast"], ["proof (state)\nthis:\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "moreover"], ["proof (state)\nthis:\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "have \"?r a1 \\<inter> (?r a2) \\<subseteq> Pow (\\<Union> (?r a1) \\<inter> (\\<Union> (?r a2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range a1 \\<inter> Range a2\n    \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))", "by auto"], ["proof (state)\nthis:\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))", "have \"{} \\<notin> (?r a1) & {} \\<notin> (?r a2)\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n\ngoal (1 subgoal):\n 1. {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2", "using is_non_overlapping_def"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2", "by (metis Int_empty_left)"], ["proof (state)\nthis:\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2", "have \"?r a1 \\<inter> (?r a2) = {}\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n\ngoal (1 subgoal):\n 1. Range a1 \\<inter> Range a2 = {}", "using assms nonOverlapping is_non_overlapping_def"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n  ?R \\<in> partitionValuedUniverse \\<Longrightarrow>\n  is_non_overlapping (Range ?R)\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. Range a1 \\<inter> Range a2 = {}", "by auto"], ["proof (state)\nthis:\n  Range a1 \\<inter> Range a2 = {}\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  Range a1 \\<inter> Range a2 = {}", "moreover"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  Range a1 \\<inter> Range a2 = {}", "have \"?a \\<in> ?I\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  Range a1 \\<inter> Range a2 = {}\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> injectionsUniverse", "using lm029 assms"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  Range a1 \\<inter> Range a2 = {}\n  \\<lbrakk>?a1.0 \\<in> injectionsUniverse; ?a2.0 \\<in> injectionsUniverse;\n   Range ?a1.0 \\<inter> Range ?a2.0 = {};\n   Domain ?a1.0 \\<inter> Domain ?a2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> ?a1.0 \\<union> ?a2.0 \\<in> injectionsUniverse\n  a1 \\<in> allocationsUniverse\n  a2 \\<in> allocationsUniverse\n  \\<Union> (Range a1) \\<inter> \\<Union> (Range a2) = {}\n  Domain a1 \\<inter> Domain a2 = {}\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> injectionsUniverse", "by fastforce"], ["proof (state)\nthis:\n  a1 \\<union> a2 \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  Range a1 \\<inter> Range a2 = {}\n  a1 \\<union> a2 \\<in> injectionsUniverse", "show ?thesis"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a1) \\<and> is_non_overlapping (Range a2)\n  is_non_overlapping (Range a1 \\<union> Range a2)\n  Range a1 \\<union> Range a2 \\<in> partitionsUniverse\n  Range (a1 \\<union> a2) = Range a1 \\<union> Range a2\n  is_non_overlapping (Range (a1 \\<union> a2))\n  a1 \\<union> a2 \\<in> partitionValuedUniverse\n  Range a1 \\<inter> Range a2\n  \\<subseteq> Pow (\\<Union> (Range a1) \\<inter> \\<Union> (Range a2))\n  {} \\<notin> Range a1 \\<and> {} \\<notin> Range a2\n  Range a1 \\<inter> Range a2 = {}\n  a1 \\<union> a2 \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. a1 \\<union> a2 \\<in> allocationsUniverse", "by blast"], ["proof (state)\nthis:\n  a1 \\<union> a2 \\<in> allocationsUniverse\n\ngoal:\nNo subgoals!", "qed"], ["", "(* - stands here for set difference *)"], ["", "lemma lm030: \n  assumes \"a \\<in> injectionsUniverse\" \n  shows \"a - b \\<in> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b \\<in> injectionsUniverse", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. a - b \\<in> injectionsUniverse", "by (metis (lifting) Diff_subset converse_mono mem_Collect_eq subrel_runiq)"], ["", "(* Note that -` is the inverse image of a lambda function. *)"], ["", "lemma lm031: \n  \"{a. Domain a \\<subseteq> N    &   Range a \\<in> all_partitions G} =\n   (Domain -`(Pow N))  \\<inter>  (Range -` (all_partitions G)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. Domain a \\<subseteq> N \\<and> Range a \\<in> all_partitions G} =\n    Domain -` Pow N \\<inter> Range -` all_partitions G", "by fastforce"], ["", "lemma lm032: \n  \"allAllocations N G = \n   injectionsUniverse \\<inter> ((Range -` (all_partitions G)) \\<inter> (Domain -`(Pow N)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    (Range -` all_partitions G \\<inter> Domain -` Pow N)", "using allocationInjectionsUnivervseProperty lm031"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G =\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<subseteq> ?N \\<and> Range a \\<in> all_partitions ?G}\n  {a. Domain a \\<subseteq> ?N \\<and> Range a \\<in> all_partitions ?G} =\n  Domain -` Pow ?N \\<inter> Range -` all_partitions ?G\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter>\n    (Range -` all_partitions G \\<inter> Domain -` Pow N)", "by (metis (no_types) Int_commute)"], ["", "(* -` is the reverse image of a function. This is a variant of lm023 with different bracketing *)"], ["", "corollary lm033: \n  \"allAllocations N G = \n   injectionsUniverse \\<inter> (Range -` (all_partitions G)) \\<inter> (Domain -`(Pow N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter> Range -` all_partitions G \\<inter>\n    Domain -` Pow N", "using lm032 Int_assoc"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G =\n  injectionsUniverse \\<inter>\n  (Range -` all_partitions ?G \\<inter> Domain -` Pow ?N)\n  ?A \\<inter> ?B \\<inter> ?C = ?A \\<inter> (?B \\<inter> ?C)\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    injectionsUniverse \\<inter> Range -` all_partitions G \\<inter>\n    Domain -` Pow N", "by (metis)"], ["", "lemma lm034: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"(a^-1 \\<in> injections (Range a) N & \n         Range a \\<in> all_partitions G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<inverse> \\<in> injections (Range a) N \\<and>\n    Range a \\<in> all_partitions G", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n\ngoal (1 subgoal):\n 1. a\\<inverse> \\<in> injections (Range a) N \\<and>\n    Range a \\<in> all_partitions G", "by (metis (mono_tags, hide_lams) posssibleAllocationsRelCharacterization\n                                   allocationInverseRangeDomainProperty)"], ["", "lemma lm035: \n  assumes \"a^-1 \\<in> injections (Range a) N\" \"Range a \\<in> all_partitions G\" \n  shows \"a \\<in> allAllocations N G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations N G", "using assms image_iff"], ["proof (prove)\nusing this:\n  a\\<inverse> \\<in> injections (Range a) N\n  Range a \\<in> all_partitions G\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations N G", "by fastforce"], ["", "lemma allocationReverseInjective: \n  \"a \\<in> allAllocations N G = \n   (a^-1 \\<in> injections (Range a) N  &  Range a \\<in> all_partitions G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a\\<inverse> \\<in> injections (Range a) N \\<and>\n     Range a \\<in> all_partitions G)", "using lm034 lm035"], ["proof (prove)\nusing this:\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a \\<in> all_partitions ?G\n  \\<lbrakk>?a\\<inverse> \\<in> injections (Range ?a) ?N;\n   Range ?a \\<in> all_partitions ?G\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> allAllocations ?N ?G\n\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a\\<inverse> \\<in> injections (Range a) N \\<and>\n     Range a \\<in> all_partitions G)", "by metis"], ["", "lemma lm036: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"a \\<in> injections (Domain a) (Range a) & \n         Range a \\<in> all_partitions G &\n         Domain a \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> injections (Domain a) (Range a) \\<and>\n    Range a \\<in> all_partitions G \\<and> Domain a \\<subseteq> N", "using assms mem_Collect_eq injections_def posssibleAllocationsRelCharacterization order_refl"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  (?a \\<in> Collect ?P) = ?P ?a\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. a \\<in> injections (Domain a) (Range a) \\<and>\n    Range a \\<in> all_partitions G \\<and> Domain a \\<subseteq> N", "by (metis (mono_tags, lifting))"], ["", "lemma lm037: \n  assumes \"a \\<in> injections (Domain a) (Range a)\" \n          \"Range a \\<in> all_partitions G\" \n          \"Domain a \\<subseteq> N\" \n  shows \"a \\<in> allAllocations N G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations N G", "using assms mem_Collect_eq posssibleAllocationsRelCharacterization injections_def"], ["proof (prove)\nusing this:\n  a \\<in> injections (Domain a) (Range a)\n  Range a \\<in> all_partitions G\n  Domain a \\<subseteq> N\n  (?a \\<in> Collect ?P) = ?P ?a\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations N G", "by (metis (erased, lifting))"], ["", "lemma characterizationallAllocations: \n  \"a \\<in> allAllocations N G = (a \\<in> injections (Domain a) (Range a)  & \n   Range a \\<in> all_partitions G & \n   Domain a \\<subseteq> N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a \\<in> injections (Domain a) (Range a) \\<and>\n     Range a \\<in> all_partitions G \\<and> Domain a \\<subseteq> N)", "using lm036 lm037"], ["proof (prove)\nusing this:\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a \\<in> injections (Domain ?a) (Range ?a) \\<and>\n  Range ?a \\<in> all_partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n  \\<lbrakk>?a \\<in> injections (Domain ?a) (Range ?a);\n   Range ?a \\<in> all_partitions ?G; Domain ?a \\<subseteq> ?N\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> allAllocations ?N ?G\n\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a \\<in> injections (Domain a) (Range a) \\<and>\n     Range a \\<in> all_partitions G \\<and> Domain a \\<subseteq> N)", "by metis"], ["", "lemma lm038: \n  assumes \"a \\<in> partitionValuedUniverse\" \n  shows \"a - b \\<in> partitionValuedUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b \\<in> partitionValuedUniverse", "using assms subset_is_non_overlapping"], ["proof (prove)\nusing this:\n  a \\<in> partitionValuedUniverse\n  \\<lbrakk>?P \\<subseteq> ?Q; is_non_overlapping ?Q\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping ?P\n\ngoal (1 subgoal):\n 1. a - b \\<in> partitionValuedUniverse", "by fast"], ["", "lemma reducedAllocation: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"a - b \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b \\<in> allocationsUniverse", "using assms lm030 lm038"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  ?a \\<in> injectionsUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> injectionsUniverse\n  ?a \\<in> partitionValuedUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> partitionValuedUniverse\n\ngoal (1 subgoal):\n 1. a - b \\<in> allocationsUniverse", "by auto"], ["", "lemma lm039: \n  assumes \"a \\<in> injectionsUniverse\" \n  shows \"a \\<in> injections (Domain a) (Range a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> injections (Domain a) (Range a)", "using assms injections_def mem_Collect_eq order_refl"], ["proof (prove)\nusing this:\n  a \\<in> injectionsUniverse\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n  (?a \\<in> Collect ?P) = ?P ?a\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. a \\<in> injections (Domain a) (Range a)", "by blast"], ["", "lemma lm040: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"a \\<in> allAllocations (Domain a) (\\<Union> (Range a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "let ?r=Range"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "let ?p=is_non_overlapping"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "let ?P=all_partitions"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "have \"?p (?r a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a)", "using assms nonOverlapping Int_iff"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  ?R \\<in> partitionValuedUniverse \\<Longrightarrow>\n  is_non_overlapping (Range ?R)\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a)", "by blast"], ["proof (state)\nthis:\n  is_non_overlapping (Range a)\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a)", "have \"?r a \\<in> ?P (\\<Union> (?r a))\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a)\n\ngoal (1 subgoal):\n 1. Range a \\<in> all_partitions (\\<Union> (Range a))", "unfolding all_partitions_def"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a)\n\ngoal (1 subgoal):\n 1. Range a \\<in> {P. P partitions \\<Union> (Range a)}", "using is_partition_of_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a)\n  ?P partitions ?A = is_partition_of' ?P ?A\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. Range a \\<in> {P. P partitions \\<Union> (Range a)}", "by (metis)"], ["proof (state)\nthis:\n  Range a \\<in> all_partitions (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  Range a \\<in> all_partitions (\\<Union> (Range a))", "show ?thesis"], ["proof (prove)\nusing this:\n  Range a \\<in> all_partitions (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "using assms IntI Int_lower1 equalityE allocationInjectionsUnivervseProperty \n           mem_Collect_eq rev_subsetD"], ["proof (prove)\nusing this:\n  Range a \\<in> all_partitions (\\<Union> (Range a))\n  a \\<in> allocationsUniverse\n  \\<lbrakk>?c \\<in> ?A; ?c \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?A \\<inter> ?B\n  ?A \\<inter> ?B \\<subseteq> ?A\n  \\<lbrakk>?A = ?B;\n   \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  allAllocations ?N ?G =\n  injectionsUniverse \\<inter>\n  {a. Domain a \\<subseteq> ?N \\<and> Range a \\<in> all_partitions ?G}\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations (Domain a) (\\<Union> (Range a))", "by (metis (lifting, no_types))"], ["proof (state)\nthis:\n  a \\<in> allAllocations (Domain a) (\\<Union> (Range a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm041: \n  \"({X} \\<in> partitionsUniverse) = (X \\<noteq> {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({X} \\<in> partitionsUniverse) = (X \\<noteq> {})", "using is_non_overlapping_def"], ["proof (prove)\nusing this:\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. ({X} \\<in> partitionsUniverse) = (X \\<noteq> {})", "by fastforce"], ["", "lemma lm042: \n  \"{(x, X)} - {(x, {})} \\<in> partitionValuedUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, X)} - {(x, {})} \\<in> partitionValuedUniverse", "using lm041"], ["proof (prove)\nusing this:\n  ({?X} \\<in> partitionsUniverse) = (?X \\<noteq> {})\n\ngoal (1 subgoal):\n 1. {(x, X)} - {(x, {})} \\<in> partitionValuedUniverse", "by auto"], ["", "lemma singlePairInInjectionsUniverse: \n  \"{(x, X)} \\<in> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, X)} \\<in> injectionsUniverse", "unfolding runiq_basic"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, X)}\n    \\<in> {R. (\\<forall>x y y'.\n                  (x, y) \\<in> R \\<and> (x, y') \\<in> R \\<longrightarrow>\n                  y = y') \\<and>\n              (\\<forall>x y y'.\n                  (x, y) \\<in> R\\<inverse> \\<and>\n                  (x, y') \\<in> R\\<inverse> \\<longrightarrow>\n                  y = y')}", "using runiq_singleton_rel"], ["proof (prove)\nusing this:\n  runiq {(?x, ?y)}\n\ngoal (1 subgoal):\n 1. {(x, X)}\n    \\<in> {R. (\\<forall>x y y'.\n                  (x, y) \\<in> R \\<and> (x, y') \\<in> R \\<longrightarrow>\n                  y = y') \\<and>\n              (\\<forall>x y y'.\n                  (x, y) \\<in> R\\<inverse> \\<and>\n                  (x, y') \\<in> R\\<inverse> \\<longrightarrow>\n                  y = y')}", "by blast"], ["", "lemma allocationUniverseProperty: \n  \"{(x,X)} - {(x,{})} \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, X)} - {(x, {})} \\<in> allocationsUniverse", "using lm042 singlePairInInjectionsUniverse lm030 Int_iff"], ["proof (prove)\nusing this:\n  {(?x, ?X)} - {(?x, {})} \\<in> partitionValuedUniverse\n  {(?x, ?X)} \\<in> injectionsUniverse\n  ?a \\<in> injectionsUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> injectionsUniverse\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n\ngoal (1 subgoal):\n 1. {(x, X)} - {(x, {})} \\<in> allocationsUniverse", "by (metis (no_types))"], ["", "(* PP is a family of partitions *)"], ["", "lemma lm043: \n  assumes \"is_non_overlapping PP\" \"is_non_overlapping (Union PP)\" \n  shows \"is_non_overlapping (Union ` PP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "let ?p=is_non_overlapping"], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "let ?U=Union"], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "let ?P2=\"?U PP\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "let ?P1=\"?U ` PP\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "have \n  0: \"\\<forall> X\\<in>?P1. \\<forall> Y \\<in> ?P1. (X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>\\<Union> ` PP.\n       \\<forall>Y\\<in>\\<Union> ` PP.\n          X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y", "using assms is_non_overlapping_def Int_absorb Int_empty_left UnionI Union_disjoint \n            ex_in_conv imageE"], ["proof (prove)\nusing this:\n  is_non_overlapping PP\n  is_non_overlapping (\\<Union> PP)\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n  ?A \\<inter> ?A = ?A\n  {} \\<inter> ?B = {}\n  \\<lbrakk>?X \\<in> ?C; ?A \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> ?A \\<in> \\<Union> ?C\n  (\\<Union> ?C \\<inter> ?A = {}) = (\\<forall>B\\<in>?C. B \\<inter> ?A = {})\n  (\\<exists>x. x \\<in> ?A) = (?A \\<noteq> {})\n  \\<lbrakk>?b \\<in> ?f ` ?A;\n   \\<And>x.\n      \\<lbrakk>?b = ?f x; x \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>\\<Union> ` PP.\n       \\<forall>Y\\<in>\\<Union> ` PP.\n          X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y", "by (metis (hide_lams, no_types))"], ["proof (state)\nthis:\n  \\<forall>X\\<in>\\<Union> ` PP.\n     \\<forall>Y\\<in>\\<Union> ` PP.\n        X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "{"], ["proof (state)\nthis:\n  \\<forall>X\\<in>\\<Union> ` PP.\n     \\<forall>Y\\<in>\\<Union> ` PP.\n        X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "fix X Y"], ["proof (state)\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "assume \n    1: \"X \\<in> ?P1 & Y\\<in>?P1 & X \\<noteq> Y\""], ["proof (state)\nthis:\n  X \\<in> \\<Union> ` PP \\<and> Y \\<in> \\<Union> ` PP \\<and> X \\<noteq> Y\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "then"], ["proof (chain)\npicking this:\n  X \\<in> \\<Union> ` PP \\<and> Y \\<in> \\<Union> ` PP \\<and> X \\<noteq> Y", "obtain XX YY \n    where \n    2: \"X = ?U XX & Y=?U YY & XX\\<in>PP & YY\\<in>PP\""], ["proof (prove)\nusing this:\n  X \\<in> \\<Union> ` PP \\<and> Y \\<in> \\<Union> ` PP \\<and> X \\<noteq> Y\n\ngoal (1 subgoal):\n 1. (\\<And>XX YY.\n        X = \\<Union> XX \\<and>\n        Y = \\<Union> YY \\<and>\n        XX \\<in> PP \\<and> YY \\<in> PP \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  X = \\<Union> XX \\<and>\n  Y = \\<Union> YY \\<and> XX \\<in> PP \\<and> YY \\<in> PP\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "then"], ["proof (chain)\npicking this:\n  X = \\<Union> XX \\<and>\n  Y = \\<Union> YY \\<and> XX \\<in> PP \\<and> YY \\<in> PP", "have \"XX \\<subseteq> Union PP & YY \\<subseteq> Union PP & XX \\<inter> YY = {}\""], ["proof (prove)\nusing this:\n  X = \\<Union> XX \\<and>\n  Y = \\<Union> YY \\<and> XX \\<in> PP \\<and> YY \\<in> PP\n\ngoal (1 subgoal):\n 1. XX \\<subseteq> \\<Union> PP \\<and>\n    YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}", "using 1 2 is_non_overlapping_def assms(1) Sup_upper"], ["proof (prove)\nusing this:\n  X = \\<Union> XX \\<and>\n  Y = \\<Union> YY \\<and> XX \\<in> PP \\<and> YY \\<in> PP\n  X \\<in> \\<Union> ` PP \\<and> Y \\<in> \\<Union> ` PP \\<and> X \\<noteq> Y\n  X = \\<Union> XX \\<and>\n  Y = \\<Union> YY \\<and> XX \\<in> PP \\<and> YY \\<in> PP\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n  is_non_overlapping PP\n  ?x \\<in> ?A \\<Longrightarrow> ?x \\<le> Sup ?A\n\ngoal (1 subgoal):\n 1. XX \\<subseteq> \\<Union> PP \\<and>\n    YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}", "by metis"], ["proof (state)\nthis:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "then"], ["proof (chain)\npicking this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}", "moreover"], ["proof (chain)\npicking this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}", "have \"\\<forall> x\\<in>XX. \\<forall> y\\<in>YY. x \\<inter> y = {}\""], ["proof (prove)\nusing this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>XX. \\<forall>y\\<in>YY. x \\<inter> y = {}", "using assms(2) is_non_overlapping_def"], ["proof (prove)\nusing this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}\n  is_non_overlapping (\\<Union> PP)\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>XX. \\<forall>y\\<in>YY. x \\<inter> y = {}", "by (metis IntI empty_iff subsetCE)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>XX. \\<forall>y\\<in>YY. x \\<inter> y = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "ultimately"], ["proof (chain)\npicking this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}\n  \\<forall>x\\<in>XX. \\<forall>y\\<in>YY. x \\<inter> y = {}", "have \"X \\<inter> Y={}\""], ["proof (prove)\nusing this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}\n  \\<forall>x\\<in>XX. \\<forall>y\\<in>YY. x \\<inter> y = {}\n\ngoal (1 subgoal):\n 1. X \\<inter> Y = {}", "using assms 0 1 2 is_non_overlapping_def"], ["proof (prove)\nusing this:\n  XX \\<subseteq> \\<Union> PP \\<and>\n  YY \\<subseteq> \\<Union> PP \\<and> XX \\<inter> YY = {}\n  \\<forall>x\\<in>XX. \\<forall>y\\<in>YY. x \\<inter> y = {}\n  is_non_overlapping PP\n  is_non_overlapping (\\<Union> PP)\n  \\<forall>X\\<in>\\<Union> ` PP.\n     \\<forall>Y\\<in>\\<Union> ` PP.\n        X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y\n  X \\<in> \\<Union> ` PP \\<and> Y \\<in> \\<Union> ` PP \\<and> X \\<noteq> Y\n  X = \\<Union> XX \\<and>\n  Y = \\<Union> YY \\<and> XX \\<in> PP \\<and> YY \\<in> PP\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. X \\<inter> Y = {}", "by auto"], ["proof (state)\nthis:\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "}"], ["proof (state)\nthis:\n  ?X4 \\<in> \\<Union> ` PP \\<and>\n  ?Y4 \\<in> \\<Union> ` PP \\<and> ?X4 \\<noteq> ?Y4 \\<Longrightarrow>\n  ?X4 \\<inter> ?Y4 = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "then"], ["proof (chain)\npicking this:\n  ?X4 \\<in> \\<Union> ` PP \\<and>\n  ?Y4 \\<in> \\<Union> ` PP \\<and> ?X4 \\<noteq> ?Y4 \\<Longrightarrow>\n  ?X4 \\<inter> ?Y4 = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  ?X4 \\<in> \\<Union> ` PP \\<and>\n  ?Y4 \\<in> \\<Union> ` PP \\<and> ?X4 \\<noteq> ?Y4 \\<Longrightarrow>\n  ?X4 \\<inter> ?Y4 = {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "using 0 is_non_overlapping_def"], ["proof (prove)\nusing this:\n  ?X4 \\<in> \\<Union> ` PP \\<and>\n  ?Y4 \\<in> \\<Union> ` PP \\<and> ?X4 \\<noteq> ?Y4 \\<Longrightarrow>\n  ?X4 \\<inter> ?Y4 = {}\n  \\<forall>X\\<in>\\<Union> ` PP.\n     \\<forall>Y\\<in>\\<Union> ` PP.\n        X \\<inter> Y = {} \\<longrightarrow> X \\<noteq> Y\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. is_non_overlapping (\\<Union> ` PP)", "by metis"], ["proof (state)\nthis:\n  is_non_overlapping (\\<Union> ` PP)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* A preservation of reallocating goods of the participants in X to a single participant i. *)"], ["", "lemma lm044: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"(a - ((X\\<union>{i})\\<times>(Range a))) \\<union> \n         ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}) \\<in> allocationsUniverse & \n         \\<Union> (Range ((a - ((X\\<union>{i})\\<times>(Range a))) \\<union> ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}))) =\n         \\<Union>(Range a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?d=Domain"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?r=Range"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?U=Union"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?p=is_non_overlapping"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?P=partitionsUniverse"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?u=runiq"], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?Xi=\"X \\<union> {i}\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?b=\"?Xi \\<times> (?r a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?a1=\"a - ?b\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?Yi=\"a``?Xi\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?Y=\"?U ?Yi\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?A2=\"{(i, ?Y)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?a3=\"{(i,{})}\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?a2=\"?A2 - ?a3\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?aa1=\"a outside ?Xi\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?c=\"?a1 \\<union> ?a2\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "let ?t1=\"?c \\<in> allocationsUniverse\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \n  1: \"?U(?r(?a1\\<union>?a2))=?U(?r ?a1) \\<union> (?U(?r ?a2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))", "by (metis Range_Un_eq Union_Un_distrib)"], ["proof (state)\nthis:\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \n  2: \"?U(?r a) \\<subseteq> ?U(?r ?a1) \\<union> ?U(a``?Xi) & ?U(?r ?a1) \\<union> ?U(?r ?a2) \\<subseteq> ?U(?r a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (Range a)\n    \\<subseteq> \\<Union>\n                 (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n                \\<Union> (a `` (X \\<union> {i})) \\<and>\n    \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n    \\<subseteq> \\<Union> (Range a)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (Range a)\n  \\<subseteq> \\<Union>\n               (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n              \\<Union> (a `` (X \\<union> {i})) \\<and>\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n  \\<subseteq> \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have\n  3: \"?u a & ?u (a^-1) & ?p (?r a) & ?r ?a1 \\<subseteq> ?r a & ?Yi \\<subseteq> ?r a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    is_non_overlapping (Range a) \\<and>\n    Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n    a `` (X \\<union> {i}) \\<subseteq> Range a", "using assms Int_iff nonOverlapping mem_Collect_eq"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  ?R \\<in> partitionValuedUniverse \\<Longrightarrow>\n  is_non_overlapping (Range ?R)\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. runiq a \\<and>\n    runiq (a\\<inverse>) \\<and>\n    is_non_overlapping (Range a) \\<and>\n    Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n    a `` (X \\<union> {i}) \\<subseteq> Range a", "by auto"], ["proof (state)\nthis:\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  is_non_overlapping (Range a) \\<and>\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n  a `` (X \\<union> {i}) \\<subseteq> Range a\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  is_non_overlapping (Range a) \\<and>\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n  a `` (X \\<union> {i}) \\<subseteq> Range a", "have \n  4: \"?p (?r ?a1) & ?p ?Yi\""], ["proof (prove)\nusing this:\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  is_non_overlapping (Range a) \\<and>\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n  a `` (X \\<union> {i}) \\<subseteq> Range a\n\ngoal (1 subgoal):\n 1. is_non_overlapping\n     (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<and>\n    is_non_overlapping (a `` (X \\<union> {i}))", "using subset_is_non_overlapping"], ["proof (prove)\nusing this:\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  is_non_overlapping (Range a) \\<and>\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n  a `` (X \\<union> {i}) \\<subseteq> Range a\n  \\<lbrakk>?P \\<subseteq> ?Q; is_non_overlapping ?Q\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping ?P\n\ngoal (1 subgoal):\n 1. is_non_overlapping\n     (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<and>\n    is_non_overlapping (a `` (X \\<union> {i}))", "by metis"], ["proof (state)\nthis:\n  is_non_overlapping (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<and>\n  is_non_overlapping (a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?a1 \\<in> allocationsUniverse & ?a2 \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n    \\<in> allocationsUniverse", "using allocationUniverseProperty assms(1) reducedAllocation"], ["proof (prove)\nusing this:\n  {(?x, ?X)} - {(?x, {})} \\<in> allocationsUniverse\n  a \\<in> allocationsUniverse\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n    \\<in> allocationsUniverse", "by fastforce"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse", "have \"(?a1 = {} \\<or> ?a2 = {})\\<longrightarrow> ?t1\""], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n    {} \\<longrightarrow>\n    a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse", "using Un_empty_left"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse\n  {} \\<union> ?B = ?B\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n    {} \\<longrightarrow>\n    a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse", "by (metis (lifting, no_types) Un_absorb2 empty_subsetI)"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"(?a1 = {} \\<or> ?a2 = {})\\<longrightarrow> ?U (?r a) = ?U (?r ?a1) \\<union> ?U (?r ?a2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n    {} \\<longrightarrow>\n    \\<Union> (Range a) =\n    \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))", "by fast"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  \\<Union> (Range a) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  \\<Union> (Range a) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))", "have \n  5: \"(?a1 = {} \\<or> ?a2 = {})\\<longrightarrow> ?thesis\""], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  \\<Union> (Range a) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n    {} \\<longrightarrow>\n    a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "using 1"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  \\<Union> (Range a) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n    {} \\<longrightarrow>\n    a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "by simp"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "{"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "assume\n    6: \"?a1\\<noteq>{} & ?a2\\<noteq>{}\""], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}", "have \"?r ?a2\\<supseteq>{?Y}\""], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {\\<Union> (a `` (X \\<union> {i}))}\n    \\<subseteq> Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})", "using Diff_cancel Range_insert empty_subsetI insert_Diff_single insert_iff insert_subset"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}\n  ?A - ?A = {}\n  Range (insert (?a, ?b) ?r) = insert ?b (Range ?r)\n  {} \\<subseteq> ?A\n  insert ?a (?A - {?a}) = insert ?a ?A\n  (?a \\<in> insert ?b ?A) = (?a = ?b \\<or> ?a \\<in> ?A)\n  (insert ?x ?A \\<subseteq> ?B) = (?x \\<in> ?B \\<and> ?A \\<subseteq> ?B)\n\ngoal (1 subgoal):\n 1. {\\<Union> (a `` (X \\<union> {i}))}\n    \\<subseteq> Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})", "by (metis (hide_lams, no_types))"], ["proof (state)\nthis:\n  {\\<Union> (a `` (X \\<union> {i}))}\n  \\<subseteq> Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  {\\<Union> (a `` (X \\<union> {i}))}\n  \\<subseteq> Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})", "have \n    7: \"?U (?r a) = ?U (?r ?a1) \\<union> ?U (?r ?a2)\""], ["proof (prove)\nusing this:\n  {\\<Union> (a `` (X \\<union> {i}))}\n  \\<subseteq> Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n\ngoal (1 subgoal):\n 1. \\<Union> (Range a) =\n    \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))", "using 2"], ["proof (prove)\nusing this:\n  {\\<Union> (a `` (X \\<union> {i}))}\n  \\<subseteq> Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<Union> (Range a)\n  \\<subseteq> \\<Union>\n               (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n              \\<Union> (a `` (X \\<union> {i})) \\<and>\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n  \\<subseteq> \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. \\<Union> (Range a) =\n    \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))", "by blast"], ["proof (state)\nthis:\n  \\<Union> (Range a) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?r ?a1 \\<noteq> {} & ?r ?a2 \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n    Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}", "using 6"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n    Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?r ?a1 \\<subseteq> a``(?d ?a1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (a - (X \\<union> {i}) \\<times> Range a)\n    \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Range (a - (X \\<union> {i}) \\<times> Range a)\n    \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)", "by blast"], ["proof (state)\nthis:\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?Yi \\<inter> (a``(?d a - ?Xi)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}", "using assms 3 6 Diff_disjoint intersectionEmptyRelationIntersectionEmpty"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  is_non_overlapping (Range a) \\<and>\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n  a `` (X \\<union> {i}) \\<subseteq> Range a\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}\n  ?A \\<inter> (?B - ?A) = {}\n  \\<lbrakk>runiq (?R\\<inverse>); runiq ?R;\n   ?X1.0 \\<inter> ?X2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> ?R `` ?X1.0 \\<inter> ?R `` ?X2.0 = {}\n\ngoal (1 subgoal):\n 1. a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}", "by metis"], ["proof (state)\nthis:\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}", "moreover"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}", "have \"?r ?a1 \\<inter> ?Yi = {} & ?Yi \\<noteq> {}\""], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n\ngoal (1 subgoal):\n 1. Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n    a `` (X \\<union> {i}) =\n    {} \\<and>\n    a `` (X \\<union> {i}) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}", "moreover"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}", "have \"?p {?r ?a1, ?Yi}\""], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. is_non_overlapping\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}", "unfolding is_non_overlapping_def"], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>Xa\\<in>{Range (a - (X \\<union> {i}) \\<times> Range a),\n                     a `` (X \\<union> {i})}.\n       \\<forall>Y\\<in>{Range (a - (X \\<union> {i}) \\<times> Range a),\n                       a `` (X \\<union> {i})}.\n          (Xa \\<inter> Y \\<noteq> {}) = (Xa = Y)", "using IntI Int_commute empty_iff insert_iff subsetI subset_empty"], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  \\<lbrakk>?c \\<in> ?A; ?c \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?A \\<inter> ?B\n  ?A \\<inter> ?B = ?B \\<inter> ?A\n  (?c \\<in> {}) = False\n  (?a \\<in> insert ?b ?A) = (?a = ?b \\<or> ?a \\<in> ?A)\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n  (?A \\<subseteq> {}) = (?A = {})\n\ngoal (1 subgoal):\n 1. \\<forall>Xa\\<in>{Range (a - (X \\<union> {i}) \\<times> Range a),\n                     a `` (X \\<union> {i})}.\n       \\<forall>Y\\<in>{Range (a - (X \\<union> {i}) \\<times> Range a),\n                       a `` (X \\<union> {i})}.\n          (Xa \\<inter> Y \\<noteq> {}) = (Xa = Y)", "by metis"], ["proof (state)\nthis:\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?U {?r ?a1, ?Yi} \\<subseteq> ?r a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n    \\<subseteq> Range a", "by auto"], ["proof (state)\nthis:\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a", "moreover"], ["proof (chain)\npicking this:\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a", "have \"?p (?U {?r ?a1, ?Yi})\""], ["proof (prove)\nusing this:\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n\ngoal (1 subgoal):\n 1. is_non_overlapping\n     (\\<Union>\n       {Range (a - (X \\<union> {i}) \\<times> Range a),\n        a `` (X \\<union> {i})})", "by (metis \"3\" Outside_def subset_is_non_overlapping)"], ["proof (state)\nthis:\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})", "moreover"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})", "have \"?p (?U`{(?r ?a1), ?Yi})\""], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n\ngoal (1 subgoal):\n 1. is_non_overlapping\n     (\\<Union> `\n      {Range (a - (X \\<union> {i}) \\<times> Range a),\n       a `` (X \\<union> {i})})", "using lm043"], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<lbrakk>is_non_overlapping ?PP;\n   is_non_overlapping (\\<Union> ?PP)\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping (\\<Union> ` ?PP)\n\ngoal (1 subgoal):\n 1. is_non_overlapping\n     (\\<Union> `\n      {Range (a - (X \\<union> {i}) \\<times> Range a),\n       a `` (X \\<union> {i})})", "by fast"], ["proof (state)\nthis:\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"... = {?U (?r ?a1), ?Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n    {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n     \\<Union> (a `` (X \\<union> {i}))}", "by force"], ["proof (state)\nthis:\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}", "moreover"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}", "have \"\\<forall> x \\<in> ?r ?a1. \\<forall> y\\<in>?Yi. x \\<noteq> y\""], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n       \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y", "using IntI empty_iff"], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<lbrakk>?c \\<in> ?A; ?c \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?A \\<inter> ?B\n  (?c \\<in> {}) = False\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n       \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y", "by metis"], ["proof (state)\nthis:\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y", "moreover"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y", "have \"\\<forall> x \\<in> ?r ?a1. \\<forall> y\\<in>?Yi. x \\<inter> y = {}\""], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n       \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}", "using 3 4 6 is_non_overlapping_def"], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y\n  runiq a \\<and>\n  runiq (a\\<inverse>) \\<and>\n  is_non_overlapping (Range a) \\<and>\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<subseteq> Range a \\<and>\n  a `` (X \\<union> {i}) \\<subseteq> Range a\n  is_non_overlapping (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<and>\n  is_non_overlapping (a `` (X \\<union> {i}))\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq> {}\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n       \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}", "by (metis rev_subsetD)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}", "have \"?U (?r ?a1) \\<inter> ?Y = {}\""], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}\n\ngoal (1 subgoal):\n 1. \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n    \\<Union> (a `` (X \\<union> {i})) =\n    {}", "using unionIntersectionEmpty"], ["proof (prove)\nusing this:\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq> {} \\<and>\n  Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq> {}\n  Range (a - (X \\<union> {i}) \\<times> Range a)\n  \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a)\n  a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {}\n  Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  a `` (X \\<union> {i}) =\n  {} \\<and>\n  a `` (X \\<union> {i}) \\<noteq> {}\n  is_non_overlapping\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<Union>\n   {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n  \\<subseteq> Range a\n  is_non_overlapping\n   (\\<Union>\n     {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  is_non_overlapping\n   (\\<Union> `\n    {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})})\n  \\<Union> `\n  {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})} =\n  {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n   \\<Union> (a `` (X \\<union> {i}))}\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y\n  \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n     \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}\n  (\\<forall>x\\<in>?X. \\<forall>y\\<in>?Y. x \\<inter> y = {}) =\n  (\\<Union> ?X \\<inter> \\<Union> ?Y = {})\n\ngoal (1 subgoal):\n 1. \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n    \\<Union> (a `` (X \\<union> {i})) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq>\n             {} \\<and>\n             Range\n              ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq>\n             {};\n     Range (a - (X \\<union> {i}) \\<times> Range a)\n     \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a);\n     a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {};\n     Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n     a `` (X \\<union> {i}) =\n     {} \\<and>\n     a `` (X \\<union> {i}) \\<noteq> {};\n     is_non_overlapping\n      {Range (a - (X \\<union> {i}) \\<times> Range a),\n       a `` (X \\<union> {i})};\n     \\<Union>\n      {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n     \\<subseteq> Range a;\n     is_non_overlapping\n      (\\<Union>\n        {Range (a - (X \\<union> {i}) \\<times> Range a),\n         a `` (X \\<union> {i})});\n     is_non_overlapping\n      (\\<Union> `\n       {Range (a - (X \\<union> {i}) \\<times> Range a),\n        a `` (X \\<union> {i})});\n     \\<Union> `\n     {Range (a - (X \\<union> {i}) \\<times> Range a),\n      a `` (X \\<union> {i})} =\n     {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n      \\<Union> (a `` (X \\<union> {i}))};\n     \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n        \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y;\n     \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n        \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {};\n     \\<And>X Y.\n        (\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<inter> y = {}) =\n        (\\<Union> X \\<inter> \\<Union> Y = {})\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (Range\n                         (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n                      \\<Union> (a `` (X \\<union> {i})) =\n                      {}", "have \"\\<forall>v0. v0 \\<in> Range (a - (X \\<union> {i}) \\<times> Range a) \\<longrightarrow> (\\<forall>v1. v1 \\<in> a `` (X \\<union> {i}) \\<longrightarrow> v0 \\<inter> v1 = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v0.\n       v0 \\<in> Range\n                 (a - (X \\<union> {i}) \\<times> Range a) \\<longrightarrow>\n       (\\<forall>v1.\n           v1 \\<in> a `` (X \\<union> {i}) \\<longrightarrow>\n           v0 \\<inter> v1 = {})", "by (metis (no_types) \\<open>\\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a). \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {}\\<close>)"], ["proof (state)\nthis:\n  \\<forall>v0.\n     v0 \\<in> Range\n               (a - (X \\<union> {i}) \\<times> Range a) \\<longrightarrow>\n     (\\<forall>v1.\n         v1 \\<in> a `` (X \\<union> {i}) \\<longrightarrow>\n         v0 \\<inter> v1 = {})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Range (a - (X \\<union> {i}) \\<times> Range a) \\<noteq>\n             {} \\<and>\n             Range\n              ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) \\<noteq>\n             {};\n     Range (a - (X \\<union> {i}) \\<times> Range a)\n     \\<subseteq> a `` Domain (a - (X \\<union> {i}) \\<times> Range a);\n     a `` (X \\<union> {i}) \\<inter> a `` (Domain a - (X \\<union> {i})) = {};\n     Range (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n     a `` (X \\<union> {i}) =\n     {} \\<and>\n     a `` (X \\<union> {i}) \\<noteq> {};\n     is_non_overlapping\n      {Range (a - (X \\<union> {i}) \\<times> Range a),\n       a `` (X \\<union> {i})};\n     \\<Union>\n      {Range (a - (X \\<union> {i}) \\<times> Range a), a `` (X \\<union> {i})}\n     \\<subseteq> Range a;\n     is_non_overlapping\n      (\\<Union>\n        {Range (a - (X \\<union> {i}) \\<times> Range a),\n         a `` (X \\<union> {i})});\n     is_non_overlapping\n      (\\<Union> `\n       {Range (a - (X \\<union> {i}) \\<times> Range a),\n        a `` (X \\<union> {i})});\n     \\<Union> `\n     {Range (a - (X \\<union> {i}) \\<times> Range a),\n      a `` (X \\<union> {i})} =\n     {\\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)),\n      \\<Union> (a `` (X \\<union> {i}))};\n     \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n        \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<noteq> y;\n     \\<forall>x\\<in>Range (a - (X \\<union> {i}) \\<times> Range a).\n        \\<forall>y\\<in>a `` (X \\<union> {i}). x \\<inter> y = {};\n     \\<And>X Y.\n        (\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<inter> y = {}) =\n        (\\<Union> X \\<inter> \\<Union> Y = {})\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (Range\n                         (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n                      \\<Union> (a `` (X \\<union> {i})) =\n                      {}", "thus \"\\<Union>(Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter> \\<Union>(a `` (X \\<union> {i})) = {}\""], ["proof (prove)\nusing this:\n  \\<forall>v0.\n     v0 \\<in> Range\n               (a - (X \\<union> {i}) \\<times> Range a) \\<longrightarrow>\n     (\\<forall>v1.\n         v1 \\<in> a `` (X \\<union> {i}) \\<longrightarrow>\n         v0 \\<inter> v1 = {})\n\ngoal (1 subgoal):\n 1. \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n    \\<Union> (a `` (X \\<union> {i})) =\n    {}", "by blast"], ["proof (state)\nthis:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (a `` (X \\<union> {i})) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (a `` (X \\<union> {i})) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (a `` (X \\<union> {i})) =\n  {}", "have \n    \"?U (?r ?a1) \\<inter> (?U (?r ?a2)) = {}\""], ["proof (prove)\nusing this:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (a `` (X \\<union> {i})) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n    {}", "by blast"], ["proof (state)\nthis:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?d ?a1 \\<inter> (?d ?a2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n    Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n    {}", "by blast"], ["proof (state)\nthis:\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?a1 \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse", "using assms(1) reducedAllocation"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse", "by blast"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "have \"?a2 \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n    \\<in> allocationsUniverse", "using allocationUniverseProperty"], ["proof (prove)\nusing this:\n  {(?x, ?X)} - {(?x, {})} \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n    \\<in> allocationsUniverse", "by fastforce"], ["proof (state)\nthis:\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {}\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse", "have \"?a1 \\<in> allocationsUniverse & ?a2 \\<in> allocationsUniverse &\n                     \\<Union>(Range ?a1) \\<inter> \\<Union>(Range ?a2) = {} & Domain ?a1 \\<inter> Domain ?a2 = {}\""], ["proof (prove)\nusing this:\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {}\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n    {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n    \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n    {} \\<and>\n    Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n    Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n    {}", "by blast"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {} \\<and>\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {} \\<and>\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}", "have ?t1"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {} \\<and>\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse", "using allocationUnion"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<in> allocationsUniverse \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<inter>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})) =\n  {} \\<and>\n  Domain (a - (X \\<union> {i}) \\<times> Range a) \\<inter>\n  Domain ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}) =\n  {}\n  \\<lbrakk>?a1.0 \\<in> allocationsUniverse; ?a2.0 \\<in> allocationsUniverse;\n   \\<Union> (Range ?a1.0) \\<inter> \\<Union> (Range ?a2.0) = {};\n   Domain ?a1.0 \\<inter> Domain ?a2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> ?a1.0 \\<union> ?a2.0 \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse", "by auto"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse", "have ?thesis"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "using 1 7"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n  \\<Union> (Range a) =\n  \\<Union> (Range (a - (X \\<union> {i}) \\<times> Range a)) \\<union>\n  \\<Union> (Range ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "by simp"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "}"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq>\n  {} \\<Longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq>\n  {} \\<Longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)", "show ?thesis"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq>\n  {} \\<Longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "using 5"], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a \\<noteq> {} \\<and>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} \\<noteq>\n  {} \\<Longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n  a - (X \\<union> {i}) \\<times> Range a = {} \\<or>\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} = {} \\<longrightarrow>\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "by linarith"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary allocationsUniverseOutsideUnion: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows   \"(a outside (X\\<union>{i})) \\<union> ({i}\\<times>({\\<Union>(a``(X\\<union>{i}))}-{{}})) \\<in> allocationsUniverse & \n           \\<Union>(Range((a outside (X\\<union>{i})) \\<union> ({i}\\<times>({\\<Union>(a``(X\\<union>{i}))}-{{}})))) = \\<Union>(Range a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "have \"a - ((X\\<union>{i})\\<times>(Range a)) = a outside (X \\<union> {i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = Outside' (X \\<union> {i}) a", "using Outside_def"], ["proof (prove)\nusing this:\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a = Outside' (X \\<union> {i}) a", "by metis"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = Outside' (X \\<union> {i}) a\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a = Outside' (X \\<union> {i}) a\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "have \"(a - ((X\\<union>{i})\\<times>(Range a))) \\<union> ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}) \\<in>\n                 allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse", "using assms lm044"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  ?a - (?X \\<union> {?i}) \\<times> Range ?a \\<union>\n  ({(?i, \\<Union> (?a `` (?X \\<union> {?i})))} - {(?i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (?a - (?X \\<union> {?i}) \\<times> Range ?a \\<union>\n      ({(?i, \\<Union> (?a `` (?X \\<union> {?i})))} - {(?i, {})}))) =\n  \\<Union> (Range ?a)\n\ngoal (1 subgoal):\n 1. a - (X \\<union> {i}) \\<times> Range a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse", "by fastforce"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "have \"\\<Union> (Range ((a - ((X\\<union>{i})\\<times>(Range a))) \\<union> ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}))) = \n                 \\<Union>(Range a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "using assms lm044"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  ?a - (?X \\<union> {?i}) \\<times> Range ?a \\<union>\n  ({(?i, \\<Union> (?a `` (?X \\<union> {?i})))} - {(?i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (?a - (?X \\<union> {?i}) \\<times> Range ?a \\<union>\n      ({(?i, \\<Union> (?a `` (?X \\<union> {?i})))} - {(?i, {})}))) =\n  \\<Union> (Range ?a)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (Range\n       (a - (X \\<union> {i}) \\<times> Range a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "by (metis (no_types))"], ["proof (state)\nthis:\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  a - (X \\<union> {i}) \\<times> Range a = Outside' (X \\<union> {i}) a\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)", "have \n     \"(a outside (X\\<union>{i})) \\<union> ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}) \\<in> allocationsUniverse & \n      \\<Union> (Range ((a outside (X\\<union>{i})) \\<union> ({(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})}))) = \\<Union>(Range a)\""], ["proof (prove)\nusing this:\n  a - (X \\<union> {i}) \\<times> Range a = Outside' (X \\<union> {i}) a\n  a - (X \\<union> {i}) \\<times> Range a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse\n  \\<Union>\n   (Range\n     (a - (X \\<union> {i}) \\<times> Range a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n    \\<Union> (Range a)", "by simp"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "have \"{(i, \\<Union> (a``(X \\<union> {i})))} - {(i,{})} = {i} \\<times> ({\\<Union> (a``(X\\<union>{i}))} - {{}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})", "by fast"], ["proof (state)\nthis:\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})", "show ?thesis"], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      ({(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})}))) =\n  \\<Union> (Range a)\n  {(i, \\<Union> (a `` (X \\<union> {i})))} - {(i, {})} =\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "by auto"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n  \\<Union> (Range a)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* If there is an allocation with a participant in its domain, then the goods allocated are non-empty *)"], ["", "lemma lm045: \n  assumes \"Domain a \\<inter> X \\<noteq> {}\" \"a \\<in> allocationsUniverse\" \n  shows   \"\\<Union>(a``X) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "let ?p = is_non_overlapping"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "let ?r = Range"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "have \"?p (?r a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a)", "using assms Int_iff nonOverlapping"], ["proof (prove)\nusing this:\n  Domain a \\<inter> X \\<noteq> {}\n  a \\<in> allocationsUniverse\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  ?R \\<in> partitionValuedUniverse \\<Longrightarrow>\n  is_non_overlapping (Range ?R)\n\ngoal (1 subgoal):\n 1. is_non_overlapping (Range a)", "by auto"], ["proof (state)\nthis:\n  is_non_overlapping (Range a)\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  is_non_overlapping (Range a)\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "have \"a``X \\<subseteq> ?r a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a `` X \\<subseteq> Range a", "by fast"], ["proof (state)\nthis:\n  a `` X \\<subseteq> Range a\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (Range a)\n  a `` X \\<subseteq> Range a", "have \"?p (a``X)\""], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a)\n  a `` X \\<subseteq> Range a\n\ngoal (1 subgoal):\n 1. is_non_overlapping (a `` X)", "using assms subset_is_non_overlapping"], ["proof (prove)\nusing this:\n  is_non_overlapping (Range a)\n  a `` X \\<subseteq> Range a\n  Domain a \\<inter> X \\<noteq> {}\n  a \\<in> allocationsUniverse\n  \\<lbrakk>?P \\<subseteq> ?Q; is_non_overlapping ?Q\\<rbrakk>\n  \\<Longrightarrow> is_non_overlapping ?P\n\ngoal (1 subgoal):\n 1. is_non_overlapping (a `` X)", "by blast"], ["proof (state)\nthis:\n  is_non_overlapping (a `` X)\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "moreover"], ["proof (state)\nthis:\n  is_non_overlapping (a `` X)\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "have \"a``X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a `` X \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  Domain a \\<inter> X \\<noteq> {}\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a `` X \\<noteq> {}", "by fast"], ["proof (state)\nthis:\n  a `` X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "ultimately"], ["proof (chain)\npicking this:\n  is_non_overlapping (a `` X)\n  a `` X \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  is_non_overlapping (a `` X)\n  a `` X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<Union> (a `` X) \\<noteq> {}", "by (metis Union_member all_not_in_conv no_empty_in_non_overlapping)"], ["proof (state)\nthis:\n  \\<Union> (a `` X) \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "(* i is an additional bidder added to X *)"], ["", "corollary lm046: \n  assumes \"Domain a \\<inter> X \\<noteq> {}\" \"a \\<in> allocationsUniverse\" \n  shows   \"{\\<Union>(a``(X\\<union>{i}))}-{{}}  =  {\\<Union>(a``(X\\<union>{i}))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n    {\\<Union> (a `` (X \\<union> {i}))}", "using assms lm045"], ["proof (prove)\nusing this:\n  Domain a \\<inter> X \\<noteq> {}\n  a \\<in> allocationsUniverse\n  \\<lbrakk>Domain ?a \\<inter> ?X \\<noteq> {};\n   ?a \\<in> allocationsUniverse\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (?a `` ?X) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n    {\\<Union> (a `` (X \\<union> {i}))}", "by fast"], ["", "(* variant of allocationsUniverseOutsideUnion *)"], ["", "corollary lm047: \n  assumes \"a \\<in> allocationsUniverse\"\n          \"(Domain a) \\<inter> X \\<noteq> {}\" \n  shows   \"(a outside (X\\<union>{i})) \\<union> ({i}\\<times>{\\<Union>(a``(X\\<union>{i}))}) \\<in> allocationsUniverse & \n                         \\<Union>(Range((a outside (X\\<union>{i})) \\<union> ({i}\\<times>{\\<Union>(a``(X\\<union>{i}))}))) = \\<Union>(Range a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "let ?t1 = \"(a outside (X\\<union>{i})) \\<union> ({i}\\<times>({\\<Union>(a``(X\\<union>{i}))}-{{}})) \\<in> allocationsUniverse\""], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "let ?t2 = \"\\<Union>(Range((a outside (X\\<union>{i})) \\<union> ({i}\\<times>({\\<Union>(a``(X\\<union>{i}))}-{{}})))) = \\<Union>(Range a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "have \n  0: \"a \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "by fast"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "then"], ["proof (chain)\npicking this:\n  a \\<in> allocationsUniverse", "have \"?t1 & ?t2\""], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "using allocationsUniverseOutsideUnion"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  Outside' (?X \\<union> {?i}) ?a \\<union>\n  {?i} \\<times> ({\\<Union> (?a `` (?X \\<union> {?i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (?X \\<union> {?i}) ?a \\<union>\n      {?i} \\<times> ({\\<Union> (?a `` (?X \\<union> {?i}))} - {{}}))) =\n  \\<Union> (Range ?a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> allocationsUniverse;\n     \\<And>a X i.\n        a \\<in> allocationsUniverse \\<Longrightarrow>\n        Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n        \\<in> allocationsUniverse \\<and>\n        \\<Union>\n         (Range\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n        \\<Union> (Range a)\\<rbrakk>\n    \\<Longrightarrow> Outside' (X \\<union> {i}) a \\<union>\n                      {i} \\<times>\n                      ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n                      \\<in> allocationsUniverse \\<and>\n                      \\<Union>\n                       (Range\n                         (Outside' (X \\<union> {i}) a \\<union>\n                          {i} \\<times>\n                          ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n                      \\<Union> (Range a)", "have \"a \\<in> allocationsUniverse \\<longrightarrow> \n          a outside (X \\<union> {i}) \\<union> {i} \\<times> ({\\<Union>(a `` (X \\<union> {i}))} - {{}}) \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse \\<longrightarrow>\n    Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse", "using allocationsUniverseOutsideUnion"], ["proof (prove)\nusing this:\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  Outside' (?X \\<union> {?i}) ?a \\<union>\n  {?i} \\<times> ({\\<Union> (?a `` (?X \\<union> {?i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (?X \\<union> {?i}) ?a \\<union>\n      {?i} \\<times> ({\\<Union> (?a `` (?X \\<union> {?i}))} - {{}}))) =\n  \\<Union> (Range ?a)\n\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse \\<longrightarrow>\n    Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse", "by fastforce"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse \\<longrightarrow>\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> allocationsUniverse;\n     \\<And>a X i.\n        a \\<in> allocationsUniverse \\<Longrightarrow>\n        Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n        \\<in> allocationsUniverse \\<and>\n        \\<Union>\n         (Range\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n        \\<Union> (Range a)\\<rbrakk>\n    \\<Longrightarrow> Outside' (X \\<union> {i}) a \\<union>\n                      {i} \\<times>\n                      ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n                      \\<in> allocationsUniverse \\<and>\n                      \\<Union>\n                       (Range\n                         (Outside' (X \\<union> {i}) a \\<union>\n                          {i} \\<times>\n                          ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n                      \\<Union> (Range a)", "hence \"a outside (X \\<union> {i}) \\<union> {i} \\<times> ({\\<Union>(a `` (X \\<union> {i}))} - {{}}) \\<in> allocationsUniverse\""], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse \\<longrightarrow>\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse", "by (metis \"0\")"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> allocationsUniverse;\n     \\<And>a X i.\n        a \\<in> allocationsUniverse \\<Longrightarrow>\n        Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n        \\<in> allocationsUniverse \\<and>\n        \\<Union>\n         (Range\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n        \\<Union> (Range a)\\<rbrakk>\n    \\<Longrightarrow> Outside' (X \\<union> {i}) a \\<union>\n                      {i} \\<times>\n                      ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n                      \\<in> allocationsUniverse \\<and>\n                      \\<Union>\n                       (Range\n                         (Outside' (X \\<union> {i}) a \\<union>\n                          {i} \\<times>\n                          ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n                      \\<Union> (Range a)", "thus \"a outside (X \\<union> {i}) \\<union> {i} \\<times> ({\\<Union>(a `` (X \\<union> {i}))} - {{}}) \\<in> \n           allocationsUniverse \\<and> \\<Union>(Range (a outside (X \\<union> {i}) \\<union> {i} \\<times> ({\\<Union>(a `` (X \\<union> {i}))} - {{}})))\n          = \\<Union>(Range a)\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "using \"0\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n    \\<Union> (Range a)", "by (metis (no_types) allocationsUniverseOutsideUnion)"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n  \\<Union> (Range a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "moreover"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "have \n  \"{\\<Union>(a``(X\\<union>{i}))}-{{}} = {\\<Union>(a``(X\\<union>{i}))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n    {\\<Union> (a `` (X \\<union> {i}))}", "using lm045 assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Domain ?a \\<inter> ?X \\<noteq> {};\n   ?a \\<in> allocationsUniverse\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (?a `` ?X) \\<noteq> {}\n  a \\<in> allocationsUniverse\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n    {\\<Union> (a `` (X \\<union> {i}))}", "by fast"], ["proof (state)\nthis:\n  {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n  {\\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "ultimately"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n  \\<Union> (Range a)\n  {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n  {\\<Union> (a `` (X \\<union> {i}))}", "show ?thesis"], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}})\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> ({\\<Union> (a `` (X \\<union> {i}))} - {{}}))) =\n  \\<Union> (Range a)\n  {\\<Union> (a `` (X \\<union> {i}))} - {{}} =\n  {\\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "by auto"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n  \\<Union> (Range a)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* The bid vector does not decrease when you bid for extra goods *)"], ["", "abbreviation \n  \"bidMonotonicity b i == \n  (\\<forall> t t'. (trivial t & trivial t' & Union t \\<subseteq> Union t') \\<longrightarrow> \n           sum b ({i}\\<times>t) \\<le> sum b ({i}\\<times>t'))\""], ["", "(* adding the goods in X weakly increases the revenue *)"], ["", "lemma lm048: \n  assumes \"bidMonotonicity b i\" \"runiq a\" \n  shows  \"sum b ({i}\\<times>((a outside X)``{i})) \\<le> sum b ({i}\\<times>{\\<Union>(a``(X\\<union>{i}))})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?u = runiq"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?I = \"{i}\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?R = \"a outside X\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?U = Union"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?Xi = \"X \\<union>?I\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?t1 = \"?R``?I\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?t2 = \"{?U (a``?Xi)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"?U (?R``?I) \\<subseteq> ?U (?R``(X\\<union>?I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' X a ,,, i\n    \\<subseteq> \\<Union> (Outside' X a `` (X \\<union> {i}))", "by blast"], ["proof (state)\nthis:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (Outside' X a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (Outside' X a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"... \\<subseteq> ?U (a``(X\\<union>?I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (Outside' X a `` (X \\<union> {i}))\n    \\<subseteq> \\<Union> (a `` (X \\<union> {i}))", "using Outside_def"], ["proof (prove)\nusing this:\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. \\<Union> (Outside' X a `` (X \\<union> {i}))\n    \\<subseteq> \\<Union> (a `` (X \\<union> {i}))", "by blast"], ["proof (state)\nthis:\n  \\<Union> (Outside' X a `` (X \\<union> {i}))\n  \\<subseteq> \\<Union> (a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (Outside' X a `` (X \\<union> {i}))\n  \\<Union> (Outside' X a `` (X \\<union> {i}))\n  \\<subseteq> \\<Union> (a `` (X \\<union> {i}))", "have \"?U (?R``?I) \\<subseteq> ?U (a``(X\\<union>?I))\""], ["proof (prove)\nusing this:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (Outside' X a `` (X \\<union> {i}))\n  \\<Union> (Outside' X a `` (X \\<union> {i}))\n  \\<subseteq> \\<Union> (a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. Outside' X a ,,, i \\<subseteq> \\<Union> (a `` (X \\<union> {i}))", "by auto"], ["proof (state)\nthis:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "then"], ["proof (chain)\npicking this:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (a `` (X \\<union> {i}))", "have \n  0: \"?U ?t1 \\<subseteq> ?U ?t2\""], ["proof (prove)\nusing this:\n  Outside' X a ,,, i \\<subseteq> \\<Union> (a `` (X \\<union> {i}))\n\ngoal (1 subgoal):\n 1. Outside' X a ,,, i\n    \\<subseteq> \\<Union> {\\<Union> (a `` (X \\<union> {i}))}", "by auto"], ["proof (state)\nthis:\n  Outside' X a ,,, i \\<subseteq> \\<Union> {\\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"?u a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq a", "using assms"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  runiq a\n\ngoal (1 subgoal):\n 1. runiq a", "by fast"], ["proof (state)\nthis:\n  runiq a\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  runiq a\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"?R \\<subseteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' X a \\<subseteq> a", "using Outside_def"], ["proof (prove)\nusing this:\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. Outside' X a \\<subseteq> a", "by blast"], ["proof (state)\nthis:\n  Outside' X a \\<subseteq> a\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  runiq a\n  Outside' X a \\<subseteq> a", "have \"?u ?R\""], ["proof (prove)\nusing this:\n  runiq a\n  Outside' X a \\<subseteq> a\n\ngoal (1 subgoal):\n 1. runiq (Outside' X a)", "using subrel_runiq"], ["proof (prove)\nusing this:\n  runiq a\n  Outside' X a \\<subseteq> a\n  \\<lbrakk>runiq ?Q; ?P \\<subseteq> ?Q\\<rbrakk> \\<Longrightarrow> runiq ?P\n\ngoal (1 subgoal):\n 1. runiq (Outside' X a)", "by metis"], ["proof (state)\nthis:\n  runiq (Outside' X a)\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "then"], ["proof (chain)\npicking this:\n  runiq (Outside' X a)", "have \"trivial ?t1\""], ["proof (prove)\nusing this:\n  runiq (Outside' X a)\n\ngoal (1 subgoal):\n 1. trivial (Outside' X a `` {i})", "by (metis runiq_alt)"], ["proof (state)\nthis:\n  trivial (Outside' X a `` {i})\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  trivial (Outside' X a `` {i})\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"trivial ?t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trivial {\\<Union> (a `` (X \\<union> {i}))}", "by (metis trivial_singleton)"], ["proof (state)\nthis:\n  trivial {\\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  trivial (Outside' X a `` {i})\n  trivial {\\<Union> (a `` (X \\<union> {i}))}", "show ?thesis"], ["proof (prove)\nusing this:\n  trivial (Outside' X a `` {i})\n  trivial {\\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "using assms 0"], ["proof (prove)\nusing this:\n  trivial (Outside' X a `` {i})\n  trivial {\\<Union> (a `` (X \\<union> {i}))}\n  bidMonotonicity b i\n  runiq a\n  Outside' X a ,,, i \\<subseteq> \\<Union> {\\<Union> (a `` (X \\<union> {i}))}\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by blast"], ["proof (state)\nthis:\n  sum b ({i} \\<times> Outside' X a `` {i})\n  \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm049:  \n  assumes \"XX \\<in> partitionValuedUniverse\" \n  shows \"{} \\<notin> Range XX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<notin> Range XX", "using assms mem_Collect_eq no_empty_in_non_overlapping"], ["proof (prove)\nusing this:\n  XX \\<in> partitionValuedUniverse\n  (?a \\<in> Collect ?P) = ?P ?a\n  is_non_overlapping ?p \\<Longrightarrow> {} \\<notin> ?p\n\ngoal (1 subgoal):\n 1. {} \\<notin> Range XX", "by auto"], ["", "corollary emptyNotInRange: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"{} \\<notin> Range a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<notin> Range a", "using assms lm049 allAllocationsUniverse"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  ?XX \\<in> partitionValuedUniverse \\<Longrightarrow> {} \\<notin> Range ?XX\n  allAllocations ?N ?G \\<subseteq> allocationsUniverse\n\ngoal (1 subgoal):\n 1. {} \\<notin> Range a", "by auto blast"], ["", "lemma lm050: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"Range a \\<subseteq> Pow G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range a \\<subseteq> Pow G", "using assms allocationInverseRangeDomainProperty is_partition_of_def"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n  ?P partitions ?A = is_partition_of' ?P ?A\n\ngoal (1 subgoal):\n 1. Range a \\<subseteq> Pow G", "by (metis subset_Pow_Union)"], ["", "corollary lm051: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"Domain a \\<subseteq> N & Range a \\<subseteq> Pow G - {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a \\<subseteq> N \\<and> Range a \\<subseteq> Pow G - {{}}", "using assms lm050 insert_Diff_single emptyNotInRange subset_insert\n        allocationInverseRangeDomainProperty"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  Range ?a \\<subseteq> Pow ?G\n  insert ?a (?A - {?a}) = insert ?a ?A\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow> {} \\<notin> Range ?a\n  ?x \\<notin> ?A \\<Longrightarrow>\n  (?A \\<subseteq> insert ?x ?B) = (?A \\<subseteq> ?B)\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n\ngoal (1 subgoal):\n 1. Domain a \\<subseteq> N \\<and> Range a \\<subseteq> Pow G - {{}}", "by metis"], ["", "corollary allocationPowerset: \n  assumes \"a \\<in> allAllocations N G\" \n  shows \"a \\<subseteq> N \\<times> (Pow G - {{}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<subseteq> N \\<times> (Pow G - {{}})", "using assms lm051"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<subseteq> Pow ?G - {{}}\n\ngoal (1 subgoal):\n 1. a \\<subseteq> N \\<times> (Pow G - {{}})", "by blast"], ["", "corollary lm052: \n  \"allAllocations N G \\<subseteq> Pow (N\\<times>(Pow G-{{}}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> Pow (N \\<times> (Pow G - {{}}))", "using allocationPowerset"], ["proof (prove)\nusing this:\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a \\<subseteq> ?N \\<times> (Pow ?G - {{}})\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> Pow (N \\<times> (Pow G - {{}}))", "by blast"], ["", "(* reformulation of 43c with given set of goods and set of participants *)"], ["", "lemma lm053: \n  assumes  \"a \\<in> allAllocations N G\" \n           \"i \\<in> N-X\" \n           \"Domain a \\<inter> X \\<noteq> {}\" \n  shows   \"a outside (X \\<union> {i}) \\<union> ({i} \\<times> {\\<Union>(a``(X\\<union>{i}))}) \\<in> \n           allAllocations (N-X) (\\<Union> (Range a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?R = \"a outside X\""], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?I = \"{i}\""], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?U = Union"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?u = runiq"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?r = Range"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?d = Domain"], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "let ?aa = \"a outside (X \\<union> {i}) \\<union> ({i} \\<times> {?U(a``(X\\<union>{i}))})\""], ["proof (state)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "have \n  1: \"a \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "using assms(1) allAllocationsUniverse  rev_subsetD"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  allAllocations ?N ?G \\<subseteq> allocationsUniverse\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "by blast"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "have \"i \\<notin> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> X", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. i \\<notin> X", "by fast"], ["proof (state)\nthis:\n  i \\<notin> X\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  i \\<notin> X", "have \n  2: \"?d a - X \\<union> {i} = ?d a \\<union> {i} - X\""], ["proof (prove)\nusing this:\n  i \\<notin> X\n\ngoal (1 subgoal):\n 1. Domain a - X \\<union> {i} = Domain a \\<union> {i} - X", "by fast"], ["proof (state)\nthis:\n  Domain a - X \\<union> {i} = Domain a \\<union> {i} - X\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "have \"a \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "using 1"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "by fast"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "moreover"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "have \"?d a \\<inter> X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a \\<inter> X \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Domain a \\<inter> X \\<noteq> {}", "by fast"], ["proof (state)\nthis:\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> allocationsUniverse\n  Domain a \\<inter> X \\<noteq> {}", "have \"?aa \\<in> allocationsUniverse & ?U (?r ?aa) = ?U (?r a)\""], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allocationsUniverse \\<and>\n    \\<Union>\n     (Range\n       (Outside' (X \\<union> {i}) a \\<union>\n        {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n    \\<Union> (Range a)", "apply (rule lm047)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n  \\<Union> (Range a)", "have \"?aa \\<in> allAllocations (?d ?aa) (?U (?r a))\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n  \\<Union> (Range a)\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations\n           (Domain\n             (Outside' (X \\<union> {i}) a \\<union>\n              {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}))\n           (\\<Union> (Range a))", "using lm040"], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allocationsUniverse \\<and>\n  \\<Union>\n   (Range\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})) =\n  \\<Union> (Range a)\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  ?a \\<in> allAllocations (Domain ?a) (\\<Union> (Range ?a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations\n           (Domain\n             (Outside' (X \\<union> {i}) a \\<union>\n              {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}))\n           (\\<Union> (Range a))", "by (metis (lifting, mono_tags))"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}))\n         (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}))\n         (\\<Union> (Range a))", "have \"?aa \\<in> allAllocations (?d ?aa \\<union> (?d a - X \\<union> {i}))  (?U (?r a))\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}))\n         (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations\n           (Domain\n             (Outside' (X \\<union> {i}) a \\<union>\n              {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n            (Domain a - X \\<union> {i}))\n           (\\<Union> (Range a))", "by (metis lm023)"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n          (Domain a - X \\<union> {i}))\n         (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "moreover"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n          (Domain a - X \\<union> {i}))\n         (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "have \"?d a - X \\<union> {i} = ?d ?aa \\<union> (?d a - X \\<union> {i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a - X \\<union> {i} =\n    Domain\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n    (Domain a - X \\<union> {i})", "using Outside_def"], ["proof (prove)\nusing this:\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. Domain a - X \\<union> {i} =\n    Domain\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n    (Domain a - X \\<union> {i})", "by auto"], ["proof (state)\nthis:\n  Domain a - X \\<union> {i} =\n  Domain\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n  (Domain a - X \\<union> {i})\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "ultimately"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n          (Domain a - X \\<union> {i}))\n         (\\<Union> (Range a))\n  Domain a - X \\<union> {i} =\n  Domain\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n  (Domain a - X \\<union> {i})", "have \"?aa \\<in> allAllocations (?d a - X \\<union> {i}) (?U (?r a))\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations\n         (Domain\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n          (Domain a - X \\<union> {i}))\n         (\\<Union> (Range a))\n  Domain a - X \\<union> {i} =\n  Domain\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<union>\n  (Domain a - X \\<union> {i})\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (Domain a - X \\<union> {i}) (\\<Union> (Range a))", "by simp"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a - X \\<union> {i}) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a - X \\<union> {i}) (\\<Union> (Range a))", "have \"?aa \\<in> allAllocations (?d a \\<union> {i} - X) (?U (?r a))\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a - X \\<union> {i}) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))", "using 2"], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a - X \\<union> {i}) (\\<Union> (Range a))\n  Domain a - X \\<union> {i} = Domain a \\<union> {i} - X\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))", "by simp"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "moreover"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "have \"?d a \\<subseteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a \\<subseteq> N", "using assms(1) posssibleAllocationsRelCharacterization"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n\ngoal (1 subgoal):\n 1. Domain a \\<subseteq> N", "by metis"], ["proof (state)\nthis:\n  Domain a \\<subseteq> N\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  Domain a \\<subseteq> N", "moreover"], ["proof (chain)\npicking this:\n  Domain a \\<subseteq> N", "have \"(?d a \\<union> {i} - X) \\<union> (N - X) = N - X\""], ["proof (prove)\nusing this:\n  Domain a \\<subseteq> N\n\ngoal (1 subgoal):\n 1. Domain a \\<union> {i} - X \\<union> (N - X) = N - X", "using assms"], ["proof (prove)\nusing this:\n  Domain a \\<subseteq> N\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Domain a \\<union> {i} - X \\<union> (N - X) = N - X", "by fast"], ["proof (state)\nthis:\n  Domain a \\<union> {i} - X \\<union> (N - X) = N - X\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "ultimately"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))\n  Domain a \\<subseteq> N\n  Domain a \\<union> {i} - X \\<union> (N - X) = N - X", "have \"?aa \\<in> allAllocations (N - X) (?U (?r a))\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))\n  Domain a \\<subseteq> N\n  Domain a \\<union> {i} - X \\<union> (N - X) = N - X\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "using lm024"], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (Domain a \\<union> {i} - X) (\\<Union> (Range a))\n  Domain a \\<subseteq> N\n  Domain a \\<union> {i} - X \\<union> (N - X) = N - X\n  allAllocations ?N1.0 ?G\n  \\<subseteq> allAllocations (?N1.0 \\<union> ?N2.0) ?G\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "by (metis (lifting, no_types) in_mono)"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "then"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))", "show ?thesis"], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "by fast"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm054: \n  assumes \"bidMonotonicity (b::_ => real) i\" \n          \"a \\<in> allocationsUniverse\" \n          \"Domain a \\<inter> X \\<noteq> {}\" \n          \"finite a\"\n  shows   \"sum b (a outside X) \\<le> \n           sum b (a outside (X \\<union> {i}) \\<union> ({i} \\<times> {\\<Union>(a``(X\\<union>{i}))}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?R = \"a outside X\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?I = \"{i}\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?U = Union"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?u = runiq"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?r = Range"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?d = Domain"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "let ?aa = \"a outside (X \\<union> {i}) \\<union> ({i} \\<times> {?U(a``(X\\<union>{i}))})\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"a \\<in> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> injectionsUniverse", "using assms"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  a \\<in> allocationsUniverse\n  Domain a \\<inter> X \\<noteq> {}\n  finite a\n\ngoal (1 subgoal):\n 1. a \\<in> injectionsUniverse", "by fast"], ["proof (state)\nthis:\n  a \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "then"], ["proof (chain)\npicking this:\n  a \\<in> injectionsUniverse", "have \n  0: \"?u a\""], ["proof (prove)\nusing this:\n  a \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. runiq a", "by simp"], ["proof (state)\nthis:\n  runiq a\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  runiq a\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"?R \\<subseteq> a & ?R--i \\<subseteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' X a \\<subseteq> a \\<and>\n    Outside' {i} (Outside' X a) \\<subseteq> a", "using Outside_def"], ["proof (prove)\nusing this:\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. Outside' X a \\<subseteq> a \\<and>\n    Outside' {i} (Outside' X a) \\<subseteq> a", "using lm088"], ["proof (prove)\nusing this:\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n  Outside' ?X ?R \\<subseteq> ?R\n\ngoal (1 subgoal):\n 1. Outside' X a \\<subseteq> a \\<and>\n    Outside' {i} (Outside' X a) \\<subseteq> a", "by auto"], ["proof (state)\nthis:\n  Outside' X a \\<subseteq> a \\<and>\n  Outside' {i} (Outside' X a) \\<subseteq> a\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  runiq a\n  Outside' X a \\<subseteq> a \\<and>\n  Outside' {i} (Outside' X a) \\<subseteq> a", "have \"finite (?R -- i) & ?u (?R--i) & ?u ?R\""], ["proof (prove)\nusing this:\n  runiq a\n  Outside' X a \\<subseteq> a \\<and>\n  Outside' {i} (Outside' X a) \\<subseteq> a\n\ngoal (1 subgoal):\n 1. finite (Outside' {i} (Outside' X a)) \\<and>\n    runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)", "using finite_subset subrel_runiq"], ["proof (prove)\nusing this:\n  runiq a\n  Outside' X a \\<subseteq> a \\<and>\n  Outside' {i} (Outside' X a) \\<subseteq> a\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  \\<lbrakk>runiq ?Q; ?P \\<subseteq> ?Q\\<rbrakk> \\<Longrightarrow> runiq ?P\n\ngoal (1 subgoal):\n 1. finite (Outside' {i} (Outside' X a)) \\<and>\n    runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)", "by (metis assms(4))"], ["proof (state)\nthis:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "then"], ["proof (chain)\npicking this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)", "moreover"], ["proof (chain)\npicking this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)", "have \"trivial ({i}\\<times>(?R``{i}))\""], ["proof (prove)\nusing this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)\n\ngoal (1 subgoal):\n 1. trivial ({i} \\<times> Outside' X a `` {i})", "using runiq_def"], ["proof (prove)\nusing this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)\n  runiq ?R = (\\<forall>X. trivial X \\<longrightarrow> trivial (?R `` X))\n\ngoal (1 subgoal):\n 1. trivial ({i} \\<times> Outside' X a `` {i})", "by (metis trivial_cartesian trivial_singleton)"], ["proof (state)\nthis:\n  trivial ({i} \\<times> Outside' X a `` {i})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  trivial ({i} \\<times> Outside' X a `` {i})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"\\<forall>X. (?R -- i) \\<inter> ({i}\\<times>X)={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Xa. Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Xa = {}", "using outside_reduces_domain"], ["proof (prove)\nusing this:\n  Domain (Outside' ?X ?P) = Domain ?P - ?X\n\ngoal (1 subgoal):\n 1. \\<forall>Xa. Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Xa = {}", "by force"], ["proof (state)\nthis:\n  \\<forall>Xa. Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Xa = {}\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)\n  trivial ({i} \\<times> Outside' X a `` {i})\n  \\<forall>Xa. Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Xa = {}", "have \n  1: \"finite (?R--i) & finite ({i}\\<times>(?R``{i})) & (?R -- i) \\<inter> ({i}\\<times>(?R``{i}))={} & \n      finite ({i} \\<times> {?U(a``(X\\<union>{i}))}) & (?R -- i) \\<inter> ({i} \\<times> {?U(a``(X\\<union>{i}))})={}\""], ["proof (prove)\nusing this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)\n  trivial ({i} \\<times> Outside' X a `` {i})\n  \\<forall>Xa. Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Xa = {}\n\ngoal (1 subgoal):\n 1. finite (Outside' {i} (Outside' X a)) \\<and>\n    finite ({i} \\<times> Outside' X a `` {i}) \\<and>\n    Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Outside' X a `` {i} =\n    {} \\<and>\n    finite ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<and>\n    Outside' {i} (Outside' X a) \\<inter>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))} =\n    {}", "using Outside_def trivial_implies_finite"], ["proof (prove)\nusing this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  runiq (Outside' {i} (Outside' X a)) \\<and> runiq (Outside' X a)\n  trivial ({i} \\<times> Outside' X a `` {i})\n  \\<forall>Xa. Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Xa = {}\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n  trivial ?X \\<Longrightarrow> finite ?X\n\ngoal (1 subgoal):\n 1. finite (Outside' {i} (Outside' X a)) \\<and>\n    finite ({i} \\<times> Outside' X a `` {i}) \\<and>\n    Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Outside' X a `` {i} =\n    {} \\<and>\n    finite ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<and>\n    Outside' {i} (Outside' X a) \\<inter>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))} =\n    {}", "by fast"], ["proof (state)\nthis:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  finite ({i} \\<times> Outside' X a `` {i}) \\<and>\n  Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Outside' X a `` {i} =\n  {} \\<and>\n  finite ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<and>\n  Outside' {i} (Outside' X a) \\<inter>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))} =\n  {}\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"?R = (?R -- i) \\<union> ({i}\\<times>?R``{i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' X a =\n    Outside' {i} (Outside' X a) \\<union> {i} \\<times> Outside' X a `` {i}", "by (metis outsideUnion)"], ["proof (state)\nthis:\n  Outside' X a =\n  Outside' {i} (Outside' X a) \\<union> {i} \\<times> Outside' X a `` {i}\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "then"], ["proof (chain)\npicking this:\n  Outside' X a =\n  Outside' {i} (Outside' X a) \\<union> {i} \\<times> Outside' X a `` {i}", "have \"sum b ?R = sum b (?R -- i) + sum b ({i}\\<times>(?R``{i}))\""], ["proof (prove)\nusing this:\n  Outside' X a =\n  Outside' {i} (Outside' X a) \\<union> {i} \\<times> Outside' X a `` {i}\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) =\n    sum b (Outside' {i} (Outside' X a)) +\n    sum b ({i} \\<times> Outside' X a `` {i})", "using 1 sum.union_disjoint"], ["proof (prove)\nusing this:\n  Outside' X a =\n  Outside' {i} (Outside' X a) \\<union> {i} \\<times> Outside' X a `` {i}\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  finite ({i} \\<times> Outside' X a `` {i}) \\<and>\n  Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Outside' X a `` {i} =\n  {} \\<and>\n  finite ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<and>\n  Outside' {i} (Outside' X a) \\<inter>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))} =\n  {}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> sum ?g (?A \\<union> ?B) = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) =\n    sum b (Outside' {i} (Outside' X a)) +\n    sum b ({i} \\<times> Outside' X a `` {i})", "by (metis (lifting) sum.union_disjoint)"], ["proof (state)\nthis:\n  sum b (Outside' X a) =\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> Outside' X a `` {i})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  sum b (Outside' X a) =\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> Outside' X a `` {i})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"sum b ({i}\\<times>(?R``{i})) \\<le> sum b ({i}\\<times>{?U(a``(X\\<union>{i}))})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "using lm048 assms(1) 0"], ["proof (prove)\nusing this:\n  \\<lbrakk>bidMonotonicity ?b ?i; runiq ?a\\<rbrakk>\n  \\<Longrightarrow> sum ?b ({?i} \\<times> Outside' ?X ?a `` {?i})\n                    \\<le> sum ?b\n                           ({?i} \\<times>\n                            {\\<Union> (?a `` (?X \\<union> {?i}))})\n  bidMonotonicity b i\n  runiq a\n\ngoal (1 subgoal):\n 1. sum b ({i} \\<times> Outside' X a `` {i})\n    \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by metis"], ["proof (state)\nthis:\n  sum b ({i} \\<times> Outside' X a `` {i})\n  \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  sum b (Outside' X a) =\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> Outside' X a `` {i})\n  sum b ({i} \\<times> Outside' X a `` {i})\n  \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"sum b ?R \\<le> sum b (?R -- i) + sum b ({i}\\<times>{?U(a``(X\\<union>{i}))})\""], ["proof (prove)\nusing this:\n  sum b (Outside' X a) =\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> Outside' X a `` {i})\n  sum b ({i} \\<times> Outside' X a `` {i})\n  \\<le> sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b (Outside' {i} (Outside' X a)) +\n          sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by linarith"], ["proof (state)\nthis:\n  sum b (Outside' X a)\n  \\<le> sum b (Outside' {i} (Outside' X a)) +\n        sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  sum b (Outside' X a)\n  \\<le> sum b (Outside' {i} (Outside' X a)) +\n        sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"... = sum b (?R -- i \\<union> ({i} \\<times> {?U(a``(X\\<union>{i}))}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum b (Outside' {i} (Outside' X a)) +\n    sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n    sum b\n     (Outside' {i} (Outside' X a) \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "using 1 sum.union_disjoint"], ["proof (prove)\nusing this:\n  finite (Outside' {i} (Outside' X a)) \\<and>\n  finite ({i} \\<times> Outside' X a `` {i}) \\<and>\n  Outside' {i} (Outside' X a) \\<inter> {i} \\<times> Outside' X a `` {i} =\n  {} \\<and>\n  finite ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) \\<and>\n  Outside' {i} (Outside' X a) \\<inter>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))} =\n  {}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> sum ?g (?A \\<union> ?B) = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. sum b (Outside' {i} (Outside' X a)) +\n    sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n    sum b\n     (Outside' {i} (Outside' X a) \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by auto"], ["proof (state)\nthis:\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "moreover"], ["proof (state)\nthis:\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "have \"... = sum b ?aa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum b\n     (Outside' {i} (Outside' X a) \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n    sum b\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by (metis outsideOutside)"], ["proof (state)\nthis:\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "ultimately"], ["proof (chain)\npicking this:\n  sum b (Outside' X a)\n  \\<le> sum b (Outside' {i} (Outside' X a)) +\n        sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "show ?thesis"], ["proof (prove)\nusing this:\n  sum b (Outside' X a)\n  \\<le> sum b (Outside' {i} (Outside' X a)) +\n        sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  sum b (Outside' {i} (Outside' X a)) +\n  sum b ({i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  sum b\n   (Outside' {i} (Outside' X a) \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}) =\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by simp"], ["proof (state)\nthis:\n  sum b (Outside' X a)\n  \\<le> sum b\n         (Outside' (X \\<union> {i}) a \\<union>\n          {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma elementOfPartitionOfFiniteSetIsFinite: \n  assumes \"finite X\" \"XX \\<in> all_partitions X\" \n  shows \"finite XX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite XX", "using all_partitions_def is_partition_of_def"], ["proof (prove)\nusing this:\n  all_partitions ?A = {P. P partitions ?A}\n  ?P partitions ?A = is_partition_of' ?P ?A\n\ngoal (1 subgoal):\n 1. finite XX", "by (metis assms(1) assms(2) finite_UnionD mem_Collect_eq)"], ["", "lemma lm055: \n  assumes \"finite N\" \"finite G\" \"a \\<in> allAllocations N G\"\n  shows \"finite a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite a", "using assms finiteRelationCharacterization rev_finite_subset"], ["proof (prove)\nusing this:\n  finite N\n  finite G\n  a \\<in> allAllocations N G\n  (finite (Domain ?Q) \\<and> finite (Range ?Q)) = finite ?Q\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite a", "by (metis characterizationallAllocations elementOfPartitionOfFiniteSetIsFinite)"], ["", "lemma allAllocationsFinite: \n  assumes \"finite N\" \"finite G\" \n  shows \"finite (allAllocations N G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (allAllocations N G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (allAllocations N G)", "have \"finite (Pow(N\\<times>(Pow G-{{}})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Pow (N \\<times> (Pow G - {{}})))", "using assms finite_Pow_iff"], ["proof (prove)\nusing this:\n  finite N\n  finite G\n  finite (Pow ?A) = finite ?A\n\ngoal (1 subgoal):\n 1. finite (Pow (N \\<times> (Pow G - {{}})))", "by blast"], ["proof (state)\nthis:\n  finite (Pow (N \\<times> (Pow G - {{}})))\n\ngoal (1 subgoal):\n 1. finite (allAllocations N G)", "then"], ["proof (chain)\npicking this:\n  finite (Pow (N \\<times> (Pow G - {{}})))", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (Pow (N \\<times> (Pow G - {{}})))\n\ngoal (1 subgoal):\n 1. finite (allAllocations N G)", "using lm052 rev_finite_subset"], ["proof (prove)\nusing this:\n  finite (Pow (N \\<times> (Pow G - {{}})))\n  allAllocations ?N ?G \\<subseteq> Pow (?N \\<times> (Pow ?G - {{}}))\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (allAllocations N G)", "by (metis(no_types))"], ["proof (state)\nthis:\n  finite (allAllocations N G)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm056: \n  assumes \"bidMonotonicity (b::_ => real) i\" \n          \"a \\<in> allAllocations N G\" \n          \"i \\<in> N-X\" \n          \"Domain a \\<inter> X \\<noteq> {}\" \n          \"finite N\" \n          \"finite G\" \n  shows   \"Max ((sum b)`(allAllocations (N-X) G)) \\<ge> \n           sum b (a outside X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "let ?aa = \"a outside (X \\<union> {i}) \\<union> ({i} \\<times> {\\<Union>(a``(X\\<union>{i}))})\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"bidMonotonicity (b::_ => real) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidMonotonicity b i", "using assms(1)"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n\ngoal (1 subgoal):\n 1. bidMonotonicity b i", "by fast"], ["proof (state)\nthis:\n  bidMonotonicity b i\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "moreover"], ["proof (state)\nthis:\n  bidMonotonicity b i\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"a \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "using assms(2) allAllocationsUniverse"], ["proof (prove)\nusing this:\n  a \\<in> allAllocations N G\n  allAllocations ?N ?G \\<subseteq> allocationsUniverse\n\ngoal (1 subgoal):\n 1. a \\<in> allocationsUniverse", "by blast"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "moreover"], ["proof (state)\nthis:\n  a \\<in> allocationsUniverse\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"Domain a \\<inter> X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain a \\<inter> X \\<noteq> {}", "using assms(4)"], ["proof (prove)\nusing this:\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Domain a \\<inter> X \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "moreover"], ["proof (state)\nthis:\n  Domain a \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"finite a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite a", "using assms lm055"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n  finite N\n  finite G\n  \\<lbrakk>finite ?N; finite ?G; ?a \\<in> allAllocations ?N ?G\\<rbrakk>\n  \\<Longrightarrow> finite ?a\n\ngoal (1 subgoal):\n 1. finite a", "by metis"], ["proof (state)\nthis:\n  finite a\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "ultimately"], ["proof (chain)\npicking this:\n  bidMonotonicity b i\n  a \\<in> allocationsUniverse\n  Domain a \\<inter> X \\<noteq> {}\n  finite a", "have \n  0: \"sum b (a outside X) \\<le> sum b ?aa\""], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  a \\<in> allocationsUniverse\n  Domain a \\<inter> X \\<noteq> {}\n  finite a\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a)\n    \\<le> sum b\n           (Outside' (X \\<union> {i}) a \\<union>\n            {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})", "by (rule lm054)"], ["proof (state)\nthis:\n  sum b (Outside' X a)\n  \\<le> sum b\n         (Outside' (X \\<union> {i}) a \\<union>\n          {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"?aa \\<in> allAllocations (N-X) (\\<Union> (Range a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "using assms lm053"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n  finite N\n  finite G\n  \\<lbrakk>?a \\<in> allAllocations ?N ?G; ?i \\<in> ?N - ?X;\n   Domain ?a \\<inter> ?X \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Outside' (?X \\<union> {?i}) ?a \\<union>\n                    {?i} \\<times> {\\<Union> (?a `` (?X \\<union> {?i}))}\n                    \\<in> allAllocations (?N - ?X) (\\<Union> (Range ?a))\n\ngoal (1 subgoal):\n 1. Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n    \\<in> allAllocations (N - X) (\\<Union> (Range a))", "by metis"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "moreover"], ["proof (state)\nthis:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"\\<Union> (Range a) = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (Range a) = G", "using assms allocationInverseRangeDomainProperty is_partition_of_def"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n  finite N\n  finite G\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n  ?P partitions ?A = is_partition_of' ?P ?A\n\ngoal (1 subgoal):\n 1. \\<Union> (Range a) = G", "by metis"], ["proof (state)\nthis:\n  \\<Union> (Range a) = G\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "ultimately"], ["proof (chain)\npicking this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n  \\<Union> (Range a) = G", "have \"sum b ?aa \\<in> (sum b)`(allAllocations (N-X) G)\""], ["proof (prove)\nusing this:\n  Outside' (X \\<union> {i}) a \\<union>\n  {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))}\n  \\<in> allAllocations (N - X) (\\<Union> (Range a))\n  \\<Union> (Range a) = G\n\ngoal (1 subgoal):\n 1. sum b\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n    \\<in> sum b ` allAllocations (N - X) G", "by (metis imageI)"], ["proof (state)\nthis:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<in> sum b ` allAllocations (N - X) G\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "moreover"], ["proof (state)\nthis:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<in> sum b ` allAllocations (N - X) G\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "have \"finite ((sum b)`(allAllocations (N-X) G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (sum b ` allAllocations (N - X) G)", "using assms allAllocationsFinite assms(5,6)"], ["proof (prove)\nusing this:\n  bidMonotonicity b i\n  a \\<in> allAllocations N G\n  i \\<in> N - X\n  Domain a \\<inter> X \\<noteq> {}\n  finite N\n  finite G\n  \\<lbrakk>finite ?N; finite ?G\\<rbrakk>\n  \\<Longrightarrow> finite (allAllocations ?N ?G)\n  finite N\n  finite G\n\ngoal (1 subgoal):\n 1. finite (sum b ` allAllocations (N - X) G)", "by (metis finite_Diff finite_imageI)"], ["proof (state)\nthis:\n  finite (sum b ` allAllocations (N - X) G)\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "ultimately"], ["proof (chain)\npicking this:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<in> sum b ` allAllocations (N - X) G\n  finite (sum b ` allAllocations (N - X) G)", "have \"sum b ?aa \\<le> Max ((sum b)`(allAllocations (N-X) G))\""], ["proof (prove)\nusing this:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<in> sum b ` allAllocations (N - X) G\n  finite (sum b ` allAllocations (N - X) G)\n\ngoal (1 subgoal):\n 1. sum b\n     (Outside' (X \\<union> {i}) a \\<union>\n      {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n    \\<le> Max (sum b ` allAllocations (N - X) G)", "by auto"], ["proof (state)\nthis:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<le> Max (sum b ` allAllocations (N - X) G)\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "then"], ["proof (chain)\npicking this:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<le> Max (sum b ` allAllocations (N - X) G)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<le> Max (sum b ` allAllocations (N - X) G)\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "using 0"], ["proof (prove)\nusing this:\n  sum b\n   (Outside' (X \\<union> {i}) a \\<union>\n    {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n  \\<le> Max (sum b ` allAllocations (N - X) G)\n  sum b (Outside' X a)\n  \\<le> sum b\n         (Outside' (X \\<union> {i}) a \\<union>\n          {i} \\<times> {\\<Union> (a `` (X \\<union> {i}))})\n\ngoal (1 subgoal):\n 1. sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)", "by linarith"], ["proof (state)\nthis:\n  sum b (Outside' X a) \\<le> Max (sum b ` allAllocations (N - X) G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cardinalityPreservation: \n  assumes \"\\<forall>X \\<in> XX. finite X\" \"is_non_overlapping XX\" \n  shows   \"card (\\<Union> XX) = sum card XX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<Union> XX) = sum card XX", "by (metis assms is_non_overlapping_def card_Union_disjoint disjointI)"], ["", "corollary cardSumCommute: \n  assumes \"XX partitions X\" \"finite X\" \"finite XX\" \n  shows   \"card (\\<Union> XX) = sum card XX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<Union> XX) = sum card XX", "using assms cardinalityPreservation"], ["proof (prove)\nusing this:\n  XX partitions X\n  finite X\n  finite XX\n  \\<lbrakk>\\<forall>X\\<in>?XX. finite X; is_non_overlapping ?XX\\<rbrakk>\n  \\<Longrightarrow> card (\\<Union> ?XX) = sum card ?XX\n\ngoal (1 subgoal):\n 1. card (\\<Union> XX) = sum card XX", "by (metis is_partition_of_def familyUnionFiniteEverySetFinite)"], ["", "(* \\<Sigma>_x\\<in> (Union C) (f x)   is the same as \\<Sigma>_x\\<in> C (\\<Sigma>_set\\<in> C (\\<Sigma>_x\\<in>set (f x))) *)"], ["", "lemma sumUnionDisjoint1: \n  assumes \"\\<forall>A\\<in>C. finite A\" \"\\<forall>A\\<in>C. \\<forall>B\\<in>C. A \\<noteq> B \\<longrightarrow> A Int B = {}\" \n  shows \"sum f (Union C) = sum (sum f) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (\\<Union> C) = sum (sum f) C", "using assms sum.Union_disjoint"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>C. finite A\n  \\<forall>A\\<in>C.\n     \\<forall>B\\<in>C. A \\<noteq> B \\<longrightarrow> A \\<inter> B = {}\n  \\<lbrakk>\\<forall>A\\<in>?C. finite A;\n   \\<forall>A\\<in>?C.\n      \\<forall>B\\<in>?C.\n         A \\<noteq> B \\<longrightarrow> A \\<inter> B = {}\\<rbrakk>\n  \\<Longrightarrow> sum ?g (\\<Union> ?C) = (sum \\<circ> sum) ?g ?C\n\ngoal (1 subgoal):\n 1. sum f (\\<Union> C) = sum (sum f) C", "by fastforce"], ["", "corollary sumUnionDisjoint2: \n  assumes \"\\<forall>x\\<in>X. finite x\" \"is_non_overlapping X\" \n  shows \"sum f (\\<Union> X) = sum (sum f) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f (\\<Union> X) = sum (sum f) X", "using assms sumUnionDisjoint1 is_non_overlapping_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. finite x\n  is_non_overlapping X\n  \\<lbrakk>\\<forall>A\\<in>?C. finite A;\n   \\<forall>A\\<in>?C.\n      \\<forall>B\\<in>?C.\n         A \\<noteq> B \\<longrightarrow> A \\<inter> B = {}\\<rbrakk>\n  \\<Longrightarrow> sum ?f (\\<Union> ?C) = sum (sum ?f) ?C\n  is_non_overlapping ?P =\n  (\\<forall>X\\<in>?P.\n      \\<forall>Y\\<in>?P. (X \\<inter> Y \\<noteq> {}) = (X = Y))\n\ngoal (1 subgoal):\n 1. sum f (\\<Union> X) = sum (sum f) X", "by fast"], ["", "corollary sumUnionDisjoint3: \n  assumes \"\\<forall>x\\<in>X. finite x\" \"X partitions XX\" \n  shows \"sum f XX = sum (sum f) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f XX = sum (sum f) X", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. finite x\n  X partitions XX\n\ngoal (1 subgoal):\n 1. sum f XX = sum (sum f) X", "by (metis is_partition_of_def sumUnionDisjoint2)"], ["", "corollary sum_associativity: \n  assumes \"finite x\" \"X partitions x\" \n  shows  \"sum f x = sum (sum f) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f x = sum (sum f) X", "using assms sumUnionDisjoint3"], ["proof (prove)\nusing this:\n  finite x\n  X partitions x\n  \\<lbrakk>\\<forall>x\\<in>?X. finite x; ?X partitions ?XX\\<rbrakk>\n  \\<Longrightarrow> sum ?f ?XX = sum (sum ?f) ?X\n\ngoal (1 subgoal):\n 1. sum f x = sum (sum f) X", "by (metis is_partition_of_def familyUnionFiniteEverySetFinite)"], ["", "lemma lm057: \n  assumes \"a \\<in> allocationsUniverse\" \"Domain a \\<subseteq> N\" \"\\<Union>(Range a) = G\" \n  shows   \"a \\<in> allAllocations N G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> allAllocations N G", "using assms posssibleAllocationsRelCharacterization lm040"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  Domain a \\<subseteq> N\n  \\<Union> (Range a) = G\n  (?a \\<in> allAllocations ?N ?G) =\n  (?a \\<in> injectionsUniverse \\<and>\n   Domain ?a \\<subseteq> ?N \\<and> Range ?a \\<in> all_partitions ?G)\n  ?a \\<in> allocationsUniverse \\<Longrightarrow>\n  ?a \\<in> allAllocations (Domain ?a) (\\<Union> (Range ?a))\n\ngoal (1 subgoal):\n 1. a \\<in> allAllocations N G", "by (metis (mono_tags, lifting))"], ["", "corollary lm058: \n  \"(allocationsUniverse \\<inter> {a. (Domain a) \\<subseteq> N & \\<Union>(Range a) = G}) \\<subseteq>\n   allAllocations N G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n    \\<subseteq> allAllocations N G", "using lm057"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> allocationsUniverse; Domain ?a \\<subseteq> ?N;\n   \\<Union> (Range ?a) = ?G\\<rbrakk>\n  \\<Longrightarrow> ?a \\<in> allAllocations ?N ?G\n\ngoal (1 subgoal):\n 1. allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n    \\<subseteq> allAllocations N G", "by fastforce"], ["", "corollary lm059: \n  \"allAllocations N G \\<subseteq> {a. (Domain a) \\<subseteq> N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> {a. Domain a \\<subseteq> N}", "using allocationInverseRangeDomainProperty"], ["proof (prove)\nusing this:\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> {a. Domain a \\<subseteq> N}", "by blast"], ["", "corollary lm060: \n  \"allAllocations N G \\<subseteq> {a. \\<Union>(Range a) = G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> {a. \\<Union> (Range a) = G}", "using is_partition_of_def allocationInverseRangeDomainProperty mem_Collect_eq subsetI"], ["proof (prove)\nusing this:\n  ?P partitions ?A = is_partition_of' ?P ?A\n  ?a \\<in> allAllocations ?N ?G \\<Longrightarrow>\n  ?a\\<inverse> \\<in> injections (Range ?a) ?N \\<and>\n  Range ?a partitions ?G \\<and> Domain ?a \\<subseteq> ?N\n  (?a \\<in> Collect ?P) = ?P ?a\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> {a. \\<Union> (Range a) = G}", "by (metis(mono_tags))"], ["", "corollary lm061: \n  \"allAllocations N G  \\<subseteq>  allocationsUniverse &\n   allAllocations N G \\<subseteq> {a. (Domain a) \\<subseteq> N & \\<Union>(Range a) = G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> allocationsUniverse \\<and>\n    allAllocations N G\n    \\<subseteq> {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "using lm059 lm060 conj_subset_def allAllocationsUniverse"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G \\<subseteq> {a. Domain a \\<subseteq> ?N}\n  allAllocations ?N ?G \\<subseteq> {a. \\<Union> (Range a) = ?G}\n  (?A \\<subseteq> {x. ?P x \\<and> ?Q x}) =\n  (?A \\<subseteq> {x. ?P x} \\<and> ?A \\<subseteq> {x. ?Q x})\n  allAllocations ?N ?G \\<subseteq> allocationsUniverse\n\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> allocationsUniverse \\<and>\n    allAllocations N G\n    \\<subseteq> {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "by (metis (no_types))"], ["", "corollary allAllocationsIntersectionSubset: \n  \"allAllocations N G \\<subseteq> \n   allocationsUniverse \\<inter> {a. (Domain a) \\<subseteq> N & \\<Union>(Range a) = G}\"\n  (is \"?L \\<subseteq> ?R1 \\<inter> ?R2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G\n    \\<subseteq> allocationsUniverse \\<inter>\n                {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G\n    \\<subseteq> allocationsUniverse \\<inter>\n                {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "have \"?L \\<subseteq> ?R1 & ?L \\<subseteq> ?R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G \\<subseteq> allocationsUniverse \\<and>\n    allAllocations N G\n    \\<subseteq> {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "by (rule lm061)"], ["proof (state)\nthis:\n  allAllocations N G \\<subseteq> allocationsUniverse \\<and>\n  allAllocations N G\n  \\<subseteq> {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n\ngoal (1 subgoal):\n 1. allAllocations N G\n    \\<subseteq> allocationsUniverse \\<inter>\n                {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "thus ?thesis"], ["proof (prove)\nusing this:\n  allAllocations N G \\<subseteq> allocationsUniverse \\<and>\n  allAllocations N G\n  \\<subseteq> {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n\ngoal (1 subgoal):\n 1. allAllocations N G\n    \\<subseteq> allocationsUniverse \\<inter>\n                {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "by auto"], ["proof (state)\nthis:\n  allAllocations N G\n  \\<subseteq> allocationsUniverse \\<inter>\n              {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary allAllocationsIntersection: \n  \"allAllocations N G = \n   (allocationsUniverse \\<inter> {a. (Domain a) \\<subseteq> N & \\<Union>(Range a) = G})\" \n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N G =\n    allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "have \"?L \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N G\n    \\<subseteq> allocationsUniverse \\<inter>\n                {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "using allAllocationsIntersectionSubset"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G\n  \\<subseteq> allocationsUniverse \\<inter>\n              {a. Domain a \\<subseteq> ?N \\<and> \\<Union> (Range a) = ?G}\n\ngoal (1 subgoal):\n 1. allAllocations N G\n    \\<subseteq> allocationsUniverse \\<inter>\n                {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "by metis"], ["proof (state)\nthis:\n  allAllocations N G\n  \\<subseteq> allocationsUniverse \\<inter>\n              {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "moreover"], ["proof (state)\nthis:\n  allAllocations N G\n  \\<subseteq> allocationsUniverse \\<inter>\n              {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "have \"?R \\<subseteq> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n    \\<subseteq> allAllocations N G", "using lm058"], ["proof (prove)\nusing this:\n  allocationsUniverse \\<inter>\n  {a. Domain a \\<subseteq> ?N \\<and> \\<Union> (Range a) = ?G}\n  \\<subseteq> allAllocations ?N ?G\n\ngoal (1 subgoal):\n 1. allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n    \\<subseteq> allAllocations N G", "by fast"], ["proof (state)\nthis:\n  allocationsUniverse \\<inter>\n  {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n  \\<subseteq> allAllocations N G\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "ultimately"], ["proof (chain)\npicking this:\n  allAllocations N G\n  \\<subseteq> allocationsUniverse \\<inter>\n              {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n  allocationsUniverse \\<inter>\n  {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n  \\<subseteq> allAllocations N G", "show ?thesis"], ["proof (prove)\nusing this:\n  allAllocations N G\n  \\<subseteq> allocationsUniverse \\<inter>\n              {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n  allocationsUniverse \\<inter>\n  {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n  \\<subseteq> allAllocations N G\n\ngoal (1 subgoal):\n 1. allAllocations N G =\n    allocationsUniverse \\<inter>\n    {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}", "by force"], ["proof (state)\nthis:\n  allAllocations N G =\n  allocationsUniverse \\<inter>\n  {a. Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary allAllocationsIntersectionSetEquals: \n  \"a \\<in> allAllocations N G  = \n   (a \\<in> allocationsUniverse  & (Domain a) \\<subseteq> N & \\<Union>(Range a) = G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a \\<in> allocationsUniverse \\<and>\n     Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G)", "using allAllocationsIntersection Int_Collect"], ["proof (prove)\nusing this:\n  allAllocations ?N ?G =\n  allocationsUniverse \\<inter>\n  {a. Domain a \\<subseteq> ?N \\<and> \\<Union> (Range a) = ?G}\n  (?x \\<in> ?A \\<inter> {x. ?P x}) = (?x \\<in> ?A \\<and> ?P ?x)\n\ngoal (1 subgoal):\n 1. (a \\<in> allAllocations N G) =\n    (a \\<in> allocationsUniverse \\<and>\n     Domain a \\<subseteq> N \\<and> \\<Union> (Range a) = G)", "by (metis (mono_tags, lifting))"], ["", "corollary allocationsUniverseOutside: \n  assumes \"a \\<in> allocationsUniverse\" \n  shows \"a outside X \\<in> allocationsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' X a \\<in> allocationsUniverse", "using assms Outside_def"], ["proof (prove)\nusing this:\n  a \\<in> allocationsUniverse\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n\ngoal (1 subgoal):\n 1. Outside' X a \\<in> allocationsUniverse", "by (metis (lifting, mono_tags) reducedAllocation)"], ["", "subsection \\<open>Bridging theorem for injections\\<close>"], ["", "lemma lm062: \n  \"totalRels {} Y = {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. totalRels {} Y = {{}}", "by fast"], ["", "lemma lm063: \n  \"{} \\<in> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<in> injectionsUniverse", "by (metis CollectI converse_empty runiq_emptyrel)"], ["", "lemma lm064: \n  \"injectionsUniverse \\<inter> (totalRels {} Y)  =  {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injectionsUniverse \\<inter> totalRels {} Y = {{}}", "using lm062 lm063"], ["proof (prove)\nusing this:\n  totalRels {} ?Y = {{}}\n  {} \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. injectionsUniverse \\<inter> totalRels {} Y = {{}}", "by fast"], ["", "lemma lm065: \n  assumes \"runiq f\" \"x\\<notin>Domain f\" \n  shows \"{ f \\<union> {(x, y)} | y . y \\<in> A } \\<subseteq> runiqs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "unfolding paste_def runiqs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> Collect runiq", "using assms runiq_basic"], ["proof (prove)\nusing this:\n  runiq f\n  x \\<notin> Domain f\n  runiq ?R =\n  (\\<forall>x y y'.\n      (x, y) \\<in> ?R \\<and> (x, y') \\<in> ?R \\<longrightarrow> y = y')\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> Collect runiq", "by blast"], ["", "lemma lm066: \n  \"converse ` (converse ` X)  =  X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` converse ` X = X", "by auto"], ["", "lemma lm067: \n  \"runiq (f^-1) = (f \\<in> converse`runiqs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (f\\<inverse>) = (f \\<in> converse ` runiqs)", "unfolding runiqs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (f\\<inverse>) = (f \\<in> converse ` Collect runiq)", "by auto"], ["", "lemma lm068: \n  assumes \"runiq (f^-1)\" \"A \\<inter> Range f  =  {}\" \n  shows   \"converse ` { f \\<union> {(x, y)} | y . y \\<in> A } \\<subseteq> runiqs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "using assms lm065"], ["proof (prove)\nusing this:\n  runiq (f\\<inverse>)\n  A \\<inter> Range f = {}\n  \\<lbrakk>runiq ?f; ?x \\<notin> Domain ?f\\<rbrakk>\n  \\<Longrightarrow> {?f \\<union> {(?x, y)} |y. y \\<in> ?A}\n                    \\<subseteq> runiqs\n\ngoal (1 subgoal):\n 1. converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "by fast"], ["", "lemma lm069: \n  assumes \"f\\<in>converse`runiqs\" \"A \\<inter> Range f  =  {}\" \n  shows   \"{f \\<union> {(x, y)}| y. y \\<in> A} \\<subseteq> converse`runiqs\" \n  (is \"?l \\<subseteq> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "have \"runiq (f^-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runiq (f\\<inverse>)", "using assms(1) lm067"], ["proof (prove)\nusing this:\n  f \\<in> converse ` runiqs\n  runiq (?f\\<inverse>) = (?f \\<in> converse ` runiqs)\n\ngoal (1 subgoal):\n 1. runiq (f\\<inverse>)", "by blast"], ["proof (state)\nthis:\n  runiq (f\\<inverse>)\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "then"], ["proof (chain)\npicking this:\n  runiq (f\\<inverse>)", "have \"converse ` ?l \\<subseteq> runiqs\""], ["proof (prove)\nusing this:\n  runiq (f\\<inverse>)\n\ngoal (1 subgoal):\n 1. converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "using assms(2)"], ["proof (prove)\nusing this:\n  runiq (f\\<inverse>)\n  A \\<inter> Range f = {}\n\ngoal (1 subgoal):\n 1. converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "by (rule lm068)"], ["proof (state)\nthis:\n  converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "then"], ["proof (chain)\npicking this:\n  converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "have \"?r \\<supseteq> converse`(converse`?l)\""], ["proof (prove)\nusing this:\n  converse ` {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs\n\ngoal (1 subgoal):\n 1. converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A}\n    \\<subseteq> converse ` runiqs", "by auto"], ["proof (state)\nthis:\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A}\n  \\<subseteq> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "moreover"], ["proof (state)\nthis:\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A}\n  \\<subseteq> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "have \"converse`(converse`?l)=?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A} =\n    {f \\<union> {(x, y)} |y. y \\<in> A}", "by (rule lm066)"], ["proof (state)\nthis:\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A} =\n  {f \\<union> {(x, y)} |y. y \\<in> A}\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "ultimately"], ["proof (chain)\npicking this:\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A}\n  \\<subseteq> converse ` runiqs\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A} =\n  {f \\<union> {(x, y)} |y. y \\<in> A}", "show ?thesis"], ["proof (prove)\nusing this:\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A}\n  \\<subseteq> converse ` runiqs\n  converse ` converse ` {f \\<union> {(x, y)} |y. y \\<in> A} =\n  {f \\<union> {(x, y)} |y. y \\<in> A}\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "by simp"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm070: \n  \"{ R \\<union> {(x, y)} | y . y \\<in> A } \\<subseteq> totalRels ({x} \\<union> Domain R) (A \\<union> Range R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R \\<union> {(x, y)} |y. y \\<in> A}\n    \\<subseteq> totalRels ({x} \\<union> Domain R) (A \\<union> Range R)", "by force"], ["", "lemma lm071: \n  \"injectionsUniverse  =  runiqs \\<inter> converse`runiqs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injectionsUniverse = runiqs \\<inter> converse ` runiqs", "unfolding runiqs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. injectionsUniverse = Collect runiq \\<inter> converse ` Collect runiq", "by auto"], ["", "lemma lm072: \n  assumes \"f \\<in> injectionsUniverse\" \"x \\<notin> Domain f\" \"A \\<inter> (Range f) = {}\" \n  shows   \"{f \\<union> {(x, y)}| y. y \\<in> A} \\<subseteq> injectionsUniverse\" \n  (is \"?l \\<subseteq> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "have \"f \\<in> converse`runiqs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> converse ` runiqs", "using assms(1) lm071"], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse\n  injectionsUniverse = runiqs \\<inter> converse ` runiqs\n\ngoal (1 subgoal):\n 1. f \\<in> converse ` runiqs", "by blast"], ["proof (state)\nthis:\n  f \\<in> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "then"], ["proof (chain)\npicking this:\n  f \\<in> converse ` runiqs", "have \"?l \\<subseteq> converse`runiqs\""], ["proof (prove)\nusing this:\n  f \\<in> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "using assms(3)"], ["proof (prove)\nusing this:\n  f \\<in> converse ` runiqs\n  A \\<inter> Range f = {}\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs", "by (rule lm069)"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "moreover"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "have \"?l \\<subseteq> runiqs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "using assms(1,2) lm065"], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse\n  x \\<notin> Domain f\n  \\<lbrakk>runiq ?f; ?x \\<notin> Domain ?f\\<rbrakk>\n  \\<Longrightarrow> {?f \\<union> {(?x, y)} |y. y \\<in> ?A}\n                    \\<subseteq> runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "by force"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "ultimately"], ["proof (chain)\npicking this:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs", "show ?thesis"], ["proof (prove)\nusing this:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "using lm071"], ["proof (prove)\nusing this:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> converse ` runiqs\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> runiqs\n  injectionsUniverse = runiqs \\<inter> converse ` runiqs\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse", "by blast"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> A} \\<subseteq> injectionsUniverse\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm073: \n  \"injections X Y = totalRels X Y \\<inter> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections X Y = totalRels X Y \\<inter> injectionsUniverse", "using lm008"], ["proof (prove)\nusing this:\n  injections ?X ?Y = totalRels ?X ?Y \\<inter> injectionsUniverse\n\ngoal (1 subgoal):\n 1. injections X Y = totalRels X Y \\<inter> injectionsUniverse", "by metis"], ["", "lemma lm074: \n  assumes \"f \\<in> injectionsUniverse\" \n  shows   \"f outside A \\<in> injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' A f \\<in> injectionsUniverse", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. Outside' A f \\<in> injectionsUniverse", "by (metis (no_types) Outside_def lm030)"], ["", "lemma lm075: \n  assumes \"R \\<in> totalRels A B\" \n  shows   \"R outside C \\<in> totalRels (A-C) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' C R \\<in> totalRels (A - C) B", "unfolding Outside_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R - C \\<times> Range R \\<in> totalRels (A - C) B", "using assms"], ["proof (prove)\nusing this:\n  R \\<in> totalRels A B\n\ngoal (1 subgoal):\n 1. R - C \\<times> Range R \\<in> totalRels (A - C) B", "by blast"], ["", "lemma lm076: \n  assumes \"g \\<in> injections A B\" \n  shows   \"g outside C \\<in> injections (A - C) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' C g \\<in> injections (A - C) B", "using assms Outside_def Range_outside_sub lm030 mem_Collect_eq outside_reduces_domain"], ["proof (prove)\nusing this:\n  g \\<in> injections A B\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n  Range ?R \\<subseteq> ?Y \\<Longrightarrow>\n  Range (Outside' ?X ?R) \\<subseteq> ?Y\n  ?a \\<in> injectionsUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> injectionsUniverse\n  (?a \\<in> Collect ?P) = ?P ?a\n  Domain (Outside' ?X ?P) = Domain ?P - ?X\n\ngoal (1 subgoal):\n 1. Outside' C g \\<in> injections (A - C) B", "unfolding injections_def"], ["proof (prove)\nusing this:\n  g \\<in> {R. Domain R = A \\<and>\n              Range R \\<subseteq> B \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)}\n  Outside' ?X ?R = ?R - ?X \\<times> Range ?R\n  Range ?R \\<subseteq> ?Y \\<Longrightarrow>\n  Range (Outside' ?X ?R) \\<subseteq> ?Y\n  ?a \\<in> injectionsUniverse \\<Longrightarrow>\n  ?a - ?b \\<in> injectionsUniverse\n  (?a \\<in> Collect ?P) = ?P ?a\n  Domain (Outside' ?X ?P) = Domain ?P - ?X\n\ngoal (1 subgoal):\n 1. Outside' C g\n    \\<in> {R. Domain R = A - C \\<and>\n              Range R \\<subseteq> B \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)}", "by fastforce"], ["", "lemma lm077: \n  assumes \"g \\<in> injections A B\" \n  shows   \"g outside C \\<in> injections (A - C) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' C g \\<in> injections (A - C) B", "using assms lm076"], ["proof (prove)\nusing this:\n  g \\<in> injections A B\n  ?g \\<in> injections ?A ?B \\<Longrightarrow>\n  Outside' ?C ?g \\<in> injections (?A - ?C) ?B\n\ngoal (1 subgoal):\n 1. Outside' C g \\<in> injections (A - C) B", "by metis"], ["", "lemma lm078: \n  \"{x}\\<times>{y}={(x,y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<times> {y} = {(x, y)}", "by simp"], ["", "lemma lm079: \n  assumes \"x \\<in> Domain f\" \"runiq f\" \n  shows \"{x}\\<times>f``{x} = {(x,f,,x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<times> f `` {x} = {(x, f ,, x)}", "using assms lm078 Image_runiq_eq_eval"], ["proof (prove)\nusing this:\n  x \\<in> Domain f\n  runiq f\n  {?x} \\<times> {?y} = {(?x, ?y)}\n  \\<lbrakk>?x \\<in> Domain ?R; runiq ?R\\<rbrakk>\n  \\<Longrightarrow> ?R `` {?x} = {?R ,, ?x}\n\ngoal (1 subgoal):\n 1. {x} \\<times> f `` {x} = {(x, f ,, x)}", "by metis"], ["", "corollary lm080: \n  assumes \"x \\<in> Domain f\" \"runiq f\" \n  shows   \"f = (f -- x) \\<union> {(x,f,,x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Outside' {x} f \\<union> {(x, f ,, x)}", "using assms lm079 outsideUnion"], ["proof (prove)\nusing this:\n  x \\<in> Domain f\n  runiq f\n  \\<lbrakk>?x \\<in> Domain ?f; runiq ?f\\<rbrakk>\n  \\<Longrightarrow> {?x} \\<times> ?f `` {?x} = {(?x, ?f ,, ?x)}\n  ?R = Outside' {?x} ?R \\<union> {?x} \\<times> ?R `` {?x}\n\ngoal (1 subgoal):\n 1. f = Outside' {x} f \\<union> {(x, f ,, x)}", "by metis"], ["", "lemma lm081: \n  assumes \"f \\<in> injectionsUniverse\" \n  shows   \"Range(f outside A) = Range f - f``A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (Outside' A f) = Range f - f `` A", "using assms mem_Collect_eq rangeOutside"], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>runiq ?f; runiq (?f\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> Range (Outside' ?X ?f) = Range ?f - ?f `` ?X\n\ngoal (1 subgoal):\n 1. Range (Outside' A f) = Range f - f `` A", "by (metis)"], ["", "lemma lm082: \n  assumes \"g \\<in> injections X Y\" \"x \\<in> Domain g\" \n  shows   \"g \\<in> {g--x \\<union> {(x,y)}|y. y \\<in> Y - (Range(g--x))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "let ?f = \"g--x\""], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "have \"g\\<in>injectionsUniverse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> injectionsUniverse", "using assms(1) lm008"], ["proof (prove)\nusing this:\n  g \\<in> injections X Y\n  injections ?X ?Y = totalRels ?X ?Y \\<inter> injectionsUniverse\n\ngoal (1 subgoal):\n 1. g \\<in> injectionsUniverse", "by fast"], ["proof (state)\nthis:\n  g \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "then"], ["proof (chain)\npicking this:\n  g \\<in> injectionsUniverse", "moreover"], ["proof (chain)\npicking this:\n  g \\<in> injectionsUniverse", "have \"g,,x \\<in> g``{x}\""], ["proof (prove)\nusing this:\n  g \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. g ,, x \\<in> g `` {x}", "using assms(2)"], ["proof (prove)\nusing this:\n  g \\<in> injectionsUniverse\n  x \\<in> Domain g\n\ngoal (1 subgoal):\n 1. g ,, x \\<in> g `` {x}", "by (metis Image_runiq_eq_eval insertI1 mem_Collect_eq)"], ["proof (state)\nthis:\n  g ,, x \\<in> g `` {x}\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "ultimately"], ["proof (chain)\npicking this:\n  g \\<in> injectionsUniverse\n  g ,, x \\<in> g `` {x}", "have \"g,,x \\<in> Y-Range ?f\""], ["proof (prove)\nusing this:\n  g \\<in> injectionsUniverse\n  g ,, x \\<in> g `` {x}\n\ngoal (1 subgoal):\n 1. g ,, x \\<in> Y - Range (Outside' {x} g)", "using lm081 assms(1)"], ["proof (prove)\nusing this:\n  g \\<in> injectionsUniverse\n  g ,, x \\<in> g `` {x}\n  ?f \\<in> injectionsUniverse \\<Longrightarrow>\n  Range (Outside' ?A ?f) = Range ?f - ?f `` ?A\n  g \\<in> injections X Y\n\ngoal (1 subgoal):\n 1. g ,, x \\<in> Y - Range (Outside' {x} g)", "unfolding injections_def"], ["proof (prove)\nusing this:\n  g \\<in> injectionsUniverse\n  g ,, x \\<in> g `` {x}\n  ?f \\<in> injectionsUniverse \\<Longrightarrow>\n  Range (Outside' ?A ?f) = Range ?f - ?f `` ?A\n  g \\<in> {R. Domain R = X \\<and>\n              Range R \\<subseteq> Y \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)}\n\ngoal (1 subgoal):\n 1. g ,, x \\<in> Y - Range (Outside' {x} g)", "by fast"], ["proof (state)\nthis:\n  g ,, x \\<in> Y - Range (Outside' {x} g)\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "moreover"], ["proof (state)\nthis:\n  g ,, x \\<in> Y - Range (Outside' {x} g)\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "have \"g=?f\\<union>{(x, g,,x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = Outside' {x} g \\<union> {(x, g ,, x)}", "using assms lm080 mem_Collect_eq"], ["proof (prove)\nusing this:\n  g \\<in> injections X Y\n  x \\<in> Domain g\n  \\<lbrakk>?x \\<in> Domain ?f; runiq ?f\\<rbrakk>\n  \\<Longrightarrow> ?f = Outside' {?x} ?f \\<union> {(?x, ?f ,, ?x)}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. g = Outside' {x} g \\<union> {(x, g ,, x)}", "unfolding injections_def"], ["proof (prove)\nusing this:\n  g \\<in> {R. Domain R = X \\<and>\n              Range R \\<subseteq> Y \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)}\n  x \\<in> Domain g\n  \\<lbrakk>?x \\<in> Domain ?f; runiq ?f\\<rbrakk>\n  \\<Longrightarrow> ?f = Outside' {?x} ?f \\<union> {(?x, ?f ,, ?x)}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. g = Outside' {x} g \\<union> {(x, g ,, x)}", "by (metis (lifting))"], ["proof (state)\nthis:\n  g = Outside' {x} g \\<union> {(x, g ,, x)}\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "ultimately"], ["proof (chain)\npicking this:\n  g ,, x \\<in> Y - Range (Outside' {x} g)\n  g = Outside' {x} g \\<union> {(x, g ,, x)}", "show ?thesis"], ["proof (prove)\nusing this:\n  g ,, x \\<in> Y - Range (Outside' {x} g)\n  g = Outside' {x} g \\<union> {(x, g ,, x)}\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "by blast"], ["proof (state)\nthis:\n  g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n           y \\<in> Y - Range (Outside' {x} g)}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm083: \n  assumes \"x \\<notin> X\" \"g \\<in> injections ({x} \\<union> X) Y\" \n  shows \"g--x \\<in> injections X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Outside' {x} g \\<in> injections X Y", "using assms lm077"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  g \\<in> injections ({x} \\<union> X) Y\n  ?g \\<in> injections ?A ?B \\<Longrightarrow>\n  Outside' ?C ?g \\<in> injections (?A - ?C) ?B\n\ngoal (1 subgoal):\n 1. Outside' {x} g \\<in> injections X Y", "by (metis Diff_insert_absorb insert_is_Un)"], ["", "corollary lm084: \n  assumes \"x \\<notin> X\" \"g \\<in> injections ({x} \\<union> X) Y\" \n  (is \"g \\<in> injections (?X) Y\") \n  shows   \"\\<exists> f \\<in> injections X Y. g \\<in> {f \\<union> {(x,y)}|y. y \\<in> Y - (Range f)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "let ?f = \"g--x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "have \n  0: \"g\\<in>injections ?X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> injections ({x} \\<union> X) Y", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  g \\<in> injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. g \\<in> injections ({x} \\<union> X) Y", "by metis"], ["proof (state)\nthis:\n  g \\<in> injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "have \"Domain g=?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain g = {x} \\<union> X", "using assms(2) mem_Collect_eq"], ["proof (prove)\nusing this:\n  g \\<in> injections ({x} \\<union> X) Y\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. Domain g = {x} \\<union> X", "unfolding injections_def"], ["proof (prove)\nusing this:\n  g \\<in> {R. Domain R = {x} \\<union> X \\<and>\n              Range R \\<subseteq> Y \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. Domain g = {x} \\<union> X", "by (metis (mono_tags, lifting))"], ["proof (state)\nthis:\n  Domain g = {x} \\<union> X\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "then"], ["proof (chain)\npicking this:\n  Domain g = {x} \\<union> X", "have \n  1: \"x \\<in> Domain g\""], ["proof (prove)\nusing this:\n  Domain g = {x} \\<union> X\n\ngoal (1 subgoal):\n 1. x \\<in> Domain g", "by simp"], ["proof (state)\nthis:\n  x \\<in> Domain g\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "then"], ["proof (chain)\npicking this:\n  x \\<in> Domain g", "have \"?f \\<in> injections X Y\""], ["proof (prove)\nusing this:\n  x \\<in> Domain g\n\ngoal (1 subgoal):\n 1. Outside' {x} g \\<in> injections X Y", "using assms lm083"], ["proof (prove)\nusing this:\n  x \\<in> Domain g\n  x \\<notin> X\n  g \\<in> injections ({x} \\<union> X) Y\n  \\<lbrakk>?x \\<notin> ?X;\n   ?g \\<in> injections ({?x} \\<union> ?X) ?Y\\<rbrakk>\n  \\<Longrightarrow> Outside' {?x} ?g \\<in> injections ?X ?Y\n\ngoal (1 subgoal):\n 1. Outside' {x} g \\<in> injections X Y", "by fast"], ["proof (state)\nthis:\n  Outside' {x} g \\<in> injections X Y\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "moreover"], ["proof (state)\nthis:\n  Outside' {x} g \\<in> injections X Y\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "have \"g\\<in>{?f\\<union>{(x,y)}|y. y\\<in>Y-Range ?f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "using 0 1"], ["proof (prove)\nusing this:\n  g \\<in> injections ({x} \\<union> X) Y\n  x \\<in> Domain g\n\ngoal (1 subgoal):\n 1. g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n             y \\<in> Y - Range (Outside' {x} g)}", "by (rule lm082)"], ["proof (state)\nthis:\n  g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n           y \\<in> Y - Range (Outside' {x} g)}\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "ultimately"], ["proof (chain)\npicking this:\n  Outside' {x} g \\<in> injections X Y\n  g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n           y \\<in> Y - Range (Outside' {x} g)}", "show ?thesis"], ["proof (prove)\nusing this:\n  Outside' {x} g \\<in> injections X Y\n  g \\<in> {Outside' {x} g \\<union> {(x, y)} |y.\n           y \\<in> Y - Range (Outside' {x} g)}\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>injections X Y.\n       g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "by blast"], ["proof (state)\nthis:\n  \\<exists>f\\<in>injections X Y.\n     g \\<in> {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm085: \n  assumes \"x \\<notin> X\" \n  shows  \"injections ({x} \\<union> X) Y \\<subseteq> \n          (\\<Union> f \\<in> injections X Y. {f \\<union> {(x, y)} | y . y \\<in> Y - (Range f)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections ({x} \\<union> X) Y\n    \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                    {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "using assms lm084"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  \\<lbrakk>?x \\<notin> ?X;\n   ?g \\<in> injections ({?x} \\<union> ?X) ?Y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f\\<in>injections ?X ?Y.\n                       ?g \\<in> {f \\<union> {(?x, y)} |y.\n                                 y \\<in> ?Y - Range f}\n\ngoal (1 subgoal):\n 1. injections ({x} \\<union> X) Y\n    \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                    {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "by auto"], ["", "lemma lm086: \n  assumes \"x \\<notin> X\" \n  shows  \"(\\<Union> f\\<in>injections X Y. {f \\<union> {(x, y)} | y . y \\<in> Y-Range f}) \\<subseteq> \n          injections ({x} \\<union> X) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "using assms lm072 injections_def lm073 lm070"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  \\<lbrakk>?f \\<in> injectionsUniverse; ?x \\<notin> Domain ?f;\n   ?A \\<inter> Range ?f = {}\\<rbrakk>\n  \\<Longrightarrow> {?f \\<union> {(?x, y)} |y. y \\<in> ?A}\n                    \\<subseteq> injectionsUniverse\n  injections ?X ?Y =\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)}\n  injections ?X ?Y = totalRels ?X ?Y \\<inter> injectionsUniverse\n  {?R \\<union> {(?x, y)} |y. y \\<in> ?A}\n  \\<subseteq> totalRels ({?x} \\<union> Domain ?R) (?A \\<union> Range ?R)\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "assume \"f \\<in> injections X Y\""], ["proof (state)\nthis:\n  f \\<in> injections X Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "then"], ["proof (chain)\npicking this:\n  f \\<in> injections X Y", "have \n    0: \"f \\<in> injectionsUniverse & x \\<notin> Domain f & Domain f = X & Range f \\<subseteq> Y\""], ["proof (prove)\nusing this:\n  f \\<in> injections X Y\n\ngoal (1 subgoal):\n 1. f \\<in> injectionsUniverse \\<and>\n    x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> injections X Y\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. f \\<in> injectionsUniverse \\<and>\n    x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y", "unfolding injections_def"], ["proof (prove)\nusing this:\n  f \\<in> {R. Domain R = X \\<and>\n              Range R \\<subseteq> Y \\<and>\n              runiq R \\<and> runiq (R\\<inverse>)}\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. f \\<in> injectionsUniverse \\<and>\n    x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y", "by fast"], ["proof (state)\nthis:\n  f \\<in> injectionsUniverse \\<and>\n  x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "then"], ["proof (chain)\npicking this:\n  f \\<in> injectionsUniverse \\<and>\n  x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y", "have \"f \\<in> injectionsUniverse\""], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse \\<and>\n  x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. f \\<in> injectionsUniverse", "by fast"], ["proof (state)\nthis:\n  f \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "moreover"], ["proof (state)\nthis:\n  f \\<in> injectionsUniverse\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "have \"x \\<notin> Domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> Domain f", "using 0"], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse \\<and>\n  x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. x \\<notin> Domain f", "by fast"], ["proof (state)\nthis:\n  x \\<notin> Domain f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "moreover"], ["proof (state)\nthis:\n  x \\<notin> Domain f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "have \n    1: \"(Y-Range f) \\<inter> Range f = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Y - Range f) \\<inter> Range f = {}", "by blast"], ["proof (state)\nthis:\n  (Y - Range f) \\<inter> Range f = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> injectionsUniverse\n  x \\<notin> Domain f\n  (Y - Range f) \\<inter> Range f = {}", "have \"{f \\<union> {(x, y)} | y . y \\<in> (Y-Range f)} \\<subseteq> injectionsUniverse\""], ["proof (prove)\nusing this:\n  f \\<in> injectionsUniverse\n  x \\<notin> Domain f\n  (Y - Range f) \\<inter> Range f = {}\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n    \\<subseteq> injectionsUniverse", "by (rule lm072)"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> injectionsUniverse\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "moreover"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> injectionsUniverse\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "have \"{f \\<union> {(x, y)} | y . y \\<in> (Y-Range f)} \\<subseteq> totalRels ({x} \\<union> X) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n    \\<subseteq> totalRels ({x} \\<union> X) Y", "using lm070 0"], ["proof (prove)\nusing this:\n  {?R \\<union> {(?x, y)} |y. y \\<in> ?A}\n  \\<subseteq> totalRels ({?x} \\<union> Domain ?R) (?A \\<union> Range ?R)\n  f \\<in> injectionsUniverse \\<and>\n  x \\<notin> Domain f \\<and> Domain f = X \\<and> Range f \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n    \\<subseteq> totalRels ({x} \\<union> X) Y", "by force"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> totalRels ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "ultimately"], ["proof (chain)\npicking this:\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> injectionsUniverse\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> totalRels ({x} \\<union> X) Y", "have \"{f \\<union> {(x, y)} | y . y \\<in> (Y-Range f)} \\<subseteq> \n                     injectionsUniverse \\<inter> totalRels ({x}\\<union>X) Y\""], ["proof (prove)\nusing this:\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> injectionsUniverse\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> totalRels ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n    \\<subseteq> injectionsUniverse \\<inter> totalRels ({x} \\<union> X) Y", "by auto"], ["proof (state)\nthis:\n  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n  \\<subseteq> injectionsUniverse \\<inter> totalRels ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "}"], ["proof (state)\nthis:\n  ?f2 \\<in> injections X Y \\<Longrightarrow>\n  {?f2 \\<union> {(x, y)} |y. y \\<in> Y - Range ?f2}\n  \\<subseteq> injectionsUniverse \\<inter> totalRels ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> X;\n     \\<And>f x A.\n        \\<lbrakk>f \\<in> injectionsUniverse; x \\<notin> Domain f;\n         A \\<inter> Range f = {}\\<rbrakk>\n        \\<Longrightarrow> {f \\<union> {(x, y)} |y. y \\<in> A}\n                          \\<subseteq> injectionsUniverse;\n     \\<And>X Y.\n        injections X Y =\n        {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)};\n     \\<And>X Y. injections X Y = totalRels X Y \\<inter> injectionsUniverse;\n     \\<And>R x A.\n        {R \\<union> {(x, y)} |y. y \\<in> A}\n        \\<subseteq> totalRels ({x} \\<union> Domain R)\n                     (A \\<union> Range R)\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>f\\<in>injections X Y.\n                          {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n                      \\<subseteq> injections ({x} \\<union> X) Y", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?f2 \\<in> injections X Y \\<Longrightarrow>\n  {?f2 \\<union> {(x, y)} |y. y \\<in> Y - Range ?f2}\n  \\<subseteq> injectionsUniverse \\<inter> totalRels ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "using lm008"], ["proof (prove)\nusing this:\n  ?f2 \\<in> injections X Y \\<Longrightarrow>\n  {?f2 \\<union> {(x, y)} |y. y \\<in> Y - Range ?f2}\n  \\<subseteq> injectionsUniverse \\<inter> totalRels ({x} \\<union> X) Y\n  injections ?X ?Y = totalRels ?X ?Y \\<inter> injectionsUniverse\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "unfolding injections_def"], ["proof (prove)\nusing this:\n  ?f2\n  \\<in> {R. Domain R = X \\<and>\n            Range R \\<subseteq> Y \\<and>\n            runiq R \\<and> runiq (R\\<inverse>)} \\<Longrightarrow>\n  {?f2 \\<union> {(x, y)} |y. y \\<in> Y - Range ?f2}\n  \\<subseteq> injectionsUniverse \\<inter> totalRels ({x} \\<union> X) Y\n  {R. Domain R = ?X \\<and>\n      Range R \\<subseteq> ?Y \\<and> runiq R \\<and> runiq (R\\<inverse>)} =\n  totalRels ?X ?Y \\<inter> injectionsUniverse\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>{R. Domain R = X \\<and>\n                       Range R \\<subseteq> Y \\<and>\n                       runiq R \\<and> runiq (R\\<inverse>)}.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> {R. Domain R = {x} \\<union> X \\<and>\n                    Range R \\<subseteq> Y \\<and>\n                    runiq R \\<and> runiq (R\\<inverse>)}", "by blast"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary injectionsUnionCommute: \n  assumes \"x \\<notin> X\" \n  shows   \"(\\<Union> f\\<in>injections X Y. {f \\<union> {(x, y)} | y . y \\<in> Y - (Range f)}) = \n           injections ({x} \\<union> X) Y\" \n  (is \"?r=injections ?X _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "have \n  0: \"?r = (\\<Union> f\\<in>injections X Y. {f \\<union> {(x, y)} | y . y \\<in> Y-Range f})\" \n    (is \"_=?r'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "by blast"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "have \"?r' \\<subseteq> injections ?X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "by (rule lm086)"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "moreover"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "have \"... = injections ?X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections ({x} \\<union> X) Y = injections ({x} \\<union> X) Y", "unfolding lm005"], ["proof (prove)\ngoal (1 subgoal):\n 1. injections ({x} \\<union> X) Y = injections ({x} \\<union> X) Y", "by simp"], ["proof (state)\nthis:\n  injections ({x} \\<union> X) Y = injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n  injections ({x} \\<union> X) Y = injections ({x} \\<union> X) Y", "have \"?r \\<subseteq> injections ?X Y\""], ["proof (prove)\nusing this:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n  injections ({x} \\<union> X) Y = injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "using 0"], ["proof (prove)\nusing this:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n  injections ({x} \\<union> X) Y = injections ({x} \\<union> X) Y\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n    \\<subseteq> injections ({x} \\<union> X) Y", "by simp"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "moreover"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "have \"injections ?X Y \\<subseteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections ({x} \\<union> X) Y\n    \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                    {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. injections ({x} \\<union> X) Y\n    \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                    {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "by (rule lm085)"], ["proof (state)\nthis:\n  injections ({x} \\<union> X) Y\n  \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n  injections ({x} \\<union> X) Y\n  \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  \\<subseteq> injections ({x} \\<union> X) Y\n  injections ({x} \\<union> X) Y\n  \\<subseteq> (\\<Union>f\\<in>injections X Y.\n                  {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "by blast"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> X) Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm087: \n  assumes \"\\<forall> x. (P x \\<longrightarrow> (f x = g x))\" \n  shows   \"Union {f x|x. P x} = Union {g x | x. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {f x |x. P x} = \\<Union> {g x |x. P x}", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x. P x \\<longrightarrow> f x = g x\n\ngoal (1 subgoal):\n 1. \\<Union> {f x |x. P x} = \\<Union> {g x |x. P x}", "by blast"], ["", "lemma lm088: \n  assumes \"x \\<notin> Domain R\" \n  shows \"R +* {(x,y)} = R \\<union> {(x,y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R +< {(x, y)} = R \\<union> {(x, y)}", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> Domain R\n\ngoal (1 subgoal):\n 1. R +< {(x, y)} = R \\<union> {(x, y)}", "by (metis (erased, lifting) Domain_empty Domain_insert Int_insert_right_if0\n                              disjoint_iff_not_equal ex_in_conv paste_disj_domains)"], ["", "(* Union of {f ...} where f ranges over injections X Y *)"], ["", "lemma lm089: \n  assumes \"x \\<notin> X\" \n  shows \"(\\<Union> f \\<in> injections X Y. {f +* {(x, y)} | y . y \\<in> Y-Range f}) = \n         (\\<Union> f \\<in> injections X Y. {f \\<union>  {(x, y)}  | y . y \\<in> Y-Range f})\" \n  (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "have \n  0: \"\\<forall>f \\<in> injections X Y. x \\<notin> Domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>injections X Y. x \\<notin> Domain f", "unfolding injections_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>{R. Domain R = X \\<and>\n                       Range R \\<subseteq> Y \\<and>\n                       runiq R \\<and> runiq (R\\<inverse>)}.\n       x \\<notin> Domain f", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>{R. Domain R = X \\<and>\n                       Range R \\<subseteq> Y \\<and>\n                       runiq R \\<and> runiq (R\\<inverse>)}.\n       x \\<notin> Domain f", "by fast"], ["proof (state)\nthis:\n  \\<forall>f\\<in>injections X Y. x \\<notin> Domain f\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "then"], ["proof (chain)\npicking this:\n  \\<forall>f\\<in>injections X Y. x \\<notin> Domain f", "have \n  1: \"?l=Union {{f +* {(x, y)} | y . y \\<in> Y-Range f}|f .f \\<in> injections X Y & x \\<notin> Domain f}\" \n  (is \"_=?l'\")"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>injections X Y. x \\<notin> Domain f\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    \\<Union>\n     {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n      f \\<in> injections X Y \\<and> x \\<notin> Domain f}", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>injections X Y. x \\<notin> Domain f\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    \\<Union>\n     {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n      f \\<in> injections X Y \\<and> x \\<notin> Domain f}", "by auto"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "moreover"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "have \n  2: \"?r=Union {{f \\<union> {(x, y)} | y . y \\<in> Y-Range f}|f .f \\<in> injections X Y & x \\<notin> Domain f}\" \n  (is \"_=?r'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    \\<Union>\n     {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n      f \\<in> injections X Y \\<and> x \\<notin> Domain f}", "using assms 0"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  \\<forall>f\\<in>injections X Y. x \\<notin> Domain f\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    \\<Union>\n     {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n      f \\<in> injections X Y \\<and> x \\<notin> Domain f}", "by auto"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  \\<Union>\n   {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "have \"\\<forall> f. f\\<in>injections X Y & x \\<notin> Domain f \\<longrightarrow> \n        {f +* {(x, y)} | y . y \\<in> Y-Range f}={f \\<union> {(x, y)} | y . y \\<in> Y-Range f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f.\n       f \\<in> injections X Y \\<and> x \\<notin> Domain f \\<longrightarrow>\n       {f +< {(x, y)} |y. y \\<in> Y - Range f} =\n       {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "using lm088"], ["proof (prove)\nusing this:\n  ?x \\<notin> Domain ?R \\<Longrightarrow>\n  ?R +< {(?x, ?y)} = ?R \\<union> {(?x, ?y)}\n\ngoal (1 subgoal):\n 1. \\<forall>f.\n       f \\<in> injections X Y \\<and> x \\<notin> Domain f \\<longrightarrow>\n       {f +< {(x, y)} |y. y \\<in> Y - Range f} =\n       {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "by force"], ["proof (state)\nthis:\n  \\<forall>f.\n     f \\<in> injections X Y \\<and> x \\<notin> Domain f \\<longrightarrow>\n     {f +< {(x, y)} |y. y \\<in> Y - Range f} =\n     {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "then"], ["proof (chain)\npicking this:\n  \\<forall>f.\n     f \\<in> injections X Y \\<and> x \\<notin> Domain f \\<longrightarrow>\n     {f +< {(x, y)} |y. y \\<in> Y - Range f} =\n     {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}", "have \"?l'=?r'\""], ["proof (prove)\nusing this:\n  \\<forall>f.\n     f \\<in> injections X Y \\<and> x \\<notin> Domain f \\<longrightarrow>\n     {f +< {(x, y)} |y. y \\<in> Y - Range f} =\n     {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n      f \\<in> injections X Y \\<and> x \\<notin> Domain f} =\n    \\<Union>\n     {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n      f \\<in> injections X Y \\<and> x \\<notin> Domain f}", "by (rule lm087)"], ["proof (state)\nthis:\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f} =\n  \\<Union>\n   {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "then"], ["proof (chain)\npicking this:\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f} =\n  \\<Union>\n   {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}", "show \"?l = ?r\""], ["proof (prove)\nusing this:\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f} =\n  \\<Union>\n   {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "using 1 2"], ["proof (prove)\nusing this:\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f} =\n  \\<Union>\n   {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  \\<Union>\n   {{f +< {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  \\<Union>\n   {{f \\<union> {(x, y)} |y. y \\<in> Y - Range f} |f.\n    f \\<in> injections X Y \\<and> x \\<notin> Domain f}\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "by presburger"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary lm090: \n  assumes \"x \\<notin> X\" \n  shows   \"(\\<Union> f \\<in> injections X Y. {f +* {(x, y)} | y . y \\<in> Y-Range f}) = \n           injections ({x} \\<union> X) Y\" \n  (is \"?l=?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "have \"?l=(\\<Union> f\\<in>injections X Y. {f \\<union> {(x, y)} | y . y \\<in> Y-Range f})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})", "by (rule lm089)"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "moreover"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "have \"... = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "by (rule injectionsUnionCommute)"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> X) Y", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f})\n  (\\<Union>f\\<in>injections X Y.\n      {f \\<union> {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> X) Y\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections X Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> X) Y", "by simp"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections X Y. {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> X) Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm091: \n  \"set [ f \\<union> {(x,y)} . y \\<leftarrow> (filter (%y. y \\<notin> (Range f)) Y) ] = \n   {f \\<union> {(x,y)} | y . y \\<in> (set Y) -     (Range f)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>y. f \\<union> {(x, y)})\n          (filter (\\<lambda>y. y \\<notin> Range f) Y)) =\n    {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f}", "by auto"], ["", "(* relationship of list and set notation for function application *)"], ["", "lemma lm092: \n  assumes \"\\<forall>x \\<in> set L. set (F x) = G x\" \n  shows \"set (concat [ F x . x <- L]) = (\\<Union> x\\<in>set L. G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat (map F L)) = \\<Union> (G ` set L)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set L. set (F x) = G x\n\ngoal (1 subgoal):\n 1. set (concat (map F L)) = \\<Union> (G ` set L)", "by force"], ["", "(* relationship of list and set notation for function extension *)"], ["", "lemma lm093: \n  \"set (concat [ [ f \\<union> {(x,y)} . y \\<leftarrow> (filter (%y. y \\<notin> Range f) Y) ]. f \\<leftarrow> F ]) =\n   (\\<Union> f \\<in> set F. {f \\<union> {(x,y)} | y . y \\<in> (set Y) - (Range f)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>f.\n                   map (\\<lambda>y. f \\<union> {(x, y)})\n                    (filter (\\<lambda>y. y \\<notin> Range f) Y))\n            F)) =\n    (\\<Union>f\\<in>set F. {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "by auto"], ["", "(* relationship of list vs set comprehension versions of function update*)"], ["", "lemma lm094: \n  assumes \"finite Y\" \n  shows   \"set [ f +* {(x,y)} . y \\<leftarrow> sorted_list_of_set (Y - (Range f)) ] =\n           {      f +* {(x,y)} | y . y \\<in>                 Y - (Range f)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>y. f +< {(x, y)})\n          (sorted_list_of_set (Y - Range f))) =\n    {f +< {(x, y)} |y. y \\<in> Y - Range f}", "using assms"], ["proof (prove)\nusing this:\n  finite Y\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>y. f +< {(x, y)})\n          (sorted_list_of_set (Y - Range f))) =\n    {f +< {(x, y)} |y. y \\<in> Y - Range f}", "by auto"], ["", "lemma lm095: \n  assumes \"finite Y\" \n  shows \"set (concat [[f +* {(x,y)}. y \\<leftarrow> sorted_list_of_set(Y - (Range f))]. f \\<leftarrow> F]) =\n         (\\<Union> f \\<in> set F.{f +* {(x,y)} | y . y \\<in> Y - (Range f)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>f.\n                   map (\\<lambda>y. f +< {(x, y)})\n                    (sorted_list_of_set (Y - Range f)))\n            F)) =\n    (\\<Union>f\\<in>set F. {f +< {(x, y)} |y. y \\<in> Y - Range f})", "using assms lm094 lm092"], ["proof (prove)\nusing this:\n  finite Y\n  finite ?Y \\<Longrightarrow>\n  set (map (\\<lambda>y. ?f +< {(?x, y)})\n        (sorted_list_of_set (?Y - Range ?f))) =\n  {?f +< {(?x, y)} |y. y \\<in> ?Y - Range ?f}\n  \\<forall>x\\<in>set ?L. set (?F x) = ?G x \\<Longrightarrow>\n  set (concat (map ?F ?L)) = \\<Union> (?G ` set ?L)\n\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>f.\n                   map (\\<lambda>y. f +< {(x, y)})\n                    (sorted_list_of_set (Y - Range f)))\n            F)) =\n    (\\<Union>f\\<in>set F. {f +< {(x, y)} |y. y \\<in> Y - Range f})", "by auto"], ["", "subsection \\<open>Computable injections\\<close>"], ["", "fun injectionsAlg \n    where \n    \"injectionsAlg [] (Y::'a list) = [{}]\" |\n    \"injectionsAlg (x#xs) Y = \n       concat [ [R\\<union>{(x,y)}. y \\<leftarrow> (filter (%y. y \\<notin> Range R) Y)]\n               .R \\<leftarrow> injectionsAlg xs Y ]\""], ["", "corollary lm096: \n  \"set (injectionsAlg (x # xs) Y) = \n   (\\<Union> f \\<in> set (injectionsAlg xs Y). {f \\<union> {(x,y)} | y . y \\<in> (set Y) - (Range f)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    (\\<Union>f\\<in>set (injectionsAlg xs Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "using lm093"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>f.\n                 map (\\<lambda>y. f \\<union> {(?x, y)})\n                  (filter (\\<lambda>y. y \\<notin> Range f) ?Y))\n          ?F)) =\n  (\\<Union>f\\<in>set ?F.\n      {f \\<union> {(?x, y)} |y. y \\<in> set ?Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    (\\<Union>f\\<in>set (injectionsAlg xs Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "by auto"], ["", "corollary lm097: \n  assumes \"set (injectionsAlg xs Y) = injections (set xs) (set Y)\" \n  shows   \"set (injectionsAlg (x # xs) Y) = \n           (\\<Union> f \\<in> injections (set xs) (set Y). {f \\<union> {(x,y)} | y . y \\<in> (set Y) - (Range f)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    (\\<Union>f\\<in>injections (set xs) (set Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "using assms lm096"], ["proof (prove)\nusing this:\n  set (injectionsAlg xs Y) = injections (set xs) (set Y)\n  set (injectionsAlg (?x # ?xs) ?Y) =\n  (\\<Union>f\\<in>set (injectionsAlg ?xs ?Y).\n      {f \\<union> {(?x, y)} |y. y \\<in> set ?Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    (\\<Union>f\\<in>injections (set xs) (set Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "by auto"], ["", "text\\<open>We sometimes use parallel @{term abbreviation} and @{term definition} for the same object to save typing `unfolding xxx' each time. There is also different behaviour in the code extraction.\\<close>"], ["", "lemma lm098:  \n  \"injections {} Y  =  {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections {} Y = {{}}", "by (simp add: lm008 lm062 runiq_emptyrel)"], ["", "lemma lm099: \n  \"injections {} Y  =  {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injections {} Y = {{}}", "unfolding injections_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {R. Domain R = {} \\<and>\n        Range R \\<subseteq> Y \\<and> runiq R \\<and> runiq (R\\<inverse>)} =\n    {{}}", "by (metis lm098 injections_def)"], ["", "lemma injectionsFromEmptyIsEmpty: \n  \"injectionsAlg [] Y  =  [{}]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. injectionsAlg [] Y = [{}]", "by simp"], ["", "(* Relation between classical and algorithm definition of injections for induction step *)"], ["", "lemma lm100: \n  assumes \"x \\<notin> set xs\" \"set (injectionsAlg xs Y) = injections (set xs) (set Y)\" \n  shows   \"set (injectionsAlg (x # xs) Y) = injections ({x} \\<union> set xs) (set Y)\" \n  (is \"?l=?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    injections ({x} \\<union> set xs) (set Y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    injections ({x} \\<union> set xs) (set Y)", "have \"?l = (\\<Union> f\\<in>injections (set xs) (set Y). {f \\<union> {(x,y)} | y . y \\<in> (set Y)-Range f})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    (\\<Union>f\\<in>injections (set xs) (set Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "using assms(2)"], ["proof (prove)\nusing this:\n  set (injectionsAlg xs Y) = injections (set xs) (set Y)\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    (\\<Union>f\\<in>injections (set xs) (set Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})", "by (rule lm097)"], ["proof (state)\nthis:\n  set (injectionsAlg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    injections ({x} \\<union> set xs) (set Y)", "moreover"], ["proof (state)\nthis:\n  set (injectionsAlg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    injections ({x} \\<union> set xs) (set Y)", "have \"... = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections (set xs) (set Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f}) =\n    injections ({x} \\<union> set xs) (set Y)", "using assms(1)"], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections (set xs) (set Y).\n        {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f}) =\n    injections ({x} \\<union> set xs) (set Y)", "by (rule injectionsUnionCommute)"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f}) =\n  injections ({x} \\<union> set xs) (set Y)\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    injections ({x} \\<union> set xs) (set Y)", "ultimately"], ["proof (chain)\npicking this:\n  set (injectionsAlg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f}) =\n  injections ({x} \\<union> set xs) (set Y)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (injectionsAlg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f})\n  (\\<Union>f\\<in>injections (set xs) (set Y).\n      {f \\<union> {(x, y)} |y. y \\<in> set Y - Range f}) =\n  injections ({x} \\<union> set xs) (set Y)\n\ngoal (1 subgoal):\n 1. set (injectionsAlg (x # xs) Y) =\n    injections ({x} \\<union> set xs) (set Y)", "by simp"], ["proof (state)\nthis:\n  set (injectionsAlg (x # xs) Y) = injections ({x} \\<union> set xs) (set Y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm101: \n  assumes \"x \\<notin> set xs\" \n          \"set (injections_alg xs Y) = injections (set xs) Y\" \n          \"finite Y\" \n  shows    \"set (injections_alg (x#xs) Y) = injections ({x} \\<union> set xs) Y\" \n  (is \"?l=?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y", "have \"?l = (\\<Union> f\\<in>injections (set xs) Y. {f +* {(x,y)} | y . y \\<in> Y-Range f})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) =\n    (\\<Union>f\\<in>injections (set xs) Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f})", "using assms(2,3) lm095"], ["proof (prove)\nusing this:\n  set (injections_alg xs Y) = injections (set xs) Y\n  finite Y\n  finite ?Y \\<Longrightarrow>\n  set (concat\n        (map (\\<lambda>f.\n                 map (\\<lambda>y. f +< {(?x, y)})\n                  (sorted_list_of_set (?Y - Range f)))\n          ?F)) =\n  (\\<Union>f\\<in>set ?F. {f +< {(?x, y)} |y. y \\<in> ?Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) =\n    (\\<Union>f\\<in>injections (set xs) Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f})", "by auto"], ["proof (state)\nthis:\n  set (injections_alg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y", "moreover"], ["proof (state)\nthis:\n  set (injections_alg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f})\n\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y", "have \"... = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections (set xs) Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> set xs) Y", "using assms(1)"], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>injections (set xs) Y.\n        {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n    injections ({x} \\<union> set xs) Y", "by (rule lm090)"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> set xs) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y", "ultimately"], ["proof (chain)\npicking this:\n  set (injections_alg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f})\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> set xs) Y", "show ?thesis"], ["proof (prove)\nusing this:\n  set (injections_alg (x # xs) Y) =\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f})\n  (\\<Union>f\\<in>injections (set xs) Y.\n      {f +< {(x, y)} |y. y \\<in> Y - Range f}) =\n  injections ({x} \\<union> set xs) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y", "by simp"], ["proof (state)\nthis:\n  set (injections_alg (x # xs) Y) = injections ({x} \\<union> set xs) Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma listInduct: \n  assumes \"P []\" \"\\<forall> xs x. P xs \\<longrightarrow> P (x#xs)\" \n  shows   \"\\<forall>x. P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. P x", "using assms"], ["proof (prove)\nusing this:\n  P []\n  \\<forall>xs x. P xs \\<longrightarrow> P (x # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>x. P x", "by (metis structInduct)"], ["", "lemma injectionsFromEmptyAreEmpty: \n  \"set (injections_alg [] Z) = {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injections_alg [] Z) = {{}}", "by simp"], ["", "theorem injections_equiv: \n  assumes \"finite Y\" and \"distinct X\" \n  shows  \"set (injections_alg X Y) = injections (set X) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "let ?P=\"\\<lambda> l. distinct l \\<longrightarrow> (set (injections_alg l Y)=injections (set l) Y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "have \"?P []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct [] \\<longrightarrow>\n    set (injections_alg [] Y) = injections (set []) Y", "using injectionsFromEmptyAreEmpty list.set(1) lm099"], ["proof (prove)\nusing this:\n  set (injections_alg [] ?Z) = {{}}\n  set [] = {}\n  injections {} ?Y = {{}}\n\ngoal (1 subgoal):\n 1. distinct [] \\<longrightarrow>\n    set (injections_alg [] Y) = injections (set []) Y", "by metis"], ["proof (state)\nthis:\n  distinct [] \\<longrightarrow>\n  set (injections_alg [] Y) = injections (set []) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "moreover"], ["proof (state)\nthis:\n  distinct [] \\<longrightarrow>\n  set (injections_alg [] Y) = injections (set []) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "have \"\\<forall>x xs. ?P xs \\<longrightarrow> ?P (x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xs.\n       (distinct xs \\<longrightarrow>\n        set (injections_alg xs Y) = injections (set xs) Y) \\<longrightarrow>\n       distinct (x # xs) \\<longrightarrow>\n       set (injections_alg (x # xs) Y) = injections (set (x # xs)) Y", "using assms(1) lm101"], ["proof (prove)\nusing this:\n  finite Y\n  \\<lbrakk>?x \\<notin> set ?xs;\n   set (injections_alg ?xs ?Y) = injections (set ?xs) ?Y; finite ?Y\\<rbrakk>\n  \\<Longrightarrow> set (injections_alg (?x # ?xs) ?Y) =\n                    injections ({?x} \\<union> set ?xs) ?Y\n\ngoal (1 subgoal):\n 1. \\<forall>x xs.\n       (distinct xs \\<longrightarrow>\n        set (injections_alg xs Y) = injections (set xs) Y) \\<longrightarrow>\n       distinct (x # xs) \\<longrightarrow>\n       set (injections_alg (x # xs) Y) = injections (set (x # xs)) Y", "by (metis distinct.simps(2) insert_is_Un list.simps(15))"], ["proof (state)\nthis:\n  \\<forall>x xs.\n     (distinct xs \\<longrightarrow>\n      set (injections_alg xs Y) = injections (set xs) Y) \\<longrightarrow>\n     distinct (x # xs) \\<longrightarrow>\n     set (injections_alg (x # xs) Y) = injections (set (x # xs)) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "ultimately"], ["proof (chain)\npicking this:\n  distinct [] \\<longrightarrow>\n  set (injections_alg [] Y) = injections (set []) Y\n  \\<forall>x xs.\n     (distinct xs \\<longrightarrow>\n      set (injections_alg xs Y) = injections (set xs) Y) \\<longrightarrow>\n     distinct (x # xs) \\<longrightarrow>\n     set (injections_alg (x # xs) Y) = injections (set (x # xs)) Y", "have \"?P X\""], ["proof (prove)\nusing this:\n  distinct [] \\<longrightarrow>\n  set (injections_alg [] Y) = injections (set []) Y\n  \\<forall>x xs.\n     (distinct xs \\<longrightarrow>\n      set (injections_alg xs Y) = injections (set xs) Y) \\<longrightarrow>\n     distinct (x # xs) \\<longrightarrow>\n     set (injections_alg (x # xs) Y) = injections (set (x # xs)) Y\n\ngoal (1 subgoal):\n 1. distinct X \\<longrightarrow>\n    set (injections_alg X Y) = injections (set X) Y", "by (rule structInduct)"], ["proof (state)\nthis:\n  distinct X \\<longrightarrow>\n  set (injections_alg X Y) = injections (set X) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "then"], ["proof (chain)\npicking this:\n  distinct X \\<longrightarrow>\n  set (injections_alg X Y) = injections (set X) Y", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct X \\<longrightarrow>\n  set (injections_alg X Y) = injections (set X) Y\n\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "using assms(2)"], ["proof (prove)\nusing this:\n  distinct X \\<longrightarrow>\n  set (injections_alg X Y) = injections (set X) Y\n  distinct X\n\ngoal (1 subgoal):\n 1. set (injections_alg X Y) = injections (set X) Y", "by blast"], ["proof (state)\nthis:\n  set (injections_alg X Y) = injections (set X) Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lm102: \n  assumes \"l \\<in> set (all_partitions_list G)\" \"distinct G\" \n  shows   \"distinct l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct l", "using assms"], ["proof (prove)\nusing this:\n  l \\<in> set (all_partitions_list G)\n  distinct G\n\ngoal (1 subgoal):\n 1. distinct l", "by (metis all_partitions_equivalence')"], ["", "(* apply bridging theorem injections_equiv to the partitions of all goods *)"], ["", "lemma bridgingInjection: \n  assumes \"card N > 0\" \"distinct G\" \n  shows \"\\<forall>l \\<in> set (all_partitions_list G). set (injections_alg l N) = \n         injections (set l) N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>set (all_partitions_list G).\n       set (injections_alg l N) = injections (set l) N", "using lm102 injections_equiv assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?l \\<in> set (all_partitions_list ?G); distinct ?G\\<rbrakk>\n  \\<Longrightarrow> distinct ?l\n  \\<lbrakk>finite ?Y; distinct ?X\\<rbrakk>\n  \\<Longrightarrow> set (injections_alg ?X ?Y) = injections (set ?X) ?Y\n  0 < card N\n  distinct G\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>set (all_partitions_list G).\n       set (injections_alg l N) = injections (set l) N", "by (metis card_ge_0_finite)"], ["", "(* list vs set comprehension on partitions with bridging theorem *)"], ["", "lemma lm103: \n  assumes \"card N > 0\" \"distinct G\"\n  shows \"{injections P N| P. P \\<in> all_partitions (set G)} =\n         set [set (injections_alg l N) . l \\<leftarrow> all_partitions_list G]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "let ?g1 = all_partitions_list"], ["proof (state)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "let ?f2 = injections"], ["proof (state)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "let ?g2 = injections_alg"], ["proof (state)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "have \"\\<forall>l \\<in> set (?g1 G). set (?g2 l N) = ?f2 (set l) N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>set (all_partitions_list G).\n       set (injections_alg l N) = injections (set l) N", "using assms bridgingInjection"], ["proof (prove)\nusing this:\n  0 < card N\n  distinct G\n  \\<lbrakk>0 < card ?N; distinct ?G\\<rbrakk>\n  \\<Longrightarrow> \\<forall>l\\<in>set (all_partitions_list ?G).\n                       set (injections_alg l ?N) = injections (set l) ?N\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>set (all_partitions_list G).\n       set (injections_alg l N) = injections (set l) N", "by blast"], ["proof (state)\nthis:\n  \\<forall>l\\<in>set (all_partitions_list G).\n     set (injections_alg l N) = injections (set l) N\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "then"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>set (all_partitions_list G).\n     set (injections_alg l N) = injections (set l) N", "have \"set [set (?g2 l N). l <- ?g1 G] = {?f2 P N| P. P \\<in> set (map set (?g1 G))}\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>set (all_partitions_list G).\n     set (injections_alg l N) = injections (set l) N\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)) =\n    {injections P N |P. P \\<in> set (map set (all_partitions_list G))}", "apply (rule setVsList)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G)) =\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))}\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "moreover"], ["proof (state)\nthis:\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G)) =\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))}\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "have \"... = {?f2 P N| P. P \\<in> all_partitions (set G)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> set (map set (all_partitions_list G))} =\n    {injections P N |P. P \\<in> all_partitions (set G)}", "using all_partitions_paper_equiv_alg assms"], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow>\n  set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs)\n  0 < card N\n  distinct G\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> set (map set (all_partitions_list G))} =\n    {injections P N |P. P \\<in> all_partitions (set G)}", "by blast"], ["proof (state)\nthis:\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))} =\n  {injections P N |P. P \\<in> all_partitions (set G)}\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "ultimately"], ["proof (chain)\npicking this:\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G)) =\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))}\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))} =\n  {injections P N |P. P \\<in> all_partitions (set G)}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G)) =\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))}\n  {injections P N |P. P \\<in> set (map set (all_partitions_list G))} =\n  {injections P N |P. P \\<in> all_partitions (set G)}\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "by presburger"], ["proof (state)\nthis:\n  {injections P N |P. P \\<in> all_partitions (set G)} =\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* apply Union to both sides in lm103 *)"], ["", "lemma lm104: \n  assumes \"card N > 0\" \"distinct G\" \n  shows   \"Union {injections P N| P. P \\<in> all_partitions (set G)} =\n           Union (set [set (injections_alg l N) . l \\<leftarrow> all_partitions_list G])\" \n  (is \"Union ?L = Union ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "have \"?L = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "using assms"], ["proof (prove)\nusing this:\n  0 < card N\n  distinct G\n\ngoal (1 subgoal):\n 1. {injections P N |P. P \\<in> all_partitions (set G)} =\n    set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))", "by (rule lm103)"], ["proof (state)\nthis:\n  {injections P N |P. P \\<in> all_partitions (set G)} =\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))\n\ngoal (1 subgoal):\n 1. \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  {injections P N |P. P \\<in> all_partitions (set G)} =\n  set (map (\\<lambda>l. set (injections_alg l N)) (all_partitions_list G))\n\ngoal (1 subgoal):\n 1. \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "by presburger"], ["proof (state)\nthis:\n  \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n  \\<Union>\n   (set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* bridging lemma for allAllocations *)"], ["", "corollary allAllocationsBridgingLemma: \n  assumes \"card N > 0\" \"distinct G\" \n  shows   \"allAllocations N (set G) = \n           set(allAllocationsAlg N G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "let ?LL = \"\\<Union> {injections P N| P. P \\<in> all_partitions (set G)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "let ?RR = \"\\<Union> (set [set (injections_alg l N) . l \\<leftarrow> all_partitions_list G])\""], ["proof (state)\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "have \"?LL = ?RR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "using assms"], ["proof (prove)\nusing this:\n  0 < card N\n  distinct G\n\ngoal (1 subgoal):\n 1. \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "by (rule lm104)"], ["proof (state)\nthis:\n  \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n  \\<Union>\n   (set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)))\n\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "then"], ["proof (chain)\npicking this:\n  \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n  \\<Union>\n   (set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)))", "have \"converse ` ?LL = converse ` ?RR\""], ["proof (prove)\nusing this:\n  \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n  \\<Union>\n   (set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)))\n\ngoal (1 subgoal):\n 1. converse `\n    \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n    converse `\n    \\<Union>\n     (set (map (\\<lambda>l. set (injections_alg l N))\n            (all_partitions_list G)))", "by simp"], ["proof (state)\nthis:\n  converse ` \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n  converse `\n  \\<Union>\n   (set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)))\n\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "thus ?thesis"], ["proof (prove)\nusing this:\n  converse ` \\<Union> {injections P N |P. P \\<in> all_partitions (set G)} =\n  converse `\n  \\<Union>\n   (set (map (\\<lambda>l. set (injections_alg l N))\n          (all_partitions_list G)))\n\ngoal (1 subgoal):\n 1. allAllocations N (set G) = set (allAllocationsAlg N G)", "by force"], ["proof (state)\nthis:\n  allAllocations N (set G) = set (allAllocationsAlg N G)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}