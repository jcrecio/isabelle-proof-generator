{"file_name": "/home/qj213/afp-2021-10-22/thys/Monad_Memo_DP/state_monad/Monad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Monad_Memo_DP", "problem_names": ["lemma bind_assoc:\n  \"((s::(_,_)state) \\<bind> k0) \\<bind> k1 = s \\<bind> (\\<lambda>a. k0 a \\<bind> k1)\"", "lemma left_identity:\n  \"return v \\<bind> k = k v\"", "lemma right_identity:\n  \"s \\<bind> return = s\"", "lemma runState_return:\n  \"runState (return x) M = (x, M)\""], "translations": [["", "lemma bind_assoc:\n  \"((s::(_,_)state) \\<bind> k0) \\<bind> k1 = s \\<bind> (\\<lambda>a. k0 a \\<bind> k1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<bind> k0 \\<bind> k1 = s \\<bind> (\\<lambda>a. k0 a \\<bind> k1)", "unfolding bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>M.\n         let (a, y) =\n               runState\n                (State\n                  (\\<lambda>M.\n                      let (a, y) = runState s M in runState (k0 a) y))\n                M\n         in runState (k1 a) y) =\n    State\n     (\\<lambda>M.\n         let (a, y) = runState s M\n         in runState\n             (State\n               (\\<lambda>M.\n                   let (a, y) = runState (k0 a) M in runState (k1 a) y))\n             y)", "by (auto split: prod.split)"], ["", "lemma left_identity:\n  \"return v \\<bind> k = k v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return v \\<bind> k = k v", "unfolding return_def bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>M.\n         let (a, y) = runState (State (Pair v)) M in runState (k a) y) =\n    k v", "by simp"], ["", "lemma right_identity:\n  \"s \\<bind> return = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<bind> return = s", "unfolding return_def bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>M.\n         let (a, y) = runState s M in runState (State (Pair a)) y) =\n    s", "by simp"], ["", "lemma runState_return:\n  \"runState (return x) M = (x, M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runState (return x) M = (x, M)", "unfolding return_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runState (State (Pair x)) M = (x, M)", "by simp"], ["", "end"]]}