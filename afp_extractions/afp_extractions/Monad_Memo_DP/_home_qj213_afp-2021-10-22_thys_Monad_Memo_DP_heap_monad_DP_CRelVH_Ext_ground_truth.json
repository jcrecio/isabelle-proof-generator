{"file_name": "/home/qj213/afp-2021-10-22/thys/Monad_Memo_DP/heap_monad/DP_CRelVH_Ext.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Monad_Memo_DP", "problem_names": ["lemma crel_vs1_execute_None:\n  False if \"crel_vs1 R a b\" \"execute b heap = None\" \"P heap\"", "lemma crel_vs1_execute_Some:\n  assumes \"crel_vs1 R a b\" \"P heap\"\n  obtains x heap' where \"execute b heap = Some (x, heap')\" \"P heap'\"", "lemma crel_vs1_executeD:\n  assumes \"crel_vs1 R a b\" \"P heap\" \"state_dp_consistency.cmem heap\"\n  obtains x heap' where \"execute b heap = Some (x, heap')\" \"P heap'\" \"state_dp_consistency.cmem heap'\" \"R a x\"", "lemma rel_state_state_of:\n  \"rel_state (=) (state_of b) b\" if \"crel_vs1 R a b\"", "lemma crel_vs1_state_of:\n  \"state_dp_consistency.crel_vs R a (state_of b)\" if \"crel_vs1 R a b\"", "lemma crel_vs1_alt_def:\n  \"crel_vs1 R = (state_dp_consistency.crel_vs R OO rel_state (=))\"", "lemma transfer_return1[transfer_rule]:\n  \"(R ===> crel_vs1 R) Wrap return\"", "lemma crel_vs_return1:\n  \"\\<lbrakk>R x y\\<rbrakk> \\<Longrightarrow> crel_vs1 R (Wrap x) (return y)\"", "lemma crel_vs_rel_state:\n  \"(R0 ===> state_dp_consistency.crel_vs R1) x (state_of o y)\" if \"(R0 ===> state_dp_consistency.crel_vs R1 OO rel_state (=)) x y\"", "lemma bind_transfer1:\n  \"(crel_vs1 R0 ===> (R0 ===> crel_vs1 R1) ===> crel_vs1 R1) (\\<lambda>v f. f v) (\\<bind>)\"\n  if \"\\<And> x. R0 x x\"", "lemma fun_app_transfer[transfer_rule]:\n  \"(crel_vs1 (R0 ===> crel_vs1 R1) ===> crel_vs1 R0 ===> crel_vs1 R1) App Heap_Monad_Ext.fun_app_lifted\""], "translations": [["", "lemma crel_vs1_execute_None:\n  False if \"crel_vs1 R a b\" \"execute b heap = None\" \"P heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using that"], ["proof (prove)\nusing this:\n  crel_vs1 R a b\n  execute b heap = None\n  P heap\n\ngoal (1 subgoal):\n 1. False", "unfolding crel_vs1_def"], ["proof (prove)\nusing this:\n  \\<forall>heap.\n     P heap \\<longrightarrow>\n     (case execute b heap of None \\<Rightarrow> False\n      | Some (v', heap') \\<Rightarrow>\n          P heap' \\<and>\n          (state_dp_consistency.cmem heap \\<longrightarrow>\n           R a v' \\<and> state_dp_consistency.cmem heap'))\n  execute b heap = None\n  P heap\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["", "lemma crel_vs1_execute_Some:\n  assumes \"crel_vs1 R a b\" \"P heap\"\n  obtains x heap' where \"execute b heap = Some (x, heap')\" \"P heap'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x heap'.\n        \\<lbrakk>execute b heap = Some (x, heap'); P heap'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  crel_vs1 R a b\n  P heap\n\ngoal (1 subgoal):\n 1. (\\<And>x heap'.\n        \\<lbrakk>execute b heap = Some (x, heap'); P heap'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding crel_vs1_def"], ["proof (prove)\nusing this:\n  \\<forall>heap.\n     P heap \\<longrightarrow>\n     (case execute b heap of None \\<Rightarrow> False\n      | Some (v', heap') \\<Rightarrow>\n          P heap' \\<and>\n          (state_dp_consistency.cmem heap \\<longrightarrow>\n           R a v' \\<and> state_dp_consistency.cmem heap'))\n  P heap\n\ngoal (1 subgoal):\n 1. (\\<And>x heap'.\n        \\<lbrakk>execute b heap = Some (x, heap'); P heap'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"execute b heap\") auto"], ["", "lemma crel_vs1_executeD:\n  assumes \"crel_vs1 R a b\" \"P heap\" \"state_dp_consistency.cmem heap\"\n  obtains x heap' where \"execute b heap = Some (x, heap')\" \"P heap'\" \"state_dp_consistency.cmem heap'\" \"R a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x heap'.\n        \\<lbrakk>execute b heap = Some (x, heap'); P heap';\n         state_dp_consistency.cmem heap'; R a x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  crel_vs1 R a b\n  P heap\n  state_dp_consistency.cmem heap\n\ngoal (1 subgoal):\n 1. (\\<And>x heap'.\n        \\<lbrakk>execute b heap = Some (x, heap'); P heap';\n         state_dp_consistency.cmem heap'; R a x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding crel_vs1_def"], ["proof (prove)\nusing this:\n  \\<forall>heap.\n     P heap \\<longrightarrow>\n     (case execute b heap of None \\<Rightarrow> False\n      | Some (v', heap') \\<Rightarrow>\n          P heap' \\<and>\n          (state_dp_consistency.cmem heap \\<longrightarrow>\n           R a v' \\<and> state_dp_consistency.cmem heap'))\n  P heap\n  state_dp_consistency.cmem heap\n\ngoal (1 subgoal):\n 1. (\\<And>x heap'.\n        \\<lbrakk>execute b heap = Some (x, heap'); P heap';\n         state_dp_consistency.cmem heap'; R a x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"execute b heap\") auto"], ["", "lemma rel_state_state_of:\n  \"rel_state (=) (state_of b) b\" if \"crel_vs1 R a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.rel_state (=) (state_of b) b", "unfolding rel_state_def state_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>heap.\n       P heap \\<longrightarrow>\n       (case run_state (State (\\<lambda>heap. the (execute b heap))) heap of\n        (v1, heap1) \\<Rightarrow>\n          case execute b heap of None \\<Rightarrow> False\n          | Some (v2, heap2) \\<Rightarrow>\n              v1 = v2 \\<and> heap1 = heap2 \\<and> P heap2)", "by (auto split: option.split elim: crel_vs1_execute_Some[OF that])"], ["", "lemma crel_vs1_state_of:\n  \"state_dp_consistency.crel_vs R a (state_of b)\" if \"crel_vs1 R a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_dp_consistency.crel_vs R a (state_of b)", "unfolding state_dp_consistency.crel_vs_def state_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>M.\n       state_dp_consistency.cmem M \\<and> P M \\<longrightarrow>\n       (case run_state (State (\\<lambda>heap. the (execute b heap))) M of\n        (v', M') \\<Rightarrow>\n          R a v' \\<and> state_dp_consistency.cmem M' \\<and> P M')", "by (auto elim: crel_vs1_executeD[OF that])"], ["", "lemma crel_vs1_alt_def:\n  \"crel_vs1 R = (state_dp_consistency.crel_vs R OO rel_state (=))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. crel_vs1 R = state_dp_consistency.crel_vs R OO local.rel_state (=)", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       crel_vs1 R x xa =\n       (state_dp_consistency.crel_vs R OO local.rel_state (=)) x xa", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       crel_vs1 R x xa =\n       (state_dp_consistency.crel_vs R OO local.rel_state (=)) x xa", "have \"(state_dp_consistency.crel_vs R OO rel_state (=)) a b\" if \"crel_vs1 R a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b", "using that"], ["proof (prove)\nusing this:\n  crel_vs1 R a b\n\ngoal (1 subgoal):\n 1. (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b", "by - (rule relcomppI; erule crel_vs1_state_of rel_state_state_of)"], ["proof (state)\nthis:\n  crel_vs1 R a b \\<Longrightarrow>\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       crel_vs1 R x xa =\n       (state_dp_consistency.crel_vs R OO local.rel_state (=)) x xa", "moreover"], ["proof (state)\nthis:\n  crel_vs1 R a b \\<Longrightarrow>\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       crel_vs1 R x xa =\n       (state_dp_consistency.crel_vs R OO local.rel_state (=)) x xa", "have \"crel_vs1 R a b\" if \"(state_dp_consistency.crel_vs R OO rel_state (=)) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. crel_vs1 R a b", "using that"], ["proof (prove)\nusing this:\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b\n\ngoal (1 subgoal):\n 1. crel_vs1 R a b", "by (auto 4 3 elim: state_dp_consistency.crel_vs_elim rel_state_elim simp: crel_vs1_def)"], ["proof (state)\nthis:\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a\n   b \\<Longrightarrow>\n  crel_vs1 R a b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       crel_vs1 R x xa =\n       (state_dp_consistency.crel_vs R OO local.rel_state (=)) x xa", "ultimately"], ["proof (chain)\npicking this:\n  crel_vs1 R a b \\<Longrightarrow>\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a\n   b \\<Longrightarrow>\n  crel_vs1 R a b", "show \"crel_vs1 R a b = (state_dp_consistency.crel_vs R OO rel_state (=)) a b\""], ["proof (prove)\nusing this:\n  crel_vs1 R a b \\<Longrightarrow>\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a\n   b \\<Longrightarrow>\n  crel_vs1 R a b\n\ngoal (1 subgoal):\n 1. crel_vs1 R a b =\n    (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b", ".."], ["proof (state)\nthis:\n  crel_vs1 R a b =\n  (state_dp_consistency.crel_vs R OO local.rel_state (=)) a b\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma transfer_return1[transfer_rule]:\n  \"(R ===> crel_vs1 R) Wrap return\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R ===> crel_vs1 R) Wrap return", "unfolding crel_vs1_alt_def Wrap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (R ===> state_dp_consistency.crel_vs R OO local.rel_state (=))\n     (\\<lambda>x. x) return", "by (rule rel_fun_comp1 state_dp_consistency.return_transfer[unfolded Wrap_def] transfer_return)+ auto"], ["", "lemma crel_vs_return1:\n  \"\\<lbrakk>R x y\\<rbrakk> \\<Longrightarrow> crel_vs1 R (Wrap x) (return y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R x y \\<Longrightarrow> crel_vs1 R (Wrap x) (return y)", "by (rule transfer_return1[unfolded rel_fun_def, rule_format])"], ["", "term 0"], ["", "(**)"], ["", "lemma crel_vs_rel_state:\n  \"(R0 ===> state_dp_consistency.crel_vs R1) x (state_of o y)\" if \"(R0 ===> state_dp_consistency.crel_vs R1 OO rel_state (=)) x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_dp_consistency.rel_fun_lifted R0 R1 x (state_of \\<circ> y)", "using that"], ["proof (prove)\nusing this:\n  (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x y\n\ngoal (1 subgoal):\n 1. state_dp_consistency.rel_fun_lifted R0 R1 x (state_of \\<circ> y)", "unfolding state_of_def"], ["proof (prove)\nusing this:\n  (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x y\n\ngoal (1 subgoal):\n 1. state_dp_consistency.rel_fun_lifted R0 R1 x\n     ((\\<lambda>s. State (\\<lambda>heap. the (execute s heap))) \\<circ> y)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n     y \\<Longrightarrow>\n    state_dp_consistency.rel_fun_lifted R0 R1 x\n     ((\\<lambda>s. State (\\<lambda>heap. the (execute s heap))) \\<circ> y)", "apply (rule rel_funI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya.\n       \\<lbrakk>(R0 ===>\n                 state_dp_consistency.crel_vs R1 OO local.rel_state (=))\n                 x y;\n        R0 xa ya\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.crel_vs R1 (x xa)\n                          (((\\<lambda>s.\n                                State\n                                 (\\<lambda>heap.\n                                     the (execute s heap))) \\<circ>\n                            y)\n                            ya)", "apply (drule rel_funD, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya.\n       \\<lbrakk>R0 xa ya;\n        (state_dp_consistency.crel_vs R1 OO local.rel_state (=)) (x xa)\n         (y ya)\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.crel_vs R1 (x xa)\n                          (((\\<lambda>s.\n                                State\n                                 (\\<lambda>heap.\n                                     the (execute s heap))) \\<circ>\n                            y)\n                            ya)", "apply (erule relcomppE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya b.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya)\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.crel_vs R1 (x xa)\n                          (((\\<lambda>s.\n                                State\n                                 (\\<lambda>heap.\n                                     the (execute s heap))) \\<circ>\n                            y)\n                            ya)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya b.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya)\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.crel_vs R1 (x xa)\n                          (State (\\<lambda>heap. the (execute (y ya) heap)))", "apply (rule state_dp_consistency.crel_vs_intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        run_state (State (\\<lambda>heap. the (execute (y ya) heap))) M =\n        (v', M')\\<rbrakk>\n       \\<Longrightarrow> R1 (x xa) v' \\<and>\n                         state_dp_consistency.cmem M' \\<and> P M'", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> R1 (x xa) v'\n 2. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.cmem M'\n 3. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> P M'", "apply (erule rel_state_elim, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa ya b M v' M' heap' v v'a.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        state_dp_consistency.cmem M; P M; the (execute (y ya) M) = (v', M');\n        run_state b M = (v, heap'); execute (y ya) M = Some (v'a, heap');\n        v = v'a; P heap'\\<rbrakk>\n       \\<Longrightarrow> R1 (x xa) v'\n 2. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.cmem M'\n 3. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> P M'", "apply (erule state_dp_consistency.crel_vs_elim)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x ya b M v' M' heap' v v'a.\n       \\<lbrakk>R0 x ya; state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M'); run_state b M = (v, heap');\n        execute (y ya) M = Some (v'a, heap'); v = v'a; P heap'\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.cmem\n                          (?M15 x ya b M v' M' heap' v v'a)\n 2. \\<And>x ya b M v' M' heap' v v'a.\n       \\<lbrakk>R0 x ya; state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M'); run_state b M = (v, heap');\n        execute (y ya) M = Some (v'a, heap'); v = v'a; P heap'\\<rbrakk>\n       \\<Longrightarrow> P (?M15 x ya b M v' M' heap' v v'a)\n 3. \\<And>xa ya b M v' M' heap' v v'a v'b M'a.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M'); run_state b M = (v, heap');\n        execute (y ya) M = Some (v'a, heap'); v = v'a; P heap';\n        run_state b (?M15 xa ya b M v' M' heap' v v'a) = (v'b, M'a);\n        R1 (x xa) v'b; state_dp_consistency.cmem M'a; P M'a\\<rbrakk>\n       \\<Longrightarrow> R1 (x xa) v'\n 4. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.cmem M'\n 5. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> P M'", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa ya b M v' M' heap' v v'a v'b M'a.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M'); run_state b M = (v, heap');\n        execute (y ya) M = Some (v'a, heap'); v = v'a; P heap';\n        run_state b M = (v'b, M'a); R1 (x xa) v'b;\n        state_dp_consistency.cmem M'a; P M'a\\<rbrakk>\n       \\<Longrightarrow> R1 (x xa) v'\n 2. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.cmem M'\n 3. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> P M'", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> state_dp_consistency.cmem M'\n 2. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> P M'", "subgoal premises prems for x' y' b M v' M'"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_dp_consistency.cmem M'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_dp_consistency.cmem M'", "from prems(2,3)"], ["proof (chain)\npicking this:\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')", "have \"crel_vs1 R1 (x x') (y y')\""], ["proof (prove)\nusing this:\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n\ngoal (1 subgoal):\n 1. crel_vs1 R1 (x x') (y y')", "unfolding crel_vs1_alt_def"], ["proof (prove)\nusing this:\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n\ngoal (1 subgoal):\n 1. (state_dp_consistency.crel_vs R1 OO local.rel_state (=)) (x x') (y y')", "by (rule relcomppI)"], ["proof (state)\nthis:\n  crel_vs1 R1 (x x') (y y')\n\ngoal (1 subgoal):\n 1. state_dp_consistency.cmem M'", "with prems"], ["proof (chain)\npicking this:\n  R0 x' y'\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n  state_dp_consistency.cmem M\n  P M\n  the (execute (y y') M) = (v', M')\n  crel_vs1 R1 (x x') (y y')", "show ?thesis"], ["proof (prove)\nusing this:\n  R0 x' y'\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n  state_dp_consistency.cmem M\n  P M\n  the (execute (y y') M) = (v', M')\n  crel_vs1 R1 (x x') (y y')\n\ngoal (1 subgoal):\n 1. state_dp_consistency.cmem M'", "by (auto elim: crel_vs1_executeD)"], ["proof (state)\nthis:\n  state_dp_consistency.cmem M'\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya b M v' M'.\n       \\<lbrakk>R0 xa ya; state_dp_consistency.crel_vs R1 (x xa) b;\n        local.rel_state (=) b (y ya); state_dp_consistency.cmem M; P M;\n        the (execute (y ya) M) = (v', M')\\<rbrakk>\n       \\<Longrightarrow> P M'", "subgoal premises prems for x' y' b M v' M'"], ["proof (prove)\ngoal (1 subgoal):\n 1. P M'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P M'", "from prems(2,3)"], ["proof (chain)\npicking this:\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')", "have \"crel_vs1 R1 (x x') (y y')\""], ["proof (prove)\nusing this:\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n\ngoal (1 subgoal):\n 1. crel_vs1 R1 (x x') (y y')", "unfolding crel_vs1_alt_def"], ["proof (prove)\nusing this:\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n\ngoal (1 subgoal):\n 1. (state_dp_consistency.crel_vs R1 OO local.rel_state (=)) (x x') (y y')", "by (rule relcomppI)"], ["proof (state)\nthis:\n  crel_vs1 R1 (x x') (y y')\n\ngoal (1 subgoal):\n 1. P M'", "with prems"], ["proof (chain)\npicking this:\n  R0 x' y'\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n  state_dp_consistency.cmem M\n  P M\n  the (execute (y y') M) = (v', M')\n  crel_vs1 R1 (x x') (y y')", "show ?thesis"], ["proof (prove)\nusing this:\n  R0 x' y'\n  state_dp_consistency.crel_vs R1 (x x') b\n  local.rel_state (=) b (y y')\n  state_dp_consistency.cmem M\n  P M\n  the (execute (y y') M) = (v', M')\n  crel_vs1 R1 (x x') (y y')\n\ngoal (1 subgoal):\n 1. P M'", "by (auto elim: crel_vs1_executeD)"], ["proof (state)\nthis:\n  P M'\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bind_transfer1:\n  \"(crel_vs1 R0 ===> (R0 ===> crel_vs1 R1) ===> crel_vs1 R1) (\\<lambda>v f. f v) (\\<bind>)\"\n  if \"\\<And> x. R0 x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (crel_vs1 R0 ===> (R0 ===> crel_vs1 R1) ===> crel_vs1 R1)\n     (\\<lambda>v f. f v) (\\<bind>)", "unfolding crel_vs1_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (state_dp_consistency.crel_vs R0 OO local.rel_state (=) ===>\n     (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) ===>\n     state_dp_consistency.crel_vs R1 OO local.rel_state (=))\n     (\\<lambda>v f. f v) (\\<bind>)", "apply (rule rel_fun_comp2')"], ["proof (prove)\ngoal (3 subgoals):\n 1. (state_dp_consistency.crel_vs R0 ===> ?S1.0) (\\<lambda>v f. f v) ?g\n 2. (local.rel_state (=) ===> ?S2.0) ?g (\\<bind>)\n 3. \\<And>a b.\n       (?S1.0 OO ?S2.0) a b \\<Longrightarrow>\n       ((R0 ===>\n         state_dp_consistency.crel_vs R1 OO local.rel_state (=)) ===>\n        state_dp_consistency.crel_vs R1 OO local.rel_state (=))\n        a b", "apply (rule state_dp_consistency.bind_transfer)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (local.rel_state (=) ===> ?S2.0) (\\<bind>) (\\<bind>)\n 2. \\<And>a b.\n       (state_dp_consistency.rel_fun_lifted\n         (state_dp_consistency.rel_fun_lifted R0 ?R1.4) ?R1.4 OO\n        ?S2.0)\n        a b \\<Longrightarrow>\n       ((R0 ===>\n         state_dp_consistency.crel_vs R1 OO local.rel_state (=)) ===>\n        state_dp_consistency.crel_vs R1 OO local.rel_state (=))\n        a b", "apply (rule transfer_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (state_dp_consistency.rel_fun_lifted\n         (state_dp_consistency.rel_fun_lifted R0 ?R1.4) ?R1.4 OO\n        (((=) ===> local.rel_state ?Q5) ===> local.rel_state ?Q5))\n        a b \\<Longrightarrow>\n       ((R0 ===>\n         state_dp_consistency.crel_vs R1 OO local.rel_state (=)) ===>\n        state_dp_consistency.crel_vs R1 OO local.rel_state (=))\n        a b", "apply (drule rel_fun_relcompp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (state_dp_consistency.rel_fun_lifted R0 ?R1.4 OO\n        ((=) ===> local.rel_state ?Q5) ===>\n        state_dp_consistency.crel_vs ?R1.4 OO local.rel_state ?Q5)\n        a b \\<Longrightarrow>\n       ((R0 ===>\n         state_dp_consistency.crel_vs R1 OO local.rel_state (=)) ===>\n        state_dp_consistency.crel_vs R1 OO local.rel_state (=))\n        a b", "apply (erule rel_fun_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x y.\n       (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n        y \\<longrightarrow>\n       (state_dp_consistency.rel_fun_lifted R0 ?R1.4 OO\n        ((=) ===> local.rel_state ?Q5))\n        x y\n 2. \\<And>a b x y.\n       (state_dp_consistency.crel_vs ?R1.4 OO local.rel_state ?Q5) x\n        y \\<Longrightarrow>\n       (state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x y", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x y.\n       (state_dp_consistency.crel_vs ?R1.4 OO local.rel_state ?Q5) x\n        y \\<Longrightarrow>\n       (state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x y\n 2. \\<And>a b x y.\n       (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n        y \\<longrightarrow>\n       (state_dp_consistency.rel_fun_lifted R0 ?R1.4 OO\n        ((=) ===> local.rel_state ?Q5))\n        x y", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x y.\n       (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n        y \\<longrightarrow>\n       (state_dp_consistency.rel_fun_lifted R0 R1 OO\n        ((=) ===> local.rel_state (=)))\n        x y", "apply (intro impI relcomppI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x y.\n       (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n        y \\<Longrightarrow>\n       state_dp_consistency.rel_fun_lifted R0 R1 x (?b12 a b x y)\n 2. \\<And>a b x y.\n       (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n        y \\<Longrightarrow>\n       ((=) ===> local.rel_state (=)) (?b12 a b x y) y", "apply (erule crel_vs_rel_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x y.\n       (R0 ===> state_dp_consistency.crel_vs R1 OO local.rel_state (=)) x\n        y \\<Longrightarrow>\n       ((=) ===> local.rel_state (=)) (state_of \\<circ> y) y", "by (auto 4 4 dest: rel_funD intro: that elim: rel_state_state_of simp: crel_vs1_alt_def[symmetric])"], ["", "lemma fun_app_transfer[transfer_rule]:\n  \"(crel_vs1 (R0 ===> crel_vs1 R1) ===> crel_vs1 R0 ===> crel_vs1 R1) App Heap_Monad_Ext.fun_app_lifted\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (crel_vs1 (R0 ===> crel_vs1 R1) ===> crel_vs1 R0 ===> crel_vs1 R1) App\n     Heap_Monad_Ext.fun_app_lifted", "unfolding App_def Heap_Monad_Ext.fun_app_lifted_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (crel_vs1 (R0 ===> crel_vs1 R1) ===> crel_vs1 R0 ===> crel_vs1 R1)\n     (\\<lambda>f. f)\n     (\\<lambda>f\\<^sub>T x\\<^sub>T. f\\<^sub>T \\<bind> (\\<bind>) x\\<^sub>T)", "oops"], ["", "end"], ["", "(* Lifting Syntax *)"], ["", "end"], ["", "(* Dynamic Programming Problem *)"], ["", "end"]]}