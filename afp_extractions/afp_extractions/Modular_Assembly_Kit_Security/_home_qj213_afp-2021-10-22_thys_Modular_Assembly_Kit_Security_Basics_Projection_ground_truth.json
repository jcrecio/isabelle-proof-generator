{"file_name": "/home/qj213/afp-2021-10-22/thys/Modular_Assembly_Kit_Security/Basics/Projection.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modular_Assembly_Kit_Security", "problem_names": ["lemma projection_on_union: \n  \"l \\<upharpoonleft> Y = [] \\<Longrightarrow> l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X\"", "lemma projection_on_empty_trace: \"[] \\<upharpoonleft> X =[]\"", "lemma projection_to_emptyset_is_empty_trace: \"l \\<upharpoonleft>{} = []\"", "lemma projection_idempotent: \"l \\<upharpoonleft> X= (l \\<upharpoonleft>X) \\<upharpoonleft>X\"", "lemma projection_empty_implies_absence_of_events: \"l \\<upharpoonleft> X = [] \\<Longrightarrow>  X \\<inter> (set l) = {}\"", "lemma disjoint_projection: \"X \\<inter> Y = {} \\<Longrightarrow> (l \\<upharpoonleft> X) \\<upharpoonleft> Y = []\"", "lemma projection_concatenation_commute:\n  \"(l1 @ l2) \\<upharpoonleft> X = (l1 \\<upharpoonleft> X) @ (l2 \\<upharpoonleft> X)\"", "lemma projection_subset_eq_from_superset_eq: \n\"((xs \\<upharpoonleft> (X \\<union> Y)) = (ys \\<upharpoonleft> (X \\<union> Y))) \\<Longrightarrow> ((xs \\<upharpoonleft> X) = (ys \\<upharpoonleft> X))\"\n(is \"(?L1 = ?L2) \\<Longrightarrow> (?L3 = ?L4)\")", "lemma list_subset_iff_projection_neutral: \"(set l \\<subseteq> X) = ((l \\<upharpoonleft> X) = l)\"\n(is \"?A = ?B\")", "lemma projection_split_last: \"Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow> \n\\<exists> \\<beta> x \\<alpha>. (x \\<in> X \\<and> \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and> \\<alpha> \\<upharpoonleft> X = [] \\<and> n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X))\"", "lemma projection_rev_commute:\n  \"rev (l \\<upharpoonleft> X) = (rev l) \\<upharpoonleft> X\"", "lemma projection_split_first: \"\\<lbrakk> (\\<tau> \\<upharpoonleft> X) = x # xs \\<rbrakk> \\<Longrightarrow> \\<exists> \\<alpha> \\<beta>. (\\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and> \\<alpha> \\<upharpoonleft> X = [])\"", "lemma projection_split_first_with_suffix: \n  \"\\<lbrakk> (\\<tau> \\<upharpoonleft> X) = x # xs \\<rbrakk> \\<Longrightarrow> \\<exists> \\<alpha> \\<beta>. (\\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and> \\<alpha> \\<upharpoonleft> X = [] \\<and> \\<beta> \\<upharpoonleft> X = xs)\"", "lemma projection_split_arbitrary_element: \n  \"\\<lbrakk>\\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X; x \\<in> X \\<rbrakk> \n      \\<Longrightarrow> \\<exists> \\<alpha>' \\<beta>'. (\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and> \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and> \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X)\"", "lemma projection_on_intersection: \"l \\<upharpoonleft> X = [] \\<Longrightarrow> l \\<upharpoonleft> (X \\<inter> Y) = []\"\n(is \"?L1 = [] \\<Longrightarrow> ?L2 = []\")", "lemma projection_on_subset: \"\\<lbrakk> Y \\<subseteq> X; l \\<upharpoonleft> X = [] \\<rbrakk> \\<Longrightarrow> l \\<upharpoonleft> Y = []\"", "lemma projection_on_subset2: \"\\<lbrakk> set l \\<subseteq> L; l \\<upharpoonleft> X' = []; X \\<inter> L \\<subseteq> X' \\<rbrakk> \\<Longrightarrow> l \\<upharpoonleft> X = []\"", "lemma non_empty_projection_on_subset: \"X \\<subseteq> Y \\<and> l\\<^sub>1 \\<upharpoonleft> Y = l\\<^sub>2 \\<upharpoonleft> Y \\<Longrightarrow>  l\\<^sub>1 \\<upharpoonleft> X = l\\<^sub>2 \\<upharpoonleft> X\"", "lemma projection_intersection_neutral: \"(set l \\<subseteq> X) \\<Longrightarrow> (l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y)\"", "lemma projection_commute:\n  \"(l \\<upharpoonleft> X) \\<upharpoonleft> Y = (l \\<upharpoonleft> Y) \\<upharpoonleft> X\"", "lemma projection_subset_elim: \"Y \\<subseteq> X \\<Longrightarrow> (l \\<upharpoonleft> X) \\<upharpoonleft> Y = l \\<upharpoonleft> Y\"", "lemma projection_sequence: \"(xs \\<upharpoonleft> X) \\<upharpoonleft> Y = (xs \\<upharpoonleft> (X \\<inter> Y))\"", "lemma merge_property: \"\\<lbrakk>set t1 \\<subseteq> A; set t2 \\<subseteq> B; t1 \\<upharpoonleft> B = t2 \\<upharpoonleft> A \\<rbrakk> \n  \\<Longrightarrow> let t = (merge A B t1 t2) in (t \\<upharpoonleft> A = t1 \\<and> t \\<upharpoonleft> B = t2 \\<and> set t \\<subseteq> ((set t1) \\<union> (set t2)))\""], "translations": [["", "lemma projection_on_union: \n  \"l \\<upharpoonleft> Y = [] \\<Longrightarrow> l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> Y = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<upharpoonleft> Y = [] \\<Longrightarrow>\n    [] \\<upharpoonleft> (X \\<union> Y) = [] \\<upharpoonleft> X\n 2. \\<And>a l.\n       \\<lbrakk>l \\<upharpoonleft> Y = [] \\<Longrightarrow>\n                l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X;\n        (a # l) \\<upharpoonleft> Y = []\\<rbrakk>\n       \\<Longrightarrow> (a # l) \\<upharpoonleft> (X \\<union> Y) =\n                         (a # l) \\<upharpoonleft> X", "case Nil"], ["proof (state)\nthis:\n  [] \\<upharpoonleft> Y = []\n\ngoal (2 subgoals):\n 1. [] \\<upharpoonleft> Y = [] \\<Longrightarrow>\n    [] \\<upharpoonleft> (X \\<union> Y) = [] \\<upharpoonleft> X\n 2. \\<And>a l.\n       \\<lbrakk>l \\<upharpoonleft> Y = [] \\<Longrightarrow>\n                l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X;\n        (a # l) \\<upharpoonleft> Y = []\\<rbrakk>\n       \\<Longrightarrow> (a # l) \\<upharpoonleft> (X \\<union> Y) =\n                         (a # l) \\<upharpoonleft> X", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<upharpoonleft> (X \\<union> Y) = [] \\<upharpoonleft> X", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  [] \\<upharpoonleft> (X \\<union> Y) = [] \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>l \\<upharpoonleft> Y = [] \\<Longrightarrow>\n                l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X;\n        (a # l) \\<upharpoonleft> Y = []\\<rbrakk>\n       \\<Longrightarrow> (a # l) \\<upharpoonleft> (X \\<union> Y) =\n                         (a # l) \\<upharpoonleft> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>l \\<upharpoonleft> Y = [] \\<Longrightarrow>\n                l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X;\n        (a # l) \\<upharpoonleft> Y = []\\<rbrakk>\n       \\<Longrightarrow> (a # l) \\<upharpoonleft> (X \\<union> Y) =\n                         (a # l) \\<upharpoonleft> X", "case (Cons a b)"], ["proof (state)\nthis:\n  b \\<upharpoonleft> Y = [] \\<Longrightarrow>\n  b \\<upharpoonleft> (X \\<union> Y) = b \\<upharpoonleft> X\n  (a # b) \\<upharpoonleft> Y = []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>l \\<upharpoonleft> Y = [] \\<Longrightarrow>\n                l \\<upharpoonleft> (X \\<union> Y) = l \\<upharpoonleft> X;\n        (a # l) \\<upharpoonleft> Y = []\\<rbrakk>\n       \\<Longrightarrow> (a # l) \\<upharpoonleft> (X \\<union> Y) =\n                         (a # l) \\<upharpoonleft> X", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "proof (cases \"a \\<in> Y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\n 2. a \\<notin> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "case True"], ["proof (state)\nthis:\n  a \\<in> Y\n\ngoal (2 subgoals):\n 1. a \\<in> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\n 2. a \\<notin> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "from Cons"], ["proof (chain)\npicking this:\n  b \\<upharpoonleft> Y = [] \\<Longrightarrow>\n  b \\<upharpoonleft> (X \\<union> Y) = b \\<upharpoonleft> X\n  (a # b) \\<upharpoonleft> Y = []", "show \"a \\<in> Y \\<Longrightarrow> (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\""], ["proof (prove)\nusing this:\n  b \\<upharpoonleft> Y = [] \\<Longrightarrow>\n  b \\<upharpoonleft> (X \\<union> Y) = b \\<upharpoonleft> X\n  (a # b) \\<upharpoonleft> Y = []\n\ngoal (1 subgoal):\n 1. a \\<in> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  a \\<in> Y \\<Longrightarrow>\n  (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. a \\<notin> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "case False"], ["proof (state)\nthis:\n  a \\<notin> Y\n\ngoal (1 subgoal):\n 1. a \\<notin> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "from Cons"], ["proof (chain)\npicking this:\n  b \\<upharpoonleft> Y = [] \\<Longrightarrow>\n  b \\<upharpoonleft> (X \\<union> Y) = b \\<upharpoonleft> X\n  (a # b) \\<upharpoonleft> Y = []", "show \"a \\<notin> Y \\<Longrightarrow> (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\""], ["proof (prove)\nusing this:\n  b \\<upharpoonleft> Y = [] \\<Longrightarrow>\n  b \\<upharpoonleft> (X \\<union> Y) = b \\<upharpoonleft> X\n  (a # b) \\<upharpoonleft> Y = []\n\ngoal (1 subgoal):\n 1. a \\<notin> Y \\<Longrightarrow>\n    (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  a \\<notin> Y \\<Longrightarrow>\n  (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (a # b) \\<upharpoonleft> (X \\<union> Y) = (a # b) \\<upharpoonleft> X\n\ngoal:\nNo subgoals!", "qed"], ["", "(*projection on the empty trace yields the empty trace*)"], ["", "lemma projection_on_empty_trace: \"[] \\<upharpoonleft> X =[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<upharpoonleft> X = []", "by (simp add: projection_def)"], ["", "(*projection to the empty set yields the empty trace*)"], ["", "lemma projection_to_emptyset_is_empty_trace: \"l \\<upharpoonleft>{} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> {} = []", "by (simp add: projection_def)"], ["", "(*projection is idempotent*)"], ["", "lemma projection_idempotent: \"l \\<upharpoonleft> X= (l \\<upharpoonleft>X) \\<upharpoonleft>X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l \\<upharpoonleft> X \\<upharpoonleft> X", "by (simp add: projection_def)"], ["", "(*empty projection implies that the trace contains no events of the set the trace is projected to*)"], ["", "lemma projection_empty_implies_absence_of_events: \"l \\<upharpoonleft> X = [] \\<Longrightarrow>  X \\<inter> (set l) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow> X \\<inter> set l = {}", "by (metis empty_set inter_set_filter projection_def)"], ["", "(*subsequently projecting to two disjoint sets yields the empty trace*)"], ["", "lemma disjoint_projection: \"X \\<inter> Y = {} \\<Longrightarrow> (l \\<upharpoonleft> X) \\<upharpoonleft> Y = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> Y = {} \\<Longrightarrow>\n    l \\<upharpoonleft> X \\<upharpoonleft> Y = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<inter> Y = {} \\<Longrightarrow>\n    l \\<upharpoonleft> X \\<upharpoonleft> Y = []", "assume X_Y_disjoint: \"X \\<inter> Y = {}\""], ["proof (state)\nthis:\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. X \\<inter> Y = {} \\<Longrightarrow>\n    l \\<upharpoonleft> X \\<upharpoonleft> Y = []", "show \"(l \\<upharpoonleft> X) \\<upharpoonleft> Y = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X \\<upharpoonleft> Y = []", "unfolding projection_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) l) = []", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) []) = []\n 2. \\<And>a l.\n       filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) l) =\n       [] \\<Longrightarrow>\n       filter (\\<lambda>x. x \\<in> Y)\n        (filter (\\<lambda>x. x \\<in> X) (a # l)) =\n       []", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) []) = []\n 2. \\<And>a l.\n       filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) l) =\n       [] \\<Longrightarrow>\n       filter (\\<lambda>x. x \\<in> Y)\n        (filter (\\<lambda>x. x \\<in> X) (a # l)) =\n       []", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) []) = []", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) []) = []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) l) =\n       [] \\<Longrightarrow>\n       filter (\\<lambda>x. x \\<in> Y)\n        (filter (\\<lambda>x. x \\<in> X) (a # l)) =\n       []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) l) =\n       [] \\<Longrightarrow>\n       filter (\\<lambda>x. x \\<in> Y)\n        (filter (\\<lambda>x. x \\<in> X) (a # l)) =\n       []", "case (Cons x xs)"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) xs) = []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) l) =\n       [] \\<Longrightarrow>\n       filter (\\<lambda>x. x \\<in> Y)\n        (filter (\\<lambda>x. x \\<in> X) (a # l)) =\n       []", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "proof (cases \"x \\<in> X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []\n 2. x \\<notin> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "case True"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []\n 2. x \\<notin> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "with X_Y_disjoint"], ["proof (chain)\npicking this:\n  X \\<inter> Y = {}\n  x \\<in> X", "have \"x \\<notin> Y\""], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<notin> Y", "by auto"], ["proof (state)\nthis:\n  x \\<notin> Y\n\ngoal (2 subgoals):\n 1. x \\<in> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []\n 2. x \\<notin> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "thus \"[x\\<leftarrow>[x\\<leftarrow>x # xs . x \\<in> X] . x \\<in> Y] = []\""], ["proof (prove)\nusing this:\n  x \\<notin> Y\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "using Cons.hyps"], ["proof (prove)\nusing this:\n  x \\<notin> Y\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) xs) = []\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n  []\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "case False"], ["proof (state)\nthis:\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<Longrightarrow>\n    filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "show \"[x\\<leftarrow>[x\\<leftarrow>x # xs . x \\<in> X] . x \\<in> Y] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "using Cons.hyps False"], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) xs) = []\n  x \\<notin> X\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Y)\n     (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n    []", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n  []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Y) (filter (\\<lambda>x. x \\<in> X) (x # xs)) =\n  []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X \\<upharpoonleft> Y = []\n\ngoal:\nNo subgoals!", "qed"], ["", "(* auxiliary lemmas for projection *)"], ["", "lemma projection_concatenation_commute:\n  \"(l1 @ l2) \\<upharpoonleft> X = (l1 \\<upharpoonleft> X) @ (l2 \\<upharpoonleft> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1 @ l2) \\<upharpoonleft> X =\n    l1 \\<upharpoonleft> X @ l2 \\<upharpoonleft> X", "by (unfold projection_def, auto)"], ["", "(* Lists that are equal under projection on a set will remain \nequal under projection on a subset. *)"], ["", "lemma projection_subset_eq_from_superset_eq: \n\"((xs \\<upharpoonleft> (X \\<union> Y)) = (ys \\<upharpoonleft> (X \\<union> Y))) \\<Longrightarrow> ((xs \\<upharpoonleft> X) = (ys \\<upharpoonleft> X))\"\n(is \"(?L1 = ?L2) \\<Longrightarrow> (?L3 = ?L4)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) =\n    ys \\<upharpoonleft> (X \\<union> Y) \\<Longrightarrow>\n    xs \\<upharpoonleft> X = ys \\<upharpoonleft> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) =\n    ys \\<upharpoonleft> (X \\<union> Y) \\<Longrightarrow>\n    xs \\<upharpoonleft> X = ys \\<upharpoonleft> X", "assume prem: \"?L1 = ?L2\""], ["proof (state)\nthis:\n  xs \\<upharpoonleft> (X \\<union> Y) = ys \\<upharpoonleft> (X \\<union> Y)\n\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) =\n    ys \\<upharpoonleft> (X \\<union> Y) \\<Longrightarrow>\n    xs \\<upharpoonleft> X = ys \\<upharpoonleft> X", "have \"?L1 \\<upharpoonleft> X = ?L3 \\<and> ?L2 \\<upharpoonleft> X = ?L4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    xs \\<upharpoonleft> X \\<and>\n    ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    ys \\<upharpoonleft> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    xs \\<upharpoonleft> X \\<and>\n    ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    ys \\<upharpoonleft> X", "have \"\\<And> a. ((a \\<in> X \\<or> a \\<in> Y) \\<and> a \\<in> X) = (a \\<in> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ((a \\<in> X \\<or> a \\<in> Y) \\<and> a \\<in> X) = (a \\<in> X)", "by auto"], ["proof (state)\nthis:\n  ((?a \\<in> X \\<or> ?a \\<in> Y) \\<and> ?a \\<in> X) = (?a \\<in> X)\n\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    xs \\<upharpoonleft> X \\<and>\n    ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    ys \\<upharpoonleft> X", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((?a \\<in> X \\<or> ?a \\<in> Y) \\<and> ?a \\<in> X) = (?a \\<in> X)\n\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    xs \\<upharpoonleft> X \\<and>\n    ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n    ys \\<upharpoonleft> X", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  xs \\<upharpoonleft> X \\<and>\n  ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  ys \\<upharpoonleft> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  xs \\<upharpoonleft> X \\<and>\n  ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  ys \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> (X \\<union> Y) =\n    ys \\<upharpoonleft> (X \\<union> Y) \\<Longrightarrow>\n    xs \\<upharpoonleft> X = ys \\<upharpoonleft> X", "with prem"], ["proof (chain)\npicking this:\n  xs \\<upharpoonleft> (X \\<union> Y) = ys \\<upharpoonleft> (X \\<union> Y)\n  xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  xs \\<upharpoonleft> X \\<and>\n  ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  ys \\<upharpoonleft> X", "show ?thesis"], ["proof (prove)\nusing this:\n  xs \\<upharpoonleft> (X \\<union> Y) = ys \\<upharpoonleft> (X \\<union> Y)\n  xs \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  xs \\<upharpoonleft> X \\<and>\n  ys \\<upharpoonleft> (X \\<union> Y) \\<upharpoonleft> X =\n  ys \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> X = ys \\<upharpoonleft> X", "by auto"], ["proof (state)\nthis:\n  xs \\<upharpoonleft> X = ys \\<upharpoonleft> X\n\ngoal:\nNo subgoals!", "qed"], ["", "(* All elements of a list l are in a set X if and only if\n the projection of l onto X yields l. *)"], ["", "lemma list_subset_iff_projection_neutral: \"(set l \\<subseteq> X) = ((l \\<upharpoonleft> X) = l)\"\n(is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)", "have \"?A \\<Longrightarrow> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l", "assume \"?A\""], ["proof (state)\nthis:\n  set l \\<subseteq> X\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l", "hence \"\\<And>x. x \\<in> (set l) \\<Longrightarrow> x \\<in> X\""], ["proof (prove)\nusing this:\n  set l \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set l \\<Longrightarrow> x \\<in> X", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> set l \\<Longrightarrow> ?x \\<in> X\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> set l \\<Longrightarrow> ?x \\<in> X\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l\n\ngoal (1 subgoal):\n 1. (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)", "moreover"], ["proof (state)\nthis:\n  set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l\n\ngoal (1 subgoal):\n 1. (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)", "have \"?B \\<Longrightarrow> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X", "assume \"?B\""], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = l\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X", "hence \"(set (l \\<upharpoonleft> X)) = set l\""], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> X = l\n\ngoal (1 subgoal):\n 1. set (l \\<upharpoonleft> X) = set l", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  set (l \\<upharpoonleft> X) = set l\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (l \\<upharpoonleft> X) = set l\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X", "by (simp add: projection_def, auto)"], ["proof (state)\nthis:\n  set l \\<subseteq> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)", "ultimately"], ["proof (chain)\npicking this:\n  set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l\n  l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X", "show ?thesis"], ["proof (prove)\nusing this:\n  set l \\<subseteq> X \\<Longrightarrow> l \\<upharpoonleft> X = l\n  l \\<upharpoonleft> X = l \\<Longrightarrow> set l \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)", ".."], ["proof (state)\nthis:\n  (set l \\<subseteq> X) = (l \\<upharpoonleft> X = l)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* If the projection of \\<tau> onto a set X is not the empty trace, then \nthere is x \\<in> X that is the last occurrence of all elements of X in \\<tau>. \n\\<tau> can then be split around x.\n\nExpressing non-emptiness in terms of list length is quite useful\nfor inductive proofs. *)"], ["", "lemma projection_split_last: \"Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow> \n\\<exists> \\<beta> x \\<alpha>. (x \\<in> X \\<and> \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and> \\<alpha> \\<upharpoonleft> X = [] \\<and> n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "assume Suc_n_is_len_\\<tau>X: \"Suc n = length (\\<tau> \\<upharpoonleft> X)\""], ["proof (state)\nthis:\n  Suc n = length (\\<tau> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "let ?L = \"\\<tau> \\<upharpoonleft> X\""], ["proof (state)\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "let ?RL = \"filter (\\<lambda>x . x \\<in> X) (rev \\<tau>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "have \"Suc n = length ?RL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "have \"rev ?L = ?RL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (\\<tau> \\<upharpoonleft> X) =\n    filter (\\<lambda>x. x \\<in> X) (rev \\<tau>)", "by (simp add: projection_def, rule rev_filter)"], ["proof (state)\nthis:\n  rev (\\<tau> \\<upharpoonleft> X) =\n  filter (\\<lambda>x. x \\<in> X) (rev \\<tau>)\n\ngoal (1 subgoal):\n 1. Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "hence \"rev (rev ?L) = rev ?RL\""], ["proof (prove)\nusing this:\n  rev (\\<tau> \\<upharpoonleft> X) =\n  filter (\\<lambda>x. x \\<in> X) (rev \\<tau>)\n\ngoal (1 subgoal):\n 1. rev (rev (\\<tau> \\<upharpoonleft> X)) =\n    rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", ".."], ["proof (state)\nthis:\n  rev (rev (\\<tau> \\<upharpoonleft> X)) =\n  rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal (1 subgoal):\n 1. Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "hence \"?L = rev ?RL\""], ["proof (prove)\nusing this:\n  rev (rev (\\<tau> \\<upharpoonleft> X)) =\n  rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X =\n    rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X =\n  rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal (1 subgoal):\n 1. Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "with Suc_n_is_len_\\<tau>X"], ["proof (chain)\npicking this:\n  Suc n = length (\\<tau> \\<upharpoonleft> X)\n  \\<tau> \\<upharpoonleft> X =\n  rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc n = length (\\<tau> \\<upharpoonleft> X)\n  \\<tau> \\<upharpoonleft> X =\n  rev (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal (1 subgoal):\n 1. Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "by auto"], ["proof (state)\nthis:\n  Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "with Suc_length_conv[of n ?RL]"], ["proof (chain)\npicking this:\n  (Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))) =\n  (\\<exists>y ys.\n      filter (\\<lambda>x. x \\<in> X) (rev \\<tau>) = y # ys \\<and>\n      length ys = n)\n  Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))", "obtain x xs\n    where \"?RL = x # xs\""], ["proof (prove)\nusing this:\n  (Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))) =\n  (\\<exists>y ys.\n      filter (\\<lambda>x. x \\<in> X) (rev \\<tau>) = y # ys \\<and>\n      length ys = n)\n  Suc n = length (filter (\\<lambda>x. x \\<in> X) (rev \\<tau>))\n\ngoal (1 subgoal):\n 1. (\\<And>x xs.\n        filter (\\<lambda>x. x \\<in> X) (rev \\<tau>) =\n        x # xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> X) (rev \\<tau>) = x # xs\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "hence \"x # xs = ?RL\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> X) (rev \\<tau>) = x # xs\n\ngoal (1 subgoal):\n 1. x # xs = filter (\\<lambda>x. x \\<in> X) (rev \\<tau>)", "by auto"], ["proof (state)\nthis:\n  x # xs = filter (\\<lambda>x. x \\<in> X) (rev \\<tau>)\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "from Cons_eq_filterD[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>us vs.\n     rev \\<tau> = us @ x # vs \\<and>\n     (\\<forall>u\\<in>set us. u \\<notin> X) \\<and>\n     x \\<in> X \\<and> xs = filter (\\<lambda>x. x \\<in> X) vs", "obtain rev\\<alpha> rev\\<beta>\n    where \"(rev \\<tau>) = rev\\<alpha> @ x # rev\\<beta>\"\n    and rev\\<alpha>_no_x: \"\\<forall>a \\<in> set rev\\<alpha>. a \\<notin> X\"\n    and x_in_X: \"x \\<in> X\""], ["proof (prove)\nusing this:\n  \\<exists>us vs.\n     rev \\<tau> = us @ x # vs \\<and>\n     (\\<forall>u\\<in>set us. u \\<notin> X) \\<and>\n     x \\<in> X \\<and> xs = filter (\\<lambda>x. x \\<in> X) vs\n\ngoal (1 subgoal):\n 1. (\\<And>rev\\<alpha> rev\\<beta>.\n        \\<lbrakk>rev \\<tau> = rev\\<alpha> @ x # rev\\<beta>;\n         \\<forall>a\\<in>set rev\\<alpha>. a \\<notin> X; x \\<in> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rev \\<tau> = rev\\<alpha> @ x # rev\\<beta>\n  \\<forall>a\\<in>set rev\\<alpha>. a \\<notin> X\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "hence \"rev (rev \\<tau>) = rev (rev\\<alpha> @ x # rev\\<beta>)\""], ["proof (prove)\nusing this:\n  rev \\<tau> = rev\\<alpha> @ x # rev\\<beta>\n  \\<forall>a\\<in>set rev\\<alpha>. a \\<notin> X\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. rev (rev \\<tau>) = rev (rev\\<alpha> @ x # rev\\<beta>)", "by auto"], ["proof (state)\nthis:\n  rev (rev \\<tau>) = rev (rev\\<alpha> @ x # rev\\<beta>)\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "hence \"\\<tau> = (rev rev\\<beta>) @ [x] @ (rev rev\\<alpha>)\""], ["proof (prove)\nusing this:\n  rev (rev \\<tau>) = rev (rev\\<alpha> @ x # rev\\<beta>)\n\ngoal (1 subgoal):\n 1. \\<tau> = rev rev\\<beta> @ [x] @ rev rev\\<alpha>", "by auto"], ["proof (state)\nthis:\n  \\<tau> = rev rev\\<beta> @ [x] @ rev rev\\<alpha>\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "then"], ["proof (chain)\npicking this:\n  \\<tau> = rev rev\\<beta> @ [x] @ rev rev\\<alpha>", "obtain \\<beta> \\<alpha>\n    where \\<tau>_is_\\<beta>x\\<alpha>: \"\\<tau> = \\<beta> @ [x] @ \\<alpha>\"\n    and \\<alpha>_is_revrev\\<alpha>: \"\\<alpha> = (rev rev\\<alpha>)\"\n    and \\<beta>_is_revrev\\<beta>: \"\\<beta> = (rev rev\\<beta>)\""], ["proof (prove)\nusing this:\n  \\<tau> = rev rev\\<beta> @ [x] @ rev rev\\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta> \\<alpha>.\n        \\<lbrakk>\\<tau> = \\<beta> @ [x] @ \\<alpha>;\n         \\<alpha> = rev rev\\<alpha>; \\<beta> = rev rev\\<beta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<tau> = \\<beta> @ [x] @ \\<alpha>\n  \\<alpha> = rev rev\\<alpha>\n  \\<beta> = rev rev\\<beta>\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "hence \\<alpha>_no_x: \"\\<alpha> \\<upharpoonleft> X = []\""], ["proof (prove)\nusing this:\n  \\<tau> = \\<beta> @ [x] @ \\<alpha>\n  \\<alpha> = rev rev\\<alpha>\n  \\<beta> = rev rev\\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<upharpoonleft> X = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<beta> @ [x] @ \\<alpha>; \\<alpha> = rev rev\\<alpha>;\n     \\<beta> = rev rev\\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<upharpoonleft> X = []", "from \\<alpha>_is_revrev\\<alpha> rev\\<alpha>_no_x"], ["proof (chain)\npicking this:\n  \\<alpha> = rev rev\\<alpha>\n  \\<forall>a\\<in>set rev\\<alpha>. a \\<notin> X", "have \"\\<forall>a \\<in> set \\<alpha>. a \\<notin> X\""], ["proof (prove)\nusing this:\n  \\<alpha> = rev rev\\<alpha>\n  \\<forall>a\\<in>set rev\\<alpha>. a \\<notin> X\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set \\<alpha>. a \\<notin> X", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set \\<alpha>. a \\<notin> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> = \\<beta> @ [x] @ \\<alpha>; \\<alpha> = rev rev\\<alpha>;\n     \\<beta> = rev rev\\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<alpha> \\<upharpoonleft> X = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set \\<alpha>. a \\<notin> X\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<upharpoonleft> X = []", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<upharpoonleft> X = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "have \"n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "from \\<alpha>_no_x"], ["proof (chain)\npicking this:\n  \\<alpha> \\<upharpoonleft> X = []", "have \\<alpha>X_zero_len: \"length (\\<alpha> \\<upharpoonleft> X) = 0\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. length (\\<alpha> \\<upharpoonleft> X) = 0", "by auto"], ["proof (state)\nthis:\n  length (\\<alpha> \\<upharpoonleft> X) = 0\n\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "from x_in_X"], ["proof (chain)\npicking this:\n  x \\<in> X", "have xX_one_len: \"length ([x] \\<upharpoonleft> X) = 1\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. length ([x] \\<upharpoonleft> X) = 1", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  length ([x] \\<upharpoonleft> X) = 1\n\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "from \\<tau>_is_\\<beta>x\\<alpha>"], ["proof (chain)\npicking this:\n  \\<tau> = \\<beta> @ [x] @ \\<alpha>", "have \"length ?L = length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X) + length (\\<alpha> \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  \\<tau> = \\<beta> @ [x] @ \\<alpha>\n\ngoal (1 subgoal):\n 1. length (\\<tau> \\<upharpoonleft> X) =\n    length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X) +\n    length (\\<alpha> \\<upharpoonleft> X)", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  length (\\<tau> \\<upharpoonleft> X) =\n  length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X) +\n  length (\\<alpha> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "with \\<alpha>X_zero_len"], ["proof (chain)\npicking this:\n  length (\\<alpha> \\<upharpoonleft> X) = 0\n  length (\\<tau> \\<upharpoonleft> X) =\n  length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X) +\n  length (\\<alpha> \\<upharpoonleft> X)", "have \"length ?L = length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  length (\\<alpha> \\<upharpoonleft> X) = 0\n  length (\\<tau> \\<upharpoonleft> X) =\n  length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X) +\n  length (\\<alpha> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. length (\\<tau> \\<upharpoonleft> X) =\n    length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X)", "by auto"], ["proof (state)\nthis:\n  length (\\<tau> \\<upharpoonleft> X) =\n  length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "with xX_one_len Suc_n_is_len_\\<tau>X"], ["proof (chain)\npicking this:\n  length ([x] \\<upharpoonleft> X) = 1\n  Suc n = length (\\<tau> \\<upharpoonleft> X)\n  length (\\<tau> \\<upharpoonleft> X) =\n  length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X)", "have \"n = length (\\<beta> \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  length ([x] \\<upharpoonleft> X) = 1\n  Suc n = length (\\<tau> \\<upharpoonleft> X)\n  length (\\<tau> \\<upharpoonleft> X) =\n  length (\\<beta> \\<upharpoonleft> X) + length ([x] \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. n = length (\\<beta> \\<upharpoonleft> X)", "by auto"], ["proof (state)\nthis:\n  n = length (\\<beta> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "with \\<alpha>X_zero_len"], ["proof (chain)\npicking this:\n  length (\\<alpha> \\<upharpoonleft> X) = 0\n  n = length (\\<beta> \\<upharpoonleft> X)", "show ?thesis"], ["proof (prove)\nusing this:\n  length (\\<alpha> \\<upharpoonleft> X) = 0\n  n = length (\\<beta> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. Suc n = length (\\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n    \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "with x_in_X \\<tau>_is_\\<beta>x\\<alpha> \\<alpha>_no_x"], ["proof (chain)\npicking this:\n  x \\<in> X\n  \\<tau> = \\<beta> @ [x] @ \\<alpha>\n  \\<alpha> \\<upharpoonleft> X = []\n  n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X\n  \\<tau> = \\<beta> @ [x] @ \\<alpha>\n  \\<alpha> \\<upharpoonleft> X = []\n  n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<beta> x \\<alpha>.\n       x \\<in> X \\<and>\n       \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<beta> x \\<alpha>.\n     x \\<in> X \\<and>\n     \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n     \\<alpha> \\<upharpoonleft> X = [] \\<and>\n     n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma projection_rev_commute:\n  \"rev (l \\<upharpoonleft> X) = (rev l) \\<upharpoonleft> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (l \\<upharpoonleft> X) = rev l \\<upharpoonleft> X", "by (induct l, simp add: projection_def, simp add: projection_def)"], ["", "(* Same as the previous lemma except that we split around the FIRST\n    occurrence.\n\n    Note that we do not express non-emptiness via the length function\n    simply because there is no need for it in the theories relying on\n    this lemma. *)"], ["", "lemma projection_split_first: \"\\<lbrakk> (\\<tau> \\<upharpoonleft> X) = x # xs \\<rbrakk> \\<Longrightarrow> \\<exists> \\<alpha> \\<beta>. (\\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and> \\<alpha> \\<upharpoonleft> X = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "assume \\<tau>X_is_x_xs: \"(\\<tau> \\<upharpoonleft> X) = x # xs\""], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "hence \"0 \\<noteq> length (\\<tau> \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> length (\\<tau> \\<upharpoonleft> X)", "by auto"], ["proof (state)\nthis:\n  0 \\<noteq> length (\\<tau> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "hence \"0 \\<noteq> length (rev (\\<tau> \\<upharpoonleft> X))\""], ["proof (prove)\nusing this:\n  0 \\<noteq> length (\\<tau> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> length (rev (\\<tau> \\<upharpoonleft> X))", "by auto"], ["proof (state)\nthis:\n  0 \\<noteq> length (rev (\\<tau> \\<upharpoonleft> X))\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "hence \"0 \\<noteq> length ((rev \\<tau>) \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  0 \\<noteq> length (rev (\\<tau> \\<upharpoonleft> X))\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> length (rev \\<tau> \\<upharpoonleft> X)", "by (simp add: projection_rev_commute)"], ["proof (state)\nthis:\n  0 \\<noteq> length (rev \\<tau> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "then"], ["proof (chain)\npicking this:\n  0 \\<noteq> length (rev \\<tau> \\<upharpoonleft> X)", "obtain n where \"Suc n = length ((rev \\<tau>) \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  0 \\<noteq> length (rev \\<tau> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        Suc n = length (rev \\<tau> \\<upharpoonleft> X) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto, metis Suc_pred length_greater_0_conv that)"], ["proof (state)\nthis:\n  Suc n = length (rev \\<tau> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "from projection_split_last[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>\\<beta> x \\<alpha>.\n     x \\<in> X \\<and>\n     rev \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n     \\<alpha> \\<upharpoonleft> X = [] \\<and>\n     n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)", "obtain \\<beta>' x' \\<alpha>' \n    where x'_in_X: \"x' \\<in> X\"\n    and rev\\<tau>_is_\\<beta>'x'\\<alpha>': \"rev \\<tau> = \\<beta>' @ [x'] @ \\<alpha>'\"\n    and \\<alpha>'X_empty: \"\\<alpha>' \\<upharpoonleft> X = []\""], ["proof (prove)\nusing this:\n  \\<exists>\\<beta> x \\<alpha>.\n     x \\<in> X \\<and>\n     rev \\<tau> = \\<beta> @ [x] @ \\<alpha> \\<and>\n     \\<alpha> \\<upharpoonleft> X = [] \\<and>\n     n = length ((\\<beta> @ \\<alpha>) \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. (\\<And>x' \\<beta>' \\<alpha>'.\n        \\<lbrakk>x' \\<in> X; rev \\<tau> = \\<beta>' @ [x'] @ \\<alpha>';\n         \\<alpha>' \\<upharpoonleft> X = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' \\<in> X\n  rev \\<tau> = \\<beta>' @ [x'] @ \\<alpha>'\n  \\<alpha>' \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "from rev\\<tau>_is_\\<beta>'x'\\<alpha>'"], ["proof (chain)\npicking this:\n  rev \\<tau> = \\<beta>' @ [x'] @ \\<alpha>'", "have \"rev (rev \\<tau>) = rev (\\<beta>' @ [x'] @ \\<alpha>')\""], ["proof (prove)\nusing this:\n  rev \\<tau> = \\<beta>' @ [x'] @ \\<alpha>'\n\ngoal (1 subgoal):\n 1. rev (rev \\<tau>) = rev (\\<beta>' @ [x'] @ \\<alpha>')", ".."], ["proof (state)\nthis:\n  rev (rev \\<tau>) = rev (\\<beta>' @ [x'] @ \\<alpha>')\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "hence \\<tau>_is_rev\\<alpha>'_x'_rev\\<beta>':\"\\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\""], ["proof (prove)\nusing this:\n  rev (rev \\<tau>) = rev (\\<beta>' @ [x'] @ \\<alpha>')\n\ngoal (1 subgoal):\n 1. \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'", "by auto"], ["proof (state)\nthis:\n  \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "moreover"], ["proof (state)\nthis:\n  \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "from \\<alpha>'X_empty"], ["proof (chain)\npicking this:\n  \\<alpha>' \\<upharpoonleft> X = []", "have rev\\<alpha>'X_empty: \"rev \\<alpha>' \\<upharpoonleft> X = []\""], ["proof (prove)\nusing this:\n  \\<alpha>' \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. rev \\<alpha>' \\<upharpoonleft> X = []", "by (metis projection_rev_commute rev_is_Nil_conv)"], ["proof (state)\nthis:\n  rev \\<alpha>' \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "moreover"], ["proof (state)\nthis:\n  rev \\<alpha>' \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "note x'_in_X"], ["proof (state)\nthis:\n  x' \\<in> X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\n  rev \\<alpha>' \\<upharpoonleft> X = []\n  x' \\<in> X", "have \"(\\<tau> \\<upharpoonleft> X) = x' # ((rev \\<beta>') \\<upharpoonleft> X)\""], ["proof (prove)\nusing this:\n  \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\n  rev \\<alpha>' \\<upharpoonleft> X = []\n  x' \\<in> X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x' # rev \\<beta>' \\<upharpoonleft> X", "by (simp only: projection_concatenation_commute projection_def, auto)"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = x' # rev \\<beta>' \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "with \\<tau>X_is_x_xs"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X = x # xs\n  \\<tau> \\<upharpoonleft> X = x' # rev \\<beta>' \\<upharpoonleft> X", "have \"x = x'\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = x # xs\n  \\<tau> \\<upharpoonleft> X = x' # rev \\<beta>' \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. x = x'", "by auto"], ["proof (state)\nthis:\n  x = x'\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "with \\<tau>_is_rev\\<alpha>'_x'_rev\\<beta>'"], ["proof (chain)\npicking this:\n  \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\n  x = x'", "have \\<tau>_is_rev\\<alpha>'_x_rev\\<beta>': \"\\<tau> = rev \\<alpha>' @ [x] @ rev \\<beta>'\""], ["proof (prove)\nusing this:\n  \\<tau> = rev \\<alpha>' @ [x'] @ rev \\<beta>'\n  x = x'\n\ngoal (1 subgoal):\n 1. \\<tau> = rev \\<alpha>' @ [x] @ rev \\<beta>'", "by auto"], ["proof (state)\nthis:\n  \\<tau> = rev \\<alpha>' @ [x] @ rev \\<beta>'\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "with rev\\<alpha>'X_empty"], ["proof (chain)\npicking this:\n  rev \\<alpha>' \\<upharpoonleft> X = []\n  \\<tau> = rev \\<alpha>' @ [x] @ rev \\<beta>'", "show ?thesis"], ["proof (prove)\nusing this:\n  rev \\<alpha>' \\<upharpoonleft> X = []\n  \\<tau> = rev \\<alpha>' @ [x] @ rev \\<beta>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> \\<beta>.\n     \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> X = []\n\ngoal:\nNo subgoals!", "qed"], ["", "(* this lemma extends the previous lemma by also concluding that the suffix of the splitted trace\n   projected is equal to the projection of the initial trace without the first element *)"], ["", "lemma projection_split_first_with_suffix: \n  \"\\<lbrakk> (\\<tau> \\<upharpoonleft> X) = x # xs \\<rbrakk> \\<Longrightarrow> \\<exists> \\<alpha> \\<beta>. (\\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and> \\<alpha> \\<upharpoonleft> X = [] \\<and> \\<beta> \\<upharpoonleft> X = xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "assume tau_proj_X: \"(\\<tau> \\<upharpoonleft> X) = x # xs\""], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # xs \\<Longrightarrow>\n    \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "from   tau_proj_X"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X = x # xs", "have x_in_X: \"x \\<in> X\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. x \\<in> X", "by (metis IntE inter_set_filter list.set_intros(1) projection_def)"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "from  tau_proj_X"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X = x # xs", "have  \"\\<exists> \\<alpha> \\<beta>. \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and> \\<alpha> \\<upharpoonleft> X = []\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "using projection_split_first"], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = x # xs\n  ?\\<tau> \\<upharpoonleft> ?X = ?x # ?xs \\<Longrightarrow>\n  \\<exists>\\<alpha> \\<beta>.\n     ?\\<tau> = \\<alpha> @ [?x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> ?X = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = []", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> \\<beta>.\n     \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha> \\<beta>.\n     \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> X = []", "obtain \\<alpha> \\<beta> where tau_split: \"\\<tau> = \\<alpha> @ [x] @ \\<beta>\"\n                      and X_empty_prefix:\"\\<alpha> \\<upharpoonleft> X = []\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha> \\<beta>.\n     \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> \\<beta>.\n        \\<lbrakk>\\<tau> = \\<alpha> @ [x] @ \\<beta>;\n         \\<alpha> \\<upharpoonleft> X = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<tau> = \\<alpha> @ [x] @ \\<beta>\n  \\<alpha> \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "from tau_split tau_proj_X"], ["proof (chain)\npicking this:\n  \\<tau> = \\<alpha> @ [x] @ \\<beta>\n  \\<tau> \\<upharpoonleft> X = x # xs", "have  \"(\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X =x # xs\""], ["proof (prove)\nusing this:\n  \\<tau> = \\<alpha> @ [x] @ \\<beta>\n  \\<tau> \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X = x # xs", "by auto"], ["proof (state)\nthis:\n  (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "with  X_empty_prefix"], ["proof (chain)\npicking this:\n  \\<alpha> \\<upharpoonleft> X = []\n  (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X = x # xs", "have  \"([x] @ \\<beta>) \\<upharpoonleft> X =x # xs\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = []\n  (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. ([x] @ \\<beta>) \\<upharpoonleft> X = x # xs", "by (simp add: projection_concatenation_commute)"], ["proof (state)\nthis:\n  ([x] @ \\<beta>) \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "hence \"(x # \\<beta>) \\<upharpoonleft> X =x # xs\""], ["proof (prove)\nusing this:\n  ([x] @ \\<beta>) \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. (x # \\<beta>) \\<upharpoonleft> X = x # xs", "by auto"], ["proof (state)\nthis:\n  (x # \\<beta>) \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "with  x_in_X"], ["proof (chain)\npicking this:\n  x \\<in> X\n  (x # \\<beta>) \\<upharpoonleft> X = x # xs", "have \"\\<beta> \\<upharpoonleft> X = xs\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  (x # \\<beta>) \\<upharpoonleft> X = x # xs\n\ngoal (1 subgoal):\n 1. \\<beta> \\<upharpoonleft> X = xs", "unfolding projection_def"], ["proof (prove)\nusing this:\n  x \\<in> X\n  filter (\\<lambda>x. x \\<in> X) (x # \\<beta>) = x # xs\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> X) \\<beta> = xs", "by simp"], ["proof (state)\nthis:\n  \\<beta> \\<upharpoonleft> X = xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "with  tau_split X_empty_prefix"], ["proof (chain)\npicking this:\n  \\<tau> = \\<alpha> @ [x] @ \\<beta>\n  \\<alpha> \\<upharpoonleft> X = []\n  \\<beta> \\<upharpoonleft> X = xs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> = \\<alpha> @ [x] @ \\<beta>\n  \\<alpha> \\<upharpoonleft> X = []\n  \\<beta> \\<upharpoonleft> X = xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta>.\n       \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n       \\<alpha> \\<upharpoonleft> X = [] \\<and>\n       \\<beta> \\<upharpoonleft> X = xs", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> \\<beta>.\n     \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> X = [] \\<and> \\<beta> \\<upharpoonleft> X = xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> \\<beta>.\n     \\<tau> = \\<alpha> @ [x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> X = [] \\<and> \\<beta> \\<upharpoonleft> X = xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma projection_split_arbitrary_element: \n  \"\\<lbrakk>\\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X; x \\<in> X \\<rbrakk> \n      \\<Longrightarrow> \\<exists> \\<alpha>' \\<beta>'. (\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and> \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and> \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "assume \"\\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\"\n  and  \" x \\<in> X\""], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "{"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "have \"\\<lbrakk>\\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X; x \\<in> X; n = length(\\<alpha>\\<upharpoonleft>X) \\<rbrakk>\n          \\<Longrightarrow> \\<exists> \\<alpha>' \\<beta>'. (\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and> \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and> \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X; n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "proof (induct n arbitrary: \\<tau> \\<alpha> )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<alpha>.\n       \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; 0 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X\n 2. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "case 0"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  0 = length (\\<alpha> \\<upharpoonleft> X)\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<alpha>.\n       \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; 0 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X\n 2. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "hence \"\\<alpha>\\<upharpoonleft>X = []\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  0 = length (\\<alpha> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<upharpoonleft> X = []", "unfolding projection_def"], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> X) \\<tau> =\n  filter (\\<lambda>x. x \\<in> X) (\\<alpha> @ [x] @ \\<beta>)\n  x \\<in> X\n  0 = length (filter (\\<lambda>x. x \\<in> X) \\<alpha>)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> X) \\<alpha> = []", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<upharpoonleft> X = []\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<alpha>.\n       \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; 0 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X\n 2. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "with \"0.prems\"(1) \"0.prems\"(2)"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  \\<alpha> \\<upharpoonleft> X = []", "have \"\\<tau>\\<upharpoonleft>X = x # \\<beta>\\<upharpoonleft>X\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  \\<alpha> \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X = x # \\<beta> \\<upharpoonleft> X", "unfolding projection_def"], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> X) \\<tau> =\n  filter (\\<lambda>x. x \\<in> X) (\\<alpha> @ [x] @ \\<beta>)\n  x \\<in> X\n  filter (\\<lambda>x. x \\<in> X) \\<alpha> = []\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> X) \\<tau> =\n    x # filter (\\<lambda>x. x \\<in> X) \\<beta>", "by simp"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X = x # \\<beta> \\<upharpoonleft> X\n\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<alpha>.\n       \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; 0 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X\n 2. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "with \\<open>\\<alpha>\\<upharpoonleft>X = []\\<close>"], ["proof (chain)\npicking this:\n  \\<alpha> \\<upharpoonleft> X = []\n  \\<tau> \\<upharpoonleft> X = x # \\<beta> \\<upharpoonleft> X", "show ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = []\n  \\<tau> \\<upharpoonleft> X = x # \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'' \\<beta>'.\n       \\<tau> = \\<alpha>'' @ [x] @ \\<beta>' \\<and>\n       \\<alpha>'' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n       \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X", "using projection_split_first_with_suffix"], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = []\n  \\<tau> \\<upharpoonleft> X = x # \\<beta> \\<upharpoonleft> X\n  ?\\<tau> \\<upharpoonleft> ?X = ?x # ?xs \\<Longrightarrow>\n  \\<exists>\\<alpha> \\<beta>.\n     ?\\<tau> = \\<alpha> @ [?x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> ?X = [] \\<and>\n     \\<beta> \\<upharpoonleft> ?X = ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'' \\<beta>'.\n       \\<tau> = \\<alpha>'' @ [x] @ \\<beta>' \\<and>\n       \\<alpha>'' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n       \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>'' \\<beta>'.\n     \\<tau> = \\<alpha>'' @ [x] @ \\<beta>' \\<and>\n     \\<alpha>'' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n     \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<upharpoonleft> X =\n           (?\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; n = length (?\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       ?\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       ?\\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  Suc n = length (\\<alpha> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "from \"Suc.prems\"(1)"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X", "have \"\\<tau>\\<upharpoonleft>X=\\<alpha>\\<upharpoonleft>X @ ([x] @ \\<beta>) \\<upharpoonleft>X\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X =\n    \\<alpha> \\<upharpoonleft> X @ ([x] @ \\<beta>) \\<upharpoonleft> X", "using projection_concatenation_commute"], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  (?l1.0 @ ?l2.0) \\<upharpoonleft> ?X =\n  ?l1.0 \\<upharpoonleft> ?X @ ?l2.0 \\<upharpoonleft> ?X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X =\n    \\<alpha> \\<upharpoonleft> X @ ([x] @ \\<beta>) \\<upharpoonleft> X", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X =\n  \\<alpha> \\<upharpoonleft> X @ ([x] @ \\<beta>) \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "from \"Suc.prems\"(3)"], ["proof (chain)\npicking this:\n  Suc n = length (\\<alpha> \\<upharpoonleft> X)", "obtain x' xs' where \"\\<alpha> \\<upharpoonleft>X= x' #xs'\"\n                                            and \"x' \\<in> X\""], ["proof (prove)\nusing this:\n  Suc n = length (\\<alpha> \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. (\\<And>x' xs'.\n        \\<lbrakk>\\<alpha> \\<upharpoonleft> X = x' # xs'; x' \\<in> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis filter_eq_ConsD length_Suc_conv projection_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  x' \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  x' \\<in> X", "obtain a\\<^sub>1 a\\<^sub>2 where \"\\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\" \n                         and \"a\\<^sub>1\\<upharpoonleft>X = []\"\n                         and \"a\\<^sub>2\\<upharpoonleft>X = xs'\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  x' \\<in> X\n\ngoal (1 subgoal):\n 1. (\\<And>a\\<^sub>1 a\\<^sub>2.\n        \\<lbrakk>\\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2;\n         a\\<^sub>1 \\<upharpoonleft> X = [];\n         a\\<^sub>2 \\<upharpoonleft> X = xs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using projection_split_first_with_suffix"], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  x' \\<in> X\n  ?\\<tau> \\<upharpoonleft> ?X = ?x # ?xs \\<Longrightarrow>\n  \\<exists>\\<alpha> \\<beta>.\n     ?\\<tau> = \\<alpha> @ [?x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> ?X = [] \\<and>\n     \\<beta> \\<upharpoonleft> ?X = ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>a\\<^sub>1 a\\<^sub>2.\n        \\<lbrakk>\\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2;\n         a\\<^sub>1 \\<upharpoonleft> X = [];\n         a\\<^sub>2 \\<upharpoonleft> X = xs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\n  a\\<^sub>1 \\<upharpoonleft> X = []\n  a\\<^sub>2 \\<upharpoonleft> X = xs'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "with \\<open>x' \\<in> X\\<close> \"Suc.prems\"(1)"], ["proof (chain)\npicking this:\n  x' \\<in> X\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  \\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\n  a\\<^sub>1 \\<upharpoonleft> X = []\n  a\\<^sub>2 \\<upharpoonleft> X = xs'", "have \"\\<tau>\\<upharpoonleft>X= x' #  (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft>X\""], ["proof (prove)\nusing this:\n  x' \\<in> X\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  \\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\n  a\\<^sub>1 \\<upharpoonleft> X = []\n  a\\<^sub>2 \\<upharpoonleft> X = xs'\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> X =\n    x' # (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X", "unfolding projection_def"], ["proof (prove)\nusing this:\n  x' \\<in> X\n  filter (\\<lambda>x. x \\<in> X) \\<tau> =\n  filter (\\<lambda>x. x \\<in> X) (\\<alpha> @ [x] @ \\<beta>)\n  \\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\n  filter (\\<lambda>x. x \\<in> X) a\\<^sub>1 = []\n  filter (\\<lambda>x. x \\<in> X) a\\<^sub>2 = xs'\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> X) \\<tau> =\n    x' # filter (\\<lambda>x. x \\<in> X) (a\\<^sub>2 @ [x] @ \\<beta>)", "by simp"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> X =\n  x' # (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "then"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X =\n  x' # (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X", "obtain t\\<^sub>1 t\\<^sub>2 where \"\\<tau>= t\\<^sub>1 @ [x'] @ t\\<^sub>2\"\n                         and \"t\\<^sub>1\\<upharpoonleft>X = []\"\n                         and \"t\\<^sub>2\\<upharpoonleft>X = (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft>X\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X =\n  x' # (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. (\\<And>t\\<^sub>1 t\\<^sub>2.\n        \\<lbrakk>\\<tau> = t\\<^sub>1 @ [x'] @ t\\<^sub>2;\n         t\\<^sub>1 \\<upharpoonleft> X = [];\n         t\\<^sub>2 \\<upharpoonleft> X =\n         (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using projection_split_first_with_suffix"], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X =\n  x' # (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n  ?\\<tau> \\<upharpoonleft> ?X = ?x # ?xs \\<Longrightarrow>\n  \\<exists>\\<alpha> \\<beta>.\n     ?\\<tau> = \\<alpha> @ [?x] @ \\<beta> \\<and>\n     \\<alpha> \\<upharpoonleft> ?X = [] \\<and>\n     \\<beta> \\<upharpoonleft> ?X = ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>t\\<^sub>1 t\\<^sub>2.\n        \\<lbrakk>\\<tau> = t\\<^sub>1 @ [x'] @ t\\<^sub>2;\n         t\\<^sub>1 \\<upharpoonleft> X = [];\n         t\\<^sub>2 \\<upharpoonleft> X =\n         (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<tau> = t\\<^sub>1 @ [x'] @ t\\<^sub>2\n  t\\<^sub>1 \\<upharpoonleft> X = []\n  t\\<^sub>2 \\<upharpoonleft> X =\n  (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "from Suc.prems(3) \\<open>\\<alpha> \\<upharpoonleft>X= x' # xs'\\<close> \\<open>\\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\\<close> \\<open>a\\<^sub>1\\<upharpoonleft>X = []\\<close> \\<open>a\\<^sub>2\\<upharpoonleft>X = xs'\\<close>"], ["proof (chain)\npicking this:\n  Suc n = length (\\<alpha> \\<upharpoonleft> X)\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  \\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\n  a\\<^sub>1 \\<upharpoonleft> X = []\n  a\\<^sub>2 \\<upharpoonleft> X = xs'", "have \"n=length(a\\<^sub>2\\<upharpoonleft>X)\""], ["proof (prove)\nusing this:\n  Suc n = length (\\<alpha> \\<upharpoonleft> X)\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  \\<alpha> = a\\<^sub>1 @ [x'] @ a\\<^sub>2\n  a\\<^sub>1 \\<upharpoonleft> X = []\n  a\\<^sub>2 \\<upharpoonleft> X = xs'\n\ngoal (1 subgoal):\n 1. n = length (a\\<^sub>2 \\<upharpoonleft> X)", "by auto"], ["proof (state)\nthis:\n  n = length (a\\<^sub>2 \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "with \"Suc.hyps\"(1) \"Suc.prems\"(2) \\<open>t\\<^sub>2\\<upharpoonleft>X = (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft>X\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>?\\<tau> \\<upharpoonleft> X =\n           (?\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; n = length (?\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       ?\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       ?\\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n  x \\<in> X\n  t\\<^sub>2 \\<upharpoonleft> X =\n  (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n  n = length (a\\<^sub>2 \\<upharpoonleft> X)", "obtain t\\<^sub>2' t\\<^sub>3' where \"t\\<^sub>2=t\\<^sub>2' @ [x] @ t\\<^sub>3'\"\n                         and \"t\\<^sub>2'\\<upharpoonleft>X = a\\<^sub>2\\<upharpoonleft>X\"\n                         and \"t\\<^sub>3'\\<upharpoonleft>X = \\<beta>\\<upharpoonleft>X\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<tau> \\<upharpoonleft> X =\n           (?\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; n = length (?\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       ?\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       ?\\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n  x \\<in> X\n  t\\<^sub>2 \\<upharpoonleft> X =\n  (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n  n = length (a\\<^sub>2 \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. (\\<And>t\\<^sub>2' t\\<^sub>3'.\n        \\<lbrakk>t\\<^sub>2 = t\\<^sub>2' @ [x] @ t\\<^sub>3';\n         t\\<^sub>2' \\<upharpoonleft> X = a\\<^sub>2 \\<upharpoonleft> X;\n         t\\<^sub>3' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using projection_concatenation_commute"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<tau> \\<upharpoonleft> X =\n           (?\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; n = length (?\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       ?\\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       ?\\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n  x \\<in> X\n  t\\<^sub>2 \\<upharpoonleft> X =\n  (a\\<^sub>2 @ [x] @ \\<beta>) \\<upharpoonleft> X\n  n = length (a\\<^sub>2 \\<upharpoonleft> X)\n  (?l1.0 @ ?l2.0) \\<upharpoonleft> ?X =\n  ?l1.0 \\<upharpoonleft> ?X @ ?l2.0 \\<upharpoonleft> ?X\n\ngoal (1 subgoal):\n 1. (\\<And>t\\<^sub>2' t\\<^sub>3'.\n        \\<lbrakk>t\\<^sub>2 = t\\<^sub>2' @ [x] @ t\\<^sub>3';\n         t\\<^sub>2' \\<upharpoonleft> X = a\\<^sub>2 \\<upharpoonleft> X;\n         t\\<^sub>3' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t\\<^sub>2 = t\\<^sub>2' @ [x] @ t\\<^sub>3'\n  t\\<^sub>2' \\<upharpoonleft> X = a\\<^sub>2 \\<upharpoonleft> X\n  t\\<^sub>3' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "let ?\\<alpha>'=\"t\\<^sub>1 @ [x'] @ t\\<^sub>2'\" and ?\\<beta>'=\"t\\<^sub>3'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "from \\<open>\\<tau>= t\\<^sub>1 @ [x'] @ t\\<^sub>2\\<close> \\<open>t\\<^sub>2=t\\<^sub>2' @ [x] @ t\\<^sub>3'\\<close>"], ["proof (chain)\npicking this:\n  \\<tau> = t\\<^sub>1 @ [x'] @ t\\<^sub>2\n  t\\<^sub>2 = t\\<^sub>2' @ [x] @ t\\<^sub>3'", "have \"\\<tau>=?\\<alpha>'@[x]@?\\<beta>'\""], ["proof (prove)\nusing this:\n  \\<tau> = t\\<^sub>1 @ [x'] @ t\\<^sub>2\n  t\\<^sub>2 = t\\<^sub>2' @ [x] @ t\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<tau> = (t\\<^sub>1 @ [x'] @ t\\<^sub>2') @ [x] @ t\\<^sub>3'", "by auto"], ["proof (state)\nthis:\n  \\<tau> = (t\\<^sub>1 @ [x'] @ t\\<^sub>2') @ [x] @ t\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "moreover"], ["proof (state)\nthis:\n  \\<tau> = (t\\<^sub>1 @ [x'] @ t\\<^sub>2') @ [x] @ t\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "from  \\<open>\\<alpha> \\<upharpoonleft>X= x' # xs'\\<close>  \\<open>t\\<^sub>1\\<upharpoonleft>X = []\\<close> \\<open>x' \\<in> X\\<close> \\<open>t\\<^sub>2'\\<upharpoonleft>X = a\\<^sub>2\\<upharpoonleft>X\\<close> \\<open>a\\<^sub>2\\<upharpoonleft>X = xs'\\<close>"], ["proof (chain)\npicking this:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  t\\<^sub>1 \\<upharpoonleft> X = []\n  x' \\<in> X\n  t\\<^sub>2' \\<upharpoonleft> X = a\\<^sub>2 \\<upharpoonleft> X\n  a\\<^sub>2 \\<upharpoonleft> X = xs'", "have \"?\\<alpha>'\\<upharpoonleft>X = \\<alpha>\\<upharpoonleft>X\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  t\\<^sub>1 \\<upharpoonleft> X = []\n  x' \\<in> X\n  t\\<^sub>2' \\<upharpoonleft> X = a\\<^sub>2 \\<upharpoonleft> X\n  a\\<^sub>2 \\<upharpoonleft> X = xs'\n\ngoal (1 subgoal):\n 1. (t\\<^sub>1 @ [x'] @ t\\<^sub>2') \\<upharpoonleft> X =\n    \\<alpha> \\<upharpoonleft> X", "using projection_concatenation_commute"], ["proof (prove)\nusing this:\n  \\<alpha> \\<upharpoonleft> X = x' # xs'\n  t\\<^sub>1 \\<upharpoonleft> X = []\n  x' \\<in> X\n  t\\<^sub>2' \\<upharpoonleft> X = a\\<^sub>2 \\<upharpoonleft> X\n  a\\<^sub>2 \\<upharpoonleft> X = xs'\n  (?l1.0 @ ?l2.0) \\<upharpoonleft> ?X =\n  ?l1.0 \\<upharpoonleft> ?X @ ?l2.0 \\<upharpoonleft> ?X\n\ngoal (1 subgoal):\n 1. (t\\<^sub>1 @ [x'] @ t\\<^sub>2') \\<upharpoonleft> X =\n    \\<alpha> \\<upharpoonleft> X", "unfolding projection_def"], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> X) \\<alpha> = x' # xs'\n  filter (\\<lambda>x. x \\<in> X) t\\<^sub>1 = []\n  x' \\<in> X\n  filter (\\<lambda>x. x \\<in> X) t\\<^sub>2' =\n  filter (\\<lambda>x. x \\<in> X) a\\<^sub>2\n  filter (\\<lambda>x. x \\<in> X) a\\<^sub>2 = xs'\n  filter (\\<lambda>x. x \\<in> ?X) (?l1.0 @ ?l2.0) =\n  filter (\\<lambda>x. x \\<in> ?X) ?l1.0 @\n  filter (\\<lambda>x. x \\<in> ?X) ?l2.0\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> X) (t\\<^sub>1 @ [x'] @ t\\<^sub>2') =\n    filter (\\<lambda>x. x \\<in> X) \\<alpha>", "by simp"], ["proof (state)\nthis:\n  (t\\<^sub>1 @ [x'] @ t\\<^sub>2') \\<upharpoonleft> X =\n  \\<alpha> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<And>n \\<tau> \\<alpha>.\n       \\<lbrakk>\\<And>\\<tau> \\<alpha>.\n                   \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n                            (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n                    x \\<in> X;\n                    n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n  \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n  \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n  \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X;\n        \\<tau> \\<upharpoonleft> X =\n        (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n        x \\<in> X; Suc n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                            \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                            \\<alpha>' \\<upharpoonleft> X =\n                            \\<alpha> \\<upharpoonleft> X \\<and>\n                            \\<beta>' \\<upharpoonleft> X =\n                            \\<beta> \\<upharpoonleft> X", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> = (t\\<^sub>1 @ [x'] @ t\\<^sub>2') @ [x] @ t\\<^sub>3'\n  (t\\<^sub>1 @ [x'] @ t\\<^sub>2') \\<upharpoonleft> X =\n  \\<alpha> \\<upharpoonleft> X", "show ?case"], ["proof (prove)\nusing this:\n  \\<tau> = (t\\<^sub>1 @ [x'] @ t\\<^sub>2') @ [x] @ t\\<^sub>3'\n  (t\\<^sub>1 @ [x'] @ t\\<^sub>2') \\<upharpoonleft> X =\n  \\<alpha> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'' \\<beta>'.\n       \\<tau> = \\<alpha>'' @ [x] @ \\<beta>' \\<and>\n       \\<alpha>'' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n       \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X", "using \\<open>t\\<^sub>3'\\<upharpoonleft>X = \\<beta>\\<upharpoonleft>X\\<close>"], ["proof (prove)\nusing this:\n  \\<tau> = (t\\<^sub>1 @ [x'] @ t\\<^sub>2') @ [x] @ t\\<^sub>3'\n  (t\\<^sub>1 @ [x'] @ t\\<^sub>2') \\<upharpoonleft> X =\n  \\<alpha> \\<upharpoonleft> X\n  t\\<^sub>3' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'' \\<beta>'.\n       \\<tau> = \\<alpha>'' @ [x] @ \\<beta>' \\<and>\n       \\<alpha>'' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n       \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>'' \\<beta>'.\n     \\<tau> = \\<alpha>'' @ [x] @ \\<beta>' \\<and>\n     \\<alpha>'' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n     \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n           (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; n = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       \\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n           (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; ?n2 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       \\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n             (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n     x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                         \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                         \\<alpha>' \\<upharpoonleft> X =\n                         \\<alpha> \\<upharpoonleft> X \\<and>\n                         \\<beta>' \\<upharpoonleft> X =\n                         \\<beta> \\<upharpoonleft> X", "with \\<open>\\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\\<close> \\<open> x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n           (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; ?n2 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       \\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> X = (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X\n  x \\<in> X\n  \\<lbrakk>\\<tau> \\<upharpoonleft> X =\n           (\\<alpha> @ [x] @ \\<beta>) \\<upharpoonleft> X;\n   x \\<in> X; ?n2 = length (\\<alpha> \\<upharpoonleft> X)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<beta>'.\n                       \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n                       \\<alpha>' \\<upharpoonleft> X =\n                       \\<alpha> \\<upharpoonleft> X \\<and>\n                       \\<beta>' \\<upharpoonleft> X =\n                       \\<beta> \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' \\<beta>'.\n       \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n       \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n       \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X", "by simp"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' \\<beta>'.\n     \\<tau> = \\<alpha>' @ [x] @ \\<beta>' \\<and>\n     \\<alpha>' \\<upharpoonleft> X = \\<alpha> \\<upharpoonleft> X \\<and>\n     \\<beta>' \\<upharpoonleft> X = \\<beta> \\<upharpoonleft> X\n\ngoal:\nNo subgoals!", "qed"], ["", "(* If the projection of a list l onto a set X is empty, it\n    will remain empty when projecting further. *)"], ["", "lemma projection_on_intersection: \"l \\<upharpoonleft> X = [] \\<Longrightarrow> l \\<upharpoonleft> (X \\<inter> Y) = []\"\n(is \"?L1 = [] \\<Longrightarrow> ?L2 = []\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "assume \"?L1 = []\""], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "hence \"set ?L1 = {}\""], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. set (l \\<upharpoonleft> X) = {}", "by simp"], ["proof (state)\nthis:\n  set (l \\<upharpoonleft> X) = {}\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "moreover"], ["proof (state)\nthis:\n  set (l \\<upharpoonleft> X) = {}\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "have \"set ?L2 \\<subseteq> set ?L1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (l \\<upharpoonleft> (X \\<inter> Y))\n    \\<subseteq> set (l \\<upharpoonleft> X)", "by (simp add: projection_def, auto)"], ["proof (state)\nthis:\n  set (l \\<upharpoonleft> (X \\<inter> Y))\n  \\<subseteq> set (l \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "ultimately"], ["proof (chain)\npicking this:\n  set (l \\<upharpoonleft> X) = {}\n  set (l \\<upharpoonleft> (X \\<inter> Y))\n  \\<subseteq> set (l \\<upharpoonleft> X)", "have \"set ?L2 = {}\""], ["proof (prove)\nusing this:\n  set (l \\<upharpoonleft> X) = {}\n  set (l \\<upharpoonleft> (X \\<inter> Y))\n  \\<subseteq> set (l \\<upharpoonleft> X)\n\ngoal (1 subgoal):\n 1. set (l \\<upharpoonleft> (X \\<inter> Y)) = {}", "by auto"], ["proof (state)\nthis:\n  set (l \\<upharpoonleft> (X \\<inter> Y)) = {}\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = [] \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (l \\<upharpoonleft> (X \\<inter> Y)) = {}\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> (X \\<inter> Y) = []", "by auto"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> Y) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "(* The previous lemma expressed with subsets. *)"], ["", "lemma projection_on_subset: \"\\<lbrakk> Y \\<subseteq> X; l \\<upharpoonleft> X = [] \\<rbrakk> \\<Longrightarrow> l \\<upharpoonleft> Y = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "assume subset: \"Y \\<subseteq> X\""], ["proof (state)\nthis:\n  Y \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "assume proj_empty: \"l \\<upharpoonleft> X = []\""], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "hence \"l \\<upharpoonleft> (X \\<inter> Y) = []\""], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> X = []\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> (X \\<inter> Y) = []", "by (rule projection_on_intersection)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> Y) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "moreover"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> Y) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "from subset"], ["proof (chain)\npicking this:\n  Y \\<subseteq> X", "have \"X \\<inter> Y = Y\""], ["proof (prove)\nusing this:\n  Y \\<subseteq> X\n\ngoal (1 subgoal):\n 1. X \\<inter> Y = Y", "by auto"], ["proof (state)\nthis:\n  X \\<inter> Y = Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> X; l \\<upharpoonleft> X = []\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> Y = []", "ultimately"], ["proof (chain)\npicking this:\n  l \\<upharpoonleft> (X \\<inter> Y) = []\n  X \\<inter> Y = Y", "show ?thesis"], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> (X \\<inter> Y) = []\n  X \\<inter> Y = Y\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> Y = []", "by auto"], ["proof (state)\nthis:\n  l \\<upharpoonleft> Y = []\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Another variant that is used in proofs of BSP compositionality theorems. *)"], ["", "lemma projection_on_subset2: \"\\<lbrakk> set l \\<subseteq> L; l \\<upharpoonleft> X' = []; X \\<inter> L \\<subseteq> X' \\<rbrakk> \\<Longrightarrow> l \\<upharpoonleft> X = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "assume setl_subset_L: \"set l \\<subseteq> L\""], ["proof (state)\nthis:\n  set l \\<subseteq> L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "assume l_no_X': \"l \\<upharpoonleft> X' = []\""], ["proof (state)\nthis:\n  l \\<upharpoonleft> X' = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "assume X_inter_L_subset_X': \"X \\<inter> L \\<subseteq> X'\""], ["proof (state)\nthis:\n  X \\<inter> L \\<subseteq> X'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "from X_inter_L_subset_X' l_no_X'"], ["proof (chain)\npicking this:\n  X \\<inter> L \\<subseteq> X'\n  l \\<upharpoonleft> X' = []", "have \"l \\<upharpoonleft> (X \\<inter> L) = []\""], ["proof (prove)\nusing this:\n  X \\<inter> L \\<subseteq> X'\n  l \\<upharpoonleft> X' = []\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> (X \\<inter> L) = []", "by (rule projection_on_subset)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> L) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "moreover"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> L) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "have \"l \\<upharpoonleft> (X \\<inter> L) = (l \\<upharpoonleft> L) \\<upharpoonleft> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> (X \\<inter> L) =\n    l \\<upharpoonleft> L \\<upharpoonleft> X", "by (simp add: Int_commute projection_def)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> L) =\n  l \\<upharpoonleft> L \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "moreover"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> L) =\n  l \\<upharpoonleft> L \\<upharpoonleft> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "note setl_subset_L"], ["proof (state)\nthis:\n  set l \\<subseteq> L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set l \\<subseteq> L; l \\<upharpoonleft> X' = [];\n     X \\<inter> L \\<subseteq> X'\\<rbrakk>\n    \\<Longrightarrow> l \\<upharpoonleft> X = []", "ultimately"], ["proof (chain)\npicking this:\n  l \\<upharpoonleft> (X \\<inter> L) = []\n  l \\<upharpoonleft> (X \\<inter> L) =\n  l \\<upharpoonleft> L \\<upharpoonleft> X\n  set l \\<subseteq> L", "show ?thesis"], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> (X \\<inter> L) = []\n  l \\<upharpoonleft> (X \\<inter> L) =\n  l \\<upharpoonleft> L \\<upharpoonleft> X\n  set l \\<subseteq> L\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = []", "by (simp add: list_subset_iff_projection_neutral)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = []\n\ngoal:\nNo subgoals!", "qed"], ["", "(*If the projection of two lists l1 and l2  onto a set Y is equal then its also equal for all X \\<subseteq> Y*)"], ["", "lemma non_empty_projection_on_subset: \"X \\<subseteq> Y \\<and> l\\<^sub>1 \\<upharpoonleft> Y = l\\<^sub>2 \\<upharpoonleft> Y \\<Longrightarrow>  l\\<^sub>1 \\<upharpoonleft> X = l\\<^sub>2 \\<upharpoonleft> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> Y \\<and>\n    l\\<^sub>1 \\<upharpoonleft> Y =\n    l\\<^sub>2 \\<upharpoonleft> Y \\<Longrightarrow>\n    l\\<^sub>1 \\<upharpoonleft> X = l\\<^sub>2 \\<upharpoonleft> X", "by (metis projection_subset_eq_from_superset_eq subset_Un_eq)"], ["", "(* Intersecting a projection set with a list's elements does not change the result\n    of the projection. *)"], ["", "lemma projection_intersection_neutral: \"(set l \\<subseteq> X) \\<Longrightarrow> (l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "assume \"set l \\<subseteq> X\""], ["proof (state)\nthis:\n  set l \\<subseteq> X\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "hence \"(l \\<upharpoonleft> X) = l\""], ["proof (prove)\nusing this:\n  set l \\<subseteq> X\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X = l", "by (simp add: list_subset_iff_projection_neutral)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X = l\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "hence \"(l \\<upharpoonleft> X) \\<upharpoonleft> Y = l \\<upharpoonleft> Y\""], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> X = l\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X \\<upharpoonleft> Y = l \\<upharpoonleft> Y", "by simp"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X \\<upharpoonleft> Y = l \\<upharpoonleft> Y\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "moreover"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X \\<upharpoonleft> Y = l \\<upharpoonleft> Y\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "have \"(l \\<upharpoonleft> X) \\<upharpoonleft> Y = l \\<upharpoonleft> (X \\<inter> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X \\<upharpoonleft> Y =\n    l \\<upharpoonleft> (X \\<inter> Y)", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  l \\<upharpoonleft> X \\<upharpoonleft> Y =\n  l \\<upharpoonleft> (X \\<inter> Y)\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "ultimately"], ["proof (chain)\npicking this:\n  l \\<upharpoonleft> X \\<upharpoonleft> Y = l \\<upharpoonleft> Y\n  l \\<upharpoonleft> X \\<upharpoonleft> Y =\n  l \\<upharpoonleft> (X \\<inter> Y)", "show ?thesis"], ["proof (prove)\nusing this:\n  l \\<upharpoonleft> X \\<upharpoonleft> Y = l \\<upharpoonleft> Y\n  l \\<upharpoonleft> X \\<upharpoonleft> Y =\n  l \\<upharpoonleft> (X \\<inter> Y)\n\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y", "by simp"], ["proof (state)\nthis:\n  l \\<upharpoonleft> (X \\<inter> Y) = l \\<upharpoonleft> Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma projection_commute:\n  \"(l \\<upharpoonleft> X) \\<upharpoonleft> Y = (l \\<upharpoonleft> Y) \\<upharpoonleft> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<upharpoonleft> X \\<upharpoonleft> Y =\n    l \\<upharpoonleft> Y \\<upharpoonleft> X", "by (simp add: projection_def conj_commute)"], ["", "lemma projection_subset_elim: \"Y \\<subseteq> X \\<Longrightarrow> (l \\<upharpoonleft> X) \\<upharpoonleft> Y = l \\<upharpoonleft> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<subseteq> X \\<Longrightarrow>\n    l \\<upharpoonleft> X \\<upharpoonleft> Y = l \\<upharpoonleft> Y", "by (simp only: projection_def, metis Diff_subset list_subset_iff_projection_neutral\n    minus_coset_filter order_trans projection_commute projection_def)"], ["", "lemma projection_sequence: \"(xs \\<upharpoonleft> X) \\<upharpoonleft> Y = (xs \\<upharpoonleft> (X \\<inter> Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<upharpoonleft> X \\<upharpoonleft> Y =\n    xs \\<upharpoonleft> (X \\<inter> Y)", "by (metis Int_absorb inf_sup_ord(1) list_subset_iff_projection_neutral\n    projection_intersection_neutral projection_subset_elim)"], ["", "(* This function yields a possible interleaving for given \n  traces t1 and t2.\n  The set A (B) shall denote the the set of events for t1 (t2).\n  Non-synchronization events in trace t1 are prioritized. *)"], ["", "fun merge :: \"'e set \\<Rightarrow> 'e set \\<Rightarrow> 'e list \\<Rightarrow> 'e list \\<Rightarrow> 'e list\"\nwhere\n\"merge A B [] t2 = t2\" |\n\"merge A B t1 [] = t1\" |\n\"merge A B (e1 # t1') (e2 # t2') = (if e1 = e2 then \n                                          e1 # (merge A B t1' t2')\n                                        else (if e1 \\<in> (A \\<inter> B) then\n                                               e2 # (merge A B (e1 # t1') t2')\n                                             else e1 # (merge A B t1' (e2 # t2'))))\""], ["", "(* If two traces can be interleaved, then merge yields such an interleaving  *)"], ["", "lemma merge_property: \"\\<lbrakk>set t1 \\<subseteq> A; set t2 \\<subseteq> B; t1 \\<upharpoonleft> B = t2 \\<upharpoonleft> A \\<rbrakk> \n  \\<Longrightarrow> let t = (merge A B t1 t2) in (t \\<upharpoonleft> A = t1 \\<and> t \\<upharpoonleft> B = t2 \\<and> set t \\<subseteq> ((set t1) \\<union> (set t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set t1 \\<subseteq> A; set t2 \\<subseteq> B;\n     t1 \\<upharpoonleft> B = t2 \\<upharpoonleft> A\\<rbrakk>\n    \\<Longrightarrow> let t = merge A B t1 t2\n                      in t \\<upharpoonleft> A = t1 \\<and>\n                         t \\<upharpoonleft> B = t2 \\<and>\n                         set t \\<subseteq> set t1 \\<union> set t2", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set t1 \\<subseteq> A; set t2 \\<subseteq> B;\n     t1 \\<upharpoonleft> B = t2 \\<upharpoonleft> A\\<rbrakk>\n    \\<Longrightarrow> merge A B t1 t2 \\<upharpoonleft> A = t1 \\<and>\n                      merge A B t1 t2 \\<upharpoonleft> B = t2 \\<and>\n                      set (merge A B t1 t2)\n                      \\<subseteq> set t1 \\<union> set t2", "proof (induct A B t1 t2 rule: merge.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A B t2.\n       \\<lbrakk>set [] \\<subseteq> A; set t2 \\<subseteq> B;\n        [] \\<upharpoonleft> B = t2 \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B [] t2 \\<upharpoonleft> A = [] \\<and>\n                         merge A B [] t2 \\<upharpoonleft> B = t2 \\<and>\n                         set (merge A B [] t2)\n                         \\<subseteq> set [] \\<union> set t2\n 2. \\<And>A B v va.\n       \\<lbrakk>set (v # va) \\<subseteq> A; set [] \\<subseteq> B;\n        (v # va) \\<upharpoonleft> B = [] \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (v # va) [] \\<upharpoonleft> A =\n                         v # va \\<and>\n                         merge A B (v # va) [] \\<upharpoonleft> B =\n                         [] \\<and>\n                         set (merge A B (v # va) [])\n                         \\<subseteq> set (v # va) \\<union> set []\n 3. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "case (1 A B t2)"], ["proof (state)\nthis:\n  set [] \\<subseteq> A\n  set t2 \\<subseteq> B\n  [] \\<upharpoonleft> B = t2 \\<upharpoonleft> A\n\ngoal (3 subgoals):\n 1. \\<And>A B t2.\n       \\<lbrakk>set [] \\<subseteq> A; set t2 \\<subseteq> B;\n        [] \\<upharpoonleft> B = t2 \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B [] t2 \\<upharpoonleft> A = [] \\<and>\n                         merge A B [] t2 \\<upharpoonleft> B = t2 \\<and>\n                         set (merge A B [] t2)\n                         \\<subseteq> set [] \\<union> set t2\n 2. \\<And>A B v va.\n       \\<lbrakk>set (v # va) \\<subseteq> A; set [] \\<subseteq> B;\n        (v # va) \\<upharpoonleft> B = [] \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (v # va) [] \\<upharpoonleft> A =\n                         v # va \\<and>\n                         merge A B (v # va) [] \\<upharpoonleft> B =\n                         [] \\<and>\n                         set (merge A B (v # va) [])\n                         \\<subseteq> set (v # va) \\<union> set []\n 3. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "thus ?case"], ["proof (prove)\nusing this:\n  set [] \\<subseteq> A\n  set t2 \\<subseteq> B\n  [] \\<upharpoonleft> B = t2 \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. merge A B [] t2 \\<upharpoonleft> A = [] \\<and>\n    merge A B [] t2 \\<upharpoonleft> B = t2 \\<and>\n    set (merge A B [] t2) \\<subseteq> set [] \\<union> set t2", "by (metis Un_empty_left empty_subsetI list_subset_iff_projection_neutral \n      merge.simps(1) set_empty subset_iff_psubset_eq)"], ["proof (state)\nthis:\n  merge A B [] t2 \\<upharpoonleft> A = [] \\<and>\n  merge A B [] t2 \\<upharpoonleft> B = t2 \\<and>\n  set (merge A B [] t2) \\<subseteq> set [] \\<union> set t2\n\ngoal (2 subgoals):\n 1. \\<And>A B v va.\n       \\<lbrakk>set (v # va) \\<subseteq> A; set [] \\<subseteq> B;\n        (v # va) \\<upharpoonleft> B = [] \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (v # va) [] \\<upharpoonleft> A =\n                         v # va \\<and>\n                         merge A B (v # va) [] \\<upharpoonleft> B =\n                         [] \\<and>\n                         set (merge A B (v # va) [])\n                         \\<subseteq> set (v # va) \\<union> set []\n 2. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A B v va.\n       \\<lbrakk>set (v # va) \\<subseteq> A; set [] \\<subseteq> B;\n        (v # va) \\<upharpoonleft> B = [] \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (v # va) [] \\<upharpoonleft> A =\n                         v # va \\<and>\n                         merge A B (v # va) [] \\<upharpoonleft> B =\n                         [] \\<and>\n                         set (merge A B (v # va) [])\n                         \\<subseteq> set (v # va) \\<union> set []\n 2. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "case (2 A B t1)"], ["proof (state)\nthis:\n  set (t1 # va_) \\<subseteq> A\n  set [] \\<subseteq> B\n  (t1 # va_) \\<upharpoonleft> B = [] \\<upharpoonleft> A\n\ngoal (2 subgoals):\n 1. \\<And>A B v va.\n       \\<lbrakk>set (v # va) \\<subseteq> A; set [] \\<subseteq> B;\n        (v # va) \\<upharpoonleft> B = [] \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (v # va) [] \\<upharpoonleft> A =\n                         v # va \\<and>\n                         merge A B (v # va) [] \\<upharpoonleft> B =\n                         [] \\<and>\n                         set (merge A B (v # va) [])\n                         \\<subseteq> set (v # va) \\<union> set []\n 2. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "thus ?case"], ["proof (prove)\nusing this:\n  set (t1 # va_) \\<subseteq> A\n  set [] \\<subseteq> B\n  (t1 # va_) \\<upharpoonleft> B = [] \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. merge A B (t1 # va_) [] \\<upharpoonleft> A = t1 # va_ \\<and>\n    merge A B (t1 # va_) [] \\<upharpoonleft> B = [] \\<and>\n    set (merge A B (t1 # va_) []) \\<subseteq> set (t1 # va_) \\<union> set []", "by (metis Un_empty_right empty_subsetI list_subset_iff_projection_neutral \n      merge.simps(2) set_empty subset_refl)"], ["proof (state)\nthis:\n  merge A B (t1 # va_) [] \\<upharpoonleft> A = t1 # va_ \\<and>\n  merge A B (t1 # va_) [] \\<upharpoonleft> B = [] \\<and>\n  set (merge A B (t1 # va_) []) \\<subseteq> set (t1 # va_) \\<union> set []\n\ngoal (1 subgoal):\n 1. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "case (3 A B e1 t1' e2 t2')"], ["proof (state)\nthis:\n  \\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n   t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B t1' t2')\n                    \\<subseteq> set t1' \\<union> set t2'\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n   set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n   (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                    e1 # t1' \\<and>\n                    merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B (e1 # t1') t2')\n                    \\<subseteq> set (e1 # t1') \\<union> set t2'\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B; set t1' \\<subseteq> A;\n   set (e2 # t2') \\<subseteq> B;\n   t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                    e2 # t2' \\<and>\n                    set (merge A B t1' (e2 # t2'))\n                    \\<subseteq> set t1' \\<union> set (e2 # t2')\n  set (e1 # t1') \\<subseteq> A\n  set (e2 # t2') \\<subseteq> B\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. \\<And>A B e1 t1' e2 t2'.\n       \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A;\n                 set t2' \\<subseteq> B;\n                 t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n                \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                                  t1' \\<and>\n                                  merge A B t1' t2' \\<upharpoonleft> B =\n                                  t2' \\<and>\n                                  set (merge A B t1' t2')\n                                  \\<subseteq> set t1' \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n         set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n         (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                          e1 # t1' \\<and>\n                          merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                          t2' \\<and>\n                          set (merge A B (e1 # t1') t2')\n                          \\<subseteq> set (e1 # t1') \\<union> set t2';\n        \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n         set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n         t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n        \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                          t1' \\<and>\n                          merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                          e2 # t2' \\<and>\n                          set (merge A B t1' (e2 # t2'))\n                          \\<subseteq> set t1' \\<union> set (e2 # t2');\n        set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n        (e1 # t1') \\<upharpoonleft> B =\n        (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n       \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         A =\n                         e1 # t1' \\<and>\n                         merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft>\n                         B =\n                         e2 # t2' \\<and>\n                         set (merge A B (e1 # t1') (e2 # t2'))\n                         \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n   t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B t1' t2')\n                    \\<subseteq> set t1' \\<union> set t2'\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n   set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n   (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                    e1 # t1' \\<and>\n                    merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B (e1 # t1') t2')\n                    \\<subseteq> set (e1 # t1') \\<union> set t2'\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B; set t1' \\<subseteq> A;\n   set (e2 # t2') \\<subseteq> B;\n   t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                    e2 # t2' \\<and>\n                    set (merge A B t1' (e2 # t2'))\n                    \\<subseteq> set t1' \\<union> set (e2 # t2')\n  set (e1 # t1') \\<subseteq> A\n  set (e2 # t2') \\<subseteq> B\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "assume e1_is_e2: \"e1 = e2\""], ["proof (state)\nthis:\n  e1 = e2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note e1_is_e2"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(4)"], ["proof (chain)\npicking this:\n  set (e1 # t1') \\<subseteq> A", "have \"set t1' \\<subseteq> A\""], ["proof (prove)\nusing this:\n  set (e1 # t1') \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set t1' \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set t1' \\<subseteq> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  set t1' \\<subseteq> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(5)"], ["proof (chain)\npicking this:\n  set (e2 # t2') \\<subseteq> B", "have \"set t2' \\<subseteq> B\""], ["proof (prove)\nusing this:\n  set (e2 # t2') \\<subseteq> B\n\ngoal (1 subgoal):\n 1. set t2' \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  set t2' \\<subseteq> B\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  set t2' \\<subseteq> B\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from e1_is_e2 3(4-6)"], ["proof (chain)\npicking this:\n  e1 = e2\n  set (e1 # t1') \\<subseteq> A\n  set (e2 # t2') \\<subseteq> B\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A", "have \"t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\""], ["proof (prove)\nusing this:\n  e1 = e2\n  set (e1 # t1') \\<subseteq> A\n  set (e2 # t2') \\<subseteq> B\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note 3(1)"], ["proof (state)\nthis:\n  \\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n   t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B t1' t2')\n                    \\<subseteq> set t1' \\<union> set t2'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "ultimately"], ["proof (chain)\npicking this:\n  e1 = e2\n  set t1' \\<subseteq> A\n  set t2' \\<subseteq> B\n  t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n  \\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n   t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B t1' t2')\n                    \\<subseteq> set t1' \\<union> set t2'", "have ind1: \"merge A B t1' t2' \\<upharpoonleft> A = t1'\"\n      and ind2: \"merge A B t1' t2' \\<upharpoonleft> B = t2'\"\n      and ind3: \"set (merge A B t1' t2') \\<subseteq> (set t1') \\<union> (set t2')\""], ["proof (prove)\nusing this:\n  e1 = e2\n  set t1' \\<subseteq> A\n  set t2' \\<subseteq> B\n  t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n  \\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n   t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B t1' t2')\n                    \\<subseteq> set t1' \\<union> set t2'\n\ngoal (1 subgoal):\n 1. merge A B t1' t2' \\<upharpoonleft> A = t1' &&&\n    merge A B t1' t2' \\<upharpoonleft> B = t2' &&&\n    set (merge A B t1' t2') \\<subseteq> set t1' \\<union> set t2'", "by auto"], ["proof (state)\nthis:\n  merge A B t1' t2' \\<upharpoonleft> A = t1'\n  merge A B t1' t2' \\<upharpoonleft> B = t2'\n  set (merge A B t1' t2') \\<subseteq> set t1' \\<union> set t2'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from e1_is_e2"], ["proof (chain)\npicking this:\n  e1 = e2", "have merge_eq: \n      \"merge A B (e1 # t1') (e2 # t2') = e1 # (merge A B t1' t2')\""], ["proof (prove)\nusing this:\n  e1 = e2\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') = e1 # merge A B t1' t2'", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') = e1 # merge A B t1' t2'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(4) ind1"], ["proof (chain)\npicking this:\n  set (e1 # t1') \\<subseteq> A\n  merge A B t1' t2' \\<upharpoonleft> A = t1'", "have goal1: \n      \"merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\""], ["proof (prove)\nusing this:\n  set (e1 # t1') \\<subseteq> A\n  merge A B t1' t2' \\<upharpoonleft> A = t1'\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'", "by (simp only: merge_eq projection_def, auto)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from e1_is_e2 3(5) ind2"], ["proof (chain)\npicking this:\n  e1 = e2\n  set (e2 # t2') \\<subseteq> B\n  merge A B t1' t2' \\<upharpoonleft> B = t2'", "have goal2: \n      \"merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\""], ["proof (prove)\nusing this:\n  e1 = e2\n  set (e2 # t2') \\<subseteq> B\n  merge A B t1' t2' \\<upharpoonleft> B = t2'\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'", "by (simp only: merge_eq projection_def, auto)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from ind3"], ["proof (chain)\npicking this:\n  set (merge A B t1' t2') \\<subseteq> set t1' \\<union> set t2'", "have goal3: \n      \"set (merge A B (e1 # t1') (e2 # t2')) \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\""], ["proof (prove)\nusing this:\n  set (merge A B t1' t2') \\<subseteq> set t1' \\<union> set t2'\n\ngoal (1 subgoal):\n 1. set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "by (simp only: merge_eq, auto)"], ["proof (state)\nthis:\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     \\<not> ?P6\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "ultimately"], ["proof (chain)\npicking this:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "show ?thesis"], ["proof (prove)\nusing this:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     e1 \\<noteq> e2\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "(* case (3 e1 t1' e2 t2') for e1 = e2 *)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     e1 \\<noteq> e2\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     e1 \\<noteq> e2\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "assume e1_isnot_e2: \"e1 \\<noteq> e2\""], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>e1 = e2; set t1' \\<subseteq> A; set t2' \\<subseteq> B;\n              t1' \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n             \\<Longrightarrow> merge A B t1' t2' \\<upharpoonleft> A =\n                               t1' \\<and>\n                               merge A B t1' t2' \\<upharpoonleft> B =\n                               t2' \\<and>\n                               set (merge A B t1' t2')\n                               \\<subseteq> set t1' \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n      set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n      (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                       e1 # t1' \\<and>\n                       merge A B (e1 # t1') t2' \\<upharpoonleft> B =\n                       t2' \\<and>\n                       set (merge A B (e1 # t1') t2')\n                       \\<subseteq> set (e1 # t1') \\<union> set t2';\n     \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B;\n      set t1' \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n      t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n     \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A =\n                       t1' \\<and>\n                       merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                       e2 # t2' \\<and>\n                       set (merge A B t1' (e2 # t2'))\n                       \\<subseteq> set t1' \\<union> set (e2 # t2');\n     set (e1 # t1') \\<subseteq> A; set (e2 # t2') \\<subseteq> B;\n     (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A;\n     e1 \\<noteq> e2\\<rbrakk>\n    \\<Longrightarrow> merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A =\n                      e1 # t1' \\<and>\n                      merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B =\n                      e2 # t2' \\<and>\n                      set (merge A B (e1 # t1') (e2 # t2'))\n                      \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "assume e1_in_A_inter_B: \"e1 \\<in> A \\<inter> B\""], ["proof (state)\nthis:\n  e1 \\<in> A \\<inter> B\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(6) e1_isnot_e2 e1_in_A_inter_B"], ["proof (chain)\npicking this:\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B", "have e2_notin_A: \"e2 \\<notin> A\""], ["proof (prove)\nusing this:\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. e2 \\<notin> A", "by (simp add: projection_def, auto)"], ["proof (state)\nthis:\n  e2 \\<notin> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note e1_isnot_e2 e1_in_A_inter_B 3(4)"], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n  set (e1 # t1') \\<subseteq> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n  set (e1 # t1') \\<subseteq> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(5)"], ["proof (chain)\npicking this:\n  set (e2 # t2') \\<subseteq> B", "have \"set t2' \\<subseteq> B\""], ["proof (prove)\nusing this:\n  set (e2 # t2') \\<subseteq> B\n\ngoal (1 subgoal):\n 1. set t2' \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  set t2' \\<subseteq> B\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  set t2' \\<subseteq> B\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(6) e1_isnot_e2 e1_in_A_inter_B"], ["proof (chain)\npicking this:\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B", "have \"(e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\""], ["proof (prove)\nusing this:\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A", "by (simp add: projection_def, auto)"], ["proof (state)\nthis:\n  (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note 3(2)"], ["proof (state)\nthis:\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n   set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n   (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                    e1 # t1' \\<and>\n                    merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B (e1 # t1') t2')\n                    \\<subseteq> set (e1 # t1') \\<union> set t2'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "ultimately"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n  set (e1 # t1') \\<subseteq> A\n  set t2' \\<subseteq> B\n  (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n   set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n   (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                    e1 # t1' \\<and>\n                    merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B (e1 # t1') t2')\n                    \\<subseteq> set (e1 # t1') \\<union> set t2'", "have ind1: \"merge A B (e1 # t1') t2' \\<upharpoonleft> A = (e1 # t1')\"\n        and ind2: \"merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2'\"\n        and ind3: \"set (merge A B (e1 # t1') t2') \\<subseteq> set (e1 # t1') \\<union> set t2'\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n  set (e1 # t1') \\<subseteq> A\n  set t2' \\<subseteq> B\n  (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<in> A \\<inter> B;\n   set (e1 # t1') \\<subseteq> A; set t2' \\<subseteq> B;\n   (e1 # t1') \\<upharpoonleft> B = t2' \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B (e1 # t1') t2' \\<upharpoonleft> A =\n                    e1 # t1' \\<and>\n                    merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2' \\<and>\n                    set (merge A B (e1 # t1') t2')\n                    \\<subseteq> set (e1 # t1') \\<union> set t2'\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') t2' \\<upharpoonleft> A = e1 # t1' &&&\n    merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2' &&&\n    set (merge A B (e1 # t1') t2')\n    \\<subseteq> set (e1 # t1') \\<union> set t2'", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') t2' \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2'\n  set (merge A B (e1 # t1') t2') \\<subseteq> set (e1 # t1') \\<union> set t2'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from e1_isnot_e2 e1_in_A_inter_B"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B", "have merge_eq: \n        \"merge A B (e1 # t1') (e2 # t2') = e2 # (merge A B (e1 # t1') t2')\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2\n  e1 \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') = e2 # merge A B (e1 # t1') t2'", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') = e2 # merge A B (e1 # t1') t2'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from e1_isnot_e2 ind1 e2_notin_A"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2\n  merge A B (e1 # t1') t2' \\<upharpoonleft> A = e1 # t1'\n  e2 \\<notin> A", "have goal1: \n        \"merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2\n  merge A B (e1 # t1') t2' \\<upharpoonleft> A = e1 # t1'\n  e2 \\<notin> A\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'", "by (simp only: merge_eq projection_def, auto)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(5) ind2"], ["proof (chain)\npicking this:\n  set (e2 # t2') \\<subseteq> B\n  merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2'", "have goal2: \"merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\""], ["proof (prove)\nusing this:\n  set (e2 # t2') \\<subseteq> B\n  merge A B (e1 # t1') t2' \\<upharpoonleft> B = t2'\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'", "by (simp only: merge_eq projection_def, auto)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(5) ind3"], ["proof (chain)\npicking this:\n  set (e2 # t2') \\<subseteq> B\n  set (merge A B (e1 # t1') t2') \\<subseteq> set (e1 # t1') \\<union> set t2'", "have goal3: \n        \"set (merge A B (e1 # t1') (e2 # t2')) \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\""], ["proof (prove)\nusing this:\n  set (e2 # t2') \\<subseteq> B\n  set (merge A B (e1 # t1') t2') \\<subseteq> set (e1 # t1') \\<union> set t2'\n\ngoal (1 subgoal):\n 1. set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "by (simp only: merge_eq, auto)"], ["proof (state)\nthis:\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n 2. \\<not> ?P \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "ultimately"], ["proof (chain)\npicking this:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "show ?thesis"], ["proof (prove)\nusing this:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "(* case (3 e1 t1' e2 t2') for e1 \\<noteq> e2 e1 \\<in> A \\<inter> B *)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "assume e1_notin_A_inter_B: \"e1 \\<notin> A \\<inter> B\""], ["proof (state)\nthis:\n  e1 \\<notin> A \\<inter> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(4) e1_notin_A_inter_B"], ["proof (chain)\npicking this:\n  set (e1 # t1') \\<subseteq> A\n  e1 \\<notin> A \\<inter> B", "have e1_notin_B: \"e1 \\<notin> B\""], ["proof (prove)\nusing this:\n  set (e1 # t1') \\<subseteq> A\n  e1 \\<notin> A \\<inter> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> B", "by auto"], ["proof (state)\nthis:\n  e1 \\<notin> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note e1_isnot_e2 e1_notin_A_inter_B"], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n  e1 \\<notin> A \\<inter> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n  e1 \\<notin> A \\<inter> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(4)"], ["proof (chain)\npicking this:\n  set (e1 # t1') \\<subseteq> A", "have \"set t1' \\<subseteq> A\""], ["proof (prove)\nusing this:\n  set (e1 # t1') \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set t1' \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set t1' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  set t1' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note 3(5)"], ["proof (state)\nthis:\n  set (e2 # t2') \\<subseteq> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  set (e2 # t2') \\<subseteq> B\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(6) e1_notin_B"], ["proof (chain)\npicking this:\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  e1 \\<notin> B", "have \"t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\""], ["proof (prove)\nusing this:\n  (e1 # t1') \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  e1 \\<notin> B\n\ngoal (1 subgoal):\n 1. t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "note 3(3)"], ["proof (state)\nthis:\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B; set t1' \\<subseteq> A;\n   set (e2 # t2') \\<subseteq> B;\n   t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                    e2 # t2' \\<and>\n                    set (merge A B t1' (e2 # t2'))\n                    \\<subseteq> set t1' \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "ultimately"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2\n  e1 \\<notin> A \\<inter> B\n  set t1' \\<subseteq> A\n  set (e2 # t2') \\<subseteq> B\n  t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B; set t1' \\<subseteq> A;\n   set (e2 # t2') \\<subseteq> B;\n   t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                    e2 # t2' \\<and>\n                    set (merge A B t1' (e2 # t2'))\n                    \\<subseteq> set t1' \\<union> set (e2 # t2')", "have ind1: \"merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1'\"\n        and ind2: \"merge A B t1' (e2 # t2') \\<upharpoonleft> B = (e2 # t2')\"\n        and ind3: \"set (merge A B t1' (e2 # t2')) \\<subseteq> set t1' \\<union> set (e2 # t2')\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2\n  e1 \\<notin> A \\<inter> B\n  set t1' \\<subseteq> A\n  set (e2 # t2') \\<subseteq> B\n  t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\n  \\<lbrakk>e1 \\<noteq> e2; e1 \\<notin> A \\<inter> B; set t1' \\<subseteq> A;\n   set (e2 # t2') \\<subseteq> B;\n   t1' \\<upharpoonleft> B = (e2 # t2') \\<upharpoonleft> A\\<rbrakk>\n  \\<Longrightarrow> merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1' \\<and>\n                    merge A B t1' (e2 # t2') \\<upharpoonleft> B =\n                    e2 # t2' \\<and>\n                    set (merge A B t1' (e2 # t2'))\n                    \\<subseteq> set t1' \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1' &&&\n    merge A B t1' (e2 # t2') \\<upharpoonleft> B = e2 # t2' &&&\n    set (merge A B t1' (e2 # t2'))\n    \\<subseteq> set t1' \\<union> set (e2 # t2')", "by auto"], ["proof (state)\nthis:\n  merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1'\n  merge A B t1' (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B t1' (e2 # t2')) \\<subseteq> set t1' \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from e1_isnot_e2 e1_notin_A_inter_B"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e2\n  e1 \\<notin> A \\<inter> B", "have merge_eq: \"merge A B (e1 # t1') (e2 # t2') = e1 # (merge A B t1' (e2 # t2'))\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e2\n  e1 \\<notin> A \\<inter> B\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') = e1 # merge A B t1' (e2 # t2')", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') = e1 # merge A B t1' (e2 # t2')\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(4) ind1"], ["proof (chain)\npicking this:\n  set (e1 # t1') \\<subseteq> A\n  merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1'", "have goal1: \"merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\""], ["proof (prove)\nusing this:\n  set (e1 # t1') \\<subseteq> A\n  merge A B t1' (e2 # t2') \\<upharpoonleft> A = t1'\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'", "by (simp only: merge_eq projection_def, auto)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from ind2 e1_notin_B"], ["proof (chain)\npicking this:\n  merge A B t1' (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  e1 \\<notin> B", "have goal2: \n        \"merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\""], ["proof (prove)\nusing this:\n  merge A B t1' (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  e1 \\<notin> B\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'", "by (simp only: merge_eq projection_def, auto)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "moreover"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "from 3(4) ind3"], ["proof (chain)\npicking this:\n  set (e1 # t1') \\<subseteq> A\n  set (merge A B t1' (e2 # t2')) \\<subseteq> set t1' \\<union> set (e2 # t2')", "have goal3: \n        \"set (merge A B (e1 # t1') (e2 # t2')) \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\""], ["proof (prove)\nusing this:\n  set (e1 # t1') \\<subseteq> A\n  set (merge A B t1' (e2 # t2')) \\<subseteq> set t1' \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "by (simp only: merge_eq, auto)"], ["proof (state)\nthis:\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. e1 \\<notin> A \\<inter> B \\<Longrightarrow>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "ultimately"], ["proof (chain)\npicking this:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "show ?thesis"], ["proof (prove)\nusing this:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1'\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2'\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal (1 subgoal):\n 1. merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n    merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n    set (merge A B (e1 # t1') (e2 # t2'))\n    \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')", "by auto"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal:\nNo subgoals!", "(* case (3 e1 t1' e2 t2') for e1 \\<noteq> e2 e1 \\<notin> A \\<inter> B *)"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> A = e1 # t1' \\<and>\n  merge A B (e1 # t1') (e2 # t2') \\<upharpoonleft> B = e2 # t2' \\<and>\n  set (merge A B (e1 # t1') (e2 # t2'))\n  \\<subseteq> set (e1 # t1') \\<union> set (e2 # t2')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}