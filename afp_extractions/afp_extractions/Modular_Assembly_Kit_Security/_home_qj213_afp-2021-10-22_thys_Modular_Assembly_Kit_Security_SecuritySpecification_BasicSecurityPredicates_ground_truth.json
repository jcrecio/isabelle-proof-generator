{"file_name": "/home/qj213/afp-2021-10-22/thys/Modular_Assembly_Kit_Security/SecuritySpecification/BasicSecurityPredicates.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modular_Assembly_Kit_Security", "problem_names": ["lemma BSP_valid_R: \"BSP_valid R\"", "lemma BSP_valid_D: \"BSP_valid D\"", "lemma BSP_valid_I: \"BSP_valid I\"", "lemma BSP_valid_IA: \"BSP_valid (IA \\<rho>) \"", "lemma BSP_valid_BSD: \"BSP_valid BSD\"", "lemma BSP_valid_BSI: \"BSP_valid BSI\"", "lemma BSP_valid_BSIA: \"BSP_valid (BSIA \\<rho>) \"", "lemma BSP_valid_FCD: \"BSP_valid (FCD \\<Gamma>)\"", "lemma BSP_valid_FCI: \"BSP_valid (FCI \\<Gamma>)\"", "lemma BSP_valid_FCIA: \"BSP_valid (FCIA \\<rho> \\<Gamma>) \"", "lemma \"BSP_valid SR\"", "lemma \"BSP_valid SD\"", "lemma \"BSP_valid SI\"", "lemma \"BSP_valid (SIA \\<rho>) \""], "translations": [["", "lemma BSP_valid_R: \"BSP_valid R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid R", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid R", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid R", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid R", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid R", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid R", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid R", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid R", "have \"R \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "assume \"\\<tau> \\<in> {t. (set t) \\<subseteq> E}\""], ["proof (state)\nthis:\n  \\<tau> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "let ?\\<tau>'=\"\\<tau>\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "have \"?\\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []  \\<and> ?\\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n    C\\<^bsub>\\<V>\\<^esub> =\n    [] \\<and>\n    \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n    V\\<^bsub>\\<V>\\<^esub> =\n    \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>", "using \\<open>isViewOn \\<V> E\\<close>  disjoint_projection projection_idempotent"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n  ?X \\<inter> ?Y = {} \\<Longrightarrow>\n  ?l \\<upharpoonleft> ?X \\<upharpoonleft> ?Y = []\n  ?l \\<upharpoonleft> ?X = ?l \\<upharpoonleft> ?X \\<upharpoonleft> ?X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n    C\\<^bsub>\\<V>\\<^esub> =\n    [] \\<and>\n    \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n    V\\<^bsub>\\<V>\\<^esub> =\n    \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>", "unfolding isViewOn_def V_valid_def VC_disjoint_def"], ["proof (prove)\nusing this:\n  (VN_disjoint \\<V> \\<and>\n   V\\<^bsub>\\<V>\\<^esub> \\<inter> C\\<^bsub>\\<V>\\<^esub> = {} \\<and>\n   NC_disjoint \\<V>) \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n  ?X \\<inter> ?Y = {} \\<Longrightarrow>\n  ?l \\<upharpoonleft> ?X \\<upharpoonleft> ?Y = []\n  ?l \\<upharpoonleft> ?X = ?l \\<upharpoonleft> ?X \\<upharpoonleft> ?X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n    C\\<^bsub>\\<V>\\<^esub> =\n    [] \\<and>\n    \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n    V\\<^bsub>\\<V>\\<^esub> =\n    \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>", "by metis"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  C\\<^bsub>\\<V>\\<^esub> =\n  [] \\<and>\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  V\\<^bsub>\\<V>\\<^esub> =\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "moreover"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  C\\<^bsub>\\<V>\\<^esub> =\n  [] \\<and>\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  V\\<^bsub>\\<V>\\<^esub> =\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "from \\<open>\\<tau> \\<in> {t. (set t) \\<subseteq> E}\\<close>"], ["proof (chain)\npicking this:\n  \\<tau> \\<in> {t. set t \\<subseteq> E}", "have \"?\\<tau>' \\<in> ?Tr'\""], ["proof (prove)\nusing this:\n  \\<tau> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n    \\<in> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> {t. set t \\<subseteq> E}\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n    \\<in> {t. set t \\<subseteq> E}", "unfolding isViewOn_def"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> {t. set t \\<subseteq> E}\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n    \\<in> {t. set t \\<subseteq> E}", "by (simp add: list_subset_iff_projection_neutral projection_commute)"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n  \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  C\\<^bsub>\\<V>\\<^esub> =\n  [] \\<and>\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  V\\<^bsub>\\<V>\\<^esub> =\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n  \\<in> {t. set t \\<subseteq> E}", "have \" \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}. \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and> \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  C\\<^bsub>\\<V>\\<^esub> =\n  [] \\<and>\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<upharpoonleft>\n  V\\<^bsub>\\<V>\\<^esub> =\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n  \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n  \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}.\n       \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n       \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}.\n     \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n     \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "}"], ["proof (state)\nthis:\n  ?\\<tau>2 \\<in> {t. set t \\<subseteq> E} \\<Longrightarrow>\n  \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}.\n     \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n     \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     ?\\<tau>2 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?\\<tau>2 \\<in> {t. set t \\<subseteq> E} \\<Longrightarrow>\n  \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}.\n     \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n     \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     ?\\<tau>2 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. R \\<V> {t. set t \\<subseteq> E}", "unfolding R_def"], ["proof (prove)\nusing this:\n  ?\\<tau>2 \\<in> {t. set t \\<subseteq> E} \\<Longrightarrow>\n  \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}.\n     \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n     \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     ?\\<tau>2 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<tau>\\<in>{t. set t \\<subseteq> E}.\n       \\<exists>\\<tau>'\\<in>{t. set t \\<subseteq> E}.\n          \\<tau>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n          \\<tau>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n          \\<tau> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>", "by auto"], ["proof (state)\nthis:\n  R \\<V> {t. set t \\<subseteq> E}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid R", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  R \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> R \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  R \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> R \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> R \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid R", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> R ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid R", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> R ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid R", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> R ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> R \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid R\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Deletion of Confidential Events (D) *)"], ["", "definition D :: \"'e BSP\"\nwhere\n\"D \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ [c] @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []) \n    \\<longrightarrow> (\\<exists>\\<alpha>' \\<beta>'. ((\\<beta>' @ \\<alpha>') \\<in> Tr \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []\n                  \\<and> \\<beta>'\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>) = \\<beta>\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>)))\""], ["", "lemma BSP_valid_D: \"BSP_valid D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid D", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid D", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid D", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid D", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid D", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid D", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid D", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid D", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid D", "have \"D \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<V> {t. set t \\<subseteq> E}", "unfolding D_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ [c] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n          [] \\<longrightarrow>\n          (\\<exists>\\<alpha>' \\<beta>'.\n              \\<beta>' @ \\<alpha>' \\<in> {t. set t \\<subseteq> E} \\<and>\n              \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n              \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n              \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n              \\<beta>' \\<upharpoonleft>\n              (V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>) =\n              \\<beta> \\<upharpoonleft>\n              (V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  D \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid D", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  D \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> D \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  D \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> D \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> D \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid D", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> D ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid D", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> D ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid D", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> D ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> D \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid D\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Insertion of Confidential Events (I) *)"], ["", "definition I :: \"'e BSP\"\nwhere\n\"I \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []) \n    \\<longrightarrow> (\\<exists>\\<alpha>' \\<beta>'. ((\\<beta>' @ [c] @ \\<alpha>') \\<in> Tr \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []\n                     \\<and> \\<beta>'\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>) = \\<beta>\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>)))\""], ["", "lemma BSP_valid_I: \"BSP_valid I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid I", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid I", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid I", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid I", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid I", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid I", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid I", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid I", "have \"I \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<V> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. I \\<V> {t. set t \\<subseteq> E}", "unfolding isViewOn_def I_def"], ["proof (prove)\nusing this:\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n          [] \\<longrightarrow>\n          (\\<exists>\\<alpha>' \\<beta>'.\n              \\<beta>' @ [c] @ \\<alpha>'\n              \\<in> {t. set t \\<subseteq> E} \\<and>\n              \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n              \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n              \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n              \\<beta>' \\<upharpoonleft>\n              (V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>) =\n              \\<beta> \\<upharpoonleft>\n              (V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  I \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid I", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  I \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> I \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  I \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> I \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> I \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid I", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> I ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid I", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> I ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid I", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> I ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> I \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid I\n\ngoal:\nNo subgoals!", "qed"], ["", "(* \\<rho>-Admissibility *)"], ["", "type_synonym 'e Rho = \"'e V_rec \\<Rightarrow> 'e set\""], ["", "definition \nAdm :: \"'e V_rec \\<Rightarrow> 'e Rho \\<Rightarrow> ('e list) set \\<Rightarrow> 'e list \\<Rightarrow> 'e \\<Rightarrow> bool\"\nwhere \n\"Adm \\<V> \\<rho> Tr \\<beta> e \\<equiv>\n   \\<exists>\\<gamma>. ((\\<gamma> @ [e]) \\<in> Tr \\<and> \\<gamma>\\<upharpoonleft>(\\<rho> \\<V>) = \\<beta>\\<upharpoonleft>(\\<rho> \\<V>))\""], ["", "(* Insertion of Admissible Confidential Events (IA) *)"], ["", "definition IA :: \"'e Rho \\<Rightarrow> 'e BSP\"\nwhere\n\"IA \\<rho> \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = [] \\<and> (Adm \\<V> \\<rho> Tr \\<beta> c)) \n    \\<longrightarrow> (\\<exists> \\<alpha>' \\<beta>'. ((\\<beta>' @ [c] @ \\<alpha>') \\<in> Tr) \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \n                    \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = [] \\<and> \\<beta>'\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>) = \\<beta>\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>))\""], ["", "lemma BSP_valid_IA: \"BSP_valid (IA \\<rho>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "fix \\<V> :: \"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "have \"IA \\<rho> \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IA \\<rho> \\<V> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. IA \\<rho> \\<V> {t. set t \\<subseteq> E}", "unfolding isViewOn_def IA_def"], ["proof (prove)\nusing this:\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n          Adm \\<V> \\<rho> {t. set t \\<subseteq> E} \\<beta>\n           c \\<longrightarrow>\n          (\\<exists>\\<alpha>' \\<beta>'.\n              \\<beta>' @ [c] @ \\<alpha>'\n              \\<in> {t. set t \\<subseteq> E} \\<and>\n              \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n              \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n              \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n              \\<beta>' \\<upharpoonleft>\n              (V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>) =\n              \\<beta> \\<upharpoonleft>\n              (V\\<^bsub>\\<V>\\<^esub> \\<union> C\\<^bsub>\\<V>\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  IA \\<rho> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  IA \\<rho> \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> IA \\<rho> \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  IA \\<rho> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> IA \\<rho> \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> IA \\<rho> \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> IA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> IA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (IA \\<rho>)", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> IA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> IA \\<rho> \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid (IA \\<rho>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Backwards Strict Deletion of Confidential Events (BSD) *)"], ["", "definition BSD :: \"'e BSP\"\nwhere\n\"BSD \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ [c] @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []) \n    \\<longrightarrow> (\\<exists>\\<alpha>'. ((\\<beta> @ \\<alpha>') \\<in> Tr \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []))\""], ["", "lemma BSP_valid_BSD: \"BSP_valid BSD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid BSD", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSD", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSD", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSD", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSD", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSD", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "have \"BSD \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSD \\<V> {t. set t \\<subseteq> E}", "unfolding BSD_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ [c] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n          [] \\<longrightarrow>\n          (\\<exists>\\<alpha>'.\n              \\<beta> @ \\<alpha>' \\<in> {t. set t \\<subseteq> E} \\<and>\n              \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n              \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n              \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])", "by auto"], ["proof (state)\nthis:\n  BSD \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  BSD \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> BSD \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  BSD \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSD \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSD \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> BSD ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> BSD ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid BSD", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> BSD ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSD \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid BSD\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Backwards Strict Insertion of Confidential Events (BSI) *)"], ["", "definition BSI :: \"'e BSP\"\nwhere\n\"BSI \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []) \n    \\<longrightarrow> (\\<exists>\\<alpha>'. ((\\<beta> @ [c] @ \\<alpha>') \\<in> Tr \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []))\""], ["", "lemma BSP_valid_BSI: \"BSP_valid BSI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid BSI", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSI", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSI", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSI", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSI", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid BSI", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "have \"BSI \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSI \\<V> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. BSI \\<V> {t. set t \\<subseteq> E}", "unfolding isViewOn_def BSI_def"], ["proof (prove)\nusing this:\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n          [] \\<longrightarrow>\n          (\\<exists>\\<alpha>'.\n              \\<beta> @ [c] @ \\<alpha>'\n              \\<in> {t. set t \\<subseteq> E} \\<and>\n              \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n              \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n              \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])", "by auto"], ["proof (state)\nthis:\n  BSI \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  BSI \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> BSI \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  BSI \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSI \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSI \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> BSI ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> BSI ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid BSI", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> BSI ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSI \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid BSI\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Backwards Strict Insertion of Admissible Confidential Events (BSIA) *)"], ["", "definition BSIA :: \"'e Rho \\<Rightarrow> 'e BSP\"\nwhere \n\"BSIA \\<rho> \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = [] \\<and> (Adm \\<V> \\<rho> Tr \\<beta> c)) \n    \\<longrightarrow> (\\<exists>\\<alpha>'. ((\\<beta> @ [c] @ \\<alpha>') \\<in> Tr \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []))\""], ["", "lemma BSP_valid_BSIA: \"BSP_valid (BSIA \\<rho>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "fix \\<V> :: \"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "have \"BSIA \\<rho> \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSIA \\<rho> \\<V> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. BSIA \\<rho> \\<V> {t. set t \\<subseteq> E}", "unfolding isViewOn_def BSIA_def"], ["proof (prove)\nusing this:\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n          Adm \\<V> \\<rho> {t. set t \\<subseteq> E} \\<beta>\n           c \\<longrightarrow>\n          (\\<exists>\\<alpha>'.\n              \\<beta> @ [c] @ \\<alpha>'\n              \\<in> {t. set t \\<subseteq> E} \\<and>\n              \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n              \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n              \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])", "by auto"], ["proof (state)\nthis:\n  BSIA \\<rho> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  BSIA \\<rho> \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> BSIA \\<rho> \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  BSIA \\<rho> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSIA \\<rho> \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSIA \\<rho> \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> BSIA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> BSIA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (BSIA \\<rho>)", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> BSIA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> BSIA \\<rho> \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid (BSIA \\<rho>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Forward Correctable BSPs *)"], ["", "record 'e Gamma =\n  Nabla :: \"'e set\"\n  Delta :: \"'e set\"\n  Upsilon :: \"'e set\""], ["", "(* syntax abbreviations for Gamma *)"], ["", "abbreviation GammaNabla :: \"'e Gamma \\<Rightarrow> 'e set\"\n(\"\\<nabla>\\<^bsub>_\\<^esub>\" [100] 1000)\nwhere\n\"\\<nabla>\\<^bsub>\\<Gamma>\\<^esub> \\<equiv> (Nabla \\<Gamma>)\""], ["", "abbreviation GammaDelta :: \"'e Gamma \\<Rightarrow> 'e set\"\n(\"\\<Delta>\\<^bsub>_\\<^esub>\" [100] 1000)\nwhere\n\"\\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<equiv> (Delta \\<Gamma>)\""], ["", "abbreviation GammaUpsilon :: \"'e Gamma \\<Rightarrow> 'e set\"\n(\"\\<Upsilon>\\<^bsub>_\\<^esub>\" [100] 1000)\nwhere\n\"\\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub> \\<equiv> (Upsilon \\<Gamma>)\""], ["", "(* Forward Correctable Deletion of Confidential Events (FCD) *)"], ["", "definition FCD :: \"'e Gamma \\<Rightarrow> 'e BSP\"\nwhere\n\"FCD \\<Gamma> \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>(C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>). \\<forall>v\\<in>(V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>). \n    ((\\<beta> @ [c,v] @ \\<alpha>) \\<in> Tr \\<and> \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []) \n      \\<longrightarrow> (\\<exists>\\<alpha>'. \\<exists>\\<delta>'. (set \\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \n                      \\<and> ((\\<beta> @ \\<delta>' @ [v] @ \\<alpha>') \\<in> Tr  \n                      \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []))\""], ["", "lemma BSP_valid_FCD: \"BSP_valid (FCD \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "fix \\<V>::\"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "have \"FCD \\<Gamma> \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "fix \\<alpha> \\<beta> c v"], ["proof (state)\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "assume  \"c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\"\n             and  \"v \\<in>V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>\"\n             and  \"\\<beta> @ [c ,v] @ \\<alpha> \\<in> ?Tr'\"\n             and  \"\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (state)\nthis:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  v \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>\n  \\<beta> @ [c, v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "let ?\\<alpha>'=\"\\<alpha>\" and ?\\<delta>'=\"[]\""], ["proof (state)\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "from \\<open>\\<beta> @ [c ,v] @ \\<alpha> \\<in> ?Tr'\\<close>"], ["proof (chain)\npicking this:\n  \\<beta> @ [c, v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "have \"\\<beta> @ ?\\<delta>' @ [v] @ ?\\<alpha>' \\<in> ?Tr'\""], ["proof (prove)\nusing this:\n  \\<beta> @ [c, v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "by auto"], ["proof (state)\nthis:\n  \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "hence  \"(set ?\\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \\<and> ((\\<beta> @ ?\\<delta>' @ [v] @ ?\\<alpha>') \\<in> ?Tr'  \n                      \\<and> ?\\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> ?\\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])\""], ["proof (prove)\nusing this:\n  \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "using \\<open>isViewOn \\<V> E\\<close> \\<open>\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<close>"], ["proof (prove)\nusing this:\n  \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  isViewOn \\<V> E\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "unfolding isViewOn_def \\<open>\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<close>"], ["proof (prove)\nusing this:\n  \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n  [] = []\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    [] = []", "by auto"], ["proof (state)\nthis:\n  set []\n  \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n              \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n  \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "hence \"\\<exists>\\<alpha>'. \\<exists>\\<delta>'. (set \\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \\<and> ((\\<beta> @ \\<delta>' @ [v] @ \\<alpha>') \\<in> ?Tr'  \n            \\<and> \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])\""], ["proof (prove)\nusing this:\n  set []\n  \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n              \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n  \\<beta> @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' \\<delta>'.\n       set \\<delta>'\n       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n       \\<beta> @ \\<delta>' @ [v] @ \\<alpha>'\n       \\<in> {t. set t \\<subseteq> E} \\<and>\n       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' \\<delta>'.\n     set \\<delta>'\n     \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n     \\<beta> @ \\<delta>' @ [v] @ \\<alpha>'\n     \\<in> {t. set t \\<subseteq> E} \\<and>\n     \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n     \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?c2, ?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?c2, ?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "unfolding FCD_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?c2, ?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                      \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>.\n          \\<forall>v\\<in>V\\<^bsub>\\<V>\\<^esub> \\<inter>\n                         \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>.\n             \\<beta> @ [c, v] @ \\<alpha>\n             \\<in> {t. set t \\<subseteq> E} \\<and>\n             \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n             [] \\<longrightarrow>\n             (\\<exists>\\<alpha>' \\<delta>'.\n                 set \\<delta>'\n                 \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                             \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                 \\<beta> @ \\<delta>' @ [v] @ \\<alpha>'\n                 \\<in> {t. set t \\<subseteq> E} \\<and>\n                 \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                 \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                 \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])", "by auto"], ["proof (state)\nthis:\n  FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> FCD \\<Gamma> \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  FCD \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCD \\<Gamma> \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCD \\<Gamma> \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> FCD \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> FCD \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCD \\<Gamma>)", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> FCD \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCD \\<Gamma> \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid (FCD \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Forward Correctable Insertion of Confidential Events (FCI) *)"], ["", "definition FCI :: \"'e Gamma \\<Rightarrow> 'e BSP\"\nwhere\n\"FCI \\<Gamma> \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>(C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>). \\<forall>v\\<in>(V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>). \n    ((\\<beta> @ [v] @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []) \n      \\<longrightarrow> (\\<exists>\\<alpha>'. \\<exists>\\<delta>'. (set \\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \n                      \\<and> ((\\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>') \\<in> Tr  \n                      \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []))\""], ["", "lemma BSP_valid_FCI: \"BSP_valid (FCI \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "fix \\<V>::\"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "have \"FCI \\<Gamma> \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "fix \\<alpha> \\<beta> c v"], ["proof (state)\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "assume  \"c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\"\n             and  \"v \\<in>V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>\"\n             and  \"\\<beta> @ [v] @ \\<alpha> \\<in> ?Tr'\"\n             and  \"\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (state)\nthis:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  v \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>\n  \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "let ?\\<alpha>'=\"\\<alpha>\" and ?\\<delta>'=\"[]\""], ["proof (state)\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "from \\<open>c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>", "have\" c \\<in> E\""], ["proof (prove)\nusing this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n\ngoal (1 subgoal):\n 1. c \\<in> E", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. c \\<in> E", "unfolding isViewOn_def"], ["proof (prove)\nusing this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. c \\<in> E", "by auto"], ["proof (state)\nthis:\n  c \\<in> E\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "with  \\<open>\\<beta> @ [v] @ \\<alpha> \\<in> ?Tr'\\<close>"], ["proof (chain)\npicking this:\n  \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  c \\<in> E", "have \"\\<beta> @ [c] @ ?\\<delta>' @ [v] @ ?\\<alpha>' \\<in> ?Tr'\""], ["proof (prove)\nusing this:\n  \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  c \\<in> E\n\ngoal (1 subgoal):\n 1. \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "by auto"], ["proof (state)\nthis:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "hence  \"(set ?\\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \\<and> ((\\<beta> @ [c] @ ?\\<delta>' @ [v] @ ?\\<alpha>') \\<in> ?Tr'  \n                      \\<and> ?\\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> ?\\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])\""], ["proof (prove)\nusing this:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [c] @ [] @ [v] @ \\<alpha>\n    \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "using \\<open>isViewOn \\<V> E\\<close> \\<open>\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<close>"], ["proof (prove)\nusing this:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  isViewOn \\<V> E\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [c] @ [] @ [v] @ \\<alpha>\n    \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "unfolding isViewOn_def \\<open>\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<close>"], ["proof (prove)\nusing this:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n  [] = []\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [c] @ [] @ [v] @ \\<alpha>\n    \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    [] = []", "by auto"], ["proof (state)\nthis:\n  set []\n  \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n              \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "hence \n           \"\\<exists>\\<alpha>'. \\<exists>\\<delta>'. (set \\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \\<and> ((\\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>') \\<in> ?Tr'  \n            \\<and> \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])\""], ["proof (prove)\nusing this:\n  set []\n  \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n              \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' \\<delta>'.\n       set \\<delta>'\n       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n       \\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>'\n       \\<in> {t. set t \\<subseteq> E} \\<and>\n       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' \\<delta>'.\n     set \\<delta>'\n     \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n     \\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>'\n     \\<in> {t. set t \\<subseteq> E} \\<and>\n     \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n     \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ [?c2] @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ [?c2] @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "unfolding FCI_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ [?c2] @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                      \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>.\n          \\<forall>v\\<in>V\\<^bsub>\\<V>\\<^esub> \\<inter>\n                         \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>.\n             \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n             \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n             [] \\<longrightarrow>\n             (\\<exists>\\<alpha>' \\<delta>'.\n                 set \\<delta>'\n                 \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                             \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                 \\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>'\n                 \\<in> {t. set t \\<subseteq> E} \\<and>\n                 \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                 \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                 \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])", "by auto"], ["proof (state)\nthis:\n  FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> FCI \\<Gamma> \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  FCI \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCI \\<Gamma> \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCI \\<Gamma> \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> FCI \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> FCI \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCI \\<Gamma>)", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> FCI \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCI \\<Gamma> \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid (FCI \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Forward correctable Insertion of Admissible Confidential Events (FCIA) *)"], ["", "definition FCIA :: \"'e Rho \\<Rightarrow> 'e Gamma \\<Rightarrow> 'e BSP\"\nwhere\n\"FCIA \\<rho> \\<Gamma> \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>(C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>). \\<forall>v\\<in>(V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>).\n    ((\\<beta> @ [v] @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = [] \\<and> (Adm \\<V> \\<rho> Tr \\<beta> c)) \n      \\<longrightarrow> (\\<exists>\\<alpha>'. \\<exists>\\<delta>'. (set \\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \n                      \\<and> ((\\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>') \\<in> Tr  \n                      \\<and> \\<alpha>'\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> = \\<alpha>\\<upharpoonleft>V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>'\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []))\""], ["", "lemma BSP_valid_FCIA: \"BSP_valid (FCIA \\<rho> \\<Gamma>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "fix \\<V> :: \"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "have \"FCIA \\<rho> \\<Gamma> \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "fix \\<alpha> \\<beta> c v"], ["proof (state)\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "assume  \"c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\"\n             and  \"v \\<in>V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>\"\n             and  \"\\<beta> @ [v] @ \\<alpha> \\<in> ?Tr'\"\n             and  \"\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (state)\nthis:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  v \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>\n  \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "let ?\\<alpha>'=\"\\<alpha>\" and ?\\<delta>'=\"[]\""], ["proof (state)\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "from \\<open>c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>", "have\" c \\<in> E\""], ["proof (prove)\nusing this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n\ngoal (1 subgoal):\n 1. c \\<in> E", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. c \\<in> E", "unfolding isViewOn_def"], ["proof (prove)\nusing this:\n  c \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. c \\<in> E", "by auto"], ["proof (state)\nthis:\n  c \\<in> E\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "with  \\<open>\\<beta> @ [v] @ \\<alpha> \\<in> ?Tr'\\<close>"], ["proof (chain)\npicking this:\n  \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  c \\<in> E", "have \"\\<beta> @ [c] @ ?\\<delta>' @ [v] @ ?\\<alpha>' \\<in> ?Tr'\""], ["proof (prove)\nusing this:\n  \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  c \\<in> E\n\ngoal (1 subgoal):\n 1. \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "by auto"], ["proof (state)\nthis:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "hence  \"(set ?\\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \\<and> ((\\<beta> @ [c] @ ?\\<delta>' @ [v] @ ?\\<alpha>') \\<in> ?Tr'  \n                      \\<and> ?\\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> ?\\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])\""], ["proof (prove)\nusing this:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [c] @ [] @ [v] @ \\<alpha>\n    \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "using \\<open>isViewOn \\<V> E\\<close> \\<open>\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<close>"], ["proof (prove)\nusing this:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  isViewOn \\<V> E\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [c] @ [] @ [v] @ \\<alpha>\n    \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "unfolding isViewOn_def \\<open>\\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<close>"], ["proof (prove)\nusing this:\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n  [] = []\n\ngoal (1 subgoal):\n 1. set []\n    \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n    \\<beta> @ [c] @ [] @ [v] @ \\<alpha>\n    \\<in> {t. set t \\<subseteq> E} \\<and>\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    [] = []", "by auto"], ["proof (state)\nthis:\n  set []\n  \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n              \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "hence \n            \"\\<exists>\\<alpha>'. \\<exists>\\<delta>'. (set \\<delta>') \\<subseteq> (N\\<^bsub>\\<V>\\<^esub> \\<inter> \\<Delta>\\<^bsub>\\<Gamma>\\<^esub>) \\<and> ((\\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>') \\<in> ?Tr'  \n            \\<and> \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])\""], ["proof (prove)\nusing this:\n  set []\n  \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n              \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n  \\<beta> @ [c] @ [] @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' \\<delta>'.\n       set \\<delta>'\n       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n       \\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>'\n       \\<in> {t. set t \\<subseteq> E} \\<and>\n       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' \\<delta>'.\n     set \\<delta>'\n     \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n     \\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>'\n     \\<in> {t. set t \\<subseteq> E} \\<and>\n     \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n     \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ [?c2] @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ [?c2] @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "unfolding FCIA_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c2\n           \\<in> C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                 \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?v2\n   \\<in> V\\<^bsub>\\<V>\\<^esub> \\<inter> \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>;\n   ?\\<beta>2 @ [?v2] @ ?\\<alpha>2 \\<in> {t. set t \\<subseteq> E};\n   ?\\<alpha>2 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>' \\<delta>'.\n                       set \\<delta>'\n                       \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                                   \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                       ?\\<beta>2 @ [?c2] @ \\<delta>' @ [?v2] @ \\<alpha>'\n                       \\<in> {t. set t \\<subseteq> E} \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       ?\\<alpha>2 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub> \\<inter>\n                      \\<Upsilon>\\<^bsub>\\<Gamma>\\<^esub>.\n          \\<forall>v\\<in>V\\<^bsub>\\<V>\\<^esub> \\<inter>\n                         \\<nabla>\\<^bsub>\\<Gamma>\\<^esub>.\n             \\<beta> @ [v] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n             \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n             Adm \\<V> \\<rho> {t. set t \\<subseteq> E} \\<beta>\n              c \\<longrightarrow>\n             (\\<exists>\\<alpha>' \\<delta>'.\n                 set \\<delta>'\n                 \\<subseteq> N\\<^bsub>\\<V>\\<^esub> \\<inter>\n                             \\<Delta>\\<^bsub>\\<Gamma>\\<^esub> \\<and>\n                 \\<beta> @ [c] @ \\<delta>' @ [v] @ \\<alpha>'\n                 \\<in> {t. set t \\<subseteq> E} \\<and>\n                 \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                 \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                 \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [])", "by auto"], ["proof (state)\nthis:\n  FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> FCIA \\<rho> \\<Gamma> \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  FCIA \\<rho> \\<Gamma> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCIA \\<rho> \\<Gamma> \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> FCIA \\<rho> \\<Gamma> \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and>\n                       FCIA \\<rho> \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and>\n                       FCIA \\<rho> \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (FCIA \\<rho> \\<Gamma>)", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and>\n                       FCIA \\<rho> \\<Gamma> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'.\n           Tr \\<subseteq> Tr' \\<and> FCIA \\<rho> \\<Gamma> \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid (FCIA \\<rho> \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Strict Removal of Confidential Events (SR) *)"], ["", "definition SR :: \"'e BSP\"\nwhere\n\"SR \\<V> Tr \\<equiv> \\<forall>\\<tau>\\<in>Tr. \\<tau> \\<upharpoonleft> (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) \\<in> Tr\""], ["", "lemma \"BSP_valid SR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid SR", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SR", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SR", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SR", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SR", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "let ?Tr'=\"{t. \\<exists>\\<tau> \\<in> Tr. t=\\<tau>\\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)} \\<union> Tr\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SR", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. \\<exists>\\<tau>\\<in>Tr.\n                          t =\n                          \\<tau> \\<upharpoonleft>\n                          (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                           N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n                   Tr", "by blast"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. \\<exists>\\<tau>\\<in>Tr.\n                        t =\n                        \\<tau> \\<upharpoonleft>\n                        (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n                 Tr\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. \\<exists>\\<tau>\\<in>Tr.\n                        t =\n                        \\<tau> \\<upharpoonleft>\n                        (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n                 Tr\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "have \"SR \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SR \\<V>\n     ({t. \\<exists>\\<tau>\\<in>Tr.\n             t =\n             \\<tau> \\<upharpoonleft>\n             (V\\<^bsub>\\<V>\\<^esub> \\<union>\n              N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n      Tr)", "unfolding SR_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<tau>\n             \\<in>{t. \\<exists>\\<tau>\\<in>Tr.\n                         t =\n                         \\<tau> \\<upharpoonleft>\n                         (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n                  Tr.\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "assume \"\\<tau> \\<in> ?Tr'\""], ["proof (state)\nthis:\n  \\<tau>\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "{"], ["proof (state)\nthis:\n  \\<tau>\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "from \\<open>\\<tau> \\<in> ?Tr'\\<close>"], ["proof (chain)\npicking this:\n  \\<tau>\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr", "have \"(\\<exists>t\\<in>Tr. \\<tau> = t \\<upharpoonleft> (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)) \\<or> \\<tau> \\<in> Tr\""], ["proof (prove)\nusing this:\n  \\<tau>\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. (\\<exists>t\\<in>Tr.\n        \\<tau> =\n        t \\<upharpoonleft>\n        (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)) \\<or>\n    \\<tau> \\<in> Tr", "by auto"], ["proof (state)\nthis:\n  (\\<exists>t\\<in>Tr.\n      \\<tau> =\n      t \\<upharpoonleft>\n      (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)) \\<or>\n  \\<tau> \\<in> Tr\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "hence \"\\<tau> \\<upharpoonleft> (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) \\<in> ?Tr'\""], ["proof (prove)\nusing this:\n  (\\<exists>t\\<in>Tr.\n      \\<tau> =\n      t \\<upharpoonleft>\n      (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)) \\<or>\n  \\<tau> \\<in> Tr\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>t\\<in>Tr.\n       \\<tau> =\n       t \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union>\n        N\\<^bsub>\\<V>\\<^esub>) \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr\n 2. \\<tau> \\<in> Tr \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "assume \"\\<exists>t\\<in>Tr. \\<tau> = t \\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\""], ["proof (state)\nthis:\n  \\<exists>t\\<in>Tr.\n     \\<tau> =\n     t \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n\ngoal (2 subgoals):\n 1. \\<exists>t\\<in>Tr.\n       \\<tau> =\n       t \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union>\n        N\\<^bsub>\\<V>\\<^esub>) \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr\n 2. \\<tau> \\<in> Tr \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "hence \"\\<exists>t\\<in>Tr. \\<tau> \\<upharpoonleft> (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)= t \\<upharpoonleft>(V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\""], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>Tr.\n     \\<tau> =\n     t \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>Tr.\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) =\n       t \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)", "using projection_idempotent"], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>Tr.\n     \\<tau> =\n     t \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  ?l \\<upharpoonleft> ?X = ?l \\<upharpoonleft> ?X \\<upharpoonleft> ?X\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>Tr.\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) =\n       t \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)", "by metis"], ["proof (state)\nthis:\n  \\<exists>t\\<in>Tr.\n     \\<tau> \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) =\n     t \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n\ngoal (2 subgoals):\n 1. \\<exists>t\\<in>Tr.\n       \\<tau> =\n       t \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union>\n        N\\<^bsub>\\<V>\\<^esub>) \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr\n 2. \\<tau> \\<in> Tr \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>t\\<in>Tr.\n     \\<tau> \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) =\n     t \\<upharpoonleft>\n     (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft>\n  (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> Tr \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<in> Tr \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "assume \"\\<tau> \\<in> Tr\""], ["proof (state)\nthis:\n  \\<tau> \\<in> Tr\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> Tr \\<Longrightarrow>\n    \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> Tr\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft>\n  (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft>\n  (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "}"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft>\n  (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr \\<Longrightarrow>\n       \\<tau> \\<upharpoonleft>\n       (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n       \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                    t =\n                    \\<tau> \\<upharpoonleft>\n                    (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                     N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n             Tr", "thus \"\\<tau> \\<upharpoonleft> (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>) \\<in> ?Tr'\""], ["proof (prove)\nusing this:\n  \\<tau> \\<upharpoonleft>\n  (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal (1 subgoal):\n 1. \\<tau> \\<upharpoonleft>\n    (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n    \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n                 t =\n                 \\<tau> \\<upharpoonleft>\n                 (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                  N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n          Tr", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<upharpoonleft>\n  (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)\n  \\<in> {t. \\<exists>\\<tau>\\<in>Tr.\n               t =\n               \\<tau> \\<upharpoonleft>\n               (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n        Tr\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SR \\<V>\n   ({t. \\<exists>\\<tau>\\<in>Tr.\n           t =\n           \\<tau> \\<upharpoonleft>\n           (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n    Tr)\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. \\<exists>\\<tau>\\<in>Tr.\n                        t =\n                        \\<tau> \\<upharpoonleft>\n                        (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n                 Tr\n  SR \\<V>\n   ({t. \\<exists>\\<tau>\\<in>Tr.\n           t =\n           \\<tau> \\<upharpoonleft>\n           (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n    Tr)", "have \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> SR \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. \\<exists>\\<tau>\\<in>Tr.\n                        t =\n                        \\<tau> \\<upharpoonleft>\n                        (V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n                 Tr\n  SR \\<V>\n   ({t. \\<exists>\\<tau>\\<in>Tr.\n           t =\n           \\<tau> \\<upharpoonleft>\n           (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>)} \\<union>\n    Tr)\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SR \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SR \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SR ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SR ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SR", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SR ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SR \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid SR\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Strict Deletion of Confidential Events (SD) *)"], ["", "definition SD :: \"'e BSP\"\nwhere\n\"SD \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ [c] @ \\<alpha>) \\<in> Tr \\<and> \\<alpha>\\<upharpoonleft>C\\<^bsub>\\<V>\\<^esub> = []) \\<longrightarrow> \\<beta> @ \\<alpha> \\<in> Tr\""], ["", "lemma \"BSP_valid SD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid SD", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SD", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SD", "fix \\<V>::\"('e V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SD", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SD", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SD", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "have \"SD \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD \\<V> {t. set t \\<subseteq> E}", "unfolding SD_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ [c] @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n          [] \\<longrightarrow>\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "by auto"], ["proof (state)\nthis:\n  SD \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  SD \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> SD \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  SD \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SD \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SD \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SD ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SD ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SD", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SD ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SD \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid SD\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Strict Insertion of Confidential Events (SI) *)"], ["", "definition SI :: \"'e BSP\"\nwhere\n\"SI \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ \\<alpha>) \\<in> Tr \\<and> \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []) \\<longrightarrow> \\<beta> @ [c] @ \\<alpha> \\<in> Tr\""], ["", "lemma \"BSP_valid SI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid SI", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SI", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SI", "fix \\<V>::\"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SI", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SI", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid SI", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "have \"SI \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SI \\<V> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. SI \\<V> {t. set t \\<subseteq> E}", "unfolding isViewOn_def SI_def"], ["proof (prove)\nusing this:\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n          [] \\<longrightarrow>\n          \\<beta> @ [c] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "by auto"], ["proof (state)\nthis:\n  SI \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  SI \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> SI \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  SI \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SI \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SI \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SI ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SI ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid SI", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'. ?Tr2 \\<subseteq> Tr' \\<and> SI ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SI \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid SI\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Strict Insertion of Admissible Confidential Events (SIA) *)"], ["", "definition SIA :: \"'e Rho \\<Rightarrow> 'e BSP\"\nwhere\n\"SIA \\<rho> \\<V> Tr \\<equiv> \n  \\<forall>\\<alpha> \\<beta>. \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>. ((\\<beta> @ \\<alpha>) \\<in> Tr \\<and> \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and> (Adm \\<V> \\<rho> Tr \\<beta> c)) \n    \\<longrightarrow> (\\<beta> @ [c] @ \\<alpha>) \\<in> Tr\""], ["", "lemma \"BSP_valid (SIA \\<rho>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "fix \\<V> :: \"('a V_rec)\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "fix Tr E"], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "assume \"isViewOn \\<V> E\"\n    and \"areTracesOver Tr E\""], ["proof (state)\nthis:\n  isViewOn \\<V> E\n  areTracesOver Tr E\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "let ?Tr'=\"{t. (set t) \\<subseteq> E}\""], ["proof (state)\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "have \"?Tr'\\<supseteq> Tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tr \\<subseteq> {t. set t \\<subseteq> E}", "by (meson Ball_Collect \\<open>areTracesOver Tr E\\<close> areTracesOver_def)"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "moreover"], ["proof (state)\nthis:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "have \"SIA \\<rho> \\<V> ?Tr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SIA \\<rho> \\<V> {t. set t \\<subseteq> E}", "using \\<open>isViewOn \\<V> E\\<close>"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\n\ngoal (1 subgoal):\n 1. SIA \\<rho> \\<V> {t. set t \\<subseteq> E}", "unfolding isViewOn_def SIA_def"], ["proof (prove)\nusing this:\n  V_valid \\<V> \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\n\ngoal (1 subgoal):\n 1. \\<forall>\\<alpha> \\<beta>.\n       \\<forall>c\\<in>C\\<^bsub>\\<V>\\<^esub>.\n          \\<beta> @ \\<alpha> \\<in> {t. set t \\<subseteq> E} \\<and>\n          \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n          Adm \\<V> \\<rho> {t. set t \\<subseteq> E} \\<beta>\n           c \\<longrightarrow>\n          \\<beta> @ [c] @ \\<alpha> \\<in> {t. set t \\<subseteq> E}", "by auto"], ["proof (state)\nthis:\n  SIA \\<rho> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "ultimately"], ["proof (chain)\npicking this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  SIA \\<rho> \\<V> {t. set t \\<subseteq> E}", "have  \"\\<exists> Tr'. Tr' \\<supseteq> Tr  \\<and> SIA \\<rho> \\<V> Tr'\""], ["proof (prove)\nusing this:\n  Tr \\<subseteq> {t. set t \\<subseteq> E}\n  SIA \\<rho> \\<V> {t. set t \\<subseteq> E}\n\ngoal (1 subgoal):\n 1. \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SIA \\<rho> \\<V> Tr'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SIA \\<rho> \\<V> Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> SIA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> SIA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. BSP_valid (SIA \\<rho>)", "unfolding BSP_valid_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>isViewOn ?\\<V>2 ?E2; areTracesOver ?Tr2 ?E2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Tr'.\n                       ?Tr2 \\<subseteq> Tr' \\<and> SIA \\<rho> ?\\<V>2 Tr'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<V> Tr E.\n       isViewOn \\<V> E \\<and> areTracesOver Tr E \\<longrightarrow>\n       (\\<exists>Tr'. Tr \\<subseteq> Tr' \\<and> SIA \\<rho> \\<V> Tr')", "by auto"], ["proof (state)\nthis:\n  BSP_valid (SIA \\<rho>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}