{"file_name": "/home/qj213/afp-2021-10-22/thys/Modular_Assembly_Kit_Security/Verification/Unwinding/AuxiliaryLemmas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modular_Assembly_Kit_Security", "problem_names": ["lemma osc_property: \n\"\\<And>s1 s1'. \\<lbrakk> osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>; \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []; \n  reachable SES s1; reachable SES s1'; enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur \\<rbrakk>\n  \\<Longrightarrow> (\\<exists>\\<alpha>'. \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and> \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> enabled SES s1 \\<alpha>')\"", "lemma path_state_closure: \"\\<lbrakk> s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'; s \\<in> S\\<^bsub>SES\\<^esub> \\<rbrakk> \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>\"\n  (is \"\\<lbrakk> ?P s \\<tau> s'; ?S s SES \\<rbrakk> \\<Longrightarrow> ?S s' SES \")", "theorem En_to_Adm:\n\"\\<lbrakk> reachable SES s; En \\<rho> s e\\<rbrakk> \n\\<Longrightarrow> \\<exists>\\<beta>. ( s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e )\"", "theorem Adm_to_En:\n\"\\<lbrakk> \\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>; Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e \\<rbrakk>\n\\<Longrightarrow> \\<exists>s \\<in> S\\<^bsub>SES\\<^esub>. (s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> En \\<rho> s e)\"", "lemma state_from_induceES_trace: \n  \"\\<lbrakk>  (\\<beta> @ \\<alpha>) \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<rbrakk> \n  \\<Longrightarrow> \\<exists>s \\<in> S\\<^bsub>SES\\<^esub>. s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> enabled SES s \\<alpha> \\<and> reachable SES s\"", "lemma path_split2:\"s0\\<^bsub>SES\\<^esub> (\\<beta> @ \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \n  \\<Longrightarrow> \\<exists>s' \\<in> S\\<^bsub>SES\\<^esub>. ( s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and> s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s' )\"", "lemma path_split_single2:\n  \"s0\\<^bsub>SES\\<^esub> (\\<beta> @ [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<Longrightarrow> \\<exists>s' \\<in> S\\<^bsub>SES\\<^esub>. ( s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and> s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s' )\"", "lemma modified_view_valid: \"isViewOn \\<lparr>V = (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>), N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr> E\\<^bsub>SES\\<^esub>\""], "translations": [["", "lemma osc_property: \n\"\\<And>s1 s1'. \\<lbrakk> osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>; \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []; \n  reachable SES s1; reachable SES s1'; enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur \\<rbrakk>\n  \\<Longrightarrow> (\\<exists>\\<alpha>'. \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and> \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> enabled SES s1 \\<alpha>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s1 s1'.\n       \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' \\<alpha>;\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            \\<alpha> \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "proof (induct \\<alpha>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s1'.\n       \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []; reachable SES s1;\n        reachable SES s1'; enabled SES s1' []; (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'\n 2. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "case Nil"], ["proof (state)\nthis:\n  osc ur\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n  [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  reachable SES s1\n  reachable SES s1'\n  enabled SES s1' []\n  (s1', s1) \\<in> ur\n\ngoal (2 subgoals):\n 1. \\<And>s1 s1'.\n       \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []; reachable SES s1;\n        reachable SES s1'; enabled SES s1' []; (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'\n 2. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "have \"[] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n    [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> enabled SES s1 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n    [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    enabled SES s1 []", "by (simp add: enabled_def projection_def)"], ["proof (state)\nthis:\n  [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 []\n\ngoal (2 subgoals):\n 1. \\<And>s1 s1'.\n       \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []; reachable SES s1;\n        reachable SES s1'; enabled SES s1' []; (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'\n 2. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'.\n       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n       enabled SES s1 \\<alpha>'", "by (rule exI)"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>'.\n     \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n     \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     [] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n     enabled SES s1 \\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "case (Cons e1 \\<alpha>1)"], ["proof (state)\nthis:\n  \\<lbrakk>osc ur; ?s1.0 \\<in> S\\<^bsub>SES\\<^esub>;\n   ?s1' \\<in> S\\<^bsub>SES\\<^esub>;\n   \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n   reachable SES ?s1.0; reachable SES ?s1'; enabled SES ?s1' \\<alpha>1;\n   (?s1', ?s1.0) \\<in> ur\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>'.\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n                       [] \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       \\<alpha>1 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       enabled SES ?s1.0 \\<alpha>'\n  osc ur\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n  (e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  reachable SES s1\n  reachable SES s1'\n  enabled SES s1' (e1 # \\<alpha>1)\n  (s1', s1) \\<in> ur\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume osc_true: \"osc ur\""], ["proof (state)\nthis:\n  osc ur\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume s1_in_S: \"s1 \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (state)\nthis:\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume s1'_in_S: \"s1' \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (state)\nthis:\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume e1\\<alpha>1_C_empty: \"(e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (state)\nthis:\n  (e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume reachable_s1: \"reachable SES s1\""], ["proof (state)\nthis:\n  reachable SES s1\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume reachable_s1': \"reachable SES s1'\""], ["proof (state)\nthis:\n  reachable SES s1'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume enabled_s1'_e1\\<alpha>1: \"enabled SES s1' (e1 # \\<alpha>1)\""], ["proof (state)\nthis:\n  enabled SES s1' (e1 # \\<alpha>1)\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "assume unwindingrel_s1'_s1: \"(s1', s1) \\<in> ur\""], ["proof (state)\nthis:\n  (s1', s1) \\<in> ur\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "have e1\\<alpha>1_no_c: \"\\<forall>a \\<in> (set (e1 # \\<alpha>1)). a \\<in> (E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "from reachable_s1'"], ["proof (chain)\npicking this:\n  reachable SES s1'", "obtain \\<beta> \n      where \"s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\""], ["proof (prove)\nusing this:\n  reachable SES s1'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp add: reachable_def, auto)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "moreover"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "from enabled_s1'_e1\\<alpha>1"], ["proof (chain)\npicking this:\n  enabled SES s1' (e1 # \\<alpha>1)", "obtain s1337\n      where \"s1' (e1 # \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337\""], ["proof (prove)\nusing this:\n  enabled SES s1' (e1 # \\<alpha>1)\n\ngoal (1 subgoal):\n 1. (\\<And>s1337.\n        s1' (e1 #\n             \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp add: enabled_def, auto)"], ["proof (state)\nthis:\n  s1' (e1 # \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n  s1' (e1 # \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337", "have \"s0\\<^bsub>SES\\<^esub> (\\<beta> @ (e1 # \\<alpha>1))\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n  s1' (e1 # \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           e1 #\n                           \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337", "by(rule path_trans)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                         e1 #\n                         \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "hence \"\\<beta> @ (e1 # \\<alpha>1) \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                         e1 #\n                         \\<alpha>1)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1337\n\ngoal (1 subgoal):\n 1. \\<beta> @ e1 # \\<alpha>1 \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>", "by (simp add: induceES_def possible_traces_def enabled_def)"], ["proof (state)\nthis:\n  \\<beta> @ e1 # \\<alpha>1 \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "with validSES induceES_yields_ES[of \"SES\"]"], ["proof (chain)\npicking this:\n  SES_valid SES\n  SES_valid SES \\<Longrightarrow> ES_valid (induceES SES)\n  \\<beta> @ e1 # \\<alpha>1 \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>", "have \"\\<forall>a \\<in> (set (\\<beta> @ (e1 # \\<alpha>1))). a \\<in> E\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  SES_valid SES\n  SES_valid SES \\<Longrightarrow> ES_valid (induceES SES)\n  \\<beta> @ e1 # \\<alpha>1 \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (\\<beta> @ e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub>", "by (simp add: induceES_def ES_valid_def traces_contain_events_def)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (\\<beta> @ e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "hence \"\\<forall> a \\<in> (set (e1 # \\<alpha>1)). a \\<in> E\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (\\<beta> @ e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1). a \\<in> E\\<^bsub>SES\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1). a \\<in> E\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "with e1\\<alpha>1_C_empty"], ["proof (chain)\npicking this:\n  (e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  \\<forall>a\\<in>set (e1 # \\<alpha>1). a \\<in> E\\<^bsub>SES\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  (e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  \\<forall>a\\<in>set (e1 # \\<alpha>1). a \\<in> E\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (e1 # \\<alpha>1).\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "by (simp only: projection_def filter_empty_conv, auto)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from enabled_s1'_e1\\<alpha>1"], ["proof (chain)\npicking this:\n  enabled SES s1' (e1 # \\<alpha>1)", "obtain s2' where \n    s1'_e1_s2': \"s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\""], ["proof (prove)\nusing this:\n  enabled SES s1' (e1 # \\<alpha>1)\n\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: enabled_def, split if_split_asm, auto)"], ["proof (state)\nthis:\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "with validSES"], ["proof (chain)\npicking this:\n  SES_valid SES\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'", "have s2'_in_S: \"s2' \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  SES_valid SES\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. s2' \\<in> S\\<^bsub>SES\\<^esub>", "by (simp add: SES_valid_def correct_transition_relation_def)"], ["proof (state)\nthis:\n  s2' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "have reachable_s2': \"reachable SES s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable SES s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable SES s2'", "from reachable_s1'"], ["proof (chain)\npicking this:\n  reachable SES s1'", "obtain t where \n      path_to_s1': \"s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\""], ["proof (prove)\nusing this:\n  reachable SES s1'\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: reachable_def, auto)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n\ngoal (1 subgoal):\n 1. reachable SES s2'", "from s1'_e1_s2'"], ["proof (chain)\npicking this:\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'", "have \"s1' [e1]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'\""], ["proof (prove)\nusing this:\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. s1' [e1]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'", "by simp"], ["proof (state)\nthis:\n  s1' [e1]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. reachable SES s2'", "with path_to_s1'"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n  s1' [e1]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'", "have \"s0\\<^bsub>SES\\<^esub> (t @ [e1])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1'\n  s1' [e1]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (t @ [e1])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'", "by (simp add: path_trans)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (t @ [e1])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. reachable SES s2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> (t @ [e1])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2'\n\ngoal (1 subgoal):\n 1. reachable SES s2'", "by (simp add: reachable_def, rule exI)"], ["proof (state)\nthis:\n  reachable SES s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  reachable SES s2'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from s1'_e1_s2' enabled_s1'_e1\\<alpha>1"], ["proof (chain)\npicking this:\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n  enabled SES s1' (e1 # \\<alpha>1)", "obtain sn' where \n    \"s2' \\<alpha>1\\<Longrightarrow>\\<^bsub>SES\\<^esub> sn'\""], ["proof (prove)\nusing this:\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n  enabled SES s1' (e1 # \\<alpha>1)\n\ngoal (1 subgoal):\n 1. (\\<And>sn'.\n        s2' \\<alpha>1\\<Longrightarrow>\\<^bsub>SES\\<^esub> sn' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: enabled_def, auto)"], ["proof (state)\nthis:\n  s2' \\<alpha>1\\<Longrightarrow>\\<^bsub>SES\\<^esub> sn'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "hence enabled_s2'_\\<alpha>1: \"enabled SES s2' \\<alpha>1\""], ["proof (prove)\nusing this:\n  s2' \\<alpha>1\\<Longrightarrow>\\<^bsub>SES\\<^esub> sn'\n\ngoal (1 subgoal):\n 1. enabled SES s2' \\<alpha>1", "by (simp add: enabled_def)"], ["proof (state)\nthis:\n  enabled SES s2' \\<alpha>1\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from e1\\<alpha>1_no_c"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "have e1_no_c: \"e1 \\<in> (E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>)\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from e1\\<alpha>1_no_c"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "have \\<alpha>1_no_c: \"\\<forall>a\\<in>(set \\<alpha>1). (a \\<in> (E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (e1 # \\<alpha>1).\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set \\<alpha>1.\n       a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set \\<alpha>1.\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "hence \\<alpha>1_proj_C_empty: \"\\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set \\<alpha>1.\n     a \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from osc_true"], ["proof (chain)\npicking this:\n  osc ur", "have \n    \"\\<lbrakk> s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>; s2' \\<in> S\\<^bsub>SES\\<^esub>; \n      e1 \\<in> (E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>); reachable SES s1; reachable SES s1'; \n      s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'; (s1', s1) \\<in> ur \\<rbrakk> \n     \\<Longrightarrow> (\\<exists>s2 \\<in> S\\<^bsub>SES\\<^esub>. \\<exists>\\<delta>. \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n        \\<and> (\\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>) = ([e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>) \\<and> (s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and> \n       ((s2', s2) \\<in> ur)))\""], ["proof (prove)\nusing this:\n  osc ur\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>;\n     s2' \\<in> S\\<^bsub>SES\\<^esub>;\n     e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>;\n     reachable SES s1; reachable SES s1';\n     s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2';\n     (s1', s1) \\<in> ur\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2\\<in>S\\<^bsub>SES\\<^esub>.\n                         \\<exists>\\<delta>.\n                            \\<delta> \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<delta> \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            [e1] \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n                            (s2', s2) \\<in> ur", "by (simp add: osc_def)"], ["proof (state)\nthis:\n  \\<lbrakk>s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>;\n   s2' \\<in> S\\<^bsub>SES\\<^esub>;\n   e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>; reachable SES s1;\n   reachable SES s1'; s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2';\n   (s1', s1) \\<in> ur\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2\\<in>S\\<^bsub>SES\\<^esub>.\n                       \\<exists>\\<delta>.\n                          \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n                          [] \\<and>\n                          \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                          [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                          s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n                          (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "with s1_in_S s1'_in_S e1_no_c reachable_s1 reachable_s1' \n    s2'_in_S s1'_e1_s2' unwindingrel_s1'_s1"], ["proof (chain)\npicking this:\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n  e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n  reachable SES s1\n  reachable SES s1'\n  s2' \\<in> S\\<^bsub>SES\\<^esub>\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n  (s1', s1) \\<in> ur\n  \\<lbrakk>s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>;\n   s2' \\<in> S\\<^bsub>SES\\<^esub>;\n   e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>; reachable SES s1;\n   reachable SES s1'; s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2';\n   (s1', s1) \\<in> ur\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2\\<in>S\\<^bsub>SES\\<^esub>.\n                       \\<exists>\\<delta>.\n                          \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n                          [] \\<and>\n                          \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                          [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                          s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n                          (s2', s2) \\<in> ur", "obtain s2 \\<delta> where \n    osc_conclusion: \n      \"s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and> \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n      (\\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>) = ([e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub>) \\<and> s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and> \n      ((s2', s2) \\<in> ur)\""], ["proof (prove)\nusing this:\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n  e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>\n  reachable SES s1\n  reachable SES s1'\n  s2' \\<in> S\\<^bsub>SES\\<^esub>\n  s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2'\n  (s1', s1) \\<in> ur\n  \\<lbrakk>s1 \\<in> S\\<^bsub>SES\\<^esub>; s1' \\<in> S\\<^bsub>SES\\<^esub>;\n   s2' \\<in> S\\<^bsub>SES\\<^esub>;\n   e1 \\<in> E\\<^bsub>SES\\<^esub> - C\\<^bsub>\\<V>\\<^esub>; reachable SES s1;\n   reachable SES s1'; s1' e1\\<longrightarrow>\\<^bsub>SES\\<^esub> s2';\n   (s1', s1) \\<in> ur\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2\\<in>S\\<^bsub>SES\\<^esub>.\n                       \\<exists>\\<delta>.\n                          \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n                          [] \\<and>\n                          \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                          [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n                          s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n                          (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. (\\<And>s2 \\<delta>.\n        s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n        \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n        \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n        [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n        s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n        (s2', s2) \\<in> ur \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "hence \\<delta>_proj_C_empty: \"\\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (prove)\nusing this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from osc_conclusion"], ["proof (chain)\npicking this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur", "have s2_in_S: \"s2 \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. s2 \\<in> S\\<^bsub>SES\\<^esub>", "by auto"], ["proof (state)\nthis:\n  s2 \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from osc_conclusion"], ["proof (chain)\npicking this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur", "have unwindingrel_s2'_s2: \"(s2', s2) \\<in> ur\""], ["proof (prove)\nusing this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. (s2', s2) \\<in> ur", "by auto"], ["proof (state)\nthis:\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "have reachable_s2: \"reachable SES s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable SES s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable SES s2", "from reachable_s1"], ["proof (chain)\npicking this:\n  reachable SES s1", "obtain t where \n      path_to_s1: \"s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1\""], ["proof (prove)\nusing this:\n  reachable SES s1\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: reachable_def, auto)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1\n\ngoal (1 subgoal):\n 1. reachable SES s2", "from osc_conclusion"], ["proof (chain)\npicking this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur", "have \"s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2", "by auto"], ["proof (state)\nthis:\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2\n\ngoal (1 subgoal):\n 1. reachable SES s2", "with path_to_s1"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2", "have \"s0\\<^bsub>SES\\<^esub> (t @ \\<delta>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> t\\<Longrightarrow>\\<^bsub>SES\\<^esub> s1\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (t @\n                           \\<delta>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2", "by (simp add: path_trans)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (t @\n                         \\<delta>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2\n\ngoal (1 subgoal):\n 1. reachable SES s2", "thus ?thesis"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> (t @\n                         \\<delta>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2\n\ngoal (1 subgoal):\n 1. reachable SES s2", "by (simp add: reachable_def, rule exI)"], ["proof (state)\nthis:\n  reachable SES s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  reachable SES s2\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "from Cons osc_true s2_in_S s2'_in_S \\<alpha>1_proj_C_empty\n    reachable_s2 reachable_s2' enabled_s2'_\\<alpha>1 unwindingrel_s2'_s2"], ["proof (chain)\npicking this:\n  \\<lbrakk>osc ur; ?s1.0 \\<in> S\\<^bsub>SES\\<^esub>;\n   ?s1' \\<in> S\\<^bsub>SES\\<^esub>;\n   \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n   reachable SES ?s1.0; reachable SES ?s1'; enabled SES ?s1' \\<alpha>1;\n   (?s1', ?s1.0) \\<in> ur\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>'.\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n                       [] \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       \\<alpha>1 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       enabled SES ?s1.0 \\<alpha>'\n  osc ur\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n  (e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  reachable SES s1\n  reachable SES s1'\n  enabled SES s1' (e1 # \\<alpha>1)\n  (s1', s1) \\<in> ur\n  osc ur\n  s2 \\<in> S\\<^bsub>SES\\<^esub>\n  s2' \\<in> S\\<^bsub>SES\\<^esub>\n  \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  reachable SES s2\n  reachable SES s2'\n  enabled SES s2' \\<alpha>1\n  (s2', s2) \\<in> ur", "obtain \\<alpha>'' where \\<alpha>''_props:\n    \"\\<alpha>'' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and> \\<alpha>'' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = \\<alpha>1 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> enabled SES s2 \\<alpha>''\""], ["proof (prove)\nusing this:\n  \\<lbrakk>osc ur; ?s1.0 \\<in> S\\<^bsub>SES\\<^esub>;\n   ?s1' \\<in> S\\<^bsub>SES\\<^esub>;\n   \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n   reachable SES ?s1.0; reachable SES ?s1'; enabled SES ?s1' \\<alpha>1;\n   (?s1', ?s1.0) \\<in> ur\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha>'.\n                       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n                       [] \\<and>\n                       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n                       \\<alpha>1 \\<upharpoonleft>\n                       V\\<^bsub>\\<V>\\<^esub> \\<and>\n                       enabled SES ?s1.0 \\<alpha>'\n  osc ur\n  s1 \\<in> S\\<^bsub>SES\\<^esub>\n  s1' \\<in> S\\<^bsub>SES\\<^esub>\n  (e1 # \\<alpha>1) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  reachable SES s1\n  reachable SES s1'\n  enabled SES s1' (e1 # \\<alpha>1)\n  (s1', s1) \\<in> ur\n  osc ur\n  s2 \\<in> S\\<^bsub>SES\\<^esub>\n  s2' \\<in> S\\<^bsub>SES\\<^esub>\n  \\<alpha>1 \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  reachable SES s2\n  reachable SES s2'\n  enabled SES s2' \\<alpha>1\n  (s2', s2) \\<in> ur\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>''.\n        \\<alpha>'' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n        \\<alpha>'' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n        \\<alpha>1 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n        enabled SES s2 \\<alpha>'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<alpha>'' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>'' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha>1 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s2 \\<alpha>''\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "with osc_conclusion"], ["proof (chain)\npicking this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n  \\<alpha>'' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>'' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha>1 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s2 \\<alpha>''", "have  \\<delta>\\<alpha>''_props:\n    \"(\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and> \n    (\\<delta> @ \\<alpha>'') \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> = (e1#\\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and> enabled SES s1 (\\<delta> @ \\<alpha>'')\""], ["proof (prove)\nusing this:\n  s2 \\<in> S\\<^bsub>SES\\<^esub> \\<and>\n  \\<delta> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<delta> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  [e1] \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  s1 \\<delta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n  (s2', s2) \\<in> ur\n  \\<alpha>'' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>'' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha>1 \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s2 \\<alpha>''\n\ngoal (1 subgoal):\n 1. (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> =\n    [] \\<and>\n    (\\<delta> @ \\<alpha>'') \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n    (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n    enabled SES s1 (\\<delta> @ \\<alpha>'')", "by (simp add: projection_def enabled_def, auto, simp add: path_trans)"], ["proof (state)\nthis:\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 (\\<delta> @ \\<alpha>'')\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "hence \"(\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\""], ["proof (prove)\nusing this:\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 (\\<delta> @ \\<alpha>'')\n\ngoal (1 subgoal):\n 1. (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []", "by (simp add: projection_def)"], ["proof (state)\nthis:\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<alpha> s1 s1'.\n       \\<lbrakk>\\<And>s1 s1'.\n                   \\<lbrakk>osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n                    s1' \\<in> S\\<^bsub>SES\\<^esub>;\n                    \\<alpha> \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n                    reachable SES s1; reachable SES s1';\n                    enabled SES s1' \\<alpha>; (s1', s1) \\<in> ur\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<alpha>'.\n  \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  \\<alpha> \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 \\<alpha>';\n        osc ur; s1 \\<in> S\\<^bsub>SES\\<^esub>;\n        s1' \\<in> S\\<^bsub>SES\\<^esub>;\n        (a # \\<alpha>) \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [];\n        reachable SES s1; reachable SES s1'; enabled SES s1' (a # \\<alpha>);\n        (s1', s1) \\<in> ur\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<alpha>'.\n                            \\<alpha>' \\<upharpoonleft>\n                            C\\<^bsub>\\<V>\\<^esub> =\n                            [] \\<and>\n                            \\<alpha>' \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> =\n                            (a # \\<alpha>) \\<upharpoonleft>\n                            V\\<^bsub>\\<V>\\<^esub> \\<and>\n                            enabled SES s1 \\<alpha>'", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'.\n       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n       enabled SES s1 \\<alpha>'", "using \\<delta>\\<alpha>''_props"], ["proof (prove)\nusing this:\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = []\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n  (\\<delta> @ \\<alpha>'') \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n  (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n  enabled SES s1 (\\<delta> @ \\<alpha>'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'.\n       \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n       \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n       (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n       enabled SES s1 \\<alpha>'", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>'.\n     \\<alpha>' \\<upharpoonleft> C\\<^bsub>\\<V>\\<^esub> = [] \\<and>\n     \\<alpha>' \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> =\n     (e1 # \\<alpha>1) \\<upharpoonleft> V\\<^bsub>\\<V>\\<^esub> \\<and>\n     enabled SES s1 \\<alpha>'\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Paths will not bring us out of the domain of states.  *)"], ["", "lemma path_state_closure: \"\\<lbrakk> s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'; s \\<in> S\\<^bsub>SES\\<^esub> \\<rbrakk> \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>\"\n  (is \"\\<lbrakk> ?P s \\<tau> s'; ?S s SES \\<rbrakk> \\<Longrightarrow> ?S s' SES \")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "proof (induct \\<tau> arbitrary: s s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>s []\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>\n 2. \\<And>a \\<tau> s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                    s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                   \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n        s (a # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "case Nil"], ["proof (state)\nthis:\n  s []\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>s []\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>\n 2. \\<And>a \\<tau> s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                    s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                   \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n        s (a # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "with validSES"], ["proof (chain)\npicking this:\n  SES_valid SES\n  s []\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s \\<in> S\\<^bsub>SES\\<^esub>", "show ?case"], ["proof (prove)\nusing this:\n  SES_valid SES\n  s []\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "by (auto simp add: SES_valid_def correct_transition_relation_def)"], ["proof (state)\nthis:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<tau> s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                    s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                   \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n        s (a # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<tau> s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                    s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                   \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n        s (a # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "case (Cons e \\<tau>)"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> ?s';\n   ?s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?s' \\<in> S\\<^bsub>SES\\<^esub>\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<tau> s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                    s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                   \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n        s (a # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n        s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> ?s';\n   ?s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?s' \\<in> S\\<^bsub>SES\\<^esub>\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s s'.\n                \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                 s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n     s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "assume path_e\\<tau>: \"?P s (e # \\<tau>) s'\""], ["proof (state)\nthis:\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s s'.\n                \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                 s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n     s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "assume induct_hypo: \"\\<And> s s'. \\<lbrakk> ?P s \\<tau> s'; ?S s SES \\<rbrakk> \\<Longrightarrow> ?S s' SES\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> ?s';\n   ?s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s s'.\n                \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                 s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n     s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "from path_e\\<tau>"], ["proof (chain)\npicking this:\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'", "obtain s'' where s_e_s'': \"s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\""], ["proof (prove)\nusing this:\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. (\\<And>s''.\n        s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp add: path_def, split if_split_asm, auto)"], ["proof (state)\nthis:\n  s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s s'.\n                \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                 s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n     s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "with validSES"], ["proof (chain)\npicking this:\n  SES_valid SES\n  s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''", "have s''_in_S: \"?S s'' SES\""], ["proof (prove)\nusing this:\n  SES_valid SES\n  s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. s'' \\<in> S\\<^bsub>SES\\<^esub>", "by (simp add: SES_valid_def correct_transition_relation_def)"], ["proof (state)\nthis:\n  s'' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s s'.\n                \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                 s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n     s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "from s_e_s'' path_e\\<tau>"], ["proof (chain)\npicking this:\n  s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'", "have path_\\<tau>: \"?P s'' \\<tau> s'\""], ["proof (prove)\nusing this:\n  s e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n  s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. s'' \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'", "by auto"], ["proof (state)\nthis:\n  s'' \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s s'.\n                \\<lbrakk>s \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n                 s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n                \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>;\n     s (e # \\<tau>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n     s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> s' \\<in> S\\<^bsub>SES\\<^esub>", "from path_\\<tau> s''_in_S"], ["proof (chain)\npicking this:\n  s'' \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s'' \\<in> S\\<^bsub>SES\\<^esub>", "show ?case"], ["proof (prove)\nusing this:\n  s'' \\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s'' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "by (rule induct_hypo)"], ["proof (state)\nthis:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Theorem 5.4.7 split into two parts *)\n\n(* first part *)"], ["", "theorem En_to_Adm:\n\"\\<lbrakk> reachable SES s; En \\<rho> s e\\<rbrakk> \n\\<Longrightarrow> \\<exists>\\<beta>. ( s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "assume \"En \\<rho> s e\""], ["proof (state)\nthis:\n  En \\<rho> s e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "then"], ["proof (chain)\npicking this:\n  En \\<rho> s e", "obtain \\<beta> \\<gamma> s' s'' \n    where \"s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\"\n    and   \"\\<gamma> \\<upharpoonleft> (\\<rho> \\<V>) = \\<beta> \\<upharpoonleft> (\\<rho> \\<V>)\" \n    and   s0_\\<gamma>_s': \"s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\" \n    and   s'_e_s'': \"s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\""], ["proof (prove)\nusing this:\n  En \\<rho> s e\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta> \\<gamma> s' s''.\n        \\<lbrakk>s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s;\n         \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n         \\<beta> \\<upharpoonleft> \\<rho> \\<V>;\n         s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n         s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: En_def, auto)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "moreover"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "from s0_\\<gamma>_s' s'_e_s''"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''", "have \"s0\\<^bsub>SES\\<^esub> (\\<gamma> @ [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                           [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''", "by (rule path_trans_single)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                         [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "hence \"(\\<gamma> @ [e]) \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                         [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<gamma> @ [e] \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>", "by(simp add: induceES_def possible_traces_def enabled_def)"], ["proof (state)\nthis:\n  \\<gamma> @ [e] \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>reachable SES s; En \\<rho> s e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<beta>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub>\n                          \\<beta> e", "ultimately"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n  \\<gamma> @ [e] \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n  \\<gamma> @ [e] \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<beta>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e", "by (simp add: Adm_def, auto)"], ["proof (state)\nthis:\n  \\<exists>\\<beta>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\n\ngoal:\nNo subgoals!", "qed"], ["", "(* second part *)"], ["", "theorem Adm_to_En:\n\"\\<lbrakk> \\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>; Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e \\<rbrakk>\n\\<Longrightarrow> \\<exists>s \\<in> S\\<^bsub>SES\\<^esub>. (s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> En \\<rho> s e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "from validSES"], ["proof (chain)\npicking this:\n  SES_valid SES", "have s0_in_S: \"s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  SES_valid SES\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>", "by (simp add: SES_valid_def s0_is_state_def)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "assume \"\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\""], ["proof (state)\nthis:\n  \\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>", "obtain s\n    where s0_\\<beta>_s: \"s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\""], ["proof (prove)\nusing this:\n  \\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: induceES_def possible_traces_def enabled_def, auto)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "from this"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s", "have s_in_S: \"s \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. s \\<in> S\\<^bsub>SES\\<^esub>", "using s0_in_S"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s \\<in> S\\<^bsub>SES\\<^esub>", "by (rule path_state_closure)"], ["proof (state)\nthis:\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "assume  \"Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\""], ["proof (state)\nthis:\n  Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "then"], ["proof (chain)\npicking this:\n  Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e", "obtain \\<gamma>\n    where \\<rho>\\<gamma>_is_\\<rho>\\<beta>: \"\\<gamma> \\<upharpoonleft> (\\<rho> \\<V>) = \\<beta> \\<upharpoonleft> (\\<rho> \\<V>)\"\n    and   \"\\<exists>s''. s0\\<^bsub>SES\\<^esub> (\\<gamma> @ [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\""], ["proof (prove)\nusing this:\n  Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>.\n        \\<lbrakk>\\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n                 \\<beta> \\<upharpoonleft> \\<rho> \\<V>;\n         \\<exists>s''.\n            s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                                   [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(simp add: Adm_def induceES_def possible_traces_def enabled_def, auto)"], ["proof (state)\nthis:\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  \\<exists>s''.\n     s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                            [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  \\<exists>s''.\n     s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                            [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''", "obtain s''\n    where  s0_\\<gamma>e_s'': \"s0\\<^bsub>SES\\<^esub> (\\<gamma> @ [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  \\<exists>s''.\n     s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                            [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. (\\<And>s''.\n        s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                               [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                         [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "from this"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                         [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''", "have s''_in_S: \"s'' \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                         [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. s'' \\<in> S\\<^bsub>SES\\<^esub>", "using s0_in_S"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> (\\<gamma> @\n                         [e])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s''\n  s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s'' \\<in> S\\<^bsub>SES\\<^esub>", "by (rule path_state_closure)"], ["proof (state)\nthis:\n  s'' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "from path_split_single[OF s0_\\<gamma>e_s'']"], ["proof (chain)\npicking this:\n  \\<exists>s'.\n     s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n     s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''", "obtain s' \n    where s0_\\<gamma>_s': \"s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\"\n    and s'_e_s'': \"s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\""], ["proof (prove)\nusing this:\n  \\<exists>s'.\n     s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n     s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n         s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "from path_state_closure[OF s0_\\<gamma>_s' s0_in_S]"], ["proof (chain)\npicking this:\n  s' \\<in> S\\<^bsub>SES\\<^esub>", "have s'_in_S: \"s' \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "."], ["proof (state)\nthis:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>;\n     Adm \\<V> \\<rho> Tr\\<^bsub>(induceES SES)\\<^esub> \\<beta> e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n                         s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n                         En \\<rho> s e", "from s'_in_S s''_in_S s0_\\<beta>_s \\<rho>\\<gamma>_is_\\<rho>\\<beta> s0_\\<gamma>_s' s'_e_s'' s_in_S"], ["proof (chain)\npicking this:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n  s'' \\<in> S\\<^bsub>SES\\<^esub>\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n  s \\<in> S\\<^bsub>SES\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n  s'' \\<in> S\\<^bsub>SES\\<^esub>\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<gamma> \\<upharpoonleft> \\<rho> \\<V> =\n  \\<beta> \\<upharpoonleft> \\<rho> \\<V>\n  s0\\<^bsub>SES\\<^esub> \\<gamma>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' e\\<longrightarrow>\\<^bsub>SES\\<^esub> s''\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       En \\<rho> s e", "by (simp add: En_def, auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n     En \\<rho> s e\n\ngoal:\nNo subgoals!", "qed"], ["", "(* It is a common pattern in the unwinding theorem proofs to obtain \n a state from a given trace in a state event system and deduce some of its\n properties. This can be accomplished with the following lemma: \n*)"], ["", "lemma state_from_induceES_trace: \n  \"\\<lbrakk>  (\\<beta> @ \\<alpha>) \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<rbrakk> \n  \\<Longrightarrow> \\<exists>s \\<in> S\\<^bsub>SES\\<^esub>. s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> enabled SES s \\<alpha> \\<and> reachable SES s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "assume \\<beta>\\<alpha>_in_Tr: \"(\\<beta> @ \\<alpha>) \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\""], ["proof (state)\nthis:\n  \\<beta> @ \\<alpha> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "then"], ["proof (chain)\npicking this:\n  \\<beta> @ \\<alpha> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>", "obtain s' where  s0_\\<beta>\\<alpha>_s':\"s0\\<^bsub>SES\\<^esub> (\\<beta> @ \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\""], ["proof (prove)\nusing this:\n  \\<beta> @ \\<alpha> \\<in> Tr\\<^bsub>(induceES SES)\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                               \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: induceES_def possible_traces_def enabled_def, auto)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                         \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "from path_split[OF s0_\\<beta>\\<alpha>_s']"], ["proof (chain)\npicking this:\n  \\<exists>s2.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n     s2 \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'", "obtain s \n      where s0_\\<beta>_s: \"s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\" \n      and \"s \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\""], ["proof (prove)\nusing this:\n  \\<exists>s2.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n     s2 \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s;\n         s \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  s \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "hence enabled_s_\\<alpha>: \"enabled SES s \\<alpha>\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  s \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. enabled SES s \\<alpha>", "by (simp add: enabled_def)"], ["proof (state)\nthis:\n  enabled SES s \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "from s0_\\<beta>_s"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s", "have reachable_s: \"reachable SES s\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. reachable SES s", "by(simp add: reachable_def, auto)"], ["proof (state)\nthis:\n  reachable SES s\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "from validSES"], ["proof (chain)\npicking this:\n  SES_valid SES", "have \"s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  SES_valid SES\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>", "by (simp add: SES_valid_def s0_is_state_def)"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "with s0_\\<beta>_s"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>", "have s_in_S: \"s \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  s0\\<^bsub>SES\\<^esub> \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s \\<in> S\\<^bsub>SES\\<^esub>", "by (rule path_state_closure)"], ["proof (state)\nthis:\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<beta> @ \\<alpha>\n    \\<in> Tr\\<^bsub>(induceES SES)\\<^esub> \\<Longrightarrow>\n    \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "with s0_\\<beta>_s enabled_s_\\<alpha> reachable_s"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  enabled SES s \\<alpha>\n  reachable SES s\n  s \\<in> S\\<^bsub>SES\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  enabled SES s \\<alpha>\n  reachable SES s\n  s \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       enabled SES s \\<alpha> \\<and> reachable SES s", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<in>S\\<^bsub>SES\\<^esub>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n     enabled SES s \\<alpha> \\<and> reachable SES s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Another common pattern in unwinding results: *)"], ["", "lemma path_split2:\"s0\\<^bsub>SES\\<^esub> (\\<beta> @ \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \n  \\<Longrightarrow> \\<exists>s' \\<in> S\\<^bsub>SES\\<^esub>. ( s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and> s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s' )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "assume s0_\\<beta>\\<alpha>_s: \"s0\\<^bsub>SES\\<^esub> (\\<beta> @ \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\""], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                         \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "from path_split[OF s0_\\<beta>\\<alpha>_s]"], ["proof (chain)\npicking this:\n  \\<exists>s2.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n     s2 \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s", "obtain s' \n    where s0_\\<beta>_s': \"s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\"\n    and s'_\\<alpha>_s: \"s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\""], ["proof (prove)\nusing this:\n  \\<exists>s2.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s2 \\<and>\n     s2 \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s';\n         s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "hence \"reachable SES s'\""], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. reachable SES s'", "by(simp add: reachable_def, auto)"], ["proof (state)\nthis:\n  reachable SES s'\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "moreover"], ["proof (state)\nthis:\n  reachable SES s'\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "have \"s' \\<in> S\\<^bsub>SES\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "from s0_\\<beta>_s' validSES path_state_closure"], ["proof (chain)\npicking this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  SES_valid SES\n  \\<lbrakk>?s ?\\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> ?s';\n   ?s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?s' \\<in> S\\<^bsub>SES\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n  SES_valid SES\n  \\<lbrakk>?s ?\\<tau>\\<Longrightarrow>\\<^bsub>SES\\<^esub> ?s';\n   ?s \\<in> S\\<^bsub>SES\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s' \\<in> S\\<^bsub>SES\\<^esub>", "by (auto simp add: SES_valid_def s0_is_state_def)"], ["proof (state)\nthis:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           \\<alpha>)\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "ultimately"], ["proof (chain)\npicking this:\n  reachable SES s'\n  s' \\<in> S\\<^bsub>SES\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  reachable SES s'\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "using s'_\\<alpha>_s s0_\\<beta>_s'"], ["proof (prove)\nusing this:\n  reachable SES s'\n  s' \\<in> S\\<^bsub>SES\\<^esub>\n  s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s'\n\ngoal (1 subgoal):\n 1. \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n       reachable SES s'", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n     s' \\<alpha>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and>\n     reachable SES s'\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Variant for singleton lists *)"], ["", "lemma path_split_single2:\n  \"s0\\<^bsub>SES\\<^esub> (\\<beta> @ [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n  \\<Longrightarrow> \\<exists>s' \\<in> S\\<^bsub>SES\\<^esub>. ( s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and> s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s' )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'", "assume s0_\\<beta>x_s: \"s0\\<^bsub>SES\\<^esub> (\\<beta> @ [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\""], ["proof (state)\nthis:\n  s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                         [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s\n\ngoal (1 subgoal):\n 1. s0\\<^bsub>SES\\<^esub> (\\<beta> @\n                           [x])\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<Longrightarrow>\n    \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'", "from path_split2[OF s0_\\<beta>x_s]"], ["proof (chain)\npicking this:\n  \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n     s' [x]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n     s' [x]\\<Longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'\n\ngoal (1 subgoal):\n 1. \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n       s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n       s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'", "by (auto, split if_split_asm, auto)"], ["proof (state)\nthis:\n  \\<exists>s'\\<in>S\\<^bsub>SES\\<^esub>.\n     s0\\<^bsub>SES\\<^esub> \\<beta>\\<Longrightarrow>\\<^bsub>SES\\<^esub> s' \\<and>\n     s' x\\<longrightarrow>\\<^bsub>SES\\<^esub> s \\<and> reachable SES s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma modified_view_valid: \"isViewOn \\<lparr>V = (V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>), N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr> E\\<^bsub>SES\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isViewOn\n     \\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>,\n        N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\n     E\\<^bsub>SES\\<^esub>", "using validVU"], ["proof (prove)\nusing this:\n  isViewOn \\<V> E\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. isViewOn\n     \\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub>,\n        N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\n     E\\<^bsub>SES\\<^esub>", "unfolding isViewOn_def V_valid_def VC_disjoint_def VN_disjoint_def NC_disjoint_def"], ["proof (prove)\nusing this:\n  (V\\<^bsub>\\<V>\\<^esub> \\<inter> N\\<^bsub>\\<V>\\<^esub> = {} \\<and>\n   V\\<^bsub>\\<V>\\<^esub> \\<inter> C\\<^bsub>\\<V>\\<^esub> = {} \\<and>\n   N\\<^bsub>\\<V>\\<^esub> \\<inter> C\\<^bsub>\\<V>\\<^esub> = {}) \\<and>\n  V\\<^bsub>\\<V>\\<^esub> \\<union> N\\<^bsub>\\<V>\\<^esub> \\<union>\n  C\\<^bsub>\\<V>\\<^esub> =\n  E\\<^bsub>SES\\<^esub>\n\ngoal (1 subgoal):\n 1. (V\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>,\n                 N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> \\<inter>\n     N\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>,\n                 N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> =\n     {} \\<and>\n     V\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>,\n                 N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> \\<inter>\n     C\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>,\n                 N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> =\n     {} \\<and>\n     N\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>,\n                 N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> \\<inter>\n     C\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                          N\\<^bsub>\\<V>\\<^esub>,\n                 N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> =\n     {}) \\<and>\n    V\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>,\n                N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> \\<union>\n    N\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>,\n                N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> \\<union>\n    C\\<^bsub>\\<lparr>V = V\\<^bsub>\\<V>\\<^esub> \\<union>\n                         N\\<^bsub>\\<V>\\<^esub>,\n                N = {}, C = C\\<^bsub>\\<V>\\<^esub>\\<rparr>\\<^esub> =\n    E\\<^bsub>SES\\<^esub>", "by auto"], ["", "end"], ["", "end"]]}