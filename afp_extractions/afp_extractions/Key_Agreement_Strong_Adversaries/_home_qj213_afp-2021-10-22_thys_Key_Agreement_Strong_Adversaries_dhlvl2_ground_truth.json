{"file_name": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries/dhlvl2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries", "problem_names": ["lemma role_comp_inv [simp]:\n  \"role_comp (role_comp x) = x\"", "lemma role_comp_inv_eq:\n  \"y = role_comp x \\<longleftrightarrow> x = role_comp y\"", "lemma test_not_partner [simp]:\n  \"test \\<notin> partners\"", "lemma matching_symmetric:\n  \"matching sigma sigma' \\<Longrightarrow> matching sigma' sigma\"", "lemma partner_symmetric:\n  \"partner_runs R R' \\<Longrightarrow> partner_runs R' R\"", "lemma partner_unique:\n  \"partner_runs R R'' \\<Longrightarrow> partner_runs R R' \\<Longrightarrow> R' = R''\"", "lemma partner_test:\n  \"R \\<in> partners \\<Longrightarrow> partner_runs R R' \\<Longrightarrow> R' = test\"", "lemmas l2_loc_defs = \n  l2_step1_def l2_step2_def l2_step3_def l2_step4_def\n  l2_def l2_init_def l2_trans_def\n  l2_dy_fake_chan_def l2_dy_fake_msg_def\n  l2_lkr_after_def l2_lkr_others_def l2_skr_def", "lemmas l2_defs = l2_loc_defs ik_dy_def", "lemmas l2_nostep_defs = l2_def l2_init_def l2_trans_def", "lemma l2_obs_id [simp]: \"obs l2 = id\"", "lemma l2_run_ended_trans:\n  \"run_ended (progress s R) \\<Longrightarrow>\n   (s, s') \\<in> trans l2 \\<Longrightarrow>\n   run_ended (progress s' R)\"", "lemma l2_can_signal_trans:\n  \"can_signal s' A B \\<Longrightarrow>\n  (s, s') \\<in> trans l2 \\<Longrightarrow>\n  can_signal s A B\"", "lemmas l2_inv1I = l2_inv1_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv1E [elim] = l2_inv1_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv1D = l2_inv1_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv1_init [iff]:\n  \"init l2 \\<subseteq> l2_inv1\"", "lemma l2_inv1_trans [iff]:\n  \"{l2_inv1} trans l2 {> l2_inv1}\"", "lemma PO_l2_inv1 [iff]: \"reach l2 \\<subseteq> l2_inv1\"", "lemmas l2_inv2I = l2_inv2_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv2E [elim] = l2_inv2_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv2D = l2_inv2_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv2_init [iff]:\n  \"init l2 \\<subseteq> l2_inv2\"", "lemma l2_inv2_trans [iff]:\n  \"{l2_inv2} trans l2 {> l2_inv2}\"", "lemma PO_l2_inv2 [iff]: \"reach l2 \\<subseteq> l2_inv2\"", "lemmas l2_inv3I = l2_inv3_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv3E [elim] = l2_inv3_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv3D = l2_inv3_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv3_init [iff]:\n  \"init l2 \\<subseteq> l2_inv3\"", "lemma l2_inv3_trans [iff]:\n  \"{l2_inv3} trans l2 {> l2_inv3}\"", "lemma PO_l2_inv3 [iff]: \"reach l2 \\<subseteq> l2_inv3\"", "lemmas l2_inv4I = l2_inv4_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv4E [elim] = l2_inv4_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv4D = l2_inv4_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv4_init [iff]:\n  \"init l2 \\<subseteq> l2_inv4\"", "lemma l2_inv4_trans [iff]:\n  \"{l2_inv4} trans l2 {> l2_inv4}\"", "lemma PO_l2_inv4 [iff]: \"reach l2 \\<subseteq> l2_inv4\"", "lemmas l2_inv4'I = l2_inv4'_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv4'E [elim] = l2_inv4'_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv4'D = l2_inv4'_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv4'_init [iff]:\n  \"init l2 \\<subseteq> l2_inv4'\"", "lemma l2_inv4'_trans [iff]:\n  \"{l2_inv4'} trans l2 {> l2_inv4'}\"", "lemma PO_l2_inv4' [iff]: \"reach l2 \\<subseteq> l2_inv4'\"", "lemmas l2_inv5I = l2_inv5_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv5E [elim] = l2_inv5_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv5D = l2_inv5_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv5_init [iff]:\n  \"init l2 \\<subseteq> l2_inv5\"", "lemma l2_inv5_trans [iff]:\n  \"{l2_inv5} trans l2 {> l2_inv5}\"", "lemma PO_l2_inv5 [iff]: \"reach l2 \\<subseteq> l2_inv5\"", "lemmas l2_inv6I = l2_inv6_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv6E [elim] = l2_inv6_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv6D = l2_inv6_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv6_init [iff]:\n  \"init l2 \\<subseteq> l2_inv6\"", "lemma l2_inv6_trans [iff]:\n  \"{l2_inv6} trans l2 {> l2_inv6}\"", "lemma PO_l2_inv6 [iff]: \"reach l2 \\<subseteq> l2_inv6\"", "lemma analz_generators: \"analz generators = generators\"", "lemmas l2_inv7I = l2_inv7_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv7E [elim] = l2_inv7_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv7D = l2_inv7_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv7_init [iff]:\n  \"init l2 \\<subseteq> l2_inv7\"", "lemma l2_inv7_step1:\n  \"{l2_inv7} l2_step1 Ra A B {> l2_inv7}\"", "lemma l2_inv7_step2:\n  \"{l2_inv7} l2_step2 Rb A B gnx {> l2_inv7}\"", "lemma l2_inv7_step3:\n  \"{l2_inv7} l2_step3 Ra A B gny {> l2_inv7}\"", "lemma l2_inv7_step4:\n  \"{l2_inv7} l2_step4 Rb A B gnx {> l2_inv7}\"", "lemma l2_inv7_dy_fake_msg:\n  \"{l2_inv7} l2_dy_fake_msg M {> l2_inv7}\"", "lemma l2_inv7_dy_fake_chan:\n  \"{l2_inv7} l2_dy_fake_chan M {> l2_inv7}\"", "lemma l2_inv7_lkr_others:\n  \"{l2_inv7 \\<inter> l2_inv5} l2_lkr_others A {> l2_inv7}\"", "lemma l2_inv7_lkr_after:\n  \"{l2_inv7 \\<inter> l2_inv5} l2_lkr_after A {> l2_inv7}\"", "lemma l2_inv7_skr:\n  \"{l2_inv7 \\<inter> l2_inv6} l2_skr R K {> l2_inv7}\"", "lemmas l2_inv7_trans_aux =\n  l2_inv7_step1 l2_inv7_step2 l2_inv7_step3 l2_inv7_step4\n  l2_inv7_dy_fake_msg l2_inv7_dy_fake_chan\n  l2_inv7_lkr_others l2_inv7_lkr_after l2_inv7_skr", "lemma l2_inv7_trans [iff]:\n  \"{l2_inv7 \\<inter> l2_inv5 \\<inter> l2_inv6} trans l2 {> l2_inv7}\"", "lemma PO_l2_inv7 [iff]: \"reach l2 \\<subseteq> l2_inv7\"", "lemmas l2_inv7D_aux = \n  l2_inv7D [THEN [2] subset_trans, THEN synth_analz_mono, simplified, \n            THEN [2] rev_subsetD, rotated 1, OF IK_subset_extr]", "lemmas l2_inv8I = l2_inv8_def [THEN setc_def_to_intro, rule_format]", "lemmas l2_inv8E [elim] = l2_inv8_def [THEN setc_def_to_elim, rule_format]", "lemmas l2_inv8D = l2_inv8_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma l2_inv8_init [iff]:\n  \"init l2 \\<subseteq> l2_inv8\"", "lemma l2_inv8_step3:\n  \"{l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv4'} l2_step3 Ra A B gny {> l2_inv8}\"", "lemma l2_inv8_step4:\n  \"{l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4'} l2_step4 Rb A B gnx {> l2_inv8}\"", "lemma l2_inv8_trans [iff]:\n  \"{l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4'} trans l2 {> l2_inv8}\"", "lemma PO_l2_inv8 [iff]: \"reach l2 \\<subseteq> l2_inv8\"", "lemma Exp_Exp_Gen_synth: \n  \"Exp (Exp Gen X) Y \\<in> synth H \\<Longrightarrow> Exp (Exp Gen X) Y \\<in> H \\<or> X \\<in> synth H \\<or> Y \\<in> synth H\"", "lemma l2_inv8_aux:\n  \"s \\<in> l2_inv8 \\<Longrightarrow>\n   x \\<in> secret s \\<Longrightarrow>\n   x \\<notin> synth (analz generators)\"", "lemmas R12s_defs = R12s_def med12s_def", "lemma can_signal_R12 [simp]:\n  \"(s1, s2) \\<in> R12s \\<Longrightarrow>\n   can_signal s1 A B \\<longleftrightarrow> can_signal s2 A B\"", "lemma l2_step1_refines_step1:\n  \"{R12s} l1_step1 Ra A B, l2_step1 Ra A B {>R12s}\"", "lemma l2_step2_refines_step2:\n  \"{R12s} l1_step2 Rb A B gnx, l2_step2 Rb A B gnx {>R12s}\"", "lemma l2_step3_refines_step3:\n  \"{R12s \\<inter> UNIV \\<times> (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv4' \\<inter> l2_inv7 \\<inter> l2_inv8)} \n      l1_step3 Ra A B gny, l2_step3 Ra A B gny \n   {>R12s}\"", "lemma l2_step4_refines_step4:\n  \"{R12s \\<inter> UNIV \\<times> (l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter> l2_inv7 \\<inter> l2_inv8)} \n      l1_step4 Rb A B gnx, l2_step4 Rb A B gnx\n   {>R12s}\"", "lemma l2_dy_fake_chan_refines_skip:\n  \"{R12s} Id, l2_dy_fake_chan M {>R12s}\"", "lemma l2_dy_fake_msg_refines_learn:\n  \"{R12s \\<inter> UNIV \\<times> (l2_inv7 \\<inter> l2_inv8)} l1_learn m, l2_dy_fake_msg m {>R12s}\"", "lemma l2_lkr_others_refines_skip:\n  \"{R12s} Id, l2_lkr_others A {>R12s}\"", "lemma l2_lkr_after_refines_skip:\n  \"{R12s} Id, l2_lkr_after A {>R12s}\"", "lemma l2_skr_refines_learn:\n  \"{R12s \\<inter> UNIV \\<times> l2_inv7 \\<inter> UNIV \\<times> l2_inv6 \\<inter> UNIV \\<times> l2_inv8} l1_learn K, l2_skr R K {>R12s}\"", "lemmas l2_trans_refines_l1_trans = \n  l2_dy_fake_msg_refines_learn l2_dy_fake_chan_refines_skip\n  l2_lkr_others_refines_skip l2_lkr_after_refines_skip l2_skr_refines_learn\n  l2_step1_refines_step1 l2_step2_refines_step2 l2_step3_refines_step3 l2_step4_refines_step4", "lemma l2_refines_init_l1 [iff]:\n  \"init l2 \\<subseteq> R12s `` (init l1)\"", "lemma l2_refines_trans_l1 [iff]:\n  \"{R12s \\<inter> (UNIV \\<times> (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter> \n                     l2_inv6 \\<inter> l2_inv7 \\<inter> l2_inv8))}\n     trans l1, trans l2\n   {> R12s}\"", "lemma PO_obs_consistent_R12s [iff]: \n  \"obs_consistent R12s med12s l1 l2\"", "lemma l2_refines_l1 [iff]:\n  \"refines \n     (R12s \\<inter> \n      (reach l1 \\<times> (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter> l2_inv5 \\<inter>\n                                                  l2_inv6 \\<inter> l2_inv7 \\<inter> l2_inv8)))\n     med12s l1 l2\"", "lemma l2_implements_l1 [iff]:\n  \"implements med12s l1 l2\"", "lemma l2_obs_partial_secrecy [iff]: \"oreach l2 \\<subseteq> l2_partial_secrecy\"", "lemma l2_oreach_dy_fake_msg:\n  \"\\<lbrakk> s \\<in> oreach l2; x \\<in> dy_fake_msg (bad s) (ik s) (chan s) \\<rbrakk>\n \\<Longrightarrow> s \\<lparr>ik := insert x (ik s)\\<rparr> \\<in> oreach l2\"", "lemma l2_obs_secrecy [iff]: \"oreach l2 \\<subseteq> l2_secrecy\"", "lemma l2_secrecy [iff]: \"reach l2 \\<subseteq> l2_secrecy\"", "lemma l2_obs_iagreement_Init [iff]: \"oreach l2 \\<subseteq> l2_iagreement_Init\"", "lemma l2_iagreement_Init [iff]: \"reach l2 \\<subseteq> l2_iagreement_Init\"", "lemma l2_obs_iagreement_Resp [iff]: \"oreach l2 \\<subseteq> l2_iagreement_Resp\"", "lemma l2_iagreement_Resp [iff]: \"reach l2 \\<subseteq> l2_iagreement_Resp\""], "translations": [["", "lemma role_comp_inv [simp]:\n  \"role_comp (role_comp x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. role_comp (role_comp x) = x", "by (cases x, auto)"], ["", "lemma role_comp_inv_eq:\n  \"y = role_comp x \\<longleftrightarrow> x = role_comp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y = role_comp x) = (x = role_comp y)", "by (auto elim!: role_comp.elims [OF sym])"], ["", "definition\n  partners :: \"rid_t set\"\nwhere\n  \"partners \\<equiv> {R. partner_runs test R}\""], ["", "lemma test_not_partner [simp]:\n  \"test \\<notin> partners\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test \\<notin> partners", "by (auto simp add: partners_def partner_runs_def, cases \"role (guessed_runs test)\", auto)"], ["", "lemma matching_symmetric:\n  \"matching sigma sigma' \\<Longrightarrow> matching sigma' sigma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matching sigma sigma' \\<Longrightarrow> matching sigma' sigma", "by (auto simp add: matching_def)"], ["", "lemma partner_symmetric:\n  \"partner_runs R R' \\<Longrightarrow> partner_runs R' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partner_runs R R' \\<Longrightarrow> partner_runs R' R", "by (auto simp add: partner_runs_def matching_symmetric)"], ["", "text \\<open>The unicity of the parther is actually protocol dependent:\nit only holds if there are generated fresh nonces (which identify the runs) in the frames.\\<close>"], ["", "lemma partner_unique:\n  \"partner_runs R R'' \\<Longrightarrow> partner_runs R R' \\<Longrightarrow> R' = R''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>partner_runs R R''; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = R''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>partner_runs R R''; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = R''", "assume H':\"partner_runs R R'\""], ["proof (state)\nthis:\n  partner_runs R R'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>partner_runs R R''; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = R''", "then"], ["proof (chain)\npicking this:\n  partner_runs R R'", "have Hm': \"matching (guessed_frame R) (guessed_frame R')\""], ["proof (prove)\nusing this:\n  partner_runs R R'\n\ngoal (1 subgoal):\n 1. matching (guessed_frame R) (guessed_frame R')", "by (auto simp add: partner_runs_def)"], ["proof (state)\nthis:\n  matching (guessed_frame R) (guessed_frame R')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>partner_runs R R''; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = R''", "assume H'':\"partner_runs R R''\""], ["proof (state)\nthis:\n  partner_runs R R''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>partner_runs R R''; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = R''", "then"], ["proof (chain)\npicking this:\n  partner_runs R R''", "have Hm'': \"matching (guessed_frame R) (guessed_frame R'')\""], ["proof (prove)\nusing this:\n  partner_runs R R''\n\ngoal (1 subgoal):\n 1. matching (guessed_frame R) (guessed_frame R'')", "by (auto simp add: partner_runs_def)"], ["proof (state)\nthis:\n  matching (guessed_frame R) (guessed_frame R'')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>partner_runs R R''; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = R''", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. R' = R''", "proof (cases \"role (guessed_runs R')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. role (guessed_runs R') = Init \\<Longrightarrow> R' = R''\n 2. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "case Init"], ["proof (state)\nthis:\n  role (guessed_runs R') = Init\n\ngoal (2 subgoals):\n 1. role (guessed_runs R') = Init \\<Longrightarrow> R' = R''\n 2. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "with H' partner_symmetric [OF H'']"], ["proof (chain)\npicking this:\n  partner_runs R R'\n  partner_runs R'' R\n  role (guessed_runs R') = Init", "have Hrole:\"role (guessed_runs R) = Resp\"\n                                                    \"role (guessed_runs R'') = Init\""], ["proof (prove)\nusing this:\n  partner_runs R R'\n  partner_runs R'' R\n  role (guessed_runs R') = Init\n\ngoal (1 subgoal):\n 1. role (guessed_runs R) = Resp &&& role (guessed_runs R'') = Init", "by (auto simp add: partner_runs_def)"], ["proof (state)\nthis:\n  role (guessed_runs R) = Resp\n  role (guessed_runs R'') = Init\n\ngoal (2 subgoals):\n 1. role (guessed_runs R') = Init \\<Longrightarrow> R' = R''\n 2. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "with Init Hm'"], ["proof (chain)\npicking this:\n  role (guessed_runs R') = Init\n  matching (guessed_frame R) (guessed_frame R')\n  role (guessed_runs R) = Resp\n  role (guessed_runs R'') = Init", "have \"guessed_frame R xgnx = Some (Exp Gen (NonceF (R'$nx)))\""], ["proof (prove)\nusing this:\n  role (guessed_runs R') = Init\n  matching (guessed_frame R) (guessed_frame R')\n  role (guessed_runs R) = Resp\n  role (guessed_runs R'') = Init\n\ngoal (1 subgoal):\n 1. guessed_frame R xgnx = Some (Exp Gen (NonceF (R' $ nx)))", "by (simp add: matching_def)"], ["proof (state)\nthis:\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R' $ nx)))\n\ngoal (2 subgoals):\n 1. role (guessed_runs R') = Init \\<Longrightarrow> R' = R''\n 2. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "moreover"], ["proof (state)\nthis:\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R' $ nx)))\n\ngoal (2 subgoals):\n 1. role (guessed_runs R') = Init \\<Longrightarrow> R' = R''\n 2. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "from Hrole Hm''"], ["proof (chain)\npicking this:\n  role (guessed_runs R) = Resp\n  role (guessed_runs R'') = Init\n  matching (guessed_frame R) (guessed_frame R'')", "have \"guessed_frame R xgnx = Some (Exp Gen (NonceF (R''$nx)))\""], ["proof (prove)\nusing this:\n  role (guessed_runs R) = Resp\n  role (guessed_runs R'') = Init\n  matching (guessed_frame R) (guessed_frame R'')\n\ngoal (1 subgoal):\n 1. guessed_frame R xgnx = Some (Exp Gen (NonceF (R'' $ nx)))", "by (simp add: matching_def)"], ["proof (state)\nthis:\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R'' $ nx)))\n\ngoal (2 subgoals):\n 1. role (guessed_runs R') = Init \\<Longrightarrow> R' = R''\n 2. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "ultimately"], ["proof (chain)\npicking this:\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R' $ nx)))\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R'' $ nx)))", "show ?thesis"], ["proof (prove)\nusing this:\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R' $ nx)))\n  guessed_frame R xgnx = Some (Exp Gen (NonceF (R'' $ nx)))\n\ngoal (1 subgoal):\n 1. R' = R''", "by (auto dest: Exp_Gen_inj)"], ["proof (state)\nthis:\n  R' = R''\n\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "case Resp"], ["proof (state)\nthis:\n  role (guessed_runs R') = Resp\n\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "with H' partner_symmetric [OF H'']"], ["proof (chain)\npicking this:\n  partner_runs R R'\n  partner_runs R'' R\n  role (guessed_runs R') = Resp", "have Hrole:\"role (guessed_runs R) = Init\"\n                                                    \"role (guessed_runs R'') = Resp\""], ["proof (prove)\nusing this:\n  partner_runs R R'\n  partner_runs R'' R\n  role (guessed_runs R') = Resp\n\ngoal (1 subgoal):\n 1. role (guessed_runs R) = Init &&& role (guessed_runs R'') = Resp", "by (auto simp add: partner_runs_def)"], ["proof (state)\nthis:\n  role (guessed_runs R) = Init\n  role (guessed_runs R'') = Resp\n\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "with Resp Hm'"], ["proof (chain)\npicking this:\n  role (guessed_runs R') = Resp\n  matching (guessed_frame R) (guessed_frame R')\n  role (guessed_runs R) = Init\n  role (guessed_runs R'') = Resp", "have \"guessed_frame R xgny = Some (Exp Gen (NonceF (R'$ny)))\""], ["proof (prove)\nusing this:\n  role (guessed_runs R') = Resp\n  matching (guessed_frame R) (guessed_frame R')\n  role (guessed_runs R) = Init\n  role (guessed_runs R'') = Resp\n\ngoal (1 subgoal):\n 1. guessed_frame R xgny = Some (Exp Gen (NonceF (R' $ ny)))", "by (simp add: matching_def)"], ["proof (state)\nthis:\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R' $ ny)))\n\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "moreover"], ["proof (state)\nthis:\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R' $ ny)))\n\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "from Hrole Hm''"], ["proof (chain)\npicking this:\n  role (guessed_runs R) = Init\n  role (guessed_runs R'') = Resp\n  matching (guessed_frame R) (guessed_frame R'')", "have \"guessed_frame R xgny = Some (Exp Gen (NonceF (R''$ny)))\""], ["proof (prove)\nusing this:\n  role (guessed_runs R) = Init\n  role (guessed_runs R'') = Resp\n  matching (guessed_frame R) (guessed_frame R'')\n\ngoal (1 subgoal):\n 1. guessed_frame R xgny = Some (Exp Gen (NonceF (R'' $ ny)))", "by (simp add: matching_def)"], ["proof (state)\nthis:\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R'' $ ny)))\n\ngoal (1 subgoal):\n 1. role (guessed_runs R') = Resp \\<Longrightarrow> R' = R''", "ultimately"], ["proof (chain)\npicking this:\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R' $ ny)))\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R'' $ ny)))", "show ?thesis"], ["proof (prove)\nusing this:\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R' $ ny)))\n  guessed_frame R xgny = Some (Exp Gen (NonceF (R'' $ ny)))\n\ngoal (1 subgoal):\n 1. R' = R''", "by (auto dest: Exp_Gen_inj)"], ["proof (state)\nthis:\n  R' = R''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R' = R''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma partner_test:\n  \"R \\<in> partners \\<Longrightarrow> partner_runs R R' \\<Longrightarrow> R' = test\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R \\<in> partners; partner_runs R R'\\<rbrakk>\n    \\<Longrightarrow> R' = test", "by (auto intro!:partner_unique simp add:partners_def partner_symmetric)"], ["", "text \\<open>Compromising events.\\<close>"], ["", "definition\n  l2_lkr_others :: \"agent \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_lkr_others A \\<equiv> {(s,s').\n    \\<comment> \\<open>guards\\<close>\n    A \\<noteq> test_owner \\<and>\n    A \\<noteq> test_partner \\<and>\n    \\<comment> \\<open>actions\\<close>\n    s' = s\\<lparr>bad := {A} \\<union> bad s\\<rparr>\n  }\""], ["", "definition\n  l2_lkr_actor :: \"agent \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_lkr_actor A \\<equiv> {(s,s').\n    \\<comment> \\<open>guards\\<close>\n    A = test_owner \\<and>\n    A \\<noteq> test_partner \\<and>\n    \\<comment> \\<open>actions\\<close>\n    s' = s\\<lparr>bad := {A} \\<union> bad s\\<rparr>\n  }\""], ["", "definition\n  l2_lkr_after :: \"agent \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_lkr_after A \\<equiv> {(s,s').\n    \\<comment> \\<open>guards\\<close>\n    test_ended s \\<and>\n    \\<comment> \\<open>actions\\<close>\n    s' = s\\<lparr>bad := {A} \\<union> bad s\\<rparr>\n  }\""], ["", "definition\n  l2_skr :: \"rid_t \\<Rightarrow> msg \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_skr R K \\<equiv> {(s,s').\n    \\<comment> \\<open>guards\\<close>\n    R \\<noteq> test \\<and> R \\<notin> partners \\<and>\n    in_progress (progress s R) xsk \\<and>\n    guessed_frame R xsk = Some K \\<and>\n    \\<comment> \\<open>actions\\<close>\n    s' = s\\<lparr>ik := {K} \\<union> ik s\\<rparr>\n  }\""], ["", "text \\<open>Protocol events:\n\\begin{itemize}\n  \\item step 1: create @{term \"Ra\"}, @{term \"A\"} generates @{term \"nx\"},\n    computes and insecurely sends $@{term \"g\"}^@{term \"nx\"}$\n  \\item step 2: create @{term \"Rb\"}, @{term \"B\"} receives $@{term \"g\"}^@{term \"nx\"}$ insecurely,\n    generates @{term \"ny\"}, computes $@{term \"g\"}^@{term \"ny\"}$,\n    authentically sends $(@{term \"g\"}^@{term \"ny\"}, @{term \"g\"}^@{term \"nx\"})$,\n    computes $@{term \"g\"}^@{term \"nx*ny\"}$,\n    emits a running signal for @{term \"Init\"}, $@{term \"g\"}^@{term \"nx*ny\"}$\n  \\item step 3: @{term \"A\"} receives $@{term \"g\"}^@{term \"ny\"}$ and $@{term \"g\"}^@{term \"nx\"}$\n    authentically,\n    sends $(@{term \"g\"}^@{term \"nx\"}, @{term \"g\"}^@{term \"ny\"})$ authentically,\n    computes $@{term \"g\"}^@{term \"ny*nx\"}$, emits a commit signal for @{term \"Init\"},\n    $@{term \"g\"}^@{term \"ny*nx\"}$, a running signal for @{term \"Resp\"}, $@{term \"g\"}^@{term \"ny*nx\"}$,\n    declares the secret $@{term \"g\"}^@{term \"ny*nx\"}$\n  \\item step 4: @{term \"B\"} receives $@{term \"g\"}^@{term \"nx\"}$ and $@{term \"g\"}^@{term \"ny\"}$\n    authentically,\n    emits a commit signal for @{term \"Resp\"}, $@{term \"g\"}^@{term \"nx*ny\"}$,\n    declares the secret $@{term \"g\"}^@{term \"nx*ny\"}$\n\\end{itemize}\n\\<close>"], ["", "definition\n    l2_step1 :: \"rid_t \\<Rightarrow> agent \\<Rightarrow> agent \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_step1 Ra A B \\<equiv> {(s, s').\n    \\<comment> \\<open>guards:\\<close>\n    Ra \\<notin> dom (progress s) \\<and>\n    guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<and>\n    \\<comment> \\<open>actions:\\<close>\n    s' = s\\<lparr>\n      progress := (progress s)(Ra \\<mapsto> {xnx, xgnx}),\n      chan := {Insec A B (Exp Gen (NonceF (Ra$nx)))} \\<union> (chan s)\n    \\<rparr>\n  }\""], ["", "definition\n  l2_step2 :: \"rid_t \\<Rightarrow> agent \\<Rightarrow> agent \\<Rightarrow> msg \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_step2 Rb A B gnx \\<equiv> {(s, s').\n    \\<comment> \\<open>guards:\\<close>\n    guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<and>\n    Rb \\<notin> dom (progress s) \\<and>\n    guessed_frame Rb xgnx = Some gnx \\<and>\n    guessed_frame Rb xsk = Some (Exp gnx (NonceF (Rb$ny))) \\<and>\n    Insec A B gnx \\<in> chan s \\<and>\n    \\<comment> \\<open>actions:\\<close>\n    s' = s\\<lparr> progress := (progress s)(Rb \\<mapsto> {xny, xgny, xgnx, xsk}),\n            chan := {Auth B A \\<langle>Number 0, Exp Gen (NonceF (Rb$ny)), gnx\\<rangle>} \\<union> (chan s),\n            signalsInit := if can_signal s A B then\n                          addSignal (signalsInit s) (Running A B (Exp gnx (NonceF (Rb$ny))))\n                       else\n                          signalsInit s\n         \\<rparr>\n  }\""], ["", "definition\n  l2_step3 :: \"rid_t \\<Rightarrow> agent \\<Rightarrow> agent \\<Rightarrow> msg \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_step3 Ra A B gny \\<equiv> {(s, s').\n    \\<comment> \\<open>guards:\\<close>\n    guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<and>\n    progress s Ra = Some {xnx, xgnx} \\<and>\n    guessed_frame Ra xgny = Some gny \\<and>\n    guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra$nx))) \\<and>\n    Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra$nx))\\<rangle> \\<in> chan s \\<and>\n    \\<comment> \\<open>actions:\\<close>\n    s' = s\\<lparr> progress := (progress s)(Ra \\<mapsto> {xnx, xgnx, xgny, xsk, xEnd}),\n            chan := {Auth A B \\<langle>Number 1, Exp Gen (NonceF (Ra$nx)), gny\\<rangle>} \\<union> chan s,\n            secret := {x. x = Exp gny (NonceF (Ra$nx)) \\<and> Ra = test} \\<union> secret s,\n            signalsInit := if can_signal s A B then\n                         addSignal (signalsInit s) (Commit A B (Exp gny (NonceF (Ra$nx))))\n                       else\n                         signalsInit s,\n            signalsResp := if can_signal s A B then\n                         addSignal (signalsResp s) (Running A B (Exp gny (NonceF (Ra$nx))))\n                       else\n                         signalsResp s\n          \\<rparr>\n  }\""], ["", "definition\n  l2_step4 :: \"rid_t \\<Rightarrow> agent \\<Rightarrow> agent \\<Rightarrow> msg \\<Rightarrow> l2_trans\"\nwhere\n  \"l2_step4 Rb A B gnx \\<equiv> {(s, s').\n    \\<comment> \\<open>guards:\\<close>\n    guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<and>\n    progress s Rb = Some {xny, xgnx, xgny, xsk} \\<and>\n    guessed_frame Rb xgnx = Some gnx \\<and>\n    Auth A B \\<langle>Number 1, gnx, Exp Gen (NonceF (Rb$ny))\\<rangle> \\<in> chan s \\<and>\n\n    \\<comment> \\<open>actions:\\<close>\n    s' = s\\<lparr> progress := (progress s)(Rb \\<mapsto> {xny, xgnx, xgny, xsk, xEnd}),\n            secret := {x. x = Exp gnx (NonceF (Rb$ny)) \\<and> Rb = test} \\<union> secret s,\n            signalsResp := if can_signal s A B then\n                             addSignal (signalsResp s) (Commit A B (Exp gnx (NonceF (Rb$ny))))\n                           else\n                             signalsResp s\n          \\<rparr>\n  }\""], ["", "text \\<open>Specification.\\<close>"], ["", "definition \n  l2_init :: \"l2_state set\"\nwhere\n  \"l2_init \\<equiv> { \\<lparr>\n    ik = {},\n    secret = {},\n    progress = Map.empty,\n    signalsInit = \\<lambda>x. 0,\n    signalsResp = \\<lambda>x. 0,\n    chan = {},\n    bad = bad_init\n    \\<rparr>}\""], ["", "definition \n  l2_trans :: \"l2_trans\" where\n  \"l2_trans \\<equiv> (\\<Union>m M X Rb Ra A B K.\n     l2_step1 Ra A B \\<union>\n     l2_step2 Rb A B X \\<union>\n     l2_step3 Ra A B X \\<union>\n     l2_step4 Rb A B X \\<union>\n     l2_dy_fake_chan M \\<union>\n     l2_dy_fake_msg m \\<union>\n     l2_lkr_others A \\<union>\n     l2_lkr_after A \\<union>\n     l2_skr Ra K \\<union>\n     Id \n  )\""], ["", "definition \n  l2 :: \"(l2_state, l2_obs) spec\" where\n  \"l2 \\<equiv> \\<lparr>\n    init = l2_init,\n    trans = l2_trans,\n    obs = id\n  \\<rparr>\""], ["", "lemmas l2_loc_defs = \n  l2_step1_def l2_step2_def l2_step3_def l2_step4_def\n  l2_def l2_init_def l2_trans_def\n  l2_dy_fake_chan_def l2_dy_fake_msg_def\n  l2_lkr_after_def l2_lkr_others_def l2_skr_def"], ["", "lemmas l2_defs = l2_loc_defs ik_dy_def"], ["", "lemmas l2_nostep_defs = l2_def l2_init_def l2_trans_def"], ["", "lemma l2_obs_id [simp]: \"obs l2 = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs l2 = id", "by (simp add: l2_def)"], ["", "text \\<open>Once a run is finished, it stays finished, therefore if the test is not finished at some\npoint then it was not finished before either.\\<close>"], ["", "declare domIff [iff]"], ["", "lemma l2_run_ended_trans:\n  \"run_ended (progress s R) \\<Longrightarrow>\n   (s, s') \\<in> trans l2 \\<Longrightarrow>\n   run_ended (progress s' R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>run_ended (progress s R); (s, s') \\<in> TS.trans l2\\<rbrakk>\n    \\<Longrightarrow> run_ended (progress s' R)", "apply (auto simp add: l2_nostep_defs)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>xd xe xf.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_step1 xd xe xf\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 2. \\<And>xb xc xe xf.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_step2 xc xe xf xb\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 3. \\<And>xb xd xe xf.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_step3 xd xe xf xb\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 4. \\<And>xb xc xe xf.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_step4 xc xe xf xb\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 5. \\<And>xa.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_dy_fake_chan xa\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 6. \\<And>x.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_dy_fake_msg x\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 7. \\<And>xe.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_lkr_others xe\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 8. \\<And>xe.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_lkr_after xe\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)\n 9. \\<And>xd xe.\n       \\<lbrakk>run_ended (progress s R);\n        (s, s') \\<in> l2_skr xd xe\\<rbrakk>\n       \\<Longrightarrow> run_ended (progress s' R)", "apply (auto simp add: l2_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare domIff [iff del]"], ["", "lemma l2_can_signal_trans:\n  \"can_signal s' A B \\<Longrightarrow>\n  (s, s') \\<in> trans l2 \\<Longrightarrow>\n  can_signal s A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>can_signal s' A B; (s, s') \\<in> TS.trans l2\\<rbrakk>\n    \\<Longrightarrow> can_signal s A B", "by (auto simp add: can_signal_def l2_run_ended_trans)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Invariants\\<close>"], ["", "(**************************************************************************************************)"], ["", "subsubsection \\<open>inv1\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If @{term \"can_signal s A B\"}\n(i.e., @{term \"A\"}, @{term \"B\"} are the test session agents and the test is not finished),\nthen A and B are honest.\\<close>"], ["", "definition\n  l2_inv1 :: \"l2_state set\"\nwhere\n  \"l2_inv1 \\<equiv> {s. \\<forall>A B.\n    can_signal s A B \\<longrightarrow>\n    A \\<notin> bad s \\<and> B \\<notin> bad s\n  }\""], ["", "lemmas l2_inv1I = l2_inv1_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv1E [elim] = l2_inv1_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv1D = l2_inv1_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv1_init [iff]:\n  \"init l2 \\<subseteq> l2_inv1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv1", "by (auto simp add: l2_def l2_init_def l2_inv1_def can_signal_def bad_init_spec)"], ["", "lemma l2_inv1_trans [iff]:\n  \"{l2_inv1} trans l2 {> l2_inv1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv1} TS.trans l2 {> l2_inv1}", "proof (auto simp add: PO_hoare_defs intro!: l2_inv1I  del: conjI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "fix s' s :: l2_state"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "fix A B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "assume HI:\"s \\<in> l2_inv1\""], ["proof (state)\nthis:\n  s \\<in> l2_inv1\n\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "assume HT:\"(s, s') \\<in> trans l2\""], ["proof (state)\nthis:\n  (s, s') \\<in> TS.trans l2\n\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "assume \"can_signal s' A B\""], ["proof (state)\nthis:\n  can_signal s' A B\n\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "with HT"], ["proof (chain)\npicking this:\n  (s, s') \\<in> TS.trans l2\n  can_signal s' A B", "have HS:\"can_signal s A B\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> TS.trans l2\n  can_signal s' A B\n\ngoal (1 subgoal):\n 1. can_signal s A B", "by (auto simp add: l2_can_signal_trans)"], ["proof (state)\nthis:\n  can_signal s A B\n\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "with HI"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  can_signal s A B", "have \"A \\<notin> bad s \\<and> B \\<notin> bad s\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  can_signal s A B\n\ngoal (1 subgoal):\n 1. A \\<notin> bad s \\<and> B \\<notin> bad s", "by fast"], ["proof (state)\nthis:\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n\ngoal (1 subgoal):\n 1. \\<And>x A B xa.\n       \\<lbrakk>can_signal x A B; xa \\<in> l2_inv1;\n        (xa, x) \\<in> TS.trans l2\\<rbrakk>\n       \\<Longrightarrow> A \\<notin> bad x \\<and> B \\<notin> bad x", "with HS HT"], ["proof (chain)\npicking this:\n  can_signal s A B\n  (s, s') \\<in> TS.trans l2\n  A \\<notin> bad s \\<and> B \\<notin> bad s", "show \"A \\<notin> bad s' \\<and> B \\<notin> bad s'\""], ["proof (prove)\nusing this:\n  can_signal s A B\n  (s, s') \\<in> TS.trans l2\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n\ngoal (1 subgoal):\n 1. A \\<notin> bad s' \\<and> B \\<notin> bad s'", "by (auto simp add: l2_nostep_defs can_signal_def)\n       (simp_all add: l2_defs)"], ["proof (state)\nthis:\n  A \\<notin> bad s' \\<and> B \\<notin> bad s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PO_l2_inv1 [iff]: \"reach l2 \\<subseteq> l2_inv1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv1", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv2 (authentication guard)\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If @{term \"Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra$nx))\\<rangle> \\<in> chan s\"} and @{term \"A\"},\n  @{term \"B\"} are honest then the message has indeed been sent by a responder run (etc).\\<close>"], ["", "definition\n  l2_inv2 :: \"l2_state set\"\nwhere\n  \"l2_inv2 \\<equiv> {s. \\<forall> Ra A B gny.\n    Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra$nx))\\<rangle> \\<in> chan s  \\<longrightarrow>\n    A \\<notin> bad s \\<and> B \\<notin> bad s \\<longrightarrow>\n    (\\<exists> Rb. guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<and>\n           in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n           gny = Exp Gen (NonceF (Rb$ny)) \\<and>\n           guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra$nx))))\n  }\""], ["", "lemmas l2_inv2I = l2_inv2_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv2E [elim] = l2_inv2_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv2D = l2_inv2_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv2_init [iff]:\n  \"init l2 \\<subseteq> l2_inv2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv2", "by (auto simp add: l2_def l2_init_def l2_inv2_def)"], ["", "lemma l2_inv2_trans [iff]:\n  \"{l2_inv2} trans l2 {> l2_inv2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv2} TS.trans l2 {> l2_inv2}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv2I)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x Ra A B gny xa xf xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 2. \\<And>x Ra A B gny xa xd xe xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step2 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 3. \\<And>x Ra A B gny xa xd xf xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step3 xf xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 4. \\<And>x Ra A B gny xa xd xe xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step4 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 5. \\<And>x Ra A B gny xa xc.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_dy_fake_chan xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 6. \\<And>x Ra A B gny xa xb.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_dy_fake_msg xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 7. \\<And>x Ra A B gny xa xg.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_lkr_others xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 8. \\<And>x Ra A B gny xa xg.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_lkr_after xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 9. \\<And>x Ra A B gny xa xf xg.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv2; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_skr xf xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress x Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))", "apply (auto simp add: l2_defs dy_fake_chan_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Ra A B gny xa xf xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv2; A \\<notin> bad xa; B \\<notin> bad xa;\n        xf \\<notin> dom (progress xa);\n        guessed_runs xf =\n        \\<lparr>role = Init, owner = xg, partner = xh\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xf \\<and>\n                            (Rb \\<noteq> xf \\<longrightarrow>\n                             guessed_runs Rb =\n                             \\<lparr>role = Resp, owner = B,\n                                partner = A\\<rparr> \\<and>\n                             in_progressS (progress xa Rb)\n                              {xny, xgnx, xgny, xsk} \\<and>\n                             gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                             guessed_frame Rb xgnx =\n                             Some (Exp Gen (NonceF (Ra $ nx))))\n 2. \\<And>Ra A B gny xa xd xe xg xh.\n       \\<lbrakk>xa \\<in> l2_inv2; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xe =\n        \\<lparr>role = Resp, owner = xh, partner = xg\\<rparr>;\n        xe \\<notin> dom (progress xa); guessed_frame xe xgnx = Some xd;\n        guessed_frame xe xsk = Some (Exp xd (NonceF (xe $ ny)));\n        Insec xg xh xd \\<in> chan xa;\n        Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            (Rb = xe \\<longrightarrow>\n                             xh = B \\<and>\n                             xg = A \\<and>\n                             gny = Exp Gen (NonceF (xe $ ny)) \\<and>\n                             xd = Exp Gen (NonceF (Ra $ nx))) \\<and>\n                            (Rb \\<noteq> xe \\<longrightarrow>\n                             guessed_runs Rb =\n                             \\<lparr>role = Resp, owner = B,\n                                partner = A\\<rparr> \\<and>\n                             in_progressS (progress xa Rb)\n                              {xny, xgnx, xgny, xsk} \\<and>\n                             gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                             guessed_frame Rb xgnx =\n                             Some (Exp Gen (NonceF (Ra $ nx))))\n 3. \\<And>Ra A B gny xa xd xf xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv2; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xf =\n        \\<lparr>role = Init, owner = xg, partner = xh\\<rparr>;\n        progress xa xf = Some {xnx, xgnx}; guessed_frame xf xgny = Some xd;\n        guessed_frame xf xsk = Some (Exp xd (NonceF (xf $ nx)));\n        Auth xh xg\n         \\<langle>Number 0, xd, Exp Gen (NonceF (xf $ nx))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xf \\<and>\n                            (Rb \\<noteq> xf \\<longrightarrow>\n                             guessed_runs Rb =\n                             \\<lparr>role = Resp, owner = B,\n                                partner = A\\<rparr> \\<and>\n                             in_progressS (progress xa Rb)\n                              {xny, xgnx, xgny, xsk} \\<and>\n                             gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                             guessed_frame Rb xgnx =\n                             Some (Exp Gen (NonceF (Ra $ nx))))\n 4. \\<And>Ra A B gny xa xd xe xg xh.\n       \\<lbrakk>Auth B A\n                 \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv2; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xe =\n        \\<lparr>role = Resp, owner = xh, partner = xg\\<rparr>;\n        progress xa xe = Some {xny, xgnx, xgny, xsk};\n        guessed_frame xe xgnx = Some xd;\n        Auth xg xh\n         \\<langle>Number (Suc 0), xd, Exp Gen (NonceF (xe $ ny))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            (Rb = xe \\<longrightarrow>\n                             xh = B \\<and>\n                             xg = A \\<and>\n                             gny = Exp Gen (NonceF (xe $ ny)) \\<and>\n                             xd = Exp Gen (NonceF (Ra $ nx))) \\<and>\n                            (Rb \\<noteq> xe \\<longrightarrow>\n                             guessed_runs Rb =\n                             \\<lparr>role = Resp, owner = B,\n                                partner = A\\<rparr> \\<and>\n                             in_progressS (progress xa Rb)\n                              {xny, xgnx, xgny, xsk} \\<and>\n                             gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                             guessed_frame Rb xgnx =\n                             Some (Exp Gen (NonceF (Ra $ nx))))\n 5. \\<And>Ra A B gny xa.\n       \\<lbrakk>xa \\<in> l2_inv2; A \\<notin> bad xa; B \\<notin> bad xa;\n        Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> fake (bad xa) (dy_fake_msg (bad xa) (ik xa) (chan xa))\n               (chan xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (progress xa Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n                            guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv2 [iff]: \"reach l2 \\<subseteq> l2_inv2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv2", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv3 (authentication guard)\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If \\<open>Auth A B \\<langle>Number 1, gnx, Exp Gen (NonceF (Rb$ny))\\<rangle> \\<in> chan s\\<close> and @{term \"A\"},\n  @{term \"B\"} are honest\n  then the message has indeed been sent by an initiator run (etc).\\<close>"], ["", "definition\n  l2_inv3 :: \"l2_state set\"\nwhere\n  \"l2_inv3 \\<equiv> {s. \\<forall> Rb A B gnx.\n     Auth A B \\<langle>Number 1, gnx, Exp Gen (NonceF (Rb$ny))\\<rangle> \\<in> chan s \\<longrightarrow>\n     A \\<notin> bad s \\<and> B \\<notin> bad s \\<longrightarrow>\n       (\\<exists> Ra. guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<and>\n              in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n              guessed_frame Ra xgnx = Some gnx \\<and>\n              guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb$ny))))\n    }\""], ["", "lemmas l2_inv3I = l2_inv3_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv3E [elim] = l2_inv3_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv3D = l2_inv3_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv3_init [iff]:\n  \"init l2 \\<subseteq> l2_inv3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv3", "by (auto simp add: l2_def l2_init_def l2_inv3_def)"], ["", "lemma l2_inv3_trans [iff]:\n  \"{l2_inv3} trans l2 {> l2_inv3}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv3} TS.trans l2 {> l2_inv3}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv3I)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x Rb A B gnx xa xf xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 2. \\<And>x Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step2 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 3. \\<And>x Rb A B gnx xa xd xf xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step3 xf xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 4. \\<And>x Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_step4 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 5. \\<And>x Rb A B gnx xa xc.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_dy_fake_chan xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 6. \\<And>x Rb A B gnx xa xb.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_dy_fake_msg xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 7. \\<And>x Rb A B gnx xa xg.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_lkr_others xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 8. \\<And>x Rb A B gnx xa xg.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_lkr_after xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 9. \\<And>x Rb A B gnx xa xf xg.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan x;\n        xa \\<in> l2_inv3; A \\<notin> bad x; B \\<notin> bad x;\n        (xa, x) \\<in> l2_skr xf xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress x Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))", "apply (auto simp add: l2_defs dy_fake_chan_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Rb A B gnx xa xf xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        xf \\<notin> dom (progress xa);\n        guessed_runs xf =\n        \\<lparr>role = Init, owner = xg, partner = xh\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            Ra \\<noteq> xf \\<and>\n                            (Ra \\<noteq> xf \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 2. \\<And>Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xe =\n        \\<lparr>role = Resp, owner = xh, partner = xg\\<rparr>;\n        xe \\<notin> dom (progress xa); guessed_frame xe xgnx = Some xd;\n        guessed_frame xe xsk = Some (Exp xd (NonceF (xe $ ny)));\n        Insec xg xh xd \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            Ra \\<noteq> xe \\<and>\n                            (Ra \\<noteq> xe \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 3. \\<And>Rb A B gnx xa xd xf xg xh.\n       \\<lbrakk>xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xf =\n        \\<lparr>role = Init, owner = xg, partner = xh\\<rparr>;\n        progress xa xf = Some {xnx, xgnx}; guessed_frame xf xgny = Some xd;\n        guessed_frame xf xsk = Some (Exp xd (NonceF (xf $ nx)));\n        Auth xh xg\n         \\<langle>Number 0, xd, Exp Gen (NonceF (xf $ nx))\\<rangle>\n        \\<in> chan xa;\n        Auth A B\n         \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            (Ra = xf \\<longrightarrow>\n                             xg = A \\<and>\n                             xh = B \\<and>\n                             Exp Gen (NonceF (xf $ nx)) = gnx \\<and>\n                             xd = Exp Gen (NonceF (Rb $ ny))) \\<and>\n                            (Ra \\<noteq> xf \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 4. \\<And>Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xe =\n        \\<lparr>role = Resp, owner = xh, partner = xg\\<rparr>;\n        progress xa xe = Some {xny, xgnx, xgny, xsk};\n        guessed_frame xe xgnx = Some xd;\n        Auth xg xh\n         \\<langle>Number (Suc 0), xd, Exp Gen (NonceF (xe $ ny))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            Ra \\<noteq> xe \\<and>\n                            (Ra \\<noteq> xe \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 5. \\<And>Rb A B gnx xa.\n       \\<lbrakk>xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        Auth A B\n         \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n        \\<in> fake (bad xa) (dy_fake_msg (bad xa) (ik xa) (chan xa))\n               (chan xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress xa Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))", "apply (simp_all add: domIff insert_ident)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Rb A B gnx xa xf xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        progress xa xf = None;\n        guessed_runs xf =\n        \\<lparr>role = Init, owner = xg, partner = xh\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            Ra \\<noteq> xf \\<and>\n                            (Ra \\<noteq> xf \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 2. \\<And>Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xe =\n        \\<lparr>role = Resp, owner = xh, partner = xg\\<rparr>;\n        progress xa xe = None; guessed_frame xe xgnx = Some xd;\n        guessed_frame xe xsk = Some (Exp xd (NonceF (xe $ ny)));\n        Insec xg xh xd \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            Ra \\<noteq> xe \\<and>\n                            (Ra \\<noteq> xe \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 3. \\<And>Rb A B gnx xa xd xf xg xh.\n       \\<lbrakk>xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xf =\n        \\<lparr>role = Init, owner = xg, partner = xh\\<rparr>;\n        progress xa xf = Some {xnx, xgnx}; guessed_frame xf xgny = Some xd;\n        guessed_frame xf xsk = Some (Exp xd (NonceF (xf $ nx)));\n        Auth xh xg\n         \\<langle>Number 0, xd, Exp Gen (NonceF (xf $ nx))\\<rangle>\n        \\<in> chan xa;\n        Auth A B\n         \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            (Ra = xf \\<longrightarrow>\n                             xg = A \\<and>\n                             xh = B \\<and>\n                             Exp Gen (NonceF (xf $ nx)) = gnx \\<and>\n                             xd = Exp Gen (NonceF (Rb $ ny))) \\<and>\n                            (Ra \\<noteq> xf \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 4. \\<And>Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>Auth A B\n                 \\<langle>Number (Suc 0), gnx,\n                   Exp Gen (NonceF (Rb $ ny))\\<rangle>\n                \\<in> chan xa;\n        xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        guessed_runs xe =\n        \\<lparr>role = Resp, owner = xh, partner = xg\\<rparr>;\n        progress xa xe = Some {xny, xgnx, xgny, xsk};\n        guessed_frame xe xgnx = Some xd;\n        Auth xg xh\n         \\<langle>Number (Suc 0), xd, Exp Gen (NonceF (xe $ ny))\\<rangle>\n        \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            Ra \\<noteq> xe \\<and>\n                            (Ra \\<noteq> xe \\<longrightarrow>\n                             guessed_runs Ra =\n                             \\<lparr>role = Init, owner = A,\n                                partner = B\\<rparr> \\<and>\n                             in_progressS (progress xa Ra)\n                              {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                             guessed_frame Ra xgnx = Some gnx \\<and>\n                             guessed_frame Ra xgny =\n                             Some (Exp Gen (NonceF (Rb $ ny))))\n 5. \\<And>Rb A B gnx xa.\n       \\<lbrakk>xa \\<in> l2_inv3; A \\<notin> bad xa; B \\<notin> bad xa;\n        Auth A B\n         \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n        \\<in> fake (bad xa) (dy_fake_msg (bad xa) (ik xa) (chan xa))\n               (chan xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (progress xa Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            guessed_frame Ra xgnx = Some gnx \\<and>\n                            guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv3 [iff]: \"reach l2 \\<subseteq> l2_inv3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv3", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv4\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>For an initiator, the session key is always \\<open>gny^nx\\<close>.\\<close>"], ["", "definition\n  l2_inv4 :: \"l2_state set\"\nwhere\n  \"l2_inv4 \\<equiv> {s. \\<forall>Ra A B gny.\n    guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<longrightarrow>\n    in_progress (progress s Ra) xsk \\<longrightarrow>\n    guessed_frame Ra xgny = Some gny \\<longrightarrow>\n    guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra$nx)))\n  }\""], ["", "lemmas l2_inv4I = l2_inv4_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv4E [elim] = l2_inv4_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv4D = l2_inv4_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv4_init [iff]:\n  \"init l2 \\<subseteq> l2_inv4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv4", "by (auto simp add: l2_def l2_init_def l2_inv4_def)"], ["", "lemma l2_inv4_trans [iff]:\n  \"{l2_inv4} trans l2 {> l2_inv4}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv4} TS.trans l2 {> l2_inv4}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv4I)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x Ra A B gny xa xf xg xh.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 2. \\<And>x Ra A B gny xa xd xe xg xh.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_step2 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 3. \\<And>x Ra A B gny xa xd xf xg xh.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_step3 xf xg xh xd\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 4. \\<And>x Ra A B gny xa xd xe xg xh.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_step4 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 5. \\<And>x Ra A B gny xa xc.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_dy_fake_chan xc\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 6. \\<And>x Ra A B gny xa xb.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_dy_fake_msg xb\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 7. \\<And>x Ra A B gny xa xg.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_lkr_others xg\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 8. \\<And>x Ra A B gny xa xg.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_lkr_after xg\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 9. \\<And>x Ra A B gny xa xf xg.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progress (progress x Ra) xsk; guessed_frame Ra xgny = Some gny;\n        xa \\<in> l2_inv4; (xa, x) \\<in> l2_skr xf xg\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))", "apply (auto simp add: l2_defs dy_fake_chan_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv4 [iff]: \"reach l2 \\<subseteq> l2_inv4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv4", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv4'\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>For a responder, the session key is always \\<open>gnx^ny\\<close>.\\<close>"], ["", "definition\n  l2_inv4' :: \"l2_state set\"\nwhere\n  \"l2_inv4' \\<equiv> {s. \\<forall>Rb A B gnx.\n    guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<longrightarrow>\n    in_progress (progress s Rb) xsk \\<longrightarrow>\n    guessed_frame Rb xgnx = Some gnx \\<longrightarrow>\n    guessed_frame Rb xsk = Some (Exp gnx (NonceF (Rb$ny)))\n  }\""], ["", "lemmas l2_inv4'I = l2_inv4'_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv4'E [elim] = l2_inv4'_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv4'D = l2_inv4'_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv4'_init [iff]:\n  \"init l2 \\<subseteq> l2_inv4'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv4'", "by (auto simp add: l2_def l2_init_def l2_inv4'_def)"], ["", "lemma l2_inv4'_trans [iff]:\n  \"{l2_inv4'} trans l2 {> l2_inv4'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv4'} TS.trans l2 {> l2_inv4'}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv4'I)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x Rb A B gnx xa xf xg xh.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 2. \\<And>x Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_step2 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 3. \\<And>x Rb A B gnx xa xd xf xg xh.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_step3 xf xg xh xd\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 4. \\<And>x Rb A B gnx xa xd xe xg xh.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_step4 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 5. \\<And>x Rb A B gnx xa xc.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_dy_fake_chan xc\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 6. \\<And>x Rb A B gnx xa xb.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_dy_fake_msg xb\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 7. \\<And>x Rb A B gnx xa xg.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_lkr_others xg\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 8. \\<And>x Rb A B gnx xa xg.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_lkr_after xg\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))\n 9. \\<And>x Rb A B gnx xa xf xg.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progress (progress x Rb) xsk; guessed_frame Rb xgnx = Some gnx;\n        xa \\<in> l2_inv4'; (xa, x) \\<in> l2_skr xf xg\\<rbrakk>\n       \\<Longrightarrow> guessed_frame Rb xsk =\n                         Some (Exp gnx (NonceF (Rb $ ny)))", "apply (auto simp add: l2_defs dy_fake_chan_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv4' [iff]: \"reach l2 \\<subseteq> l2_inv4'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv4'", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv5\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>The only confidential or secure messages on the channel have been put there\n  by the attacker.\\<close>"], ["", "definition\n  l2_inv5 :: \"l2_state set\"\nwhere\n  \"l2_inv5 \\<equiv> {s. \\<forall>A B M.\n    (Confid A B M \\<in> chan s \\<or> Secure A B M \\<in> chan s) \\<longrightarrow> \n    M \\<in> dy_fake_msg (bad s) (ik s) (chan s)\n  }\""], ["", "lemmas l2_inv5I = l2_inv5_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv5E [elim] = l2_inv5_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv5D = l2_inv5_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv5_init [iff]:\n  \"init l2 \\<subseteq> l2_inv5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv5", "by (auto simp add: l2_def l2_init_def l2_inv5_def)"], ["", "lemma l2_inv5_trans [iff]:\n  \"{l2_inv5} trans l2 {> l2_inv5}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv5} TS.trans l2 {> l2_inv5}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv5I)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>x A B M xa xf xg xh.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 2. \\<And>x A B M xa xd xe xg xh.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_step2 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 3. \\<And>x A B M xa xd xf xg xh.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_step3 xf xg xh xd\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 4. \\<And>x A B M xa xd xe xg xh.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_step4 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 5. \\<And>x A B M xa xc.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_dy_fake_chan xc\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 6. \\<And>x A B M xa xb.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_dy_fake_msg xb\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 7. \\<And>x A B M xa xg.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_lkr_others xg\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 8. \\<And>x A B M xa xg.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_lkr_after xg\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 9. \\<And>x A B M xa xf xg.\n       \\<lbrakk>xa \\<in> l2_inv5; Confid A B M \\<in> chan x;\n        (xa, x) \\<in> l2_skr xf xg\\<rbrakk>\n       \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\n 10. \\<And>x A B M xa xf xg xh.\n        \\<lbrakk>xa \\<in> l2_inv5; Secure A B M \\<in> chan x;\n         (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n        \\<Longrightarrow> M \\<in> dy_fake_msg (bad x) (ik x) (chan x)\nA total of 18 subgoals...", "apply (auto simp add: l2_defs dy_fake_chan_def intro: l2_inv5D dy_fake_msg_monotone)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv5 [iff]: \"reach l2 \\<subseteq> l2_inv5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv5", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv6\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>For a run @{term \"R\"} (with any role), the session key always has the form\n$something^n$ where $n$ is a nonce generated by @{term \"R\"}.\\<close>"], ["", "definition\n  l2_inv6 :: \"l2_state set\"\nwhere\n  \"l2_inv6 \\<equiv> {s. \\<forall>R.\n    in_progress (progress s R) xsk \\<longrightarrow>\n    (\\<exists> X N.\n      guessed_frame R xsk = Some (Exp X (NonceF (R$N))))\n  }\""], ["", "lemmas l2_inv6I = l2_inv6_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv6E [elim] = l2_inv6_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv6D = l2_inv6_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv6_init [iff]:\n  \"init l2 \\<subseteq> l2_inv6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv6", "by (auto simp add: l2_def l2_init_def l2_inv6_def)"], ["", "lemma l2_inv6_trans [iff]:\n  \"{l2_inv6} trans l2 {> l2_inv6}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv6} TS.trans l2 {> l2_inv6}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv6I)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x R xa xf xg xh.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_step1 xf xg xh\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 2. \\<And>x R xa xd xe xg xh.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_step2 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 3. \\<And>x R xa xd xf xg xh.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_step3 xf xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 4. \\<And>x R xa xd xe xg xh.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_step4 xe xg xh xd\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 5. \\<And>x R xa xc.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_dy_fake_chan xc\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 6. \\<And>x R xa xb.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_dy_fake_msg xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 7. \\<And>x R xa xg.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_lkr_others xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 8. \\<And>x R xa xg.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_lkr_after xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))\n 9. \\<And>x R xa xf xg.\n       \\<lbrakk>in_progress (progress x R) xsk; xa \\<in> l2_inv6;\n        (xa, x) \\<in> l2_skr xf xg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X N.\n                            guessed_frame R xsk =\n                            Some (Exp X (NonceF (R $ N)))", "apply (auto simp add: l2_defs dy_fake_chan_def dest: l2_inv6D)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv6 [iff]: \"reach l2 \\<subseteq> l2_inv6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv6", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv7\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>Form of the messages in @{term \"extr (bad s) (ik s) (chan s)\"} =\n  @{term \"synth (analz (generators))\"}.\\<close>"], ["", "abbreviation\n  \"generators \\<equiv> {x. \\<exists> N. x = Exp Gen (Nonce N)} \\<union> \n                {Exp y (NonceF (R$N)) |y N R. R \\<noteq> test \\<and> R \\<notin> partners}\""], ["", "lemma analz_generators: \"analz generators = generators\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz generators = generators", "by (rule, rule, erule analz.induct, auto)"], ["", "definition\n  l2_inv7 :: \"l2_state set\"\nwhere\n  \"l2_inv7 \\<equiv> {s. \n    extr (bad s) (ik s) (chan s) \\<subseteq> \n      synth (analz (generators))\n  }\""], ["", "lemmas l2_inv7I = l2_inv7_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv7E [elim] = l2_inv7_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv7D = l2_inv7_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv7_init [iff]:\n  \"init l2 \\<subseteq> l2_inv7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv7", "by (auto simp add: l2_def l2_init_def l2_inv7_def)"], ["", "lemma l2_inv7_step1:\n  \"{l2_inv7} l2_step1 Ra A B {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7} l2_step1 Ra A B {> l2_inv7}", "apply (auto simp add: PO_hoare_defs l2_defs intro!: l2_inv7I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xb.\n       \\<lbrakk>xb \\<in> l2_inv7; Ra \\<notin> dom (progress xb);\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> Exp Gen (NonceF (Ra $ nx))\n                         \\<in> synth (analz generators)\n 2. \\<And>xa xb.\n       \\<lbrakk>xb \\<in> l2_inv7; Ra \\<notin> dom (progress xb);\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        xa \\<in> extr (bad xb) (ik xb) (chan xb)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)", "apply (auto intro: synth_analz_increasing)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_inv7_step2:\n  \"{l2_inv7} l2_step2 Rb A B gnx {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7} l2_step2 Rb A B gnx {> l2_inv7}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv7I, auto simp add: l2_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xb.\n       \\<lbrakk>xb \\<in> l2_inv7;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        Rb \\<notin> dom (progress xb); guessed_frame Rb xgnx = Some gnx;\n        guessed_frame Rb xsk = Some (Exp gnx (NonceF (Rb $ ny)));\n        Insec A B gnx \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> Exp Gen (NonceF (Rb $ ny))\n                         \\<in> synth (analz generators)\n 2. \\<And>xb.\n       \\<lbrakk>xb \\<in> l2_inv7;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        Rb \\<notin> dom (progress xb); guessed_frame Rb xgnx = Some gnx;\n        guessed_frame Rb xsk = Some (Exp gnx (NonceF (Rb $ ny)));\n        Insec A B gnx \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> gnx \\<in> synth (analz generators)", "apply (auto intro: synth_analz_increasing)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_inv7_step3:\n  \"{l2_inv7} l2_step3 Ra A B gny {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7} l2_step3 Ra A B gny {> l2_inv7}", "apply (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv7I, auto simp add: l2_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xb.\n       \\<lbrakk>xb \\<in> l2_inv7;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress xb Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n        guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n        Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> Exp Gen (NonceF (Ra $ nx))\n                         \\<in> synth (analz generators)\n 2. \\<And>xb.\n       \\<lbrakk>xb \\<in> l2_inv7;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress xb Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n        guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n        Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> gny \\<in> synth (analz generators)", "apply (auto intro: synth_analz_increasing)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xb.\n       \\<lbrakk>xb \\<in> l2_inv7;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress xb Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n        guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n        Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> gny \\<in> synth (analz generators)", "apply (auto dest:l2_inv7D [THEN [2] rev_subsetD] dest!:extr_Chan)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_inv7_step4:\n  \"{l2_inv7} l2_step4 Rb A B gnx {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7} l2_step4 Rb A B gnx {> l2_inv7}", "by (auto simp add: PO_hoare_defs l2_nostep_defs intro!: l2_inv7I, auto simp add: l2_defs)"], ["", "lemma l2_inv7_dy_fake_msg:\n  \"{l2_inv7} l2_dy_fake_msg M {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7} l2_dy_fake_msg M {> l2_inv7}", "by (auto simp add: PO_hoare_defs l2_defs extr_insert_IK_eq \n            intro!: l2_inv7I \n            elim!: l2_inv7E dy_fake_msg_extr [THEN [2] rev_subsetD])"], ["", "lemma l2_inv7_dy_fake_chan:\n  \"{l2_inv7} l2_dy_fake_chan M {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7} l2_dy_fake_chan M {> l2_inv7}", "by (auto simp add: PO_hoare_defs l2_defs \n            intro!: l2_inv7I \n            dest:  dy_fake_chan_extr_insert [THEN [2] rev_subsetD]\n            elim!: l2_inv7E dy_fake_msg_extr [THEN [2] rev_subsetD])"], ["", "lemma l2_inv7_lkr_others:\n  \"{l2_inv7 \\<inter> l2_inv5} l2_lkr_others A {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7 \\<inter> l2_inv5} l2_lkr_others A {> l2_inv7}", "apply (auto simp add: PO_hoare_defs l2_defs \n            intro!: l2_inv7I\n            dest!: extr_insert_bad [THEN [2] rev_subsetD]\n            elim!: l2_inv7E l2_inv5E)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>A \\<noteq> test_owner; A \\<noteq> test_partner;\n        \\<forall>A B M.\n           (Confid A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n           (Secure A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        xa \\<in> extr (bad xb) (ik xb) (chan xb)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 2. \\<And>xa xb B.\n       \\<lbrakk>A \\<noteq> test_owner; A \\<noteq> test_partner;\n        \\<forall>A B M.\n           (Confid A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n           (Secure A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        Confid A B xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 3. \\<And>xa xb B.\n       \\<lbrakk>A \\<noteq> test_owner; A \\<noteq> test_partner;\n        \\<forall>A B M.\n           (Confid A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n           (Secure A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        Confid B A xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 4. \\<And>xa xb B.\n       \\<lbrakk>A \\<noteq> test_owner; A \\<noteq> test_partner;\n        \\<forall>A B M.\n           (Confid A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n           (Secure A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        Secure A B xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 5. \\<And>xa xb B.\n       \\<lbrakk>A \\<noteq> test_owner; A \\<noteq> test_partner;\n        \\<forall>A B M.\n           (Confid A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n           (Secure A B M \\<in> chan xb \\<longrightarrow>\n            M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        Secure B A xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)", "apply (auto dest: dy_fake_msg_extr [THEN [2] rev_subsetD])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_inv7_lkr_after:\n  \"{l2_inv7 \\<inter> l2_inv5} l2_lkr_after A {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7 \\<inter> l2_inv5} l2_lkr_after A {> l2_inv7}", "apply (auto simp add: PO_hoare_defs l2_defs \n            intro!: l2_inv7I\n            dest!: extr_insert_bad [THEN [2] rev_subsetD]\n            elim!: l2_inv7E l2_inv5E)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>\\<forall>A B M.\n                   (Confid A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n                   (Secure A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        test_ended xb; xa \\<in> extr (bad xb) (ik xb) (chan xb)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 2. \\<And>xa xb B.\n       \\<lbrakk>\\<forall>A B M.\n                   (Confid A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n                   (Secure A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        test_ended xb; Confid A B xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 3. \\<And>xa xb B.\n       \\<lbrakk>\\<forall>A B M.\n                   (Confid A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n                   (Secure A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        test_ended xb; Confid B A xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 4. \\<And>xa xb B.\n       \\<lbrakk>\\<forall>A B M.\n                   (Confid A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n                   (Secure A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        test_ended xb; Secure A B xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)\n 5. \\<And>xa xb B.\n       \\<lbrakk>\\<forall>A B M.\n                   (Confid A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb)) \\<and>\n                   (Secure A B M \\<in> chan xb \\<longrightarrow>\n                    M \\<in> dy_fake_msg (bad xb) (ik xb) (chan xb));\n        extr (bad xb) (ik xb) (chan xb)\n        \\<subseteq> synth (analz generators);\n        test_ended xb; Secure B A xa \\<in> chan xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)", "apply (auto dest: dy_fake_msg_extr [THEN [2] rev_subsetD])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_inv7_skr:\n  \"{l2_inv7 \\<inter> l2_inv6} l2_skr R K {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7 \\<inter> l2_inv6} l2_skr R K {> l2_inv7}", "apply (auto simp add: PO_hoare_defs l2_defs  intro!: l2_inv7I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xb.\n       \\<lbrakk>R \\<noteq> test; R \\<notin> partners; xb \\<in> l2_inv7;\n        xb \\<in> l2_inv6; in_progress (progress xb R) xsk;\n        guessed_frame R xsk = Some K\\<rbrakk>\n       \\<Longrightarrow> K \\<in> synth (analz generators)\n 2. \\<And>xa xb.\n       \\<lbrakk>R \\<noteq> test; R \\<notin> partners; xb \\<in> l2_inv7;\n        xb \\<in> l2_inv6; in_progress (progress xb R) xsk;\n        guessed_frame R xsk = Some K;\n        xa \\<in> extr (bad xb) (ik xb) (chan xb)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> synth (analz generators)", "apply (auto simp add: extr_insert_IK_eq dest!: l2_inv6D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xb X N.\n       \\<lbrakk>R \\<noteq> test; R \\<notin> partners; xb \\<in> l2_inv7;\n        xb \\<in> l2_inv6;\n        guessed_frame R xsk = Some (Exp X (NonceF (R $ N)));\n        K = Exp X (NonceF (R $ N))\\<rbrakk>\n       \\<Longrightarrow> Exp X (NonceF (R $ N))\n                         \\<in> synth (analz generators)", "apply (auto intro: synth_analz_increasing)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas l2_inv7_trans_aux =\n  l2_inv7_step1 l2_inv7_step2 l2_inv7_step3 l2_inv7_step4\n  l2_inv7_dy_fake_msg l2_inv7_dy_fake_chan\n  l2_inv7_lkr_others l2_inv7_lkr_after l2_inv7_skr"], ["", "lemma l2_inv7_trans [iff]:\n  \"{l2_inv7 \\<inter> l2_inv5 \\<inter> l2_inv6} trans l2 {> l2_inv7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv7 \\<inter> l2_inv5 \\<inter> l2_inv6} TS.trans l2 {> l2_inv7}", "by (auto simp add: l2_nostep_defs intro:l2_inv7_trans_aux)"], ["", "lemma PO_l2_inv7 [iff]: \"reach l2 \\<subseteq> l2_inv7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv7", "by (rule_tac J=\"l2_inv5 \\<inter> l2_inv6\" in inv_rule_incr) (auto)"], ["", "text \\<open>Auxiliary dest rule for inv7.\\<close>"], ["", "lemmas l2_inv7D_aux = \n  l2_inv7D [THEN [2] subset_trans, THEN synth_analz_mono, simplified, \n            THEN [2] rev_subsetD, rotated 1, OF IK_subset_extr]"], ["", "subsubsection \\<open>inv8: form of the secrets\\<close>"], ["", "(**************************************************************************************************)"], ["", "definition\n  l2_inv8 :: \"l2_state set\"\nwhere\n  \"l2_inv8 \\<equiv> {s.\n    secret s \\<subseteq> {Exp (Exp Gen (NonceF (R$N))) (NonceF (R'$N')) | N N' R R'.\n                  R = test \\<and> R' \\<in> partners}\n  }\""], ["", "lemmas l2_inv8I = l2_inv8_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas l2_inv8E [elim] = l2_inv8_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas l2_inv8D = l2_inv8_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma l2_inv8_init [iff]:\n  \"init l2 \\<subseteq> l2_inv8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> l2_inv8", "by (auto simp add: l2_def l2_init_def l2_inv8_def)"], ["", "text \\<open>Steps 3 and 4 are the hard part.\\<close>"], ["", "lemma l2_inv8_step3:\n  \"{l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv4'} l2_step3 Ra A B gny {> l2_inv8}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter>\n     l2_inv4'} l2_step3 Ra A B gny {> l2_inv8}", "proof (auto simp add: PO_hoare_defs intro!: l2_inv8I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "fix s s' :: l2_state"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "assume Hi:\"s \\<in> l2_inv1\" \"s \\<in> l2_inv8\" \"s \\<in> l2_inv2\" \"s \\<in> l2_inv4'\""], ["proof (state)\nthis:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "assume Ht:\"(s, s') \\<in> l2_step3 Ra A B gny\""], ["proof (state)\nthis:\n  (s, s') \\<in> l2_step3 Ra A B gny\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "assume Hs:\"x \\<in> secret s'\""], ["proof (state)\nthis:\n  x \\<in> secret s'\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "from Hs Ht"], ["proof (chain)\npicking this:\n  x \\<in> secret s'\n  (s, s') \\<in> l2_step3 Ra A B gny", "have \"x \\<in> secret s \\<or> (Ra = test \\<and> x = Exp gny (NonceF (Ra$nx)))\""], ["proof (prove)\nusing this:\n  x \\<in> secret s'\n  (s, s') \\<in> l2_step3 Ra A B gny\n\ngoal (1 subgoal):\n 1. x \\<in> secret s \\<or> Ra = test \\<and> x = Exp gny (NonceF (Ra $ nx))", "by (auto simp add: l2_defs)"], ["proof (state)\nthis:\n  x \\<in> secret s \\<or> Ra = test \\<and> x = Exp gny (NonceF (Ra $ nx))\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step3 Ra A B gny;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv2; xb \\<in> l2_inv8;\n        xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "with Hi Ht"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  (s, s') \\<in> l2_step3 Ra A B gny\n  x \\<in> secret s \\<or> Ra = test \\<and> x = Exp gny (NonceF (Ra $ nx))", "show \"\\<exists>N N' R'. x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and> R' \\<in> partners\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  (s, s') \\<in> l2_step3 Ra A B gny\n  x \\<in> secret s \\<or> Ra = test \\<and> x = Exp gny (NonceF (Ra $ nx))\n\ngoal (1 subgoal):\n 1. \\<exists>N N' R'.\n       x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n       R' \\<in> partners", "proof (auto dest: l2_inv8D simp add: l2_defs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume Hx: \"x = Exp gny (NonceF (test $ nx))\""], ["proof (state)\nthis:\n  x = Exp gny (NonceF (test $ nx))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume \"can_signal s A B\""], ["proof (state)\nthis:\n  can_signal s A B\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Hi"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  can_signal s A B", "have HA: \"A \\<notin> bad s \\<and> B \\<notin> bad s\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  can_signal s A B\n\ngoal (1 subgoal):\n 1. A \\<notin> bad s \\<and> B \\<notin> bad s", "by auto"], ["proof (state)\nthis:\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume Htest: \"guessed_runs test = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\"\n                    \"guessed_frame test xgny = Some gny\"\n                    \"guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)))\""], ["proof (state)\nthis:\n  guessed_runs test = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  guessed_frame test xgny = Some gny\n  guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume \"Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle> \\<in> chan s\""], ["proof (state)\nthis:\n  Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n  \\<in> chan s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Hi HA"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n  Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n  \\<in> chan s", "obtain Rb where HRb:\n        \"guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr>\"\n        \"in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\"\n        \"gny = Exp Gen (NonceF (Rb$ny))\"\n        \"guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test$nx)))\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n  Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n  \\<in> chan s\n\ngoal (1 subgoal):\n 1. (\\<And>Rb.\n        \\<lbrakk>guessed_runs Rb =\n                 \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n         in_progressS (progress s Rb) {xny, xgnx, xgny, xsk};\n         gny = Exp Gen (NonceF (Rb $ ny));\n         guessed_frame Rb xgnx =\n         Some (Exp Gen (NonceF (test $ nx)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: l2_inv2D)"], ["proof (state)\nthis:\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Hi"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))", "have \"guessed_frame Rb xsk = Some (Exp (Exp Gen (NonceF (Rb$ny))) (NonceF (test$nx)))\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))\n\ngoal (1 subgoal):\n 1. guessed_frame Rb xsk =\n    Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)))", "by (auto dest: l2_inv4'D)"], ["proof (state)\nthis:\n  guessed_frame Rb xsk =\n  Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with HRb Htest"], ["proof (chain)\npicking this:\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))\n  guessed_runs test = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  guessed_frame test xgny = Some gny\n  guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)))\n  guessed_frame Rb xsk =\n  Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)))", "have \"Rb \\<in> partners\""], ["proof (prove)\nusing this:\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))\n  guessed_runs test = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  guessed_frame test xgny = Some gny\n  guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)))\n  guessed_frame Rb xsk =\n  Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)))\n\ngoal (1 subgoal):\n 1. Rb \\<in> partners", "by (auto simp add: partners_def partner_runs_def matching_def)"], ["proof (state)\nthis:\n  Rb \\<in> partners\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with HRb"], ["proof (chain)\npicking this:\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))\n  Rb \\<in> partners", "have \"Exp gny (NonceF (test $ nx)) = \n                        Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)) \\<and> Rb \\<in> partners\""], ["proof (prove)\nusing this:\n  guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  in_progressS (progress s Rb) {xny, xgnx, xgny, xsk}\n  gny = Exp Gen (NonceF (Rb $ ny))\n  guessed_frame Rb xgnx = Some (Exp Gen (NonceF (test $ nx)))\n  Rb \\<in> partners\n\ngoal (1 subgoal):\n 1. Exp gny (NonceF (test $ nx)) =\n    Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)) \\<and>\n    Rb \\<in> partners", "by auto"], ["proof (state)\nthis:\n  Exp gny (NonceF (test $ nx)) =\n  Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)) \\<and>\n  Rb \\<in> partners\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s),\n        signalsInit := (signalsInit s)\n          (Commit A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsInit s\n                   (Commit A B (Exp gny (NonceF (test $ nx)))))),\n        signalsResp := (signalsResp s)\n          (Running A B (Exp gny (NonceF (test $ nx))) :=\n             Suc (signalsResp s\n                   (Running A B (Exp gny (NonceF (test $ nx))))))\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "then"], ["proof (chain)\npicking this:\n  Exp gny (NonceF (test $ nx)) =\n  Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)) \\<and>\n  Rb \\<in> partners", "show \"\\<exists>N N' R'.\n          Exp gny (NonceF (test $ nx)) = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n          R' \\<in> partners\""], ["proof (prove)\nusing this:\n  Exp gny (NonceF (test $ nx)) =\n  Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx)) \\<and>\n  Rb \\<in> partners\n\ngoal (1 subgoal):\n 1. \\<exists>N N' R'.\n       Exp gny (NonceF (test $ nx)) =\n       Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n       R' \\<in> partners", "by blast"], ["proof (state)\nthis:\n  \\<exists>N N' R'.\n     Exp gny (NonceF (test $ nx)) =\n     Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n     R' \\<in> partners\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv2;\n     s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s test = Some {xnx, xgnx}; guessed_frame test xgny = Some gny;\n     guessed_frame test xsk = Some (Exp gny (NonceF (test $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (test $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (test $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret := insert (Exp gny (NonceF (test $ nx))) (secret s)\\<rparr>;\n     x = Exp gny (NonceF (test $ nx)); Ra = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gny (NonceF (test $ nx)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "qed (auto simp add: can_signal_def)"], ["proof (state)\nthis:\n  \\<exists>N N' R'.\n     x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n     R' \\<in> partners\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma l2_inv8_step4:\n  \"{l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4'} l2_step4 Rb A B gnx {> l2_inv8}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter>\n     l2_inv4'} l2_step4 Rb A B gnx {> l2_inv8}", "proof (auto simp add: PO_hoare_defs intro!: l2_inv8I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "fix s s' :: l2_state"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "assume Hi:\"s \\<in> l2_inv1\" \"s \\<in> l2_inv8\" \"s \\<in> l2_inv3\" \"s \\<in> l2_inv4\" \"s \\<in> l2_inv4'\""], ["proof (state)\nthis:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "assume Ht:\"(s, s') \\<in> l2_step4 Rb A B gnx\""], ["proof (state)\nthis:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "assume Hs:\"x \\<in> secret s'\""], ["proof (state)\nthis:\n  x \\<in> secret s'\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "from Hs Ht"], ["proof (chain)\npicking this:\n  x \\<in> secret s'\n  (s, s') \\<in> l2_step4 Rb A B gnx", "have \"x \\<in> secret s \\<or> (Rb = test \\<and> x = Exp gnx (NonceF (Rb$ny)))\""], ["proof (prove)\nusing this:\n  x \\<in> secret s'\n  (s, s') \\<in> l2_step4 Rb A B gnx\n\ngoal (1 subgoal):\n 1. x \\<in> secret s \\<or> Rb = test \\<and> x = Exp gnx (NonceF (Rb $ ny))", "by (auto simp add: l2_defs)"], ["proof (state)\nthis:\n  x \\<in> secret s \\<or> Rb = test \\<and> x = Exp gnx (NonceF (Rb $ ny))\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step4 Rb A B gnx;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "with Hi Ht"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  x \\<in> secret s \\<or> Rb = test \\<and> x = Exp gnx (NonceF (Rb $ ny))", "show \"\\<exists>N N' R'. x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and> R' \\<in> partners\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  x \\<in> secret s \\<or> Rb = test \\<and> x = Exp gnx (NonceF (Rb $ ny))\n\ngoal (1 subgoal):\n 1. \\<exists>N N' R'.\n       x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n       R' \\<in> partners", "proof (auto dest: l2_inv8D simp add: l2_defs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume Hx: \"x = Exp gnx (NonceF (test $ ny))\""], ["proof (state)\nthis:\n  x = Exp gnx (NonceF (test $ ny))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume \"can_signal s A B\""], ["proof (state)\nthis:\n  can_signal s A B\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Hi"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  can_signal s A B", "have HA: \"A \\<notin> bad s \\<and> B \\<notin> bad s\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  can_signal s A B\n\ngoal (1 subgoal):\n 1. A \\<notin> bad s \\<and> B \\<notin> bad s", "by auto"], ["proof (state)\nthis:\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume Htest: \"guessed_runs test = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\"\n                    \"guessed_frame test xgnx = Some gnx\""], ["proof (state)\nthis:\n  guessed_runs test = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  guessed_frame test xgnx = Some gnx\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume \"progress s test = Some {xny, xgnx, xgny, xsk}\""], ["proof (state)\nthis:\n  progress s test = Some {xny, xgnx, xgny, xsk}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Htest Hi"], ["proof (chain)\npicking this:\n  guessed_runs test = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  guessed_frame test xgnx = Some gnx\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  progress s test = Some {xny, xgnx, xgny, xsk}", "have Htest': \"guessed_frame test xsk = Some (Exp gnx (NonceF (test $ ny)))\""], ["proof (prove)\nusing this:\n  guessed_runs test = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  guessed_frame test xgnx = Some gnx\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  progress s test = Some {xny, xgnx, xgny, xsk}\n\ngoal (1 subgoal):\n 1. guessed_frame test xsk = Some (Exp gnx (NonceF (test $ ny)))", "by (auto dest: l2_inv4'D)"], ["proof (state)\nthis:\n  guessed_frame test xsk = Some (Exp gnx (NonceF (test $ ny)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "assume \"Auth A B \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle> \\<in> chan s\""], ["proof (state)\nthis:\n  Auth A B\n   \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n  \\<in> chan s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Hi HA"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n  Auth A B\n   \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n  \\<in> chan s", "obtain Ra where HRa:\n        \"guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr>\"\n        \"in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\"\n        \"gnx = Exp Gen (NonceF (Ra$nx))\"\n        \"guessed_frame Ra xgny = Some (Exp Gen (NonceF (test$ny)))\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  A \\<notin> bad s \\<and> B \\<notin> bad s\n  Auth A B\n   \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n  \\<in> chan s\n\ngoal (1 subgoal):\n 1. (\\<And>Ra.\n        \\<lbrakk>guessed_runs Ra =\n                 \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n         in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd};\n         gnx = Exp Gen (NonceF (Ra $ nx));\n         guessed_frame Ra xgny =\n         Some (Exp Gen (NonceF (test $ ny)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: l2_inv3D)"], ["proof (state)\nthis:\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with Hi"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))", "have \"guessed_frame Ra xsk = Some (Exp (Exp Gen (NonceF (Ra$nx))) (NonceF (test$ny)))\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv8\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))\n\ngoal (1 subgoal):\n 1. guessed_frame Ra xsk =\n    Some (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)))", "by (auto dest: l2_inv4D)"], ["proof (state)\nthis:\n  guessed_frame Ra xsk =\n  Some (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with HRa Htest Htest'"], ["proof (chain)\npicking this:\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))\n  guessed_runs test = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  guessed_frame test xgnx = Some gnx\n  guessed_frame test xsk = Some (Exp gnx (NonceF (test $ ny)))\n  guessed_frame Ra xsk =\n  Some (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)))", "have \"Ra \\<in> partners\""], ["proof (prove)\nusing this:\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))\n  guessed_runs test = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n  guessed_frame test xgnx = Some gnx\n  guessed_frame test xsk = Some (Exp gnx (NonceF (test $ ny)))\n  guessed_frame Ra xsk =\n  Some (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)))\n\ngoal (1 subgoal):\n 1. Ra \\<in> partners", "by (auto simp add: partners_def partner_runs_def matching_def)"], ["proof (state)\nthis:\n  Ra \\<in> partners\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "with HRa"], ["proof (chain)\npicking this:\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))\n  Ra \\<in> partners", "have \"Exp gnx (NonceF (test $ ny)) = \n                        Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)) \\<and> Ra \\<in> partners\""], ["proof (prove)\nusing this:\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd}\n  gnx = Exp Gen (NonceF (Ra $ nx))\n  guessed_frame Ra xgny = Some (Exp Gen (NonceF (test $ ny)))\n  Ra \\<in> partners\n\ngoal (1 subgoal):\n 1. Exp gnx (NonceF (test $ ny)) =\n    Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)) \\<and>\n    Ra \\<in> partners", "by auto"], ["proof (state)\nthis:\n  Exp gnx (NonceF (test $ ny)) =\n  Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)) \\<and>\n  Ra \\<in> partners\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s),\n        signalsResp := (signalsResp s)\n          (Commit A B (Exp gnx (NonceF (test $ ny))) :=\n             Suc (signalsResp s\n                   (Commit A B (Exp gnx (NonceF (test $ ny))))))\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners\n 2. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "then"], ["proof (chain)\npicking this:\n  Exp gnx (NonceF (test $ ny)) =\n  Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)) \\<and>\n  Ra \\<in> partners", "show \"\\<exists>N N' R'.\n          Exp gnx (NonceF (test $ ny)) = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n          R' \\<in> partners\""], ["proof (prove)\nusing this:\n  Exp gnx (NonceF (test $ ny)) =\n  Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny)) \\<and>\n  Ra \\<in> partners\n\ngoal (1 subgoal):\n 1. \\<exists>N N' R'.\n       Exp gnx (NonceF (test $ ny)) =\n       Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n       R' \\<in> partners", "by auto"], ["proof (state)\nthis:\n  \\<exists>N N' R'.\n     Exp gnx (NonceF (test $ ny)) =\n     Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n     R' \\<in> partners\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> l2_inv1; s \\<in> l2_inv8; s \\<in> l2_inv3;\n     s \\<in> l2_inv4; s \\<in> l2_inv4'; \\<not> can_signal s A B;\n     guessed_runs test =\n     \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s test = Some {xny, xgnx, xgny, xsk};\n     guessed_frame test xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (test $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(test \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret := insert (Exp gnx (NonceF (test $ ny))) (secret s)\\<rparr>;\n     x = Exp gnx (NonceF (test $ ny)); Rb = test\\<rbrakk>\n    \\<Longrightarrow> \\<exists>N N' R'.\n                         Exp gnx (NonceF (test $ ny)) =\n                         Exp (Exp Gen (NonceF (R' $ N')))\n                          (NonceF (test $ N)) \\<and>\n                         R' \\<in> partners", "qed (auto simp add: can_signal_def)"], ["proof (state)\nthis:\n  \\<exists>N N' R'.\n     x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N)) \\<and>\n     R' \\<in> partners\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma l2_inv8_trans [iff]:\n  \"{l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4'} trans l2 {> l2_inv8}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n     l2_inv4 \\<inter>\n     l2_inv4'} TS.trans l2 {> l2_inv8}", "apply (auto simp add: l2_nostep_defs intro!: l2_inv8_step3 l2_inv8_step4)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>xd xe xf.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_step1 xd xe xf {> l2_inv8}\n 2. \\<And>xb xc xe xf.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_step2 xc xe xf xb {> l2_inv8}\n 3. \\<And>xa.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_dy_fake_chan xa {> l2_inv8}\n 4. \\<And>x.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_dy_fake_msg x {> l2_inv8}\n 5. \\<And>xe.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_lkr_others xe {> l2_inv8}\n 6. \\<And>xe.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_lkr_after xe {> l2_inv8}\n 7. \\<And>xd xe.\n       {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter>\n        l2_inv4 \\<inter>\n        l2_inv4'} l2_skr xd xe {> l2_inv8}", "apply (auto simp add: PO_hoare_defs intro!: l2_inv8I)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>xd xe xf x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_step1 xd xe xf;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv2; xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners\n 2. \\<And>xb xc xe xf x xa xd.\n       \\<lbrakk>xa \\<in> secret x; (xd, x) \\<in> l2_step2 xc xe xf xb;\n        xd \\<in> l2_inv4'; xd \\<in> l2_inv4; xd \\<in> l2_inv3;\n        xd \\<in> l2_inv2; xd \\<in> l2_inv8; xd \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners\n 3. \\<And>xa x xb xc.\n       \\<lbrakk>xb \\<in> secret x; (xc, x) \\<in> l2_dy_fake_chan xa;\n        xc \\<in> l2_inv4'; xc \\<in> l2_inv4; xc \\<in> l2_inv3;\n        xc \\<in> l2_inv2; xc \\<in> l2_inv8; xc \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xb =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners\n 4. \\<And>x xa xb xc.\n       \\<lbrakk>xb \\<in> secret xa; (xc, xa) \\<in> l2_dy_fake_msg x;\n        xc \\<in> l2_inv4'; xc \\<in> l2_inv4; xc \\<in> l2_inv3;\n        xc \\<in> l2_inv2; xc \\<in> l2_inv8; xc \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xb =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners\n 5. \\<And>xe x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_lkr_others xe;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv2; xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners\n 6. \\<And>xe x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_lkr_after xe;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv2; xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners\n 7. \\<And>xd xe x xa xb.\n       \\<lbrakk>xa \\<in> secret x; (xb, x) \\<in> l2_skr xd xe;\n        xb \\<in> l2_inv4'; xb \\<in> l2_inv4; xb \\<in> l2_inv3;\n        xb \\<in> l2_inv2; xb \\<in> l2_inv8; xb \\<in> l2_inv1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N N' R'.\n                            xa =\n                            Exp (Exp Gen (NonceF (R' $ N')))\n                             (NonceF (test $ N)) \\<and>\n                            R' \\<in> partners", "apply (auto simp add: l2_defs dy_fake_chan_def dest: l2_inv8D)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_l2_inv8 [iff]: \"reach l2 \\<subseteq> l2_inv8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_inv8", "by (rule_tac J=\"l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4'\" in inv_rule_incr) (auto)"], ["", "text \\<open>Auxiliary destruction rule for inv8.\\<close>"], ["", "lemma Exp_Exp_Gen_synth: \n  \"Exp (Exp Gen X) Y \\<in> synth H \\<Longrightarrow> Exp (Exp Gen X) Y \\<in> H \\<or> X \\<in> synth H \\<or> Y \\<in> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp (Exp Gen X) Y \\<in> synth H \\<Longrightarrow>\n    Exp (Exp Gen X) Y \\<in> H \\<or> X \\<in> synth H \\<or> Y \\<in> synth H", "by (erule synth.cases, auto dest: Exp_Exp_Gen_inj2)"], ["", "lemma l2_inv8_aux:\n  \"s \\<in> l2_inv8 \\<Longrightarrow>\n   x \\<in> secret s \\<Longrightarrow>\n   x \\<notin> synth (analz generators)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> l2_inv8; x \\<in> secret s\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> synth (analz generators)", "apply (auto simp add: analz_generators dest!: l2_inv8D [THEN [2] rev_subsetD])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N N' R'.\n       \\<lbrakk>s \\<in> l2_inv8;\n        Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N))\n        \\<in> synth generators;\n        R' \\<in> partners;\n        x = Exp (Exp Gen (NonceF (R' $ N'))) (NonceF (test $ N))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto dest!: Exp_Exp_Gen_synth Exp_Exp_Gen_inj2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Refinement\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>Mediator function.\\<close>"], ["", "definition\n  med12s :: \"l2_obs \\<Rightarrow> l1_obs\"\nwhere\n  \"med12s t \\<equiv> \\<lparr>\n    ik = ik t,\n    secret = secret t,\n    progress = progress t,\n    signalsInit = signalsInit t,\n    signalsResp = signalsResp t\n    \\<rparr>\""], ["", "text \\<open>Relation between states.\\<close>"], ["", "definition\n  R12s :: \"(l1_state * l2_state) set\"\nwhere\n  \"R12s \\<equiv> {(s,s').\n    s = med12s s'\n    }\""], ["", "lemmas R12s_defs = R12s_def med12s_def"], ["", "lemma can_signal_R12 [simp]:\n  \"(s1, s2) \\<in> R12s \\<Longrightarrow>\n   can_signal s1 A B \\<longleftrightarrow> can_signal s2 A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s1, s2) \\<in> R12s \\<Longrightarrow>\n    can_signal s1 A B = can_signal s2 A B", "by (auto simp add: can_signal_def R12s_defs)"], ["", "text \\<open>Protocol events.\\<close>"], ["", "lemma l2_step1_refines_step1:\n  \"{R12s} l1_step1 Ra A B, l2_step1 Ra A B {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s} l1_step1 Ra A B, l2_step1 Ra A B {> R12s}", "by (auto simp add: PO_rhoare_defs R12s_defs l1_step1_def l2_step1_def)"], ["", "lemma l2_step2_refines_step2:\n  \"{R12s} l1_step2 Rb A B gnx, l2_step2 Rb A B gnx {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s} l1_step2 Rb A B gnx, l2_step2 Rb A B gnx {> R12s}", "by (auto simp add: PO_rhoare_defs R12s_defs l1_step2_def, simp_all add: l2_step2_def)"], ["", "text \\<open>For step3 and 4, we prove the level 1 guard, i.e.,\n\"the future session key is not in @{term \"synth (analz (ik s))\"}\"\n  using the fact that inv8 also holds for the future state in which the session key is already in \n  @{term \"secret s\"}.\\<close>"], ["", "lemma l2_step3_refines_step3:\n  \"{R12s \\<inter> UNIV \\<times> (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv4' \\<inter> l2_inv7 \\<inter> l2_inv8)} \n      l1_step3 Ra A B gny, l2_step3 Ra A B gny \n   {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s \\<inter>\n     UNIV \\<times>\n     (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv4' \\<inter> l2_inv7 \\<inter>\n      l2_inv8)} l1_step3 Ra A B gny, l2_step3 Ra A B gny {> R12s}", "proof (auto simp add: PO_rhoare_defs R12s_defs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "fix s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "assume Hi:\"s \\<in> l2_inv1\" \"s \\<in> l2_inv2\" \"s \\<in> l2_inv4'\" \"s \\<in> l2_inv7\""], ["proof (state)\nthis:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "assume Ht: \"(s, s') \\<in> l2_step3 Ra A B gny\""], ["proof (state)\nthis:\n  (s, s') \\<in> l2_step3 Ra A B gny\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "assume \"s \\<in> l2_inv8\""], ["proof (state)\nthis:\n  s \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "with Hi Ht l2_inv8_step3"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  (s, s') \\<in> l2_step3 Ra A B gny\n  {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter>\n   l2_inv4'} l2_step3 ?Ra ?A ?B ?gny {> l2_inv8}\n  s \\<in> l2_inv8", "have Hi':\"s' \\<in> l2_inv8\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  (s, s') \\<in> l2_step3 Ra A B gny\n  {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv2 \\<inter>\n   l2_inv4'} l2_step3 ?Ra ?A ?B ?gny {> l2_inv8}\n  s \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. s' \\<in> l2_inv8", "by (auto simp add: PO_hoare_defs, blast)"], ["proof (state)\nthis:\n  s' \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "from Ht"], ["proof (chain)\npicking this:\n  (s, s') \\<in> l2_step3 Ra A B gny", "have \"Ra = test \\<longrightarrow> Exp gny (NonceF (Ra$nx)) \\<in> secret s'\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> l2_step3 Ra A B gny\n\ngoal (1 subgoal):\n 1. Ra = test \\<longrightarrow> Exp gny (NonceF (Ra $ nx)) \\<in> secret s'", "by (auto simp add: l2_defs)"], ["proof (state)\nthis:\n  Ra = test \\<longrightarrow> Exp gny (NonceF (Ra $ nx)) \\<in> secret s'\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "with Hi'"], ["proof (chain)\npicking this:\n  s' \\<in> l2_inv8\n  Ra = test \\<longrightarrow> Exp gny (NonceF (Ra $ nx)) \\<in> secret s'", "have \"Ra = test \\<longrightarrow> Exp gny (NonceF (Ra$nx)) \\<notin> synth (analz generators)\""], ["proof (prove)\nusing this:\n  s' \\<in> l2_inv8\n  Ra = test \\<longrightarrow> Exp gny (NonceF (Ra $ nx)) \\<in> secret s'\n\ngoal (1 subgoal):\n 1. Ra = test \\<longrightarrow>\n    Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz generators)", "by (auto dest: l2_inv8_aux)"], ["proof (state)\nthis:\n  Ra = test \\<longrightarrow>\n  Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz generators)\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "with Hi"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  Ra = test \\<longrightarrow>\n  Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz generators)", "have G2:\"Ra = test \\<longrightarrow> Exp gny (NonceF (Ra$nx)) \\<notin> synth (analz (ik s))\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  Ra = test \\<longrightarrow>\n  Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz generators)\n\ngoal (1 subgoal):\n 1. Ra = test \\<longrightarrow>\n    Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz (ik s))", "by (auto dest!: l2_inv7D_aux)"], ["proof (state)\nthis:\n  Ra = test \\<longrightarrow>\n  Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz (ik s))\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "from Ht Hi"], ["proof (chain)\npicking this:\n  (s, s') \\<in> l2_step3 Ra A B gny\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7", "have G1:\n    \"can_signal s A B \\<longrightarrow> (\\<exists> Rb. guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<and>\n           in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n           gny = Exp Gen (NonceF (Rb$ny)) \\<and>\n           guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra$nx))))\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> l2_step3 Ra A B gny\n  s \\<in> l2_inv1\n  s \\<in> l2_inv2\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n\ngoal (1 subgoal):\n 1. can_signal s A B \\<longrightarrow>\n    (\\<exists>Rb.\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr> \\<and>\n        in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n        gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx))))", "by (auto dest!: l2_inv2D [rotated 2] simp add: l2_defs)"], ["proof (state)\nthis:\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Rb.\n      guessed_runs Rb =\n      \\<lparr>role = Resp, owner = B, partner = A\\<rparr> \\<and>\n      in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n      gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n      guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx))))\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv2; y \\<in> l2_inv4';\n        y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step3 Ra A B gny\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step3 Ra A B gny", "with Ht G1 G2"], ["proof (chain)\npicking this:\n  (s, s') \\<in> l2_step3 Ra A B gny\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Rb.\n      guessed_runs Rb =\n      \\<lparr>role = Resp, owner = B, partner = A\\<rparr> \\<and>\n      in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n      gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n      guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx))))\n  Ra = test \\<longrightarrow>\n  Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz (ik s))\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Rb.\n      guessed_runs Rb =\n      \\<lparr>role = Resp, owner = B, partner = A\\<rparr> \\<and>\n      in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n      gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n      guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx))))", "show\n    \"(\\<lparr> ik = ik s, secret = secret s, progress = progress s, \n        signalsInit = signalsInit s, signalsResp = signalsResp s \\<rparr>,\n      \\<lparr> ik = ik s', secret = secret s', progress = progress s', \n        signalsInit = signalsInit s', signalsResp = signalsResp s' \\<rparr>)\n           \\<in> l1_step3 Ra A B gny\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> l2_step3 Ra A B gny\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Rb.\n      guessed_runs Rb =\n      \\<lparr>role = Resp, owner = B, partner = A\\<rparr> \\<and>\n      in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n      gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n      guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx))))\n  Ra = test \\<longrightarrow>\n  Exp gny (NonceF (Ra $ nx)) \\<notin> synth (analz (ik s))\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Rb.\n      guessed_runs Rb =\n      \\<lparr>role = Resp, owner = B, partner = A\\<rparr> \\<and>\n      in_progressS (progress s Rb) {xny, xgnx, xgny, xsk} \\<and>\n      gny = Exp Gen (NonceF (Rb $ ny)) \\<and>\n      guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx))))\n\ngoal (1 subgoal):\n 1. (\\<lparr>ik = ik s, secret = secret s, progress = progress s,\n        signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>,\n     \\<lparr>ik = ik s', secret = secret s', progress = progress s',\n        signalsInit = signalsInit s', signalsResp = signalsResp s'\\<rparr>)\n    \\<in> l1_step3 Ra A B gny", "apply (auto simp add: l2_step3_def, auto simp add: l1_step3_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>Rb Rba.\n       \\<lbrakk>can_signal s A B;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress s Ra = Some {xnx, xgnx};\n        in_progressS (progress s Rb) {xny, xgnx, xgny, xsk};\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rba $ ny)));\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        gny = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx)));\n        Auth B A\n         \\<langle>Number 0, Exp Gen (NonceF (Rba $ ny)),\n           Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan s;\n        s' = s\n        \\<lparr>progress := progress s(Ra \\<mapsto>\n                  {xnx, xgnx, xgny, xsk, xEnd}),\n           chan :=\n             insert\n              (Auth A B\n                \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                  Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n              (chan s),\n           signalsInit := (signalsInit s)\n             (Commit A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsInit s\n                      (Commit A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx)))))),\n           signalsResp := (signalsResp s)\n             (Running A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsResp s\n                      (Running A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx))))))\\<rparr>;\n        Ra \\<noteq> test;\n        (s, s\n         \\<lparr>progress := progress s(Ra \\<mapsto>\n                   {xnx, xgnx, xgny, xsk, xEnd}),\n            chan :=\n              insert\n               (Auth A B\n                 \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                   Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n               (chan s),\n            signalsInit := (signalsInit s)\n              (Commit A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsInit s\n                       (Commit A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx)))))),\n            signalsResp := (signalsResp s)\n              (Running A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsResp s\n                       (Running A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx))))))\\<rparr>)\n        \\<in> l2_step3 Ra A B (Exp Gen (NonceF (Rba $ ny)));\n        guessed_runs Rba =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress s Rba) {xny, xgnx, xgny, xsk};\n        Exp Gen (NonceF (Rb $ ny)) = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Rba xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        \\<not> can_signal\n                \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n                   signalsInit = signalsInit s,\n                   signalsResp = signalsResp s\\<rparr>\n                A B\\<rbrakk>\n       \\<Longrightarrow> (signalsInit s)\n                         (Commit A B\n                           (Exp (Exp Gen (NonceF (Rba $ ny)))\n                             (NonceF (Ra $ nx))) :=\n                            Suc (signalsInit s\n                                  (Commit A B\n                                    (Exp (Exp Gen (NonceF (Rba $ ny)))\n(NonceF (Ra $ nx)))))) =\n                         signalsInit s\n 2. \\<And>Rb Rba.\n       \\<lbrakk>can_signal s A B;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress s Ra = Some {xnx, xgnx};\n        in_progressS (progress s Rb) {xny, xgnx, xgny, xsk};\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rba $ ny)));\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        gny = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx)));\n        Auth B A\n         \\<langle>Number 0, Exp Gen (NonceF (Rba $ ny)),\n           Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan s;\n        s' = s\n        \\<lparr>progress := progress s(Ra \\<mapsto>\n                  {xnx, xgnx, xgny, xsk, xEnd}),\n           chan :=\n             insert\n              (Auth A B\n                \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                  Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n              (chan s),\n           signalsInit := (signalsInit s)\n             (Commit A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsInit s\n                      (Commit A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx)))))),\n           signalsResp := (signalsResp s)\n             (Running A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsResp s\n                      (Running A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx))))))\\<rparr>;\n        Ra \\<noteq> test;\n        (s, s\n         \\<lparr>progress := progress s(Ra \\<mapsto>\n                   {xnx, xgnx, xgny, xsk, xEnd}),\n            chan :=\n              insert\n               (Auth A B\n                 \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                   Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n               (chan s),\n            signalsInit := (signalsInit s)\n              (Commit A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsInit s\n                       (Commit A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx)))))),\n            signalsResp := (signalsResp s)\n              (Running A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsResp s\n                       (Running A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx))))))\\<rparr>)\n        \\<in> l2_step3 Ra A B (Exp Gen (NonceF (Rba $ ny)));\n        guessed_runs Rba =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress s Rba) {xny, xgnx, xgny, xsk};\n        Exp Gen (NonceF (Rb $ ny)) = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Rba xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        \\<not> can_signal\n                \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n                   signalsInit = signalsInit s,\n                   signalsResp = signalsResp s\\<rparr>\n                A B\\<rbrakk>\n       \\<Longrightarrow> (signalsResp s)\n                         (Running A B\n                           (Exp (Exp Gen (NonceF (Rba $ ny)))\n                             (NonceF (Ra $ nx))) :=\n                            Suc (signalsResp s\n                                  (Running A B\n                                    (Exp (Exp Gen (NonceF (Rba $ ny)))\n(NonceF (Ra $ nx)))))) =\n                         signalsResp s\n 3. \\<And>Rb Rba.\n       \\<lbrakk>can_signal s A B;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress s Ra = Some {xnx, xgnx};\n        in_progressS (progress s Rb) {xny, xgnx, xgny, xsk};\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rba $ ny)));\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        gny = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx)));\n        Auth B A\n         \\<langle>Number 0, Exp Gen (NonceF (Rba $ ny)),\n           Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan s;\n        s' = s\n        \\<lparr>progress := progress s(Ra \\<mapsto>\n                  {xnx, xgnx, xgny, xsk, xEnd}),\n           chan :=\n             insert\n              (Auth A B\n                \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                  Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n              (chan s),\n           secret :=\n             {x. x =\n                 Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx)) \\<and>\n                 Ra = test} \\<union>\n             secret s,\n           signalsInit := (signalsInit s)\n             (Commit A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsInit s\n                      (Commit A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx)))))),\n           signalsResp := (signalsResp s)\n             (Running A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsResp s\n                      (Running A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx))))))\\<rparr>;\n        Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (test $ nx))\n        \\<notin> synth (analz (ik s));\n        (s, s\n         \\<lparr>progress := progress s(Ra \\<mapsto>\n                   {xnx, xgnx, xgny, xsk, xEnd}),\n            chan :=\n              insert\n               (Auth A B\n                 \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                   Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n               (chan s),\n            secret :=\n              {x. x =\n                  Exp (Exp Gen (NonceF (Rba $ ny)))\n                   (NonceF (Ra $ nx)) \\<and>\n                  Ra = test} \\<union>\n              secret s,\n            signalsInit := (signalsInit s)\n              (Commit A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsInit s\n                       (Commit A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx)))))),\n            signalsResp := (signalsResp s)\n              (Running A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsResp s\n                       (Running A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx))))))\\<rparr>)\n        \\<in> l2_step3 Ra A B (Exp Gen (NonceF (Rba $ ny)));\n        guessed_runs Rba =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress s Rba) {xny, xgnx, xgny, xsk};\n        Exp Gen (NonceF (Rb $ ny)) = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Rba xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        \\<not> can_signal\n                \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n                   signalsInit = signalsInit s,\n                   signalsResp = signalsResp s\\<rparr>\n                A B\\<rbrakk>\n       \\<Longrightarrow> (signalsInit s)\n                         (Commit A B\n                           (Exp (Exp Gen (NonceF (Rba $ ny)))\n                             (NonceF (Ra $ nx))) :=\n                            Suc (signalsInit s\n                                  (Commit A B\n                                    (Exp (Exp Gen (NonceF (Rba $ ny)))\n(NonceF (Ra $ nx)))))) =\n                         signalsInit s\n 4. \\<And>Rb Rba.\n       \\<lbrakk>can_signal s A B;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress s Ra = Some {xnx, xgnx};\n        in_progressS (progress s Rb) {xny, xgnx, xgny, xsk};\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rba $ ny)));\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        gny = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx)));\n        Auth B A\n         \\<langle>Number 0, Exp Gen (NonceF (Rba $ ny)),\n           Exp Gen (NonceF (Ra $ nx))\\<rangle>\n        \\<in> chan s;\n        s' = s\n        \\<lparr>progress := progress s(Ra \\<mapsto>\n                  {xnx, xgnx, xgny, xsk, xEnd}),\n           chan :=\n             insert\n              (Auth A B\n                \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                  Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n              (chan s),\n           secret :=\n             {x. x =\n                 Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx)) \\<and>\n                 Ra = test} \\<union>\n             secret s,\n           signalsInit := (signalsInit s)\n             (Commit A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsInit s\n                      (Commit A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx)))))),\n           signalsResp := (signalsResp s)\n             (Running A B\n               (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                Suc (signalsResp s\n                      (Running A B\n                        (Exp (Exp Gen (NonceF (Rba $ ny)))\n                          (NonceF (Ra $ nx))))))\\<rparr>;\n        Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (test $ nx))\n        \\<notin> synth (analz (ik s));\n        (s, s\n         \\<lparr>progress := progress s(Ra \\<mapsto>\n                   {xnx, xgnx, xgny, xsk, xEnd}),\n            chan :=\n              insert\n               (Auth A B\n                 \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                   Exp Gen (NonceF (Rba $ ny))\\<rangle>)\n               (chan s),\n            secret :=\n              {x. x =\n                  Exp (Exp Gen (NonceF (Rba $ ny)))\n                   (NonceF (Ra $ nx)) \\<and>\n                  Ra = test} \\<union>\n              secret s,\n            signalsInit := (signalsInit s)\n              (Commit A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsInit s\n                       (Commit A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx)))))),\n            signalsResp := (signalsResp s)\n              (Running A B\n                (Exp (Exp Gen (NonceF (Rba $ ny))) (NonceF (Ra $ nx))) :=\n                 Suc (signalsResp s\n                       (Running A B\n                         (Exp (Exp Gen (NonceF (Rba $ ny)))\n                           (NonceF (Ra $ nx))))))\\<rparr>)\n        \\<in> l2_step3 Ra A B (Exp Gen (NonceF (Rba $ ny)));\n        guessed_runs Rba =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress s Rba) {xny, xgnx, xgny, xsk};\n        Exp Gen (NonceF (Rb $ ny)) = Exp Gen (NonceF (Rba $ ny));\n        guessed_frame Rba xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        \\<not> can_signal\n                \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n                   signalsInit = signalsInit s,\n                   signalsResp = signalsResp s\\<rparr>\n                A B\\<rbrakk>\n       \\<Longrightarrow> (signalsResp s)\n                         (Running A B\n                           (Exp (Exp Gen (NonceF (Rba $ ny)))\n                             (NonceF (Ra $ nx))) :=\n                            Suc (signalsResp s\n                                  (Running A B\n                                    (Exp (Exp Gen (NonceF (Rba $ ny)))\n(NonceF (Ra $ nx)))))) =\n                         signalsResp s\n 5. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n     guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Ra \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n               gny\\<rangle>)\n           (chan s)\\<rparr>;\n     Ra \\<noteq> test;\n     (s, s\n      \\<lparr>progress := progress s(Ra \\<mapsto>\n                {xnx, xgnx, xgny, xsk, xEnd}),\n         chan :=\n           insert\n            (Auth A B\n              \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                gny\\<rangle>)\n            (chan s)\\<rparr>)\n     \\<in> l2_step3 Ra A B gny;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Rb.\n                         guessed_runs Rb =\n                         \\<lparr>role = Resp, owner = B,\n                            partner = A\\<rparr> \\<and>\n                         in_progressS (progress s Rb)\n                          {xny, xgnx, xgny, xsk} \\<and>\n                         guessed_frame Rb xgny = Some gny \\<and>\n                         guessed_frame Rb xgnx =\n                         Some (Exp Gen (NonceF (Ra $ nx)))\n 6. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n     guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Ra \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n               gny\\<rangle>)\n           (chan s)\\<rparr>;\n     Ra \\<noteq> test;\n     (s, s\n      \\<lparr>progress := progress s(Ra \\<mapsto>\n                {xnx, xgnx, xgny, xsk, xEnd}),\n         chan :=\n           insert\n            (Auth A B\n              \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                gny\\<rangle>)\n            (chan s)\\<rparr>)\n     \\<in> l2_step3 Ra A B gny;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> signalsInit s = (signalsInit s)\n                      (Commit A B (Exp gny (NonceF (Ra $ nx))) :=\n                         Suc (signalsInit s\n                               (Commit A B (Exp gny (NonceF (Ra $ nx))))))\n 7. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n     guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Ra \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n               gny\\<rangle>)\n           (chan s)\\<rparr>;\n     Ra \\<noteq> test;\n     (s, s\n      \\<lparr>progress := progress s(Ra \\<mapsto>\n                {xnx, xgnx, xgny, xsk, xEnd}),\n         chan :=\n           insert\n            (Auth A B\n              \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                gny\\<rangle>)\n            (chan s)\\<rparr>)\n     \\<in> l2_step3 Ra A B gny;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> signalsResp s = (signalsResp s)\n                      (Running A B (Exp gny (NonceF (Ra $ nx))) :=\n                         Suc (signalsResp s\n                               (Running A B (Exp gny (NonceF (Ra $ nx))))))\n 8. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n     guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Ra \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret :=\n          {x. x = Exp gny (NonceF (Ra $ nx)) \\<and> Ra = test} \\<union>\n          secret s\\<rparr>;\n     Exp gny (NonceF (test $ nx)) \\<notin> synth (analz (ik s));\n     (s, s\n      \\<lparr>progress := progress s(Ra \\<mapsto>\n                {xnx, xgnx, xgny, xsk, xEnd}),\n         chan :=\n           insert\n            (Auth A B\n              \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                gny\\<rangle>)\n            (chan s),\n         secret :=\n           {x. x = Exp gny (NonceF (Ra $ nx)) \\<and> Ra = test} \\<union>\n           secret s\\<rparr>)\n     \\<in> l2_step3 Ra A B gny;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Rb.\n                         guessed_runs Rb =\n                         \\<lparr>role = Resp, owner = B,\n                            partner = A\\<rparr> \\<and>\n                         in_progressS (progress s Rb)\n                          {xny, xgnx, xgny, xsk} \\<and>\n                         guessed_frame Rb xgny = Some gny \\<and>\n                         guessed_frame Rb xgnx =\n                         Some (Exp Gen (NonceF (Ra $ nx)))\n 9. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n     progress s Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n     guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n     Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Ra \\<mapsto>\n               {xnx, xgnx, xgny, xsk, xEnd}),\n        chan :=\n          insert\n           (Auth A B\n             \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n               gny\\<rangle>)\n           (chan s),\n        secret :=\n          {x. x = Exp gny (NonceF (Ra $ nx)) \\<and> Ra = test} \\<union>\n          secret s\\<rparr>;\n     Exp gny (NonceF (test $ nx)) \\<notin> synth (analz (ik s));\n     (s, s\n      \\<lparr>progress := progress s(Ra \\<mapsto>\n                {xnx, xgnx, xgny, xsk, xEnd}),\n         chan :=\n           insert\n            (Auth A B\n              \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                gny\\<rangle>)\n            (chan s),\n         secret :=\n           {x. x = Exp gny (NonceF (Ra $ nx)) \\<and> Ra = test} \\<union>\n           secret s\\<rparr>)\n     \\<in> l2_step3 Ra A B gny;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> signalsInit s = (signalsInit s)\n                      (Commit A B (Exp gny (NonceF (Ra $ nx))) :=\n                         Suc (signalsInit s\n                               (Commit A B (Exp gny (NonceF (Ra $ nx))))))\n 10. \\<lbrakk>\\<not> can_signal s A B;\n      guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n      progress s Ra = Some {xnx, xgnx}; guessed_frame Ra xgny = Some gny;\n      guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)));\n      Auth B A \\<langle>Number 0, gny, Exp Gen (NonceF (Ra $ nx))\\<rangle>\n      \\<in> chan s;\n      s' = s\n      \\<lparr>progress := progress s(Ra \\<mapsto>\n                {xnx, xgnx, xgny, xsk, xEnd}),\n         chan :=\n           insert\n            (Auth A B\n              \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                gny\\<rangle>)\n            (chan s),\n         secret :=\n           {x. x = Exp gny (NonceF (Ra $ nx)) \\<and> Ra = test} \\<union>\n           secret s\\<rparr>;\n      Exp gny (NonceF (test $ nx)) \\<notin> synth (analz (ik s));\n      (s, s\n       \\<lparr>progress := progress s(Ra \\<mapsto>\n                 {xnx, xgnx, xgny, xsk, xEnd}),\n          chan :=\n            insert\n             (Auth A B\n               \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n                 gny\\<rangle>)\n             (chan s),\n          secret :=\n            {x. x = Exp gny (NonceF (Ra $ nx)) \\<and> Ra = test} \\<union>\n            secret s\\<rparr>)\n      \\<in> l2_step3 Ra A B gny;\n      can_signal\n       \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n          signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n       A B\\<rbrakk>\n     \\<Longrightarrow> signalsResp s = (signalsResp s)\n                       (Running A B (Exp gny (NonceF (Ra $ nx))) :=\n                          Suc (signalsResp s\n                                (Running A B (Exp gny (NonceF (Ra $ nx))))))", "apply (auto simp add: can_signal_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lparr>ik = ik s, secret = secret s, progress = progress s,\n      signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>,\n   \\<lparr>ik = ik s', secret = secret s', progress = progress s',\n      signalsInit = signalsInit s', signalsResp = signalsResp s'\\<rparr>)\n  \\<in> l1_step3 Ra A B gny\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma l2_step4_refines_step4:\n  \"{R12s \\<inter> UNIV \\<times> (l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter> l2_inv7 \\<inter> l2_inv8)} \n      l1_step4 Rb A B gnx, l2_step4 Rb A B gnx\n   {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s \\<inter>\n     UNIV \\<times>\n     (l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter>\n      l2_inv7 \\<inter>\n      l2_inv8)} l1_step4 Rb A B gnx, l2_step4 Rb A B gnx {> R12s}", "proof (auto simp add: PO_rhoare_defs R12s_defs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "fix s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "assume Hi:\"s \\<in> l2_inv1\" \"s \\<in> l2_inv3\" \"s \\<in> l2_inv4\" \"s \\<in> l2_inv4'\" \"s \\<in> l2_inv7\""], ["proof (state)\nthis:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "assume Ht: \"(s, s') \\<in> l2_step4 Rb A B gnx\""], ["proof (state)\nthis:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "assume \"s \\<in> l2_inv8\""], ["proof (state)\nthis:\n  s \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "with Hi Ht l2_inv8_step4"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter>\n   l2_inv4'} l2_step4 ?Rb ?A ?B ?gnx {> l2_inv8}\n  s \\<in> l2_inv8", "have Hi':\"s' \\<in> l2_inv8\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  {l2_inv8 \\<inter> l2_inv1 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter>\n   l2_inv4'} l2_step4 ?Rb ?A ?B ?gnx {> l2_inv8}\n  s \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. s' \\<in> l2_inv8", "by (auto simp add: PO_hoare_defs, blast)"], ["proof (state)\nthis:\n  s' \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "from Ht"], ["proof (chain)\npicking this:\n  (s, s') \\<in> l2_step4 Rb A B gnx", "have \"Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb$ny)) \\<in> secret s'\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n\ngoal (1 subgoal):\n 1. Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb $ ny)) \\<in> secret s'", "by (auto simp add: l2_defs)"], ["proof (state)\nthis:\n  Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb $ ny)) \\<in> secret s'\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "with Hi'"], ["proof (chain)\npicking this:\n  s' \\<in> l2_inv8\n  Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb $ ny)) \\<in> secret s'", "have \"Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb$ny)) \\<notin> synth (analz generators)\""], ["proof (prove)\nusing this:\n  s' \\<in> l2_inv8\n  Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb $ ny)) \\<in> secret s'\n\ngoal (1 subgoal):\n 1. Rb = test \\<longrightarrow>\n    Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz generators)", "by (auto dest: l2_inv8_aux)"], ["proof (state)\nthis:\n  Rb = test \\<longrightarrow>\n  Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz generators)\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "with Hi"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  Rb = test \\<longrightarrow>\n  Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz generators)", "have G2:\"Rb = test \\<longrightarrow> Exp gnx (NonceF (Rb$ny)) \\<notin> synth (analz (ik s))\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n  Rb = test \\<longrightarrow>\n  Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz generators)\n\ngoal (1 subgoal):\n 1. Rb = test \\<longrightarrow>\n    Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz (ik s))", "by (auto dest!: l2_inv7D_aux)"], ["proof (state)\nthis:\n  Rb = test \\<longrightarrow>\n  Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz (ik s))\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "from Ht Hi"], ["proof (chain)\npicking this:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7", "have G1:\n    \"can_signal s A B \\<longrightarrow> (\\<exists> Ra. guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<and>\n              in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n              guessed_frame Ra xgnx = Some gnx \\<and>\n              guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb$ny))))\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  s \\<in> l2_inv1\n  s \\<in> l2_inv3\n  s \\<in> l2_inv4\n  s \\<in> l2_inv4'\n  s \\<in> l2_inv7\n\ngoal (1 subgoal):\n 1. can_signal s A B \\<longrightarrow>\n    (\\<exists>Ra.\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr> \\<and>\n        in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n        guessed_frame Ra xgnx = Some gnx \\<and>\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny))))", "by (auto dest!: l2_inv3D [rotated 2] simp add: l2_defs)"], ["proof (state)\nthis:\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Ra.\n      guessed_runs Ra =\n      \\<lparr>role = Init, owner = A, partner = B\\<rparr> \\<and>\n      in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Ra xgnx = Some gnx \\<and>\n      guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny))))\n\ngoal (1 subgoal):\n 1. \\<And>b y.\n       \\<lbrakk>y \\<in> l2_inv1; y \\<in> l2_inv3; y \\<in> l2_inv4;\n        y \\<in> l2_inv4'; y \\<in> l2_inv7; y \\<in> l2_inv8;\n        (y, b) \\<in> l2_step4 Rb A B gnx\\<rbrakk>\n       \\<Longrightarrow> (\\<lparr>ik = ik y, secret = secret y,\n                             progress = progress y,\n                             signalsInit = signalsInit y,\n                             signalsResp = signalsResp y\\<rparr>,\n                          \\<lparr>ik = ik b, secret = secret b,\n                             progress = progress b,\n                             signalsInit = signalsInit b,\n                             signalsResp = signalsResp b\\<rparr>)\n                         \\<in> l1_step4 Rb A B gnx", "with Ht G1 G2"], ["proof (chain)\npicking this:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Ra.\n      guessed_runs Ra =\n      \\<lparr>role = Init, owner = A, partner = B\\<rparr> \\<and>\n      in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Ra xgnx = Some gnx \\<and>\n      guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny))))\n  Rb = test \\<longrightarrow>\n  Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz (ik s))\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Ra.\n      guessed_runs Ra =\n      \\<lparr>role = Init, owner = A, partner = B\\<rparr> \\<and>\n      in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Ra xgnx = Some gnx \\<and>\n      guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny))))", "show\n    \"(\\<lparr> ik = ik s, secret = secret s, progress = progress s, \n        signalsInit = signalsInit s, signalsResp = signalsResp s \\<rparr>,\n      \\<lparr> ik = ik s', secret = secret s', progress = progress s', \n        signalsInit = signalsInit s', signalsResp = signalsResp s' \\<rparr>)\n           \\<in> l1_step4 Rb A B gnx\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> l2_step4 Rb A B gnx\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Ra.\n      guessed_runs Ra =\n      \\<lparr>role = Init, owner = A, partner = B\\<rparr> \\<and>\n      in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Ra xgnx = Some gnx \\<and>\n      guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny))))\n  Rb = test \\<longrightarrow>\n  Exp gnx (NonceF (Rb $ ny)) \\<notin> synth (analz (ik s))\n  can_signal s A B \\<longrightarrow>\n  (\\<exists>Ra.\n      guessed_runs Ra =\n      \\<lparr>role = Init, owner = A, partner = B\\<rparr> \\<and>\n      in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Ra xgnx = Some gnx \\<and>\n      guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny))))\n\ngoal (1 subgoal):\n 1. (\\<lparr>ik = ik s, secret = secret s, progress = progress s,\n        signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>,\n     \\<lparr>ik = ik s', secret = secret s', progress = progress s',\n        signalsInit = signalsInit s', signalsResp = signalsResp s'\\<rparr>)\n    \\<in> l1_step4 Rb A B gnx", "apply (auto simp add: l2_step4_def, auto simp add: l1_step4_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>Ra Raa.\n       \\<lbrakk>can_signal s A B;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress s Rb = Some {xny, xgnx, xgny, xsk};\n        in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd};\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        Auth A B\n         \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n           Exp Gen (NonceF (Rb $ ny))\\<rangle>\n        \\<in> chan s;\n        s' = s\n        \\<lparr>progress := progress s(Rb \\<mapsto>\n                  {xny, xgnx, xgny, xsk, xEnd}),\n           signalsResp := (signalsResp s)\n             (Commit A B\n               (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))) :=\n                Suc (signalsResp s\n                      (Commit A B\n                        (Exp (Exp Gen (NonceF (Ra $ nx)))\n                          (NonceF (Rb $ ny))))))\\<rparr>;\n        Rb \\<noteq> test; gnx = Exp Gen (NonceF (Ra $ nx));\n        (s, s\n         \\<lparr>progress := progress s(Rb \\<mapsto>\n                   {xny, xgnx, xgny, xsk, xEnd}),\n            signalsResp := (signalsResp s)\n              (Commit A B\n                (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))) :=\n                 Suc (signalsResp s\n                       (Commit A B\n                         (Exp (Exp Gen (NonceF (Ra $ nx)))\n                           (NonceF (Rb $ ny))))))\\<rparr>)\n        \\<in> l2_step4 Rb A B (Exp Gen (NonceF (Ra $ nx)));\n        guessed_runs Raa =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress s Raa) {xnx, xgnx, xgny, xsk, xEnd};\n        Exp Gen (NonceF (Raa $ nx)) = Exp Gen (NonceF (Ra $ nx));\n        guessed_frame Raa xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        \\<not> can_signal\n                \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n                   signalsInit = signalsInit s,\n                   signalsResp = signalsResp s\\<rparr>\n                A B\\<rbrakk>\n       \\<Longrightarrow> (signalsResp s)\n                         (Commit A B\n                           (Exp (Exp Gen (NonceF (Ra $ nx)))\n                             (NonceF (Rb $ ny))) :=\n                            Suc (signalsResp s\n                                  (Commit A B\n                                    (Exp (Exp Gen (NonceF (Ra $ nx)))\n(NonceF (Rb $ ny)))))) =\n                         signalsResp s\n 2. \\<And>Ra Raa.\n       \\<lbrakk>can_signal s A B;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress s Rb = Some {xny, xgnx, xgny, xsk};\n        in_progressS (progress s Ra) {xnx, xgnx, xgny, xsk, xEnd};\n        guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        Auth A B\n         \\<langle>Number (Suc 0), Exp Gen (NonceF (Ra $ nx)),\n           Exp Gen (NonceF (Rb $ ny))\\<rangle>\n        \\<in> chan s;\n        s' = s\n        \\<lparr>progress := progress s(Rb \\<mapsto>\n                  {xny, xgnx, xgny, xsk, xEnd}),\n           secret :=\n             {x. x =\n                 Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny)) \\<and>\n                 Rb = test} \\<union>\n             secret s,\n           signalsResp := (signalsResp s)\n             (Commit A B\n               (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))) :=\n                Suc (signalsResp s\n                      (Commit A B\n                        (Exp (Exp Gen (NonceF (Ra $ nx)))\n                          (NonceF (Rb $ ny))))))\\<rparr>;\n        Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny))\n        \\<notin> synth (analz (ik s));\n        gnx = Exp Gen (NonceF (Ra $ nx));\n        (s, s\n         \\<lparr>progress := progress s(Rb \\<mapsto>\n                   {xny, xgnx, xgny, xsk, xEnd}),\n            secret :=\n              {x. x =\n                  Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny)) \\<and>\n                  Rb = test} \\<union>\n              secret s,\n            signalsResp := (signalsResp s)\n              (Commit A B\n                (Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))) :=\n                 Suc (signalsResp s\n                       (Commit A B\n                         (Exp (Exp Gen (NonceF (Ra $ nx)))\n                           (NonceF (Rb $ ny))))))\\<rparr>)\n        \\<in> l2_step4 Rb A B (Exp Gen (NonceF (Ra $ nx)));\n        guessed_runs Raa =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress s Raa) {xnx, xgnx, xgny, xsk, xEnd};\n        Exp Gen (NonceF (Raa $ nx)) = Exp Gen (NonceF (Ra $ nx));\n        guessed_frame Raa xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        \\<not> can_signal\n                \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n                   signalsInit = signalsInit s,\n                   signalsResp = signalsResp s\\<rparr>\n                A B\\<rbrakk>\n       \\<Longrightarrow> (signalsResp s)\n                         (Commit A B\n                           (Exp (Exp Gen (NonceF (Ra $ nx)))\n                             (NonceF (Rb $ ny))) :=\n                            Suc (signalsResp s\n                                  (Commit A B\n                                    (Exp (Exp Gen (NonceF (Ra $ nx)))\n(NonceF (Rb $ ny)))))) =\n                         signalsResp s\n 3. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s Rb = Some {xny, xgnx, xgny, xsk};\n     guessed_frame Rb xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Rb \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd})\\<rparr>;\n     Rb \\<noteq> test;\n     (s, s\n      \\<lparr>progress := progress s(Rb \\<mapsto>\n                {xny, xgnx, xgny, xsk, xEnd})\\<rparr>)\n     \\<in> l2_step4 Rb A B gnx;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ra.\n                         guessed_runs Ra =\n                         \\<lparr>role = Init, owner = A,\n                            partner = B\\<rparr> \\<and>\n                         in_progressS (progress s Ra)\n                          {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                         guessed_frame Ra xgnx = Some gnx \\<and>\n                         guessed_frame Ra xgny =\n                         Some (Exp Gen (NonceF (Rb $ ny)))\n 4. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s Rb = Some {xny, xgnx, xgny, xsk};\n     guessed_frame Rb xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Rb \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd})\\<rparr>;\n     Rb \\<noteq> test;\n     (s, s\n      \\<lparr>progress := progress s(Rb \\<mapsto>\n                {xny, xgnx, xgny, xsk, xEnd})\\<rparr>)\n     \\<in> l2_step4 Rb A B gnx;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> signalsResp s = (signalsResp s)\n                      (Commit A B (Exp gnx (NonceF (Rb $ ny))) :=\n                         Suc (signalsResp s\n                               (Commit A B (Exp gnx (NonceF (Rb $ ny))))))\n 5. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s Rb = Some {xny, xgnx, xgny, xsk};\n     guessed_frame Rb xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Rb \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret :=\n          {x. x = Exp gnx (NonceF (Rb $ ny)) \\<and> Rb = test} \\<union>\n          secret s\\<rparr>;\n     Exp gnx (NonceF (test $ ny)) \\<notin> synth (analz (ik s));\n     (s, s\n      \\<lparr>progress := progress s(Rb \\<mapsto>\n                {xny, xgnx, xgny, xsk, xEnd}),\n         secret :=\n           {x. x = Exp gnx (NonceF (Rb $ ny)) \\<and> Rb = test} \\<union>\n           secret s\\<rparr>)\n     \\<in> l2_step4 Rb A B gnx;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ra.\n                         guessed_runs Ra =\n                         \\<lparr>role = Init, owner = A,\n                            partner = B\\<rparr> \\<and>\n                         in_progressS (progress s Ra)\n                          {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                         guessed_frame Ra xgnx = Some gnx \\<and>\n                         guessed_frame Ra xgny =\n                         Some (Exp Gen (NonceF (Rb $ ny)))\n 6. \\<lbrakk>\\<not> can_signal s A B;\n     guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s Rb = Some {xny, xgnx, xgny, xsk};\n     guessed_frame Rb xgnx = Some gnx;\n     Auth A B\n      \\<langle>Number (Suc 0), gnx, Exp Gen (NonceF (Rb $ ny))\\<rangle>\n     \\<in> chan s;\n     s' = s\n     \\<lparr>progress := progress s(Rb \\<mapsto>\n               {xny, xgnx, xgny, xsk, xEnd}),\n        secret :=\n          {x. x = Exp gnx (NonceF (Rb $ ny)) \\<and> Rb = test} \\<union>\n          secret s\\<rparr>;\n     Exp gnx (NonceF (test $ ny)) \\<notin> synth (analz (ik s));\n     (s, s\n      \\<lparr>progress := progress s(Rb \\<mapsto>\n                {xny, xgnx, xgny, xsk, xEnd}),\n         secret :=\n           {x. x = Exp gnx (NonceF (Rb $ ny)) \\<and> Rb = test} \\<union>\n           secret s\\<rparr>)\n     \\<in> l2_step4 Rb A B gnx;\n     can_signal\n      \\<lparr>ik = ik s, secret = secret s, progress = progress s,\n         signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>\n      A B\\<rbrakk>\n    \\<Longrightarrow> signalsResp s = (signalsResp s)\n                      (Commit A B (Exp gnx (NonceF (Rb $ ny))) :=\n                         Suc (signalsResp s\n                               (Commit A B (Exp gnx (NonceF (Rb $ ny))))))", "apply (auto simp add: can_signal_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lparr>ik = ik s, secret = secret s, progress = progress s,\n      signalsInit = signalsInit s, signalsResp = signalsResp s\\<rparr>,\n   \\<lparr>ik = ik s', secret = secret s', progress = progress s',\n      signalsInit = signalsInit s', signalsResp = signalsResp s'\\<rparr>)\n  \\<in> l1_step4 Rb A B gnx\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Attacker events.\\<close>"], ["", "lemma l2_dy_fake_chan_refines_skip:\n  \"{R12s} Id, l2_dy_fake_chan M {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s} Id, l2_dy_fake_chan M {> R12s}", "by (auto simp add: PO_rhoare_defs R12s_defs l2_defs)"], ["", "lemma l2_dy_fake_msg_refines_learn:\n  \"{R12s \\<inter> UNIV \\<times> (l2_inv7 \\<inter> l2_inv8)} l1_learn m, l2_dy_fake_msg m {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s \\<inter>\n     UNIV \\<times>\n     (l2_inv7 \\<inter> l2_inv8)} l1_learn m, l2_dy_fake_msg m {> R12s}", "apply (auto simp add: PO_rhoare_defs R12s_defs l2_loc_defs l1_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv8;\n        m \\<in> dy_fake_msg (bad y) (ik y) (chan y);\n        x \\<in> synth (analz (insert m (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule Fake_insert_dy_fake_msg, erule l2_inv7D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv8;\n        x \\<in> synth (analz (insert m (ik y))); x \\<in> secret y;\n        synth (analz (insert m (ik y)))\n        \\<subseteq> synth (analz generators)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto dest!: l2_inv8_aux)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Compromising events.\\<close>"], ["", "lemma l2_lkr_others_refines_skip:\n  \"{R12s} Id, l2_lkr_others A {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s} Id, l2_lkr_others A {> R12s}", "by (auto simp add: PO_rhoare_defs R12s_defs l2_loc_defs l1_defs)"], ["", "lemma l2_lkr_after_refines_skip:\n  \"{R12s} Id, l2_lkr_after A {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s} Id, l2_lkr_after A {> R12s}", "by (auto simp add: PO_rhoare_defs R12s_defs l2_loc_defs l1_defs)"], ["", "lemma l2_skr_refines_learn:\n  \"{R12s \\<inter> UNIV \\<times> l2_inv7 \\<inter> UNIV \\<times> l2_inv6 \\<inter> UNIV \\<times> l2_inv8} l1_learn K, l2_skr R K {>R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s \\<inter> UNIV \\<times> l2_inv7 \\<inter>\n     UNIV \\<times> l2_inv6 \\<inter>\n     UNIV \\<times> l2_inv8} l1_learn K, l2_skr R K {> R12s}", "proof (auto simp add: PO_rhoare_defs R12s_defs l2_loc_defs l1_defs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "fix s :: l2_state"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "assume H:\"s \\<in> l2_inv7\" \"s \\<in> l2_inv6\"\n         \"R \\<notin> partners\" \"R \\<noteq> test\" \"in_progress (progress s R) xsk\" \"guessed_frame R xsk = Some K\""], ["proof (state)\nthis:\n  s \\<in> l2_inv7\n  s \\<in> l2_inv6\n  R \\<notin> partners\n  R \\<noteq> test\n  in_progress (progress s R) xsk\n  guessed_frame R xsk = Some K\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "assume Hx:\"x \\<in> synth (analz (insert K (ik s)))\""], ["proof (state)\nthis:\n  x \\<in> synth (analz (insert K (ik s)))\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x \\<in> secret s\" \"s \\<in> l2_inv8\""], ["proof (state)\nthis:\n  x \\<in> secret s\n  s \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x \\<in> secret s\n  s \\<in> l2_inv8", "obtain R R' N N' where Hx':\"x = Exp (Exp Gen (NonceF (R$N))) (NonceF (R'$N'))\"\n                                \"R = test \\<and> R' \\<in> partners\""], ["proof (prove)\nusing this:\n  x \\<in> secret s\n  s \\<in> l2_inv8\n\ngoal (1 subgoal):\n 1. (\\<And>R N R' N'.\n        \\<lbrakk>x = Exp (Exp Gen (NonceF (R $ N))) (NonceF (R' $ N'));\n         R = test \\<and> R' \\<in> partners\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: l2_inv8D subsetD)"], ["proof (state)\nthis:\n  x = Exp (Exp Gen (NonceF (R $ N))) (NonceF (R' $ N'))\n  R = test \\<and> R' \\<in> partners\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "from H"], ["proof (chain)\npicking this:\n  s \\<in> l2_inv7\n  s \\<in> l2_inv6\n  R \\<notin> partners\n  R \\<noteq> test\n  in_progress (progress s R) xsk\n  guessed_frame R xsk = Some K", "have \"s \\<lparr>ik := insert K (ik s)\\<rparr> \\<in> l2_inv7\""], ["proof (prove)\nusing this:\n  s \\<in> l2_inv7\n  s \\<in> l2_inv6\n  R \\<notin> partners\n  R \\<noteq> test\n  in_progress (progress s R) xsk\n  guessed_frame R xsk = Some K\n\ngoal (1 subgoal):\n 1. s\\<lparr>ik := insert K (ik s)\\<rparr> \\<in> l2_inv7", "by (auto intro: hoare_apply [OF l2_inv7_skr] simp add: l2_defs)"], ["proof (state)\nthis:\n  s\\<lparr>ik := insert K (ik s)\\<rparr> \\<in> l2_inv7\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "with Hx"], ["proof (chain)\npicking this:\n  x \\<in> synth (analz (insert K (ik s)))\n  s\\<lparr>ik := insert K (ik s)\\<rparr> \\<in> l2_inv7", "have \"x \\<in> synth (analz (generators))\""], ["proof (prove)\nusing this:\n  x \\<in> synth (analz (insert K (ik s)))\n  s\\<lparr>ik := insert K (ik s)\\<rparr> \\<in> l2_inv7\n\ngoal (1 subgoal):\n 1. x \\<in> synth (analz generators)", "by (auto dest: l2_inv7D_aux)"], ["proof (state)\nthis:\n  x \\<in> synth (analz generators)\n\ngoal (1 subgoal):\n 1. \\<And>y x.\n       \\<lbrakk>y \\<in> l2_inv7; y \\<in> l2_inv6; y \\<in> l2_inv8;\n        R \\<noteq> test; R \\<notin> partners;\n        in_progress (progress y R) xsk; guessed_frame R xsk = Some K;\n        x \\<in> synth (analz (insert K (ik y))); x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> False", "with Hx'"], ["proof (chain)\npicking this:\n  x = Exp (Exp Gen (NonceF (R $ N))) (NonceF (R' $ N'))\n  R = test \\<and> R' \\<in> partners\n  x \\<in> synth (analz generators)", "show False"], ["proof (prove)\nusing this:\n  x = Exp (Exp Gen (NonceF (R $ N))) (NonceF (R' $ N'))\n  R = test \\<and> R' \\<in> partners\n  x \\<in> synth (analz generators)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest!: Exp_Exp_Gen_synth dest: Exp_Exp_Gen_inj2 simp add: analz_generators)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Refinement proof.\\<close>"], ["", "lemmas l2_trans_refines_l1_trans = \n  l2_dy_fake_msg_refines_learn l2_dy_fake_chan_refines_skip\n  l2_lkr_others_refines_skip l2_lkr_after_refines_skip l2_skr_refines_learn\n  l2_step1_refines_step1 l2_step2_refines_step2 l2_step3_refines_step3 l2_step4_refines_step4"], ["", "lemma l2_refines_init_l1 [iff]:\n  \"init l2 \\<subseteq> R12s `` (init l1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init l2 \\<subseteq> R12s `` init l1", "by (auto simp add: R12s_defs l1_defs l2_loc_defs)"], ["", "lemma l2_refines_trans_l1 [iff]:\n  \"{R12s \\<inter> (UNIV \\<times> (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter> \n                     l2_inv6 \\<inter> l2_inv7 \\<inter> l2_inv8))}\n     trans l1, trans l2\n   {> R12s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12s \\<inter>\n     UNIV \\<times>\n     (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter>\n      l2_inv4' \\<inter>\n      l2_inv6 \\<inter>\n      l2_inv7 \\<inter>\n      l2_inv8)} TS.trans l1, TS.trans l2 {> R12s}", "by (auto 0 3 simp add: l1_def l2_def l1_trans_def l2_trans_def\n             intro: l2_trans_refines_l1_trans)"], ["", "lemma PO_obs_consistent_R12s [iff]: \n  \"obs_consistent R12s med12s l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R12s med12s l1 l2", "by (auto simp add: obs_consistent_def R12s_def med12s_def l2_defs)"], ["", "lemma l2_refines_l1 [iff]:\n  \"refines \n     (R12s \\<inter> \n      (reach l1 \\<times> (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter> l2_inv4' \\<inter> l2_inv5 \\<inter>\n                                                  l2_inv6 \\<inter> l2_inv7 \\<inter> l2_inv8)))\n     med12s l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines\n     (R12s \\<inter>\n      reach l1 \\<times>\n      (l2_inv1 \\<inter> l2_inv2 \\<inter> l2_inv3 \\<inter> l2_inv4 \\<inter>\n       l2_inv4' \\<inter>\n       l2_inv5 \\<inter>\n       l2_inv6 \\<inter>\n       l2_inv7 \\<inter>\n       l2_inv8))\n     med12s l1 l2", "by (rule Refinement_using_invariants, auto)"], ["", "lemma l2_implements_l1 [iff]:\n  \"implements med12s l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implements med12s l1 l2", "by (rule refinement_soundness) (auto)"], ["", "subsection \\<open>Derived invariants\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>\n  We want to prove @{term \"l2_secrecy\"}:\n  @{term \"dy_fake_msg (bad s) (ik s) (chan s) \\<inter> secret s = {}\"}\n  but by refinement we only get @{term \"l2_partial_secrecy\"}:\n  @{term \"synth (analz (ik s)) \\<inter> secret s = {}\"}\n  This is fine, since a message in\n  @{term \"dy_fake_msg (bad s) (ik s) (chan s)\"} could be added to @{term \"ik s\"},\n  and @{term \"l2_partial_secrecy\"} would still hold for this new state.\n\\<close>"], ["", "definition\n  l2_partial_secrecy :: \"('a l2_state_scheme) set\"\nwhere\n  \"l2_partial_secrecy \\<equiv> {s. synth (analz (ik s)) \\<inter> secret s = {}}\""], ["", "lemma l2_obs_partial_secrecy [iff]: \"oreach l2 \\<subseteq> l2_partial_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach l2 \\<subseteq> l2_partial_secrecy", "apply (rule external_invariant_translation \n         [OF l1_obs_secrecy _ l2_implements_l1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med12s -` l1_secrecy \\<subseteq> l2_partial_secrecy", "apply (auto simp add: med12s_def s0_secrecy_def l2_partial_secrecy_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_oreach_dy_fake_msg:\n  \"\\<lbrakk> s \\<in> oreach l2; x \\<in> dy_fake_msg (bad s) (ik s) (chan s) \\<rbrakk>\n \\<Longrightarrow> s \\<lparr>ik := insert x (ik s)\\<rparr> \\<in> oreach l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> oreach l2;\n     x \\<in> dy_fake_msg (bad s) (ik s) (chan s)\\<rbrakk>\n    \\<Longrightarrow> s\\<lparr>ik := insert x (ik s)\\<rparr> \\<in> oreach l2", "apply (auto simp add: oreach_def, rule, simp_all, \n       simp add: l2_def l2_trans_def l2_dy_fake_msg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach\n                      \\<lparr>init = l2_init,\n                         trans =\n                           (\\<Union>x xa xb xc xd.\n                               (\\<Union>xe.\n                                   (\\<Union>x.\n l2_step1 xd xe x \\<union> l2_step2 xc xe x xb \\<union>\n l2_step3 xd xe x xb \\<union>\n l2_step4 xc xe x xb) \\<union>\n                                   l2_dy_fake_chan xa \\<union>\n                                   {(s, s').\n                                    x \\<in> dy_fake_msg (bad s) (ik s)\n       (chan s) \\<and>\n                                    s' = s\n                                    \\<lparr>ik :=\n        insert x (ik s)\\<rparr>} \\<union>\n                                   l2_lkr_others xe \\<union>\n                                   l2_lkr_after xe) \\<union>\n                               \\<Union> (range (l2_skr xd)))\\<^sup>=,\n                         obs = id\\<rparr>;\n     x \\<in> dy_fake_msg (bad s) (ik s) (chan s)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>xa xb xc xd xe.\n                          (\\<exists>xf.\n                              (\\<exists>xa.\n                                  (s, s\n                                   \\<lparr>ik := insert x (ik s)\\<rparr>)\n                                  \\<in> l2_step1 xe xf xa \\<or>\n                                  (s, s\n                                   \\<lparr>ik := insert x (ik s)\\<rparr>)\n                                  \\<in> l2_step2 xd xf xa xc \\<or>\n                                  (s, s\n                                   \\<lparr>ik := insert x (ik s)\\<rparr>)\n                                  \\<in> l2_step3 xe xf xa xc \\<or>\n                                  (s, s\n                                   \\<lparr>ik := insert x (ik s)\\<rparr>)\n                                  \\<in> l2_step4 xd xf xa xc) \\<or>\n                              (s, s\\<lparr>ik := insert x (ik s)\\<rparr>)\n                              \\<in> l2_dy_fake_chan xb \\<or>\n                              xa \\<in> dy_fake_msg (bad s) (ik s)\n  (chan s) \\<and>\n                              s\\<lparr>ik := insert x (ik s)\\<rparr> = s\n                              \\<lparr>ik := insert xa (ik s)\\<rparr> \\<or>\n                              (s, s\\<lparr>ik := insert x (ik s)\\<rparr>)\n                              \\<in> l2_lkr_others xf \\<or>\n                              (s, s\\<lparr>ik := insert x (ik s)\\<rparr>)\n                              \\<in> l2_lkr_after xf) \\<or>\n                          (\\<exists>xa.\n                              (s, s\\<lparr>ik := insert x (ik s)\\<rparr>)\n                              \\<in> l2_skr xe xa)) \\<or>\n                      s = s\\<lparr>ik := insert x (ik s)\\<rparr>", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \n  l2_secrecy :: \"('a l2_state_scheme) set\"\nwhere\n  \"l2_secrecy \\<equiv> {s. dy_fake_msg (bad s) (ik s) (chan s) \\<inter> secret s = {}}\""], ["", "lemma l2_obs_secrecy [iff]: \"oreach l2 \\<subseteq> l2_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach l2 \\<subseteq> l2_secrecy", "apply (auto simp add:l2_secrecy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> oreach l2;\n        xa \\<in> dy_fake_msg (bad x) (ik x) (chan x);\n        xa \\<in> secret x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule l2_oreach_dy_fake_msg, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<in> dy_fake_msg (bad x) (ik x) (chan x);\n        xa \\<in> secret x;\n        x\\<lparr>ik := insert xa (ik x)\\<rparr> \\<in> oreach l2\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule l2_obs_partial_secrecy [THEN [2] rev_subsetD], simp add: l2_partial_secrecy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<in> dy_fake_msg (bad x) (ik x) (chan x);\n        xa \\<in> secret x;\n        synth (analz (insert xa (ik x))) \\<inter> secret x = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_secrecy [iff]: \"reach l2 \\<subseteq> l2_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_secrecy", "by (rule external_to_internal_invariant [OF l2_obs_secrecy], auto)"], ["", "abbreviation \"l2_iagreement_Init \\<equiv> l1_iagreement_Init\""], ["", "lemma l2_obs_iagreement_Init [iff]: \"oreach l2 \\<subseteq> l2_iagreement_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach l2 \\<subseteq> l2_iagreement_Init", "apply (rule external_invariant_translation \n         [OF l1_obs_iagreement_Init _ l2_implements_l1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med12s -` l2_iagreement_Init \\<subseteq> l2_iagreement_Init", "apply (auto simp add: med12s_def l1_iagreement_Init_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_iagreement_Init [iff]: \"reach l2 \\<subseteq> l2_iagreement_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_iagreement_Init", "by (rule external_to_internal_invariant [OF l2_obs_iagreement_Init], auto)"], ["", "abbreviation \"l2_iagreement_Resp \\<equiv> l1_iagreement_Resp\""], ["", "lemma l2_obs_iagreement_Resp [iff]: \"oreach l2 \\<subseteq> l2_iagreement_Resp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach l2 \\<subseteq> l2_iagreement_Resp", "apply (rule external_invariant_translation \n         [OF l1_obs_iagreement_Resp _ l2_implements_l1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med12s -` l2_iagreement_Resp \\<subseteq> l2_iagreement_Resp", "apply (auto simp add: med12s_def l1_iagreement_Resp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2_iagreement_Resp [iff]: \"reach l2 \\<subseteq> l2_iagreement_Resp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach l2 \\<subseteq> l2_iagreement_Resp", "by (rule external_to_internal_invariant [OF l2_obs_iagreement_Resp], auto)"], ["", "end"]]}