{"file_name": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries/sklvl1.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries", "problem_names": ["lemmas skl1_defs = \n  skl1_def skl1_init_def skl1_trans_def\n  l1_learn_def\n  skl1_step1_def skl1_step2_def skl1_step3_def skl1_step4_def", "lemmas skl1_nostep_defs =\n  skl1_def skl1_init_def skl1_trans_def", "lemma skl1_obs_id [simp]: \"obs skl1 = id\"", "lemma run_ended_trans:\n  \"run_ended (progress s R) \\<Longrightarrow>\n   (s, s') \\<in> trans skl1 \\<Longrightarrow>\n   run_ended (progress s' R)\"", "lemma can_signal_trans:\n  \"can_signal s' A B \\<Longrightarrow>\n  (s, s') \\<in> trans skl1 \\<Longrightarrow>\n  can_signal s A B\"", "lemma med_progress_upd [simp]:\n  \"med_progress (r(R \\<mapsto> S)) = (med_progress r) (R \\<mapsto> S \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})\"", "lemma med_progress_Some: \n  \"r x = Some s \\<Longrightarrow> med_progress r x = Some (s \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})\"", "lemma med_progress_None [simp]: \"med_progress r x = None \\<longleftrightarrow> r x = None\"", "lemma med_progress_Some2 [dest]: \n  \"med_progress r x = Some y \\<Longrightarrow> \\<exists> z. r x = Some z \\<and> y = z \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd}\"", "lemma med_progress_dom [simp]: \"dom (med_progress r) = dom r\"", "lemma med_progress_empty [simp]: \"med_progress Map.empty = Map.empty\"", "lemmas R11_defs = R11_def med11_def", "lemma in_progress_med_progress: \n  \"x \\<in> {xnx, xny, xgnx, xgny, xsk, xEnd} \n  \\<Longrightarrow> in_progress (med_progress r R) x \\<longleftrightarrow> in_progress (r R) x\"", "lemma in_progressS_eq: \"in_progressS S S' \\<longleftrightarrow> (S \\<noteq> None \\<and> (\\<forall> x \\<in> S'. in_progress S x))\"", "lemma in_progressS_med_progress:\n  \"in_progressS (r R) S \n  \\<Longrightarrow> in_progressS (med_progress r R) (S \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})\"", "lemma can_signal_R11 [simp]:\n  \"(s1, s2) \\<in> R11 \\<Longrightarrow>\n   can_signal s1 A B \\<longleftrightarrow> can_signal s2 A B\"", "lemma skl1_learn_refines_learn:\n  \"{R11} l1_learn m, l1_learn m {>R11}\"", "lemma skl1_step1_refines_step1:\n  \"{R11} l1_step1 Ra A B, skl1_step1 Ra A B {>R11}\"", "lemma skl1_step2_refines_step2:\n  \"{R11} l1_step2 Rb A B gnx, skl1_step2 Rb A B Ni gnx {>R11}\"", "lemma skl1_step3_refines_step3:\n  \"{R11} l1_step3 Ra A B gny, skl1_step3 Ra A B Nr gny {>R11}\"", "lemma skl1_step4_refines_step4:\n  \"{R11} l1_step4 Rb A B gnx, skl1_step4 Rb A B Ni gnx {>R11}\"", "lemmas skl1_trans_refines_l1_trans = \n  skl1_learn_refines_learn\n  skl1_step1_refines_step1 skl1_step2_refines_step2 \n  skl1_step3_refines_step3 skl1_step4_refines_step4", "lemma skl1_refines_init_l1 [iff]:\n  \"init skl1 \\<subseteq> R11 `` (init l1)\"", "lemma skl1_refines_trans_l1 [iff]:\n  \"{R11} trans l1, trans skl1 {> R11}\"", "lemma obs_consistent_med11 [iff]: \n  \"obs_consistent R11 med11 l1 skl1\"", "lemma skl1_refines_l1 [iff]: \n  \"refines \n     R11\n     med11 l1 skl1\"", "lemma  skl1_implements_l1 [iff]: \"implements med11 l1 skl1\"", "lemma skl1_obs_secrecy [iff]: \"oreach skl1 \\<subseteq> s0_secrecy\"", "lemma skl1_secrecy [iff]: \"reach skl1 \\<subseteq> s0_secrecy\"", "lemmas skl1_inv1I = skl1_inv1_def [THEN setc_def_to_intro, rule_format]", "lemmas skl1_inv1E [elim] = skl1_inv1_def [THEN setc_def_to_elim, rule_format]", "lemmas skl1_inv1D = skl1_inv1_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma skl1_inv1_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv1\"", "lemma skl1_inv1_trans [iff]:\n  \"{skl1_inv1} trans skl1 {> skl1_inv1}\"", "lemma PO_skl1_inv1 [iff]: \"reach skl1 \\<subseteq> skl1_inv1\"", "lemmas skl1_inv2I = skl1_inv2_def [THEN setc_def_to_intro, rule_format]", "lemmas skl1_inv2E [elim] = skl1_inv2_def [THEN setc_def_to_elim, rule_format]", "lemmas skl1_inv2D = skl1_inv2_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma skl1_inv2_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv2\"", "lemma skl1_inv2_trans [iff]:\n  \"{skl1_inv2} trans skl1 {> skl1_inv2}\"", "lemma PO_skl1_inv2 [iff]: \"reach skl1 \\<subseteq> skl1_inv2\"", "lemmas skl1_inv3I = skl1_inv3_def [THEN setc_def_to_intro, rule_format]", "lemmas skl1_inv3E [elim] = skl1_inv3_def [THEN setc_def_to_elim, rule_format]", "lemmas skl1_inv3D = skl1_inv3_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma skl1_inv3_derived: \"skl1_inv1 \\<inter> skl1_inv2 \\<subseteq> skl1_inv3\"", "lemmas skl1_inv4I = skl1_inv4_def [THEN setc_def_to_intro, rule_format]", "lemmas skl1_inv4E [elim] = skl1_inv4_def [THEN setc_def_to_elim, rule_format]", "lemmas skl1_inv4D = skl1_inv4_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma skl1_inv4_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv4\"", "lemma skl1_inv4_trans [iff]:\n  \"{skl1_inv4} trans skl1 {> skl1_inv4}\"", "lemma PO_skl1_inv4 [iff]: \"reach skl1 \\<subseteq> skl1_inv4\"", "lemmas skl1_inv5I = skl1_inv5_def [THEN setc_def_to_intro, rule_format]", "lemmas skl1_inv5E [elim] = skl1_inv5_def [THEN setc_def_to_elim, rule_format]", "lemmas skl1_inv5D = skl1_inv5_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma skl1_inv5_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv5\"", "lemma skl1_inv5_trans [iff]:\n  \"{skl1_inv5} trans skl1 {> skl1_inv5}\"", "lemma PO_skl1_inv5 [iff]: \"reach skl1 \\<subseteq> skl1_inv5\"", "lemmas skl1_inv6I = skl1_inv6_def [THEN setc_def_to_intro, rule_format]", "lemmas skl1_inv6E [elim] = skl1_inv6_def [THEN setc_def_to_elim, rule_format]", "lemmas skl1_inv6D = skl1_inv6_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]", "lemma skl1_inv6_derived:\n  \"skl1_inv4 \\<inter> skl1_inv5 \\<subseteq> skl1_inv6\"", "lemma skl1_learn_refines_a0_ia_skip_i:\n  \"{R0sk1iai} Id, l1_learn m {>R0sk1iai}\"", "lemma skl1_step1_refines_a0i_skip_i:\n  \"{R0sk1iai} Id, skl1_step1 Ra A B {>R0sk1iai}\"", "lemma skl1_step2_refines_a0i_running_skip_i:\n  \"{R0sk1iai} a0i_running A B \\<langle>Ni, NonceF (Rb$nr),Exp gnx (NonceF (Rb$ny))\\<rangle> \\<union> Id,\n              skl1_step2 Rb A B Ni gnx {>R0sk1iai}\"", "lemma skl1_step3_refines_a0i_commit_skip_i:\n  \"{R0sk1iai \\<inter> (UNIV \\<times> skl1_inv3)}\n      a0i_commit A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle> \\<union> Id,\n      skl1_step3 Ra A B Nr gny\n   {>R0sk1iai}\"", "lemma skl1_step4_refines_a0i_skip_i:\n  \"{R0sk1iai} Id, skl1_step4 Rb A B Ni gnx {>R0sk1iai}\"", "lemmas skl1_trans_refines_a0i_trans_i = \n  skl1_learn_refines_a0_ia_skip_i\n  skl1_step1_refines_a0i_skip_i skl1_step2_refines_a0i_running_skip_i\n  skl1_step3_refines_a0i_commit_skip_i skl1_step4_refines_a0i_skip_i", "lemma skl1_refines_init_a0i_i [iff]:\n  \"init skl1 \\<subseteq> R0sk1iai `` (init a0i)\"", "lemma skl1_refines_trans_a0i_i [iff]:\n  \"{R0sk1iai \\<inter> (UNIV \\<times> (skl1_inv1 \\<inter> skl1_inv2))} trans a0i, trans skl1 {> R0sk1iai}\"", "lemma obs_consistent_med01iai [iff]: \n  \"obs_consistent R0sk1iai med0sk1iai a0i skl1\"", "lemma skl1_refines_a0i_i [iff]: \n  \"refines \n     (R0sk1iai \\<inter> (reach a0i \\<times> (skl1_inv1 \\<inter> skl1_inv2)))\n     med0sk1iai a0i skl1\"", "lemma  skl1_implements_a0i_i [iff]: \"implements med0sk1iai a0i skl1\"", "lemma skl1_obs_iagreement_Init [iff]: \"oreach skl1 \\<subseteq> l1_iagreement_Init\"", "lemma skl1_iagreement_Init [iff]: \"reach skl1 \\<subseteq> l1_iagreement_Init\"", "lemma skl1_learn_refines_a0_ia_skip_r:\n  \"{R0sk1iar} Id, l1_learn m {>R0sk1iar}\"", "lemma skl1_step1_refines_a0i_skip_r:\n  \"{R0sk1iar} Id, skl1_step1 Ra A B {>R0sk1iar}\"", "lemma skl1_step2_refines_a0i_skip_r:\n  \"{R0sk1iar} Id, skl1_step2 Rb A B Ni gnx {>R0sk1iar}\"", "lemma skl1_step3_refines_a0i_running_skip_r:\n  \"{R0sk1iar} \n     a0i_running A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle> \\<union> Id, \n     skl1_step3 Ra A B Nr gny \n   {>R0sk1iar}\"", "lemma skl1_step4_refines_a0i_commit_skip_r:\n  \"{R0sk1iar \\<inter> UNIV\\<times>skl1_inv6} \n      a0i_commit A B \\<langle>Ni, NonceF (Rb$nr), Exp gnx (NonceF (Rb$ny))\\<rangle> \\<union> Id,\n      skl1_step4 Rb A B Ni gnx \n   {>R0sk1iar}\"", "lemmas skl1_trans_refines_a0i_trans_r = \n  skl1_learn_refines_a0_ia_skip_r\n  skl1_step1_refines_a0i_skip_r skl1_step2_refines_a0i_skip_r\n  skl1_step3_refines_a0i_running_skip_r skl1_step4_refines_a0i_commit_skip_r", "lemma skl1_refines_init_a0i_r [iff]:\n  \"init skl1 \\<subseteq> R0sk1iar `` (init a0i)\"", "lemma skl1_refines_trans_a0i_r [iff]:\n  \"{R0sk1iar \\<inter> (UNIV \\<times> (skl1_inv4 \\<inter> skl1_inv5))} trans a0i, trans skl1 {> R0sk1iar}\"", "lemma obs_consistent_med0sk1iar [iff]: \n  \"obs_consistent R0sk1iar med0sk1iar a0i skl1\"", "lemma skl1_refines_a0i_r [iff]: \n  \"refines \n     (R0sk1iar \\<inter> (reach a0i \\<times> (skl1_inv4 \\<inter> skl1_inv5)))\n     med0sk1iar a0i skl1\"", "lemma  skl1_implements_a0i_r [iff]: \"implements med0sk1iar a0i skl1\"", "lemma skl1_obs_iagreement_Resp [iff]: \"oreach skl1 \\<subseteq> l1_iagreement_Resp\"", "lemma skl1_iagreement_Resp [iff]: \"reach skl1 \\<subseteq> l1_iagreement_Resp\""], "translations": [["", "lemmas skl1_defs = \n  skl1_def skl1_init_def skl1_trans_def\n  l1_learn_def\n  skl1_step1_def skl1_step2_def skl1_step3_def skl1_step4_def"], ["", "lemmas skl1_nostep_defs =\n  skl1_def skl1_init_def skl1_trans_def"], ["", "lemma skl1_obs_id [simp]: \"obs skl1 = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs skl1 = id", "by (simp add: skl1_def)"], ["", "lemma run_ended_trans:\n  \"run_ended (progress s R) \\<Longrightarrow>\n   (s, s') \\<in> trans skl1 \\<Longrightarrow>\n   run_ended (progress s' R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>run_ended (progress s R); (s, s') \\<in> TS.trans skl1\\<rbrakk>\n    \\<Longrightarrow> run_ended (progress s' R)", "by (auto simp add: skl1_nostep_defs)\n   (auto simp add: skl1_defs ik_dy_def domIff)"], ["", "lemma can_signal_trans:\n  \"can_signal s' A B \\<Longrightarrow>\n  (s, s') \\<in> trans skl1 \\<Longrightarrow>\n  can_signal s A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>can_signal s' A B; (s, s') \\<in> TS.trans skl1\\<rbrakk>\n    \\<Longrightarrow> can_signal s A B", "by (auto simp add: can_signal_def run_ended_trans)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Refinement: secrecy\\<close>"], ["", "(**************************************************************************************************)"], ["", "fun option_inter :: \"var set \\<Rightarrow> var set option \\<Rightarrow> var set option\"\nwhere\n  \"option_inter S (Some x) = Some (x \\<inter> S)\"\n |\"option_inter S None = None\""], ["", "definition med_progress :: \"progress_t \\<Rightarrow> progress_t\"\nwhere\n  \"med_progress r \\<equiv> \\<lambda> R. option_inter {xnx, xny, xgnx, xgny, xsk, xEnd} (r R)\""], ["", "lemma med_progress_upd [simp]:\n  \"med_progress (r(R \\<mapsto> S)) = (med_progress r) (R \\<mapsto> S \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. med_progress (r(R \\<mapsto> S)) = med_progress r(R \\<mapsto>\n    S \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})", "by (auto simp add: med_progress_def)"], ["", "lemma med_progress_Some: \n  \"r x = Some s \\<Longrightarrow> med_progress r x = Some (s \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r x = Some s \\<Longrightarrow>\n    med_progress r x = Some (s \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})", "by (auto simp add: med_progress_def)"], ["", "lemma med_progress_None [simp]: \"med_progress r x = None \\<longleftrightarrow> r x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (med_progress r x = None) = (r x = None)", "by (cases \"r x\", auto simp add: med_progress_def)"], ["", "lemma med_progress_Some2 [dest]: \n  \"med_progress r x = Some y \\<Longrightarrow> \\<exists> z. r x = Some z \\<and> y = z \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. med_progress r x = Some y \\<Longrightarrow>\n    \\<exists>z.\n       r x = Some z \\<and> y = z \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd}", "by (cases \"r x\", auto simp add: med_progress_def)"], ["", "lemma med_progress_dom [simp]: \"dom (med_progress r) = dom r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (med_progress r) = dom r", "apply (auto simp add: domIff med_progress_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       option_inter {xnx, xny, xgnx, xgny, xsk, xEnd} (r x) =\n       Some y \\<Longrightarrow>\n       \\<exists>y. r x = Some y", "apply (rename_tac x y, case_tac \"r x\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma med_progress_empty [simp]: \"med_progress Map.empty = Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. med_progress Map.empty = Map.empty", "by (rule ext, auto)"], ["", "text \\<open>Mediator function.\\<close>"], ["", "definition \n  med11 :: \"skl1_obs \\<Rightarrow> l1_obs\"\nwhere\n  \"med11 t \\<equiv> \\<lparr>ik = ik t,\n              secret=secret t,\n              progress = med_progress (progress t),\n              signalsInit = signalsInit2 t,\n              signalsResp = signalsResp2 t\\<rparr>\""], ["", "text \\<open>relation between states\\<close>"], ["", "definition\n  R11 :: \"(l1_state * skl1_state) set\"\nwhere\n  \"R11 \\<equiv> {(s,s').\n    s = med11 s'\n    }\""], ["", "lemmas R11_defs = R11_def med11_def"], ["", "lemma in_progress_med_progress: \n  \"x \\<in> {xnx, xny, xgnx, xgny, xsk, xEnd} \n  \\<Longrightarrow> in_progress (med_progress r R) x \\<longleftrightarrow> in_progress (r R) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {xnx, xny, xgnx, xgny, xsk, xEnd} \\<Longrightarrow>\n    in_progress (med_progress r R) x = in_progress (r R) x", "by (cases \"r R\", auto)\n   (cases \"med_progress r R\", auto)+"], ["", "lemma in_progressS_eq: \"in_progressS S S' \\<longleftrightarrow> (S \\<noteq> None \\<and> (\\<forall> x \\<in> S'. in_progress S x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_progressS S S' =\n    (S \\<noteq> None \\<and> (\\<forall>x\\<in>S'. in_progress S x))", "by (cases S, auto)"], ["", "lemma in_progressS_med_progress:\n  \"in_progressS (r R) S \n  \\<Longrightarrow> in_progressS (med_progress r R) (S \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_progressS (r R) S \\<Longrightarrow>\n    in_progressS (med_progress r R)\n     (S \\<inter> {xnx, xny, xgnx, xgny, xsk, xEnd})", "by (auto simp add: in_progressS_eq in_progress_med_progress)"], ["", "lemma can_signal_R11 [simp]:\n  \"(s1, s2) \\<in> R11 \\<Longrightarrow>\n   can_signal s1 A B \\<longleftrightarrow> can_signal s2 A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s1, s2) \\<in> R11 \\<Longrightarrow>\n    can_signal s1 A B = can_signal s2 A B", "by (auto simp add: can_signal_def R11_defs in_progress_med_progress)"], ["", "text \\<open>Protocol-independent events.\\<close>"], ["", "lemma skl1_learn_refines_learn:\n  \"{R11} l1_learn m, l1_learn m {>R11}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R11} l1_learn m, l1_learn m {> R11}", "by (auto simp add: PO_rhoare_defs R11_defs)\n   (simp add: l1_defs)"], ["", "text \\<open>Protocol events.\\<close>"], ["", "lemma skl1_step1_refines_step1:\n  \"{R11} l1_step1 Ra A B, skl1_step1 Ra A B {>R11}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R11} l1_step1 Ra A B, skl1_step1 Ra A B {> R11}", "by (auto simp add: PO_rhoare_defs R11_defs l1_step1_def skl1_step1_def)"], ["", "lemma skl1_step2_refines_step2:\n  \"{R11} l1_step2 Rb A B gnx, skl1_step2 Rb A B Ni gnx {>R11}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R11} l1_step2 Rb A B gnx, skl1_step2 Rb A B Ni gnx {> R11}", "by (auto simp add: PO_rhoare_defs R11_defs  l1_step2_def) \n   (auto simp add: skl1_step2_def)"], ["", "lemma skl1_step3_refines_step3:\n  \"{R11} l1_step3 Ra A B gny, skl1_step3 Ra A B Nr gny {>R11}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R11} l1_step3 Ra A B gny, skl1_step3 Ra A B Nr gny {> R11}", "apply (auto simp add: PO_rhoare_defs R11_defs l1_step3_def)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>b y.\n       (y, b) \\<in> skl1_step3 Ra A B Nr gny \\<Longrightarrow>\n       guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n 2. \\<And>b y.\n       (y, b) \\<in> skl1_step3 Ra A B Nr gny \\<Longrightarrow>\n       med_progress (progress y) Ra = Some {xnx, xgnx}\n 3. \\<And>b y.\n       (y, b) \\<in> skl1_step3 Ra A B Nr gny \\<Longrightarrow>\n       sklvl1.guessed_frame Ra xgny = Some gny\n 4. \\<And>b y.\n       (y, b) \\<in> skl1_step3 Ra A B Nr gny \\<Longrightarrow>\n       sklvl1.guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra $ nx)))\n 5. \\<And>b y.\n       \\<lbrakk>(y, b) \\<in> skl1_step3 Ra A B Nr gny;\n        can_signal y A B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            guessed_runs Rb =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (med_progress (progress y) Rb)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            sklvl1.guessed_frame Rb xgny = Some gny \\<and>\n                            sklvl1.guessed_frame Rb xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 6. \\<And>b y.\n       \\<lbrakk>(y, b) \\<in> skl1_step3 test A B Nr gny; Ra = test;\n        Exp gny (NonceF (test $ nx)) \\<in> synth (analz (ik y))\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>b y x.\n       \\<lbrakk>(y, b) \\<in> skl1_step3 Ra A B Nr gny; can_signal y A B;\n        x \\<in> ik y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ik b\n 8. \\<And>b y x.\n       \\<lbrakk>(y, b) \\<in> skl1_step3 Ra A B Nr gny; can_signal y A B;\n        x \\<in> ik b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ik y\n 9. \\<And>b y.\n       \\<lbrakk>(y, b) \\<in> skl1_step3 test A B Nr gny; can_signal y A B;\n        Ra = test\\<rbrakk>\n       \\<Longrightarrow> Exp gny (NonceF (test $ nx)) \\<in> secret b\n 10. \\<And>b y x.\n        \\<lbrakk>(y, b) \\<in> skl1_step3 Ra A B Nr gny; can_signal y A B;\n         x \\<in> secret y\\<rbrakk>\n        \\<Longrightarrow> x \\<in> secret b\nA total of 24 subgoals...", "apply (auto simp add: skl1_step3_def, auto dest: med_progress_Some)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y Rb.\n       \\<lbrakk>can_signal y A B;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress y Ra = Some {xnx, xni, xgnx};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx)));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress y Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        Ra \\<noteq> test; gny = Exp Gen (NonceF (Rb $ ny));\n        Nr = NonceF (Rb $ nr)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rba.\n                            guessed_runs Rba =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (med_progress (progress y) Rba)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            sklvl1.guessed_frame Rba xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny))) \\<and>\n                            sklvl1.guessed_frame Rba xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))\n 2. \\<And>y Rb.\n       \\<lbrakk>can_signal y A B;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress y Ra = Some {xnx, xni, xgnx};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx)));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress y Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx))\n        \\<notin> synth (analz (ik y));\n        gny = Exp Gen (NonceF (Rb $ ny)); Nr = NonceF (Rb $ nr)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rba.\n                            guessed_runs Rba =\n                            \\<lparr>role = Resp, owner = B,\n                               partner = A\\<rparr> \\<and>\n                            in_progressS (med_progress (progress y) Rba)\n                             {xny, xgnx, xgny, xsk} \\<and>\n                            sklvl1.guessed_frame Rba xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny))) \\<and>\n                            sklvl1.guessed_frame Rba xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx)))", "apply (drule in_progressS_med_progress, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skl1_step4_refines_step4:\n  \"{R11} l1_step4 Rb A B gnx, skl1_step4 Rb A B Ni gnx {>R11}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R11} l1_step4 Rb A B gnx, skl1_step4 Rb A B Ni gnx {> R11}", "apply (auto simp add: PO_rhoare_defs R11_defs l1_step4_def)"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>b y.\n       (y, b) \\<in> skl1_step4 Rb A B Ni gnx \\<Longrightarrow>\n       guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n 2. \\<And>b y.\n       (y, b) \\<in> skl1_step4 Rb A B Ni gnx \\<Longrightarrow>\n       med_progress (progress y) Rb = Some {xny, xgnx, xgny, xsk}\n 3. \\<And>b y.\n       (y, b) \\<in> skl1_step4 Rb A B Ni gnx \\<Longrightarrow>\n       sklvl1.guessed_frame Rb xgnx = Some gnx\n 4. \\<And>b y.\n       \\<lbrakk>(y, b) \\<in> skl1_step4 Rb A B Ni gnx;\n        can_signal y A B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ra.\n                            guessed_runs Ra =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (med_progress (progress y) Ra)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            sklvl1.guessed_frame Ra xgnx = Some gnx \\<and>\n                            sklvl1.guessed_frame Ra xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 5. \\<And>b y.\n       \\<lbrakk>(y, b) \\<in> skl1_step4 test A B Ni gnx; Rb = test;\n        Exp gnx (NonceF (test $ ny)) \\<in> synth (analz (ik y))\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>b y x.\n       \\<lbrakk>(y, b) \\<in> skl1_step4 Rb A B Ni gnx; can_signal y A B;\n        x \\<in> ik y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ik b\n 7. \\<And>b y x.\n       \\<lbrakk>(y, b) \\<in> skl1_step4 Rb A B Ni gnx; can_signal y A B;\n        x \\<in> ik b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ik y\n 8. \\<And>b y.\n       \\<lbrakk>(y, b) \\<in> skl1_step4 test A B Ni gnx; can_signal y A B;\n        Rb = test\\<rbrakk>\n       \\<Longrightarrow> Exp gnx (NonceF (test $ ny)) \\<in> secret b\n 9. \\<And>b y x.\n       \\<lbrakk>(y, b) \\<in> skl1_step4 Rb A B Ni gnx; can_signal y A B;\n        x \\<in> secret y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> secret b\n 10. \\<And>b y x.\n        \\<lbrakk>(y, b) \\<in> skl1_step4 Rb A B Ni gnx; can_signal y A B;\n         x \\<in> secret b; x \\<notin> secret y\\<rbrakk>\n        \\<Longrightarrow> x = Exp gnx (NonceF (Rb $ ny))\nA total of 23 subgoals...", "apply (auto simp add: skl1_step4_def, auto dest: med_progress_Some)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y Ra.\n       \\<lbrakk>can_signal y A B;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress y Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress y Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        Rb \\<noteq> test; gnx = Exp Gen (NonceF (Ra $ nx));\n        Ni = NonceF (Ra $ ni)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Raa.\n                            guessed_runs Raa =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (med_progress (progress y) Raa)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            sklvl1.guessed_frame Raa xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx))) \\<and>\n                            sklvl1.guessed_frame Raa xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))\n 2. \\<And>y Ra.\n       \\<lbrakk>can_signal y A B;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress y Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress y Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny))\n        \\<notin> synth (analz (ik y));\n        gnx = Exp Gen (NonceF (Ra $ nx)); Ni = NonceF (Ra $ ni)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Raa.\n                            guessed_runs Raa =\n                            \\<lparr>role = Init, owner = A,\n                               partner = B\\<rparr> \\<and>\n                            in_progressS (med_progress (progress y) Raa)\n                             {xnx, xgnx, xgny, xsk, xEnd} \\<and>\n                            sklvl1.guessed_frame Raa xgnx =\n                            Some (Exp Gen (NonceF (Ra $ nx))) \\<and>\n                            sklvl1.guessed_frame Raa xgny =\n                            Some (Exp Gen (NonceF (Rb $ ny)))", "apply (drule in_progressS_med_progress, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Refinement proof.\\<close>"], ["", "lemmas skl1_trans_refines_l1_trans = \n  skl1_learn_refines_learn\n  skl1_step1_refines_step1 skl1_step2_refines_step2 \n  skl1_step3_refines_step3 skl1_step4_refines_step4"], ["", "lemma skl1_refines_init_l1 [iff]:\n  \"init skl1 \\<subseteq> R11 `` (init l1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> R11 `` init l1", "by (auto simp add: R11_defs l1_defs skl1_defs)"], ["", "lemma skl1_refines_trans_l1 [iff]:\n  \"{R11} trans l1, trans skl1 {> R11}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R11} TS.trans l1, TS.trans skl1 {> R11}", "by (auto 0 3 simp add: l1_def skl1_def l1_trans_def skl1_trans_def \n             intro: skl1_trans_refines_l1_trans)"], ["", "lemma obs_consistent_med11 [iff]: \n  \"obs_consistent R11 med11 l1 skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R11 med11 l1 skl1", "by (auto simp add: obs_consistent_def R11_defs)"], ["", "text \\<open>Refinement result.\\<close>"], ["", "lemma skl1_refines_l1 [iff]: \n  \"refines \n     R11\n     med11 l1 skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines R11 med11 l1 skl1", "by (auto simp add:refines_def PO_refines_def)"], ["", "lemma  skl1_implements_l1 [iff]: \"implements med11 l1 skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implements med11 l1 skl1", "by (rule refinement_soundness) (fast)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Derived invariants: secrecy\\<close>"], ["", "(**************************************************************************************************)"], ["", "lemma skl1_obs_secrecy [iff]: \"oreach skl1 \\<subseteq> s0_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach skl1 \\<subseteq> l1_secrecy", "apply (rule external_invariant_translation [OF l1_obs_secrecy _ skl1_implements_l1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med11 -` l1_secrecy \\<subseteq> l1_secrecy", "apply (auto simp add: med11_def s0_secrecy_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skl1_secrecy [iff]: \"reach skl1 \\<subseteq> s0_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> l1_secrecy", "by (rule external_to_internal_invariant [OF skl1_obs_secrecy], auto)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Invariants: @{term \"Init\"} authenticates @{term \"Resp\"}\\<close>"], ["", "(**************************************************************************************************)"], ["", "subsubsection \\<open>inv1\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If an initiator commit signal exists for @{term \"Ra$ni\"}, @{term \"Nr\"},\n  $(@{term \"g\"}^@{term \"ny\"})^@{term \"Ra$nx\"}$, then @{term \"Ra\"} is\n  @{term \"Init\"}, has passed step 3, and has the nonce @{term \"Nr\"}, and\n  \\<open>(g^ny)^(Ra$nx)\\<close> as the key in its frame. \n\\<close>"], ["", "definition\n  skl1_inv1 :: \"skl1_state set\"\nwhere\n  \"skl1_inv1 \\<equiv> {s. \\<forall> Ra A B gny Nr.\n    signalsInit s (Commit A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle>) > 0 \\<longrightarrow>\n      guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<and>\n      progress s Ra = Some {xnx, xni, xnr, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Ra xnr = Some Nr \\<and>\n      guessed_frame Ra xsk = Some (Exp gny (NonceF (Ra$nx)))\n   }\""], ["", "lemmas skl1_inv1I = skl1_inv1_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas skl1_inv1E [elim] = skl1_inv1_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas skl1_inv1D = skl1_inv1_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma skl1_inv1_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> skl1_inv1", "by (auto simp add: skl1_def skl1_init_def skl1_inv1_def)"], ["", "lemma skl1_inv1_trans [iff]:\n  \"{skl1_inv1} trans skl1 {> skl1_inv1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {skl1_inv1} TS.trans skl1 {> skl1_inv1}", "apply (auto simp add: PO_hoare_defs skl1_nostep_defs intro!: skl1_inv1I)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>x Ra A B gny Nr xa xb xd xe.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> guessed_runs Ra =\n                         \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n 2. \\<And>x Ra A B gny Nr xa xb xd xe.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> progress x Ra =\n                         Some {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\n 3. \\<And>x Ra A B gny Nr xa xb xd xe.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Ra xnr = Some Nr\n 4. \\<And>x Ra A B gny Nr xa xb xd xe.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 5. \\<And>x Ra A B gny Nr xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> guessed_runs Ra =\n                         \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n 6. \\<And>x Ra A B gny Nr xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> progress x Ra =\n                         Some {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\n 7. \\<And>x Ra A B gny Nr xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Ra xnr = Some Nr\n 8. \\<And>x Ra A B gny Nr xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Ra xsk =\n                         Some (Exp gny (NonceF (Ra $ nx)))\n 9. \\<And>x Ra A B gny Nr xa xb xd xe xf xg.\n       \\<lbrakk>0 < signalsInit x\n                     (Commit A B\n                       \\<langle>NonceF (Ra $ ni), Nr,\n                         Exp gny (NonceF (Ra $ nx))\\<rangle>);\n        xa \\<in> skl1_inv1; (xa, x) \\<in> skl1_step3 xb xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> guessed_runs Ra =\n                         \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n 10. \\<And>x Ra A B gny Nr xa xb xd xe xf xg.\n        \\<lbrakk>0 < signalsInit x\n                      (Commit A B\n                        \\<langle>NonceF (Ra $ ni), Nr,\n                          Exp gny (NonceF (Ra $ nx))\\<rangle>);\n         xa \\<in> skl1_inv1;\n         (xa, x) \\<in> skl1_step3 xb xd xe xf xg\\<rbrakk>\n        \\<Longrightarrow> progress x Ra =\n                          Some {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\nA total of 20 subgoals...", "apply (auto simp add: skl1_defs ik_dy_def skl1_inv1_def domIff dest: Exp_Exp_Gen_inj2 [OF sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_skl1_inv1 [iff]: \"reach skl1 \\<subseteq> skl1_inv1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> skl1_inv1", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv2\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If a @{term \"Resp\"} run @{term \"Rb\"} has passed step 2 then (if possible) \nan initiator running signal has been emitted.\\<close>"], ["", "definition\n  skl1_inv2 :: \"skl1_state set\"\nwhere\n  \"skl1_inv2 \\<equiv> {s. \\<forall> gnx A B Rb Ni.\n    guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<longrightarrow>\n    in_progressS (progress s Rb) {xny, xni, xnr, xgnx, xgny, xsk} \\<longrightarrow>\n    guessed_frame Rb xgnx = Some gnx \\<longrightarrow>\n    guessed_frame Rb xni = Some Ni \\<longrightarrow>\n    can_signal s A B \\<longrightarrow>\n      signalsInit s (Running A B \\<langle>Ni, NonceF (Rb$nr), Exp gnx (NonceF (Rb$ny))\\<rangle>) > 0\n  }\""], ["", "lemmas skl1_inv2I = skl1_inv2_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas skl1_inv2E [elim] = skl1_inv2_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas skl1_inv2D = skl1_inv2_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma skl1_inv2_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> skl1_inv2", "by (auto simp add: skl1_def skl1_init_def skl1_inv2_def)"], ["", "lemma skl1_inv2_trans [iff]:\n  \"{skl1_inv2} trans skl1 {> skl1_inv2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {skl1_inv2} TS.trans skl1 {> skl1_inv2}", "apply (auto simp add: PO_hoare_defs intro!: skl1_inv2I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x gnx A B Rb Ni xa.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; can_signal x A B;\n        xa \\<in> skl1_inv2; (xa, x) \\<in> TS.trans skl1\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)", "apply (drule can_signal_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x gnx A B Rb Ni xa.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; xa \\<in> skl1_inv2;\n        (xa, x) \\<in> TS.trans skl1; can_signal xa A B\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)", "apply (auto simp add: skl1_nostep_defs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x gnx A B Rb Ni xa xb xd xe.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; xa \\<in> skl1_inv2;\n        can_signal xa A B; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)\n 2. \\<And>x gnx A B Rb Ni xa xc xd xe xf xg.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; xa \\<in> skl1_inv2;\n        can_signal xa A B; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)\n 3. \\<And>x gnx A B Rb Ni xa xb xd xe xf xg.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; xa \\<in> skl1_inv2;\n        can_signal xa A B; (xa, x) \\<in> skl1_step3 xb xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)\n 4. \\<And>x gnx A B Rb Ni xa xc xd xe xf xg.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; xa \\<in> skl1_inv2;\n        can_signal xa A B; (xa, x) \\<in> skl1_step4 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)\n 5. \\<And>x gnx A B Rb Ni xa xb.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some gnx;\n        sklvl1.guessed_frame Rb xni = Some Ni; xa \\<in> skl1_inv2;\n        can_signal xa A B; (xa, x) \\<in> l1_learn xb\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsInit x\n                              (Running A B\n                                \\<langle>Ni, NonceF (Rb $ nr),\n                                  Exp gnx (NonceF (Rb $ ny))\\<rangle>)", "apply (auto simp add: skl1_defs ik_dy_def skl1_inv2_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_skl1_inv2 [iff]: \"reach skl1 \\<subseteq> skl1_inv2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> skl1_inv2", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv3 (derived)\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If an @{term \"Init\"} run before step 3 and a @{term \"Resp\"} run after step 2 both know\n  the same half-keys and nonces (more or less), then the number of @{term \"Init\"} running signals\n  for the key is strictly greater than the number of @{term \"Init\"} commit signals.\n  (actually, there are 0 commit and 1 running).\n\\<close>"], ["", "definition\n  skl1_inv3 :: \"skl1_state set\"\nwhere\n  \"skl1_inv3 \\<equiv> {s. \\<forall> A B Rb Ra gny Nr.\n    guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<longrightarrow>\n    in_progressS (progress s Rb) {xny, xni, xnr, xgnx, xgny, xsk} \\<longrightarrow>\n    guessed_frame Rb xgny = Some gny \\<longrightarrow>\n    guessed_frame Rb xnr = Some Nr \\<longrightarrow>\n    guessed_frame Rb xni = Some (NonceF (Ra$ni)) \\<longrightarrow>\n    guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra$nx))) \\<longrightarrow>\n    guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<longrightarrow>\n    progress s Ra = Some {xnx, xgnx, xni} \\<longrightarrow>\n    can_signal s A B \\<longrightarrow>\n      signalsInit s (Commit A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle>) \n    < signalsInit s (Running A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle>) \n  }\""], ["", "lemmas skl1_inv3I = skl1_inv3_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas skl1_inv3E [elim] = skl1_inv3_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas skl1_inv3D = skl1_inv3_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma skl1_inv3_derived: \"skl1_inv1 \\<inter> skl1_inv2 \\<subseteq> skl1_inv3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skl1_inv1 \\<inter> skl1_inv2 \\<subseteq> skl1_inv3", "apply (auto intro!:skl1_inv3I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Rb =\n                \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress x Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress x Ra = Some {xnx, xgnx, xni}; can_signal x A B;\n        x \\<in> skl1_inv1; x \\<in> skl1_inv2\\<rbrakk>\n       \\<Longrightarrow> signalsInit x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsInit x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "apply (auto dest!: skl1_inv2D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>in_progressS (progress x Rb)\n                 {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress x Ra = Some {xnx, xgnx, xni}; can_signal x A B;\n        x \\<in> skl1_inv1; x \\<in> skl1_inv2;\n        0 < signalsInit x\n             (Running A B\n               \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                 Exp (Exp Gen (NonceF (Rb $ ny)))\n                  (NonceF (Ra $ nx))\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> signalsInit x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsInit x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "apply (rename_tac x A B Rb Ra)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>in_progressS (progress x Rb)\n                 {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress x Ra = Some {xnx, xgnx, xni}; can_signal x A B;\n        x \\<in> skl1_inv1; x \\<in> skl1_inv2;\n        0 < signalsInit x\n             (Running A B\n               \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                 Exp (Exp Gen (NonceF (Rb $ ny)))\n                  (NonceF (Ra $ nx))\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> signalsInit x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsInit x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "apply (case_tac \n  \"signalsInit x (Commit A B \n     \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr), \n      Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) > 0\", auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>in_progressS (progress x Rb)\n                 {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress x Ra = Some {xnx, xgnx, xni}; can_signal x A B;\n        x \\<in> skl1_inv1; x \\<in> skl1_inv2;\n        0 < signalsInit x\n             (Running A B\n               \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                 Exp (Exp Gen (NonceF (Rb $ ny)))\n                  (NonceF (Ra $ nx))\\<rangle>);\n        0 < signalsInit x\n             (Commit A B\n               \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                 Exp (Exp Gen (NonceF (Rb $ ny)))\n                  (NonceF (Ra $ nx))\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> signalsInit x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsInit x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "apply (fastforce dest: skl1_inv1D elim: equalityE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Invariants: Resp authenticates Init\\<close>"], ["", "(**************************************************************************************************)"], ["", "subsubsection \\<open>inv4\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If a @{term \"Resp\"} commit signal exists for @{term \"Ni\"}, @{term \"Rb$nr\"},\n  $(@{term \"g\"}^@{term \"nx\"})^@{term \"Rb$ny\"}$\n  then @{term \"Rb\"} is @{term \"Resp\"}, has finished its run, and has the nonce @{term \"Ni\"} and\n  $(@{term \"g\"}^@{term \"nx\"})^@{term \"Rb$ny\"}$ as the key in its frame.\n\\<close>"], ["", "definition\n  skl1_inv4 :: \"skl1_state set\"\nwhere\n  \"skl1_inv4 \\<equiv> {s. \\<forall> Rb A B gnx Ni.\n    signalsResp s (Commit A B \\<langle>Ni, NonceF (Rb$nr), Exp gnx (NonceF (Rb$ny))\\<rangle>) > 0 \\<longrightarrow>\n      guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<and>\n      progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk, xEnd} \\<and>\n      guessed_frame Rb xgnx = Some gnx \\<and>\n      guessed_frame Rb xni = Some Ni\n   }\""], ["", "lemmas skl1_inv4I = skl1_inv4_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas skl1_inv4E [elim] = skl1_inv4_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas skl1_inv4D = skl1_inv4_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma skl1_inv4_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> skl1_inv4", "by (auto simp add: skl1_def skl1_init_def skl1_inv4_def)"], ["", "lemma skl1_inv4_trans [iff]:\n  \"{skl1_inv4} trans skl1 {> skl1_inv4}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {skl1_inv4} TS.trans skl1 {> skl1_inv4}", "apply (auto simp add: PO_hoare_defs skl1_nostep_defs intro!: skl1_inv4I)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>x Rb A B gnx Ni xa xb xd xe.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> guessed_runs Rb =\n                         \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n 2. \\<And>x Rb A B gnx Ni xa xb xd xe.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> progress x Rb =\n                         Some {xny, xni, xnr, xgnx, xgny, xsk, xEnd}\n 3. \\<And>x Rb A B gnx Ni xa xb xd xe.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Rb xgnx = Some gnx\n 4. \\<And>x Rb A B gnx Ni xa xb xd xe.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Rb xni = Some Ni\n 5. \\<And>x Rb A B gnx Ni xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> guessed_runs Rb =\n                         \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n 6. \\<And>x Rb A B gnx Ni xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> progress x Rb =\n                         Some {xny, xni, xnr, xgnx, xgny, xsk, xEnd}\n 7. \\<And>x Rb A B gnx Ni xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Rb xgnx = Some gnx\n 8. \\<And>x Rb A B gnx Ni xa xc xd xe xf xg.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> sklvl1.guessed_frame Rb xni = Some Ni\n 9. \\<And>x Rb A B gnx Ni xa xb xd xe xf xg.\n       \\<lbrakk>0 < signalsResp x\n                     (Commit A B\n                       \\<langle>Ni, NonceF (Rb $ nr),\n                         Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n        xa \\<in> skl1_inv4; (xa, x) \\<in> skl1_step3 xb xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> guessed_runs Rb =\n                         \\<lparr>role = Resp, owner = B, partner = A\\<rparr>\n 10. \\<And>x Rb A B gnx Ni xa xb xd xe xf xg.\n        \\<lbrakk>0 < signalsResp x\n                      (Commit A B\n                        \\<langle>Ni, NonceF (Rb $ nr),\n                          Exp gnx (NonceF (Rb $ ny))\\<rangle>);\n         xa \\<in> skl1_inv4;\n         (xa, x) \\<in> skl1_step3 xb xd xe xf xg\\<rbrakk>\n        \\<Longrightarrow> progress x Rb =\n                          Some {xny, xni, xnr, xgnx, xgny, xsk, xEnd}\nA total of 20 subgoals...", "apply (auto simp add: skl1_inv4_def skl1_defs ik_dy_def domIff dest: Exp_Exp_Gen_inj2 [OF sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_skl1_inv4 [iff]: \"reach skl1 \\<subseteq> skl1_inv4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> skl1_inv4", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv5\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If an @{term \"Init\"} run @{term \"Ra\"} has passed step3 then (if possible) a\n@{term \"Resp\"} running signal has been emitted.\\<close>"], ["", "definition\n  skl1_inv5 :: \"skl1_state set\"\nwhere\n  \"skl1_inv5 \\<equiv> {s. \\<forall> gny A B Ra Nr.\n    guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<longrightarrow>\n    in_progressS (progress s Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd} \\<longrightarrow>\n    guessed_frame Ra xgny = Some gny \\<longrightarrow>\n    guessed_frame Ra xnr = Some Nr \\<longrightarrow>\n    can_signal s A B \\<longrightarrow>\n      signalsResp s (Running A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle>) > 0\n  }\""], ["", "lemmas skl1_inv5I = skl1_inv5_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas skl1_inv5E [elim] = skl1_inv5_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas skl1_inv5D = skl1_inv5_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma skl1_inv5_init [iff]:\n  \"init skl1 \\<subseteq> skl1_inv5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> skl1_inv5", "by (auto simp add: skl1_def skl1_init_def skl1_inv5_def)"], ["", "lemma skl1_inv5_trans [iff]:\n  \"{skl1_inv5} trans skl1 {> skl1_inv5}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {skl1_inv5} TS.trans skl1 {> skl1_inv5}", "apply (auto simp add: PO_hoare_defs intro!: skl1_inv5I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x gny A B Ra Nr xa.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; can_signal x A B;\n        xa \\<in> skl1_inv5; (xa, x) \\<in> TS.trans skl1\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)", "apply (drule can_signal_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x gny A B Ra Nr xa.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; xa \\<in> skl1_inv5;\n        (xa, x) \\<in> TS.trans skl1; can_signal xa A B\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)", "apply (auto simp add: skl1_nostep_defs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x gny A B Ra Nr xa xb xd xe.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; xa \\<in> skl1_inv5;\n        can_signal xa A B; (xa, x) \\<in> skl1_step1 xb xd xe\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)\n 2. \\<And>x gny A B Ra Nr xa xc xd xe xf xg.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; xa \\<in> skl1_inv5;\n        can_signal xa A B; (xa, x) \\<in> skl1_step2 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)\n 3. \\<And>x gny A B Ra Nr xa xb xd xe xf xg.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; xa \\<in> skl1_inv5;\n        can_signal xa A B; (xa, x) \\<in> skl1_step3 xb xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)\n 4. \\<And>x gny A B Ra Nr xa xc xd xe xf xg.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; xa \\<in> skl1_inv5;\n        can_signal xa A B; (xa, x) \\<in> skl1_step4 xc xd xe xf xg\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)\n 5. \\<And>x gny A B Ra Nr xa xb.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some gny;\n        sklvl1.guessed_frame Ra xnr = Some Nr; xa \\<in> skl1_inv5;\n        can_signal xa A B; (xa, x) \\<in> l1_learn xb\\<rbrakk>\n       \\<Longrightarrow> 0 < signalsResp x\n                              (Running A B\n                                \\<langle>NonceF (Ra $ ni), Nr,\n                                  Exp gny (NonceF (Ra $ nx))\\<rangle>)", "apply (auto simp add: skl1_defs ik_dy_def dest: skl1_inv5D)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_skl1_inv5 [iff]: \"reach skl1 \\<subseteq> skl1_inv5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> skl1_inv5", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>inv6 (derived)\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>If a @{term \"Resp\"} run before step 4 and an @{term \"Init\"} run after step 3 both know\n  the same half-keys (more or less), then the number of @{term \"Resp\"} running signals\n  for the key is strictly greater than the number of @{term \"Resp\"} commit signals.\n  (actually, there are 0 commit and 1 running).\n\\<close>"], ["", "definition\n  skl1_inv6 :: \"skl1_state set\"\nwhere\n  \"skl1_inv6 \\<equiv> {s. \\<forall> A B Rb Ra gnx Ni.\n    guessed_runs Ra = \\<lparr>role=Init, owner=A, partner=B\\<rparr> \\<longrightarrow>\n    in_progressS (progress s Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd} \\<longrightarrow>\n    guessed_frame Ra xgnx = Some gnx \\<longrightarrow>\n    guessed_frame Ra xni = Some Ni \\<longrightarrow>\n    guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb$ny))) \\<longrightarrow>\n    guessed_frame Ra xnr = Some (NonceF (Rb$nr)) \\<longrightarrow>\n    guessed_runs Rb = \\<lparr>role=Resp, owner=B, partner=A\\<rparr> \\<longrightarrow>\n    progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk} \\<longrightarrow>\n    can_signal s A B \\<longrightarrow>\n      signalsResp s (Commit A B \\<langle>Ni, NonceF (Rb$nr), Exp gnx (NonceF (Rb$ny))\\<rangle>) \n    < signalsResp s (Running A B \\<langle>Ni, NonceF (Rb$nr), Exp gnx (NonceF (Rb$ny))\\<rangle>) \n  }\""], ["", "lemmas skl1_inv6I = skl1_inv6_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas skl1_inv6E [elim] = skl1_inv6_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas skl1_inv6D = skl1_inv6_def [THEN setc_def_to_dest, rule_format, rotated 1, simplified]"], ["", "lemma skl1_inv6_derived:\n  \"skl1_inv4 \\<inter> skl1_inv5 \\<subseteq> skl1_inv6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skl1_inv4 \\<inter> skl1_inv5 \\<subseteq> skl1_inv6", "proof (auto intro!: skl1_inv6I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "fix s::skl1_state"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "fix A B Rb Ra"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "assume HRun:\"guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\"\n              \"in_progressS (progress s Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\"\n              \"guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)))\"\n              \"guessed_frame Ra xnr = Some (NonceF (Rb $ nr))\"\n              \"can_signal s A B\""], ["proof (state)\nthis:\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\n  sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)))\n  sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr))\n  can_signal s A B\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "assume HRb: \"progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk}\""], ["proof (state)\nthis:\n  progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk}\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "assume I4:\"s \\<in> skl1_inv4\""], ["proof (state)\nthis:\n  s \\<in> skl1_inv4\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "assume I5:\"s \\<in> skl1_inv5\""], ["proof (state)\nthis:\n  s \\<in> skl1_inv5\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "from I4 HRb"], ["proof (chain)\npicking this:\n  s \\<in> skl1_inv4\n  progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk}", "have \"signalsResp s (Commit A B \\<langle>NonceF (Ra$ni), NonceF (Rb$nr),\n                      Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) > 0 \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  s \\<in> skl1_inv4\n  progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk}\n\ngoal (1 subgoal):\n 1. 0 < signalsResp s\n         (Commit A B\n           \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n             Exp (Exp Gen (NonceF (Rb $ ny)))\n              (NonceF (Ra $ nx))\\<rangle>) \\<Longrightarrow>\n    False", "proof (auto dest!: skl1_inv4D)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> skl1_inv4;\n     {xny, xni, xnr, xgnx, xgny, xsk, xEnd} =\n     {xny, xni, xnr, xgnx, xgny, xsk};\n     guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n     sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n     sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni))\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"{xny, xni, xnr, xgnx, xgny, xsk, xEnd} = {xny, xni, xnr, xgnx, xgny, xsk}\""], ["proof (state)\nthis:\n  {xny, xni, xnr, xgnx, xgny, xsk, xEnd} = {xny, xni, xnr, xgnx, xgny, xsk}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> skl1_inv4;\n     {xny, xni, xnr, xgnx, xgny, xsk, xEnd} =\n     {xny, xni, xnr, xgnx, xgny, xsk};\n     guessed_runs Rb = \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n     progress s Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n     sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n     sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni))\\<rbrakk>\n    \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  {xny, xni, xnr, xgnx, xgny, xsk, xEnd} = {xny, xni, xnr, xgnx, xgny, xsk}\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < signalsResp s\n       (Commit A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny)))\n            (NonceF (Ra $ nx))\\<rangle>) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "then"], ["proof (chain)\npicking this:\n  0 < signalsResp s\n       (Commit A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny)))\n            (NonceF (Ra $ nx))\\<rangle>) \\<Longrightarrow>\n  False", "have HC:\"signalsResp s (Commit A B \\<langle>NonceF (Ra$ni), NonceF (Rb$nr),\n                      Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) = 0\""], ["proof (prove)\nusing this:\n  0 < signalsResp s\n       (Commit A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny)))\n            (NonceF (Ra $ nx))\\<rangle>) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. signalsResp s\n     (Commit A B\n       \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n         Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) =\n    0", "by auto"], ["proof (state)\nthis:\n  signalsResp s\n   (Commit A B\n     \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n       Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) =\n  0\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "from I5 HRun"], ["proof (chain)\npicking this:\n  s \\<in> skl1_inv5\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\n  sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)))\n  sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr))\n  can_signal s A B", "have \"signalsResp s (Running A B \\<langle>NonceF (Ra$ni), NonceF (Rb$nr),\n                      Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) > 0\""], ["proof (prove)\nusing this:\n  s \\<in> skl1_inv5\n  guessed_runs Ra = \\<lparr>role = Init, owner = A, partner = B\\<rparr>\n  in_progressS (progress s Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd}\n  sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)))\n  sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr))\n  can_signal s A B\n\ngoal (1 subgoal):\n 1. 0 < signalsResp s\n         (Running A B\n           \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n             Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)", "by (auto dest!: skl1_inv5D)"], ["proof (state)\nthis:\n  0 < signalsResp s\n       (Running A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>x A B Rb Ra.\n       \\<lbrakk>guessed_runs Ra =\n                \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress x Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress x Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        can_signal x A B; x \\<in> skl1_inv4; x \\<in> skl1_inv5\\<rbrakk>\n       \\<Longrightarrow> signalsResp x\n                          (Commit A B\n                            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                              Exp (Exp Gen (NonceF (Rb $ ny)))\n                               (NonceF (Ra $ nx))\\<rangle>)\n                         < signalsResp x\n                            (Running A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle>)", "with HC"], ["proof (chain)\npicking this:\n  signalsResp s\n   (Commit A B\n     \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n       Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) =\n  0\n  0 < signalsResp s\n       (Running A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)", "show \"signalsResp s (Commit A B \\<langle>NonceF (Ra$ni), NonceF (Rb$nr),\n                      Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\n              < signalsResp s (Running A B \\<langle>NonceF (Ra$ni), NonceF (Rb$nr),\n                      Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\""], ["proof (prove)\nusing this:\n  signalsResp s\n   (Commit A B\n     \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n       Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>) =\n  0\n  0 < signalsResp s\n       (Running A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\n\ngoal (1 subgoal):\n 1. signalsResp s\n     (Commit A B\n       \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n         Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\n    < signalsResp s\n       (Running A B\n         \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n           Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)", "by auto"], ["proof (state)\nthis:\n  signalsResp s\n   (Commit A B\n     \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n       Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\n  < signalsResp s\n     (Running A B\n       \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n         Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Refinement: injective agreement  (Init authenticates Resp)\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>Mediator function.\\<close>"], ["", "definition \n  med0sk1iai :: \"skl1_obs \\<Rightarrow> a0i_obs\"\nwhere\n  \"med0sk1iai t \\<equiv> \\<lparr>a0n_state.signals = signalsInit t\\<rparr>\""], ["", "text \\<open>Relation between states.\\<close>"], ["", "definition\n  R0sk1iai :: \"(a0i_state * skl1_state) set\"\nwhere\n  \"R0sk1iai \\<equiv> {(s,s').\n    a0n_state.signals s = signalsInit s'\n    }\""], ["", "text \\<open>Protocol-independent events.\\<close>"], ["", "lemma skl1_learn_refines_a0_ia_skip_i:\n  \"{R0sk1iai} Id, l1_learn m {>R0sk1iai}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai} Id, l1_learn m {> R0sk1iai}", "apply (auto simp add: PO_rhoare_defs R0sk1iai_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>signals a = signalsInit y; (y, b) \\<in> l1_learn m\\<rbrakk>\n       \\<Longrightarrow> signalsInit y = signalsInit b", "apply (simp add: l1_learn_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Protocol events.\\<close>"], ["", "lemma skl1_step1_refines_a0i_skip_i:\n  \"{R0sk1iai} Id, skl1_step1 Ra A B {>R0sk1iai}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai} Id, skl1_step1 Ra A B {> R0sk1iai}", "by (auto simp add: PO_rhoare_defs R0sk1iai_def skl1_step1_def)"], ["", "lemma skl1_step2_refines_a0i_running_skip_i:\n  \"{R0sk1iai} a0i_running A B \\<langle>Ni, NonceF (Rb$nr),Exp gnx (NonceF (Rb$ny))\\<rangle> \\<union> Id,\n              skl1_step2 Rb A B Ni gnx {>R0sk1iai}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai} (a0i_running A B\n                 \\<langle>Ni, NonceF (Rb $ nr),\n                   Exp gnx\n                    (NonceF\n                      (Rb $\n                       ny))\\<rangle>)\\<^sup>=, skl1_step2 Rb A B Ni\n          gnx {> R0sk1iai}", "by (auto simp add: PO_rhoare_defs R0sk1iai_def, \n    simp_all add: skl1_step2_def a0i_running_def, auto)"], ["", "lemma skl1_step3_refines_a0i_commit_skip_i:\n  \"{R0sk1iai \\<inter> (UNIV \\<times> skl1_inv3)}\n      a0i_commit A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle> \\<union> Id,\n      skl1_step3 Ra A B Nr gny\n   {>R0sk1iai}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times>\n     skl1_inv3} (a0i_commit A B\n                  \\<langle>NonceF (Ra $ ni), Nr,\n                    Exp gny\n                     (NonceF\n                       (Ra $\n                        nx))\\<rangle>)\\<^sup>=, skl1_step3 Ra A B Nr\n           gny {> R0sk1iai}", "apply (auto simp add: PO_rhoare_defs R0sk1iai_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>signals a = signalsInit y; y \\<in> skl1_inv3;\n        (y, b) \\<in> skl1_step3 Ra A B Nr gny\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((a, y)\n                             \\<in> a0i_commit A B\n                                    \\<langle>NonceF (Ra $ ni), Nr,\nExp gny (NonceF (Ra $ nx))\\<rangle> \\<or>\n                             a = y) \\<and>\n                            signals y = signalsInit b", "apply (auto simp add: skl1_step3_def a0i_commit_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a y Rb.\n       \\<lbrakk>signals a = signalsInit y; y \\<in> skl1_inv3;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress y Ra = Some {xnx, xni, xgnx};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx)));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress y Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        Ra \\<noteq> test; can_signal y A B;\n        gny = Exp Gen (NonceF (Rb $ ny)); Nr = NonceF (Rb $ nr)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (signalsInit y\n                              (Commit A B\n                                \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                  Exp (Exp Gen (NonceF (Rb $ ny)))\n                                   (NonceF (Ra $ nx))\\<rangle>)\n                             < signalsInit y\n                                (Running A B\n                                  \\<langle>NonceF (Ra $ ni),\n                                    NonceF (Rb $ nr),\n                                    Exp (Exp Gen (NonceF (Rb $ ny)))\n                                     (NonceF (Ra $ nx))\\<rangle>) \\<and>\n                             ya = a\n                             \\<lparr>signals := (signalsInit y)\n (Commit A B\n   \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n     Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle> :=\n    Suc (signalsInit y\n          (Commit A B\n            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n              Exp (Exp Gen (NonceF (Rb $ ny)))\n               (NonceF (Ra $ nx))\\<rangle>)))\\<rparr> \\<or>\n                             a = ya) \\<and>\n                            signals ya = (signalsInit y)\n                            (Commit A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle> :=\n                               Suc (signalsInit y\n                                     (Commit A B\n \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n   Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)))\n 2. \\<And>a y Rb.\n       \\<lbrakk>signals a = signalsInit y; y \\<in> skl1_inv3;\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        progress y Ra = Some {xnx, xni, xgnx};\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xsk =\n        Some (Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx)));\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        in_progressS (progress y Rb) {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (test $ nx))\n        \\<notin> synth (analz (ik y));\n        can_signal y A B; gny = Exp Gen (NonceF (Rb $ ny));\n        Nr = NonceF (Rb $ nr)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (signalsInit y\n                              (Commit A B\n                                \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                  Exp (Exp Gen (NonceF (Rb $ ny)))\n                                   (NonceF (Ra $ nx))\\<rangle>)\n                             < signalsInit y\n                                (Running A B\n                                  \\<langle>NonceF (Ra $ ni),\n                                    NonceF (Rb $ nr),\n                                    Exp (Exp Gen (NonceF (Rb $ ny)))\n                                     (NonceF (Ra $ nx))\\<rangle>) \\<and>\n                             ya = a\n                             \\<lparr>signals := (signalsInit y)\n (Commit A B\n   \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n     Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle> :=\n    Suc (signalsInit y\n          (Commit A B\n            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n              Exp (Exp Gen (NonceF (Rb $ ny)))\n               (NonceF (Ra $ nx))\\<rangle>)))\\<rparr> \\<or>\n                             a = ya) \\<and>\n                            signals ya = (signalsInit y)\n                            (Commit A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Rb $ ny)))\n                                 (NonceF (Ra $ nx))\\<rangle> :=\n                               Suc (signalsInit y\n                                     (Commit A B\n \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n   Exp (Exp Gen (NonceF (Rb $ ny))) (NonceF (Ra $ nx))\\<rangle>)))", "apply (frule skl1_inv3D, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skl1_step4_refines_a0i_skip_i:\n  \"{R0sk1iai} Id, skl1_step4 Rb A B Ni gnx {>R0sk1iai}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai} Id, skl1_step4 Rb A B Ni gnx {> R0sk1iai}", "by (auto simp add: PO_rhoare_defs R0sk1iai_def, auto simp add: skl1_step4_def)"], ["", "text \\<open>refinement proof\\<close>"], ["", "lemmas skl1_trans_refines_a0i_trans_i = \n  skl1_learn_refines_a0_ia_skip_i\n  skl1_step1_refines_a0i_skip_i skl1_step2_refines_a0i_running_skip_i\n  skl1_step3_refines_a0i_commit_skip_i skl1_step4_refines_a0i_skip_i"], ["", "lemma skl1_refines_init_a0i_i [iff]:\n  \"init skl1 \\<subseteq> R0sk1iai `` (init a0i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> R0sk1iai `` init a0i", "by (auto simp add: R0sk1iai_def a0i_defs skl1_defs)"], ["", "lemma skl1_refines_trans_a0i_i [iff]:\n  \"{R0sk1iai \\<inter> (UNIV \\<times> (skl1_inv1 \\<inter> skl1_inv2))} trans a0i, trans skl1 {> R0sk1iai}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times>\n     (skl1_inv1 \\<inter>\n      skl1_inv2)} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times>\n     (skl1_inv1 \\<inter>\n      skl1_inv2)} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "let ?pre' = \"R0sk1iai \\<inter> (UNIV \\<times> skl1_inv3)\""], ["proof (state)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times>\n     (skl1_inv1 \\<inter>\n      skl1_inv2)} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "show ?thesis (is \"{?pre} ?t1, ?t2 {>?post}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times>\n     (skl1_inv1 \\<inter>\n      skl1_inv2)} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "proof (rule relhoare_conseq_left)"], ["proof (state)\ngoal (2 subgoals):\n 1. {?pre'} TS.trans a0i, TS.trans skl1 {> R0sk1iai}\n 2. R0sk1iai \\<inter> UNIV \\<times> (skl1_inv1 \\<inter> skl1_inv2)\n    \\<subseteq> ?pre'", "show \"?pre \\<subseteq> ?pre'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R0sk1iai \\<inter> UNIV \\<times> (skl1_inv1 \\<inter> skl1_inv2)\n    \\<subseteq> R0sk1iai \\<inter> UNIV \\<times> skl1_inv3", "using skl1_inv3_derived"], ["proof (prove)\nusing this:\n  skl1_inv1 \\<inter> skl1_inv2 \\<subseteq> skl1_inv3\n\ngoal (1 subgoal):\n 1. R0sk1iai \\<inter> UNIV \\<times> (skl1_inv1 \\<inter> skl1_inv2)\n    \\<subseteq> R0sk1iai \\<inter> UNIV \\<times> skl1_inv3", "by blast"], ["proof (state)\nthis:\n  R0sk1iai \\<inter> UNIV \\<times> (skl1_inv1 \\<inter> skl1_inv2)\n  \\<subseteq> R0sk1iai \\<inter> UNIV \\<times> skl1_inv3\n\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times> skl1_inv3} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times> skl1_inv3} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "show \"{?pre'} ?t1, ?t2 {> ?post}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iai \\<inter>\n     UNIV \\<times> skl1_inv3} TS.trans a0i, TS.trans skl1 {> R0sk1iai}", "apply (auto simp add: a0i_def skl1_def a0i_trans_def skl1_trans_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 2. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iai}\n 3. \\<And>x xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iai}\n 4. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 5. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iai}\n 2. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 3. \\<And>x xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iai}\n 4. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 5. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "using skl1_step2_refines_a0i_running_skip_i"], ["proof (prove)\nusing this:\n  {R0sk1iai} (a0i_running ?A ?B\n               \\<langle>?Ni, NonceF (?Rb $ nr),\n                 Exp ?gnx\n                  (NonceF\n                    (?Rb $\n                     ny))\\<rangle>)\\<^sup>=, skl1_step2 ?Rb ?A ?B ?Ni\n        ?gnx {> R0sk1iai}\n\ngoal (5 subgoals):\n 1. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iai}\n 2. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 3. \\<And>x xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iai}\n 4. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 5. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "apply (simp add: PO_rhoare_defs, blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 2. \\<And>x xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iai}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 4. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iai}\n 2. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 4. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "using skl1_step3_refines_a0i_commit_skip_i"], ["proof (prove)\nusing this:\n  {R0sk1iai \\<inter>\n   UNIV \\<times>\n   skl1_inv3} (a0i_commit ?A ?B\n                \\<langle>NonceF (?Ra $ ni), ?Nr,\n                  Exp ?gny\n                   (NonceF\n                     (?Ra $\n                      nx))\\<rangle>)\\<^sup>=, skl1_step3 ?Ra ?A ?B ?Nr\n         ?gny {> R0sk1iai}\n\ngoal (4 subgoals):\n 1. \\<And>x xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iai}\n 2. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 4. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "apply (simp add: PO_rhoare_defs, blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xb xc.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iai}\n 2. \\<And>xa xb xc xd y.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iai}\n 3. \\<And>x.\n       {R0sk1iai \\<inter>\n        UNIV \\<times>\n        skl1_inv3} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iai}", "apply (blast intro!:skl1_trans_refines_a0i_trans_i)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {R0sk1iai \\<inter>\n   UNIV \\<times> skl1_inv3} TS.trans a0i, TS.trans skl1 {> R0sk1iai}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {R0sk1iai \\<inter>\n   UNIV \\<times>\n   (skl1_inv1 \\<inter> skl1_inv2)} TS.trans a0i, TS.trans skl1 {> R0sk1iai}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_consistent_med01iai [iff]: \n  \"obs_consistent R0sk1iai med0sk1iai a0i skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R0sk1iai med0sk1iai a0i skl1", "by (auto simp add: obs_consistent_def R0sk1iai_def med0sk1iai_def)"], ["", "text \\<open>refinement result\\<close>"], ["", "lemma skl1_refines_a0i_i [iff]: \n  \"refines \n     (R0sk1iai \\<inter> (reach a0i \\<times> (skl1_inv1 \\<inter> skl1_inv2)))\n     med0sk1iai a0i skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines\n     (R0sk1iai \\<inter> reach a0i \\<times> (skl1_inv1 \\<inter> skl1_inv2))\n     med0sk1iai a0i skl1", "by (rule Refinement_using_invariants, auto)"], ["", "lemma  skl1_implements_a0i_i [iff]: \"implements med0sk1iai a0i skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implements med0sk1iai a0i skl1", "by (rule refinement_soundness) (fast)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Derived invariants: injective agreement (@{term \"Init\"} authenticates @{term \"Resp\"})\\<close>"], ["", "(**************************************************************************************************)"], ["", "lemma skl1_obs_iagreement_Init [iff]: \"oreach skl1 \\<subseteq> l1_iagreement_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach skl1 \\<subseteq> l1_iagreement_Init", "apply (rule external_invariant_translation \n         [OF PO_a0i_obs_agreement _ skl1_implements_a0i_i])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med0sk1iai -` a0i_agreement \\<subseteq> l1_iagreement_Init", "apply (auto simp add: med0sk1iai_def l1_iagreement_Init_def a0i_agreement_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skl1_iagreement_Init [iff]: \"reach skl1 \\<subseteq> l1_iagreement_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> l1_iagreement_Init", "by (rule external_to_internal_invariant [OF skl1_obs_iagreement_Init], auto)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Refinement: injective agreement  (@{term \"Resp\"} authenticates @{term \"Init\"})\\<close>"], ["", "(**************************************************************************************************)"], ["", "text \\<open>Mediator function.\\<close>"], ["", "definition \n  med0sk1iar :: \"skl1_obs \\<Rightarrow> a0i_obs\"\nwhere\n  \"med0sk1iar t \\<equiv> \\<lparr>a0n_state.signals = signalsResp t\\<rparr>\""], ["", "text \\<open>Relation between states.\\<close>"], ["", "definition\n  R0sk1iar :: \"(a0i_state * skl1_state) set\"\nwhere\n  \"R0sk1iar \\<equiv> {(s,s').\n    a0n_state.signals s = signalsResp s'\n    }\""], ["", "text \\<open>Protocol independent events.\\<close>"], ["", "lemma skl1_learn_refines_a0_ia_skip_r:\n  \"{R0sk1iar} Id, l1_learn m {>R0sk1iar}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar} Id, l1_learn m {> R0sk1iar}", "apply (auto simp add: PO_rhoare_defs R0sk1iar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>signals a = signalsResp y; (y, b) \\<in> l1_learn m\\<rbrakk>\n       \\<Longrightarrow> signalsResp y = signalsResp b", "apply (simp add: l1_learn_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Protocol events.\\<close>"], ["", "lemma skl1_step1_refines_a0i_skip_r:\n  \"{R0sk1iar} Id, skl1_step1 Ra A B {>R0sk1iar}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar} Id, skl1_step1 Ra A B {> R0sk1iar}", "by (auto simp add: PO_rhoare_defs R0sk1iar_def skl1_step1_def)"], ["", "lemma skl1_step2_refines_a0i_skip_r:\n  \"{R0sk1iar} Id, skl1_step2 Rb A B Ni gnx {>R0sk1iar}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar} Id, skl1_step2 Rb A B Ni gnx {> R0sk1iar}", "by (auto simp add: PO_rhoare_defs R0sk1iar_def, auto simp add:skl1_step2_def)"], ["", "lemma skl1_step3_refines_a0i_running_skip_r:\n  \"{R0sk1iar} \n     a0i_running A B \\<langle>NonceF (Ra$ni), Nr, Exp gny (NonceF (Ra$nx))\\<rangle> \\<union> Id, \n     skl1_step3 Ra A B Nr gny \n   {>R0sk1iar}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar} (a0i_running A B\n                 \\<langle>NonceF (Ra $ ni), Nr,\n                   Exp gny\n                    (NonceF\n                      (Ra $\n                       nx))\\<rangle>)\\<^sup>=, skl1_step3 Ra A B Nr\n          gny {> R0sk1iar}", "by (auto simp add: PO_rhoare_defs R0sk1iar_def, \n    simp_all add: skl1_step3_def a0i_running_def, auto)"], ["", "lemma skl1_step4_refines_a0i_commit_skip_r:\n  \"{R0sk1iar \\<inter> UNIV\\<times>skl1_inv6} \n      a0i_commit A B \\<langle>Ni, NonceF (Rb$nr), Exp gnx (NonceF (Rb$ny))\\<rangle> \\<union> Id,\n      skl1_step4 Rb A B Ni gnx \n   {>R0sk1iar}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times>\n     skl1_inv6} (a0i_commit A B\n                  \\<langle>Ni, NonceF (Rb $ nr),\n                    Exp gnx\n                     (NonceF\n                       (Rb $\n                        ny))\\<rangle>)\\<^sup>=, skl1_step4 Rb A B Ni\n           gnx {> R0sk1iar}", "apply (auto simp add: PO_rhoare_defs R0sk1iar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>signals a = signalsResp y; y \\<in> skl1_inv6;\n        (y, b) \\<in> skl1_step4 Rb A B Ni gnx\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((a, y)\n                             \\<in> a0i_commit A B\n                                    \\<langle>Ni, NonceF (Rb $ nr),\nExp gnx (NonceF (Rb $ ny))\\<rangle> \\<or>\n                             a = y) \\<and>\n                            signals y = signalsResp b", "apply (auto simp add: skl1_step4_def a0i_commit_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a y Ra.\n       \\<lbrakk>signals a = signalsResp y; y \\<in> skl1_inv6;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress y Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress y Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        Rb \\<noteq> test; can_signal y A B;\n        gnx = Exp Gen (NonceF (Ra $ nx)); Ni = NonceF (Ra $ ni)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (signalsResp y\n                              (Commit A B\n                                \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                  Exp (Exp Gen (NonceF (Ra $ nx)))\n                                   (NonceF (Rb $ ny))\\<rangle>)\n                             < signalsResp y\n                                (Running A B\n                                  \\<langle>NonceF (Ra $ ni),\n                                    NonceF (Rb $ nr),\n                                    Exp (Exp Gen (NonceF (Ra $ nx)))\n                                     (NonceF (Rb $ ny))\\<rangle>) \\<and>\n                             ya = a\n                             \\<lparr>signals := (signalsResp y)\n (Commit A B\n   \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n     Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))\\<rangle> :=\n    Suc (signalsResp y\n          (Commit A B\n            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n              Exp (Exp Gen (NonceF (Ra $ nx)))\n               (NonceF (Rb $ ny))\\<rangle>)))\\<rparr> \\<or>\n                             a = ya) \\<and>\n                            signals ya = (signalsResp y)\n                            (Commit A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Ra $ nx)))\n                                 (NonceF (Rb $ ny))\\<rangle> :=\n                               Suc (signalsResp y\n                                     (Commit A B\n \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n   Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))\\<rangle>)))\n 2. \\<And>a y Ra.\n       \\<lbrakk>signals a = signalsResp y; y \\<in> skl1_inv6;\n        guessed_runs Rb =\n        \\<lparr>role = Resp, owner = B, partner = A\\<rparr>;\n        progress y Rb = Some {xny, xni, xnr, xgnx, xgny, xsk};\n        sklvl1.guessed_frame Rb xgnx = Some (Exp Gen (NonceF (Ra $ nx)));\n        sklvl1.guessed_frame Rb xni = Some (NonceF (Ra $ ni));\n        guessed_runs Ra =\n        \\<lparr>role = Init, owner = A, partner = B\\<rparr>;\n        in_progressS (progress y Ra) {xnx, xni, xnr, xgnx, xgny, xsk, xEnd};\n        sklvl1.guessed_frame Ra xnr = Some (NonceF (Rb $ nr));\n        sklvl1.guessed_frame Ra xgny = Some (Exp Gen (NonceF (Rb $ ny)));\n        Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (test $ ny))\n        \\<notin> synth (analz (ik y));\n        can_signal y A B; gnx = Exp Gen (NonceF (Ra $ nx));\n        Ni = NonceF (Ra $ ni)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (signalsResp y\n                              (Commit A B\n                                \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                  Exp (Exp Gen (NonceF (Ra $ nx)))\n                                   (NonceF (Rb $ ny))\\<rangle>)\n                             < signalsResp y\n                                (Running A B\n                                  \\<langle>NonceF (Ra $ ni),\n                                    NonceF (Rb $ nr),\n                                    Exp (Exp Gen (NonceF (Ra $ nx)))\n                                     (NonceF (Rb $ ny))\\<rangle>) \\<and>\n                             ya = a\n                             \\<lparr>signals := (signalsResp y)\n (Commit A B\n   \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n     Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))\\<rangle> :=\n    Suc (signalsResp y\n          (Commit A B\n            \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n              Exp (Exp Gen (NonceF (Ra $ nx)))\n               (NonceF (Rb $ ny))\\<rangle>)))\\<rparr> \\<or>\n                             a = ya) \\<and>\n                            signals ya = (signalsResp y)\n                            (Commit A B\n                              \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n                                Exp (Exp Gen (NonceF (Ra $ nx)))\n                                 (NonceF (Rb $ ny))\\<rangle> :=\n                               Suc (signalsResp y\n                                     (Commit A B\n \\<langle>NonceF (Ra $ ni), NonceF (Rb $ nr),\n   Exp (Exp Gen (NonceF (Ra $ nx))) (NonceF (Rb $ ny))\\<rangle>)))", "apply (auto dest!: skl1_inv6D [rotated 1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Refinement proof.\\<close>"], ["", "lemmas skl1_trans_refines_a0i_trans_r = \n  skl1_learn_refines_a0_ia_skip_r\n  skl1_step1_refines_a0i_skip_r skl1_step2_refines_a0i_skip_r\n  skl1_step3_refines_a0i_running_skip_r skl1_step4_refines_a0i_commit_skip_r"], ["", "lemma skl1_refines_init_a0i_r [iff]:\n  \"init skl1 \\<subseteq> R0sk1iar `` (init a0i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init skl1 \\<subseteq> R0sk1iar `` init a0i", "by (auto simp add: R0sk1iar_def a0i_defs skl1_defs)"], ["", "lemma skl1_refines_trans_a0i_r [iff]:\n  \"{R0sk1iar \\<inter> (UNIV \\<times> (skl1_inv4 \\<inter> skl1_inv5))} trans a0i, trans skl1 {> R0sk1iar}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times>\n     (skl1_inv4 \\<inter>\n      skl1_inv5)} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times>\n     (skl1_inv4 \\<inter>\n      skl1_inv5)} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "let ?pre' = \"R0sk1iar \\<inter> (UNIV \\<times> skl1_inv6)\""], ["proof (state)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times>\n     (skl1_inv4 \\<inter>\n      skl1_inv5)} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "show ?thesis (is \"{?pre} ?t1, ?t2 {>?post}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times>\n     (skl1_inv4 \\<inter>\n      skl1_inv5)} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "proof (rule relhoare_conseq_left)"], ["proof (state)\ngoal (2 subgoals):\n 1. {?pre'} TS.trans a0i, TS.trans skl1 {> R0sk1iar}\n 2. R0sk1iar \\<inter> UNIV \\<times> (skl1_inv4 \\<inter> skl1_inv5)\n    \\<subseteq> ?pre'", "show \"?pre \\<subseteq> ?pre'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R0sk1iar \\<inter> UNIV \\<times> (skl1_inv4 \\<inter> skl1_inv5)\n    \\<subseteq> R0sk1iar \\<inter> UNIV \\<times> skl1_inv6", "using skl1_inv6_derived"], ["proof (prove)\nusing this:\n  skl1_inv4 \\<inter> skl1_inv5 \\<subseteq> skl1_inv6\n\ngoal (1 subgoal):\n 1. R0sk1iar \\<inter> UNIV \\<times> (skl1_inv4 \\<inter> skl1_inv5)\n    \\<subseteq> R0sk1iar \\<inter> UNIV \\<times> skl1_inv6", "by blast"], ["proof (state)\nthis:\n  R0sk1iar \\<inter> UNIV \\<times> (skl1_inv4 \\<inter> skl1_inv5)\n  \\<subseteq> R0sk1iar \\<inter> UNIV \\<times> skl1_inv6\n\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times> skl1_inv6} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times> skl1_inv6} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "show \"{?pre'} ?t1, ?t2 {> ?post}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0sk1iar \\<inter>\n     UNIV \\<times> skl1_inv6} TS.trans a0i, TS.trans skl1 {> R0sk1iar}", "apply (auto simp add: a0i_def skl1_def a0i_trans_def skl1_trans_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 2. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 3. \\<And>x xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iar}\n 4. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iar}\n 5. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "prefer 3"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iar}\n 2. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 4. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iar}\n 5. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "using skl1_step3_refines_a0i_running_skip_r"], ["proof (prove)\nusing this:\n  {R0sk1iar} (a0i_running ?A ?B\n               \\<langle>NonceF (?Ra $ ni), ?Nr,\n                 Exp ?gny\n                  (NonceF\n                    (?Ra $\n                     nx))\\<rangle>)\\<^sup>=, skl1_step3 ?Ra ?A ?B ?Nr\n        ?gny {> R0sk1iar}\n\ngoal (5 subgoals):\n 1. \\<And>x xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step3 x xb xc xd\n        y {> R0sk1iar}\n 2. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 4. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iar}\n 5. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "apply (simp add: PO_rhoare_defs, blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 2. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iar}\n 4. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iar}\n 2. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 4. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "using skl1_step4_refines_a0i_commit_skip_r"], ["proof (prove)\nusing this:\n  {R0sk1iar \\<inter>\n   UNIV \\<times>\n   skl1_inv6} (a0i_commit ?A ?B\n                \\<langle>?Ni, NonceF (?Rb $ nr),\n                  Exp ?gnx\n                   (NonceF\n                     (?Rb $\n                      ny))\\<rangle>)\\<^sup>=, skl1_step4 ?Rb ?A ?B ?Ni\n         ?gnx {> R0sk1iar}\n\ngoal (4 subgoals):\n 1. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step4 xa xb xc xd\n        y {> R0sk1iar}\n 2. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 3. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 4. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "apply (simp add: PO_rhoare_defs, blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xb xc.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step1 x xb xc {> R0sk1iar}\n 2. \\<And>xa xb xc xd y.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, skl1_step2 xa xb xc xd\n        y {> R0sk1iar}\n 3. \\<And>x.\n       {R0sk1iar \\<inter>\n        UNIV \\<times>\n        skl1_inv6} ((\\<Union>x xa.\n                        \\<Union> (range (a0i_running x xa))) \\<union>\n                    (\\<Union>x xa.\n                        \\<Union>\n                         (range\n                           (a0i_commit x\n                             xa))))\\<^sup>=, l1_learn x {> R0sk1iar}", "apply (blast intro!:skl1_trans_refines_a0i_trans_r)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {R0sk1iar \\<inter>\n   UNIV \\<times> skl1_inv6} TS.trans a0i, TS.trans skl1 {> R0sk1iar}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {R0sk1iar \\<inter>\n   UNIV \\<times>\n   (skl1_inv4 \\<inter> skl1_inv5)} TS.trans a0i, TS.trans skl1 {> R0sk1iar}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_consistent_med0sk1iar [iff]: \n  \"obs_consistent R0sk1iar med0sk1iar a0i skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R0sk1iar med0sk1iar a0i skl1", "by (auto simp add: obs_consistent_def R0sk1iar_def med0sk1iar_def)"], ["", "text \\<open>Refinement result.\\<close>"], ["", "lemma skl1_refines_a0i_r [iff]: \n  \"refines \n     (R0sk1iar \\<inter> (reach a0i \\<times> (skl1_inv4 \\<inter> skl1_inv5)))\n     med0sk1iar a0i skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines\n     (R0sk1iar \\<inter> reach a0i \\<times> (skl1_inv4 \\<inter> skl1_inv5))\n     med0sk1iar a0i skl1", "by (rule Refinement_using_invariants, auto)"], ["", "lemma  skl1_implements_a0i_r [iff]: \"implements med0sk1iar a0i skl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implements med0sk1iar a0i skl1", "by (rule refinement_soundness) (fast)"], ["", "(**************************************************************************************************)"], ["", "subsection \\<open>Derived invariants: injective agreement (@{term \"Resp\"} authenticates @{term \"Init\"})\\<close>"], ["", "(**************************************************************************************************)"], ["", "lemma skl1_obs_iagreement_Resp [iff]: \"oreach skl1 \\<subseteq> l1_iagreement_Resp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach skl1 \\<subseteq> l1_iagreement_Resp", "apply (rule external_invariant_translation \n         [OF PO_a0i_obs_agreement _ skl1_implements_a0i_r])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med0sk1iar -` a0i_agreement \\<subseteq> l1_iagreement_Resp", "apply (auto simp add: med0sk1iar_def l1_iagreement_Resp_def a0i_agreement_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skl1_iagreement_Resp [iff]: \"reach skl1 \\<subseteq> l1_iagreement_Resp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach skl1 \\<subseteq> l1_iagreement_Resp", "by (rule external_to_internal_invariant [OF skl1_obs_iagreement_Resp], auto)"], ["", "end"]]}