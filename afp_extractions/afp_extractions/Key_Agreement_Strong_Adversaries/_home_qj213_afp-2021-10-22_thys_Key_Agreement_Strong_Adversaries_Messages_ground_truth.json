{"file_name": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries/Messages.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries", "problem_names": ["lemma eq_sym: \"eq a b \\<longleftrightarrow> eq b a\"", "lemma eq_Sym [intro]: \"eq a b \\<Longrightarrow> eq b a\"", "lemma eq_refl [simp, intro]: \"eq a a\"", "lemma eq_Number: \"eq (cNumber N) y \\<Longrightarrow>  y = cNumber N\"", "lemma eq_Agent: \"eq (cAgent A) y \\<Longrightarrow>  y = cAgent A\"", "lemma eq_Nonce: \"eq (cNonce N) y \\<Longrightarrow>  y = cNonce N\"", "lemma eq_LtK: \"eq (cLtK N) y \\<Longrightarrow>  y = cLtK N\"", "lemma eq_EphK: \"eq (cEphK N) y \\<Longrightarrow>  y = cEphK N\"", "lemma eq_Tag: \"eq (cTag N) y \\<Longrightarrow>  y = cTag N\"", "lemma eq_Hash: \"eq (cHash X) y \\<Longrightarrow> \\<exists>Y. y = cHash Y \\<and> eq X Y\"", "lemma eq_Pair: \"eq (cPair X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y'\"", "lemma eq_Enc: \"eq (cEnc X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y'\"", "lemma eq_Aenc: \"eq (cAenc X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y'\"", "lemma eq_Sign: \"eq (cSign X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y'\"", "lemma eq_Exp: \"eq (cExp X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cExp X' Y'\"", "lemmas eqD_aux = eq_Number eq_Agent eq_Nonce eq_LtK eq_EphK eq_Tag\n                    eq_Hash eq_Pair eq_Enc eq_Aenc eq_Sign eq_Exp", "lemmas eqD [dest] = eqD_aux eqD_aux [OF eq_Sym]", "lemmas msg_defs = \n  Agent_def Number_def Nonce_def LtK_def EphK_def Pair_def \n  Enc_def Aenc_def Exp_def Hash_def Tag_def Sign_def", "lemma permute_exp [simp]: \"Exp (Exp X Y) Z = Exp (Exp X Z) Y\"", "lemma atomic_Agent [simp, intro]: \"atomic (Agent X)\"", "lemma atomic_Tag [simp, intro]: \"atomic (Tag X)\"", "lemma atomic_Nonce [simp, intro]: \"atomic (Nonce X)\"", "lemma atomic_Number [simp, intro]: \"atomic (Number X)\"", "lemma atomic_LtK [simp, intro]: \"atomic (LtK X)\"", "lemma atomic_EphK [simp, intro]: \"atomic (EphK X)\"", "lemma non_atomic_Pair [simp]: \"\\<not>atomic (Pair x y)\"", "lemma non_atomic_Enc [simp]: \"\\<not>atomic (Enc x y)\"", "lemma non_atomic_Aenc [simp]: \"\\<not>atomic (Aenc x y)\"", "lemma non_atomic_Sign [simp]: \"\\<not>atomic (Sign x y)\"", "lemma non_atomic_Exp [simp]: \"\\<not>atomic (Exp x y)\"", "lemma non_atomic_Hash [simp]: \"\\<not>atomic (Hash x)\"", "lemma Nonce_Nonce: \"(Nonce X = Nonce X') = (X = X')\"", "lemma Nonce_Agent: \"Nonce X \\<noteq> Agent X'\"", "lemma Nonce_Number: \"Nonce X \\<noteq> Number X'\"", "lemma Nonce_Hash: \"Nonce X \\<noteq> Hash  X'\"", "lemma Nonce_Tag: \"Nonce X \\<noteq> Tag  X'\"", "lemma Nonce_EphK: \"Nonce X \\<noteq> EphK  X'\"", "lemma Nonce_LtK: \"Nonce X \\<noteq> LtK  X'\"", "lemma Nonce_Pair: \"Nonce X \\<noteq> Pair  X' Y'\"", "lemma Nonce_Enc: \"Nonce X \\<noteq> Enc  X' Y'\"", "lemma Nonce_Aenc: \"Nonce X \\<noteq> Aenc  X' Y'\"", "lemma Nonce_Sign: \"Nonce X \\<noteq> Sign  X' Y'\"", "lemma Nonce_Exp: \"Nonce X \\<noteq> Exp  X' Y'\"", "lemma Agent_Nonce: \"Agent X \\<noteq> Nonce  X'\"", "lemma Agent_Agent: \"(Agent X = Agent X') = (X = X')\"", "lemma Agent_Number: \"Agent X \\<noteq> Number  X'\"", "lemma Agent_Hash: \"Agent X \\<noteq> Hash  X'\"", "lemma Agent_Tag: \"Agent X \\<noteq> Tag  X'\"", "lemma Agent_EphK: \"Agent X \\<noteq> EphK  X'\"", "lemma Agent_LtK: \"Agent X \\<noteq> LtK  X'\"", "lemma Agent_Pair: \"Agent X \\<noteq> Pair  X' Y'\"", "lemma Agent_Enc: \"Agent X \\<noteq> Enc  X' Y'\"", "lemma Agent_Aenc: \"Agent X \\<noteq> Aenc  X' Y'\"", "lemma Agent_Sign: \"Agent X \\<noteq> Sign  X' Y'\"", "lemma Agent_Exp: \"Agent X \\<noteq> Exp  X' Y'\"", "lemma Number_Nonce: \"Number X \\<noteq> Nonce  X'\"", "lemma Number_Agent: \"Number X \\<noteq> Agent  X'\"", "lemma Number_Number: \"(Number X = Number X') = (X = X')\"", "lemma Number_Hash: \"Number X \\<noteq> Hash  X'\"", "lemma Number_Tag: \"Number X \\<noteq> Tag  X'\"", "lemma Number_EphK: \"Number X \\<noteq> EphK  X'\"", "lemma Number_LtK: \"Number X \\<noteq> LtK  X'\"", "lemma Number_Pair: \"Number X \\<noteq> Pair  X' Y'\"", "lemma Number_Enc: \"Number X \\<noteq> Enc  X' Y'\"", "lemma Number_Aenc: \"Number X \\<noteq> Aenc  X' Y'\"", "lemma Number_Sign: \"Number X \\<noteq> Sign  X' Y'\"", "lemma Number_Exp: \"Number X \\<noteq> Exp  X' Y'\"", "lemma Hash_Nonce: \"Hash X \\<noteq> Nonce  X'\"", "lemma Hash_Agent: \"Hash X \\<noteq> Agent  X'\"", "lemma Hash_Number: \"Hash X \\<noteq> Number  X'\"", "lemma Hash_Hash: \"(Hash X = Hash X') = (X = X')\"", "lemma Hash_Tag: \"Hash X \\<noteq> Tag  X'\"", "lemma Hash_EphK: \"Hash X \\<noteq> EphK  X'\"", "lemma Hash_LtK: \"Hash X \\<noteq> LtK  X'\"", "lemma Hash_Pair: \"Hash X \\<noteq> Pair  X' Y'\"", "lemma Hash_Enc: \"Hash X \\<noteq> Enc  X' Y'\"", "lemma Hash_Aenc: \"Hash X \\<noteq> Aenc  X' Y'\"", "lemma Hash_Sign: \"Hash X \\<noteq> Sign  X' Y'\"", "lemma Hash_Exp: \"Hash X \\<noteq> Exp  X' Y'\"", "lemma Tag_Nonce: \"Tag X \\<noteq> Nonce  X'\"", "lemma Tag_Agent: \"Tag X \\<noteq> Agent  X'\"", "lemma Tag_Number: \"Tag X \\<noteq> Number  X'\"", "lemma Tag_Hash: \"Tag X \\<noteq> Hash  X'\"", "lemma Tag_Tag: \"(Tag X = Tag X') = (X = X')\"", "lemma Tag_EphK: \"Tag X \\<noteq> EphK  X'\"", "lemma Tag_LtK: \"Tag X \\<noteq> LtK  X'\"", "lemma Tag_Pair: \"Tag X \\<noteq> Pair  X' Y'\"", "lemma Tag_Enc: \"Tag X \\<noteq> Enc  X' Y'\"", "lemma Tag_Aenc: \"Tag X \\<noteq> Aenc  X' Y'\"", "lemma Tag_Sign: \"Tag X \\<noteq> Sign  X' Y'\"", "lemma Tag_Exp: \"Tag X \\<noteq> Exp  X' Y'\"", "lemma EphK_Nonce: \"EphK X \\<noteq> Nonce  X'\"", "lemma EphK_Agent: \"EphK X \\<noteq> Agent  X'\"", "lemma EphK_Number: \"EphK X \\<noteq> Number  X'\"", "lemma EphK_Hash: \"EphK X \\<noteq> Hash  X'\"", "lemma EphK_Tag: \"EphK X \\<noteq> Tag  X'\"", "lemma EphK_EphK: \"(EphK X = EphK X') = (X = X')\"", "lemma EphK_LtK: \"EphK X \\<noteq> LtK  X'\"", "lemma EphK_Pair: \"EphK X \\<noteq> Pair  X' Y'\"", "lemma EphK_Enc: \"EphK X \\<noteq> Enc  X' Y'\"", "lemma EphK_Aenc: \"EphK X \\<noteq> Aenc  X' Y'\"", "lemma EphK_Sign: \"EphK X \\<noteq> Sign  X' Y'\"", "lemma EphK_Exp: \"EphK X \\<noteq> Exp  X' Y'\"", "lemma LtK_Nonce: \"LtK X \\<noteq> Nonce  X'\"", "lemma LtK_Agent: \"LtK X \\<noteq> Agent  X'\"", "lemma LtK_Number: \"LtK X \\<noteq> Number  X'\"", "lemma LtK_Hash: \"LtK X \\<noteq> Hash  X'\"", "lemma LtK_Tag: \"LtK X \\<noteq> Tag  X'\"", "lemma LtK_EphK: \"LtK X \\<noteq> EphK  X'\"", "lemma LtK_LtK: \"(LtK X = LtK X') = (X = X')\"", "lemma LtK_Pair: \"LtK X \\<noteq> Pair  X' Y'\"", "lemma LtK_Enc: \"LtK X \\<noteq> Enc  X' Y'\"", "lemma LtK_Aenc: \"LtK X \\<noteq> Aenc  X' Y'\"", "lemma LtK_Sign: \"LtK X \\<noteq> Sign  X' Y'\"", "lemma LtK_Exp: \"LtK X \\<noteq> Exp  X' Y'\"", "lemma Pair_Nonce: \"Pair X Y \\<noteq> Nonce  X'\"", "lemma Pair_Agent: \"Pair X Y \\<noteq> Agent  X'\"", "lemma Pair_Number: \"Pair X Y \\<noteq> Number  X'\"", "lemma Pair_Hash: \"Pair X Y \\<noteq> Hash  X'\"", "lemma Pair_Tag: \"Pair X Y \\<noteq> Tag  X'\"", "lemma Pair_EphK: \"Pair X Y \\<noteq> EphK  X'\"", "lemma Pair_LtK: \"Pair X Y \\<noteq> LtK  X'\"", "lemma Pair_Pair: \"(Pair X Y = Pair X' Y') = (X = X' \\<and> Y = Y')\"", "lemma Pair_Enc: \"Pair X Y \\<noteq> Enc  X' Y'\"", "lemma Pair_Aenc: \"Pair X Y \\<noteq> Aenc  X' Y'\"", "lemma Pair_Sign: \"Pair X Y \\<noteq> Sign  X' Y'\"", "lemma Pair_Exp: \"Pair X Y \\<noteq> Exp  X' Y'\"", "lemma Enc_Nonce: \"Enc X Y \\<noteq> Nonce  X'\"", "lemma Enc_Agent: \"Enc X Y \\<noteq> Agent  X'\"", "lemma Enc_Number: \"Enc X Y \\<noteq> Number  X'\"", "lemma Enc_Hash: \"Enc X Y \\<noteq> Hash  X'\"", "lemma Enc_Tag: \"Enc X Y \\<noteq> Tag  X'\"", "lemma Enc_EphK: \"Enc X Y \\<noteq> EphK  X'\"", "lemma Enc_LtK: \"Enc X Y \\<noteq> LtK  X'\"", "lemma Enc_Pair: \"Enc X Y \\<noteq> Pair  X' Y'\"", "lemma Enc_Enc: \"(Enc X Y = Enc X' Y') = (X = X' \\<and> Y = Y')\"", "lemma Enc_Aenc: \"Enc X Y \\<noteq> Aenc  X' Y'\"", "lemma Enc_Sign: \"Enc X Y \\<noteq> Sign  X' Y'\"", "lemma Enc_Exp: \"Enc X Y \\<noteq> Exp  X' Y'\"", "lemma Aenc_Nonce: \"Aenc X Y \\<noteq> Nonce  X'\"", "lemma Aenc_Agent: \"Aenc X Y \\<noteq> Agent  X'\"", "lemma Aenc_Number: \"Aenc X Y \\<noteq> Number  X'\"", "lemma Aenc_Hash: \"Aenc X Y \\<noteq> Hash  X'\"", "lemma Aenc_Tag: \"Aenc X Y \\<noteq> Tag  X'\"", "lemma Aenc_EphK: \"Aenc X Y \\<noteq> EphK  X'\"", "lemma Aenc_LtK: \"Aenc X Y \\<noteq> LtK  X'\"", "lemma Aenc_Pair: \"Aenc X Y \\<noteq> Pair  X' Y'\"", "lemma Aenc_Enc: \"Aenc X Y \\<noteq> Enc  X' Y'\"", "lemma Aenc_Aenc: \"(Aenc X Y = Aenc X' Y') = (X = X' \\<and> Y = Y')\"", "lemma Aenc_Sign: \"Aenc X Y \\<noteq> Sign  X' Y'\"", "lemma Aenc_Exp: \"Aenc X Y \\<noteq> Exp  X' Y'\"", "lemma Sign_Nonce: \"Sign X Y \\<noteq> Nonce  X'\"", "lemma Sign_Agent: \"Sign X Y \\<noteq> Agent  X'\"", "lemma Sign_Number: \"Sign X Y \\<noteq> Number  X'\"", "lemma Sign_Hash: \"Sign X Y \\<noteq> Hash  X'\"", "lemma Sign_Tag: \"Sign X Y \\<noteq> Tag  X'\"", "lemma Sign_EphK: \"Sign X Y \\<noteq> EphK  X'\"", "lemma Sign_LtK: \"Sign X Y \\<noteq> LtK  X'\"", "lemma Sign_Pair: \"Sign X Y \\<noteq> Pair  X' Y'\"", "lemma Sign_Enc: \"Sign X Y \\<noteq> Enc  X' Y'\"", "lemma Sign_Aenc: \"Sign X Y \\<noteq> Aenc  X' Y'\"", "lemma Sign_Sign: \"(Sign X Y = Sign X' Y') = (X = X' \\<and> Y = Y')\"", "lemma Sign_Exp: \"Sign X Y \\<noteq> Exp  X' Y'\"", "lemma Exp_Nonce: \"Exp X Y \\<noteq> Nonce  X'\"", "lemma Exp_Agent: \"Exp X Y \\<noteq> Agent  X'\"", "lemma Exp_Number: \"Exp X Y \\<noteq> Number  X'\"", "lemma Exp_Hash: \"Exp X Y \\<noteq> Hash  X'\"", "lemma Exp_Tag: \"Exp X Y \\<noteq> Tag  X'\"", "lemma Exp_EphK: \"Exp X Y \\<noteq> EphK  X'\"", "lemma Exp_LtK: \"Exp X Y \\<noteq> LtK  X'\"", "lemma Exp_Pair: \"Exp X Y \\<noteq> Pair  X' Y'\"", "lemma Exp_Enc: \"Exp X Y \\<noteq> Enc  X' Y'\"", "lemma Exp_Aenc: \"Exp X Y \\<noteq> Aenc  X' Y'\"", "lemma Exp_Sign: \"Exp X Y \\<noteq> Sign  X' Y'\"", "lemmas msg_inject [iff, induct_simp] =\n  Nonce_Nonce Agent_Agent Number_Number Hash_Hash Tag_Tag EphK_EphK LtK_LtK \n  Pair_Pair Enc_Enc Aenc_Aenc Sign_Sign", "lemmas msg_distinct [simp, induct_simp] =\n  Nonce_Agent Nonce_Number Nonce_Hash Nonce_Tag Nonce_EphK Nonce_LtK Nonce_Pair \n  Nonce_Enc Nonce_Aenc Nonce_Sign Nonce_Exp \n  Agent_Nonce Agent_Number Agent_Hash Agent_Tag Agent_EphK Agent_LtK Agent_Pair \n  Agent_Enc Agent_Aenc Agent_Sign Agent_Exp \n  Number_Nonce Number_Agent Number_Hash Number_Tag Number_EphK Number_LtK \n  Number_Pair Number_Enc Number_Aenc Number_Sign Number_Exp \n  Hash_Nonce Hash_Agent Hash_Number Hash_Tag Hash_EphK Hash_LtK Hash_Pair \n  Hash_Enc Hash_Aenc Hash_Sign Hash_Exp \n  Tag_Nonce Tag_Agent Tag_Number Tag_Hash Tag_EphK Tag_LtK Tag_Pair \n  Tag_Enc Tag_Aenc Tag_Sign Tag_Exp \n  EphK_Nonce EphK_Agent EphK_Number EphK_Hash EphK_Tag EphK_LtK EphK_Pair \n  EphK_Enc EphK_Aenc EphK_Sign EphK_Exp \n  LtK_Nonce LtK_Agent LtK_Number LtK_Hash LtK_Tag LtK_EphK LtK_Pair \n  LtK_Enc LtK_Aenc LtK_Sign LtK_Exp \n  Pair_Nonce Pair_Agent Pair_Number Pair_Hash Pair_Tag Pair_EphK Pair_LtK \n  Pair_Enc Pair_Aenc Pair_Sign Pair_Exp \n  Enc_Nonce Enc_Agent Enc_Number Enc_Hash Enc_Tag Enc_EphK Enc_LtK Enc_Pair \n  Enc_Aenc Enc_Sign Enc_Exp \n  Aenc_Nonce Aenc_Agent Aenc_Number Aenc_Hash Aenc_Tag Aenc_EphK Aenc_LtK \n  Aenc_Pair Aenc_Enc Aenc_Sign Aenc_Exp \n  Sign_Nonce Sign_Agent Sign_Number Sign_Hash Sign_Tag Sign_EphK Sign_LtK \n  Sign_Pair Sign_Enc Sign_Aenc Sign_Exp \n  Exp_Nonce Exp_Agent Exp_Number Exp_Hash Exp_Tag Exp_EphK Exp_LtK Exp_Pair \n  Exp_Enc Exp_Aenc Exp_Sign", "lemma eq_expgen: \n  \"eq X Y \\<Longrightarrow> (\\<forall> X'. X = cExp cGen X' \\<longrightarrow> (\\<exists> Z. Y = (cExp cGen Z) \\<and> eq X' Z)) \\<and>\n              (\\<forall> Y'. Y = cExp cGen Y' \\<longrightarrow> (\\<exists> Z. X = (cExp cGen Z) \\<and> eq Y' Z))\"", "lemma Exp_Gen_inj: \"Exp Gen X = Exp Gen Y \\<Longrightarrow> X = Y\"", "lemma eq_expexpgen: \n  \"eq X Y \\<Longrightarrow> (\\<forall> X' X''. X = cExp (cExp cGen X') X'' \\<longrightarrow> \n                (\\<exists> Y' Y''. Y = cExp (cExp cGen Y') Y'' \\<and> \n                   ((eq X' Y' \\<and> eq X'' Y'') \\<or> (eq X' Y'' \\<and> eq X'' Y'))))\"", "lemma Exp_Exp_Gen_inj:\n  \"Exp (Exp Gen X) X' = Z \\<Longrightarrow>\n   (\\<exists> Y Y'. Z = Exp (Exp Gen Y) Y' \\<and> ((X = Y \\<and> X' = Y') \\<or> (X = Y' \\<and> X' = Y)))\"", "lemma Exp_Exp_Gen_inj2:\n  \"Exp (Exp Gen X) X' = Exp Z Y' \\<Longrightarrow>\n  (Y' = X \\<and> Z = Exp Gen X') \\<or> (Y' = X' \\<and> Z = Exp Gen X)\""], "translations": [["", "lemma eq_sym: \"eq a b \\<longleftrightarrow> eq b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq a b = eq b a", "by (auto elim: eq.induct)"], ["", "lemma eq_Sym [intro]: \"eq a b \\<Longrightarrow> eq b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq a b \\<Longrightarrow> eq b a", "by (auto elim: eq.induct)"], ["", "lemma eq_refl [simp, intro]: \"eq a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq a a", "by (induction a, auto)"], ["", "text \\<open>inductive cases; keep the transitivity case, so we prove the the right lemmas by hand.\\<close>"], ["", "lemma eq_Number: \"eq (cNumber N) y \\<Longrightarrow>  y = cNumber N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cNumber N) y \\<Longrightarrow> y = cNumber N", "by (induction \"cNumber N\" y rule: eq.induct, auto)"], ["", "lemma eq_Agent: \"eq (cAgent A) y \\<Longrightarrow>  y = cAgent A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cAgent A) y \\<Longrightarrow> y = cAgent A", "by (induction \"cAgent A\" y rule: eq.induct, auto)"], ["", "lemma eq_Nonce: \"eq (cNonce N) y \\<Longrightarrow>  y = cNonce N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cNonce N) y \\<Longrightarrow> y = cNonce N", "by (induction \"cNonce N\" y rule: eq.induct, auto)"], ["", "lemma eq_LtK: \"eq (cLtK N) y \\<Longrightarrow>  y = cLtK N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cLtK N) y \\<Longrightarrow> y = cLtK N", "by (induction \"cLtK N\" y rule: eq.induct, auto)"], ["", "lemma eq_EphK: \"eq (cEphK N) y \\<Longrightarrow>  y = cEphK N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cEphK N) y \\<Longrightarrow> y = cEphK N", "by (induction \"cEphK N\" y rule: eq.induct, auto)"], ["", "lemma eq_Tag: \"eq (cTag N) y \\<Longrightarrow>  y = cTag N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cTag N) y \\<Longrightarrow> y = cTag N", "by (induction \"cTag N\" y rule: eq.induct, auto)"], ["", "lemma eq_Hash: \"eq (cHash X) y \\<Longrightarrow> \\<exists>Y. y = cHash Y \\<and> eq X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cHash X) y \\<Longrightarrow> \\<exists>Y. y = cHash Y \\<and> eq X Y", "by (drule eq.induct [where P=\"\\<lambda>x. \\<lambda>y. \\<forall> X. x = cHash X \\<longrightarrow> (\\<exists>Y. y = cHash Y \\<and> eq X Y)\"],\n      auto elim!:Tr)"], ["", "lemma eq_Pair: \"eq (cPair X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cPair X Y) y \\<Longrightarrow>\n    \\<exists>X' Y'. y = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y'", "apply (drule eq.induct [where \n    P=\"\\<lambda>x. \\<lambda>y. \\<forall> X Y. x = cPair X Y \\<longrightarrow> (\\<exists> X' Y'. y = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>a b c.\n       \\<forall>X Y.\n          cExp (cExp a b) c = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cExp (cExp a c) b = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 2. \\<And>t.\n       \\<forall>X Y.\n          cTag t = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cTag t = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 3. \\<And>A.\n       \\<forall>X Y.\n          cAgent A = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cAgent A = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 4. \\<And>x.\n       \\<forall>X Y.\n          cNonce x = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNonce x = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 5. \\<And>x.\n       \\<forall>X Y.\n          cNumber x = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNumber x = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 6. \\<And>x.\n       \\<forall>X Y.\n          cLtK x = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cLtK x = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 7. \\<And>x.\n       \\<forall>X Y.\n          cEphK x = cPair X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cEphK x = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 8. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cPair X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cPair X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cPair a c = cPair X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cPair b d = cPair X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 9. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cPair X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cPair X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cEnc a c = cPair X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cEnc b d = cPair X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 10. \\<And>a b c d.\n        \\<lbrakk>eq a b;\n         \\<forall>X Y.\n            a = cPair X Y \\<longrightarrow>\n            (\\<exists>X' Y'. b = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y');\n         eq c d;\n         \\<forall>X Y.\n            c = cPair X Y \\<longrightarrow>\n            (\\<exists>X' Y'.\n                d = cPair X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n        \\<Longrightarrow> \\<forall>X Y.\n                             cAenc a c = cPair X Y \\<longrightarrow>\n                             (\\<exists>X' Y'.\n                                 cAenc b d = cPair X' Y' \\<and>\n                                 eq X X' \\<and> eq Y Y')\nA total of 15 subgoals...", "apply (auto elim!: Tr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_Enc: \"eq (cEnc X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cEnc X Y) y \\<Longrightarrow>\n    \\<exists>X' Y'. y = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y'", "apply (drule eq.induct [where \n    P=\"\\<lambda>x. \\<lambda>y. \\<forall> X Y. x = cEnc X Y \\<longrightarrow> (\\<exists> X' Y'. y = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>a b c.\n       \\<forall>X Y.\n          cExp (cExp a b) c = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cExp (cExp a c) b = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 2. \\<And>t.\n       \\<forall>X Y.\n          cTag t = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cTag t = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 3. \\<And>A.\n       \\<forall>X Y.\n          cAgent A = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cAgent A = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 4. \\<And>x.\n       \\<forall>X Y.\n          cNonce x = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNonce x = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 5. \\<And>x.\n       \\<forall>X Y.\n          cNumber x = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNumber x = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 6. \\<And>x.\n       \\<forall>X Y.\n          cLtK x = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cLtK x = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 7. \\<And>x.\n       \\<forall>X Y.\n          cEphK x = cEnc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cEphK x = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 8. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cEnc X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cEnc X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cPair a c = cEnc X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cPair b d = cEnc X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 9. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cEnc X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cEnc X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cEnc a c = cEnc X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cEnc b d = cEnc X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 10. \\<And>a b c d.\n        \\<lbrakk>eq a b;\n         \\<forall>X Y.\n            a = cEnc X Y \\<longrightarrow>\n            (\\<exists>X' Y'. b = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y');\n         eq c d;\n         \\<forall>X Y.\n            c = cEnc X Y \\<longrightarrow>\n            (\\<exists>X' Y'.\n                d = cEnc X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n        \\<Longrightarrow> \\<forall>X Y.\n                             cAenc a c = cEnc X Y \\<longrightarrow>\n                             (\\<exists>X' Y'.\n                                 cAenc b d = cEnc X' Y' \\<and>\n                                 eq X X' \\<and> eq Y Y')\nA total of 15 subgoals...", "apply (auto elim!: Tr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_Aenc: \"eq (cAenc X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cAenc X Y) y \\<Longrightarrow>\n    \\<exists>X' Y'. y = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y'", "apply (drule eq.induct [where \n    P=\"\\<lambda>x. \\<lambda>y. \\<forall> X Y. x = cAenc X Y \\<longrightarrow> (\\<exists> X' Y'. y = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>a b c.\n       \\<forall>X Y.\n          cExp (cExp a b) c = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cExp (cExp a c) b = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 2. \\<And>t.\n       \\<forall>X Y.\n          cTag t = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cTag t = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 3. \\<And>A.\n       \\<forall>X Y.\n          cAgent A = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cAgent A = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 4. \\<And>x.\n       \\<forall>X Y.\n          cNonce x = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNonce x = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 5. \\<And>x.\n       \\<forall>X Y.\n          cNumber x = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNumber x = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 6. \\<And>x.\n       \\<forall>X Y.\n          cLtK x = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cLtK x = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 7. \\<And>x.\n       \\<forall>X Y.\n          cEphK x = cAenc X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cEphK x = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 8. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cAenc X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cAenc X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cPair a c = cAenc X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cPair b d = cAenc X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 9. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cAenc X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cAenc X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cEnc a c = cAenc X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cEnc b d = cAenc X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 10. \\<And>a b c d.\n        \\<lbrakk>eq a b;\n         \\<forall>X Y.\n            a = cAenc X Y \\<longrightarrow>\n            (\\<exists>X' Y'. b = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y');\n         eq c d;\n         \\<forall>X Y.\n            c = cAenc X Y \\<longrightarrow>\n            (\\<exists>X' Y'.\n                d = cAenc X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n        \\<Longrightarrow> \\<forall>X Y.\n                             cAenc a c = cAenc X Y \\<longrightarrow>\n                             (\\<exists>X' Y'.\n                                 cAenc b d = cAenc X' Y' \\<and>\n                                 eq X X' \\<and> eq Y Y')\nA total of 15 subgoals...", "apply (auto elim!: Tr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_Sign: \"eq (cSign X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cSign X Y) y \\<Longrightarrow>\n    \\<exists>X' Y'. y = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y'", "apply (drule eq.induct [where \n    P=\"\\<lambda>x. \\<lambda>y. \\<forall> X Y. x = cSign X Y \\<longrightarrow> (\\<exists> X' Y'. y = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>a b c.\n       \\<forall>X Y.\n          cExp (cExp a b) c = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cExp (cExp a c) b = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 2. \\<And>t.\n       \\<forall>X Y.\n          cTag t = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cTag t = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 3. \\<And>A.\n       \\<forall>X Y.\n          cAgent A = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cAgent A = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 4. \\<And>x.\n       \\<forall>X Y.\n          cNonce x = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNonce x = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 5. \\<And>x.\n       \\<forall>X Y.\n          cNumber x = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cNumber x = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 6. \\<And>x.\n       \\<forall>X Y.\n          cLtK x = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cLtK x = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 7. \\<And>x.\n       \\<forall>X Y.\n          cEphK x = cSign X Y \\<longrightarrow>\n          (\\<exists>X' Y'.\n              cEphK x = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\n 8. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cSign X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cSign X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cPair a c = cSign X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cPair b d = cSign X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 9. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cSign X Y \\<longrightarrow>\n           (\\<exists>X' Y'. b = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cSign X Y \\<longrightarrow>\n           (\\<exists>X' Y'.\n               d = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cEnc a c = cSign X Y \\<longrightarrow>\n                            (\\<exists>X' Y'.\n                                cEnc b d = cSign X' Y' \\<and>\n                                eq X X' \\<and> eq Y Y')\n 10. \\<And>a b c d.\n        \\<lbrakk>eq a b;\n         \\<forall>X Y.\n            a = cSign X Y \\<longrightarrow>\n            (\\<exists>X' Y'. b = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y');\n         eq c d;\n         \\<forall>X Y.\n            c = cSign X Y \\<longrightarrow>\n            (\\<exists>X' Y'.\n                d = cSign X' Y' \\<and> eq X X' \\<and> eq Y Y')\\<rbrakk>\n        \\<Longrightarrow> \\<forall>X Y.\n                             cAenc a c = cSign X Y \\<longrightarrow>\n                             (\\<exists>X' Y'.\n                                 cAenc b d = cSign X' Y' \\<and>\n                                 eq X X' \\<and> eq Y Y')\nA total of 15 subgoals...", "apply (auto elim!: Tr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_Exp: \"eq (cExp X Y) y \\<Longrightarrow>  \\<exists> X' Y'. y = cExp X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq (cExp X Y) y \\<Longrightarrow> \\<exists>X' Y'. y = cExp X' Y'", "apply (drule eq.induct [where \n    P=\"\\<lambda>x. \\<lambda>y. \\<forall> X Y. x = cExp X Y \\<longrightarrow> (\\<exists> X' Y'. y = cExp X' Y')\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>a b c.\n       \\<forall>X Y.\n          cExp (cExp a b) c = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cExp (cExp a c) b = cExp X' Y')\n 2. \\<And>t.\n       \\<forall>X Y.\n          cTag t = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cTag t = cExp X' Y')\n 3. \\<And>A.\n       \\<forall>X Y.\n          cAgent A = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cAgent A = cExp X' Y')\n 4. \\<And>x.\n       \\<forall>X Y.\n          cNonce x = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cNonce x = cExp X' Y')\n 5. \\<And>x.\n       \\<forall>X Y.\n          cNumber x = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cNumber x = cExp X' Y')\n 6. \\<And>x.\n       \\<forall>X Y.\n          cLtK x = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cLtK x = cExp X' Y')\n 7. \\<And>x.\n       \\<forall>X Y.\n          cEphK x = cExp X Y \\<longrightarrow>\n          (\\<exists>X' Y'. cEphK x = cExp X' Y')\n 8. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cExp X Y \\<longrightarrow> (\\<exists>X' Y'. b = cExp X' Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cExp X Y \\<longrightarrow>\n           (\\<exists>X' Y'. d = cExp X' Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cPair a c = cExp X Y \\<longrightarrow>\n                            (\\<exists>X' Y'. cPair b d = cExp X' Y')\n 9. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X Y.\n           a = cExp X Y \\<longrightarrow> (\\<exists>X' Y'. b = cExp X' Y');\n        eq c d;\n        \\<forall>X Y.\n           c = cExp X Y \\<longrightarrow>\n           (\\<exists>X' Y'. d = cExp X' Y')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X Y.\n                            cEnc a c = cExp X Y \\<longrightarrow>\n                            (\\<exists>X' Y'. cEnc b d = cExp X' Y')\n 10. \\<And>a b c d.\n        \\<lbrakk>eq a b;\n         \\<forall>X Y.\n            a = cExp X Y \\<longrightarrow> (\\<exists>X' Y'. b = cExp X' Y');\n         eq c d;\n         \\<forall>X Y.\n            c = cExp X Y \\<longrightarrow>\n            (\\<exists>X' Y'. d = cExp X' Y')\\<rbrakk>\n        \\<Longrightarrow> \\<forall>X Y.\n                             cAenc a c = cExp X Y \\<longrightarrow>\n                             (\\<exists>X' Y'. cAenc b d = cExp X' Y')\nA total of 15 subgoals...", "apply (auto elim!: Tr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas eqD_aux = eq_Number eq_Agent eq_Nonce eq_LtK eq_EphK eq_Tag\n                    eq_Hash eq_Pair eq_Enc eq_Aenc eq_Sign eq_Exp"], ["", "lemmas eqD [dest] = eqD_aux eqD_aux [OF eq_Sym]"], ["", "text \\<open>Quotient construction\\<close>"], ["", "quotient_type msg = cmsg / eq\nmorphisms Re Ab"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp eq", "by (auto simp add:equivp_def)"], ["", "lift_definition Number :: \"nat \\<Rightarrow> msg\" is cNumber"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "lift_definition Nonce :: \"nonce_t \\<Rightarrow> msg\" is cNonce"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "lift_definition Agent :: \"agent \\<Rightarrow> msg\" is cAgent"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "lift_definition LtK :: \"ltkey \\<Rightarrow> msg\" is cLtK"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "lift_definition EphK :: \"ephkey \\<Rightarrow> msg\" is cEphK"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "lift_definition Pair :: \"msg \\<Rightarrow> msg \\<Rightarrow> msg\" is cPair"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2 cmsg3 cmsg4.\n       \\<lbrakk>eq cmsg1 cmsg2; eq cmsg3 cmsg4\\<rbrakk>\n       \\<Longrightarrow> eq (cPair cmsg1 cmsg3) (cPair cmsg2 cmsg4)", "by auto"], ["", "lift_definition Enc :: \"msg \\<Rightarrow> msg \\<Rightarrow> msg\" is cEnc"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2 cmsg3 cmsg4.\n       \\<lbrakk>eq cmsg1 cmsg2; eq cmsg3 cmsg4\\<rbrakk>\n       \\<Longrightarrow> eq (cEnc cmsg1 cmsg3) (cEnc cmsg2 cmsg4)", "by auto"], ["", "lift_definition Aenc :: \"msg \\<Rightarrow> msg \\<Rightarrow> msg\" is cAenc"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2 cmsg3 cmsg4.\n       \\<lbrakk>eq cmsg1 cmsg2; eq cmsg3 cmsg4\\<rbrakk>\n       \\<Longrightarrow> eq (cAenc cmsg1 cmsg3) (cAenc cmsg2 cmsg4)", "by auto"], ["", "lift_definition Exp :: \"msg \\<Rightarrow> msg \\<Rightarrow> msg\" is cExp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2 cmsg3 cmsg4.\n       \\<lbrakk>eq cmsg1 cmsg2; eq cmsg3 cmsg4\\<rbrakk>\n       \\<Longrightarrow> eq (cExp cmsg1 cmsg3) (cExp cmsg2 cmsg4)", "by auto"], ["", "lift_definition Tag :: \"tag \\<Rightarrow> msg\" is cTag"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "lift_definition Hash :: \"msg \\<Rightarrow> msg\" is cHash"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2.\n       eq cmsg1 cmsg2 \\<Longrightarrow> eq (cHash cmsg1) (cHash cmsg2)", "by auto"], ["", "lift_definition Sign :: \"msg \\<Rightarrow> msg \\<Rightarrow> msg\" is cSign"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2 cmsg3 cmsg4.\n       \\<lbrakk>eq cmsg1 cmsg2; eq cmsg3 cmsg4\\<rbrakk>\n       \\<Longrightarrow> eq (cSign cmsg1 cmsg3) (cSign cmsg2 cmsg4)", "by auto"], ["", "lemmas msg_defs = \n  Agent_def Number_def Nonce_def LtK_def EphK_def Pair_def \n  Enc_def Aenc_def Exp_def Hash_def Tag_def Sign_def"], ["", "text \\<open>Commutativity of exponents\\<close>"], ["", "lemma permute_exp [simp]: \"Exp (Exp X Y) Z = Exp (Exp X Z) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp (Exp X Y) Z = Exp (Exp X Z) Y", "by (transfer, auto)"], ["", "lift_definition atomic :: \"msg \\<Rightarrow> bool\" is catomic"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cmsg1 cmsg2.\n       eq cmsg1 cmsg2 \\<Longrightarrow> catomic cmsg1 = catomic cmsg2", "by (erule eq.induct, auto)"], ["", "abbreviation \n  composed :: \"msg \\<Rightarrow> bool\" where\n  \"composed X \\<equiv> \\<not>atomic X\""], ["", "lemma atomic_Agent [simp, intro]: \"atomic (Agent X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic (Messages.Agent X)", "by (transfer, auto)"], ["", "lemma atomic_Tag [simp, intro]: \"atomic (Tag X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic (Tag X)", "by (transfer, auto)"], ["", "lemma atomic_Nonce [simp, intro]: \"atomic (Nonce X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic (Nonce X)", "by (transfer, auto)"], ["", "lemma atomic_Number [simp, intro]: \"atomic (Number X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic (Number X)", "by (transfer, auto)"], ["", "lemma atomic_LtK [simp, intro]: \"atomic (LtK X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic (LtK X)", "by (transfer, auto)"], ["", "lemma atomic_EphK [simp, intro]: \"atomic (EphK X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic (EphK X)", "by (transfer, auto)"], ["", "lemma non_atomic_Pair [simp]: \"\\<not>atomic (Pair x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composed (Messages.Pair x y)", "by (transfer, auto)"], ["", "lemma non_atomic_Enc [simp]: \"\\<not>atomic (Enc x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composed (Enc x y)", "by (transfer, auto)"], ["", "lemma non_atomic_Aenc [simp]: \"\\<not>atomic (Aenc x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composed (Aenc x y)", "by (transfer, auto)"], ["", "lemma non_atomic_Sign [simp]: \"\\<not>atomic (Sign x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composed (Sign x y)", "by (transfer, auto)"], ["", "lemma non_atomic_Exp [simp]: \"\\<not>atomic (Exp x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composed (Exp x y)", "by (transfer, auto)"], ["", "lemma non_atomic_Hash [simp]: \"\\<not>atomic (Hash x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composed (Hash x)", "by (transfer, auto)"], ["", "lemma Nonce_Nonce: \"(Nonce X = Nonce X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Nonce X = Nonce X') = (X = X')", "by transfer auto"], ["", "lemma Nonce_Agent: \"Nonce X \\<noteq> Agent X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Nonce_Number: \"Nonce X \\<noteq> Number X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Number X'", "by transfer auto"], ["", "lemma Nonce_Hash: \"Nonce X \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Nonce_Tag: \"Nonce X \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Nonce_EphK: \"Nonce X \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Nonce_LtK: \"Nonce X \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Nonce_Pair: \"Nonce X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Nonce_Enc: \"Nonce X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Nonce_Aenc: \"Nonce X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Nonce_Sign: \"Nonce X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Nonce_Exp: \"Nonce X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nonce X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Agent_Nonce: \"Agent X \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Agent_Agent: \"(Agent X = Agent X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Messages.Agent X = Messages.Agent X') = (X = X')", "by transfer auto"], ["", "lemma Agent_Number: \"Agent X \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Number X'", "by transfer auto"], ["", "lemma Agent_Hash: \"Agent X \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Agent_Tag: \"Agent X \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Agent_EphK: \"Agent X \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Agent_LtK: \"Agent X \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Agent_Pair: \"Agent X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Agent_Enc: \"Agent X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Agent_Aenc: \"Agent X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Agent_Sign: \"Agent X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Agent_Exp: \"Agent X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Agent X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Number_Nonce: \"Number X \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Number_Agent: \"Number X \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Number_Number: \"(Number X = Number X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Number X = Number X') = (X = X')", "by transfer auto"], ["", "lemma Number_Hash: \"Number X \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Number_Tag: \"Number X \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Number_EphK: \"Number X \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Number_LtK: \"Number X \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Number_Pair: \"Number X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Number_Enc: \"Number X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Number_Aenc: \"Number X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Number_Sign: \"Number X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Number_Exp: \"Number X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Number X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Hash_Nonce: \"Hash X \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Hash_Agent: \"Hash X \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Hash_Number: \"Hash X \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Number X'", "by transfer auto"], ["", "lemma Hash_Hash: \"(Hash X = Hash X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Hash X = Hash X') = (X = X')", "by transfer auto"], ["", "lemma Hash_Tag: \"Hash X \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Hash_EphK: \"Hash X \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Hash_LtK: \"Hash X \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Hash_Pair: \"Hash X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Hash_Enc: \"Hash X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Hash_Aenc: \"Hash X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Hash_Sign: \"Hash X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Hash_Exp: \"Hash X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hash X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Tag_Nonce: \"Tag X \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Tag_Agent: \"Tag X \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Tag_Number: \"Tag X \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Number X'", "by transfer auto"], ["", "lemma Tag_Hash: \"Tag X \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Tag_Tag: \"(Tag X = Tag X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Tag X = Tag X') = (X = X')", "by transfer auto"], ["", "lemma Tag_EphK: \"Tag X \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Tag_LtK: \"Tag X \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Tag_Pair: \"Tag X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Tag_Enc: \"Tag X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Tag_Aenc: \"Tag X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Tag_Sign: \"Tag X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Tag_Exp: \"Tag X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tag X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma EphK_Nonce: \"EphK X \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma EphK_Agent: \"EphK X \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma EphK_Number: \"EphK X \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Number X'", "by transfer auto"], ["", "lemma EphK_Hash: \"EphK X \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Hash X'", "by transfer auto"], ["", "lemma EphK_Tag: \"EphK X \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Tag X'", "by transfer auto"], ["", "lemma EphK_EphK: \"(EphK X = EphK X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (EphK X = EphK X') = (X = X')", "by transfer auto"], ["", "lemma EphK_LtK: \"EphK X \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> LtK X'", "by transfer auto"], ["", "lemma EphK_Pair: \"EphK X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma EphK_Enc: \"EphK X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma EphK_Aenc: \"EphK X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma EphK_Sign: \"EphK X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma EphK_Exp: \"EphK X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EphK X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma LtK_Nonce: \"LtK X \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma LtK_Agent: \"LtK X \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma LtK_Number: \"LtK X \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Number X'", "by transfer auto"], ["", "lemma LtK_Hash: \"LtK X \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Hash X'", "by transfer auto"], ["", "lemma LtK_Tag: \"LtK X \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Tag X'", "by transfer auto"], ["", "lemma LtK_EphK: \"LtK X \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> EphK X'", "by transfer auto"], ["", "lemma LtK_LtK: \"(LtK X = LtK X') = (X = X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LtK X = LtK X') = (X = X')", "by transfer auto"], ["", "lemma LtK_Pair: \"LtK X \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma LtK_Enc: \"LtK X \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma LtK_Aenc: \"LtK X \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma LtK_Sign: \"LtK X \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma LtK_Exp: \"LtK X \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LtK X \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Pair_Nonce: \"Pair X Y \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Pair_Agent: \"Pair X Y \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Pair_Number: \"Pair X Y \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Number X'", "by transfer auto"], ["", "lemma Pair_Hash: \"Pair X Y \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Pair_Tag: \"Pair X Y \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Pair_EphK: \"Pair X Y \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Pair_LtK: \"Pair X Y \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Pair_Pair: \"(Pair X Y = Pair X' Y') = (X = X' \\<and> Y = Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Messages.Pair X Y = Messages.Pair X' Y') = (X = X' \\<and> Y = Y')", "by transfer auto"], ["", "lemma Pair_Enc: \"Pair X Y \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Pair_Aenc: \"Pair X Y \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Pair_Sign: \"Pair X Y \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Pair_Exp: \"Pair X Y \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Messages.Pair X Y \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Enc_Nonce: \"Enc X Y \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Enc_Agent: \"Enc X Y \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Enc_Number: \"Enc X Y \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Number X'", "by transfer auto"], ["", "lemma Enc_Hash: \"Enc X Y \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Enc_Tag: \"Enc X Y \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Enc_EphK: \"Enc X Y \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Enc_LtK: \"Enc X Y \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Enc_Pair: \"Enc X Y \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Enc_Enc: \"(Enc X Y = Enc X' Y') = (X = X' \\<and> Y = Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Enc X Y = Enc X' Y') = (X = X' \\<and> Y = Y')", "by transfer auto"], ["", "lemma Enc_Aenc: \"Enc X Y \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Enc_Sign: \"Enc X Y \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Enc_Exp: \"Enc X Y \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Enc X Y \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Aenc_Nonce: \"Aenc X Y \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Aenc_Agent: \"Aenc X Y \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Aenc_Number: \"Aenc X Y \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Number X'", "by transfer auto"], ["", "lemma Aenc_Hash: \"Aenc X Y \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Aenc_Tag: \"Aenc X Y \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Aenc_EphK: \"Aenc X Y \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Aenc_LtK: \"Aenc X Y \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Aenc_Pair: \"Aenc X Y \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Aenc_Enc: \"Aenc X Y \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Aenc_Aenc: \"(Aenc X Y = Aenc X' Y') = (X = X' \\<and> Y = Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Aenc X Y = Aenc X' Y') = (X = X' \\<and> Y = Y')", "by transfer auto"], ["", "lemma Aenc_Sign: \"Aenc X Y \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemma Aenc_Exp: \"Aenc X Y \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aenc X Y \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Sign_Nonce: \"Sign X Y \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Sign_Agent: \"Sign X Y \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Sign_Number: \"Sign X Y \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Number X'", "by transfer auto"], ["", "lemma Sign_Hash: \"Sign X Y \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Sign_Tag: \"Sign X Y \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Sign_EphK: \"Sign X Y \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Sign_LtK: \"Sign X Y \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Sign_Pair: \"Sign X Y \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Sign_Enc: \"Sign X Y \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Sign_Aenc: \"Sign X Y \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Sign_Sign: \"(Sign X Y = Sign X' Y') = (X = X' \\<and> Y = Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Sign X Y = Sign X' Y') = (X = X' \\<and> Y = Y')", "by transfer auto"], ["", "lemma Sign_Exp: \"Sign X Y \\<noteq> Exp  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sign X Y \\<noteq> Exp X' Y'", "by transfer auto"], ["", "lemma Exp_Nonce: \"Exp X Y \\<noteq> Nonce  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Nonce X'", "by transfer auto"], ["", "lemma Exp_Agent: \"Exp X Y \\<noteq> Agent  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Messages.Agent X'", "by transfer auto"], ["", "lemma Exp_Number: \"Exp X Y \\<noteq> Number  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Number X'", "by transfer auto"], ["", "lemma Exp_Hash: \"Exp X Y \\<noteq> Hash  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Hash X'", "by transfer auto"], ["", "lemma Exp_Tag: \"Exp X Y \\<noteq> Tag  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Tag X'", "by transfer auto"], ["", "lemma Exp_EphK: \"Exp X Y \\<noteq> EphK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> EphK X'", "by transfer auto"], ["", "lemma Exp_LtK: \"Exp X Y \\<noteq> LtK  X'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> LtK X'", "by transfer auto"], ["", "lemma Exp_Pair: \"Exp X Y \\<noteq> Pair  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Messages.Pair X' Y'", "by transfer auto"], ["", "lemma Exp_Enc: \"Exp X Y \\<noteq> Enc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Enc X' Y'", "by transfer auto"], ["", "lemma Exp_Aenc: \"Exp X Y \\<noteq> Aenc  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Aenc X' Y'", "by transfer auto"], ["", "lemma Exp_Sign: \"Exp X Y \\<noteq> Sign  X' Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp X Y \\<noteq> Sign X' Y'", "by transfer auto"], ["", "lemmas msg_inject [iff, induct_simp] =\n  Nonce_Nonce Agent_Agent Number_Number Hash_Hash Tag_Tag EphK_EphK LtK_LtK \n  Pair_Pair Enc_Enc Aenc_Aenc Sign_Sign"], ["", "lemmas msg_distinct [simp, induct_simp] =\n  Nonce_Agent Nonce_Number Nonce_Hash Nonce_Tag Nonce_EphK Nonce_LtK Nonce_Pair \n  Nonce_Enc Nonce_Aenc Nonce_Sign Nonce_Exp \n  Agent_Nonce Agent_Number Agent_Hash Agent_Tag Agent_EphK Agent_LtK Agent_Pair \n  Agent_Enc Agent_Aenc Agent_Sign Agent_Exp \n  Number_Nonce Number_Agent Number_Hash Number_Tag Number_EphK Number_LtK \n  Number_Pair Number_Enc Number_Aenc Number_Sign Number_Exp \n  Hash_Nonce Hash_Agent Hash_Number Hash_Tag Hash_EphK Hash_LtK Hash_Pair \n  Hash_Enc Hash_Aenc Hash_Sign Hash_Exp \n  Tag_Nonce Tag_Agent Tag_Number Tag_Hash Tag_EphK Tag_LtK Tag_Pair \n  Tag_Enc Tag_Aenc Tag_Sign Tag_Exp \n  EphK_Nonce EphK_Agent EphK_Number EphK_Hash EphK_Tag EphK_LtK EphK_Pair \n  EphK_Enc EphK_Aenc EphK_Sign EphK_Exp \n  LtK_Nonce LtK_Agent LtK_Number LtK_Hash LtK_Tag LtK_EphK LtK_Pair \n  LtK_Enc LtK_Aenc LtK_Sign LtK_Exp \n  Pair_Nonce Pair_Agent Pair_Number Pair_Hash Pair_Tag Pair_EphK Pair_LtK \n  Pair_Enc Pair_Aenc Pair_Sign Pair_Exp \n  Enc_Nonce Enc_Agent Enc_Number Enc_Hash Enc_Tag Enc_EphK Enc_LtK Enc_Pair \n  Enc_Aenc Enc_Sign Enc_Exp \n  Aenc_Nonce Aenc_Agent Aenc_Number Aenc_Hash Aenc_Tag Aenc_EphK Aenc_LtK \n  Aenc_Pair Aenc_Enc Aenc_Sign Aenc_Exp \n  Sign_Nonce Sign_Agent Sign_Number Sign_Hash Sign_Tag Sign_EphK Sign_LtK \n  Sign_Pair Sign_Enc Sign_Aenc Sign_Exp \n  Exp_Nonce Exp_Agent Exp_Number Exp_Hash Exp_Tag Exp_EphK Exp_LtK Exp_Pair \n  Exp_Enc Exp_Aenc Exp_Sign"], ["", "consts Ngen :: nat"], ["", "abbreviation \"Gen \\<equiv> Number Ngen\""], ["", "abbreviation \"cGen \\<equiv> cNumber Ngen\""], ["", "abbreviation \n  \"InsecTag \\<equiv> Tag insec\""], ["", "abbreviation \n  \"AuthTag \\<equiv> Tag auth\""], ["", "abbreviation \n  \"ConfidTag \\<equiv> Tag confid\""], ["", "abbreviation \n  \"SecureTag \\<equiv> Tag secure\""], ["", "abbreviation \n  \"Tags \\<equiv> range Tag\""], ["", "abbreviation\n  NonceF :: \"fresh_t \\<Rightarrow> msg\" where\n  \"NonceF N \\<equiv> Nonce (nonce_fresh N)\""], ["", "abbreviation\n  NonceA :: \"nat \\<Rightarrow> msg\" where\n  \"NonceA N \\<equiv> Nonce (nonce_atk N)\""], ["", "abbreviation\n  shrK :: \"agent \\<Rightarrow> agent \\<Rightarrow> msg\" where\n  \"shrK A B \\<equiv> LtK (sharK A B)\""], ["", "abbreviation\n  pubK :: \"agent \\<Rightarrow> msg\" where\n  \"pubK A \\<equiv> LtK (publK A)\""], ["", "abbreviation\n  priK :: \"agent \\<Rightarrow> msg\" where\n  \"priK A \\<equiv> LtK (privK A)\""], ["", "abbreviation\n  epubK :: \"nonce_t \\<Rightarrow> msg\" where\n  \"epubK N \\<equiv> EphK (epublK N)\""], ["", "abbreviation\n  epriK :: \"nonce_t \\<Rightarrow> msg\" where\n  \"epriK N \\<equiv> EphK (eprivK N)\""], ["", "abbreviation\n  epubKF :: \"fresh_t \\<Rightarrow> msg\" where\n  \"epubKF N \\<equiv> EphK (epublK (nonce_fresh N))\""], ["", "abbreviation\n  epriKF :: \"fresh_t \\<Rightarrow> msg\" where\n  \"epriKF N \\<equiv> EphK (eprivK (nonce_fresh N))\""], ["", "abbreviation\n  epubKA :: \"nat \\<Rightarrow> msg\" where\n  \"epubKA N \\<equiv> EphK (epublK (nonce_atk N))\""], ["", "abbreviation\n  epriKA :: \"nat \\<Rightarrow> msg\" where\n  \"epriKA N \\<equiv> EphK (eprivK (nonce_atk N))\""], ["", "text\\<open>Concrete syntax: messages appear as <A,B,NA>, etc...\\<close>"], ["", "syntax\n  \"_MTuple\"      :: \"['a, args] \\<Rightarrow> 'a * 'b\"       (\"(2\\<langle>_,/ _\\<rangle>)\")"], ["", "translations\n  \"\\<langle>x, y, z\\<rangle>\" \\<rightleftharpoons> \"\\<langle>x, \\<langle>y, z\\<rangle>\\<rangle>\"\n  \"\\<langle>x, y\\<rangle>\"    \\<rightleftharpoons> \"CONST Pair x y\""], ["", "text \\<open>hash macs\\<close>"], ["", "abbreviation\n  hmac :: \"msg \\<Rightarrow> msg \\<Rightarrow> msg\" where\n  \"hmac M K \\<equiv> Hash \\<langle>M, K\\<rangle>\""], ["", "text \\<open>recover some kind of injectivity for Exp\\<close>"], ["", "lemma eq_expgen: \n  \"eq X Y \\<Longrightarrow> (\\<forall> X'. X = cExp cGen X' \\<longrightarrow> (\\<exists> Z. Y = (cExp cGen Z) \\<and> eq X' Z)) \\<and>\n              (\\<forall> Y'. Y = cExp cGen Y' \\<longrightarrow> (\\<exists> Z. X = (cExp cGen Z) \\<and> eq Y' Z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq X Y \\<Longrightarrow>\n    (\\<forall>X'.\n        X = cExp cGen X' \\<longrightarrow>\n        (\\<exists>Z. Y = cExp cGen Z \\<and> eq X' Z)) \\<and>\n    (\\<forall>Y'.\n        Y = cExp cGen Y' \\<longrightarrow>\n        (\\<exists>Z. X = cExp cGen Z \\<and> eq Y' Z))", "by (erule eq.induct, auto elim!: Tr)"], ["", "lemma Exp_Gen_inj: \"Exp Gen X = Exp Gen Y \\<Longrightarrow> X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp Gen X = Exp Gen Y \\<Longrightarrow> X = Y", "by (transfer, auto dest: eq_expgen)"], ["", "lemma eq_expexpgen: \n  \"eq X Y \\<Longrightarrow> (\\<forall> X' X''. X = cExp (cExp cGen X') X'' \\<longrightarrow> \n                (\\<exists> Y' Y''. Y = cExp (cExp cGen Y') Y'' \\<and> \n                   ((eq X' Y' \\<and> eq X'' Y'') \\<or> (eq X' Y'' \\<and> eq X'' Y'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq X Y \\<Longrightarrow>\n    \\<forall>X' X''.\n       X = cExp (cExp cGen X') X'' \\<longrightarrow>\n       (\\<exists>Y' Y''.\n           Y = cExp (cExp cGen Y') Y'' \\<and>\n           (eq X' Y' \\<and> eq X'' Y'' \\<or> eq X' Y'' \\<and> eq X'' Y'))", "apply (erule eq.induct, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c d.\n       \\<lbrakk>eq a b;\n        \\<forall>X' X''.\n           a = cExp (cExp cGen X') X'' \\<longrightarrow>\n           (\\<exists>Y' Y''.\n               b = cExp (cExp cGen Y') Y'' \\<and>\n               (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                eq X' Y'' \\<and> eq X'' Y'));\n        eq c d;\n        \\<forall>X' X''.\n           c = cExp (cExp cGen X') X'' \\<longrightarrow>\n           (\\<exists>Y' Y''.\n               d = cExp (cExp cGen Y') Y'' \\<and>\n               (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                eq X' Y'' \\<and> eq X'' Y'))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X'.\n                            a = cExp cGen X' \\<longrightarrow>\n                            (\\<exists>Y'.\n                                b = cExp cGen Y' \\<and>\n                                (eq X' Y' \\<or> eq X' d \\<and> eq c Y'))\n 2. \\<And>a b c.\n       \\<lbrakk>eq a b;\n        \\<forall>X' X''.\n           a = cExp (cExp cGen X') X'' \\<longrightarrow>\n           (\\<exists>Y' Y''.\n               b = cExp (cExp cGen Y') Y'' \\<and>\n               (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                eq X' Y'' \\<and> eq X'' Y'));\n        eq b c;\n        \\<forall>X' X''.\n           b = cExp (cExp cGen X') X'' \\<longrightarrow>\n           (\\<exists>Y' Y''.\n               c = cExp (cExp cGen Y') Y'' \\<and>\n               (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                eq X' Y'' \\<and> eq X'' Y'))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            a = cExp (cExp cGen X') X'' \\<longrightarrow>\n                            (\\<exists>Y' Y''.\n                                c = cExp (cExp cGen Y') Y'' \\<and>\n                                (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                                 eq X' Y'' \\<and> eq X'' Y'))", "apply ((drule eq_expgen)+, force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>eq a b;\n        \\<forall>X' X''.\n           a = cExp (cExp cGen X') X'' \\<longrightarrow>\n           (\\<exists>Y' Y''.\n               b = cExp (cExp cGen Y') Y'' \\<and>\n               (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                eq X' Y'' \\<and> eq X'' Y'));\n        eq b c;\n        \\<forall>X' X''.\n           b = cExp (cExp cGen X') X'' \\<longrightarrow>\n           (\\<exists>Y' Y''.\n               c = cExp (cExp cGen Y') Y'' \\<and>\n               (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                eq X' Y'' \\<and> eq X'' Y'))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>X' X''.\n                            a = cExp (cExp cGen X') X'' \\<longrightarrow>\n                            (\\<exists>Y' Y''.\n                                c = cExp (cExp cGen Y') Y'' \\<and>\n                                (eq X' Y' \\<and> eq X'' Y'' \\<or>\n                                 eq X' Y'' \\<and> eq X'' Y'))", "apply (auto, blast+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Exp_Exp_Gen_inj:\n  \"Exp (Exp Gen X) X' = Z \\<Longrightarrow>\n   (\\<exists> Y Y'. Z = Exp (Exp Gen Y) Y' \\<and> ((X = Y \\<and> X' = Y') \\<or> (X = Y' \\<and> X' = Y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp (Exp Gen X) X' = Z \\<Longrightarrow>\n    \\<exists>Y Y'.\n       Z = Exp (Exp Gen Y) Y' \\<and>\n       (X = Y \\<and> X' = Y' \\<or> X = Y' \\<and> X' = Y)", "by (transfer, auto dest: eq_expexpgen)"], ["", "lemma Exp_Exp_Gen_inj2:\n  \"Exp (Exp Gen X) X' = Exp Z Y' \\<Longrightarrow>\n  (Y' = X \\<and> Z = Exp Gen X') \\<or> (Y' = X' \\<and> Z = Exp Gen X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Exp (Exp Gen X) X' = Exp Z Y' \\<Longrightarrow>\n    Y' = X \\<and> Z = Exp Gen X' \\<or> Y' = X' \\<and> Z = Exp Gen X", "apply (transfer, auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X X' Z Y'.\n       \\<lbrakk>eq (cExp (cExp cGen X) X') (cExp Z Y');\n        \\<not> eq Y' X'\\<rbrakk>\n       \\<Longrightarrow> eq Y' X\n 2. \\<And>X X' Z Y'.\n       \\<lbrakk>eq (cExp (cExp cGen X) X') (cExp Z Y');\n        \\<not> eq Y' X'\\<rbrakk>\n       \\<Longrightarrow> eq Z (cExp cGen X')\n 3. \\<And>X X' Z Y'.\n       \\<lbrakk>eq (cExp (cExp cGen X) X') (cExp Z Y');\n        \\<not> eq Z (cExp cGen X)\\<rbrakk>\n       \\<Longrightarrow> eq Y' X\n 4. \\<And>X X' Z Y'.\n       \\<lbrakk>eq (cExp (cExp cGen X) X') (cExp Z Y');\n        \\<not> eq Z (cExp cGen X)\\<rbrakk>\n       \\<Longrightarrow> eq Z (cExp cGen X')", "apply (drule eq_expexpgen, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}