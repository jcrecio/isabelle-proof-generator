{"file_name": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries/Message_derivation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Key_Agreement_Strong_Adversaries", "problem_names": ["lemma synth_mono [mono_set]: \"G \\<subseteq> H \\<Longrightarrow> synth G \\<subseteq> synth H\"", "lemmas synth_monotone = synth_mono [THEN [2] rev_subsetD]\n\n\\<comment> \\<open>\\<open>[elim!]\\<close> slows down certain proofs, e.g., \\<open>\\<lbrakk> synth H \\<inter> B \\<subseteq> {} \\<rbrakk> \\<Longrightarrow> P\\<close>\\<close>", "lemma EpriK_synth [elim]: \"epriK K \\<in> synth H \\<Longrightarrow>\n       epriK K \\<in> H \\<or> (\\<exists> N. epriK K = epriKA N)\"", "lemma EpubK_synth [elim]: \"epubK K \\<in> synth H \\<Longrightarrow>\n       epubK K \\<in> H \\<or> (\\<exists> N. epubK K = epubKA N)\"", "lemmas synth_inversion [elim] = \n  NonceF_synth LtK_synth EpubKF_synth EpriKF_synth Hash_synth Pair_synth \n  Enc_synth Aenc_synth Sign_synth Tag_synth", "lemma synth_increasing: \"H \\<subseteq> synth H\"", "lemma synth_Int1: \"x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth A \"", "lemma synth_Int2: \"x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth B\"", "lemma synth_Int: \"x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth A \\<inter> synth B\"", "lemma synth_Un: \"synth G \\<union> synth H \\<subseteq> synth (G \\<union> H)\"", "lemma synth_insert: \"insert X (synth H) \\<subseteq> synth (insert X H)\"", "lemma synth_synthD [dest!]: \"X \\<in> synth (synth H) \\<Longrightarrow> X \\<in> synth H\"", "lemma synth_idem [simp]: \"synth (synth H) = synth H\"", "lemma synth_subset_iff: \"synth G \\<subseteq> synth H \\<longleftrightarrow> G \\<subseteq> synth H\"", "lemma synth_trans: \"\\<lbrakk> X \\<in> synth G; G \\<subseteq> synth H \\<rbrakk> \\<Longrightarrow> X \\<in> synth H\"", "lemma synth_cut: \"\\<lbrakk> Y \\<in> synth (insert X H); X \\<in> synth H \\<rbrakk> \\<Longrightarrow> Y \\<in> synth H\"", "lemma Nonce_synth_eq [simp]: \"(NonceF N \\<in> synth H) = (NonceF N \\<in> H)\"", "lemma LtK_synth_eq [simp]: \"(LtK K \\<in> synth H) = (LtK K \\<in> H)\"", "lemma EpubKF_synth_eq [simp]: \"(epubKF K \\<in> synth H) = (epubKF K \\<in> H)\"", "lemma EpriKF_synth_eq [simp]: \"(epriKF K \\<in> synth H) = (epriKF K \\<in> H)\"", "lemma Enc_synth_eq1 [simp]:\n     \"K \\<notin> synth H \\<Longrightarrow> (Enc X K \\<in> synth H) = (Enc X K \\<in> H)\"", "lemma Enc_synth_eq2 [simp]:\n     \"X \\<notin> synth H \\<Longrightarrow> (Enc X K \\<in> synth H) = (Enc X K \\<in> H)\"", "lemma Aenc_synth_eq1 [simp]:\n     \"K \\<notin> synth H \\<Longrightarrow> (Aenc X K \\<in> synth H) = (Aenc X K \\<in> H)\"", "lemma Aenc_synth_eq2 [simp]:\n     \"X \\<notin> synth H \\<Longrightarrow> (Aenc X K \\<in> synth H) = (Aenc X K \\<in> H)\"", "lemma Sign_synth_eq1 [simp]:\n     \"K \\<notin> synth H \\<Longrightarrow> (Sign X K \\<in> synth H) = (Sign X K \\<in> H)\"", "lemma Sign_synth_eq2 [simp]:\n     \"X \\<notin> synth H \\<Longrightarrow> (Sign X K \\<in> synth H) = (Sign X K \\<in> H)\"", "lemma analz_mono: \"G \\<subseteq> H \\<Longrightarrow> analz(G) \\<subseteq> analz(H)\"", "lemmas analz_monotone = analz_mono [THEN [2] rev_subsetD]", "lemma Pair_analz [elim!]:\n  \"\\<lbrakk> Pair X Y \\<in> analz H; \\<lbrakk> X \\<in> analz H; Y \\<in> analz H \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma analz_empty [simp]: \"analz {} = {}\"", "lemma analz_increasing: \"H \\<subseteq> analz(H)\"", "lemma analz_analzD [dest!]: \"X \\<in> analz (analz H) \\<Longrightarrow> X \\<in> analz H\"", "lemma analz_idem [simp]: \"analz (analz H) = analz H\"", "lemma analz_Un: \"analz G \\<union> analz H \\<subseteq> analz (G \\<union> H)\"", "lemma analz_insertI: \"X \\<in> analz H \\<Longrightarrow> X \\<in> analz (insert Y H)\"", "lemma analz_insert: \"insert X (analz H) \\<subseteq> analz (insert X H)\"", "lemmas analz_insert_eq_I = equalityI [OF subsetI analz_insert]", "lemma analz_subset_iff [simp]: \"analz G \\<subseteq> analz H \\<longleftrightarrow> G \\<subseteq> analz H\"", "lemma analz_trans: \"X \\<in> analz G \\<Longrightarrow>  G \\<subseteq> analz H \\<Longrightarrow> X \\<in> analz H\"", "lemma analz_cut: \"Y \\<in> analz (insert X H) \\<Longrightarrow>  X \\<in> analz H \\<Longrightarrow> Y \\<in> analz H\"", "lemma analz_insert_eq: \"X \\<in> analz H \\<Longrightarrow> analz (insert X H) = analz H\"", "lemma analz_subset_cong:\n  \"analz G \\<subseteq> analz G' \\<Longrightarrow>\n   analz H \\<subseteq> analz H' \\<Longrightarrow> \n   analz (G \\<union> H) \\<subseteq> analz (G' \\<union> H')\"", "lemma analz_cong:\n  \"analz G = analz G' \\<Longrightarrow>\n   analz H = analz H' \\<Longrightarrow>\n   analz (G \\<union> H) = analz (G' \\<union> H')\"", "lemma analz_insert_cong:\n  \"analz H = analz H' \\<Longrightarrow>\n   analz (insert X H) = analz (insert X H')\"", "lemma analz_trivial:\n  \"\\<forall>X Y. Pair X Y \\<notin> H \\<Longrightarrow>\n   \\<forall>X Y. Enc X Y \\<notin> H \\<Longrightarrow>\n   \\<forall>X Y. Aenc X Y \\<notin> H \\<Longrightarrow>\n   \\<forall>X Y. Sign X Y \\<notin> H \\<Longrightarrow>\n   analz H = H\"", "lemma analz_analz_Un [simp]: \"analz (analz G \\<union> H) = analz (G \\<union> H)\"", "lemma analz_Un_analz [simp]: \"analz (G \\<union> analz H) = analz (G \\<union> H)\"", "lemma analz_insert_Agent [simp]:\n  \"analz (insert (Agent A) H) = insert (Agent A) (analz H)\"", "lemma synth_analz_incr: \"H \\<subseteq> synth (analz H)\"", "lemmas synth_analz_increasing = synth_analz_incr [THEN [2] rev_subsetD]", "lemma synth_analz_mono: \"G \\<subseteq> H \\<Longrightarrow> synth (analz G) \\<subseteq> synth (analz H)\"", "lemmas synth_analz_monotone = synth_analz_mono [THEN [2] rev_subsetD]", "lemma lem1: \n  \"Y \\<in> synth (analz (synth G \\<union> H) \\<inter> (analz (G \\<union> H) \\<union> synth G)) \n\\<Longrightarrow> Y \\<in> synth (analz (G \\<union> H))\"", "lemma lem2: \"{a. a \\<in> analz (G \\<union> H) \\<or> a \\<in> synth G} = analz (G \\<union> H) \\<union> synth G\"", "lemma analz_synth_Un: \"analz (synth G \\<union> H) = analz (G \\<union> H) \\<union> synth G\"", "lemma analz_synth: \"analz (synth H) = analz H \\<union> synth H\"", "lemma analz_synth_Un2 [simp]: \"analz (G \\<union> synth H) = analz (G \\<union> H) \\<union> synth H\"", "lemma synth_analz_synth [simp]: \"synth (analz (synth H)) = synth (analz H)\"", "lemma analz_synth_analz [simp]: \"analz (synth (analz H)) = synth (analz H)\"", "lemma synth_analz_idem [simp]: \"synth (analz (synth (analz H))) = synth (analz H)\"", "lemma insert_subset_synth_analz [simp]: \n  \"X \\<in> synth (analz H) \\<Longrightarrow> insert X H \\<subseteq> synth (analz H)\"", "lemma synth_analz_insert [simp]: \n  assumes \"X \\<in> synth (analz H)\"\n  shows \"synth (analz (insert X H)) = synth (analz H)\"", "lemma parts_mono [mono_set]: \"G \\<subseteq> H \\<Longrightarrow> parts G \\<subseteq> parts H\"", "lemmas parts_monotone = parts_mono [THEN [2] rev_subsetD]", "lemma Pair_parts [elim]:\n  \"\\<lbrakk> Pair X Y \\<in> parts H; \\<lbrakk> X \\<in> parts H; Y \\<in> parts H \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma parts_increasing: \"H \\<subseteq> parts H\"", "lemmas parts_insertI = subset_insertI [THEN parts_mono, THEN subsetD]", "lemma parts_empty [simp]: \"parts {} = {}\"", "lemma parts_atomic [simp]: \"atomic x \\<Longrightarrow> parts {x} = {x}\"", "lemma parts_InsecTag [simp]: \"parts {Tag t} = {Tag t}\"", "lemma parts_emptyE [elim!]: \"X \\<in> parts {} \\<Longrightarrow> P\"", "lemma parts_Tags [simp]:\n  \"parts Tags = Tags\"", "lemma parts_singleton: \"X \\<in> parts H \\<Longrightarrow> \\<exists> Y\\<in>H. X \\<in> parts {Y}\"", "lemma parts_Agents [simp]:\n  \"parts (Agent` G) = Agent` G\"", "lemma parts_Un [simp]: \"parts (G \\<union> H) = parts G \\<union> parts H\"", "lemma parts_insert_subset_Un: \n  assumes \"X \\<in> G\" \n  shows \"parts (insert X H) \\<subseteq> parts G \\<union> parts H\"", "lemma parts_insert: \"parts (insert X H) = parts {X} \\<union> parts H\"", "lemma parts_insert2:\n  \"parts (insert X (insert Y H)) = parts {X} \\<union> parts {Y} \\<union> parts H\"", "lemma parts_UN [simp]: \"parts (\\<Union>x\\<in>A. H x) = (\\<Union>x\\<in>A. parts(H x))\" (is \"?X = ?Y\")", "lemmas in_parts_UnE [elim!] = parts_Un [THEN equalityD1, THEN subsetD, THEN UnE]", "lemma parts_insert_subset: \"insert X (parts H) \\<subseteq> parts (insert X H)\"", "lemma parts_partsD [dest!]: \"X \\<in> parts (parts H) \\<Longrightarrow> X \\<in> parts H\"", "lemma parts_idem [simp]: \"parts (parts H) = parts H\"", "lemma parts_subset_iff [simp]: \"(parts G \\<subseteq> parts H) \\<longleftrightarrow> (G \\<subseteq> parts H)\"", "lemma parts_trans: \"X \\<in> parts G \\<Longrightarrow>  G \\<subseteq> parts H \\<Longrightarrow> X \\<in> parts H\"", "lemma parts_cut:\n  \"Y \\<in> parts (insert X G) \\<Longrightarrow>  X \\<in> parts H \\<Longrightarrow> Y \\<in> parts (G \\<union> H)\"", "lemma parts_cut_eq [simp]: \"X \\<in> parts H \\<Longrightarrow> parts (insert X H) = parts H\"", "lemmas parts_insert_eq_I = equalityI [OF subsetI parts_insert_subset]", "lemma parts_insert_Agent [simp]:\n  \"parts (insert (Agent agt) H) = insert (Agent agt) (parts H)\"", "lemma parts_insert_Nonce [simp]:\n  \"parts (insert (Nonce N) H) = insert (Nonce N) (parts H)\"", "lemma parts_insert_Number [simp]:\n  \"parts (insert (Number N) H) = insert (Number N) (parts H)\"", "lemma parts_insert_LtK [simp]:\n  \"parts (insert (LtK K) H) = insert (LtK K) (parts H)\"", "lemma parts_insert_Hash [simp]:\n  \"parts (insert (Hash X) H) = insert (Hash X) (parts H)\"", "lemma parts_insert_Enc [simp]:\n  \"parts (insert (Enc X Y) H) = insert (Enc X Y) (parts {X} \\<union> parts H)\"", "lemma parts_insert_Aenc [simp]:\n  \"parts (insert (Aenc X Y) H) = insert (Aenc X Y) (parts {X} \\<union> parts H)\"", "lemma parts_insert_Sign [simp]:\n  \"parts (insert (Sign X Y) H) = insert (Sign X Y) (parts {X} \\<union> parts H)\"", "lemma parts_insert_Pair [simp]:\n  \"parts (insert (Pair X Y) H) = insert (Pair X Y) (parts {X} \\<union> parts {Y} \\<union> parts H)\"", "lemma analz_subset_parts: \"analz H \\<subseteq> parts H\"", "lemmas analz_into_parts [simp] = analz_subset_parts [THEN subsetD]", "lemmas not_parts_not_analz = analz_subset_parts [THEN contra_subsetD]", "lemma parts_analz [simp]: \"parts (analz H) = parts H\"", "lemma analz_parts [simp]: \"analz (parts H) = parts H\"", "lemma parts_synth [simp]: \"parts (synth H) = parts H \\<union> synth H\"", "lemma Fake_parts_insert:\n  \"X \\<in> synth (analz H) \\<Longrightarrow> parts (insert X H) \\<subseteq> synth (analz H) \\<union> parts H\"", "lemma Fake_parts_insert_in_Un:\n  \"Z \\<in> parts (insert X H) \\<Longrightarrow>\n   X \\<in> synth (analz H) \\<Longrightarrow>\n   Z \\<in>  synth (analz H) \\<union> parts H\"", "lemma analz_conj_parts [simp]:\n  \"X \\<in> analz H \\<and> X \\<in> parts H \\<longleftrightarrow> X \\<in> analz H\"", "lemma analz_disj_parts [simp]:\n  \"X \\<in> analz H \\<or> X \\<in> parts H \\<longleftrightarrow> X \\<in> parts H\"", "lemma Pair_synth_analz [simp]:\n  \"Pair X Y \\<in> synth (analz H) \\<longleftrightarrow> X \\<in> synth (analz H) \\<and> Y \\<in> synth (analz H)\"", "lemma Enc_synth_analz:\n  \"Y \\<in> synth (analz H) \\<Longrightarrow>\n   (Enc X Y \\<in> synth (analz H)) \\<longleftrightarrow> (X \\<in> synth (analz H))\"", "lemma Hash_synth_analz [simp]:\n  \"X \\<notin> synth (analz H) \\<Longrightarrow>\n   (Hash (Pair X Y) \\<in> synth (analz H)) \\<longleftrightarrow> (Hash (Pair X Y) \\<in> analz H)\"", "lemma gen_analz_insert_eq:\n  \"\\<lbrakk> X \\<in> analz G; G \\<subseteq> H \\<rbrakk> \\<Longrightarrow> analz (insert X H) = analz H\"", "lemma synth_analz_insert_eq:\n  \"\\<lbrakk> X \\<in> synth (analz G); G \\<subseteq> H \\<rbrakk> \\<Longrightarrow> synth (analz (insert X H)) = synth (analz H)\"", "lemma Fake_parts_sing:\n  \"X \\<in> synth (analz H) \\<Longrightarrow> parts {X} \\<subseteq> synth (analz H) \\<union> parts H\"", "lemmas Fake_parts_sing_imp_Un = Fake_parts_sing [THEN [2] rev_subsetD]", "lemma analz_hash_nonce [simp]: \n  \"analz {M. \\<exists>N. M = Hash (Nonce N)} = {M. \\<exists>N. M = Hash (Nonce N)}\"", "lemma synth_analz_hash_nonce [simp]: \n  \"NonceF N \\<notin> synth (analz {M. \\<exists>N. M = Hash (Nonce N)})\"", "lemma synth_analz_idem_mono:\n  \"S \\<subseteq> synth (analz S') \\<Longrightarrow> synth (analz S) \\<subseteq> synth (analz S')\"", "lemmas synth_analz_idem_monoI =\n  synth_analz_idem_mono [THEN [2] rev_subsetD]", "lemma analz_synth_subset:\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n   analz Y \\<subseteq> synth (analz Y') \\<Longrightarrow>\n   analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))\"", "lemma analz_synth_subset_Un1 :\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow> analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y))\"", "lemma analz_synth_subset_Un2 :\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow> analz (Y \\<union> X) \\<subseteq> synth (analz (Y \\<union> X'))\"", "lemma analz_synth_insert:\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow> analz (insert Y X) \\<subseteq> synth (analz (insert Y X'))\"", "lemma Fake_analz_insert_Un:\n  assumes \"Y \\<in> analz (insert X H)\" and \"X \\<in> synth (analz G)\" \n  shows \"Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)\""], "translations": [["", "lemma synth_mono [mono_set]: \"G \\<subseteq> H \\<Longrightarrow> synth G \\<subseteq> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<subseteq> H \\<Longrightarrow> synth G \\<subseteq> synth H", "by (auto, erule synth.induct, auto)"], ["", "lemmas synth_monotone = synth_mono [THEN [2] rev_subsetD]\n\n\\<comment> \\<open>\\<open>[elim!]\\<close> slows down certain proofs, e.g., \\<open>\\<lbrakk> synth H \\<inter> B \\<subseteq> {} \\<rbrakk> \\<Longrightarrow> P\\<close>\\<close>"], ["", "inductive_cases NonceF_synth: \"NonceF n \\<in> synth H\""], ["", "inductive_cases LtK_synth: \"LtK K \\<in> synth H\""], ["", "inductive_cases EpubKF_synth: \"epubKF K \\<in> synth H\""], ["", "inductive_cases EpriKF_synth: \"epriKF K \\<in> synth H\""], ["", "inductive_cases Hash_synth: \"Hash X \\<in> synth H\""], ["", "inductive_cases Pair_synth: \"Pair X Y \\<in> synth H\""], ["", "inductive_cases Enc_synth: \"Enc X K \\<in> synth H\""], ["", "inductive_cases Aenc_synth: \"Aenc X K \\<in> synth H\""], ["", "inductive_cases Sign_synth: \"Sign X K \\<in> synth H\""], ["", "inductive_cases Tag_synth: \"Tag t \\<in> synth H\""], ["", "lemma EpriK_synth [elim]: \"epriK K \\<in> synth H \\<Longrightarrow>\n       epriK K \\<in> H \\<or> (\\<exists> N. epriK K = epriKA N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. epriK K \\<in> synth H \\<Longrightarrow>\n    epriK K \\<in> H \\<or> (\\<exists>N. epriK K = epriKA N)", "by (cases K, auto elim: EpriKF_synth)"], ["", "lemma EpubK_synth [elim]: \"epubK K \\<in> synth H \\<Longrightarrow>\n       epubK K \\<in> H \\<or> (\\<exists> N. epubK K = epubKA N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. epubK K \\<in> synth H \\<Longrightarrow>\n    epubK K \\<in> H \\<or> (\\<exists>N. epubK K = epubKA N)", "by (cases K, auto elim: EpubKF_synth)"], ["", "lemmas synth_inversion [elim] = \n  NonceF_synth LtK_synth EpubKF_synth EpriKF_synth Hash_synth Pair_synth \n  Enc_synth Aenc_synth Sign_synth Tag_synth"], ["", "lemma synth_increasing: \"H \\<subseteq> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> synth H", "by blast"], ["", "lemma synth_Int1: \"x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth A", "by (erule synth.induct) (auto)"], ["", "lemma synth_Int2: \"x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth B", "by (erule synth.induct) (auto)"], ["", "lemma synth_Int: \"x \\<in> synth (A \\<inter> B) \\<Longrightarrow> x \\<in> synth A \\<inter> synth B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> synth (A \\<inter> B) \\<Longrightarrow>\n    x \\<in> synth A \\<inter> synth B", "by (blast intro: synth_Int1 synth_Int2)"], ["", "lemma synth_Un: \"synth G \\<union> synth H \\<subseteq> synth (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synth G \\<union> synth H \\<subseteq> synth (G \\<union> H)", "by (intro Un_least synth_mono Un_upper1 Un_upper2)"], ["", "lemma synth_insert: \"insert X (synth H) \\<subseteq> synth (insert X H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert X (synth H) \\<subseteq> synth (insert X H)", "by (blast intro: synth_mono [THEN [2] rev_subsetD])"], ["", "lemma synth_synthD [dest!]: \"X \\<in> synth (synth H) \\<Longrightarrow> X \\<in> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> synth (synth H) \\<Longrightarrow> X \\<in> synth H", "by (erule synth.induct, blast+)"], ["", "lemma synth_idem [simp]: \"synth (synth H) = synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synth (synth H) = synth H", "by blast"], ["", "lemma synth_subset_iff: \"synth G \\<subseteq> synth H \\<longleftrightarrow> G \\<subseteq> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (synth G \\<subseteq> synth H) = (G \\<subseteq> synth H)", "by (blast dest: synth_mono)"], ["", "lemma synth_trans: \"\\<lbrakk> X \\<in> synth G; G \\<subseteq> synth H \\<rbrakk> \\<Longrightarrow> X \\<in> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> synth G; G \\<subseteq> synth H\\<rbrakk>\n    \\<Longrightarrow> X \\<in> synth H", "by (drule synth_mono, blast)"], ["", "lemma synth_cut: \"\\<lbrakk> Y \\<in> synth (insert X H); X \\<in> synth H \\<rbrakk> \\<Longrightarrow> Y \\<in> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<in> synth (insert X H); X \\<in> synth H\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> synth H", "by (erule synth_trans, blast)"], ["", "lemma Nonce_synth_eq [simp]: \"(NonceF N \\<in> synth H) = (NonceF N \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (NonceF N \\<in> synth H) = (NonceF N \\<in> H)", "by blast"], ["", "lemma LtK_synth_eq [simp]: \"(LtK K \\<in> synth H) = (LtK K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LtK K \\<in> synth H) = (LtK K \\<in> H)", "by blast"], ["", "lemma EpubKF_synth_eq [simp]: \"(epubKF K \\<in> synth H) = (epubKF K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (epubKF K \\<in> synth H) = (epubKF K \\<in> H)", "by blast"], ["", "lemma EpriKF_synth_eq [simp]: \"(epriKF K \\<in> synth H) = (epriKF K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (epriKF K \\<in> synth H) = (epriKF K \\<in> H)", "by blast"], ["", "lemma Enc_synth_eq1 [simp]:\n     \"K \\<notin> synth H \\<Longrightarrow> (Enc X K \\<in> synth H) = (Enc X K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<notin> synth H \\<Longrightarrow>\n    (Enc X K \\<in> synth H) = (Enc X K \\<in> H)", "by blast"], ["", "lemma Enc_synth_eq2 [simp]:\n     \"X \\<notin> synth H \\<Longrightarrow> (Enc X K \\<in> synth H) = (Enc X K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<notin> synth H \\<Longrightarrow>\n    (Enc X K \\<in> synth H) = (Enc X K \\<in> H)", "by blast"], ["", "lemma Aenc_synth_eq1 [simp]:\n     \"K \\<notin> synth H \\<Longrightarrow> (Aenc X K \\<in> synth H) = (Aenc X K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<notin> synth H \\<Longrightarrow>\n    (Aenc X K \\<in> synth H) = (Aenc X K \\<in> H)", "by blast"], ["", "lemma Aenc_synth_eq2 [simp]:\n     \"X \\<notin> synth H \\<Longrightarrow> (Aenc X K \\<in> synth H) = (Aenc X K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<notin> synth H \\<Longrightarrow>\n    (Aenc X K \\<in> synth H) = (Aenc X K \\<in> H)", "by blast"], ["", "lemma Sign_synth_eq1 [simp]:\n     \"K \\<notin> synth H \\<Longrightarrow> (Sign X K \\<in> synth H) = (Sign X K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<notin> synth H \\<Longrightarrow>\n    (Sign X K \\<in> synth H) = (Sign X K \\<in> H)", "by blast"], ["", "lemma Sign_synth_eq2 [simp]:\n     \"X \\<notin> synth H \\<Longrightarrow> (Sign X K \\<in> synth H) = (Sign X K \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<notin> synth H \\<Longrightarrow>\n    (Sign X K \\<in> synth H) = (Sign X K \\<in> H)", "by blast"], ["", "(****************************************************************************************)"], ["", "subsection \\<open>Message decomposition\\<close>"], ["", "(****************************************************************************************)"], ["", "text \\<open>Dolev-Yao message decomposition using known keys.\\<close>"], ["", "inductive_set\n  analz :: \"msg set \\<Rightarrow> msg set\"\n  for H :: \"msg set\"\n  where\n    Ax [intro]: \"X \\<in> H \\<Longrightarrow> X \\<in> analz H\"\n  | Fst: \"Pair X Y \\<in> analz H \\<Longrightarrow> X \\<in> analz H\"\n  | Snd: \"Pair X Y \\<in> analz H \\<Longrightarrow> Y \\<in> analz H\"\n  | Dec [dest]: \n      \"\\<lbrakk> Enc X Y \\<in> analz H; Y \\<in> synth (analz H) \\<rbrakk> \\<Longrightarrow> X \\<in> analz H\"\n  | Adec_lt [dest]: \n      \"\\<lbrakk> Aenc X (LtK (publK Y)) \\<in> analz H; priK Y \\<in> analz H \\<rbrakk> \\<Longrightarrow> X \\<in> analz H\"\n  | Adec_eph [dest]: \n      \"\\<lbrakk> Aenc X (EphK (epublK Y)) \\<in> analz H; epriK Y \\<in> synth (analz H) \\<rbrakk> \\<Longrightarrow> X \\<in> analz H\"\n  | Sign_getmsg [dest]: \n      \"Sign X (priK Y) \\<in> analz H \\<Longrightarrow> pubK Y \\<in> analz H \\<Longrightarrow> X \\<in> analz H\""], ["", "text \\<open>Lemmas about Dolev-Yao message decomposition.\\<close>"], ["", "lemma analz_mono: \"G \\<subseteq> H \\<Longrightarrow> analz(G) \\<subseteq> analz(H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<subseteq> H \\<Longrightarrow> analz G \\<subseteq> analz H", "by (safe, erule analz.induct) (auto dest: Fst Snd synth_Int2)"], ["", "lemmas analz_monotone = analz_mono [THEN [2] rev_subsetD]"], ["", "lemma Pair_analz [elim!]:\n  \"\\<lbrakk> Pair X Y \\<in> analz H; \\<lbrakk> X \\<in> analz H; Y \\<in> analz H \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>X, Y\\<rangle> \\<in> analz H;\n     \\<lbrakk>X \\<in> analz H; Y \\<in> analz H\\<rbrakk>\n     \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (blast dest: analz.Fst analz.Snd)"], ["", "lemma analz_empty [simp]: \"analz {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz {} = {}", "by (safe, erule analz.induct) (blast+)"], ["", "lemma analz_increasing: \"H \\<subseteq> analz(H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> analz H", "by auto"], ["", "lemma analz_analzD [dest!]: \"X \\<in> analz (analz H) \\<Longrightarrow> X \\<in> analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> analz (analz H) \\<Longrightarrow> X \\<in> analz H", "by (induction X rule: analz.induct) (auto dest: synth_monotone)"], ["", "lemma analz_idem [simp]: \"analz (analz H) = analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (analz H) = analz H", "by auto"], ["", "lemma analz_Un: \"analz G \\<union> analz H \\<subseteq> analz (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz G \\<union> analz H \\<subseteq> analz (G \\<union> H)", "by (intro Un_least analz_mono Un_upper1 Un_upper2)"], ["", "lemma analz_insertI: \"X \\<in> analz H \\<Longrightarrow> X \\<in> analz (insert Y H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> analz H \\<Longrightarrow> X \\<in> analz (insert Y H)", "by (blast intro: analz_monotone)"], ["", "lemma analz_insert: \"insert X (analz H) \\<subseteq> analz (insert X H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert X (analz H) \\<subseteq> analz (insert X H)", "by (blast intro: analz_monotone)"], ["", "lemmas analz_insert_eq_I = equalityI [OF subsetI analz_insert]"], ["", "lemma analz_subset_iff [simp]: \"analz G \\<subseteq> analz H \\<longleftrightarrow> G \\<subseteq> analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (analz G \\<subseteq> analz H) = (G \\<subseteq> analz H)", "by (blast dest: analz_mono)"], ["", "lemma analz_trans: \"X \\<in> analz G \\<Longrightarrow>  G \\<subseteq> analz H \\<Longrightarrow> X \\<in> analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> analz G; G \\<subseteq> analz H\\<rbrakk>\n    \\<Longrightarrow> X \\<in> analz H", "by (drule analz_mono) blast"], ["", "lemma analz_cut: \"Y \\<in> analz (insert X H) \\<Longrightarrow>  X \\<in> analz H \\<Longrightarrow> Y \\<in> analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<in> analz (insert X H); X \\<in> analz H\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> analz H", "by (erule analz_trans) blast"], ["", "lemma analz_insert_eq: \"X \\<in> analz H \\<Longrightarrow> analz (insert X H) = analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> analz H \\<Longrightarrow> analz (insert X H) = analz H", "by (blast intro: analz_cut analz_insertI)"], ["", "lemma analz_subset_cong:\n  \"analz G \\<subseteq> analz G' \\<Longrightarrow>\n   analz H \\<subseteq> analz H' \\<Longrightarrow> \n   analz (G \\<union> H) \\<subseteq> analz (G' \\<union> H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>analz G \\<subseteq> analz G';\n     analz H \\<subseteq> analz H'\\<rbrakk>\n    \\<Longrightarrow> analz (G \\<union> H)\n                      \\<subseteq> analz (G' \\<union> H')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<subseteq> analz G'; H \\<subseteq> analz H'\\<rbrakk>\n    \\<Longrightarrow> G \\<subseteq> analz (G' \\<union> H') \\<and>\n                      H \\<subseteq> analz (G' \\<union> H')", "apply (iprover intro: conjI subset_trans analz_mono Un_upper1 Un_upper2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma analz_cong:\n  \"analz G = analz G' \\<Longrightarrow>\n   analz H = analz H' \\<Longrightarrow>\n   analz (G \\<union> H) = analz (G' \\<union> H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>analz G = analz G'; analz H = analz H'\\<rbrakk>\n    \\<Longrightarrow> analz (G \\<union> H) = analz (G' \\<union> H')", "by (intro equalityI analz_subset_cong, simp_all)"], ["", "lemma analz_insert_cong:\n  \"analz H = analz H' \\<Longrightarrow>\n   analz (insert X H) = analz (insert X H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz H = analz H' \\<Longrightarrow>\n    analz (insert X H) = analz (insert X H')", "by (force simp only: insert_def intro!: analz_cong)"], ["", "lemma analz_trivial:\n  \"\\<forall>X Y. Pair X Y \\<notin> H \\<Longrightarrow>\n   \\<forall>X Y. Enc X Y \\<notin> H \\<Longrightarrow>\n   \\<forall>X Y. Aenc X Y \\<notin> H \\<Longrightarrow>\n   \\<forall>X Y. Sign X Y \\<notin> H \\<Longrightarrow>\n   analz H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>X Y. \\<langle>X, Y\\<rangle> \\<notin> H;\n     \\<forall>X Y. Enc X Y \\<notin> H; \\<forall>X Y. Aenc X Y \\<notin> H;\n     \\<forall>X Y. Sign X Y \\<notin> H\\<rbrakk>\n    \\<Longrightarrow> analz H = H", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>X Y. \\<langle>X, Y\\<rangle> \\<notin> H;\n        \\<forall>X Y. Enc X Y \\<notin> H; \\<forall>X Y. Aenc X Y \\<notin> H;\n        \\<forall>X Y. Sign X Y \\<notin> H; x \\<in> analz H\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>X Y. \\<langle>X, Y\\<rangle> \\<notin> H;\n        \\<forall>X Y. Enc X Y \\<notin> H; \\<forall>X Y. Aenc X Y \\<notin> H;\n        \\<forall>X Y. Sign X Y \\<notin> H; x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> x \\<in> analz H", "apply (erule analz.induct, blast+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma analz_analz_Un [simp]: \"analz (analz G \\<union> H) = analz (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (analz G \\<union> H) = analz (G \\<union> H)", "apply (intro equalityI analz_subset_cong)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. analz (analz G) \\<subseteq> analz G\n 2. analz H \\<subseteq> analz H\n 3. analz G \\<subseteq> analz (analz G)\n 4. analz H \\<subseteq> analz H", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma analz_Un_analz [simp]: \"analz (G \\<union> analz H) = analz (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (G \\<union> analz H) = analz (G \\<union> H)", "by (subst Un_commute, auto)+"], ["", "text \\<open>Lemmas about analz and insert.\\<close>"], ["", "lemma analz_insert_Agent [simp]:\n  \"analz (insert (Agent A) H) = insert (Agent A) (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (insert (Messages.Agent A) H) =\n    insert (Messages.Agent A) (analz H)", "apply (rule analz_insert_eq_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> analz (insert (Messages.Agent A) H) \\<Longrightarrow>\n       x \\<in> insert (Messages.Agent A) (analz H)", "apply (erule analz.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x X.\n       X \\<in> insert (Messages.Agent A) H \\<Longrightarrow>\n       X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> Y \\<in> insert (Messages.Agent A) (analz H)\n 4. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 5. \\<And>x X Y.\n       \\<lbrakk>Aenc X (pubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (pubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        priK Y \\<in> analz (insert (Messages.Agent A) H);\n        priK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 6. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 7. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "thm analz.induct"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x X.\n       X \\<in> insert (Messages.Agent A) H \\<Longrightarrow>\n       X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> Y \\<in> insert (Messages.Agent A) (analz H)\n 4. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 5. \\<And>x X Y.\n       \\<lbrakk>Aenc X (pubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (pubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        priK Y \\<in> analz (insert (Messages.Agent A) H);\n        priK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 6. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 7. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply fastforce"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> Y \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 4. \\<And>x X Y.\n       \\<lbrakk>Aenc X (pubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (pubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        priK Y \\<in> analz (insert (Messages.Agent A) H);\n        priK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 5. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 6. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply fastforce"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle>\n                \\<in> analz (insert (Messages.Agent A) H);\n        \\<langle>X, Y\\<rangle>\n        \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> Y \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>Aenc X (pubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (pubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        priK Y \\<in> analz (insert (Messages.Agent A) H);\n        priK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 4. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 5. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Aenc X (pubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (pubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        priK Y \\<in> analz (insert (Messages.Agent A) H);\n        priK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 4. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "defer 1"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>Aenc X (pubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (pubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        priK Y \\<in> analz (insert (Messages.Agent A) H);\n        priK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 4. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "defer 1"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>Sign X (priK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Sign X (priK Y) \\<in> insert (Messages.Agent A) (analz H);\n        pubK Y \\<in> analz (insert (Messages.Agent A) H);\n        pubK Y \\<in> insert (Messages.Agent A) (analz H)\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 3. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply (rename_tac x X Y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> insert (Messages.Agent A) (analz H);\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)\n 2. \\<And>x X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> insert (Messages.Agent A) (analz H);\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a \\<in> insert (Messages.Agent A) (analz H)})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> insert (Messages.Agent A) (analz H)", "apply (subgoal_tac \"Y \\<in> synth (analz H)\", auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>Enc X Y \\<in> analz (insert (Messages.Agent A) H);\n        Enc X Y \\<in> analz H;\n        Y \\<in> synth\n                 (analz (insert (Messages.Agent A) H) \\<inter>\n                  {a. a = Messages.Agent A \\<or> a \\<in> analz H})\\<rbrakk>\n       \\<Longrightarrow> Y \\<in> synth (analz H)\n 2. \\<And>X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> analz H;\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> X = Messages.Agent A", "apply (thin_tac \"Enc X Y \\<in> Z\" for Z)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       Y \\<in> synth\n                (analz (insert (Messages.Agent A) H) \\<inter>\n                 {a. a = Messages.Agent A \\<or>\n                     a \\<in> analz H}) \\<Longrightarrow>\n       Y \\<in> synth (analz H)\n 2. \\<And>X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> analz H;\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> X = Messages.Agent A", "apply (drule synth_Int2, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       Y \\<in> synth\n                {a. a = Messages.Agent A \\<or>\n                    a \\<in> analz H} \\<Longrightarrow>\n       Y \\<in> synth (analz H)\n 2. \\<And>X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> analz H;\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> X = Messages.Agent A", "apply (erule synth.induct, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> analz H;\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> X = Messages.Agent A", "apply (rename_tac X Y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> analz H;\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> X = Messages.Agent A", "apply (subgoal_tac \"epriK Y \\<in> synth (analz H)\", auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X Y.\n       \\<lbrakk>Aenc X (epubK Y) \\<in> analz (insert (Messages.Agent A) H);\n        Aenc X (epubK Y) \\<in> analz H;\n        epriK Y\n        \\<in> synth\n               (analz (insert (Messages.Agent A) H) \\<inter>\n                {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> epriK Y \\<in> synth (analz H)", "apply (thin_tac \"Aenc X (epubK Y) \\<in> Z\" for Z)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X Y.\n       \\<lbrakk>epriK Y\n                \\<in> synth\n                       (analz (insert (Messages.Agent A) H) \\<inter>\n                        {a. a = Messages.Agent A \\<or> a \\<in> analz H});\n        X \\<notin> analz H\\<rbrakk>\n       \\<Longrightarrow> epriK Y \\<in> synth (analz H)", "apply (erule synth.induct, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(****************************************************************************************)"], ["", "subsection \\<open>Lemmas about combined composition/decomposition\\<close>"], ["", "(****************************************************************************************)"], ["", "lemma synth_analz_incr: \"H \\<subseteq> synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> synth (analz H)", "by auto"], ["", "lemmas synth_analz_increasing = synth_analz_incr [THEN [2] rev_subsetD]"], ["", "lemma synth_analz_mono: \"G \\<subseteq> H \\<Longrightarrow> synth (analz G) \\<subseteq> synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<subseteq> H \\<Longrightarrow>\n    synth (analz G) \\<subseteq> synth (analz H)", "by (blast intro!: analz_mono synth_mono)"], ["", "lemmas synth_analz_monotone = synth_analz_mono [THEN [2] rev_subsetD]"], ["", "lemma lem1: \n  \"Y \\<in> synth (analz (synth G \\<union> H) \\<inter> (analz (G \\<union> H) \\<union> synth G)) \n\\<Longrightarrow> Y \\<in> synth (analz (G \\<union> H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<in> synth\n             (analz (synth G \\<union> H) \\<inter>\n              (analz (G \\<union> H) \\<union> synth G)) \\<Longrightarrow>\n    Y \\<in> synth (analz (G \\<union> H))", "apply (rule subsetD, auto simp add: synth_subset_iff intro: analz_increasing synth_monotone)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lem2: \"{a. a \\<in> analz (G \\<union> H) \\<or> a \\<in> synth G} = analz (G \\<union> H) \\<union> synth G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. a \\<in> analz (G \\<union> H) \\<or> a \\<in> synth G} =\n    analz (G \\<union> H) \\<union> synth G", "by auto"], ["", "lemma analz_synth_Un: \"analz (synth G \\<union> H) = analz (G \\<union> H) \\<union> synth G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (synth G \\<union> H) = analz (G \\<union> H) \\<union> synth G", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> analz (synth G \\<union> H) \\<Longrightarrow>\n       x \\<in> analz (G \\<union> H) \\<union> synth G\n 2. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> analz (synth G \\<union> H) \\<Longrightarrow>\n       x \\<in> analz (G \\<union> H) \\<union> synth G\n 2. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "assume \"x \\<in> analz (synth G \\<union> H)\""], ["proof (state)\nthis:\n  x \\<in> analz (synth G \\<union> H)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> analz (synth G \\<union> H) \\<Longrightarrow>\n       x \\<in> analz (G \\<union> H) \\<union> synth G\n 2. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "thus \"x \\<in> analz (G \\<union> H) \\<union> synth G\""], ["proof (prove)\nusing this:\n  x \\<in> analz (synth G \\<union> H)\n\ngoal (1 subgoal):\n 1. x \\<in> analz (G \\<union> H) \\<union> synth G", "by (induction x rule: analz.induct)\n     (auto simp add: lem2 intro: analz_monotone Fst Snd Dec Adec_eph Adec_lt Sign_getmsg \n           dest: lem1)"], ["proof (state)\nthis:\n  x \\<in> analz (G \\<union> H) \\<union> synth G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "assume \"x \\<in> analz (G \\<union> H) \\<union> synth G\""], ["proof (state)\nthis:\n  x \\<in> analz (G \\<union> H) \\<union> synth G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> analz (G \\<union> H) \\<union> synth G \\<Longrightarrow>\n       x \\<in> analz (synth G \\<union> H)", "thus \"x \\<in> analz (synth G \\<union> H)\""], ["proof (prove)\nusing this:\n  x \\<in> analz (G \\<union> H) \\<union> synth G\n\ngoal (1 subgoal):\n 1. x \\<in> analz (synth G \\<union> H)", "by (blast intro: analz_monotone)"], ["proof (state)\nthis:\n  x \\<in> analz (synth G \\<union> H)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma analz_synth: \"analz (synth H) = analz H \\<union> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (synth H) = analz H \\<union> synth H", "by (rule analz_synth_Un [where H=\"{}\", simplified])"], ["", "lemma analz_synth_Un2 [simp]: \"analz (G \\<union> synth H) = analz (G \\<union> H) \\<union> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (G \\<union> synth H) = analz (G \\<union> H) \\<union> synth H", "by (subst Un_commute, auto simp add: analz_synth_Un)+"], ["", "lemma synth_analz_synth [simp]: \"synth (analz (synth H)) = synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synth (analz (synth H)) = synth (analz H)", "by (auto del:subsetI) (auto simp add: synth_subset_iff analz_synth)"], ["", "lemma analz_synth_analz [simp]: \"analz (synth (analz H)) = synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (synth (analz H)) = synth (analz H)", "by (auto simp add: analz_synth)"], ["", "lemma synth_analz_idem [simp]: \"synth (analz (synth (analz H))) = synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synth (analz (synth (analz H))) = synth (analz H)", "by (simp only: analz_synth_analz) simp"], ["", "lemma insert_subset_synth_analz [simp]: \n  \"X \\<in> synth (analz H) \\<Longrightarrow> insert X H \\<subseteq> synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> synth (analz H) \\<Longrightarrow>\n    insert X H \\<subseteq> synth (analz H)", "by auto"], ["", "lemma synth_analz_insert [simp]: \n  assumes \"X \\<in> synth (analz H)\"\n  shows \"synth (analz (insert X H)) = synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synth (analz (insert X H)) = synth (analz H)", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> synth (analz H)\n\ngoal (1 subgoal):\n 1. synth (analz (insert X H)) = synth (analz H)", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H);\n        x \\<in> synth (analz (insert X H))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz H)\n 2. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H); x \\<in> synth (analz H)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz (insert X H))", "fix Z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H);\n        x \\<in> synth (analz (insert X H))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz H)\n 2. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H); x \\<in> synth (analz H)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz (insert X H))", "assume \"Z \\<in> synth (analz (insert X H))\""], ["proof (state)\nthis:\n  Z \\<in> synth (analz (insert X H))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H);\n        x \\<in> synth (analz (insert X H))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz H)\n 2. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H); x \\<in> synth (analz H)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz (insert X H))", "hence \"Z \\<in> synth (analz (synth (analz H)))\""], ["proof (prove)\nusing this:\n  Z \\<in> synth (analz (insert X H))\n\ngoal (1 subgoal):\n 1. Z \\<in> synth (analz (synth (analz H)))", "using assms"], ["proof (prove)\nusing this:\n  Z \\<in> synth (analz (insert X H))\n  X \\<in> synth (analz H)\n\ngoal (1 subgoal):\n 1. Z \\<in> synth (analz (synth (analz H)))", "by - (erule synth_analz_monotone, rule insert_subset_synth_analz)"], ["proof (state)\nthis:\n  Z \\<in> synth (analz (synth (analz H)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H);\n        x \\<in> synth (analz (insert X H))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz H)\n 2. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H); x \\<in> synth (analz H)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz (insert X H))", "thus \"Z \\<in> synth (analz H)\""], ["proof (prove)\nusing this:\n  Z \\<in> synth (analz (synth (analz H)))\n\ngoal (1 subgoal):\n 1. Z \\<in> synth (analz H)", "using assms"], ["proof (prove)\nusing this:\n  Z \\<in> synth (analz (synth (analz H)))\n  X \\<in> synth (analz H)\n\ngoal (1 subgoal):\n 1. Z \\<in> synth (analz H)", "by simp"], ["proof (state)\nthis:\n  Z \\<in> synth (analz H)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<in> synth (analz H); x \\<in> synth (analz H)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> synth (analz (insert X H))", "qed (auto intro: synth_analz_monotone)"], ["", "(****************************************************************************************)"], ["", "subsection \\<open>Accessible message parts\\<close>"], ["", "(****************************************************************************************)"], ["", "text \\<open>Accessible message parts: all subterms that are in principle extractable\nby the Dolev-Yao attacker, i.e., provided he knows all keys. Note that keys in\nkey positions and messages under hashes are not message parts in this sense.\\<close>"], ["", "inductive_set\n  parts :: \"msg set => msg set\"\n  for H :: \"msg set\"\nwhere\n    Inj [intro]: \"X \\<in> H \\<Longrightarrow> X \\<in> parts H\"\n  | Fst [intro]: \"Pair X Y \\<in> parts H \\<Longrightarrow> X \\<in> parts H\"\n  | Snd [intro]: \"Pair X Y \\<in> parts H \\<Longrightarrow> Y \\<in> parts H\"\n  | Dec [intro]: \"Enc X Y \\<in> parts H \\<Longrightarrow> X \\<in> parts H\"\n  | Adec [intro]: \"Aenc X Y \\<in> parts H \\<Longrightarrow> X \\<in> parts H\"\n  | Sign_getmsg [intro]: \"Sign X Y \\<in> parts H \\<Longrightarrow> X \\<in> parts H\""], ["", "text \\<open>Lemmas about accessible message parts.\\<close>"], ["", "lemma parts_mono [mono_set]: \"G \\<subseteq> H \\<Longrightarrow> parts G \\<subseteq> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<subseteq> H \\<Longrightarrow> parts G \\<subseteq> parts H", "by (auto, erule parts.induct, auto)"], ["", "lemmas parts_monotone = parts_mono [THEN [2] rev_subsetD]"], ["", "lemma Pair_parts [elim]:\n  \"\\<lbrakk> Pair X Y \\<in> parts H; \\<lbrakk> X \\<in> parts H; Y \\<in> parts H \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>X, Y\\<rangle> \\<in> parts H;\n     \\<lbrakk>X \\<in> parts H; Y \\<in> parts H\\<rbrakk>\n     \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by blast"], ["", "lemma parts_increasing: \"H \\<subseteq> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<subseteq> parts H", "by blast"], ["", "lemmas parts_insertI = subset_insertI [THEN parts_mono, THEN subsetD]"], ["", "lemma parts_empty [simp]: \"parts {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts {} = {}", "by (safe, erule parts.induct, auto)"], ["", "lemma parts_atomic [simp]: \"atomic x \\<Longrightarrow> parts {x} = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atomic x \\<Longrightarrow> parts {x} = {x}", "by (auto, erule parts.induct, auto)"], ["", "lemma parts_InsecTag [simp]: \"parts {Tag t} = {Tag t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts {Tag t} = {Tag t}", "by (safe, erule parts.induct) (auto)"], ["", "lemma parts_emptyE [elim!]: \"X \\<in> parts {} \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> parts {} \\<Longrightarrow> P", "by simp"], ["", "lemma parts_Tags [simp]:\n  \"parts Tags = Tags\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts Tags = Tags", "by (rule, rule, erule parts.induct, auto)"], ["", "lemma parts_singleton: \"X \\<in> parts H \\<Longrightarrow> \\<exists> Y\\<in>H. X \\<in> parts {Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> parts H \\<Longrightarrow> \\<exists>Y\\<in>H. X \\<in> parts {Y}", "by (erule parts.induct, blast+)"], ["", "lemma parts_Agents [simp]:\n  \"parts (Agent` G) = Agent` G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (Messages.Agent ` G) = Messages.Agent ` G", "by (auto elim: parts.induct)"], ["", "lemma parts_Un [simp]: \"parts (G \\<union> H) = parts G \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (G \\<union> H) = parts G \\<union> parts H", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. parts (G \\<union> H) \\<subseteq> parts G \\<union> parts H\n 2. parts G \\<union> parts H \\<subseteq> parts (G \\<union> H)", "show \"parts (G \\<union> H) \\<subseteq> parts G \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (G \\<union> H) \\<subseteq> parts G \\<union> parts H", "by (rule, erule parts.induct) (auto)"], ["proof (state)\nthis:\n  parts (G \\<union> H) \\<subseteq> parts G \\<union> parts H\n\ngoal (1 subgoal):\n 1. parts G \\<union> parts H \\<subseteq> parts (G \\<union> H)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. parts G \\<union> parts H \\<subseteq> parts (G \\<union> H)", "show \"parts G \\<union> parts H \\<subseteq> parts (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts G \\<union> parts H \\<subseteq> parts (G \\<union> H)", "by (intro Un_least parts_mono Un_upper1 Un_upper2)"], ["proof (state)\nthis:\n  parts G \\<union> parts H \\<subseteq> parts (G \\<union> H)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma parts_insert_subset_Un: \n  assumes \"X \\<in> G\" \n  shows \"parts (insert X H) \\<subseteq> parts G \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X H) \\<subseteq> parts G \\<union> parts H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. parts (insert X H) \\<subseteq> parts G \\<union> parts H", "from assms"], ["proof (chain)\npicking this:\n  X \\<in> G", "have \"parts (insert X H) \\<subseteq> parts (G \\<union> H)\""], ["proof (prove)\nusing this:\n  X \\<in> G\n\ngoal (1 subgoal):\n 1. parts (insert X H) \\<subseteq> parts (G \\<union> H)", "by (blast intro!: parts_mono)"], ["proof (state)\nthis:\n  parts (insert X H) \\<subseteq> parts (G \\<union> H)\n\ngoal (1 subgoal):\n 1. parts (insert X H) \\<subseteq> parts G \\<union> parts H", "thus ?thesis"], ["proof (prove)\nusing this:\n  parts (insert X H) \\<subseteq> parts (G \\<union> H)\n\ngoal (1 subgoal):\n 1. parts (insert X H) \\<subseteq> parts G \\<union> parts H", "by simp"], ["proof (state)\nthis:\n  parts (insert X H) \\<subseteq> parts G \\<union> parts H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma parts_insert: \"parts (insert X H) = parts {X} \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X H) = parts {X} \\<union> parts H", "by (blast intro!: parts_insert_subset_Un intro: parts_monotone)"], ["", "lemma parts_insert2:\n  \"parts (insert X (insert Y H)) = parts {X} \\<union> parts {Y} \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X (insert Y H)) =\n    parts {X} \\<union> parts {Y} \\<union> parts H", "apply (simp add: Un_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X (insert Y H)) =\n    parts {X} \\<union> (parts {Y} \\<union> parts H)", "apply (simp add: parts_insert [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma parts_UN [simp]: \"parts (\\<Union>x\\<in>A. H x) = (\\<Union>x\\<in>A. parts(H x))\" (is \"?X = ?Y\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (\\<Union> (H ` A)) = (\\<Union>x\\<in>A. parts (H x))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. parts (\\<Union> (H ` A)) \\<subseteq> (\\<Union>x\\<in>A. parts (H x))\n 2. (\\<Union>x\\<in>A. parts (H x)) \\<subseteq> parts (\\<Union> (H ` A))", "show \"?X \\<subseteq> ?Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (\\<Union> (H ` A)) \\<subseteq> (\\<Union>x\\<in>A. parts (H x))", "by (rule subsetI, erule parts.induct) (blast+)"], ["proof (state)\nthis:\n  parts (\\<Union> (H ` A)) \\<subseteq> (\\<Union>x\\<in>A. parts (H x))\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. parts (H x)) \\<subseteq> parts (\\<Union> (H ` A))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. parts (H x)) \\<subseteq> parts (\\<Union> (H ` A))", "show \"?Y \\<subseteq> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. parts (H x)) \\<subseteq> parts (\\<Union> (H ` A))", "by (intro UN_least parts_mono UN_upper)"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>A. parts (H x)) \\<subseteq> parts (\\<Union> (H ` A))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas in_parts_UnE [elim!] = parts_Un [THEN equalityD1, THEN subsetD, THEN UnE]"], ["", "lemma parts_insert_subset: \"insert X (parts H) \\<subseteq> parts (insert X H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert X (parts H) \\<subseteq> parts (insert X H)", "by (blast intro: parts_mono [THEN [2] rev_subsetD])"], ["", "lemma parts_partsD [dest!]: \"X \\<in> parts (parts H) \\<Longrightarrow> X \\<in> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> parts (parts H) \\<Longrightarrow> X \\<in> parts H", "by (erule parts.induct, blast+)"], ["", "lemma parts_idem [simp]: \"parts (parts H) = parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (parts H) = parts H", "by blast"], ["", "lemma parts_subset_iff [simp]: \"(parts G \\<subseteq> parts H) \\<longleftrightarrow> (G \\<subseteq> parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (parts G \\<subseteq> parts H) = (G \\<subseteq> parts H)", "by (blast dest: parts_mono)"], ["", "lemma parts_trans: \"X \\<in> parts G \\<Longrightarrow>  G \\<subseteq> parts H \\<Longrightarrow> X \\<in> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> parts G; G \\<subseteq> parts H\\<rbrakk>\n    \\<Longrightarrow> X \\<in> parts H", "by (drule parts_mono, blast)"], ["", "lemma parts_cut:\n  \"Y \\<in> parts (insert X G) \\<Longrightarrow>  X \\<in> parts H \\<Longrightarrow> Y \\<in> parts (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<in> parts (insert X G); X \\<in> parts H\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> parts (G \\<union> H)", "by (blast intro: parts_trans)"], ["", "lemma parts_cut_eq [simp]: \"X \\<in> parts H \\<Longrightarrow> parts (insert X H) = parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> parts H \\<Longrightarrow> parts (insert X H) = parts H", "by (force dest!: parts_cut intro: parts_insertI)"], ["", "lemmas parts_insert_eq_I = equalityI [OF subsetI parts_insert_subset]"], ["", "lemma parts_insert_Agent [simp]:\n  \"parts (insert (Agent agt) H) = insert (Agent agt) (parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Messages.Agent agt) H) =\n    insert (Messages.Agent agt) (parts H)", "by (rule parts_insert_eq_I, erule parts.induct, auto)"], ["", "lemma parts_insert_Nonce [simp]:\n  \"parts (insert (Nonce N) H) = insert (Nonce N) (parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Nonce N) H) = insert (Nonce N) (parts H)", "by (rule parts_insert_eq_I, erule parts.induct, auto)"], ["", "lemma parts_insert_Number [simp]:\n  \"parts (insert (Number N) H) = insert (Number N) (parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Number N) H) = insert (Number N) (parts H)", "by (rule parts_insert_eq_I, erule parts.induct, auto)"], ["", "lemma parts_insert_LtK [simp]:\n  \"parts (insert (LtK K) H) = insert (LtK K) (parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (LtK K) H) = insert (LtK K) (parts H)", "by (rule parts_insert_eq_I, erule parts.induct, auto)"], ["", "lemma parts_insert_Hash [simp]:\n  \"parts (insert (Hash X) H) = insert (Hash X) (parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Hash X) H) = insert (Hash X) (parts H)", "by (rule parts_insert_eq_I, erule parts.induct, auto)"], ["", "lemma parts_insert_Enc [simp]:\n  \"parts (insert (Enc X Y) H) = insert (Enc X Y) (parts {X} \\<union> parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Enc X Y) H) =\n    insert (Enc X Y) (parts {X} \\<union> parts H)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. parts (insert (Enc X Y) H)\n    \\<subseteq> insert (Enc X Y) (parts {X} \\<union> parts H)\n 2. insert (Enc X Y) (parts {X} \\<union> parts H)\n    \\<subseteq> parts (insert (Enc X Y) H)", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> parts (insert (Enc X Y) H) \\<Longrightarrow>\n       x \\<in> insert (Enc X Y) (parts {X} \\<union> parts H)\n 2. insert (Enc X Y) (parts {X} \\<union> parts H)\n    \\<subseteq> parts (insert (Enc X Y) H)", "apply (erule parts.induct, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma parts_insert_Aenc [simp]:\n  \"parts (insert (Aenc X Y) H) = insert (Aenc X Y) (parts {X} \\<union> parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Aenc X Y) H) =\n    insert (Aenc X Y) (parts {X} \\<union> parts H)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. parts (insert (Aenc X Y) H)\n    \\<subseteq> insert (Aenc X Y) (parts {X} \\<union> parts H)\n 2. insert (Aenc X Y) (parts {X} \\<union> parts H)\n    \\<subseteq> parts (insert (Aenc X Y) H)", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> parts (insert (Aenc X Y) H) \\<Longrightarrow>\n       x \\<in> insert (Aenc X Y) (parts {X} \\<union> parts H)\n 2. insert (Aenc X Y) (parts {X} \\<union> parts H)\n    \\<subseteq> parts (insert (Aenc X Y) H)", "apply (erule parts.induct, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma parts_insert_Sign [simp]:\n  \"parts (insert (Sign X Y) H) = insert (Sign X Y) (parts {X} \\<union> parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert (Sign X Y) H) =\n    insert (Sign X Y) (parts {X} \\<union> parts H)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. parts (insert (Sign X Y) H)\n    \\<subseteq> insert (Sign X Y) (parts {X} \\<union> parts H)\n 2. insert (Sign X Y) (parts {X} \\<union> parts H)\n    \\<subseteq> parts (insert (Sign X Y) H)", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> parts (insert (Sign X Y) H) \\<Longrightarrow>\n       x \\<in> insert (Sign X Y) (parts {X} \\<union> parts H)\n 2. insert (Sign X Y) (parts {X} \\<union> parts H)\n    \\<subseteq> parts (insert (Sign X Y) H)", "apply (erule parts.induct, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma parts_insert_Pair [simp]:\n  \"parts (insert (Pair X Y) H) = insert (Pair X Y) (parts {X} \\<union> parts {Y} \\<union> parts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert \\<langle>X, Y\\<rangle> H) =\n    insert \\<langle>X, Y\\<rangle>\n     (parts {X} \\<union> parts {Y} \\<union> parts H)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. parts (insert \\<langle>X, Y\\<rangle> H)\n    \\<subseteq> insert \\<langle>X, Y\\<rangle>\n                 (parts {X} \\<union> parts {Y} \\<union> parts H)\n 2. insert \\<langle>X, Y\\<rangle>\n     (parts {X} \\<union> parts {Y} \\<union> parts H)\n    \\<subseteq> parts (insert \\<langle>X, Y\\<rangle> H)", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> parts (insert \\<langle>X, Y\\<rangle> H) \\<Longrightarrow>\n       x \\<in> insert \\<langle>X, Y\\<rangle>\n                (parts {X} \\<union> parts {Y} \\<union> parts H)\n 2. insert \\<langle>X, Y\\<rangle>\n     (parts {X} \\<union> parts {Y} \\<union> parts H)\n    \\<subseteq> parts (insert \\<langle>X, Y\\<rangle> H)", "apply (erule parts.induct, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Lemmas about combinations with composition and decomposition\\<close>"], ["", "(****************************************************************************************)"], ["", "lemma analz_subset_parts: \"analz H \\<subseteq> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz H \\<subseteq> parts H", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> analz H \\<Longrightarrow> x \\<in> parts H", "apply (erule analz.induct, blast+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas analz_into_parts [simp] = analz_subset_parts [THEN subsetD]"], ["", "lemmas not_parts_not_analz = analz_subset_parts [THEN contra_subsetD]"], ["", "lemma parts_analz [simp]: \"parts (analz H) = parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (analz H) = parts H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. parts (analz H) \\<subseteq> parts H\n 2. parts H \\<subseteq> parts (analz H)", "apply (rule analz_subset_parts [THEN parts_mono, THEN subset_trans], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. parts H \\<subseteq> parts (analz H)", "apply (blast intro: analz_increasing [THEN parts_mono, THEN subsetD])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma analz_parts [simp]: \"analz (parts H) = parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (parts H) = parts H", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> analz (parts H) \\<Longrightarrow> x \\<in> parts H", "apply (erule analz.induct, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma parts_synth [simp]: \"parts (synth H) = parts H \\<union> synth H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (synth H) = parts H \\<union> synth H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. parts (synth H) \\<subseteq> parts H \\<union> synth H\n 2. parts H \\<union> synth H \\<subseteq> parts (synth H)", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> parts (synth H) \\<Longrightarrow>\n       x \\<in> parts H \\<union> synth H\n 2. parts H \\<union> synth H \\<subseteq> parts (synth H)", "apply (erule parts.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x X.\n       X \\<in> synth H \\<Longrightarrow> X \\<in> parts H \\<union> synth H\n 2. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle> \\<in> parts (synth H);\n        \\<langle>X, Y\\<rangle> \\<in> parts H \\<union> synth H\\<rbrakk>\n       \\<Longrightarrow> X \\<in> parts H \\<union> synth H\n 3. \\<And>x X Y.\n       \\<lbrakk>\\<langle>X, Y\\<rangle> \\<in> parts (synth H);\n        \\<langle>X, Y\\<rangle> \\<in> parts H \\<union> synth H\\<rbrakk>\n       \\<Longrightarrow> Y \\<in> parts H \\<union> synth H\n 4. \\<And>x X Y.\n       \\<lbrakk>Enc X Y \\<in> parts (synth H);\n        Enc X Y \\<in> parts H \\<union> synth H\\<rbrakk>\n       \\<Longrightarrow> X \\<in> parts H \\<union> synth H\n 5. \\<And>x X Y.\n       \\<lbrakk>Aenc X Y \\<in> parts (synth H);\n        Aenc X Y \\<in> parts H \\<union> synth H\\<rbrakk>\n       \\<Longrightarrow> X \\<in> parts H \\<union> synth H\n 6. \\<And>x X Y.\n       \\<lbrakk>Sign X Y \\<in> parts (synth H);\n        Sign X Y \\<in> parts H \\<union> synth H\\<rbrakk>\n       \\<Longrightarrow> X \\<in> parts H \\<union> synth H\n 7. parts H \\<union> synth H \\<subseteq> parts (synth H)", "apply (blast intro: synth_increasing [THEN parts_mono, THEN subsetD] )+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Fake_parts_insert:\n  \"X \\<in> synth (analz H) \\<Longrightarrow> parts (insert X H) \\<subseteq> synth (analz H) \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> synth (analz H) \\<Longrightarrow>\n    parts (insert X H) \\<subseteq> synth (analz H) \\<union> parts H", "apply (drule parts_insert_subset_Un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X ?H)\n    \\<subseteq> parts (synth (analz H)) \\<union> parts ?H \\<Longrightarrow>\n    parts (insert X H) \\<subseteq> synth (analz H) \\<union> parts H", "apply (simp (no_asm_use))"], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X ?H)\n    \\<subseteq> parts H \\<union> synth (analz H) \\<union>\n                parts ?H \\<Longrightarrow>\n    parts (insert X H) \\<subseteq> synth (analz H) \\<union> parts H", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Fake_parts_insert_in_Un:\n  \"Z \\<in> parts (insert X H) \\<Longrightarrow>\n   X \\<in> synth (analz H) \\<Longrightarrow>\n   Z \\<in>  synth (analz H) \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Z \\<in> parts (insert X H); X \\<in> synth (analz H)\\<rbrakk>\n    \\<Longrightarrow> Z \\<in> synth (analz H) \\<union> parts H", "by (blast dest: Fake_parts_insert [THEN subsetD, dest])"], ["", "lemma analz_conj_parts [simp]:\n  \"X \\<in> analz H \\<and> X \\<in> parts H \\<longleftrightarrow> X \\<in> analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> analz H \\<and> X \\<in> parts H) = (X \\<in> analz H)", "by (blast intro: analz_subset_parts [THEN subsetD])"], ["", "lemma analz_disj_parts [simp]:\n  \"X \\<in> analz H \\<or> X \\<in> parts H \\<longleftrightarrow> X \\<in> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<in> analz H \\<or> X \\<in> parts H) = (X \\<in> parts H)", "by (blast intro: analz_subset_parts [THEN subsetD])"], ["", "(****************************************************************************************)"], ["", "subsection \\<open>More lemmas about combinations of closures\\<close>"], ["", "(****************************************************************************************)"], ["", "text \\<open>Combinations of @{term synth} and @{term analz}.\\<close>"], ["", "lemma Pair_synth_analz [simp]:\n  \"Pair X Y \\<in> synth (analz H) \\<longleftrightarrow> X \\<in> synth (analz H) \\<and> Y \\<in> synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>X, Y\\<rangle> \\<in> synth (analz H)) =\n    (X \\<in> synth (analz H) \\<and> Y \\<in> synth (analz H))", "by blast"], ["", "lemma Enc_synth_analz:\n  \"Y \\<in> synth (analz H) \\<Longrightarrow>\n   (Enc X Y \\<in> synth (analz H)) \\<longleftrightarrow> (X \\<in> synth (analz H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<in> synth (analz H) \\<Longrightarrow>\n    (Enc X Y \\<in> synth (analz H)) = (X \\<in> synth (analz H))", "by blast"], ["", "lemma Hash_synth_analz [simp]:\n  \"X \\<notin> synth (analz H) \\<Longrightarrow>\n   (Hash (Pair X Y) \\<in> synth (analz H)) \\<longleftrightarrow> (Hash (Pair X Y) \\<in> analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<notin> synth (analz H) \\<Longrightarrow>\n    (hmac X Y \\<in> synth (analz H)) = (hmac X Y \\<in> analz H)", "by blast"], ["", "lemma gen_analz_insert_eq:\n  \"\\<lbrakk> X \\<in> analz G; G \\<subseteq> H \\<rbrakk> \\<Longrightarrow> analz (insert X H) = analz H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> analz G; G \\<subseteq> H\\<rbrakk>\n    \\<Longrightarrow> analz (insert X H) = analz H", "by (blast intro: analz_cut analz_insertI analz_monotone)"], ["", "lemma synth_analz_insert_eq:\n  \"\\<lbrakk> X \\<in> synth (analz G); G \\<subseteq> H \\<rbrakk> \\<Longrightarrow> synth (analz (insert X H)) = synth (analz H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> synth (analz G); G \\<subseteq> H\\<rbrakk>\n    \\<Longrightarrow> synth (analz (insert X H)) = synth (analz H)", "by (blast intro!: synth_analz_insert synth_analz_monotone)"], ["", "lemma Fake_parts_sing:\n  \"X \\<in> synth (analz H) \\<Longrightarrow> parts {X} \\<subseteq> synth (analz H) \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> synth (analz H) \\<Longrightarrow>\n    parts {X} \\<subseteq> synth (analz H) \\<union> parts H", "apply (rule subset_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. X \\<in> synth (analz H) \\<Longrightarrow> parts {X} \\<subseteq> ?B\n 2. X \\<in> synth (analz H) \\<Longrightarrow>\n    ?B \\<subseteq> synth (analz H) \\<union> parts H", "apply (erule_tac [2] Fake_parts_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> synth (analz H) \\<Longrightarrow>\n    parts {X} \\<subseteq> parts (insert X H)", "apply (rule parts_mono, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Fake_parts_sing_imp_Un = Fake_parts_sing [THEN [2] rev_subsetD]"], ["", "lemma analz_hash_nonce [simp]: \n  \"analz {M. \\<exists>N. M = Hash (Nonce N)} = {M. \\<exists>N. M = Hash (Nonce N)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz {M. \\<exists>N. M = Hash (Nonce N)} =\n    {M. \\<exists>N. M = Hash (Nonce N)}", "by (auto, rule analz.induct, auto)"], ["", "lemma synth_analz_hash_nonce [simp]: \n  \"NonceF N \\<notin> synth (analz {M. \\<exists>N. M = Hash (Nonce N)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NonceF N \\<notin> synth (analz {M. \\<exists>N. M = Hash (Nonce N)})", "by auto"], ["", "lemma synth_analz_idem_mono:\n  \"S \\<subseteq> synth (analz S') \\<Longrightarrow> synth (analz S) \\<subseteq> synth (analz S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> synth (analz S') \\<Longrightarrow>\n    synth (analz S) \\<subseteq> synth (analz S')", "by (frule synth_analz_mono, auto)"], ["", "lemmas synth_analz_idem_monoI =\n  synth_analz_idem_mono [THEN [2] rev_subsetD]"], ["", "lemma analz_synth_subset:\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n   analz Y \\<subseteq> synth (analz Y') \\<Longrightarrow>\n   analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "assume \"analz X \\<subseteq> synth (analz X')\""], ["proof (state)\nthis:\n  analz X \\<subseteq> synth (analz X')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "then"], ["proof (chain)\npicking this:\n  analz X \\<subseteq> synth (analz X')", "have HX:\"analz X \\<subseteq> analz (synth (analz X'))\""], ["proof (prove)\nusing this:\n  analz X \\<subseteq> synth (analz X')\n\ngoal (1 subgoal):\n 1. analz X \\<subseteq> analz (synth (analz X'))", "by blast"], ["proof (state)\nthis:\n  analz X \\<subseteq> analz (synth (analz X'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "assume \"analz Y \\<subseteq> synth (analz Y')\""], ["proof (state)\nthis:\n  analz Y \\<subseteq> synth (analz Y')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "then"], ["proof (chain)\npicking this:\n  analz Y \\<subseteq> synth (analz Y')", "have HY:\"analz Y \\<subseteq> analz (synth (analz Y'))\""], ["proof (prove)\nusing this:\n  analz Y \\<subseteq> synth (analz Y')\n\ngoal (1 subgoal):\n 1. analz Y \\<subseteq> analz (synth (analz Y'))", "by blast"], ["proof (state)\nthis:\n  analz Y \\<subseteq> analz (synth (analz Y'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "from analz_subset_cong [OF HX HY]"], ["proof (chain)\npicking this:\n  analz (X \\<union> Y)\n  \\<subseteq> analz (synth (analz X') \\<union> synth (analz Y'))", "have \"analz (X \\<union> Y) \\<subseteq> analz (synth (analz X') \\<union> synth (analz Y'))\""], ["proof (prove)\nusing this:\n  analz (X \\<union> Y)\n  \\<subseteq> analz (synth (analz X') \\<union> synth (analz Y'))\n\ngoal (1 subgoal):\n 1. analz (X \\<union> Y)\n    \\<subseteq> analz (synth (analz X') \\<union> synth (analz Y'))", "by blast"], ["proof (state)\nthis:\n  analz (X \\<union> Y)\n  \\<subseteq> analz (synth (analz X') \\<union> synth (analz Y'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "also"], ["proof (state)\nthis:\n  analz (X \\<union> Y)\n  \\<subseteq> analz (synth (analz X') \\<union> synth (analz Y'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "have \"... \\<subseteq> analz (synth (analz X' \\<union> analz Y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (synth (analz X') \\<union> synth (analz Y'))\n    \\<subseteq> analz (synth (analz X' \\<union> analz Y'))", "by (intro analz_mono synth_Un)"], ["proof (state)\nthis:\n  analz (synth (analz X') \\<union> synth (analz Y'))\n  \\<subseteq> analz (synth (analz X' \\<union> analz Y'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "also"], ["proof (state)\nthis:\n  analz (synth (analz X') \\<union> synth (analz Y'))\n  \\<subseteq> analz (synth (analz X' \\<union> analz Y'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "have \"... \\<subseteq> analz (synth (analz (X' \\<union> Y')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (synth (analz X' \\<union> analz Y'))\n    \\<subseteq> analz (synth (analz (X' \\<union> Y')))", "by (intro synth_mono analz_mono analz_Un)"], ["proof (state)\nthis:\n  analz (synth (analz X' \\<union> analz Y'))\n  \\<subseteq> analz (synth (analz (X' \\<union> Y')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "also"], ["proof (state)\nthis:\n  analz (synth (analz X' \\<union> analz Y'))\n  \\<subseteq> analz (synth (analz (X' \\<union> Y')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "have \"... \\<subseteq> synth (analz (X' \\<union> Y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz (synth (analz (X' \\<union> Y')))\n    \\<subseteq> synth (analz (X' \\<union> Y'))", "by auto"], ["proof (state)\nthis:\n  analz (synth (analz (X' \\<union> Y')))\n  \\<subseteq> synth (analz (X' \\<union> Y'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>analz X \\<subseteq> synth (analz X');\n     analz Y \\<subseteq> synth (analz Y')\\<rbrakk>\n    \\<Longrightarrow> analz (X \\<union> Y)\n                      \\<subseteq> synth (analz (X' \\<union> Y'))", "finally"], ["proof (chain)\npicking this:\n  analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))", "show \"analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))\""], ["proof (prove)\nusing this:\n  analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))\n\ngoal (1 subgoal):\n 1. analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))", "by auto"], ["proof (state)\nthis:\n  analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma analz_synth_subset_Un1 :\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow> analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n    analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y))", "using analz_synth_subset"], ["proof (prove)\nusing this:\n  \\<lbrakk>analz ?X \\<subseteq> synth (analz ?X');\n   analz ?Y \\<subseteq> synth (analz ?Y')\\<rbrakk>\n  \\<Longrightarrow> analz (?X \\<union> ?Y)\n                    \\<subseteq> synth (analz (?X' \\<union> ?Y'))\n\ngoal (1 subgoal):\n 1. analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n    analz (X \\<union> Y) \\<subseteq> synth (analz (X' \\<union> Y))", "by blast"], ["", "lemma analz_synth_subset_Un2 :\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow> analz (Y \\<union> X) \\<subseteq> synth (analz (Y \\<union> X'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n    analz (Y \\<union> X) \\<subseteq> synth (analz (Y \\<union> X'))", "using analz_synth_subset"], ["proof (prove)\nusing this:\n  \\<lbrakk>analz ?X \\<subseteq> synth (analz ?X');\n   analz ?Y \\<subseteq> synth (analz ?Y')\\<rbrakk>\n  \\<Longrightarrow> analz (?X \\<union> ?Y)\n                    \\<subseteq> synth (analz (?X' \\<union> ?Y'))\n\ngoal (1 subgoal):\n 1. analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n    analz (Y \\<union> X) \\<subseteq> synth (analz (Y \\<union> X'))", "by blast"], ["", "lemma analz_synth_insert:\n  \"analz X \\<subseteq> synth (analz X') \\<Longrightarrow> analz (insert Y X) \\<subseteq> synth (analz (insert Y X'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. analz X \\<subseteq> synth (analz X') \\<Longrightarrow>\n    analz (insert Y X) \\<subseteq> synth (analz (insert Y X'))", "by (metis analz_synth_subset_Un2 insert_def)"], ["", "lemma Fake_analz_insert_Un:\n  assumes \"Y \\<in> analz (insert X H)\" and \"X \\<in> synth (analz G)\" \n  shows \"Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)", "from assms"], ["proof (chain)\npicking this:\n  Y \\<in> analz (insert X H)\n  X \\<in> synth (analz G)", "have \"Y \\<in> analz (synth (analz G) \\<union> H)\""], ["proof (prove)\nusing this:\n  Y \\<in> analz (insert X H)\n  X \\<in> synth (analz G)\n\ngoal (1 subgoal):\n 1. Y \\<in> analz (synth (analz G) \\<union> H)", "by (blast intro: analz_mono [THEN [2] rev_subsetD] \n                     analz_mono [THEN synth_mono, THEN [2] rev_subsetD])"], ["proof (state)\nthis:\n  Y \\<in> analz (synth (analz G) \\<union> H)\n\ngoal (1 subgoal):\n 1. Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Y \\<in> analz (synth (analz G) \\<union> H)\n\ngoal (1 subgoal):\n 1. Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)", "by (simp add: sup.commute)"], ["proof (state)\nthis:\n  Y \\<in> synth (analz G) \\<union> analz (G \\<union> H)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}