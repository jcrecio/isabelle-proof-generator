{"file_name": "/home/qj213/afp-2021-10-22/thys/Flow_Networks/Residual_Graph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flow_Networks", "problem_names": ["lemma cfE_of_ss_invE: \"cfE_of cf \\<subseteq> E \\<union> E\\<inverse>\"", "lemma cfE_of_ss_VxV: \"cfE_of f \\<subseteq> V\\<times>V\"", "lemma cfE_of_finite[simp, intro!]: \"finite (cfE_of f)\"", "lemma cf_no_self_loop: \"(u,u)\\<notin>cfE_of f\"", "lemmas cf_def = residualGraph_def[of c f]", "lemmas cfE_ss_invE = cfE_of_ss_invE[of f]", "lemma resV_netV[simp]: \"cf.V = V\"", "lemma \"cf.V = V\"", "lemma resE_nonNegative: \"cf e \\<ge> 0\"", "lemma \"cf e \\<ge> 0\"", "lemma reverse_flow: \"Preflow cf s t f' \\<Longrightarrow> \\<forall>(u, v) \\<in> E. f' (v, u) \\<le> f (u, v)\"", "lemma (in NPreflow) E_ss_cfinvE: \"E \\<subseteq> Graph.E cf \\<union> (Graph.E cf)\\<inverse>\"", "lemma active_has_cf_outgoing: \"excess f u > 0 \\<Longrightarrow> cf.outgoing u \\<noteq> {}\"", "lemma this_loc_rpg: \"RPreGraph c s t cf\"", "lemma f_unique:\n    assumes \"NPreflow c s t f'\"\n    assumes A: \"cf = residualGraph c f'\"\n    shows \"f' = f\"", "lemma is_NPreflow: \"NPreflow c s t (flow_of_cf cf)\"", "lemma rg_is_cf[simp]: \"residualGraph c f = cf\"", "lemma rg_fo_inv[simp]: \"residualGraph c (flow_of_cf cf) = cf\"", "lemma resV_netV[simp]: \"cf.V = V\"", "lemma E_ss_cfinvE: \"E \\<subseteq> cf.E \\<union> cf.E\\<inverse>\"", "lemma cfE_ss_invE: \"cf.E \\<subseteq> E \\<union> E\\<inverse>\"", "lemma resE_nonNegative: \"cf e \\<ge> 0\"", "lemma is_RPreGraph: \"RPreGraph c s t cf\"", "lemma fo_rg_inv: \"flow_of_cf cf = f\"", "lemma (in NPreflow)\n  \"flow_of_cf (residualGraph c f) = f\"", "lemma this_loc: \"RGraph c s t cf\"", "lemma this_loc_rpg: \"RPreGraph c s t cf\"", "lemma is_NFlow: \"NFlow c s t (flow_of_cf cf)\"", "lemma is_RGraph: \"RGraph c s t cf\"", "lemma val_by_cf: \"val = (\\<Sum>(u,v)\\<in>outgoing s. cf (v,u))\"", "lemma (in RPreGraph) maxflow_imp_rgraph:\n  assumes \"isMaxFlow (flow_of_cf cf)\"\n  shows \"RGraph c s t cf\""], "translations": [["", "lemma cfE_of_ss_invE: \"cfE_of cf \\<subseteq> E \\<union> E\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfE_of cf \\<subseteq> E \\<union> E\\<inverse>", "unfolding residualGraph_def Graph.E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, v).\n     (case (u, v) of\n      (u, v) \\<Rightarrow>\n        if (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n        then c (u, v) - cf (u, v)\n        else if (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n             then cf (v, u) else (0::'capacity)) \\<noteq>\n     (0::'capacity)}\n    \\<subseteq> {(u, v). c (u, v) \\<noteq> (0::'capacity)} \\<union>\n                {(u, v). c (u, v) \\<noteq> (0::'capacity)}\\<inverse>", "by auto"], ["", "lemma cfE_of_ss_VxV: \"cfE_of f \\<subseteq> V\\<times>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfE_of f \\<subseteq> V \\<times> V", "unfolding V_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cfE_of f\n    \\<subseteq> {u. \\<exists>v.\n                       (u, v) \\<in> E \\<or> (v, u) \\<in> E} \\<times>\n                {u. \\<exists>v. (u, v) \\<in> E \\<or> (v, u) \\<in> E}", "unfolding residualGraph_def Graph.E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, v).\n     (case (u, v) of\n      (u, v) \\<Rightarrow>\n        if (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n        then c (u, v) - f (u, v)\n        else if (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n             then f (v, u) else (0::'capacity)) \\<noteq>\n     (0::'capacity)}\n    \\<subseteq> {u. \\<exists>v.\n                       (u, v)\n                       \\<in> {(u, v).\n                              c (u, v) \\<noteq> (0::'capacity)} \\<or>\n                       (v, u)\n                       \\<in> {(u, v).\n                              c (u, v) \\<noteq> (0::'capacity)}} \\<times>\n                {u. \\<exists>v.\n                       (u, v)\n                       \\<in> {(u, v).\n                              c (u, v) \\<noteq> (0::'capacity)} \\<or>\n                       (v, u)\n                       \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}}", "by auto"], ["", "lemma cfE_of_finite[simp, intro!]: \"finite (cfE_of f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (cfE_of f)", "using finite_subset[OF cfE_of_ss_VxV]"], ["proof (prove)\nusing this:\n  finite (V \\<times> V) \\<Longrightarrow> finite (cfE_of ?f1)\n\ngoal (1 subgoal):\n 1. finite (cfE_of f)", "by auto"], ["", "lemma cf_no_self_loop: \"(u,u)\\<notin>cfE_of f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, u) \\<notin> cfE_of f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (u, u) \\<in> cfE_of f \\<Longrightarrow> False", "assume a1: \"(u, u) \\<in> cfE_of f\""], ["proof (state)\nthis:\n  (u, u) \\<in> cfE_of f\n\ngoal (1 subgoal):\n 1. (u, u) \\<in> cfE_of f \\<Longrightarrow> False", "have \"(u, u) \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, u) \\<notin> E", "using no_parallel_edge"], ["proof (prove)\nusing this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (u, u) \\<notin> E", "by blast"], ["proof (state)\nthis:\n  (u, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (u, u) \\<in> cfE_of f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (u, u) \\<notin> E", "show False"], ["proof (prove)\nusing this:\n  (u, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. False", "using a1"], ["proof (prove)\nusing this:\n  (u, u) \\<notin> E\n  (u, u) \\<in> cfE_of f\n\ngoal (1 subgoal):\n 1. False", "unfolding Graph.E_def residualGraph_def"], ["proof (prove)\nusing this:\n  (u, u) \\<notin> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n  (u, u)\n  \\<in> {(u, v).\n         (case (u, v) of\n          (u, v) \\<Rightarrow>\n            if (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n            then c (u, v) - f (u, v)\n            else if (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                 then f (v, u) else (0::'capacity)) \\<noteq>\n         (0::'capacity)}\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Let's fix a network with a preflow @{term f} on it\\<close>"], ["", "context NPreflow\nbegin"], ["", "text \\<open>We abbreviate the residual graph by @{term cf}.\\<close>"], ["", "abbreviation \"cf \\<equiv> residualGraph c f\""], ["", "sublocale cf: Graph cf"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas cf_def = residualGraph_def[of c f]"], ["", "subsection \\<open>Properties\\<close>"], ["", "lemmas cfE_ss_invE = cfE_of_ss_invE[of f]"], ["", "(*lemma cfE_ss_invE: \"Graph.E cf \\<subseteq> E \\<union> E\\<inverse>\"\n  unfolding residualGraph_def Graph.E_def\n  by auto*)"], ["", "text \\<open>The nodes of the residual graph are exactly the nodes of the network.\\<close>"], ["", "lemma resV_netV[simp]: \"cf.V = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf.V = V", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. cf.V \\<subseteq> V\n 2. V \\<subseteq> cf.V", "show \"V \\<subseteq> Graph.V cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> cf.V", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "assume \"u \\<in> V\""], ["proof (state)\nthis:\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "then"], ["proof (chain)\npicking this:\n  u \\<in> V", "obtain v where \"(u, v) \\<in> E \\<or> (v, u) \\<in> E\""], ["proof (prove)\nusing this:\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        (u, v) \\<in> E \\<or> (v, u) \\<in> E \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding V_def"], ["proof (prove)\nusing this:\n  u \\<in> {u. \\<exists>v. (u, v) \\<in> E \\<or> (v, u) \\<in> E}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        (u, v) \\<in> E \\<or> (v, u) \\<in> E \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "(* TODO: Use nifty new Isabelle2016 case-distinction features here! *)"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "moreover"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "{"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "assume \"(u, v) \\<in> E\""], ["proof (state)\nthis:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> E", "have \"(u, v) \\<in> Graph.E cf \\<or> (v, u) \\<in> Graph.E cf\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, v) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n 2. \\<lbrakk>(u, v) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "assume \"f (u, v) = 0\""], ["proof (state)\nthis:\n  f (u, v) = (0::'capacity)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, v) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n 2. \\<lbrakk>(u, v) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  f (u, v) = (0::'capacity)", "have \"cf (u, v) = c (u, v)\""], ["proof (prove)\nusing this:\n  f (u, v) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. cf (u, v) = c (u, v)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  f (u, v) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. (case (u, v) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    c (u, v)", "using \\<open>(u, v) \\<in> E\\<close>"], ["proof (prove)\nusing this:\n  f (u, v) = (0::'capacity)\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. (case (u, v) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    c (u, v)", "by (auto simp:)"], ["proof (state)\nthis:\n  cf (u, v) = c (u, v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, v) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n 2. \\<lbrakk>(u, v) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  cf (u, v) = c (u, v)", "have \"cf (u, v) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  cf (u, v) = c (u, v)\n\ngoal (1 subgoal):\n 1. cf (u, v) \\<noteq> (0::'capacity)", "using \\<open>(u, v) \\<in> E\\<close>"], ["proof (prove)\nusing this:\n  cf (u, v) = c (u, v)\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. cf (u, v) \\<noteq> (0::'capacity)", "unfolding E_def"], ["proof (prove)\nusing this:\n  cf (u, v) = c (u, v)\n  (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n\ngoal (1 subgoal):\n 1. cf (u, v) \\<noteq> (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  cf (u, v) \\<noteq> (0::'capacity)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(u, v) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n 2. \\<lbrakk>(u, v) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "thus ?thesis"], ["proof (prove)\nusing this:\n  cf (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "unfolding Graph.E_def"], ["proof (prove)\nusing this:\n  cf (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)} \\<or>\n    (v, u) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)}", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, v) \\<in> E; f (u, v) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, v) \\<in> E; f (u, v) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "assume \"f (u, v) \\<noteq> 0\""], ["proof (state)\nthis:\n  f (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, v) \\<in> E; f (u, v) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  f (u, v) \\<noteq> (0::'capacity)", "have \"cf (v, u) = f (u, v)\""], ["proof (prove)\nusing this:\n  f (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. cf (v, u) = f (u, v)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  f (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (case (v, u) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (u, v)", "using \\<open>(u, v) \\<in> E\\<close> no_parallel_edge"], ["proof (prove)\nusing this:\n  f (u, v) \\<noteq> (0::'capacity)\n  (u, v) \\<in> E\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (case (v, u) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (u, v)", "by auto"], ["proof (state)\nthis:\n  cf (v, u) = f (u, v)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, v) \\<in> E; f (u, v) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  cf (v, u) = f (u, v)", "have \"cf (v, u) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  cf (v, u) = f (u, v)\n\ngoal (1 subgoal):\n 1. cf (v, u) \\<noteq> (0::'capacity)", "using \\<open>f (u, v) \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  cf (v, u) = f (u, v)\n  f (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. cf (v, u) \\<noteq> (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  cf (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, v) \\<in> E; f (u, v) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "thus ?thesis"], ["proof (prove)\nusing this:\n  cf (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E", "unfolding Graph.E_def"], ["proof (prove)\nusing this:\n  cf (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)} \\<or>\n    (v, u) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)}", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "}"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "moreover"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "{"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "assume \"(v, u) \\<in> E\""], ["proof (state)\nthis:\n  (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "then"], ["proof (chain)\npicking this:\n  (v, u) \\<in> E", "have \"(v, u) \\<in> Graph.E cf \\<or> (u, v) \\<in> Graph.E cf\""], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(v, u) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n 2. \\<lbrakk>(v, u) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "assume \"f (v, u) = 0\""], ["proof (state)\nthis:\n  f (v, u) = (0::'capacity)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(v, u) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n 2. \\<lbrakk>(v, u) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  f (v, u) = (0::'capacity)", "have \"cf (v, u) = c (v, u)\""], ["proof (prove)\nusing this:\n  f (v, u) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. cf (v, u) = c (v, u)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  f (v, u) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. (case (v, u) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    c (v, u)", "using \\<open>(v, u) \\<in> E\\<close>"], ["proof (prove)\nusing this:\n  f (v, u) = (0::'capacity)\n  (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. (case (v, u) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    c (v, u)", "by (auto)"], ["proof (state)\nthis:\n  cf (v, u) = c (v, u)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(v, u) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n 2. \\<lbrakk>(v, u) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  cf (v, u) = c (v, u)", "have \"cf (v, u) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  cf (v, u) = c (v, u)\n\ngoal (1 subgoal):\n 1. cf (v, u) \\<noteq> (0::'capacity)", "using \\<open>(v, u) \\<in> E\\<close>"], ["proof (prove)\nusing this:\n  cf (v, u) = c (v, u)\n  (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. cf (v, u) \\<noteq> (0::'capacity)", "unfolding E_def"], ["proof (prove)\nusing this:\n  cf (v, u) = c (v, u)\n  (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n\ngoal (1 subgoal):\n 1. cf (v, u) \\<noteq> (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  cf (v, u) \\<noteq> (0::'capacity)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(v, u) \\<in> E; ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n 2. \\<lbrakk>(v, u) \\<in> E; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "thus ?thesis"], ["proof (prove)\nusing this:\n  cf (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "unfolding Graph.E_def"], ["proof (prove)\nusing this:\n  cf (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (v, u) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)} \\<or>\n    (u, v) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)}", "by auto"], ["proof (state)\nthis:\n  (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(v, u) \\<in> E; f (v, u) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(v, u) \\<in> E; f (v, u) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "assume \"f (v, u) \\<noteq> 0\""], ["proof (state)\nthis:\n  f (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(v, u) \\<in> E; f (v, u) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  f (v, u) \\<noteq> (0::'capacity)", "have \"cf (u, v) = f (v, u)\""], ["proof (prove)\nusing this:\n  f (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. cf (u, v) = f (v, u)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  f (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (case (u, v) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (v, u)", "using \\<open>(v, u) \\<in> E\\<close> no_parallel_edge"], ["proof (prove)\nusing this:\n  f (v, u) \\<noteq> (0::'capacity)\n  (v, u) \\<in> E\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (case (u, v) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (v, u)", "by auto"], ["proof (state)\nthis:\n  cf (u, v) = f (v, u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(v, u) \\<in> E; f (v, u) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "then"], ["proof (chain)\npicking this:\n  cf (u, v) = f (v, u)", "have \"cf (u, v) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  cf (u, v) = f (v, u)\n\ngoal (1 subgoal):\n 1. cf (u, v) \\<noteq> (0::'capacity)", "using \\<open>f (v, u) \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  cf (u, v) = f (v, u)\n  f (v, u) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. cf (u, v) \\<noteq> (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  cf (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(v, u) \\<in> E; f (v, u) \\<noteq> (0::'capacity)\\<rbrakk>\n    \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "thus ?thesis"], ["proof (prove)\nusing this:\n  cf (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "unfolding Graph.E_def"], ["proof (prove)\nusing this:\n  cf (u, v) \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (v, u) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)} \\<or>\n    (u, v) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)}", "by auto"], ["proof (state)\nthis:\n  (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "}"], ["proof (state)\nthis:\n  (v, u) \\<in> E \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> V \\<Longrightarrow> x \\<in> cf.V", "ultimately"], ["proof (chain)\npicking this:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n  (u, v) \\<in> E \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n  (v, u) \\<in> E \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E", "show \"u\\<in>cf.V\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n  (u, v) \\<in> E \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n  (v, u) \\<in> E \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. u \\<in> cf.V", "unfolding cf.V_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> E \\<or> (v, u) \\<in> E\n  (u, v) \\<in> E \\<Longrightarrow> (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E\n  (v, u) \\<in> E \\<Longrightarrow> (v, u) \\<in> cf.E \\<or> (u, v) \\<in> cf.E\n\ngoal (1 subgoal):\n 1. u \\<in> {u. \\<exists>v. (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E}", "by auto"], ["proof (state)\nthis:\n  u \\<in> cf.V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<subseteq> cf.V\n\ngoal (1 subgoal):\n 1. cf.V \\<subseteq> V", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cf.V \\<subseteq> V", "show \"Graph.V cf \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf.V \\<subseteq> V", "using cfE_ss_invE"], ["proof (prove)\nusing this:\n  cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (1 subgoal):\n 1. cf.V \\<subseteq> V", "unfolding Graph.V_def"], ["proof (prove)\nusing this:\n  cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (1 subgoal):\n 1. {u. \\<exists>v. (u, v) \\<in> cf.E \\<or> (v, u) \\<in> cf.E}\n    \\<subseteq> {u. \\<exists>v. (u, v) \\<in> E \\<or> (v, u) \\<in> E}", "by auto"], ["proof (state)\nthis:\n  cf.V \\<subseteq> V\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Note, that Isabelle is powerful enough to prove the above case \n  distinctions completely automatically, although it takes some time:\\<close>"], ["", "lemma \"cf.V = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf.V = V", "unfolding residualGraph_def Graph.E_def Graph.V_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {u. \\<exists>v.\n           (u, v)\n           \\<in> {(u, v).\n                  (case (u, v) of\n                   (u, v) \\<Rightarrow>\n                     if (u, v)\n                        \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                     then c (u, v) - f (u, v)\n                     else if (v, u)\n                             \\<in> {(u, v).\n                                    c (u, v) \\<noteq> (0::'capacity)}\n                          then f (v, u) else (0::'capacity)) \\<noteq>\n                  (0::'capacity)} \\<or>\n           (v, u)\n           \\<in> {(u, v).\n                  (case (u, v) of\n                   (u, v) \\<Rightarrow>\n                     if (u, v)\n                        \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                     then c (u, v) - f (u, v)\n                     else if (v, u)\n                             \\<in> {(u, v).\n                                    c (u, v) \\<noteq> (0::'capacity)}\n                          then f (v, u) else (0::'capacity)) \\<noteq>\n                  (0::'capacity)}} =\n    {u. \\<exists>v.\n           (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)} \\<or>\n           (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}}", "using no_parallel_edge[unfolded E_def]"], ["proof (prove)\nusing this:\n  \\<forall>u v.\n     (u, v)\n     \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)} \\<longrightarrow>\n     (v, u) \\<notin> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n\ngoal (1 subgoal):\n 1. {u. \\<exists>v.\n           (u, v)\n           \\<in> {(u, v).\n                  (case (u, v) of\n                   (u, v) \\<Rightarrow>\n                     if (u, v)\n                        \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                     then c (u, v) - f (u, v)\n                     else if (v, u)\n                             \\<in> {(u, v).\n                                    c (u, v) \\<noteq> (0::'capacity)}\n                          then f (v, u) else (0::'capacity)) \\<noteq>\n                  (0::'capacity)} \\<or>\n           (v, u)\n           \\<in> {(u, v).\n                  (case (u, v) of\n                   (u, v) \\<Rightarrow>\n                     if (u, v)\n                        \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                     then c (u, v) - f (u, v)\n                     else if (v, u)\n                             \\<in> {(u, v).\n                                    c (u, v) \\<noteq> (0::'capacity)}\n                          then f (v, u) else (0::'capacity)) \\<noteq>\n                  (0::'capacity)}} =\n    {u. \\<exists>v.\n           (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)} \\<or>\n           (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}}", "by auto"], ["", "text \\<open>As the residual graph has the same nodes as the network, it is also finite:\\<close>"], ["", "sublocale cf: Finite_Graph cf"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Graph cf", "by unfold_locales auto"], ["", "text \\<open>The capacities on the edges of the residual graph are non-negative\\<close>"], ["", "lemma resE_nonNegative: \"cf e \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf e", "proof (cases e; simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "assume \"(u, v) \\<in> E\""], ["proof (state)\nthis:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> E", "have \"cf (u, v) = c (u, v) - f (u, v)\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. cf (u, v) = c (u, v) - f (u, v)", "unfolding cf_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. (case (u, v) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    c (u, v) - f (u, v)", "by auto"], ["proof (state)\nthis:\n  cf (u, v) = c (u, v) - f (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "hence \"cf (u,v) \\<ge> 0\""], ["proof (prove)\nusing this:\n  cf (u, v) = c (u, v) - f (u, v)\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf (u, v)", "using capacity_const cap_non_negative"], ["proof (prove)\nusing this:\n  cf (u, v) = c (u, v) - f (u, v)\n  \\<forall>e. (0::'capacity) \\<le> f e \\<and> f e \\<le> c e\n  \\<forall>u v. (0::'capacity) \\<le> c (u, v)\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf (u, v)", "by auto"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "}"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "moreover"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "{"], ["proof (state)\nthis:\n  (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "assume \"(v, u) \\<in> E\""], ["proof (state)\nthis:\n  (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "then"], ["proof (chain)\npicking this:\n  (v, u) \\<in> E", "have \"cf (u,v) = f (v, u)\""], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\n\ngoal (1 subgoal):\n 1. cf (u, v) = f (v, u)", "using no_parallel_edge"], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. cf (u, v) = f (v, u)", "unfolding cf_def"], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (case (u, v) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (v, u)", "by auto"], ["proof (state)\nthis:\n  cf (u, v) = f (v, u)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "hence \"cf (u,v) \\<ge> 0\""], ["proof (prove)\nusing this:\n  cf (u, v) = f (v, u)\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf (u, v)", "using capacity_const"], ["proof (prove)\nusing this:\n  cf (u, v) = f (v, u)\n  \\<forall>e. (0::'capacity) \\<le> f e \\<and> f e \\<le> c e\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf (u, v)", "by auto"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "}"], ["proof (state)\nthis:\n  (v, u) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "moreover"], ["proof (state)\nthis:\n  (v, u) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "{"], ["proof (state)\nthis:\n  (v, u) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "assume \"(u, v) \\<notin> E\" \"(v, u) \\<notin> E\""], ["proof (state)\nthis:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "hence \"cf (u,v) \\<ge> 0\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf (u, v)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    \\<le> (case (u, v) of\n           (u, v) \\<Rightarrow>\n             if (u, v) \\<in> E then c (u, v) - f (u, v)\n             else if (v, u) \\<in> E then f (v, u) else (0::'capacity))", "by simp"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(u, v) \\<notin> E; (v, u) \\<notin> E\\<rbrakk>\n  \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf (a, b)", "ultimately"], ["proof (chain)\npicking this:\n  (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n  (v, u) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n  \\<lbrakk>(u, v) \\<notin> E; (v, u) \\<notin> E\\<rbrakk>\n  \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)", "show \"cf (u,v) \\<ge> 0\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n  (v, u) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n  \\<lbrakk>(u, v) \\<notin> E; (v, u) \\<notin> E\\<rbrakk>\n  \\<Longrightarrow> (0::'capacity) \\<le> cf (u, v)\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf (u, v)", "by blast"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> cf (u, v)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Again, there is an automatic proof\\<close>"], ["", "lemma \"cf e \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> cf e", "apply (cases e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. e = (a, b) \\<Longrightarrow> (0::'capacity) \\<le> cf e", "unfolding residualGraph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       e = (a, b) \\<Longrightarrow>\n       (0::'capacity)\n       \\<le> (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f (u, v)\n                else if (v, u) \\<in> E then f (v, u) else (0::'capacity))", "using no_parallel_edge capacity_const cap_positive"], ["proof (prove)\nusing this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n  \\<forall>e. (0::'capacity) \\<le> f e \\<and> f e \\<le> c e\n  ?e \\<in> E \\<Longrightarrow> (0::'capacity) < c ?e\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       e = (a, b) \\<Longrightarrow>\n       (0::'capacity)\n       \\<le> (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f (u, v)\n                else if (v, u) \\<in> E then f (v, u) else (0::'capacity))", "by auto"], ["", "text \\<open>All edges of the residual graph are labeled with positive capacities:\\<close>"], ["", "corollary resE_positive: \"e \\<in> cf.E \\<Longrightarrow> cf e > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> cf.E \\<Longrightarrow> (0::'capacity) < cf e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e \\<in> cf.E \\<Longrightarrow> (0::'capacity) < cf e", "assume \"e \\<in> cf.E\""], ["proof (state)\nthis:\n  e \\<in> cf.E\n\ngoal (1 subgoal):\n 1. e \\<in> cf.E \\<Longrightarrow> (0::'capacity) < cf e", "hence \"cf e \\<noteq> 0\""], ["proof (prove)\nusing this:\n  e \\<in> cf.E\n\ngoal (1 subgoal):\n 1. cf e \\<noteq> (0::'capacity)", "unfolding cf.E_def"], ["proof (prove)\nusing this:\n  e \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)}\n\ngoal (1 subgoal):\n 1. cf e \\<noteq> (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  cf e \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. e \\<in> cf.E \\<Longrightarrow> (0::'capacity) < cf e", "thus ?thesis"], ["proof (prove)\nusing this:\n  cf e \\<noteq> (0::'capacity)\n\ngoal (1 subgoal):\n 1. (0::'capacity) < cf e", "using resE_nonNegative"], ["proof (prove)\nusing this:\n  cf e \\<noteq> (0::'capacity)\n  (0::'capacity) \\<le> cf ?e\n\ngoal (1 subgoal):\n 1. (0::'capacity) < cf e", "by (meson eq_iff not_le)"], ["proof (state)\nthis:\n  (0::'capacity) < cf e\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Only one usage: Move or remove! *)"], ["", "lemma reverse_flow: \"Preflow cf s t f' \\<Longrightarrow> \\<forall>(u, v) \\<in> E. f' (v, u) \\<le> f (u, v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "assume asm: \"Preflow cf s t f'\""], ["proof (state)\nthis:\n  Preflow cf s t f'\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "then"], ["proof (chain)\npicking this:\n  Preflow cf s t f'", "interpret f': Preflow cf s t f'"], ["proof (prove)\nusing this:\n  Preflow cf s t f'\n\ngoal (1 subgoal):\n 1. Preflow cf s t f'", "."], ["proof (state)\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "assume \"(u, v) \\<in> E\""], ["proof (state)\nthis:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> E", "have \"cf (v, u) = f (u, v)\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. cf (v, u) = f (u, v)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. (case (v, u) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (u, v)", "using no_parallel_edge"], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. (case (v, u) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity)) =\n    f (u, v)", "by auto"], ["proof (state)\nthis:\n  cf (v, u) = f (u, v)\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "moreover"], ["proof (state)\nthis:\n  cf (v, u) = f (u, v)\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "have \"f' (v, u) \\<le> cf (v, u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (v, u) \\<le> cf (v, u)", "using f'.capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f' e \\<and> f' e \\<le> cf e\n\ngoal (1 subgoal):\n 1. f' (v, u) \\<le> cf (v, u)", "by auto"], ["proof (state)\nthis:\n  f' (v, u) \\<le> cf (v, u)\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "ultimately"], ["proof (chain)\npicking this:\n  cf (v, u) = f (u, v)\n  f' (v, u) \\<le> cf (v, u)", "have \"f' (v, u) \\<le> f (u, v)\""], ["proof (prove)\nusing this:\n  cf (v, u) = f (u, v)\n  f' (v, u) \\<le> cf (v, u)\n\ngoal (1 subgoal):\n 1. f' (v, u) \\<le> f (u, v)", "by metis"], ["proof (state)\nthis:\n  f' (v, u) \\<le> f (u, v)\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "}"], ["proof (state)\nthis:\n  (?u2, ?v2) \\<in> E \\<Longrightarrow> f' (?v2, ?u2) \\<le> f (?u2, ?v2)\n\ngoal (1 subgoal):\n 1. Preflow cf s t f' \\<Longrightarrow>\n    \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (?u2, ?v2) \\<in> E \\<Longrightarrow> f' (?v2, ?u2) \\<le> f (?u2, ?v2)\n\ngoal (1 subgoal):\n 1. \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)", "by auto"], ["proof (state)\nthis:\n  \\<forall>(u, v)\\<in>E. f' (v, u) \\<le> f (u, v)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in Network) \"flow_of_cf cf e \\<equiv> (if (e\\<in>E) then c e - cf e else 0)\""], ["", "(* TODO: We have proved/used this fact already for Edka-Analysis! (uE) *)"], ["", "lemma (in NPreflow) E_ss_cfinvE: \"E \\<subseteq> Graph.E cf \\<union> (Graph.E cf)\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> cf.E \\<union> cf.E\\<inverse>", "unfolding residualGraph_def Graph.E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n    \\<subseteq> {(u, v).\n                 (case (u, v) of\n                  (u, v) \\<Rightarrow>\n                    if (u, v)\n                       \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                    then c (u, v) - f (u, v)\n                    else if (v, u)\n                            \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                         then f (v, u) else (0::'capacity)) \\<noteq>\n                 (0::'capacity)} \\<union>\n                {(u, v).\n                 (case (u, v) of\n                  (u, v) \\<Rightarrow>\n                    if (u, v)\n                       \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                    then c (u, v) - f (u, v)\n                    else if (v, u)\n                            \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                         then f (v, u) else (0::'capacity)) \\<noteq>\n                 (0::'capacity)}\\<inverse>", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>c (a, b) \\<noteq> (0::'capacity);\n        c (b, a) \\<noteq> (0::'capacity) \\<and> c (a, b) = f (a, b) \\<or>\n        c (b, a) = (0::'capacity) \\<and> c (a, b) = f (a, b)\\<rbrakk>\n       \\<Longrightarrow> (c (b, a) \\<noteq> (0::'capacity) \\<longrightarrow>\n                          c (b, a) \\<noteq> f (b, a)) \\<and>\n                         (c (b, a) = (0::'capacity) \\<longrightarrow>\n                          f (a, b) \\<noteq> (0::'capacity))", "using no_parallel_edge"], ["proof (prove)\nusing this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>c (a, b) \\<noteq> (0::'capacity);\n        c (b, a) \\<noteq> (0::'capacity) \\<and> c (a, b) = f (a, b) \\<or>\n        c (b, a) = (0::'capacity) \\<and> c (a, b) = f (a, b)\\<rbrakk>\n       \\<Longrightarrow> (c (b, a) \\<noteq> (0::'capacity) \\<longrightarrow>\n                          c (b, a) \\<noteq> f (b, a)) \\<and>\n                         (c (b, a) = (0::'capacity) \\<longrightarrow>\n                          f (a, b) \\<noteq> (0::'capacity))", "(* Speed optimization: Adding this directly takes very long *)"], ["proof (prove)\nusing this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>c (a, b) \\<noteq> (0::'capacity);\n        c (b, a) \\<noteq> (0::'capacity) \\<and> c (a, b) = f (a, b) \\<or>\n        c (b, a) = (0::'capacity) \\<and> c (a, b) = f (a, b)\\<rbrakk>\n       \\<Longrightarrow> (c (b, a) \\<noteq> (0::'capacity) \\<longrightarrow>\n                          c (b, a) \\<noteq> f (b, a)) \\<and>\n                         (c (b, a) = (0::'capacity) \\<longrightarrow>\n                          f (a, b) \\<noteq> (0::'capacity))", "unfolding E_def"], ["proof (prove)\nusing this:\n  \\<forall>u v.\n     (u, v)\n     \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)} \\<longrightarrow>\n     (v, u) \\<notin> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>c (a, b) \\<noteq> (0::'capacity);\n        c (b, a) \\<noteq> (0::'capacity) \\<and> c (a, b) = f (a, b) \\<or>\n        c (b, a) = (0::'capacity) \\<and> c (a, b) = f (a, b)\\<rbrakk>\n       \\<Longrightarrow> (c (b, a) \\<noteq> (0::'capacity) \\<longrightarrow>\n                          c (b, a) \\<noteq> f (b, a)) \\<and>\n                         (c (b, a) = (0::'capacity) \\<longrightarrow>\n                          f (a, b) \\<noteq> (0::'capacity))", "apply (simp add: )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Nodes with positive excess must have an outgoing edge in the \n  residual graph. \n\n  Intuitively: The excess flow must come from somewhere.\\<close>"], ["", "lemma active_has_cf_outgoing: \"excess f u > 0 \\<Longrightarrow> cf.outgoing u \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'capacity) < excess f u \\<Longrightarrow> cf.outgoing u \\<noteq> {}", "unfolding excess_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "assume \"0 < sum f (incoming u) - sum f (outgoing u)\""], ["proof (state)\nthis:\n  (0::'capacity) < sum f (incoming u) - sum f (outgoing u)\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "hence \"0 < sum f (incoming u)\""], ["proof (prove)\nusing this:\n  (0::'capacity) < sum f (incoming u) - sum f (outgoing u)\n\ngoal (1 subgoal):\n 1. (0::'capacity) < sum f (incoming u)", "by (metis diff_gt_0_iff_gt linorder_neqE_linordered_idom linorder_not_le \n        sum_f_non_negative)"], ["proof (state)\nthis:\n  (0::'capacity) < sum f (incoming u)\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "with f_non_negative"], ["proof (chain)\npicking this:\n  (0::'capacity) \\<le> f ?e\n  (0::'capacity) < sum f (incoming u)", "obtain e where \"e\\<in>incoming u\" \"f e > 0\""], ["proof (prove)\nusing this:\n  (0::'capacity) \\<le> f ?e\n  (0::'capacity) < sum f (incoming u)\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> incoming u; (0::'capacity) < f e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson not_le sum_nonpos)"], ["proof (state)\nthis:\n  e \\<in> incoming u\n  (0::'capacity) < f e\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  e \\<in> incoming u\n  (0::'capacity) < f e", "obtain v where \"(v,u)\\<in>E\" \"f (v,u) > 0\""], ["proof (prove)\nusing this:\n  e \\<in> incoming u\n  (0::'capacity) < f e\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>(v, u) \\<in> E; (0::'capacity) < f (v, u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding incoming_def"], ["proof (prove)\nusing this:\n  e \\<in> {(ua, u) |ua. (ua, u) \\<in> E}\n  (0::'capacity) < f e\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>(v, u) \\<in> E; (0::'capacity) < f (v, u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (v, u) \\<in> E\n  (0::'capacity) < f (v, u)\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "hence \"cf (u,v) > 0\""], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\n  (0::'capacity) < f (v, u)\n\ngoal (1 subgoal):\n 1. (0::'capacity) < cf (u, v)", "unfolding residualGraph_def"], ["proof (prove)\nusing this:\n  (v, u) \\<in> E\n  (0::'capacity) < f (v, u)\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < (case (u, v) of\n       (u, v) \\<Rightarrow>\n         if (u, v) \\<in> E then c (u, v) - f (u, v)\n         else if (v, u) \\<in> E then f (v, u) else (0::'capacity))", "by auto"], ["proof (state)\nthis:\n  (0::'capacity) < cf (u, v)\n\ngoal (1 subgoal):\n 1. (0::'capacity)\n    < sum f (incoming u) - sum f (outgoing u) \\<Longrightarrow>\n    cf.outgoing u \\<noteq> {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  (0::'capacity) < cf (u, v)\n\ngoal (1 subgoal):\n 1. cf.outgoing u \\<noteq> {}", "unfolding cf.outgoing_def cf.E_def"], ["proof (prove)\nusing this:\n  (0::'capacity) < cf (u, v)\n\ngoal (1 subgoal):\n 1. {(u, ua) |ua.\n     (u, ua) \\<in> {(u, v). cf (u, v) \\<noteq> (0::'capacity)}} \\<noteq>\n    {}", "by fastforce"], ["proof (state)\nthis:\n  cf.outgoing u \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>Network with preflow\\<close>"], ["", "locale RPreGraph \\<comment> \\<open>Locale that characterizes a residual graph of a network\\<close>\n= Network +\n  fixes cf\n  assumes EX_RPG: \"\\<exists>f. NPreflow c s t f \\<and> cf = residualGraph c f\"\nbegin"], ["", "lemma this_loc_rpg: \"RPreGraph c s t cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RPreGraph c s t cf", "by unfold_locales"], ["", "definition \"f \\<equiv> flow_of_cf cf\""], ["", "lemma f_unique:\n    assumes \"NPreflow c s t f'\"\n    assumes A: \"cf = residualGraph c f'\"\n    shows \"f' = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' = f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f' = f", "interpret f': NPreflow c s t f'"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t f'", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. f' = f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' = f", "unfolding f_def[abs_def] flow_of_cf_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' = (\\<lambda>e. if e \\<in> E then c e - cf e else (0::'a))", "unfolding A residualGraph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' =\n    (\\<lambda>e.\n        if e \\<in> E\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f' (u, v)\n                else if (v, u) \\<in> E then f' (v, u) else (0::'a))\n        else (0::'a))", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e.\n       f' e =\n       (if e \\<in> E\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f' (u, v)\n                else if (v, u) \\<in> E then f' (v, u) else (0::'a))\n        else (0::'a))", "using f'.capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'a) \\<le> f' e \\<and> f' e \\<le> c e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       f' e =\n       (if e \\<in> E\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f' (u, v)\n                else if (v, u) \\<in> E then f' (v, u) else (0::'a))\n        else (0::'a))", "unfolding E_def"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'a) \\<le> f' e \\<and> f' e \\<le> c e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       f' e =\n       (if e \\<in> {(u, v). c (u, v) \\<noteq> (0::'a)}\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'a)}\n                then c (u, v) - f' (u, v)\n                else if (v, u) \\<in> {(u, v). c (u, v) \\<noteq> (0::'a)}\n                     then f' (v, u) else (0::'a))\n        else (0::'a))", "apply (auto split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>a b.\n                   (0::'a) \\<le> f' (a, b) \\<and> f' (a, b) \\<le> c (a, b);\n        c (x1, x2) = (0::'a)\\<rbrakk>\n       \\<Longrightarrow> f' (x1, x2) = (0::'a)", "by (metis antisym)"], ["proof (state)\nthis:\n  f' = f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_NPreflow: \"NPreflow c s t (flow_of_cf cf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t (flow_of_cf cf)", "apply (fold f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t f", "using EX_RPG f_unique"], ["proof (prove)\nusing this:\n  \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f\n  \\<lbrakk>NPreflow c s t ?f'; cf = cf_of ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f' = f\n\ngoal (1 subgoal):\n 1. NPreflow c s t f", "by metis"], ["", "sublocale f: NPreflow c s t f"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t f", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t (flow_of_cf cf)", "by (rule is_NPreflow)"], ["", "lemma rg_is_cf[simp]: \"residualGraph c f = cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f.cf = cf", "using EX_RPG f_unique"], ["proof (prove)\nusing this:\n  \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f\n  \\<lbrakk>NPreflow c s t ?f'; cf = cf_of ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f' = f\n\ngoal (1 subgoal):\n 1. f.cf = cf", "by auto"], ["", "lemma rg_fo_inv[simp]: \"residualGraph c (flow_of_cf cf) = cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_of (flow_of_cf cf) = cf", "using rg_is_cf"], ["proof (prove)\nusing this:\n  f.cf = cf\n\ngoal (1 subgoal):\n 1. cf_of (flow_of_cf cf) = cf", "unfolding f_def"], ["proof (prove)\nusing this:\n  cf_of (flow_of_cf cf) = cf\n\ngoal (1 subgoal):\n 1. cf_of (flow_of_cf cf) = cf", "."], ["", "sublocale cf: Graph cf"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma resV_netV[simp]: \"cf.V = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf.V = V", "using f.resV_netV"], ["proof (prove)\nusing this:\n  f.cf.V = V\n\ngoal (1 subgoal):\n 1. cf.V = V", "by simp"], ["", "sublocale cf: Finite_Graph cf"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Graph cf", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite cf.V", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma E_ss_cfinvE: \"E \\<subseteq> cf.E \\<union> cf.E\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> cf.E \\<union> cf.E\\<inverse>", "using f.E_ss_cfinvE"], ["proof (prove)\nusing this:\n  E \\<subseteq> f.cf.E \\<union> f.cf.E\\<inverse>\n\ngoal (1 subgoal):\n 1. E \\<subseteq> cf.E \\<union> cf.E\\<inverse>", "by simp"], ["", "lemma cfE_ss_invE: \"cf.E \\<subseteq> E \\<union> E\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf.E \\<subseteq> E \\<union> E\\<inverse>", "using f.cfE_ss_invE"], ["proof (prove)\nusing this:\n  f.cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (1 subgoal):\n 1. cf.E \\<subseteq> E \\<union> E\\<inverse>", "by simp"], ["", "lemma resE_nonNegative: \"cf e \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> cf e", "using f.resE_nonNegative"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> f.cf ?e\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> cf e", "by auto"], ["", "end"], ["", "context NPreflow begin"], ["", "lemma is_RPreGraph: \"RPreGraph c s t cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RPreGraph c s t cf", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f", "apply (rule exI[where x=f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t f \\<and> cf = cf", "apply (safe; unfold_locales)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fo_rg_inv: \"flow_of_cf cf = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow_of_cf cf = f", "unfolding flow_of_cf_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>e. if e \\<in> E then c e - cf e else (0::'capacity)) = f", "unfolding residualGraph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>e.\n        if e \\<in> E\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f (u, v)\n                else if (v, u) \\<in> E then f (v, u) else (0::'capacity))\n        else (0::'capacity)) =\n    f", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e.\n       (if e \\<in> E\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f (u, v)\n                else if (v, u) \\<in> E then f (v, u) else (0::'capacity))\n        else (0::'capacity)) =\n       f e", "using capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f e \\<and> f e \\<le> c e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       (if e \\<in> E\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> E then c (u, v) - f (u, v)\n                else if (v, u) \\<in> E then f (v, u) else (0::'capacity))\n        else (0::'capacity)) =\n       f e", "unfolding E_def"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f e \\<and> f e \\<le> c e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       (if e \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n        then c e -\n             (case e of\n              (u, v) \\<Rightarrow>\n                if (u, v) \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                then c (u, v) - f (u, v)\n                else if (v, u)\n                        \\<in> {(u, v). c (u, v) \\<noteq> (0::'capacity)}\n                     then f (v, u) else (0::'capacity))\n        else (0::'capacity)) =\n       f e", "apply (clarsimp split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>a b.\n                   (0::'capacity) \\<le> f (a, b) \\<and>\n                   f (a, b) \\<le> c (a, b);\n        c (x1, x2) = (0::'capacity)\\<rbrakk>\n       \\<Longrightarrow> f (x1, x2) = (0::'capacity)", "by (metis antisym)"], ["", "end"], ["", "(* For snippet*)"], ["", "lemma (in NPreflow)\n  \"flow_of_cf (residualGraph c f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flow_of_cf cf = f", "by (rule fo_rg_inv)"], ["", "locale RGraph \\<comment> \\<open>Locale that characterizes a residual graph of a network\\<close>\n= Network +\n  fixes cf\n  assumes EX_RG: \"\\<exists>f. NFlow c s t f \\<and> cf = residualGraph c f\"\nbegin"], ["", "sublocale RPreGraph"], ["proof (prove)\ngoal (1 subgoal):\n 1. RPreGraph c s t cf", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f", "from EX_RG"], ["proof (chain)\npicking this:\n  \\<exists>f. NFlow c s t f \\<and> cf = cf_of f", "obtain f where \n      \"NFlow c s t f\" and [simp]: \"cf = residualGraph c f\""], ["proof (prove)\nusing this:\n  \\<exists>f. NFlow c s t f \\<and> cf = cf_of f\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>NFlow c s t f; cf = cf_of f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  NFlow c s t f\n  cf = cf_of f\n\ngoal (1 subgoal):\n 1. \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f", "then"], ["proof (chain)\npicking this:\n  NFlow c s t f\n  cf = cf_of f", "interpret NFlow c s t f"], ["proof (prove)\nusing this:\n  NFlow c s t f\n  cf = cf_of f\n\ngoal (1 subgoal):\n 1. NFlow c s t f", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f", "show \"\\<exists>f. NPreflow c s t f \\<and> cf = residualGraph c f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f", "apply (rule exI[where x=\"f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t f \\<and> cf = cf", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. NPreflow c s t f", "by unfold_locales"], ["proof (state)\nthis:\n  \\<exists>f. NPreflow c s t f \\<and> cf = cf_of f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma this_loc: \"RGraph c s t cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "by unfold_locales"], ["", "lemma this_loc_rpg: \"RPreGraph c s t cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RPreGraph c s t cf", "by unfold_locales"], ["", "lemma is_NFlow: \"NFlow c s t (flow_of_cf cf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t (flow_of_cf cf)", "using EX_RG f_unique is_NPreflow NFlow.axioms(1)"], ["proof (prove)\nusing this:\n  \\<exists>f. NFlow c s t f \\<and> cf = cf_of f\n  \\<lbrakk>NPreflow c s t ?f'; cf = cf_of ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f' = f\n  NPreflow c s t (flow_of_cf cf)\n  NFlow ?c ?s ?t ?f \\<Longrightarrow> NPreflow ?c ?s ?t ?f\n\ngoal (1 subgoal):\n 1. NFlow c s t (flow_of_cf cf)", "apply (fold f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>f. NFlow c s t f \\<and> cf = cf_of f;\n     \\<And>f'.\n        \\<lbrakk>NPreflow c s t f'; cf = cf_of f'\\<rbrakk>\n        \\<Longrightarrow> f' = f;\n     NPreflow c s t f;\n     \\<And>c s t f.\n        NFlow c s t f \\<Longrightarrow> NPreflow c s t f\\<rbrakk>\n    \\<Longrightarrow> NFlow c s t f", "by force"], ["", "sublocale f: NFlow c s t f"], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t f", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t (flow_of_cf cf)", "by (rule is_NFlow)"], ["", "end"], ["", "context NFlow begin"], ["", "lemma is_RGraph: \"RGraph c s t cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. NFlow c s t f \\<and> cf = cf_of f", "apply (rule exI[where x=f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t f \\<and> cf = cf", "apply (safe; unfold_locales)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The value of the flow can be computed from the residual graph.\\<close>"], ["", "lemma val_by_cf: \"val = (\\<Sum>(u,v)\\<in>outgoing s. cf (v,u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val = (\\<Sum>(u, v)\\<in>outgoing s. cf (v, u))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val = (\\<Sum>(u, v)\\<in>outgoing s. cf (v, u))", "have \"f (s,v) = cf (v,s)\" for v"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (s, v) = cf (v, s)", "unfolding cf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (s, v) =\n    (case (v, s) of\n     (u, v) \\<Rightarrow>\n       if (u, v) \\<in> E then c (u, v) - f (u, v)\n       else if (v, u) \\<in> E then f (v, u) else (0::'capacity))", "by auto"], ["proof (state)\nthis:\n  f (s, ?v) = cf (?v, s)\n\ngoal (1 subgoal):\n 1. val = (\\<Sum>(u, v)\\<in>outgoing s. cf (v, u))", "thus ?thesis"], ["proof (prove)\nusing this:\n  f (s, ?v) = cf (?v, s)\n\ngoal (1 subgoal):\n 1. val = (\\<Sum>(u, v)\\<in>outgoing s. cf (v, u))", "unfolding val_alt outgoing_def"], ["proof (prove)\nusing this:\n  f (s, ?v) = cf (?v, s)\n\ngoal (1 subgoal):\n 1. sum f {(s, u) |u. (s, u) \\<in> E} =\n    (\\<Sum>(u, v)\\<in>{(s, u) |u. (s, u) \\<in> E}. cf (v, u))", "by (auto intro!: sum.cong)"], ["proof (state)\nthis:\n  val = (\\<Sum>(u, v)\\<in>outgoing s. cf (v, u))\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>Network with Flow\\<close>"], ["", "lemma (in RPreGraph) maxflow_imp_rgraph:\n  assumes \"isMaxFlow (flow_of_cf cf)\"\n  shows \"RGraph c s t cf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "from assms"], ["proof (chain)\npicking this:\n  isMaxFlow (flow_of_cf cf)", "interpret Flow c s t f"], ["proof (prove)\nusing this:\n  isMaxFlow (flow_of_cf cf)\n\ngoal (1 subgoal):\n 1. Flow c s t f", "unfolding isMaxFlow_def"], ["proof (prove)\nusing this:\n  Flow c s t (flow_of_cf cf) \\<and>\n  (\\<forall>f'.\n      Flow c s t f' \\<longrightarrow>\n      Flow.val c s f' \\<le> Flow.val c s (flow_of_cf cf))\n\ngoal (1 subgoal):\n 1. Flow c s t f", "by (simp add: f_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "interpret NFlow c s t f"], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t f", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. RGraph c s t cf", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. NFlow c s t f \\<and> cf = cf_of f", "apply (rule exI[of _ f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. NFlow c s t f \\<and> cf = f.cf", "apply (simp add: NFlow_axioms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  RGraph c s t cf\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>Theory\\<close>"]]}