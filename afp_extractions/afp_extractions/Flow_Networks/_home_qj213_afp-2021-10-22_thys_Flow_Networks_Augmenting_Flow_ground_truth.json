{"file_name": "/home/qj213/afp-2021-10-22/thys/Flow_Networks/Augmenting_Flow.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flow_Networks", "problem_names": ["lemma augment_flow_presv_cap: \n  shows \"0 \\<le> (f\\<up>f')(u,v) \\<and> (f\\<up>f')(u,v) \\<le> c(u,v)\"", "lemma split_rflow_outgoing: \n  \"(\\<Sum>v\\<in>cf.E``{u}. f' (u,v)) = (\\<Sum>v\\<in>E``{u}. f'(u,v)) + (\\<Sum>v\\<in>E\\<inverse>``{u}. f'(u,v))\"\n  (is \"?LHS = ?RHS\")", "lemma split_rflow_incoming: \n  \"(\\<Sum>v\\<in>cf.E\\<inverse>``{u}. f' (v,u)) = (\\<Sum>v\\<in>E``{u}. f'(v,u)) + (\\<Sum>v\\<in>E\\<inverse>``{u}. f'(v,u))\"\n  (is \"?LHS = ?RHS\")", "lemma flow_summation_aux:\n  shows \"(\\<Sum>v\\<in>E``{u}. f' (u,v))  - (\\<Sum>v\\<in>E``{u}. f' (v,u))\n       = (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (v,u)) - (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (u,v))\"\n   (is \"?LHS = ?RHS\" is \"?A - ?B = ?RHS\")", "lemma augment_flow_presv_con: \n  shows \"(\\<Sum>e \\<in> outgoing u. augment f' e) = (\\<Sum>e \\<in> incoming u. augment f' e)\"\n    (is \"?LHS = ?RHS\")", "lemma augment_flow_value: \"Flow.val c s (f\\<up>f') = val + Flow.val cf s f'\"", "lemma \"Flow.val c s (f\\<up>f') = val + Flow.val cf s f'\""], "translations": [["", "lemma augment_flow_presv_cap: \n  shows \"0 \\<le> (f\\<up>f')(u,v) \\<and> (f\\<up>f')(u,v) \\<le> c(u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> augment f' (u, v) \\<and>\n    augment f' (u, v) \\<le> c (u, v)", "proof (cases \"(u,v)\\<in>E\"; rule conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "assume [simp]: \"(u,v)\\<in>E\""], ["proof (state)\nthis:\n  (u, v) \\<in> E\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "hence \"f(u,v) = cf(v,u)\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n\ngoal (1 subgoal):\n 1. f (u, v) = cf (v, u)", "using no_parallel_edge"], ["proof (prove)\nusing this:\n  (u, v) \\<in> E\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. f (u, v) = cf (v, u)", "by (auto simp: residualGraph_def)"], ["proof (state)\nthis:\n  f (u, v) = cf (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  f (u, v) = cf (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"cf(v,u) \\<ge> f'(v,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (v, u) \\<le> cf (v, u)", "using f'.capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f' e \\<and> f' e \\<le> cf e\n\ngoal (1 subgoal):\n 1. f' (v, u) \\<le> cf (v, u)", "by auto"], ["proof (state)\nthis:\n  f' (v, u) \\<le> cf (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "finally(*<*)(xtrans)"], ["proof (chain)\npicking this:\n  f' (v, u) \\<le> f (u, v)", "(*>*)"], ["proof (chain)\npicking this:\n  f' (v, u) \\<le> f (u, v)", "have \"f'(v,u) \\<le> f(u,v)\""], ["proof (prove)\nusing this:\n  f' (v, u) \\<le> f (u, v)\n\ngoal (1 subgoal):\n 1. f' (v, u) \\<le> f (u, v)", "."], ["proof (state)\nthis:\n  f' (v, u) \\<le> f (u, v)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "(*<*)"], ["proof (state)\nthis:\n  f' (v, u) \\<le> f (u, v)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "{"], ["proof (state)\nthis:\n  f' (v, u) \\<le> f (u, v)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "note [trans] = xtrans"], ["proof (state)\nthis:\n  \\<lbrakk>?a = ?b; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?b < ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?a = ?b; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?y \\<le> ?x; ?x \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?x = ?y\n  \\<lbrakk>?y \\<le> ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z \\<le> ?x\n  \\<lbrakk>?y < ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?y \\<le> ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b < ?a; ?a < ?b\\<rbrakk> \\<Longrightarrow> ?P\n  \\<lbrakk>?y < ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b \\<le> ?a; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a \\<noteq> ?b; ?b \\<le> ?a\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a = ?f ?b; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?f ?b = ?c;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?a = ?f ?b; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?f ?b = ?c;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b \\<le> ?a; ?c < ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c < ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "(*>*)"], ["proof (state)\nthis:\n  \\<lbrakk>?a = ?b; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?b < ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?a = ?b; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?y \\<le> ?x; ?x \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?x = ?y\n  \\<lbrakk>?y \\<le> ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z \\<le> ?x\n  \\<lbrakk>?y < ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?y \\<le> ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b < ?a; ?a < ?b\\<rbrakk> \\<Longrightarrow> ?P\n  \\<lbrakk>?y < ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b \\<le> ?a; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a \\<noteq> ?b; ?b \\<le> ?a\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a = ?f ?b; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?f ?b = ?c;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?a = ?f ?b; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?f ?b = ?c;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b \\<le> ?a; ?c < ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c < ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "text_raw \\<open>\\isanewline\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?a = ?b; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?b < ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?a = ?b; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?y \\<le> ?x; ?x \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?x = ?y\n  \\<lbrakk>?y \\<le> ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z \\<le> ?x\n  \\<lbrakk>?y < ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?y \\<le> ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b < ?a; ?a < ?b\\<rbrakk> \\<Longrightarrow> ?P\n  \\<lbrakk>?y < ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b \\<le> ?a; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a \\<noteq> ?b; ?b \\<le> ?a\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a = ?f ?b; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?f ?b = ?c;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?a = ?f ?b; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?f ?b = ?c;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b \\<le> ?a; ?c < ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c < ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "text_raw \\<open>\\ \\ \\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?a = ?b; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?b < ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  \\<lbrakk>?a = ?b; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?b = ?c\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  \\<lbrakk>?y \\<le> ?x; ?x \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?x = ?y\n  \\<lbrakk>?y \\<le> ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z \\<le> ?x\n  \\<lbrakk>?y < ?x; ?z \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?y \\<le> ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b < ?a; ?a < ?b\\<rbrakk> \\<Longrightarrow> ?P\n  \\<lbrakk>?y < ?x; ?z < ?y\\<rbrakk> \\<Longrightarrow> ?z < ?x\n  \\<lbrakk>?b \\<le> ?a; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a \\<noteq> ?b; ?b \\<le> ?a\\<rbrakk> \\<Longrightarrow> ?b < ?a\n  \\<lbrakk>?a = ?f ?b; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?f ?b = ?c;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?a = ?f ?b; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?f ?b = ?c;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c \\<le> ?a\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c \\<le> ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c \\<le> ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b \\<le> ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b \\<le> ?a; ?c < ?f ?b;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> ?f y \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n  \\<lbrakk>?f ?b < ?a; ?c < ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?f ?c < ?a\n  \\<lbrakk>?b < ?a; ?c < ?f ?b;\n   \\<And>x y. y < x \\<Longrightarrow> ?f y < ?f x\\<rbrakk>\n  \\<Longrightarrow> ?c < ?f ?a\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"(f\\<up>f')(u,v) = f(u,v) + f'(u,v) - f'(v,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. augment f' (u, v) = f (u, v) + f' (u, v) - f' (v, u)", "by (auto simp: augment_def)"], ["proof (state)\nthis:\n  augment f' (u, v) = f (u, v) + f' (u, v) - f' (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  augment f' (u, v) = f (u, v) + f' (u, v) - f' (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> \\<ge> f(u,v) + f'(u,v) - f(u,v)\"\n  (*<*)(is \"_ \\<ge> \\<dots>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) - f (u, v) \\<le> f (u, v) + f' (u, v) - f' (v, u)", "(*>*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) - f (u, v) \\<le> f (u, v) + f' (u, v) - f' (v, u)", "using \\<open>f'(v,u) \\<le> f(u,v)\\<close>"], ["proof (prove)\nusing this:\n  f' (v, u) \\<le> f (u, v)\n\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) - f (u, v) \\<le> f (u, v) + f' (u, v) - f' (v, u)", "by auto"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) - f (u, v) \\<le> f (u, v) + f' (u, v) - f' (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) - f (u, v) \\<le> f (u, v) + f' (u, v) - f' (v, u)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> = f'(u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) - f (u, v) = f' (u, v)", "by auto"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) - f (u, v) = f' (u, v)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) - f (u, v) = f' (u, v)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> f' (u, v)", "using f'.capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f' e \\<and> f' e \\<le> cf e\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> f' (u, v)", "by auto"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> f' (u, v)\n\ngoal (4 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 4. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y. y \\<le> x \\<Longrightarrow> y \\<le> x;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> y \\<le> x;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> y \\<le> x\\<rbrakk>\n  \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)", "show \"(f\\<up>f')(u,v) \\<ge> 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y. y \\<le> x \\<Longrightarrow> y \\<le> x;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> y \\<le> x;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> y \\<le> x\\<rbrakk>\n  \\<Longrightarrow> (0::'capacity) \\<le> augment f' (u, v)\n\ngoal (1 subgoal):\n 1. (0::'capacity) \\<le> augment f' (u, v)", "."], ["proof (state)\nthis:\n  (0::'capacity) \\<le> augment f' (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "(*<*)"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> augment f' (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "}"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> augment f' (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "(*>*)"], ["proof (state)\nthis:\n  (0::'capacity) \\<le> augment f' (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"(f\\<up>f')(u,v) = f(u,v) + f'(u,v) - f'(v,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. augment f' (u, v) = f (u, v) + f' (u, v) - f' (v, u)", "by (auto simp: augment_def)"], ["proof (state)\nthis:\n  augment f' (u, v) = f (u, v) + f' (u, v) - f' (v, u)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  augment f' (u, v) = f (u, v) + f' (u, v) - f' (v, u)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> \\<le> f(u,v) + f'(u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) - f' (v, u) \\<le> f (u, v) + f' (u, v)", "using f'.capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f' e \\<and> f' e \\<le> cf e\n\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) - f' (v, u) \\<le> f (u, v) + f' (u, v)", "by auto"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) - f' (v, u) \\<le> f (u, v) + f' (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) - f' (v, u) \\<le> f (u, v) + f' (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> \\<le> f(u,v) + cf(u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) \\<le> f (u, v) + cf (u, v)", "using f'.capacity_const"], ["proof (prove)\nusing this:\n  \\<forall>e. (0::'capacity) \\<le> f' e \\<and> f' e \\<le> cf e\n\ngoal (1 subgoal):\n 1. f (u, v) + f' (u, v) \\<le> f (u, v) + cf (u, v)", "by auto"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) \\<le> f (u, v) + cf (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  f (u, v) + f' (u, v) \\<le> f (u, v) + cf (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> = f(u,v) + c(u,v) - f(u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + cf (u, v) = f (u, v) + c (u, v) - f (u, v)", "by (auto simp: residualGraph_def)"], ["proof (state)\nthis:\n  f (u, v) + cf (u, v) = f (u, v) + c (u, v) - f (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "also"], ["proof (state)\nthis:\n  f (u, v) + cf (u, v) = f (u, v) + c (u, v) - f (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "have \"\\<dots> = c(u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (u, v) + c (u, v) - f (u, v) = c (u, v)", "by auto"], ["proof (state)\nthis:\n  f (u, v) + c (u, v) - f (u, v) = c (u, v)\n\ngoal (3 subgoals):\n 1. (u, v) \\<in> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 3. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "finally"], ["proof (chain)\npicking this:\n  augment f' (u, v) \\<le> c (u, v)", "show \"(f\\<up>f')(u, v) \\<le> c(u, v)\""], ["proof (prove)\nusing this:\n  augment f' (u, v) \\<le> c (u, v)\n\ngoal (1 subgoal):\n 1. augment f' (u, v) \\<le> c (u, v)", "."], ["proof (state)\nthis:\n  augment f' (u, v) \\<le> c (u, v)\n\ngoal (2 subgoals):\n 1. (u, v) \\<notin> E \\<Longrightarrow>\n    (0::'capacity) \\<le> augment f' (u, v)\n 2. (u, v) \\<notin> E \\<Longrightarrow> augment f' (u, v) \\<le> c (u, v)", "qed (auto simp: augment_def cap_positive)"], ["", "text_raw \\<open>}%EndSnippet\\<close>"], ["", "subsubsection \\<open>Conservation Constraint\\<close>"], ["", "text \\<open>In order to show the conservation constraint, we need some \n  auxiliary lemmas first.\\<close>"], ["", "text \\<open>As there are no parallel edges in the network, and all edges \n  in the residual graph are either parallel or reverse to a network edge,\n  we can split summations of the residual flow over outgoing/incoming edges in the \n  residual graph to summations over outgoing/incoming edges in the network.\n\n  Note that the term @{term \\<open>E``{u}\\<close>} characterizes the successor nodes of @{term \\<open>u\\<close>},\n  and @{term \\<open>E\\<inverse>``{u}\\<close>} characterizes the predecessor nodes of @{term \\<open>u\\<close>}.\n\\<close>"], ["", "(* TODO: Introduce pred/succ functions on Graph *)\nprivate"], ["", "lemma split_rflow_outgoing: \n  \"(\\<Sum>v\\<in>cf.E``{u}. f' (u,v)) = (\\<Sum>v\\<in>E``{u}. f'(u,v)) + (\\<Sum>v\\<in>E\\<inverse>``{u}. f'(u,v))\"\n  (is \"?LHS = ?RHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "from no_parallel_edge"], ["proof (chain)\npicking this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E", "have DJ: \"E``{u} \\<inter> E\\<inverse>``{u} = {}\""], ["proof (prove)\nusing this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. E `` {u} \\<inter> E\\<inverse> `` {u} = {}", "by auto"], ["proof (state)\nthis:\n  E `` {u} \\<inter> E\\<inverse> `` {u} = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "have \"?LHS = (\\<Sum>v\\<in>E``{u} \\<union> E\\<inverse>``{u}. f' (u,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (u, v))", "apply (rule sum.mono_neutral_left)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (E `` {u} \\<union> E\\<inverse> `` {u})\n 2. cf.E `` {u} \\<subseteq> E `` {u} \\<union> E\\<inverse> `` {u}\n 3. \\<forall>i\\<in>E `` {u} \\<union> E\\<inverse> `` {u} - cf.E `` {u}.\n       f' (u, i) = (0::'capacity)", "using cfE_ss_invE"], ["proof (prove)\nusing this:\n  cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (3 subgoals):\n 1. finite (E `` {u} \\<union> E\\<inverse> `` {u})\n 2. cf.E `` {u} \\<subseteq> E `` {u} \\<union> E\\<inverse> `` {u}\n 3. \\<forall>i\\<in>E `` {u} \\<union> E\\<inverse> `` {u} - cf.E `` {u}.\n       f' (u, i) = (0::'capacity)", "by (auto intro: finite_Image)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "have \"\\<dots> = ?RHS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "apply (subst sum.union_disjoint[OF _ _ DJ])"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (E `` {u})\n 2. finite (E\\<inverse> `` {u})\n 3. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "by (auto intro: finite_Image)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "show \"?LHS = ?RHS\""], ["proof (prove)\nusing this:\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "."], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma split_rflow_incoming: \n  \"(\\<Sum>v\\<in>cf.E\\<inverse>``{u}. f' (v,u)) = (\\<Sum>v\\<in>E``{u}. f'(v,u)) + (\\<Sum>v\\<in>E\\<inverse>``{u}. f'(v,u))\"\n  (is \"?LHS = ?RHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "from no_parallel_edge"], ["proof (chain)\npicking this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E", "have DJ: \"E``{u} \\<inter> E\\<inverse>``{u} = {}\""], ["proof (prove)\nusing this:\n  \\<forall>u v. (u, v) \\<in> E \\<longrightarrow> (v, u) \\<notin> E\n\ngoal (1 subgoal):\n 1. E `` {u} \\<inter> E\\<inverse> `` {u} = {}", "by auto"], ["proof (state)\nthis:\n  E `` {u} \\<inter> E\\<inverse> `` {u} = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "have \"?LHS = (\\<Sum>v\\<in>E``{u} \\<union> E\\<inverse>``{u}. f' (v,u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (v, u))", "apply (rule sum.mono_neutral_left)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (E `` {u} \\<union> E\\<inverse> `` {u})\n 2. cf.E\\<inverse> `` {u} \\<subseteq> E `` {u} \\<union> E\\<inverse> `` {u}\n 3. \\<forall>i\\<in>E `` {u} \\<union> E\\<inverse> `` {u} -\n                   cf.E\\<inverse> `` {u}.\n       f' (i, u) = (0::'capacity)", "using cfE_ss_invE"], ["proof (prove)\nusing this:\n  cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (3 subgoals):\n 1. finite (E `` {u} \\<union> E\\<inverse> `` {u})\n 2. cf.E\\<inverse> `` {u} \\<subseteq> E `` {u} \\<union> E\\<inverse> `` {u}\n 3. \\<forall>i\\<in>E `` {u} \\<union> E\\<inverse> `` {u} -\n                   cf.E\\<inverse> `` {u}.\n       f' (i, u) = (0::'capacity)", "by (auto intro: finite_Image)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "have \"\\<dots> = ?RHS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "apply (subst sum.union_disjoint[OF _ _ DJ])"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (E `` {u})\n 2. finite (E\\<inverse> `` {u})\n 3. (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "by (auto intro: finite_Image)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u} \\<union> E\\<inverse> `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "show \"?LHS = ?RHS\""], ["proof (prove)\nusing this:\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "."], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For proving the conservation constraint, let's fix a node @{term u}, which\n  is neither the source nor the sink: \\<close>"], ["", "context \n  fixes u :: node\n  assumes U_ASM: \"u\\<in>V - {s,t}\"\nbegin"], ["", "text \\<open>We first show an auxiliary lemma to compare the \n  effective residual flow on incoming network edges to\n  the effective residual flow on outgoing network edges.\n  \n  Intuitively, this lemma shows that the effective residual flow added to the \n  network edges satisfies the conservation constraint.\n\\<close>"], ["", "private"], ["", "lemma flow_summation_aux:\n  shows \"(\\<Sum>v\\<in>E``{u}. f' (u,v))  - (\\<Sum>v\\<in>E``{u}. f' (v,u))\n       = (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (v,u)) - (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (u,v))\"\n   (is \"?LHS = ?RHS\" is \"?A - ?B = ?RHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "text \\<open>The proof is by splitting the flows, and careful \n    cancellation of the summands.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "have \"?A = (\\<Sum>v\\<in>cf.E``{u}. f' (u, v)) - (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (u, v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "by (simp add: split_rflow_outgoing)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "have \"(\\<Sum>v\\<in>cf.E``{u}. f' (u, v)) = (\\<Sum>v\\<in>cf.E\\<inverse>``{u}. f' (v, u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u))", "using U_ASM"], ["proof (prove)\nusing this:\n  u \\<in> V - {s, t}\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u))", "by (simp add: f'.conservation_const_pointwise)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>cf.E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "have \"?A = (\\<Sum>v\\<in>cf.E\\<inverse>``{u}. f' (v, u)) - (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (u, v))\""], ["proof (prove)\nusing this:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "have \"?B = (\\<Sum>v\\<in>cf.E\\<inverse>``{u}. f' (v, u)) - (\\<Sum>v\\<in>E\\<inverse>``{u}. f' (v, u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "by (simp add: split_rflow_incoming)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))", "show \"?A - ?B = ?RHS\""], ["proof (prove)\nusing this:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>cf.E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f' (u, v)) - (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Finally, we are ready to prove that the augmented flow satisfies the \n  conservation constraint:\\<close>"], ["", "lemma augment_flow_presv_con: \n  shows \"(\\<Sum>e \\<in> outgoing u. augment f' e) = (\\<Sum>e \\<in> incoming u. augment f' e)\"\n    (is \"?LHS = ?RHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "text \\<open>We define shortcuts for the successor and predecessor nodes of @{term u} \n    in the network:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "let ?Vo = \"E``{u}\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "let ?Vi = \"E\\<inverse>``{u}\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "text \\<open>Using the auxiliary lemma for the effective residual flow,\n    the proof is straightforward:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"?LHS = (\\<Sum>v\\<in>?Vo. augment f' (u,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) =\n    (\\<Sum>v\\<in>E `` {u}. augment f' (u, v))", "by (auto simp: sum_outgoing_pointwise)"], ["proof (state)\nthis:\n  sum (augment f') (outgoing u) = (\\<Sum>v\\<in>E `` {u}. augment f' (u, v))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "also"], ["proof (state)\nthis:\n  sum (augment f') (outgoing u) = (\\<Sum>v\\<in>E `` {u}. augment f' (u, v))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"\\<dots> \n    = (\\<Sum>v\\<in>?Vo. f (u,v) + f'(u,v) - f'(v,u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. augment f' (u, v)) =\n    (\\<Sum>v\\<in>E `` {u}. f (u, v) + f' (u, v) - f' (v, u))", "by (auto simp: augment_def)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. augment f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u}. f (u, v) + f' (u, v) - f' (v, u))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. augment f' (u, v)) =\n  (\\<Sum>v\\<in>E `` {u}. f (u, v) + f' (u, v) - f' (v, u))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"\\<dots> \n    = (\\<Sum>v\\<in>?Vo. f (u,v)) + (\\<Sum>v\\<in>?Vo. f' (u,v)) - (\\<Sum>v\\<in>?Vo. f' (v,u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f (u, v) + f' (u, v) - f' (v, u)) =\n    (\\<Sum>v\\<in>E `` {u}. f (u, v)) + (\\<Sum>v\\<in>E `` {u}. f' (u, v)) -\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u))", "by (auto simp: sum_subtractf sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f (u, v) + f' (u, v) - f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u}. f (u, v)) + (\\<Sum>v\\<in>E `` {u}. f' (u, v)) -\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f (u, v) + f' (u, v) - f' (v, u)) =\n  (\\<Sum>v\\<in>E `` {u}. f (u, v)) + (\\<Sum>v\\<in>E `` {u}. f' (u, v)) -\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"\\<dots> \n    = (\\<Sum>v\\<in>?Vi. f (v,u)) + (\\<Sum>v\\<in>?Vi. f' (v,u)) - (\\<Sum>v\\<in>?Vi. f' (u,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E `` {u}. f (u, v)) + (\\<Sum>v\\<in>E `` {u}. f' (u, v)) -\n    (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))", "by (auto simp: conservation_const_pointwise[OF U_ASM] flow_summation_aux)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f (u, v)) + (\\<Sum>v\\<in>E `` {u}. f' (u, v)) -\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E `` {u}. f (u, v)) + (\\<Sum>v\\<in>E `` {u}. f' (u, v)) -\n  (\\<Sum>v\\<in>E `` {u}. f' (v, u)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"\\<dots> \n    = (\\<Sum>v\\<in>?Vi. f (v,u) + f' (v,u) - f' (u,v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u)) +\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u) + f' (v, u) - f' (u, v))", "by (auto simp: sum_subtractf sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u) + f' (v, u) - f' (u, v))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u)) +\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (v, u)) -\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f' (u, v)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u) + f' (v, u) - f' (u, v))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"\\<dots> \n    = (\\<Sum>v\\<in>?Vi. augment f' (v,u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u) + f' (v, u) - f' (u, v)) =\n    (\\<Sum>v\\<in>E\\<inverse> `` {u}. augment f' (v, u))", "by (auto simp: augment_def)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u) + f' (v, u) - f' (u, v)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. augment f' (v, u))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "also"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. f (v, u) + f' (v, u) - f' (u, v)) =\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. augment f' (v, u))\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "have \"\\<dots> \n    = ?RHS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>E\\<inverse> `` {u}. augment f' (v, u)) =\n    sum (augment f') (incoming u)", "by (auto simp: sum_incoming_pointwise)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>E\\<inverse> `` {u}. augment f' (v, u)) =\n  sum (augment f') (incoming u)\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "finally"], ["proof (chain)\npicking this:\n  sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "show \"?LHS = ?RHS\""], ["proof (prove)\nusing this:\n  sum (augment f') (outgoing u) = sum (augment f') (incoming u)\n\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing u) = sum (augment f') (incoming u)", "."], ["proof (state)\nthis:\n  sum (augment f') (outgoing u) = sum (augment f') (incoming u)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Note that we tried to follow the proof presented by Cormen et al.~\\cite{CLRS09} \n  as closely as possible. Unfortunately, this proof generalizes the summation to all \n  nodes immediately, rendering the first equation invalid.\n  Trying to fix this error, we encountered that the step that uses the conservation \n  constraints on the augmenting flow is more subtle as indicated in the original proof.\n  Thus, we moved this argument to an auxiliary lemma. \\<close>"], ["", "end \\<comment> \\<open>@{term u} is node\\<close>"], ["", "text \\<open>As main result, we get that the augmented flow is again a valid flow.\\<close>"], ["", "corollary augment_flow_presv: \"Flow c s t (f\\<up>f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Flow c s t (augment f')", "using augment_flow_presv_cap augment_flow_presv_con"], ["proof (prove)\nusing this:\n  (0::'capacity) \\<le> augment f' (?u, ?v) \\<and>\n  augment f' (?u, ?v) \\<le> c (?u, ?v)\n  ?u \\<in> V - {s, t} \\<Longrightarrow>\n  sum (augment f') (outgoing ?u) = sum (augment f') (incoming ?u)\n\ngoal (1 subgoal):\n 1. Flow c s t (augment f')", "by (rule_tac intro_Flow) auto"], ["", "subsection \\<open>Value of the Augmented Flow\\<close>"], ["", "text \\<open>Next, we show that the value of the augmented flow is the sum of the values\n  of the original flow and the augmenting flow.\\<close>"], ["", "lemma augment_flow_value: \"Flow.val c s (f\\<up>f') = val + Flow.val cf s f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Flow.val c s (augment f') = val + f'.val", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Flow.val c s (augment f') = val + f'.val", "interpret f'': Flow c s t \"f\\<up>f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Flow c s t (augment f')", "using augment_flow_presv"], ["proof (prove)\nusing this:\n  Flow c s t (augment f')\n\ngoal (1 subgoal):\n 1. Flow c s t (augment f')", "."], ["proof (state)\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "txt \\<open>For this proof, we set up Isabelle's rewriting engine for rewriting of sums.\n    In particular, we add lemmas to convert sums over incoming or outgoing \n    edges to sums over all vertices. This allows us to write the summations\n    from Cormen et al.~a bit more concise, leaving some of the tedious \n    calculation work to the computer.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "note sum_simp_setup[simp] = \n    sum_outgoing_alt[OF capacity_const] s_node\n    sum_incoming_alt[OF capacity_const]\n    cf.sum_outgoing_alt[OF f'.capacity_const]\n    cf.sum_incoming_alt[OF f'.capacity_const]\n    sum_outgoing_alt[OF f''.capacity_const]\n    sum_incoming_alt[OF f''.capacity_const]\n    sum_subtractf sum.distrib"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V. sum f (outgoing v) = (\\<Sum>u\\<in>V. f (v, u))\n  s \\<in> V\n  \\<forall>v\\<in>V. sum f (incoming v) = (\\<Sum>u\\<in>V. f (u, v))\n  \\<forall>v\\<in>cf.V.\n     sum f' (cf.outgoing v) = (\\<Sum>u\\<in>cf.V. f' (v, u))\n  \\<forall>v\\<in>cf.V.\n     sum f' (cf.incoming v) = (\\<Sum>u\\<in>cf.V. f' (u, v))\n  \\<forall>v\\<in>V.\n     sum (augment f') (outgoing v) = (\\<Sum>u\\<in>V. augment f' (v, u))\n  \\<forall>v\\<in>V.\n     sum (augment f') (incoming v) = (\\<Sum>u\\<in>V. augment f' (u, v))\n  (\\<Sum>x\\<in>?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A\n  (\\<Sum>x\\<in>?A. ?g x + ?h x) = sum ?g ?A + sum ?h ?A\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "txt \\<open>Note that, if neither an edge nor its reverse is in the graph,\n    there is also no edge in the residual graph, and thus the flow value\n    is zero.\\<close>"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V. sum f (outgoing v) = (\\<Sum>u\\<in>V. f (v, u))\n  s \\<in> V\n  \\<forall>v\\<in>V. sum f (incoming v) = (\\<Sum>u\\<in>V. f (u, v))\n  \\<forall>v\\<in>cf.V.\n     sum f' (cf.outgoing v) = (\\<Sum>u\\<in>cf.V. f' (v, u))\n  \\<forall>v\\<in>cf.V.\n     sum f' (cf.incoming v) = (\\<Sum>u\\<in>cf.V. f' (u, v))\n  \\<forall>v\\<in>V.\n     sum (augment f') (outgoing v) = (\\<Sum>u\\<in>V. augment f' (v, u))\n  \\<forall>v\\<in>V.\n     sum (augment f') (incoming v) = (\\<Sum>u\\<in>V. augment f' (u, v))\n  (\\<Sum>x\\<in>?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A\n  (\\<Sum>x\\<in>?A. ?g x + ?h x) = sum ?g ?A + sum ?h ?A\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "have aux1: \"f'(u,v) = 0\" if \"(u,v)\\<notin>E\" \"(v,u)\\<notin>E\" for u v"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "from that cfE_ss_invE"], ["proof (chain)\npicking this:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n  cf.E \\<subseteq> E \\<union> E\\<inverse>", "have \"(u,v)\\<notin>cf.E\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n  cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (1 subgoal):\n 1. (u, v) \\<notin> cf.E", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<notin> cf.E\n\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "thus \"f'(u,v) = 0\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> cf.E\n\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  f' (u, v) = (0::'capacity)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>(?u, ?v) \\<notin> E; (?v, ?u) \\<notin> E\\<rbrakk>\n  \\<Longrightarrow> f' (?u, ?v) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "txt \\<open>Now, the proposition follows by straightforward rewriting of \n    the summations:\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>(?u, ?v) \\<notin> E; (?v, ?u) \\<notin> E\\<rbrakk>\n  \\<Longrightarrow> f' (?u, ?v) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "have \"f''.val = (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f''.val = (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s))", "unfolding f''.val_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing s) - sum (augment f') (incoming s) =\n    (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s))", "by simp"], ["proof (state)\nthis:\n  f''.val = (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s))\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "also"], ["proof (state)\nthis:\n  f''.val = (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s))\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "have \"\\<dots> = (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s)))\"\n    \\<comment> \\<open>Note that this is the crucial step of the proof, which Cormen et al. leave as an exercise.\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s)) =\n    (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s)))", "by (rule sum.cong) (auto simp: augment_def no_parallel_edge aux1)"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s)) =\n  (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s)))\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "also"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>V. augment f' (s, u) - augment f' (u, s)) =\n  (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s)))\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "have \"\\<dots> = val + Flow.val cf s f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s))) =\n    val + f'.val", "unfolding val_def f'.val_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s))) =\n    sum f (outgoing s) - sum f (incoming s) +\n    (sum f' (cf.outgoing s) - sum f' (cf.incoming s))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>V. f (s, u) - f (u, s) + (f' (s, u) - f' (u, s))) =\n  val + f'.val\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "finally"], ["proof (chain)\npicking this:\n  f''.val = val + f'.val", "show \"f''.val = val + f'.val\""], ["proof (prove)\nusing this:\n  f''.val = val + f'.val\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "."], ["proof (state)\nthis:\n  f''.val = val + f'.val\n\ngoal:\nNo subgoals!", "qed"], ["", "txt \\<open>Note, there is also an automatic proof. When creating the above \n    explicit proof, this automatic one has been used to extract meaningful\n    subgoals, abusing Isabelle as a term rewriter.\\<close>"], ["", "lemma \"Flow.val c s (f\\<up>f') = val + Flow.val cf s f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Flow.val c s (augment f') = val + f'.val", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Flow.val c s (augment f') = val + f'.val", "interpret f'': Flow c s t \"f\\<up>f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Flow c s t (augment f')", "using augment_flow_presv"], ["proof (prove)\nusing this:\n  Flow c s t (augment f')\n\ngoal (1 subgoal):\n 1. Flow c s t (augment f')", "."], ["proof (state)\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "have aux1: \"f'(u,v) = 0\" if A: \"(u,v)\\<notin>E\" \"(v,u)\\<notin>E\" for u v"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "from A cfE_ss_invE"], ["proof (chain)\npicking this:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n  cf.E \\<subseteq> E \\<union> E\\<inverse>", "have \"(u,v)\\<notin>cf.E\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> E\n  (v, u) \\<notin> E\n  cf.E \\<subseteq> E \\<union> E\\<inverse>\n\ngoal (1 subgoal):\n 1. (u, v) \\<notin> cf.E", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<notin> cf.E\n\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "thus \"f'(u,v) = 0\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> cf.E\n\ngoal (1 subgoal):\n 1. f' (u, v) = (0::'capacity)", "by auto"], ["proof (state)\nthis:\n  f' (u, v) = (0::'capacity)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>(?u, ?v) \\<notin> E; (?v, ?u) \\<notin> E\\<rbrakk>\n  \\<Longrightarrow> f' (?u, ?v) = (0::'capacity)\n\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f''.val = val + f'.val", "unfolding val_def f'.val_def f''.val_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (augment f') (outgoing s) - sum (augment f') (incoming s) =\n    sum f (outgoing s) - sum f (incoming s) +\n    (sum f' (cf.outgoing s) - sum f' (cf.incoming s))", "apply (simp del:\n      add: \n      sum_outgoing_alt[OF capacity_const] s_node\n      sum_incoming_alt[OF capacity_const]\n      sum_outgoing_alt[OF f''.capacity_const]\n      sum_incoming_alt[OF f''.capacity_const]\n      cf.sum_outgoing_alt[OF f'.capacity_const]\n      cf.sum_incoming_alt[OF f'.capacity_const]\n      sum_subtractf[symmetric] sum.distrib[symmetric]\n      )"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>V. augment f' (s, u)) =\n    (\\<Sum>x\\<in>V. f (s, x) + (f' (s, x) - f' (x, s)))", "apply (rule sum.cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. V = V\n 2. \\<And>x.\n       x \\<in> V \\<Longrightarrow>\n       augment f' (s, x) = f (s, x) + (f' (s, x) - f' (x, s))", "apply (auto simp: augment_def no_parallel_edge aux1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f''.val = val + f'.val\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>Augmenting flow\\<close>"], ["", "end \\<comment> \\<open>Network flow\\<close>"], ["", "end \\<comment> \\<open>Theory\\<close>"]]}