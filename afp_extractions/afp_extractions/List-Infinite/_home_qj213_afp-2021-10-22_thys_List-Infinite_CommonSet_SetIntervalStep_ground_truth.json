{"file_name": "/home/qj213/afp-2021-10-22/thys/List-Infinite/CommonSet/SetIntervalStep.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List-Infinite", "problem_names": ["lemma inext_UNIV: \"inext n UNIV = Suc n\"", "lemma iprev_UNIV: \"iprev n UNIV = n - Suc 0\"", "lemma inext_empty: \"inext n {} = n\"", "lemma iprev_empty: \"iprev n {} = n\"", "lemma not_in_inext_fix: \"n \\<notin> I \\<Longrightarrow> inext n I = n\"", "lemma not_in_iprev_fix: \"n \\<notin> I \\<Longrightarrow> iprev n I = n\"", "lemma inext_all_le_fix: \"\\<forall>x\\<in>I. x \\<le> n \\<Longrightarrow> inext n I = n\"", "lemma iprev_all_ge_fix: \"\\<forall>x\\<in>I. n \\<le> x \\<Longrightarrow> iprev n I = n\"", "lemma inext_Max: \"finite I \\<Longrightarrow> inext (Max I) I = Max I\"", "lemma iprev_iMin: \"iprev (iMin I) I = iMin I\"", "lemma inext_ge_Max: \"\\<lbrakk> finite I; Max I \\<le> n \\<rbrakk> \\<Longrightarrow> inext n I = n\"", "lemma iprev_le_iMin: \"n \\<le> iMin I \\<Longrightarrow> iprev n I = n\"", "lemma inext_singleton: \"inext n {a} = n\"", "lemma iprev_singleton: \"iprev n {a} = n\"", "lemma inext_closed: \"n \\<in> I \\<Longrightarrow> inext n I \\<in> I\"", "lemma iprev_closed: \"n \\<in> I \\<Longrightarrow> iprev n I \\<in> I\"", "lemma inext_in_imp_in: \"inext n I \\<in> I \\<Longrightarrow> n \\<in> I\"", "lemma inext_in_iff: \"(inext n I \\<in> I) = (n \\<in> I)\"", "lemma subset_inext_closed: \"\\<lbrakk> n \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> inext n A \\<in> B\"", "lemma subset_inext_in_imp_in: \"\\<lbrakk> inext n A \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> n \\<in> B\"", "lemma subset_inext_in_iff: \"A \\<subseteq> B \\<Longrightarrow> (inext n A \\<in> B) = (n \\<in> B)\"", "lemma iprev_in_imp_in: \"iprev n I \\<in> I \\<Longrightarrow> n \\<in> I\"", "lemma iprev_in_iff: \"(iprev n I \\<in> I) = (n \\<in> I)\"", "lemma subset_iprev_closed: \"\\<lbrakk> n \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> iprev n A \\<in> B\"", "lemma subset_iprev_in_imp_in: \"\\<lbrakk> iprev n A \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> n \\<in> B\"", "lemma subset_iprev_in_iff: \"A \\<subseteq> B \\<Longrightarrow> (iprev n A \\<in> B) = (n \\<in> B)\"", "lemma inext_mono: \"n \\<le> inext n I\"", "lemma inext_mono2: \"\\<lbrakk> n \\<in> I; \\<exists>x\\<in>I. n < x \\<rbrakk> \\<Longrightarrow> n < inext n I\"", "lemma inext_mono2_infin: \"\\<lbrakk> n \\<in> I; infinite I \\<rbrakk> \\<Longrightarrow> n < inext n I\"", "lemma inext_mono2_fin: \"\\<lbrakk> n \\<in> I; finite I; n \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> n < inext n I\"", "lemma inext_mono2_infin_fin: \"\n  \\<lbrakk> n \\<in> I; n \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> n < inext n I\"", "lemma inext_neq_iMin: \"\\<exists>x\\<in>I. n < x \\<Longrightarrow> inext n I \\<noteq> iMin I\"", "lemma inext_neq_iMin_infin: \"infinite I \\<Longrightarrow> inext n I \\<noteq> iMin I\"", "lemma Max_le_iMin_imp_singleton: \"\\<lbrakk> finite I; I \\<noteq> {}; Max I \\<le> iMin I \\<rbrakk> \\<Longrightarrow> I = {iMin I}\"", "lemma inext_neq_iMin_not_singleton: \"\n  \\<lbrakk> I \\<noteq> {}; \\<not>(\\<exists>a. I = {a}) \\<rbrakk> \\<Longrightarrow> inext n I \\<noteq> iMin I\"", "lemma inext_neq_imp_Max: \"n \\<noteq> inext n I \\<Longrightarrow> n < Max I \\<or> infinite I\"", "lemma inext_less_conv: \"(n \\<in> I \\<and> (n < Max I \\<or> infinite I)) = (n < inext n I)\"", "lemma inext_min_step: \"\\<lbrakk> n < k; k < inext n I \\<rbrakk> \\<Longrightarrow> k \\<notin> I\"", "lemma min_step_inext[rule_format]: \"\n  \\<lbrakk> x < y; x \\<in> I; y \\<in> I; \\<And>k. \\<lbrakk> x < k; k < y \\<rbrakk> \\<Longrightarrow> k \\<notin> I \\<rbrakk> \\<Longrightarrow>\n  inext x I = y\"", "lemma between_empty_imp_inext_eq: \"\n  \\<lbrakk> n \\<in> A; n < inext n A; n \\<in> B; inext n A \\<in> B; B \\<down>> n \\<down>< (inext n A) = {} \\<rbrakk> \\<Longrightarrow>\n  inext n B = inext n A\"", "lemma inext_le_mono: \"\\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> inext a I \\<le> inext b I\"", "lemma inext_less_mono: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\"", "lemma inext_less_mono_fin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; finite I; b \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\"", "lemma inext_less_mono_infin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; infinite I \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\"", "lemma inext_less_mono_infin_fin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; b \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\"", "lemma inext_le_mono_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. inext a I < x \\<rbrakk> \\<Longrightarrow> a \\<le> b\"", "lemma inext_le_mono_fin_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; finite I; inext a I \\<noteq> Max I\\<rbrakk> \\<Longrightarrow> a \\<le> b\"", "lemma inext_le_mono_infin_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; infinite I \\<rbrakk> \\<Longrightarrow> a \\<le> b\"", "lemma inext_le_mono_infin_fin_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; inext a I \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> a \\<le> b\"", "lemma inext_less_mono_rev: \"\n  \\<lbrakk> inext a I < inext b I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> a < b\"", "lemma less_imp_inext_le: \"\\<lbrakk> a < b; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> inext a I \\<le> b\"", "lemma iprev_mono: \"iprev n I \\<le> n\"", "lemma iprev_mono2: \"\\<lbrakk> n \\<in> I; \\<exists>x\\<in>I. x < n\\<rbrakk> \\<Longrightarrow> iprev n I < n\"", "lemma iprev_mono2_if_neq_iMin: \"\\<lbrakk> n \\<in> I; iMin I \\<noteq> n\\<rbrakk> \\<Longrightarrow> iprev n I < n\"", "lemma iprev_neq_Max: \"\\<lbrakk> finite I; \\<exists>x\\<in>I. x < n \\<rbrakk>  \\<Longrightarrow> iprev n I \\<noteq> Max I\"", "lemma iprev_neq_Max_not_singleton: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; \\<not>(\\<exists>a. I = {a}) \\<rbrakk> \\<Longrightarrow> iprev n I \\<noteq> Max I\"", "lemma iprev_neq_imp_iMin: \"iprev n I \\<noteq> n \\<Longrightarrow> iMin I < n\"", "lemma iprev_greater_conv: \"(n \\<in> I \\<and> iMin I < n) = (iprev n I < n)\"", "lemma inext_fix_iff: \"(n \\<notin> I \\<or> (finite I \\<and> Max I = n)) = (inext n I = n)\"", "lemma iprev_fix_iff: \"(n \\<notin> I \\<or> iMin I = n) = (iprev n I = n)\"", "lemma iprev_min_step: \"\\<lbrakk> iprev n I < k; k < n \\<rbrakk> \\<Longrightarrow> k \\<notin> I\"", "lemma min_step_iprev: \"\n  \\<lbrakk> x < y; x \\<in> I; y \\<in> I; \\<And>k. \\<lbrakk> x < k; k < y \\<rbrakk> \\<Longrightarrow> k \\<notin> I \\<rbrakk> \\<Longrightarrow>\n  iprev y I = x\"", "lemma between_empty_imp_iprev_eq: \"\n  \\<lbrakk> n \\<in> A; iprev n A < n; n \\<in> B; iprev n A \\<in> B; B \\<down>> (iprev n A) \\<down>< n = {} \\<rbrakk> \\<Longrightarrow>\n  iprev n B = iprev n A\"", "lemma iprev_le_mono: \"\\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> iprev a I \\<le> iprev b I\"", "lemma iprev_less_mono: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a \\<rbrakk> \\<Longrightarrow> iprev a I < iprev b I\"", "lemma iprev_less_mono_if_neq_iMin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; iMin I \\<noteq> a \\<rbrakk> \\<Longrightarrow> iprev a I < iprev b I\"", "lemma iprev_le_mono_rev: \"\n  \\<lbrakk> iprev a I \\<le> iprev b I; a \\<in> I; b \\<in> I; iMin I \\<noteq> iprev b I \\<rbrakk> \\<Longrightarrow> a \\<le> b\"", "lemma iprev_less_mono_rev: \"\n  \\<lbrakk> iprev a I < iprev b I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> a < b\"", "lemma set_restriction_inext_eq: \"\n  \\<lbrakk> set_restriction interval_fun; n \\<in> interval_fun I; inext n I \\<in> interval_fun I \\<rbrakk> \\<Longrightarrow>\n  inext n (interval_fun I) = inext n I\"", "lemma set_restriction_inext_singleton_eq: \"\n  \\<lbrakk> set_restriction interval_fun; n \\<in> interval_fun I; inext n I \\<in> interval_fun I \\<rbrakk> \\<Longrightarrow>\n  {inext n (interval_fun I)} = interval_fun {inext n I}\"", "lemma inext_iprev: \"iMin I \\<noteq> n \\<Longrightarrow> inext (iprev n I) I = n\"", "lemma iprev_inext_infin: \"infinite I \\<Longrightarrow> iprev (inext n I) I = n\"", "lemma iprev_inext_fin: \"\n  \\<lbrakk> finite I; n \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> iprev (inext n I) I = n\"", "lemma iprev_inext: \"\n  n \\<noteq> Max I \\<or> infinite I \\<Longrightarrow> iprev (inext n I) I = n\"", "lemma inext_eq_infin: \"\n  \\<lbrakk> inext a I = inext b I; infinite I \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma inext_eq_fin: \"\n  \\<lbrakk> inext a I = inext b I; finite I; a \\<noteq> Max I; b \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma inext_eq_infin_fin: \"\n  \\<lbrakk> inext a I = inext b I; a \\<noteq> Max I \\<and> b \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma inext_eq: \"\n  \\<lbrakk> inext a I = inext b I; \\<exists>x\\<in>I. a < x; \\<exists>x\\<in>I. b < x \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma iprev_eq_if_neq_iMin: \"\n  \\<lbrakk> iprev a I = iprev b I; iMin I \\<noteq> a; iMin I \\<noteq> b \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma iprev_eq: \"\n  \\<lbrakk> iprev a I = iprev b I; \\<exists>x\\<in>I. x < a; \\<exists>x\\<in>I. x < b \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma greater_imp_iprev_ge: \"\\<lbrakk> b < a; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> b \\<le> iprev a I\"", "lemma inext_cut_less_conv: \"inext n I < t \\<Longrightarrow> inext n (I \\<down>< t) = inext n I\"", "lemma inext_cut_le_conv: \"inext n I \\<le> t \\<Longrightarrow> inext n (I \\<down>\\<le> t) = inext n I\"", "lemma inext_cut_greater_conv: \"t < n \\<Longrightarrow> inext n (I \\<down>> t) = inext n I\"", "lemma inext_cut_ge_conv: \"t \\<le> n \\<Longrightarrow> inext n (I \\<down>\\<ge> t) = inext n I\"", "lemmas inext_cut_conv =\n  inext_cut_less_conv inext_cut_le_conv\n  inext_cut_greater_conv inext_cut_ge_conv", "lemma iprev_cut_greater_conv: \"t < iprev n I \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I\"", "lemma iprev_cut_ge_conv: \"t \\<le> iprev n I \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = iprev n I\"", "lemma iprev_cut_less_conv: \"n < t \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I\"", "lemma iprev_cut_le_conv: \"n \\<le> t \\<Longrightarrow> iprev n (I \\<down>\\<le> t) = iprev n I\"", "lemmas iprev_cut_conv =\n  iprev_cut_less_conv iprev_cut_le_conv\n  iprev_cut_greater_conv iprev_cut_ge_conv", "lemma inext_cut_less_fix: \"t \\<le> inext n I \\<Longrightarrow> inext n (I \\<down>< t) = n\"", "lemma inext_cut_le_fix: \"t < inext n I \\<Longrightarrow> inext n (I \\<down>\\<le> t) = n\"", "lemma iprev_cut_greater_fix: \"iprev n I \\<le> t \\<Longrightarrow> iprev n (I \\<down>> t) = n\"", "lemma iprev_cut_ge_fix: \"iprev n I < t \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = n\"", "lemma CommuteWithIntervalCut4_imp_2: \"CommuteWithIntervalCut4 fun \\<Longrightarrow> CommuteWithIntervalCut2 fun\"", "lemma nat_CommuteWithIntervalCut2_4_eq: \"\n  CommuteWithIntervalCut4 (fun::nat set \\<Rightarrow> nat set) = CommuteWithIntervalCut2 fun\"", "lemma\n  cut_less_CommuteWithIntervalCut4:    \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>< t)\" and\n  cut_le_CommuteWithIntervalCut4:      \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>\\<le> t)\" and\n  cut_greater_CommuteWithIntervalCut4: \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>> t)\" and\n  cut_ge_CommuteWithIntervalCut4:      \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>\\<ge> t)\"", "lemmas i_cut_CommuteWithIntervalCut4 =\n  cut_less_CommuteWithIntervalCut4 cut_le_CommuteWithIntervalCut4\n  cut_greater_CommuteWithIntervalCut4 cut_ge_CommuteWithIntervalCut4", "lemma inext_image: \"\n  \\<lbrakk> n \\<in> I; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\"", "lemma iprev_image: \"\n  \\<lbrakk> n \\<in> I; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\"", "lemma inext_image2: \"\n  strict_mono f \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\"", "lemma iprev_image2: \"\n  strict_mono f \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\"", "lemma inext_imirror_iprev_conv: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  inext (mirror_elem n I) (imirror I) = mirror_elem (iprev n I) I\"", "lemma iprev_imirror_inext_conv: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  iprev (mirror_elem n I) (imirror I) = mirror_elem (inext n I) I\"", "lemma inext_insert_ge_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; Max I \\<le> a \\<rbrakk> \\<Longrightarrow> inext (Max I) (insert a I) = a\"", "lemma iprev_insert_le_iMin: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; a \\<le> iMin I \\<rbrakk> \\<Longrightarrow> iprev (iMin I) (insert a I) = a\"", "lemma cut_less_le_iprev_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> iMin I \\<rbrakk> \\<Longrightarrow> I \\<down>< t = I \\<down>\\<le> (iprev t I)\"", "lemma neq_Max_imp_inext_neq_iMin: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> inext t I \\<noteq> iMin I\"", "lemma cut_le_less_inext_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk> \\<Longrightarrow> I \\<down>\\<le> t = I \\<down>< (inext t I)\"", "lemma cut_ge_greater_iprev_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> iMin I \\<rbrakk> \\<Longrightarrow> I \\<down>\\<ge> t = I \\<down>> (iprev t I)\"", "lemma cut_greater_ge_inext_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> I \\<down>> t = I \\<down>\\<ge> (inext t I)\"", "lemma inext_append: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  inext n (A \\<union> B) = (if n \\<in> B then inext n B else (if n = Max A then iMin B else inext n A))\"", "lemma iprev_append: \"\\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  iprev n (A \\<union> B) = (if n \\<in> A then iprev n A else (if n = iMin B then Max A else iprev n B))\"", "lemma inext_predicate_change_exists_aux: \"\\<And>a.\n  \\<lbrakk> c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I; b \\<in> I; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n \\<in> (I \\<down>\\<ge> a \\<down>< b). \\<not> P n \\<and> P (inext n I)\"", "lemma inext_predicate_change_exists: \"\n  \\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a \\<le> n \\<and> n < b \\<and> \\<not> P n \\<and> P (inext n I)\"", "lemma iprev_predicate_change_exists: \"\n  \\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a < n \\<and> n \\<le> b \\<and> \\<not> P n \\<and> P (iprev n I)\"", "lemma inext_predicate_change_exists2_all: \"\n  \\<lbrakk> (a::nat) \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; \\<forall>k \\<in> I \\<down>\\<ge> b. P k \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a \\<le> n \\<and> n < b \\<and> \\<not> P n \\<and> (\\<forall>k \\<in> I \\<down>> n. P k)\"", "lemma iprev_predicate_change_exists2_all: \"\n  \\<lbrakk> (a::nat) \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; \\<forall>k\\<in>I\\<down>\\<le>a. P k \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a < n \\<and> n \\<le> b \\<and> \\<not> P n \\<and> (\\<forall>k\\<in>I\\<down><n. P k)\"", "lemma inext_nth_closed: \"I \\<noteq> {} \\<Longrightarrow> I \\<rightarrow> n \\<in> I\"", "lemma inext_nth_image: \"\n  \\<lbrakk> I \\<noteq> {}; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> (f ` I) \\<rightarrow> n = f (I \\<rightarrow> n)\"", "lemma inext_nth_Suc_mono: \"I \\<rightarrow> n \\<le> I \\<rightarrow> Suc n\"", "lemma inext_nth_mono: \"a \\<le> b \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> b\"", "lemma inext_nth_Suc_mono2: \"\\<exists>x\\<in>I. I \\<rightarrow> n < x \\<Longrightarrow> I \\<rightarrow> n < I \\<rightarrow> Suc n\"", "lemma inext_nth_mono2: \"\\<exists>x\\<in>I. I \\<rightarrow> a < x \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)\"", "lemma inext_nth_mono2_infin: \"\n  infinite I \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)\"", "lemma inext_nth_Max_fix: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I; a \\<le> b \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> b = Max I\"", "lemma inext_nth_cut_less_conv: \"\n  \\<And>I. I \\<rightarrow> n < t \\<Longrightarrow> (I \\<down>< t) \\<rightarrow> n = I \\<rightarrow> n\"", "lemma remove_Min_inext_nth_Suc_conv: \"\\<And>I.\n  Suc 0 < card I \\<or> infinite I \\<Longrightarrow>\n  (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n\"", "lemma remove_Max_eq: \"\\<lbrakk> finite I; I \\<noteq> {}; n \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> Max (I - {n}) = Max I\"", "lemma remove_iMin_eq: \"\\<lbrakk> I \\<noteq> {}; n \\<noteq> iMin I \\<rbrakk> \\<Longrightarrow> iMin (I - {n}) = iMin I\"", "lemma remove_Min_eq: \"\\<lbrakk> finite I; I \\<noteq> {}; n \\<noteq> Min I \\<rbrakk> \\<Longrightarrow> Min (I - {n}) = Min I\"", "lemma Max_le_iMin_conv_singleton: \"\\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (Max I \\<le> iMin I) = (\\<exists>x. I = {x})\"", "lemma inext_nth_card_less_Max: \"\n  \\<And>I. Suc n < card I \\<Longrightarrow> I \\<rightarrow> n < Max I\"", "lemma inext_nth_card_less_Max': \"\n  n < card I - Suc 0 \\<Longrightarrow> I \\<rightarrow> n < Max I\"", "lemma inext_nth_card_Max_aux: \"\n  \\<And>I. card I = Suc n \\<Longrightarrow> I \\<rightarrow> n = Max I\"", "lemma inext_nth_card_Max_aux': \"\n  \\<And>I. \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> (card I - Suc 0) = Max I\"", "lemma inext_nth_card_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> n = Max I\"", "lemma inext_nth_card_Max': \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I - Suc 0 \\<le> n \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> n = Max I\"", "lemma inext_nth_singleton: \"{a} \\<rightarrow> n = a\"", "lemma inext_nth_eq_Min_conv: \"\n  I \\<noteq> {} \\<Longrightarrow> (I \\<rightarrow> n = iMin I) = (n = 0 \\<or> (\\<exists>a. I = {a}))\"", "lemma inext_nth_gr_Min_conv: \"\n  I \\<noteq> {} \\<Longrightarrow> (iMin I < I \\<rightarrow> n) = (0 < n \\<and> \\<not>(\\<exists>a. I = {a}))\"", "lemma inext_nth_gr_Min_conv_infinite: \"\n  infinite I \\<Longrightarrow> (iMin I < I \\<rightarrow> n) = (0 < n)\"", "lemma inext_nth_cut_ge_inext_nth: \"\\<And>I b.\n  I \\<noteq> {} \\<Longrightarrow> I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b = I \\<rightarrow> (a + b)\"", "lemma inext_nth_append_eq1: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; Max A < iMin B; A \\<rightarrow> n \\<noteq> Max A \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n\"", "lemma inext_nth_card_append_eq1: \"\n  \\<And>A B.\\<lbrakk> Max A < iMin B; n < card A \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n\"", "lemma inext_nth_card_append_eq3: \"\n  \\<lbrakk> finite A; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> (card A) = iMin B\"", "lemma inext_nth_card_append_eq2: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B; card A \\<le> n \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = B \\<rightarrow> (n - card A)\"", "lemma inext_nth_card_append: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = (if n < card A then A \\<rightarrow> n else B \\<rightarrow> (n - card A))\"", "lemma inext_nth_insert_Suc: \"\n  \\<lbrakk> I \\<noteq> {}; a < iMin I \\<rbrakk> \\<Longrightarrow> (insert a I) \\<rightarrow> Suc n = I \\<rightarrow> n\"", "lemma inext_nth_cut_less_eq: \"\n  n < card (I \\<down>< t) \\<Longrightarrow> (I \\<down>< t) \\<rightarrow> n = I \\<rightarrow> n\"", "lemma less_card_cut_less_imp_inext_nth_less: \"\n  n < card (I \\<down>< t) \\<Longrightarrow> I \\<rightarrow> n < t\"", "lemma inext_nth_less_less_card_conv: \"\n  I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))\"", "lemma cut_less_inext_nth_card_eq1: \"\n  n < card I \\<or> infinite I \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n\"", "lemma cut_less_inext_nth_card_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = card I - Suc 0\"", "lemma cut_less_inext_nth_card_if: \"\n  card (I \\<down>< (I \\<rightarrow> n)) = (\n  if (n < card I \\<or> infinite I) then n else card I - Suc 0)\"", "lemma cut_le_inext_nth_card_eq1: \"\n  n < card I \\<or> infinite I \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = Suc n\"", "lemma cut_le_inext_nth_card_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = card I\"", "lemma cut_le_inext_nth_card_if: \"\n  card (I \\<down>\\<le> (I \\<rightarrow> n)) = (\n  if (n < card I \\<or> infinite I) then Suc n else card I)\"", "lemma iprev_nth_closed: \"\\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> n \\<in> I\"", "lemma iprev_nth_image: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> (f ` I) \\<leftarrow> n = f (I \\<leftarrow> n)\"", "lemma iprev_nth_Suc_mono: \"I \\<leftarrow> (Suc n) \\<le> I \\<leftarrow> n\"", "lemma iprev_nth_mono: \"a \\<le> b \\<Longrightarrow> I \\<leftarrow> b \\<le> I \\<leftarrow> a\"", "lemma iprev_nth_Suc_mono2:\n  \"\\<lbrakk> finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> n \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> (Suc n) < I \\<leftarrow> n\"", "lemma iprev_nth_mono2: \"\n  \\<lbrakk> finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a \\<rbrakk> \\<Longrightarrow> (I \\<leftarrow> b < I \\<leftarrow> a) = (a < b)\"", "lemma iprev_nth_iMin_fix: \"\n  \\<lbrakk> I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> b \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> b = iMin I\"", "lemma iprev_nth_singleton: \"{a} \\<leftarrow> n= a\"", "lemma inext_nth_surj_aux1:\"\n  {x \\<in> I. \\<not>(\\<exists>n. I \\<rightarrow> n = x)} = {}\"\n  (is \"?S = {}\"\n   is \"{ x \\<in> I. ?P x} = {}\")", "lemma inext_nth_surj_on:\"surj_on (\\<lambda>n. I \\<rightarrow> n) UNIV I\"", "lemma inext_induct: \"\n  \\<lbrakk> P (iMin I); \\<And>n. \\<lbrakk> n \\<in> I; P n \\<rbrakk> \\<Longrightarrow> P (inext n I); n \\<in> I \\<rbrakk> \\<Longrightarrow> P n\"", "lemma iprev_nth_surj_aux1:\"\n  finite I \\<Longrightarrow> { x \\<in> I. \\<not>(\\<exists>n. I \\<leftarrow> n = x)} = {}\"", "lemma iprev_nth_surj_on: \"finite I \\<Longrightarrow> surj_on (\\<lambda>n. I \\<leftarrow> n) UNIV I\"", "lemma iprev_induct: \"\n  \\<lbrakk> P (Max I); \\<And>n. \\<lbrakk> n \\<in> I; P n \\<rbrakk> \\<Longrightarrow> P (iprev n I); finite I; n \\<in> I \\<rbrakk> \\<Longrightarrow> P n\"", "lemma inext_atLeast: \"n \\<le> t \\<Longrightarrow> inext t {n..} = Suc t\"", "lemma iprev_atLeast': \"n \\<le> t \\<Longrightarrow> iprev (Suc t) {n..} = t\"", "lemma iprev_atLeast: \"n < t  \\<Longrightarrow> iprev t {n..} = t - Suc 0\"", "lemma inext_atMost: \"t < n \\<Longrightarrow> inext t {..n} = Suc t\"", "lemma iprev_atMost: \"t \\<le> n \\<Longrightarrow> iprev t {..n} = t - Suc 0\"", "lemma inext_lessThan: \"Suc t < n \\<Longrightarrow> inext t {..<n} = Suc t\"", "lemma iprev_lessThan: \"t < n \\<Longrightarrow> iprev t {..<n} = t - Suc 0\"", "lemma inext_atLeastAtMost: \"\\<lbrakk> m \\<le> t; t < n \\<rbrakk> \\<Longrightarrow> inext t {m..n} = Suc t\"", "lemma iprev_atLeastAtMost: \"\\<lbrakk> m < t; t \\<le> n \\<rbrakk> \\<Longrightarrow> iprev t {m..n} = t - Suc 0\"", "lemma iprev_atLeastAtMost': \"\\<lbrakk> m \\<le> t; t < n \\<rbrakk> \\<Longrightarrow> iprev (Suc t) {m..n} = t\"", "lemma inext_nth_atLeast : \"{n..} \\<rightarrow> a = n + a\"", "lemma inext_nth_atLeastAtMost: \"\\<lbrakk> a \\<le> n - m; m \\<le> n \\<rbrakk> \\<Longrightarrow> {m..n} \\<rightarrow> a = m + a\"", "lemma iprev_nth_atLeastAtMost: \"\\<lbrakk> a \\<le> n - m; m \\<le> n \\<rbrakk> \\<Longrightarrow> {m..n} \\<leftarrow> a = n - a\"", "lemma inext_nth_atMost: \"a \\<le> n \\<Longrightarrow> {..n} \\<rightarrow> a = a\"", "lemma iprev_nth_atMost: \"a \\<le> n \\<Longrightarrow> {..n} \\<leftarrow> a = n - a\"", "lemma inext_nth_lessThan : \"a < n \\<Longrightarrow> {..<n} \\<rightarrow> a = a\"", "lemma iprev_nth_lessThan: \"a < n \\<Longrightarrow> {..<n} \\<leftarrow> a = n - Suc a\"", "lemma inext_nth_UNIV: \"UNIV \\<rightarrow> a = a\"", "lemma inext_iprev_nth_Suc: \"\n  iMin I \\<noteq> I \\<leftarrow> n \\<Longrightarrow> inext (I \\<leftarrow> Suc n) I = I \\<leftarrow> n\"", "lemma inext_iprev_nth_pred: \"\n  \\<lbrakk> finite I; iMin I \\<noteq> I \\<leftarrow> (n - Suc 0) \\<rbrakk> \\<Longrightarrow>\n  inext (I \\<leftarrow> n) I = I \\<leftarrow> (n - Suc 0)\"", "lemma iprev_inext_nth_Suc: \"\n  I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I \\<Longrightarrow> iprev (I \\<rightarrow> Suc n) I = I \\<rightarrow> n\"", "lemma iprev_inext_nth_pred: \"\n  I \\<rightarrow> (n - Suc 0) \\<noteq> Max I \\<or> infinite I \\<Longrightarrow>\n  iprev (I \\<rightarrow> n) I = I \\<rightarrow> (n - Suc 0)\"", "lemma inext_nth_imirror_iprev_nth_conv: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  (imirror I) \\<rightarrow> n = mirror_elem (I \\<leftarrow> n) I\"", "lemma iprev_nth_imirror_inext_nth_conv: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  (imirror I) \\<leftarrow> n = mirror_elem (I \\<rightarrow> n) I\"", "lemma iprev_nth_card_greater_iMin: \"Suc n < card I \\<Longrightarrow> iMin I < I \\<leftarrow> n\"", "lemma iprev_nth_card_iMin: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> n = iMin I\"", "lemma iprev_nth_card_iMin': \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I - Suc 0 \\<le> n \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> n = iMin I\""], "translations": [["", "lemma inext_UNIV: \"inext n UNIV = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext n UNIV = Suc n", "apply (simp add: inext_def cut_greater_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. n < x \\<Longrightarrow> iMin {x. n < x} = Suc n\n 2. \\<exists>x. n < x", "apply (rule iMin_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. n < x \\<Longrightarrow> Suc n \\<in> {x. n < x}\n 2. \\<And>x xa.\n       \\<lbrakk>n < x; xa \\<in> {x. n < x}\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> xa\n 3. \\<exists>x. n < x", "apply fastforce+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_UNIV: \"iprev n UNIV = n - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n UNIV = n - Suc 0", "apply (simp add: iprev_def cut_less_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x < n \\<Longrightarrow> Max {x. x < n} = n - Suc 0\n 2. \\<forall>x. \\<not> x < n \\<Longrightarrow> n = n - Suc 0", "apply (rule Max_equality)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. x < n \\<Longrightarrow> n - Suc 0 \\<in> {x. x < n}\n 2. \\<And>x. x < n \\<Longrightarrow> finite {x. x < n}\n 3. \\<And>x xa.\n       \\<lbrakk>x < n; xa \\<in> {x. x < n}\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n - Suc 0\n 4. \\<forall>x. \\<not> x < n \\<Longrightarrow> n = n - Suc 0", "apply fastforce+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_empty: \"inext n {} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext n {} = n", "unfolding inext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n \\<in> {} \\<and> {} \\<down>> n \\<noteq> {}\n     then iMin ({} \\<down>> n) else n) =\n    n", "by simp"], ["", "lemma iprev_empty: \"iprev n {} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n {} = n", "unfolding iprev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n \\<in> {} \\<and> {} \\<down>< n \\<noteq> {} then Max ({} \\<down>< n)\n     else n) =\n    n", "by simp"], ["", "lemma not_in_inext_fix: \"n \\<notin> I \\<Longrightarrow> inext n I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> I \\<Longrightarrow> inext n I = n", "unfolding inext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> I \\<Longrightarrow>\n    (if n \\<in> I \\<and> I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n)\n     else n) =\n    n", "by simp"], ["", "lemma not_in_iprev_fix: \"n \\<notin> I \\<Longrightarrow> iprev n I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> I \\<Longrightarrow> iprev n I = n", "unfolding iprev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> I \\<Longrightarrow>\n    (if n \\<in> I \\<and> I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n     else n) =\n    n", "by simp"], ["", "lemma inext_all_le_fix: \"\\<forall>x\\<in>I. x \\<le> n \\<Longrightarrow> inext n I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>I. x \\<le> n \\<Longrightarrow> inext n I = n", "unfolding inext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>I. x \\<le> n \\<Longrightarrow>\n    (if n \\<in> I \\<and> I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n)\n     else n) =\n    n", "by force"], ["", "lemma iprev_all_ge_fix: \"\\<forall>x\\<in>I. n \\<le> x \\<Longrightarrow> iprev n I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>I. n \\<le> x \\<Longrightarrow> iprev n I = n", "unfolding iprev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>I. n \\<le> x \\<Longrightarrow>\n    (if n \\<in> I \\<and> I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n     else n) =\n    n", "by force"], ["", "lemma inext_Max: \"finite I \\<Longrightarrow> inext (Max I) I = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> inext (Max I) I = Max I", "unfolding inext_def cut_greater_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    (if Max I \\<in> I \\<and> {x \\<in> I. Max I < x} \\<noteq> {}\n     then iMin {x \\<in> I. Max I < x} else Max I) =\n    Max I", "by (fastforce dest: Max_ge)"], ["", "lemma iprev_iMin: \"iprev (iMin I) I = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev (iMin I) I = iMin I", "unfolding iprev_def cut_less_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if iMin I \\<in> I \\<and> {x \\<in> I. x < iMin I} \\<noteq> {}\n     then Max {x \\<in> I. x < iMin I} else iMin I) =\n    iMin I", "by fastforce"], ["", "lemma inext_ge_Max: \"\\<lbrakk> finite I; Max I \\<le> n \\<rbrakk> \\<Longrightarrow> inext n I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext n I = n", "unfolding inext_def cut_greater_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I \\<le> n\\<rbrakk>\n    \\<Longrightarrow> (if n \\<in> I \\<and> {x \\<in> I. n < x} \\<noteq> {}\n                       then iMin {x \\<in> I. n < x} else n) =\n                      n", "by (fastforce dest: Max_ge)"], ["", "lemma iprev_le_iMin: \"n \\<le> iMin I \\<Longrightarrow> iprev n I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> iMin I \\<Longrightarrow> iprev n I = n", "unfolding iprev_def cut_less_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> iMin I \\<Longrightarrow>\n    (if n \\<in> I \\<and> {x \\<in> I. x < n} \\<noteq> {}\n     then Max {x \\<in> I. x < n} else n) =\n    n", "by fastforce"], ["", "lemma inext_singleton: \"inext n {a} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext n {a} = n", "unfolding inext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n \\<in> {a} \\<and> {a} \\<down>> n \\<noteq> {}\n     then iMin ({a} \\<down>> n) else n) =\n    n", "by fastforce"], ["", "lemma iprev_singleton: \"iprev n {a} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n {a} = n", "unfolding iprev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n \\<in> {a} \\<and> {a} \\<down>< n \\<noteq> {}\n     then Max ({a} \\<down>< n) else n) =\n    n", "by fastforce"], ["", "lemma inext_closed: \"n \\<in> I \\<Longrightarrow> inext n I \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> I \\<Longrightarrow> inext n I \\<in> I", "apply (clarsimp simp: inext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (I \\<down>> n) \\<in> I", "apply (rule subsetD[OF cut_greater_subset])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (I \\<down>> n) \\<in> I \\<down>> ?t8", "apply (rule iMinI_ex2, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_closed: \"n \\<in> I \\<Longrightarrow> iprev n I \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> I \\<Longrightarrow> iprev n I \\<in> I", "apply (clarsimp simp: iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) \\<in> I", "apply (rule subsetD[of \"I \\<down>< n\"], fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) \\<in> I \\<down>< n", "by (rule Max_in[OF nat_cut_less_finite])"], ["", "lemma inext_in_imp_in: \"inext n I \\<in> I \\<Longrightarrow> n \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext n I \\<in> I \\<Longrightarrow> n \\<in> I", "by (case_tac \"n \\<in> I\", simp_all add: not_in_inext_fix)"], ["", "lemma inext_in_iff: \"(inext n I \\<in> I) = (n \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inext n I \\<in> I) = (n \\<in> I)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inext n I \\<in> I \\<Longrightarrow> n \\<in> I\n 2. n \\<in> I \\<Longrightarrow> inext n I \\<in> I", "apply (rule inext_in_imp_in, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> I \\<Longrightarrow> inext n I \\<in> I", "apply (rule inext_closed, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_inext_closed: \"\\<lbrakk> n \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> inext n A \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> inext n A \\<in> B", "apply (case_tac \"n \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> B; A \\<subseteq> B; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> inext n A \\<in> B\n 2. \\<lbrakk>n \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> inext n A \\<in> B", "apply (fastforce simp: inext_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> inext n A \\<in> B", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_inext_in_imp_in: \"\\<lbrakk> inext n A \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> n \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext n A \\<in> B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B", "apply (case_tac \"n \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inext n A \\<in> B; A \\<subseteq> B; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B\n 2. \\<lbrakk>inext n A \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext n A \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_inext_in_iff: \"A \\<subseteq> B \\<Longrightarrow> (inext n A \\<in> B) = (n \\<in> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> (inext n A \\<in> B) = (n \\<in> B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<subseteq> B; inext n A \\<in> B\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B\n 2. \\<lbrakk>A \\<subseteq> B; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n A \\<in> B", "apply (rule subset_inext_in_imp_in, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n A \\<in> B", "apply (rule subset_inext_closed, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_in_imp_in: \"iprev n I \\<in> I \\<Longrightarrow> n \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I \\<in> I \\<Longrightarrow> n \\<in> I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I \\<in> I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I\n 2. \\<lbrakk>iprev n I \\<in> I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I", "apply (simp_all add: not_in_iprev_fix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_in_iff: \"(iprev n I \\<in> I) = (n \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (iprev n I \\<in> I) = (n \\<in> I)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. iprev n I \\<in> I \\<Longrightarrow> n \\<in> I\n 2. n \\<in> I \\<Longrightarrow> iprev n I \\<in> I", "apply (rule iprev_in_imp_in, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> I \\<Longrightarrow> iprev n I \\<in> I", "apply (rule iprev_closed, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_iprev_closed: \"\\<lbrakk> n \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> iprev n A \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> iprev n A \\<in> B", "apply (case_tac \"n \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> B; A \\<subseteq> B; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> iprev n A \\<in> B\n 2. \\<lbrakk>n \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> iprev n A \\<in> B", "apply (fastforce simp: iprev_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> iprev n A \\<in> B", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_iprev_in_imp_in: \"\\<lbrakk> iprev n A \\<in> B; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> n \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n A \\<in> B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B", "apply (case_tac \"n \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n A \\<in> B; A \\<subseteq> B; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B\n 2. \\<lbrakk>iprev n A \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n A \\<in> B; A \\<subseteq> B; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_iprev_in_iff: \"A \\<subseteq> B \\<Longrightarrow> (iprev n A \\<in> B) = (n \\<in> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> (iprev n A \\<in> B) = (n \\<in> B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<subseteq> B; iprev n A \\<in> B\\<rbrakk>\n    \\<Longrightarrow> n \\<in> B\n 2. \\<lbrakk>A \\<subseteq> B; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n A \\<in> B", "apply (rule subset_iprev_in_imp_in, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n A \\<in> B", "apply (rule subset_iprev_closed, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_mono: \"n \\<le> inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> inext n I", "by (simp add: inext_def i_cut_defs iMin_ge_iff)"], ["", "corollary inext_neq_imp_less: \"n \\<noteq> inext n I \\<Longrightarrow> n < inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> inext n I \\<Longrightarrow> n < inext n I", "by (insert inext_mono[of n I], simp)"], ["", "lemma inext_mono2: \"\\<lbrakk> n \\<in> I; \\<exists>x\\<in>I. n < x \\<rbrakk> \\<Longrightarrow> n < inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; \\<exists>x\\<in>I. n < x\\<rbrakk>\n    \\<Longrightarrow> n < inext n I", "by (fastforce simp add: inext_def i_cut_defs iMin_gr_iff)"], ["", "lemma inext_mono2_infin: \"\\<lbrakk> n \\<in> I; infinite I \\<rbrakk> \\<Longrightarrow> n < inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; infinite I\\<rbrakk> \\<Longrightarrow> n < inext n I", "apply (simp add: inext_def i_cut_defs iMin_gr_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; infinite I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> n < x", "apply (fastforce simp: infinite_nat_iff_unbounded)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_mono2_fin: \"\\<lbrakk> n \\<in> I; finite I; n \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> n < inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; finite I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> n < inext n I", "apply (simp add: inext_def i_cut_defs iMin_gr_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; finite I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> n < x", "apply (blast intro: Max_ge Max_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_mono2_infin_fin: \"\n  \\<lbrakk> n \\<in> I; n \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> n < inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; n \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> n < inext n I", "by (blast intro: inext_mono2_infin inext_mono2_fin)"], ["", "lemma inext_neq_iMin: \"\\<exists>x\\<in>I. n < x \\<Longrightarrow> inext n I \\<noteq> iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. n < x \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I\n 2. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I\n 2. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> n \\<noteq> iMin I\n 2. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (blast dest: iMinI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (rule not_sym, rule less_imp_neq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x\\<in>I. n < x; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iMin I < inext n I", "by (rule le_less_trans[OF iMin_le[of n], OF _ inext_mono2])"], ["", "lemma inext_neq_iMin_infin: \"infinite I \\<Longrightarrow> inext n I \\<noteq> iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (rule inext_neq_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> \\<exists>x\\<in>I. n < x", "apply (blast dest: infinite_nat_iff_unbounded[THEN iffD1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Max_le_iMin_imp_singleton: \"\\<lbrakk> finite I; I \\<noteq> {}; Max I \\<le> iMin I \\<rbrakk> \\<Longrightarrow> I = {iMin I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> iMin I\\<rbrakk>\n    \\<Longrightarrow> I = {iMin I}", "by (simp add: iMin_Min_conv Max_le_Min_imp_singleton)"], ["", "lemma inext_neq_iMin_not_singleton: \"\n  \\<lbrakk> I \\<noteq> {}; \\<not>(\\<exists>a. I = {a}) \\<rbrakk> \\<Longrightarrow> inext n I \\<noteq> iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I\n 2. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; infinite I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; infinite I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I\n 2. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (simp add: inext_neq_iMin_infin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I;\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I\n 2. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I;\n     n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I;\n     n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I\n 2. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I;\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; \\<forall>a. I \\<noteq> {a}; finite I;\n     n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> n \\<noteq> iMin I\n 2. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I;\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "apply (blast intro: iMinI_ex2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; \\<nexists>a. I = {a}; finite I;\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "by (metis Max_le_iMin_imp_singleton iMin_le_Max inext_Max inext_mono2_infin_fin not_less_iMin)"], ["", "corollary inext_neq_iMin_not_card_1: \"\n  \\<lbrakk> I \\<noteq> {}; card I \\<noteq> Suc 0 \\<rbrakk> \\<Longrightarrow> inext n I \\<noteq> iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> inext n I \\<noteq> iMin I", "by (simp add: inext_neq_iMin_not_singleton card_1_singleton_conv)"], ["", "lemma inext_neq_imp_Max: \"n \\<noteq> inext n I \\<Longrightarrow> n < Max I \\<or> infinite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> inext n I \\<Longrightarrow> n < Max I \\<or> infinite I", "by (rule ccontr, clarsimp simp: inext_ge_Max)"], ["", "lemma inext_less_conv: \"(n \\<in> I \\<and> (n < Max I \\<or> infinite I)) = (n < inext n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> I \\<and> (n < Max I \\<or> infinite I)) = (n < inext n I)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<in> I \\<and> (n < Max I \\<or> infinite I) \\<Longrightarrow>\n    n < inext n I\n 2. n < inext n I \\<Longrightarrow>\n    n \\<in> I \\<and> (n < Max I \\<or> infinite I)", "apply (blast intro: inext_mono2_infin_fin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < inext n I \\<Longrightarrow>\n    n \\<in> I \\<and> (n < Max I \\<or> infinite I)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n < inext n I \\<Longrightarrow> n \\<in> I\n 2. n < inext n I \\<Longrightarrow> n < Max I \\<or> infinite I", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < inext n I; n \\<notin> I\\<rbrakk> \\<Longrightarrow> False\n 2. n < inext n I \\<Longrightarrow> n < Max I \\<or> infinite I", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < inext n I \\<Longrightarrow> n < Max I \\<or> infinite I", "apply (blast dest: inext_neq_imp_Max less_imp_neq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_min_step: \"\\<lbrakk> n < k; k < inext n I \\<rbrakk> \\<Longrightarrow> k \\<notin> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < k; k < inext n I\\<rbrakk> \\<Longrightarrow> k \\<notin> I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < k; k < inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I\n 2. \\<lbrakk>n < k; k < inext n I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < k; k < inext n I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I\n 2. \\<lbrakk>n < k; k < inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I", "apply (simp add: inext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < k; k < inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I", "apply (rule contrapos_pn[of \"k < inext n I\" \"k \\<in> I\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < k; k < inext n I; n \\<in> I; k \\<in> I\\<rbrakk>\n    \\<Longrightarrow> \\<not> k < inext n I", "apply (simp add: inext_def i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < k;\n     k < (if \\<exists>x. x \\<in> I \\<and> n < x then iMin (I \\<down>> n)\n          else n);\n     n \\<in> I; k \\<in> I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (case_tac \"\\<exists>x. x \\<in> I \\<and> n < x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < k;\n     k < (if \\<exists>x. x \\<in> I \\<and> n < x then iMin (I \\<down>> n)\n          else n);\n     n \\<in> I; k \\<in> I; \\<exists>x. x \\<in> I \\<and> n < x\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n < k;\n     k < (if \\<exists>x. x \\<in> I \\<and> n < x then iMin (I \\<down>> n)\n          else n);\n     n \\<in> I; k \\<in> I; \\<nexists>x. x \\<in> I \\<and> n < x\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < k; k < iMin (I \\<down>> n); n \\<in> I; k \\<in> I;\n     \\<exists>x. x \\<in> I \\<and> n < x\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n < k;\n     k < (if \\<exists>x. x \\<in> I \\<and> n < x then iMin (I \\<down>> n)\n          else n);\n     n \\<in> I; k \\<in> I; \\<nexists>x. x \\<in> I \\<and> n < x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (blast dest: not_less_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < k;\n     k < (if \\<exists>x. x \\<in> I \\<and> n < x then iMin (I \\<down>> n)\n          else n);\n     n \\<in> I; k \\<in> I; \\<nexists>x. x \\<in> I \\<and> n < x\\<rbrakk>\n    \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary inext_min_step2: \"\\<not>(\\<exists>k\\<in>I. n < k \\<and> k < inext n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<in>I. n < k \\<and> k < inext n I)", "by (clarsimp simp add: inext_min_step)"], ["", "lemma min_step_inext[rule_format]: \"\n  \\<lbrakk> x < y; x \\<in> I; y \\<in> I; \\<And>k. \\<lbrakk> x < k; k < y \\<rbrakk> \\<Longrightarrow> k \\<notin> I \\<rbrakk> \\<Longrightarrow>\n  inext x I = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k.\n        \\<lbrakk>x < k; k < y\\<rbrakk>\n        \\<Longrightarrow> k \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext x I = y", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     inext x I \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: nat_neq_iff, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     inext x I < y\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     y < inext x I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (blast dest: inext_closed inext_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     y < inext x I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: inext_min_step)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary min_step_inext2[rule_format]: \"\n  \\<lbrakk> x < y; x \\<in> I; y \\<in> I; \\<not>(\\<exists>k \\<in> I. x < k \\<and> k < y) \\<rbrakk> \\<Longrightarrow>\n  inext x I = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<not> (\\<exists>k\\<in>I. x < k \\<and> k < y)\\<rbrakk>\n    \\<Longrightarrow> inext x I = y", "by (blast intro: min_step_inext)"], ["", "lemma between_empty_imp_inext_eq: \"\n  \\<lbrakk> n \\<in> A; n < inext n A; n \\<in> B; inext n A \\<in> B; B \\<down>> n \\<down>< (inext n A) = {} \\<rbrakk> \\<Longrightarrow>\n  inext n B = inext n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> A; n < inext n A; n \\<in> B; inext n A \\<in> B;\n     B \\<down>> n \\<down>< inext n A = {}\\<rbrakk>\n    \\<Longrightarrow> inext n B = inext n A", "by (blast intro: min_step_inext2)"], ["", "lemma inext_le_mono: \"\\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> inext a I \\<le> inext b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> inext b I", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> inext b I\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; a = b\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> inext b I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a = b\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> inext b I\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> inext b I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> inext b I", "apply (rule order_trans[of _ b])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> b\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> b \\<le> inext b I", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b; b < inext a I\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> b \\<le> inext b I", "apply (blast dest: inext_min_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> b \\<le> inext b I", "by (rule inext_mono)"], ["", "lemma inext_less_mono: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x\\<rbrakk>\n    \\<Longrightarrow> inext a I < inext b I", "apply (rule le_less_trans[of _ b])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> b\n 2. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x\\<rbrakk>\n    \\<Longrightarrow> b < inext b I", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x;\n     b < inext a I\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x\\<rbrakk>\n    \\<Longrightarrow> b < inext b I", "apply (blast dest: inext_min_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. b < x\\<rbrakk>\n    \\<Longrightarrow> b < inext b I", "by (rule inext_mono2)"], ["", "lemma inext_less_mono_fin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; finite I; b \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; finite I;\n     b \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> inext a I < inext b I", "by (blast intro: inext_less_mono Max_in)"], ["", "lemma inext_less_mono_infin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; infinite I \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; infinite I\\<rbrakk>\n    \\<Longrightarrow> inext a I < inext b I", "apply (rule inext_less_mono, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; infinite I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. b < x", "apply (blast dest: infinite_imp_asc_chain)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_less_mono_infin_fin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; b \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> inext a I < inext b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I;\n     b \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext a I < inext b I", "by (blast intro: inext_less_mono_infin inext_less_mono_fin)"], ["", "lemma inext_le_mono_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. inext a I < x \\<rbrakk> \\<Longrightarrow> a \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     \\<exists>x\\<in>I. inext a I < x\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     \\<exists>x\\<in>I. inext a I < x; b < a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule inext_less_mono, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     \\<exists>x\\<in>I. inext a I < x; b < a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. a < x\n 2. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     \\<exists>x\\<in>I. inext a I < x; b < a; inext b I < inext a I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (blast intro: le_less_trans inext_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     \\<exists>x\\<in>I. inext a I < x; b < a; inext b I < inext a I\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_le_mono_fin_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; finite I; inext a I \\<noteq> Max I\\<rbrakk> \\<Longrightarrow> a \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; finite I;\n     inext a I \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b", "by (metis inext_in_iff inext_le_mono_rev inext_mono2_infin_fin)"], ["", "lemma inext_le_mono_infin_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; infinite I \\<rbrakk> \\<Longrightarrow> a \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b", "by (metis inext_in_iff inext_le_mono_rev inext_mono2_infin_fin)"], ["", "lemma inext_le_mono_infin_fin_rev: \"\n  \\<lbrakk> inext a I \\<le> inext b I; a \\<in> I; b \\<in> I; inext a I \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> a \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I \\<le> inext b I; a \\<in> I; b \\<in> I;\n     inext a I \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b", "by (blast intro: inext_le_mono_infin_rev inext_le_mono_fin_rev)"], ["", "lemma inext_less_mono_rev: \"\n  \\<lbrakk> inext a I < inext b I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> a < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I < inext b I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> a < b", "by (metis inext_le_mono not_le)"], ["", "lemma less_imp_inext_le: \"\\<lbrakk> a < b; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> inext a I \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext a I \\<le> b", "by (metis inext_min_step not_le)"], ["", "lemma iprev_mono: \"iprev n I \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I \\<le> n", "unfolding iprev_def i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n \\<in> I \\<and> {x \\<in> I. x < n} \\<noteq> {}\n     then Max {x \\<in> I. x < n} else n)\n    \\<le> n", "by simp"], ["", "corollary iprev_neq_imp_greater: \"n \\<noteq> iprev n I \\<Longrightarrow> iprev n I < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> iprev n I \\<Longrightarrow> iprev n I < n", "by (insert iprev_mono[of n I], simp)"], ["", "lemma iprev_mono2: \"\\<lbrakk> n \\<in> I; \\<exists>x\\<in>I. x < n\\<rbrakk> \\<Longrightarrow> iprev n I < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; \\<exists>x\\<in>I. x < n\\<rbrakk>\n    \\<Longrightarrow> iprev n I < n", "apply (unfold iprev_def i_cut_defs, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n \\<in> I; x \\<in> I; x < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> x < n", "apply (blast intro: finite_nat_iff_bounded)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_mono2_if_neq_iMin: \"\\<lbrakk> n \\<in> I; iMin I \\<noteq> n\\<rbrakk> \\<Longrightarrow> iprev n I < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; iMin I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> iprev n I < n", "by (blast intro: iMinI iprev_mono2)"], ["", "lemma iprev_neq_Max: \"\\<lbrakk> finite I; \\<exists>x\\<in>I. x < n \\<rbrakk>  \\<Longrightarrow> iprev n I \\<noteq> Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> n \\<noteq> Max I\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (blast dest: Max_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (rule less_imp_neq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I < Max I", "by (rule less_le_trans[OF iprev_mono2 Max_ge])"], ["", "lemma iprev_neq_Max_not_singleton: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; \\<not>(\\<exists>a. I = {a}) \\<rbrakk> \\<Longrightarrow> iprev n I \\<noteq> Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a}\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a};\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a};\n     n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a};\n     n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a};\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<forall>a. I \\<noteq> {a};\n     n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> n \\<noteq> Max I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a};\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (blast intro: Max_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a};\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (case_tac \"n = iMin I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a}; n \\<in> I;\n     n = iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a}; n \\<in> I;\n     n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (metis Max_le_Min_conv_singleton iMin_Min_conv iMin_le_Max iprev_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; \\<nexists>a. I = {a}; n \\<in> I;\n     n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (metis iprev_mono2_if_neq_iMin not_greater_Max)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_neq_Max_not_card_1: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<noteq> Suc 0 \\<rbrakk> \\<Longrightarrow> iprev n I \\<noteq> Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> iprev n I \\<noteq> Max I", "apply (rule iprev_neq_Max_not_singleton, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> \\<nexists>a. I = {a}", "apply (simp add: card_1_singleton_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_neq_imp_iMin: \"iprev n I \\<noteq> n \\<Longrightarrow> iMin I < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I \\<noteq> n \\<Longrightarrow> iMin I < n", "by (rule ccontr, clarsimp simp: iprev_le_iMin)"], ["", "lemma iprev_greater_conv: \"(n \\<in> I \\<and> iMin I < n) = (iprev n I < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> I \\<and> iMin I < n) = (iprev n I < n)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<in> I \\<and> iMin I < n \\<Longrightarrow> iprev n I < n\n 2. iprev n I < n \\<Longrightarrow> n \\<in> I \\<and> iMin I < n", "apply (blast intro: iprev_mono2_if_neq_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I < n \\<Longrightarrow> n \\<in> I \\<and> iMin I < n", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. iprev n I < n \\<Longrightarrow> n \\<in> I\n 2. iprev n I < n \\<Longrightarrow> iMin I < n", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I < n; n \\<notin> I\\<rbrakk> \\<Longrightarrow> False\n 2. iprev n I < n \\<Longrightarrow> iMin I < n", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I < n \\<Longrightarrow> iMin I < n", "apply (blast dest: iprev_neq_imp_iMin less_imp_neq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_fix_iff: \"(n \\<notin> I \\<or> (finite I \\<and> Max I = n)) = (inext n I = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<notin> I \\<or> finite I \\<and> Max I = n) = (inext n I = n)", "apply (case_tac \"n \\<notin> I\", simp add: not_in_inext_fix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n \\<notin> I \\<Longrightarrow>\n    (n \\<notin> I \\<or> finite I \\<and> Max I = n) = (inext n I = n)", "by (metis inext_Max inext_min_step2 inext_mono2_infin_fin)"], ["", "lemma iprev_fix_iff: \"(n \\<notin> I \\<or> iMin I = n) = (iprev n I = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<notin> I \\<or> iMin I = n) = (iprev n I = n)", "apply (case_tac \"n \\<notin> I\", simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n \\<notin> I \\<Longrightarrow>\n    (n \\<notin> I \\<or> iMin I = n) = (iprev n I = n)", "by (metis iprev_iMin iprev_mono2_if_neq_iMin less_not_refl3)"], ["", "lemma iprev_min_step: \"\\<lbrakk> iprev n I < k; k < n \\<rbrakk> \\<Longrightarrow> k \\<notin> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I < k; k < n\\<rbrakk> \\<Longrightarrow> k \\<notin> I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I < k; k < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I\n 2. \\<lbrakk>iprev n I < k; k < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I < k; k < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I\n 2. \\<lbrakk>iprev n I < k; k < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I", "apply (simp add: iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I < k; k < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> k \\<notin> I", "apply (rule contrapos_pn[of \"iprev n I < k\" \"k \\<in> I\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I < k; k < n; n \\<in> I; k \\<in> I\\<rbrakk>\n    \\<Longrightarrow> \\<not> iprev n I < k", "apply (unfold iprev_def i_cut_defs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if \\<exists>x. x \\<in> I \\<and> x < n\n              then Max {x \\<in> I. x < n} else n)\n             < k;\n     k < n; n \\<in> I; k \\<in> I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>k < n; n \\<in> I; k \\<in> I; x \\<in> I; x < n;\n        Max {x \\<in> I. x < n} < k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>k < n; n \\<in> I; k \\<in> I;\n     \\<nexists>x. x \\<in> I \\<and> x < n; n < k\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac Max_ge[of \"{x \\<in> I. x < n}\" k])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>k < n; n \\<in> I; k \\<in> I; x \\<in> I; x < n;\n        Max {x \\<in> I. x < n} < k; k \\<le> Max {x \\<in> I. x < n}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>k < n; n \\<in> I; k \\<in> I; x \\<in> I; x < n;\n        Max {x \\<in> I. x < n} < k\\<rbrakk>\n       \\<Longrightarrow> finite {x \\<in> I. x < n}\n 3. \\<And>x.\n       \\<lbrakk>k < n; n \\<in> I; k \\<in> I; x \\<in> I; x < n;\n        Max {x \\<in> I. x < n} < k\\<rbrakk>\n       \\<Longrightarrow> k \\<in> {x \\<in> I. x < n}\n 4. \\<lbrakk>k < n; n \\<in> I; k \\<in> I;\n     \\<nexists>x. x \\<in> I \\<and> x < n; n < k\\<rbrakk>\n    \\<Longrightarrow> False", "apply fastforce+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_min_step2: \"\\<not>(\\<exists>x\\<in>I. iprev n I < x \\<and> x < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>I. iprev n I < x \\<and> x < n)", "by (clarsimp simp add: iprev_min_step)"], ["", "lemma min_step_iprev: \"\n  \\<lbrakk> x < y; x \\<in> I; y \\<in> I; \\<And>k. \\<lbrakk> x < k; k < y \\<rbrakk> \\<Longrightarrow> k \\<notin> I \\<rbrakk> \\<Longrightarrow>\n  iprev y I = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k.\n        \\<lbrakk>x < k; k < y\\<rbrakk>\n        \\<Longrightarrow> k \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev y I = x", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     iprev y I \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: nat_neq_iff, elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     iprev y I < x\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     x < iprev y I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add: iprev_min_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<And>k. \\<lbrakk>x < k; k < y\\<rbrakk> \\<Longrightarrow> k \\<notin> I;\n     x < iprev y I\\<rbrakk>\n    \\<Longrightarrow> False", "apply (blast dest: iprev_closed iprev_mono2 iprev_min_step)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary min_step_iprev2[rule_format]: \"\n  \\<lbrakk> x < y; x \\<in> I; y \\<in> I; \\<not>(\\<exists>k \\<in> I. x < k \\<and> k < y) \\<rbrakk> \\<Longrightarrow>\n  iprev y I = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; x \\<in> I; y \\<in> I;\n     \\<not> (\\<exists>k\\<in>I. x < k \\<and> k < y)\\<rbrakk>\n    \\<Longrightarrow> iprev y I = x", "by (blast intro: min_step_iprev)"], ["", "lemma between_empty_imp_iprev_eq: \"\n  \\<lbrakk> n \\<in> A; iprev n A < n; n \\<in> B; iprev n A \\<in> B; B \\<down>> (iprev n A) \\<down>< n = {} \\<rbrakk> \\<Longrightarrow>\n  iprev n B = iprev n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> A; iprev n A < n; n \\<in> B; iprev n A \\<in> B;\n     B \\<down>> iprev n A \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n B = iprev n A", "by (blast intro: min_step_iprev2)"], ["", "lemma iprev_le_mono: \"\\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> iprev a I \\<le> iprev b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev a I \\<le> iprev b I", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> iprev a I \\<le> iprev b I\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; a = b\\<rbrakk>\n    \\<Longrightarrow> iprev a I \\<le> iprev b I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a = b\\<rbrakk>\n    \\<Longrightarrow> iprev a I \\<le> iprev b I\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> iprev a I \\<le> iprev b I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> iprev a I \\<le> iprev b I", "apply (rule order_trans[OF iprev_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b\\<rbrakk>\n    \\<Longrightarrow> a \\<le> iprev b I", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; a < b; iprev b I < a\\<rbrakk>\n    \\<Longrightarrow> False", "by (blast dest: iprev_min_step)"], ["", "lemma iprev_less_mono: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a \\<rbrakk> \\<Longrightarrow> iprev a I < iprev b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a\\<rbrakk>\n    \\<Longrightarrow> iprev a I < iprev b I", "apply (rule less_le_trans[of _ a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a\\<rbrakk>\n    \\<Longrightarrow> iprev a I < a\n 2. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> iprev b I", "apply (blast intro: iprev_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> iprev b I", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<exists>x\\<in>I. x < a;\n     iprev b I < a\\<rbrakk>\n    \\<Longrightarrow> False", "by (blast dest: iprev_min_step)"], ["", "lemma iprev_less_mono_if_neq_iMin: \"\n  \\<lbrakk> a < b; a \\<in> I; b \\<in> I; iMin I \\<noteq> a \\<rbrakk> \\<Longrightarrow> iprev a I < iprev b I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a \\<in> I; b \\<in> I; iMin I \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> iprev a I < iprev b I", "by (metis iprev_in_iff iprev_less_mono iprev_mono2_if_neq_iMin)"], ["", "lemma iprev_le_mono_rev: \"\n  \\<lbrakk> iprev a I \\<le> iprev b I; a \\<in> I; b \\<in> I; iMin I \\<noteq> iprev b I \\<rbrakk> \\<Longrightarrow> a \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev a I \\<le> iprev b I; a \\<in> I; b \\<in> I;\n     iMin I \\<noteq> iprev b I\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev a I \\<le> iprev b I; a \\<in> I; b \\<in> I;\n     iMin I \\<noteq> iprev b I; b < a\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis iprev_fix_iff iprev_less_mono_if_neq_iMin less_le_not_le)"], ["", "lemma iprev_less_mono_rev: \"\n  \\<lbrakk> iprev a I < iprev b I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> a < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev a I < iprev b I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> a < b", "apply (rule ccontr, simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev a I < iprev b I; a \\<in> I; b \\<in> I; b \\<le> a\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis iprev_le_mono less_le_not_le)"], ["", "lemma set_restriction_inext_eq: \"\n  \\<lbrakk> set_restriction interval_fun; n \\<in> interval_fun I; inext n I \\<in> interval_fun I \\<rbrakk> \\<Longrightarrow>\n  inext n (interval_fun I) = inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (subgoal_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (blast intro: set_restriction_in_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (case_tac \"inext n I = n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I; inext n I = n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     n \\<in> I; inext n I = n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = n\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (frule inext_fix_iff[THEN iffD2], clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (interval_fun I) = Max I\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (frule set_restriction_finite, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I;\n     finite (interval_fun I)\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (interval_fun I) = Max I\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (subgoal_tac \"Max (interval_fun I) = Max I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I;\n     finite (interval_fun I); Max (interval_fun I) = Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (interval_fun I) = Max I\n 2. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I;\n     finite (interval_fun I)\\<rbrakk>\n    \\<Longrightarrow> Max (interval_fun I) = Max I\n 3. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I;\n     finite (interval_fun I)\\<rbrakk>\n    \\<Longrightarrow> Max (interval_fun I) = Max I\n 2. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I;\n     finite (interval_fun I); Max (interval_fun I) = Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (interval_fun I) = Max I\n 3. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (blast intro: Max_equality Max_ge set_restriction_in_imp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; Max I \\<in> interval_fun I;\n     Max I \\<in> I; inext (Max I) I = Max I; finite I; n = Max I;\n     finite (interval_fun I); Max (interval_fun I) = Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (interval_fun I) = Max I\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (blast intro: inext_fix_iff[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I;\n     inext n I \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (drule le_neq_implies_less[OF inext_mono, OF not_sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I; n < inext n I\\<rbrakk>\n    \\<Longrightarrow> inext n (interval_fun I) = inext n I", "apply (rule between_empty_imp_inext_eq, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I; n < inext n I\\<rbrakk>\n    \\<Longrightarrow> interval_fun I \\<down>> n \\<down>< inext n I = {}", "apply (simp add: not_ex_in_conv[symmetric] i_cut_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<in> I; n < inext n I\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x>n.\n                         x \\<in> interval_fun I \\<longrightarrow>\n                         \\<not> x < inext n I", "by (metis inext_min_step2 set_restriction_in_imp)"], ["", "lemma set_restriction_inext_singleton_eq: \"\n  \\<lbrakk> set_restriction interval_fun; n \\<in> interval_fun I; inext n I \\<in> interval_fun I \\<rbrakk> \\<Longrightarrow>\n  {inext n (interval_fun I)} = interval_fun {inext n I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I\\<rbrakk>\n    \\<Longrightarrow> {inext n (interval_fun I)} = interval_fun {inext n I}", "apply (case_tac \"n \\<notin> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> {inext n (interval_fun I)} = interval_fun {inext n I}\n 2. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> {inext n (interval_fun I)} = interval_fun {inext n I}", "apply (blast dest: set_restriction_not_in_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n     inext n I \\<in> interval_fun I; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> {inext n (interval_fun I)} = interval_fun {inext n I}", "apply (frule set_restrictionD, erule exE, rename_tac P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>set_restriction interval_fun; n \\<in> interval_fun I;\n        inext n I \\<in> interval_fun I; \\<not> n \\<notin> I;\n        \\<forall>A. interval_fun A = {x \\<in> A. P x}\\<rbrakk>\n       \\<Longrightarrow> {inext n (interval_fun I)} =\n                         interval_fun {inext n I}", "apply (simp add: singleton_iff set_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>set_restriction interval_fun; n \\<in> I \\<and> P n;\n        inext n I \\<in> I \\<and> P (inext n I);\n        \\<forall>A x.\n           (x \\<in> interval_fun A) = (x \\<in> A \\<and> P x)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            (x = inext n (interval_fun I)) =\n                            (x = inext n I \\<and> P x)", "by (metis set_restriction_inext_eq)"], ["", "lemma inext_iprev: \"iMin I \\<noteq> n \\<Longrightarrow> inext (iprev n I) I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin I \\<noteq> n \\<Longrightarrow> inext (iprev n I) I = n", "apply (case_tac \"n \\<notin> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iMin I \\<noteq> n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (iprev n I) I = n\n 2. \\<lbrakk>iMin I \\<noteq> n; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (iprev n I) I = n", "apply (simp add: inext_def iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iMin I \\<noteq> n; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (iprev n I) I = n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iMin I \\<noteq> n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext (iprev n I) I = n", "apply (frule iMin_neq_imp_greater[OF _ not_sym], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iMin I \\<noteq> n; n \\<in> I; iMin I < n\\<rbrakk>\n    \\<Longrightarrow> inext (iprev n I) I = n", "apply (blast dest: iMinI iprev_min_step intro: min_step_inext iprev_mono2 iprev_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_inext_infin: \"infinite I \\<Longrightarrow> iprev (inext n I) I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> iprev (inext n I) I = n", "apply (case_tac \"n \\<notin> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n\n 2. \\<lbrakk>infinite I; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "apply (simp add: inext_def iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "by (metis inext_in_iff inext_min_step2 inext_mono2_infin_fin min_step_iprev2)"], ["", "lemma iprev_inext_fin: \"\n  \\<lbrakk> finite I; n \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> iprev (inext n I) I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "apply (case_tac \"n \\<notin> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<noteq> Max I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n\n 2. \\<lbrakk>finite I; n \\<noteq> Max I; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "apply (simp add: inext_def iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<noteq> Max I; \\<not> n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<noteq> Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (inext n I) I = n", "by (metis inext_in_iff inext_min_step2 inext_mono2_infin_fin min_step_iprev2)"], ["", "lemma iprev_inext: \"\n  n \\<noteq> Max I \\<or> infinite I \\<Longrightarrow> iprev (inext n I) I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> Max I \\<or> infinite I \\<Longrightarrow>\n    iprev (inext n I) I = n", "by (blast intro: iprev_inext_infin iprev_inext_fin)"], ["", "lemma inext_eq_infin: \"\n  \\<lbrakk> inext a I = inext b I; infinite I \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I = inext b I; infinite I\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (drule arg_cong[where f=\"\\<lambda>x. iprev x I\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; iprev (inext a I) I = iprev (inext b I) I\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add: iprev_inext_infin)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_eq_fin: \"\n  \\<lbrakk> inext a I = inext b I; finite I; a \\<noteq> Max I; b \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I = inext b I; finite I; a \\<noteq> Max I;\n     b \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (drule arg_cong[where f=\"\\<lambda>x. iprev x I\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<noteq> Max I; b \\<noteq> Max I;\n     iprev (inext a I) I = iprev (inext b I) I\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add: iprev_inext_fin)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_eq_infin_fin: \"\n  \\<lbrakk> inext a I = inext b I; a \\<noteq> Max I \\<and> b \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I = inext b I;\n     a \\<noteq> Max I \\<and> b \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> a = b", "by (blast intro: inext_eq_fin inext_eq_infin)+"], ["", "lemma inext_eq: \"\n  \\<lbrakk> inext a I = inext b I; \\<exists>x\\<in>I. a < x; \\<exists>x\\<in>I. b < x \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext a I = inext b I; \\<exists>x\\<in>I. a < x;\n     \\<exists>x\\<in>I. b < x\\<rbrakk>\n    \\<Longrightarrow> a = b", "by (metis iprev_inext not_le wellorder_Max_lemma)"], ["", "lemma iprev_eq_if_neq_iMin: \"\n  \\<lbrakk> iprev a I = iprev b I; iMin I \\<noteq> a; iMin I \\<noteq> b \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev a I = iprev b I; iMin I \\<noteq> a;\n     iMin I \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (drule arg_cong[where f=\"\\<lambda>x. inext x I\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iMin I \\<noteq> a; iMin I \\<noteq> b;\n     inext (iprev a I) I = inext (iprev b I) I\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add: inext_iprev)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_eq: \"\n  \\<lbrakk> iprev a I = iprev b I; \\<exists>x\\<in>I. x < a; \\<exists>x\\<in>I. x < b \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev a I = iprev b I; \\<exists>x\\<in>I. x < a;\n     \\<exists>x\\<in>I. x < b\\<rbrakk>\n    \\<Longrightarrow> a = b", "by (metis iprev_eq_if_neq_iMin not_less_iMin)"], ["", "lemma greater_imp_iprev_ge: \"\\<lbrakk> b < a; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> b \\<le> iprev a I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b < a; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> b \\<le> iprev a I", "apply (rule ccontr, simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b < a; a \\<in> I; b \\<in> I; iprev a I < b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (blast dest: iprev_min_step)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_cut_less_conv: \"inext n I < t \\<Longrightarrow> inext n (I \\<down>< t) = inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext n I < t \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (frule le_less_trans[OF inext_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext n I < t; n < t\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inext n I < t; n < t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I\n 2. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (simp add: inext_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n) else n)\n             < t;\n     n < t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (n \\<in> I \\<down>< t \\<and>\n                       I \\<down>< t \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                        iMin (I \\<down>< t \\<down>> n) =\n                        iMin (I \\<down>> n)) \\<and>\n                       (I \\<down>> n = {} \\<longrightarrow>\n                        iMin (I \\<down>< t \\<down>> n) = n)) \\<and>\n                      ((n \\<in> I \\<down>< t \\<longrightarrow>\n                        I \\<down>< t \\<down>> n = {}) \\<longrightarrow>\n                       I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 2. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (simp add: i_cut_commute_disj[of \"(\\<down><)\" \"(\\<down>>)\"] cut_less_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n) else n)\n             < t;\n     n < t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<down>< t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                        iMin (I \\<down>> n \\<down>< t) =\n                        iMin (I \\<down>> n)) \\<and>\n                       (I \\<down>> n = {} \\<longrightarrow>\n                        iMin ({} \\<down>< t) = n)) \\<and>\n                      (I \\<down>> n \\<down>< t = {} \\<longrightarrow>\n                       I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 2. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (case_tac \"I \\<down>> n \\<noteq> {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(if I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n) else n)\n             < t;\n     n < t; n \\<in> I; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<down>< t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                        iMin (I \\<down>> n \\<down>< t) =\n                        iMin (I \\<down>> n)) \\<and>\n                       (I \\<down>> n = {} \\<longrightarrow>\n                        iMin ({} \\<down>< t) = n)) \\<and>\n                      (I \\<down>> n \\<down>< t = {} \\<longrightarrow>\n                       I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 2. \\<lbrakk>(if I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n) else n)\n             < t;\n     n < t; n \\<in> I; \\<not> I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<down>< t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                        iMin (I \\<down>> n \\<down>< t) =\n                        iMin (I \\<down>> n)) \\<and>\n                       (I \\<down>> n = {} \\<longrightarrow>\n                        iMin ({} \\<down>< t) = n)) \\<and>\n                      (I \\<down>> n \\<down>< t = {} \\<longrightarrow>\n                       I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 3. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>iMin (I \\<down>> n) < t; n < t; n \\<in> I;\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<down>< t \\<noteq> {} \\<longrightarrow>\n                       iMin (I \\<down>> n \\<down>< t) =\n                       iMin (I \\<down>> n)) \\<and>\n                      (I \\<down>> n \\<down>< t = {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 2. \\<lbrakk>(if I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n) else n)\n             < t;\n     n < t; n \\<in> I; \\<not> I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<down>< t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                        iMin (I \\<down>> n \\<down>< t) =\n                        iMin (I \\<down>> n)) \\<and>\n                       (I \\<down>> n = {} \\<longrightarrow>\n                        iMin ({} \\<down>< t) = n)) \\<and>\n                      (I \\<down>> n \\<down>< t = {} \\<longrightarrow>\n                       I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 3. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (metis cut_less_Min_eq cut_less_Min_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if I \\<down>> n \\<noteq> {} then iMin (I \\<down>> n) else n)\n             < t;\n     n < t; n \\<in> I; \\<not> I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<down>< t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                        iMin (I \\<down>> n \\<down>< t) =\n                        iMin (I \\<down>> n)) \\<and>\n                       (I \\<down>> n = {} \\<longrightarrow>\n                        iMin ({} \\<down>< t) = n)) \\<and>\n                      (I \\<down>> n \\<down>< t = {} \\<longrightarrow>\n                       I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       n = iMin (I \\<down>> n))\n 2. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (simp add: i_cut_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inext n I < t; n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = inext n I", "apply (simp add: not_in_inext_fix cut_less_not_in_imp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_cut_le_conv: \"inext n I \\<le> t \\<Longrightarrow> inext n (I \\<down>\\<le> t) = inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext n I \\<le> t \\<Longrightarrow>\n    inext n (I \\<down>\\<le> t) = inext n I", "by (simp add: nat_cut_le_less_conv inext_cut_less_conv)"], ["", "lemma inext_cut_greater_conv: \"t < n \\<Longrightarrow> inext n (I \\<down>> t) = inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < n \\<Longrightarrow> inext n (I \\<down>> t) = inext n I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>> t) = inext n I\n 2. \\<lbrakk>t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>> t) = inext n I", "apply (frule cut_greater_mem_iff[THEN iffD2, OF conjI], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < n; n \\<in> I; n \\<in> I \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>> t) = inext n I\n 2. \\<lbrakk>t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>> t) = inext n I", "apply (simp add: inext_def i_cut_commute_disj[of \"(\\<down>>)\" \"(\\<down>>)\"] cut_cut_greater max_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>> t) = inext n I", "apply (simp add: not_in_inext_fix cut_greater_not_in_imp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_cut_ge_conv: \"t \\<le> n \\<Longrightarrow> inext n (I \\<down>\\<ge> t) = inext n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> n \\<Longrightarrow> inext n (I \\<down>\\<ge> t) = inext n I", "apply (case_tac \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> n; t = 0\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>\\<ge> t) = inext n I\n 2. \\<lbrakk>t \\<le> n; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>\\<ge> t) = inext n I", "apply (simp add: cut_ge_0_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<le> n; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>\\<ge> t) = inext n I", "apply (simp add: nat_cut_greater_ge_conv[symmetric] inext_cut_greater_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas inext_cut_conv =\n  inext_cut_less_conv inext_cut_le_conv\n  inext_cut_greater_conv inext_cut_ge_conv"], ["", "lemma iprev_cut_greater_conv: \"t < iprev n I \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < iprev n I \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (frule less_le_trans[OF _ iprev_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t < iprev n I; t < n\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < iprev n I; t < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I\n 2. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (simp add: iprev_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < (if I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n                  else n);\n     t < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (n \\<in> I \\<down>> t \\<and>\n                       I \\<down>> t \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                        Max (I \\<down>> t \\<down>< n) =\n                        Max (I \\<down>< n)) \\<and>\n                       (I \\<down>< n = {} \\<longrightarrow>\n                        Max (I \\<down>> t \\<down>< n) = n)) \\<and>\n                      ((n \\<in> I \\<down>> t \\<longrightarrow>\n                        I \\<down>> t \\<down>< n = {}) \\<longrightarrow>\n                       I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 2. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (simp add: i_cut_commute_disj[of \"(\\<down>>)\" \"(\\<down><)\"] cut_greater_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < (if I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n                  else n);\n     t < n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<down>> t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                        Max (I \\<down>< n \\<down>> t) =\n                        Max (I \\<down>< n)) \\<and>\n                       (I \\<down>< n = {} \\<longrightarrow>\n                        Max ({} \\<down>> t) = n)) \\<and>\n                      (I \\<down>< n \\<down>> t = {} \\<longrightarrow>\n                       I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 2. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (case_tac \"I \\<down>< n \\<noteq> {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t < (if I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n                  else n);\n     t < n; n \\<in> I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<down>> t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                        Max (I \\<down>< n \\<down>> t) =\n                        Max (I \\<down>< n)) \\<and>\n                       (I \\<down>< n = {} \\<longrightarrow>\n                        Max ({} \\<down>> t) = n)) \\<and>\n                      (I \\<down>< n \\<down>> t = {} \\<longrightarrow>\n                       I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 2. \\<lbrakk>t < (if I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n                  else n);\n     t < n; n \\<in> I; \\<not> I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<down>> t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                        Max (I \\<down>< n \\<down>> t) =\n                        Max (I \\<down>< n)) \\<and>\n                       (I \\<down>< n = {} \\<longrightarrow>\n                        Max ({} \\<down>> t) = n)) \\<and>\n                      (I \\<down>< n \\<down>> t = {} \\<longrightarrow>\n                       I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 3. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t < Max (I \\<down>< n); t < n; n \\<in> I;\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<down>> t \\<noteq> {} \\<longrightarrow>\n                       Max (I \\<down>< n \\<down>> t) =\n                       Max (I \\<down>< n)) \\<and>\n                      (I \\<down>< n \\<down>> t = {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 2. \\<lbrakk>t < (if I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n                  else n);\n     t < n; n \\<in> I; \\<not> I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<down>> t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                        Max (I \\<down>< n \\<down>> t) =\n                        Max (I \\<down>< n)) \\<and>\n                       (I \\<down>< n = {} \\<longrightarrow>\n                        Max ({} \\<down>> t) = n)) \\<and>\n                      (I \\<down>< n \\<down>> t = {} \\<longrightarrow>\n                       I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 3. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (metis cut_greater_Max_eq cut_greater_Max_not_empty nat_cut_less_finite)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < (if I \\<down>< n \\<noteq> {} then Max (I \\<down>< n)\n                  else n);\n     t < n; n \\<in> I; \\<not> I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<down>> t \\<noteq> {} \\<longrightarrow>\n                       (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                        Max (I \\<down>< n \\<down>> t) =\n                        Max (I \\<down>< n)) \\<and>\n                       (I \\<down>< n = {} \\<longrightarrow>\n                        Max ({} \\<down>> t) = n)) \\<and>\n                      (I \\<down>< n \\<down>> t = {} \\<longrightarrow>\n                       I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       n = Max (I \\<down>< n))\n 2. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (simp add: i_cut_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t < iprev n I; t < n; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = iprev n I", "apply (simp add: not_in_iprev_fix cut_greater_not_in_imp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_cut_ge_conv: \"t \\<le> iprev n I \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = iprev n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> iprev n I \\<Longrightarrow>\n    iprev n (I \\<down>\\<ge> t) = iprev n I", "apply (case_tac \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> iprev n I; t = 0\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = iprev n I\n 2. \\<lbrakk>t \\<le> iprev n I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = iprev n I", "apply (simp add: cut_ge_0_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<le> iprev n I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = iprev n I", "apply (simp add: nat_cut_greater_ge_conv[symmetric] iprev_cut_greater_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_cut_less_conv: \"n < t \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < t \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I\n 2. \\<lbrakk>n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I", "apply (frule cut_less_mem_iff[THEN iffD2, OF conjI], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < t; n \\<in> I; n \\<in> I \\<down>< t\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I\n 2. \\<lbrakk>n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I", "apply (simp add: iprev_def i_cut_commute_disj[of \"(\\<down><)\" \"(\\<down><)\"] cut_cut_less min_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>< t) = iprev n I", "apply (simp add: not_in_iprev_fix cut_less_not_in_imp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_cut_le_conv: \"n \\<le> t \\<Longrightarrow> iprev n (I \\<down>\\<le> t) = iprev n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> t \\<Longrightarrow> iprev n (I \\<down>\\<le> t) = iprev n I", "by (simp add: nat_cut_le_less_conv iprev_cut_less_conv)"], ["", "lemmas iprev_cut_conv =\n  iprev_cut_less_conv iprev_cut_le_conv\n  iprev_cut_greater_conv iprev_cut_ge_conv"], ["", "lemma inext_cut_less_fix: \"t \\<le> inext n I \\<Longrightarrow> inext n (I \\<down>< t) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> inext n I \\<Longrightarrow> inext n (I \\<down>< t) = n", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n\n 2. \\<lbrakk>t \\<le> inext n I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n", "apply (frule contra_subsetD[OF cut_less_subset[of _ t]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<notin> I;\n     n \\<notin> I \\<down>< t\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n", "apply (case_tac \"t \\<le> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I; t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n", "apply (metis cut_less_mem_iff not_in_inext_fix not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext n (I \\<down>< t) = n", "apply (rule_tac t=n and s=\"Max (I \\<down>< t)\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< t) = n\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext (Max (I \\<down>< t)) (I \\<down>< t) =\n                      Max (I \\<down>< t)", "apply (rule Max_equality[OF _ nat_cut_less_finite])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I \\<down>< t\n 2. \\<And>x.\n       \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n;\n        x \\<in> I \\<down>< t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> n\n 3. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext (Max (I \\<down>< t)) (I \\<down>< t) =\n                      Max (I \\<down>< t)", "apply (simp add: cut_less_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n;\n        x \\<in> I \\<down>< t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> n\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext (Max (I \\<down>< t)) (I \\<down>< t) =\n                      Max (I \\<down>< t)", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n;\n        x \\<in> I \\<down>< t; \\<not> x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext (Max (I \\<down>< t)) (I \\<down>< t) =\n                      Max (I \\<down>< t)", "apply (clarsimp simp: cut_less_mem_iff linorder_not_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<le> inext n I; n \\<in> I; n < x; x \\<in> I;\n        x < t\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext (Max (I \\<down>< t)) (I \\<down>< t) =\n                      Max (I \\<down>< t)", "apply (simp add: inext_min_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<le> inext n I; n \\<in> I; \\<not> t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> inext (Max (I \\<down>< t)) (I \\<down>< t) =\n                      Max (I \\<down>< t)", "apply (blast intro: inext_Max nat_cut_less_finite)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_cut_le_fix: \"t < inext n I \\<Longrightarrow> inext n (I \\<down>\\<le> t) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < inext n I \\<Longrightarrow> inext n (I \\<down>\\<le> t) = n", "by (simp add: nat_cut_le_less_conv inext_cut_less_fix)"], ["", "lemma iprev_cut_greater_fix: \"iprev n I \\<le> t \\<Longrightarrow> iprev n (I \\<down>> t) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I \\<le> t \\<Longrightarrow> iprev n (I \\<down>> t) = n", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n\n 2. \\<lbrakk>iprev n I \\<le> t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n\n 2. \\<lbrakk>iprev n I \\<le> t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n", "apply (frule contra_subsetD[OF cut_greater_subset[of _ t]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<notin> I;\n     n \\<notin> I \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n\n 2. \\<lbrakk>iprev n I \\<le> t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n", "apply (case_tac \"n \\<le> t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n\n 2. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n", "apply (metis cut_greater_mem_iff not_in_iprev_fix not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>> t) = n", "apply (rule_tac t=n and s=\"iMin (I \\<down>> t)\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iMin (I \\<down>> t) = n\n 2. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin (I \\<down>> t)) (I \\<down>> t) =\n                      iMin (I \\<down>> t)", "apply (rule iMin_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I \\<down>> t\n 2. \\<And>x.\n       \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t;\n        x \\<in> I \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> n \\<le> x\n 3. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin (I \\<down>> t)) (I \\<down>> t) =\n                      iMin (I \\<down>> t)", "apply (simp add: cut_greater_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t;\n        x \\<in> I \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> n \\<le> x\n 2. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin (I \\<down>> t)) (I \\<down>> t) =\n                      iMin (I \\<down>> t)", "apply (metis cut_greater_mem_iff iprev_min_step2 not_le_imp_less order_le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I \\<le> t; n \\<in> I; \\<not> n \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin (I \\<down>> t)) (I \\<down>> t) =\n                      iMin (I \\<down>> t)", "apply (rule iprev_iMin)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_cut_ge_fix: \"iprev n I < t \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev n I < t \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = n", "apply (case_tac \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iprev n I < t; t = 0\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = n\n 2. \\<lbrakk>iprev n I < t; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = n", "apply (simp add: cut_ge_0_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iprev n I < t; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> iprev n (I \\<down>\\<ge> t) = n", "apply (simp add: nat_cut_greater_ge_conv[symmetric] iprev_cut_greater_fix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  CommuteWithIntervalCut4 :: \"(('a::linorder) set \\<Rightarrow> 'a set) \\<Rightarrow> bool\"\nwhere\n  \"CommuteWithIntervalCut4 fun \\<equiv>\n  \\<forall>t fun2 I.\n  (fun2 = (\\<lambda>I. I \\<down>< t) \\<or> fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or> fun2 = (\\<lambda>I. I \\<down>> t) \\<or> fun2 = (\\<lambda>I. I \\<down>\\<ge> t) ) \\<longrightarrow>\n  fun (fun2 I) = fun2 (fun I)\""], ["", "definition CommuteWithIntervalCut2 :: \"(('a::linorder) set \\<Rightarrow> 'a set) \\<Rightarrow> bool\"\nwhere\n  \"CommuteWithIntervalCut2 fun \\<equiv>\n  \\<forall>t fun2 I.\n  (fun2 = (\\<lambda>I. I \\<down>< t) \\<or> fun2 = (\\<lambda>I. I \\<down>> t)) \\<longrightarrow>\n  fun (fun2 I) = fun2 (fun I)\""], ["", "lemma CommuteWithIntervalCut4_imp_2: \"CommuteWithIntervalCut4 fun \\<Longrightarrow> CommuteWithIntervalCut2 fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CommuteWithIntervalCut4 fun \\<Longrightarrow>\n    CommuteWithIntervalCut2 fun", "unfolding CommuteWithIntervalCut2_def CommuteWithIntervalCut4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<ge> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I) \\<Longrightarrow>\n    \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I)", "by blast"], ["", "lemma nat_CommuteWithIntervalCut2_4_eq: \"\n  CommuteWithIntervalCut4 (fun::nat set \\<Rightarrow> nat set) = CommuteWithIntervalCut2 fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CommuteWithIntervalCut4 fun = CommuteWithIntervalCut2 fun", "apply (unfold CommuteWithIntervalCut2_def CommuteWithIntervalCut4_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>t fun2 I.\n        fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t) \\<longrightarrow>\n        fun (fun2 I) = fun2 (fun I)) =\n    (\\<forall>t fun2 I.\n        fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n        fun (fun2 I) = fun2 (fun I))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<ge> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I) \\<Longrightarrow>\n    \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I)\n 2. \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I) \\<Longrightarrow>\n    \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<ge> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I) \\<Longrightarrow>\n    \\<forall>t fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<ge> t) \\<longrightarrow>\n       fun (fun2 I) = fun2 (fun I)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n                   fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                   fun (fun2 I) = fun2 (fun I);\n        fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (case_tac \"fun2 = (\\<lambda>I. I \\<down>< t)\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n                   fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                   fun (fun2 I) = fun2 (fun I);\n        fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (case_tac \"fun2 = (\\<lambda>I. I \\<down>> t)\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n                   fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                   fun (fun2 I) = fun2 (fun I);\n        fun2 = (\\<lambda>I. I \\<down>< t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<le> t) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<le> t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)\n 2. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (simp add: nat_cut_le_less_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t)\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (case_tac \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t); t = 0\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)\n 2. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t); t \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (simp add: cut_ge_0_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t fun2 I.\n       \\<lbrakk>\\<forall>t fun2 I.\n                   (fun2 = (\\<lambda>I. I \\<down>< t) \\<longrightarrow>\n                    fun (I \\<down>< t) = fun I \\<down>< t) \\<and>\n                   (fun2 = (\\<lambda>I. I \\<down>> t) \\<longrightarrow>\n                    fun (I \\<down>> t) = fun I \\<down>> t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>< t);\n        fun2 \\<noteq> (\\<lambda>I. I \\<down>> t);\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> t); t \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> fun (fun2 I) = fun2 (fun I)", "apply (simp add: nat_cut_greater_ge_conv[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  cut_less_CommuteWithIntervalCut4:    \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>< t)\" and\n  cut_le_CommuteWithIntervalCut4:      \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>\\<le> t)\" and\n  cut_greater_CommuteWithIntervalCut4: \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>> t)\" and\n  cut_ge_CommuteWithIntervalCut4:      \"CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>\\<ge> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>< t) &&&\n     CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>\\<le> t)) &&&\n    CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>> t) &&&\n    CommuteWithIntervalCut4 (\\<lambda>I. I \\<down>\\<ge> t)", "unfolding CommuteWithIntervalCut4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ta fun2 I.\n        fun2 = (\\<lambda>I. I \\<down>< ta) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<le> ta) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> ta) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> ta) \\<longrightarrow>\n        fun2 I \\<down>< t = fun2 (I \\<down>< t) &&&\n     \\<forall>ta fun2 I.\n        fun2 = (\\<lambda>I. I \\<down>< ta) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<le> ta) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>> ta) \\<or>\n        fun2 = (\\<lambda>I. I \\<down>\\<ge> ta) \\<longrightarrow>\n        fun2 I \\<down>\\<le> t = fun2 (I \\<down>\\<le> t)) &&&\n    \\<forall>ta fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< ta) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<le> ta) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> ta) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<ge> ta) \\<longrightarrow>\n       fun2 I \\<down>> t = fun2 (I \\<down>> t) &&&\n    \\<forall>ta fun2 I.\n       fun2 = (\\<lambda>I. I \\<down>< ta) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<le> ta) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>> ta) \\<or>\n       fun2 = (\\<lambda>I. I \\<down>\\<ge> ta) \\<longrightarrow>\n       fun2 I \\<down>\\<ge> t = fun2 (I \\<down>\\<ge> t)", "by (simp_all add: i_cut_commute_disj)"], ["", "lemmas i_cut_CommuteWithIntervalCut4 =\n  cut_less_CommuteWithIntervalCut4 cut_le_CommuteWithIntervalCut4\n  cut_greater_CommuteWithIntervalCut4 cut_ge_CommuteWithIntervalCut4"], ["", "lemma inext_image: \"\n  \\<lbrakk> n \\<in> I; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (case_tac \"\\<exists>x\\<in>I. n < x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (frule inext_mono2, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < inext n I\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (frule cut_greater_not_empty_iff[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < inext n I;\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (simp add: inext_def image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>> f n \\<noteq> {} \\<longrightarrow>\n                       iMin ((f ` I) \\<down>> f n) =\n                       f (iMin (I \\<down>> n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n))) \\<and>\n                      ((f ` I) \\<down>> f n = {} \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (subgoal_tac \"\\<exists>x\\<in>I. f n = f x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>> f n \\<noteq> {} \\<longrightarrow>\n                       iMin ((f ` I) \\<down>> f n) =\n                       f (iMin (I \\<down>> n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n))) \\<and>\n                      ((f ` I) \\<down>> f n = {} \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. f n = f x\n 3. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. f n = f x\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>> f n \\<noteq> {} \\<longrightarrow>\n                       iMin ((f ` I) \\<down>> f n) =\n                       f (iMin (I \\<down>> n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n))) \\<and>\n                      ((f ` I) \\<down>> f n = {} \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n)))\n 3. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>> f n \\<noteq> {} \\<longrightarrow>\n                       iMin ((f ` I) \\<down>> f n) =\n                       f (iMin (I \\<down>> n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n))) \\<and>\n                      ((f ` I) \\<down>> f n = {} \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (simp add: cut_greater_image)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. n < x; n < iMin (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> iMin (f ` I \\<down>> n) =\n                      f (iMin (I \\<down>> n)) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (iMin (I \\<down>> n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (blast intro: strict_mono_on_subset iMin_mono_on2 strict_mono_on_imp_mono_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. n < x)\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (drule strict_mono_on_imp_mono_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; \\<not> (\\<exists>x\\<in>I. n < x);\n     SetInterval2.mono_on f I\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (simp add: inext_all_le_fix linorder_not_less mono_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_image: \"\n  \\<lbrakk> n \\<in> I; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (case_tac \"\\<exists>x\\<in>I. x < n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (frule iprev_mono2, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; iprev n I < n\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (frule cut_less_not_empty_iff[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; iprev n I < n;\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (simp add: iprev_def image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>< f n \\<noteq> {} \\<longrightarrow>\n                       Max ((f ` I) \\<down>< f n) =\n                       f (Max (I \\<down>< n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n))) \\<and>\n                      ((f ` I) \\<down>< f n = {} \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (subgoal_tac \"\\<exists>x\\<in>I. f n = f x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>< f n \\<noteq> {} \\<longrightarrow>\n                       Max ((f ` I) \\<down>< f n) =\n                       f (Max (I \\<down>< n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n))) \\<and>\n                      ((f ` I) \\<down>< f n = {} \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. f n = f x\n 3. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. f n = f x\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>< f n \\<noteq> {} \\<longrightarrow>\n                       Max ((f ` I) \\<down>< f n) =\n                       f (Max (I \\<down>< n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n))) \\<and>\n                      ((f ` I) \\<down>< f n = {} \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n)))\n 3. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>I. f n = f x) \\<and>\n                       (f ` I) \\<down>< f n \\<noteq> {} \\<longrightarrow>\n                       Max ((f ` I) \\<down>< f n) =\n                       f (Max (I \\<down>< n))) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n))) \\<and>\n                      ((f ` I) \\<down>< f n = {} \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (simp add: cut_less_image)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<exists>x\\<in>I. x < n; Max (I \\<down>< n) < n;\n     I \\<down>< n \\<noteq> {}; \\<exists>x\\<in>I. f n = f x\\<rbrakk>\n    \\<Longrightarrow> Max (f ` I \\<down>< n) = f (Max (I \\<down>< n)) \\<and>\n                      ((\\<forall>x\\<in>I.\n                           f n \\<noteq> f x) \\<longrightarrow>\n                       f n = f (Max (I \\<down>< n)))\n 2. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (blast intro: strict_mono_on_subset Max_mono_on2 strict_mono_on_imp_mono_on nat_cut_less_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; SetInterval2.strict_mono_on f I;\n     \\<not> (\\<exists>x\\<in>I. x < n)\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (drule strict_mono_on_imp_mono_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> I; \\<not> (\\<exists>x\\<in>I. x < n);\n     SetInterval2.mono_on f I\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (simp add: iprev_all_ge_fix linorder_not_less mono_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_image2: \"\n  strict_mono f \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_mono f; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)\n 2. \\<lbrakk>strict_mono f; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (blast intro: strict_mono_imp_strict_mono_on inext_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_mono f; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (f n) (f ` I) = f (inext n I)", "apply (simp add: not_in_inext_fix inj_image_mem_iff strict_mono_imp_inj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_image2: \"\n  strict_mono f \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>strict_mono f; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)\n 2. \\<lbrakk>strict_mono f; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (blast intro: strict_mono_imp_strict_mono_on iprev_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strict_mono f; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (f n) (f ` I) = f (iprev n I)", "apply (simp add: not_in_iprev_fix inj_image_mem_iff strict_mono_imp_inj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_imirror_iprev_conv: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  inext (mirror_elem n I) (imirror I) = mirror_elem (iprev n I) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "apply (simp add: not_in_iprev_fix not_in_inext_fix imirror_mem_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "apply (frule in_imp_not_empty[of _ I])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "apply (frule in_imp_mirror_elem_in[of _ n], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "apply (simp add: inext_def iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)", "apply (case_tac \"n = iMin I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n = iMin I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)", "apply (simp add: cut_less_Min_empty mirror_elem_Min)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; iMin I \\<in> I; I \\<noteq> {}; Max I \\<in> imirror I;\n     n = iMin I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> Max I \\<noteq> {} \\<longrightarrow>\n                      iMin (imirror I \\<down>> Max I) = Max I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)", "apply (subst imirror_Max[symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; iMin I \\<in> I; I \\<noteq> {}; Max I \\<in> imirror I;\n     n = iMin I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> Max (imirror I) \\<noteq>\n                      {} \\<longrightarrow>\n                      iMin (imirror I \\<down>> Max I) = Max I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)", "apply (simp add: cut_greater_Max_empty imirror_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)", "apply (frule iMin_le[of n I])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I;\n     iMin I \\<le> n\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>> mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        iMin (imirror I \\<down>> mirror_elem n I) =\n                        mirror_elem (Max (I \\<down>< n)) I) \\<and>\n                       (imirror I \\<down>> mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (Max (I \\<down>< n)) I)) \\<and>\n                      (I \\<down>< n = {} \\<longrightarrow>\n                       imirror I \\<down>> mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       iMin (imirror I \\<down>> mirror_elem n I) =\n                       mirror_elem n I)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem (Max (I \\<down>< n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror I \\<down>> mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (Max (I \\<down>< n)) I\n 3. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n = {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_cut_greater')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror_bounds (I \\<down>< n) (iMin I) (Max I) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin\n                       (imirror_bounds (I \\<down>< n) (iMin I) (Max I)) =\n                      mirror_elem (Max (I \\<down>< n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror I \\<down>> mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (Max (I \\<down>< n)) I\n 3. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n = {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_bounds_iMin nat_cut_less_finite cut_less_Min_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror_bounds (I \\<down>< n) (iMin I) (Max I) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin I + Max I - Max (I \\<down>< n) =\n                      mirror_elem (Max (I \\<down>< n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror I \\<down>> mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (Max (I \\<down>< n)) I\n 3. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n = {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: mirror_elem_def nat_mirror_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror I \\<down>> mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (Max (I \\<down>< n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n = {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_cut_greater')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n \\<noteq> {};\n     imirror_bounds (I \\<down>< n) (iMin I) (Max I) = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (Max (I \\<down>< n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n = {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_bounds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> iMin I; iMin I \\<le> n;\n     I \\<down>< n = {};\n     imirror I \\<down>> mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I \\<down>> mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: cut_less_Min_not_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary inext_imirror_iprev_conv': \"\n  \\<lbrakk> finite I; n \\<in> I \\<rbrakk> \\<Longrightarrow>\n  inext (mirror_elem n I) (imirror I) = mirror_elem (iprev n I) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> inext (mirror_elem n I) (imirror I) =\n                      mirror_elem (iprev n I) I", "by (simp add: inext_imirror_iprev_conv trans_le_add2)"], ["", "lemma iprev_imirror_inext_conv: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  iprev (mirror_elem n I) (imirror I) = mirror_elem (inext n I) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "apply (simp add: not_in_iprev_fix not_in_inext_fix imirror_mem_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "apply (frule in_imp_not_empty[of _ I])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "apply (frule in_imp_mirror_elem_in[of _ n], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "apply (simp add: inext_def iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (case_tac \"n = Max I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n = Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (simp add: cut_greater_Max_empty mirror_elem_Max)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<in> imirror I;\n     n = Max I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< iMin I \\<noteq>\n                      {} \\<longrightarrow>\n                      Max (imirror I \\<down>< iMin I) = iMin I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (subst imirror_iMin[symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<in> imirror I;\n     n = Max I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< iMin (imirror I) \\<noteq>\n                      {} \\<longrightarrow>\n                      Max (imirror I \\<down>< iMin I) = iMin I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (simp add: cut_less_Min_empty imirror_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (frule Max_ge[of I n], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I;\n     n \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (drule le_neq_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I\\<rbrakk>\n    \\<Longrightarrow> (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       (imirror I \\<down>< mirror_elem n I \\<noteq>\n                        {} \\<longrightarrow>\n                        Max (imirror I \\<down>< mirror_elem n I) =\n                        mirror_elem (iMin (I \\<down>> n)) I) \\<and>\n                       (imirror I \\<down>< mirror_elem n I =\n                        {} \\<longrightarrow>\n                        mirror_elem n I =\n                        mirror_elem (iMin (I \\<down>> n)) I)) \\<and>\n                      (I \\<down>> n = {} \\<longrightarrow>\n                       imirror I \\<down>< mirror_elem n I \\<noteq>\n                       {} \\<longrightarrow>\n                       Max (imirror I \\<down>< mirror_elem n I) =\n                       mirror_elem n I)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n \\<noteq> {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem (iMin (I \\<down>> n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n \\<noteq> {};\n     imirror I \\<down>< mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (iMin (I \\<down>> n)) I\n 3. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n = {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_cut_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n < Max I; I \\<down>> n \\<noteq> {};\n     imirror_bounds (I \\<down>> n) (iMin I) (Max I) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror_bounds (I \\<down>> n) (iMin I) (Max I)) =\n                      mirror_elem (iMin (I \\<down>> n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n \\<noteq> {};\n     imirror I \\<down>< mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (iMin (I \\<down>> n)) I\n 3. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n = {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_bounds_Max cut_greater_finite cut_greater_Max_eq del: Max_le_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n < Max I; I \\<down>> n \\<noteq> {};\n     imirror_bounds (I \\<down>> n) (iMin I) (Max I) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin I + Max I - iMin (I \\<down>> n) =\n                      mirror_elem (iMin (I \\<down>> n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n \\<noteq> {};\n     imirror I \\<down>< mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (iMin (I \\<down>> n)) I\n 3. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n = {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: mirror_elem_def nat_mirror_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n \\<noteq> {};\n     imirror I \\<down>< mirror_elem n I = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (iMin (I \\<down>> n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n = {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_cut_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n < Max I; I \\<down>> n \\<noteq> {};\n     imirror_bounds (I \\<down>> n) (iMin I) (Max I) = {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I = mirror_elem (iMin (I \\<down>> n)) I\n 2. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n = {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: imirror_bounds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I; n \\<in> I; I \\<noteq> {};\n     mirror_elem n I \\<in> imirror I; n \\<noteq> Max I; n < Max I;\n     I \\<down>> n = {};\n     imirror I \\<down>< mirror_elem n I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I \\<down>< mirror_elem n I) =\n                      mirror_elem n I", "apply (simp add: cut_greater_Max_not_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_imirror_inext_conv': \"\n  \\<lbrakk> finite I; n \\<in> I \\<rbrakk> \\<Longrightarrow>\n  iprev (mirror_elem n I) (imirror I) = mirror_elem (inext n I) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> iprev (mirror_elem n I) (imirror I) =\n                      mirror_elem (inext n I) I", "by (simp add: iprev_imirror_inext_conv trans_le_add2)"], ["", "lemma inext_insert_ge_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; Max I \\<le> a \\<rbrakk> \\<Longrightarrow> inext (Max I) (insert a I) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> a\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (insert a I) = a", "apply (case_tac \"a = Max I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> a; a = Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (insert a I) = a\n 2. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> a;\n     a \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (insert a I) = a", "apply (simp add: insert_absorb inext_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> a;\n     a \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (insert a I) = a", "apply (drule le_neq_trans, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> Max I; Max I < a\\<rbrakk>\n    \\<Longrightarrow> inext (Max I) (insert a I) = a", "apply (rule min_step_inext2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> Max I; Max I < a\\<rbrakk>\n    \\<Longrightarrow> Max I < a\n 2. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> Max I; Max I < a\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> insert a I\n 3. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> Max I; Max I < a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> insert a I\n 4. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> Max I; Max I < a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>k\\<in>insert a I.\n                                 Max I < k \\<and> k < a)", "apply (simp, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> Max I; Max I < a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>k\\<in>insert a I.\n                                 Max I < k \\<and> k < a)", "apply (simp_all, blast?)"], ["proof (prove)\ngoal:\nNo subgoals!", "(* blast is optional for the case, that the last goal could be solved by the simplifier in a future version, making the blast command superfluous. *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_insert_le_iMin: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; a \\<le> iMin I \\<rbrakk> \\<Longrightarrow> iprev (iMin I) (insert a I) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<le> iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin I) (insert a I) = a", "apply (case_tac \"a = iMin I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<le> iMin I; a = iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin I) (insert a I) = a\n 2. \\<lbrakk>finite I; I \\<noteq> {}; a \\<le> iMin I;\n     a \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin I) (insert a I) = a", "apply (simp add: iMinI_ex2 insert_absorb iprev_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<le> iMin I;\n     a \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin I) (insert a I) = a", "apply (drule le_neq_trans, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> iMin I; a < iMin I\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin I) (insert a I) = a", "apply (rule min_step_iprev2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> iMin I; a < iMin I\\<rbrakk>\n    \\<Longrightarrow> a < iMin I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> iMin I; a < iMin I\\<rbrakk>\n    \\<Longrightarrow> a \\<in> insert a I\n 3. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> iMin I; a < iMin I\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<in> insert a I\n 4. \\<lbrakk>finite I; I \\<noteq> {}; a \\<noteq> iMin I; a < iMin I\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>k\\<in>insert a I.\n                                 a < k \\<and> k < iMin I)", "apply (simp_all add: iMin_Min_conv, blast?)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_less_le_iprev_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> iMin I \\<rbrakk> \\<Longrightarrow> I \\<down>< t = I \\<down>\\<le> (iprev t I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t = I \\<down>\\<le> iprev t I", "apply (unfold iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t =\n                      I \\<down>\\<le>\n                      (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n                       then Max (I \\<down>< t) else t)", "apply (rule set_eqI, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I; x < t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> (if t \\<in> I \\<and>\n                                     I \\<down>< t \\<noteq> {}\n                                  then Max (I \\<down>< t) else t)\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I;\n        x \\<le> (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n                 then Max (I \\<down>< t) else t)\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I;\n        x \\<le> (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n                 then Max (I \\<down>< t) else t)\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I;\n        x \\<le> (if I \\<down>< t \\<noteq> {} then Max (I \\<down>< t)\n                 else t)\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply (split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I;\n        I \\<down>< t \\<noteq> {}; x \\<le> Max (I \\<down>< t)\\<rbrakk>\n       \\<Longrightarrow> x < t\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I; I \\<down>< t = {};\n        x \\<le> t\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply (simp add: Max_ge_iff nat_cut_less_finite)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I;\n        I \\<down>< t \\<noteq> {};\n        \\<exists>a\\<in>I \\<down>< t. x \\<le> a\\<rbrakk>\n       \\<Longrightarrow> x < t\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I; I \\<down>< t = {};\n        x \\<le> t\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply (blast intro: le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I; I \\<down>< t = {};\n        x \\<le> t\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply (frule iMin_neq_imp_greater, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; t \\<noteq> iMin I; x \\<in> I; I \\<down>< t = {};\n        x \\<le> t; iMin I < t\\<rbrakk>\n       \\<Longrightarrow> x < t", "apply (blast intro: iMin_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma neq_Max_imp_inext_neq_iMin: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> inext t I \\<noteq> iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I; finite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (metis inext_mono2_infin_fin not_less_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (blast dest: inext_neq_iMin_infin)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary neq_Max_imp_inext_gr_iMin: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk> \\<Longrightarrow> iMin I < inext t I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < inext t I", "apply (frule neq_Max_imp_inext_neq_iMin[THEN not_sym], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     iMin I \\<noteq> inext t I\\<rbrakk>\n    \\<Longrightarrow> iMin I < inext t I", "apply (drule neq_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<le> inext t I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     iMin I < inext t I\\<rbrakk>\n    \\<Longrightarrow> iMin I < inext t I", "apply (blast dest: inext_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     iMin I < inext t I\\<rbrakk>\n    \\<Longrightarrow> iMin I < inext t I", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_le_less_inext_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk> \\<Longrightarrow> I \\<down>\\<le> t = I \\<down>< (inext t I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<le> t = I \\<down>< inext t I", "apply (cut_tac cut_less_le_iprev_conv[of \"inext t I\" I])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     I \\<down>< inext t I = I \\<down>\\<le> iprev (inext t I) I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<le> t = I \\<down>< inext t I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<in> I\n 3. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (cut_tac iprev_inext[of t I], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     I \\<down>< inext t I = I \\<down>\\<le> iprev (inext t I) I\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> Max I \\<or> infinite I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<in> I\n 3. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<in> I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (rule inext_closed, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (rule neq_Max_imp_inext_neq_iMin, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_ge_greater_iprev_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> iMin I \\<rbrakk> \\<Longrightarrow> I \\<down>\\<ge> t = I \\<down>> (iprev t I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> t = I \\<down>> iprev t I", "apply (frule iMin_neq_imp_greater, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; iMin I < t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> t = I \\<down>> iprev t I", "apply (unfold iprev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; iMin I < t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> t =\n                      I \\<down>>\n                      (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n                       then Max (I \\<down>< t) else t)", "apply (rule set_eqI, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I; t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n                          then Max (I \\<down>< t) else t)\n                         < x\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n         then Max (I \\<down>< t) else t)\n        < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply (simp add: i_cut_defs linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I; t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x.\n                             x \\<in> I \\<longrightarrow>\n                             t \\<le> x) \\<longrightarrow>\n                         t < x\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n         then Max (I \\<down>< t) else t)\n        < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply (drule iMinI, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        (if t \\<in> I \\<and> I \\<down>< t \\<noteq> {}\n         then Max (I \\<down>< t) else t)\n        < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply (split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I; t \\<in> I;\n        I \\<down>< t \\<noteq> {}; Max (I \\<down>< t) < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        \\<not> (t \\<in> I \\<and> I \\<down>< t \\<noteq> {}); t < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I; t \\<in> I;\n        I \\<down>< t \\<noteq> {}; Max (I \\<down>< t) < x;\n        \\<not> t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        \\<not> (t \\<in> I \\<and> I \\<down>< t \\<noteq> {}); t < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply (simp add: nat_cut_less_finite linorder_not_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>iMin I < t; x \\<in> I; t \\<in> I; I \\<down>< t \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< t. a < x; x < t\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        \\<not> (t \\<in> I \\<and> I \\<down>< t \\<noteq> {}); t < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> I; iMin I < t; x \\<in> I;\n        \\<not> (t \\<in> I \\<and> I \\<down>< t \\<noteq> {}); t < x\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_greater_ge_inext_conv: \"\n  \\<lbrakk> t \\<in> I; t \\<noteq> Max I \\<or> infinite I \\<rbrakk> \\<Longrightarrow> I \\<down>> t = I \\<down>\\<ge> (inext t I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>> t = I \\<down>\\<ge> inext t I", "apply (cut_tac cut_ge_greater_iprev_conv[of \"inext t I\" I])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     I \\<down>\\<ge> inext t I = I \\<down>> iprev (inext t I) I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>> t = I \\<down>\\<ge> inext t I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<in> I\n 3. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (cut_tac iprev_inext[of t I], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I;\n     I \\<down>\\<ge> inext t I = I \\<down>> iprev (inext t I) I\\<rbrakk>\n    \\<Longrightarrow> t \\<noteq> Max I \\<or> infinite I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<in> I\n 3. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<in> I\n 2. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (rule inext_closed, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> I; t \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> inext t I \\<noteq> iMin I", "apply (rule neq_Max_imp_inext_neq_iMin, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_append: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  inext n (A \\<union> B) = (if n \\<in> B then inext n B else (if n = Max A then iMin B else inext n A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (case_tac \"n \\<in> A \\<union> B\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<notin> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<notin> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (simp add: not_in_inext_fix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<notin> A \\<and> n \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> n = Max A \\<longrightarrow> Max A = iMin B\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (blast dest: Max_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (frule Max_less_iMin_imp_disjoint, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B; A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (drule Un_iff[THEN iffD1], elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (drule disjoint_iff_in_not_in1[THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A; \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> (n = Max A \\<longrightarrow>\n                       inext (Max A) (A \\<union> B) = iMin B) \\<and>\n                      (n \\<noteq> Max A \\<longrightarrow>\n                       inext n (A \\<union> B) = inext n A)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n = Max A\\<rbrakk>\n    \\<Longrightarrow> inext (Max A) (A \\<union> B) = iMin B\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n \\<noteq> Max A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n A\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (simp add: inext_def cut_greater_Un cut_greater_Max_empty cut_greater_Min_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n \\<noteq> Max A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (frule Max_neq_imp_less[of A], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (simp add: inext_def cut_greater_Un cut_greater_Min_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A\\<rbrakk>\n    \\<Longrightarrow> (A \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       iMin (A \\<down>> n \\<union> B) =\n                       iMin (A \\<down>> n)) \\<and>\n                      (A \\<down>> n = {} \\<longrightarrow> iMin B = n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (subgoal_tac \"A \\<down>> n \\<noteq> {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     A \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       iMin (A \\<down>> n \\<union> B) =\n                       iMin (A \\<down>> n)) \\<and>\n                      (A \\<down>> n = {} \\<longrightarrow> iMin B = n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>> n \\<noteq> {}\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>> n \\<noteq> {}\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     A \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       iMin (A \\<down>> n \\<union> B) =\n                       iMin (A \\<down>> n)) \\<and>\n                      (A \\<down>> n = {} \\<longrightarrow> iMin B = n)\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (simp add: cut_greater_not_empty_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. n < x\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     A \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       iMin (A \\<down>> n \\<union> B) =\n                       iMin (A \\<down>> n)) \\<and>\n                      (A \\<down>> n = {} \\<longrightarrow> iMin B = n)\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (blast intro: Max_in)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     A \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<down>> n \\<noteq> {} \\<longrightarrow>\n                       iMin (A \\<down>> n \\<union> B) =\n                       iMin (A \\<down>> n)) \\<and>\n                      (A \\<down>> n = {} \\<longrightarrow> iMin B = n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (simp add: iMin_Un)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     A \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> min (iMin (A \\<down>> n)) (iMin B) =\n                      iMin (A \\<down>> n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (drule iMin_in[THEN cut_greater_in_imp])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     iMin (A \\<down>> n) \\<in> A\\<rbrakk>\n    \\<Longrightarrow> min (iMin (A \\<down>> n)) (iMin B) =\n                      iMin (A \\<down>> n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (rule min_eqL)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     iMin (A \\<down>> n) \\<in> A\\<rbrakk>\n    \\<Longrightarrow> iMin (A \\<down>> n) \\<le> iMin B\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (rule less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; n < Max A;\n     iMin (A \\<down>> n) \\<in> A\\<rbrakk>\n    \\<Longrightarrow> iMin (A \\<down>> n) < iMin B\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply (drule disjoint_iff_in_not_in2[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> B; \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) =\n                      (if n \\<in> B then inext n B\n                       else if n = Max A then iMin B else inext n A)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n B", "apply (subgoal_tac \"A \\<down>> n = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; A \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n B\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>> n = {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>> n = {}\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; A \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n B", "apply (simp add: cut_greater_empty_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. x \\<le> n\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; A \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n B", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; A \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n B", "apply (simp add: inext_def cut_greater_Un)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary inext_append_eq1: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B; n \\<in> A; n \\<noteq> Max A \\<rbrakk> \\<Longrightarrow>\n  inext n (A \\<union> B) = inext n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A; n \\<noteq> Max A\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n A", "apply (frule Max_less_iMin_imp_disjoint, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A; n \\<noteq> Max A; A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n A", "apply (drule disjoint_iff_in_not_in1[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A; n \\<noteq> Max A; \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n A", "apply (simp add: inext_append Max_less_iMin_imp_disjoint)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary inext_append_eq2: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B; n \\<in> B \\<rbrakk> \\<Longrightarrow>\n  inext n (A \\<union> B) = inext n B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> inext n (A \\<union> B) = inext n B", "by (simp add: inext_append)"], ["", "corollary inext_append_eq3: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  inext (Max A) (A \\<union> B) = iMin B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> inext (Max A) (A \\<union> B) = iMin B", "by (simp add: inext_append not_less_iMin)"], ["", "lemma iprev_append: \"\\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  iprev n (A \\<union> B) = (if n \\<in> A then iprev n A else (if n = iMin B then Max A else iprev n B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (case_tac \"n \\<in> A \\<union> B\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<notin> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<notin> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (simp add: not_in_iprev_fix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<notin> A \\<and> n \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> n = iMin B \\<longrightarrow> iMin B = Max A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (blast intro: iMin_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (frule Max_less_iMin_imp_disjoint, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A \\<union> B; A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (drule Un_iff[THEN iffD1], elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (drule disjoint_iff_in_not_in1[THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A; \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (subgoal_tac \"B \\<down>< n = {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; B \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> B \\<down>< n = {}\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> B \\<down>< n = {}\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; B \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n A\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (simp add: cut_less_empty_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>B. n \\<le> x\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; B \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n A\n 3. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> A;\n     \\<forall>x\\<in>A. x \\<notin> B; B \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (simp add: iprev_def cut_less_Un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     A \\<inter> B = {}; n \\<in> B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply (drule disjoint_iff_in_not_in2[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> B; \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) =\n                      (if n \\<in> A then iprev n A\n                       else if n = iMin B then Max A else iprev n B)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> (n = iMin B \\<longrightarrow>\n                       iprev (iMin B) (A \\<union> B) = Max A) \\<and>\n                      (n \\<noteq> iMin B \\<longrightarrow>\n                       iprev n (A \\<union> B) = iprev n B)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; n = iMin B\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin B) (A \\<union> B) = Max A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; n \\<noteq> iMin B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n B", "apply (simp add: iprev_def cut_less_Un cut_less_Min_empty cut_less_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; n \\<noteq> iMin B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n B", "apply (frule iMin_neq_imp_greater[of _ B], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n B", "apply (simp add: iprev_def cut_less_Un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply (subgoal_tac \"A \\<down>< n = A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n = A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n = A\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply (simp add: cut_less_all_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. x < n\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply (subgoal_tac \"B \\<down>< n \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> B \\<down>< n \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> B \\<down>< n \\<noteq> {}\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply (simp add: cut_less_not_empty_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>B. x < n\n 2. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply (blast intro: iMin_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< n \\<noteq> {} \\<longrightarrow>\n                      (B \\<down>< n \\<noteq> {} \\<longrightarrow>\n                       Max (A \\<down>< n \\<union> B \\<down>< n) =\n                       Max (B \\<down>< n)) \\<and>\n                      (B \\<down>< n = {} \\<longrightarrow>\n                       Max (A \\<down>< n) = n)", "apply (simp add: Max_Un nat_cut_less_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> max (Max A) (Max (B \\<down>< n)) = Max (B \\<down>< n)", "apply (rule max_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max A \\<le> Max (B \\<down>< n)", "apply (rule less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     B \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max A < Max (B \\<down>< n)", "apply (drule Max_in[OF nat_cut_less_finite, THEN cut_less_in_imp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {};\n     \\<forall>a\\<in>A. a < iMin B; n \\<in> B;\n     \\<forall>x\\<in>B. x \\<notin> A; iMin B < n; A \\<down>< n = A;\n     Max (B \\<down>< n) \\<in> B\\<rbrakk>\n    \\<Longrightarrow> Max A < Max (B \\<down>< n)", "apply (blast intro: iMin_le Max_in order_less_le_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_append_eq1: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  iprev n (A \\<union> B) = iprev n A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n A", "by (simp add: iprev_append)"], ["", "corollary iprev_append_eq2: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B; n \\<in> B; n \\<noteq> iMin B \\<rbrakk> \\<Longrightarrow>\n  iprev n (A \\<union> B) = iprev n B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> B; n \\<noteq> iMin B\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n B", "apply (frule Max_less_iMin_imp_disjoint, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> B; n \\<noteq> iMin B; A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n B", "apply (drule disjoint_iff_in_not_in2[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     n \\<in> B; n \\<noteq> iMin B; \\<forall>x\\<in>B. x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> iprev n (A \\<union> B) = iprev n B", "apply (simp add: iprev_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_append_eq3: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  iprev (iMin B) (A \\<union> B) = Max A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> iprev (iMin B) (A \\<union> B) = Max A", "by (simp add: iprev_append not_greater_Max[of _ \"iMin B\"])"], ["", "lemma inext_predicate_change_exists_aux: \"\\<And>a.\n  \\<lbrakk> c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I; b \\<in> I; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n \\<in> (I \\<down>\\<ge> a \\<down>< b). \\<not> P n \\<and> P (inext n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (subgoal_tac \"0 < c\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b\\<rbrakk>\n       \\<Longrightarrow> 0 < c", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b\\<rbrakk>\n       \\<Longrightarrow> 0 < c\n 2. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<not> P a; P b;\n        c = card (I \\<down>\\<ge> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> 0 < card (I \\<down>\\<ge> a \\<down>< b)\n 2. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (rule_tac x=a in not_empty_card_gr0_conv[OF nat_cut_less_finite, THEN iffD1, OF in_imp_not_empty, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a < b; a \\<in> I; b \\<in> I; \\<not> P a; P b;\n        c = card (I \\<down>\\<ge> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> a \\<in> I \\<down>\\<ge> a \\<down>< b\n 2. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: i_cut_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (induct c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (subgoal_tac \"a < inext a I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c\\<rbrakk>\n       \\<Longrightarrow> a < inext a I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c\\<rbrakk>\n       \\<Longrightarrow> a < inext a I\n 2. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (blast intro: inext_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n                    a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n\n        \\<in>I \\<down>\\<ge> a \\<down>< b.\n  \\<not> P n \\<and> P (inext n I);\n        Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b; a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (drule_tac x=\"inext a I\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (frule less_imp_inext_le[of _ b I], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (case_tac \"inext a I < b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; \\<not> inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; \\<not> inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (subgoal_tac \"I \\<down>\\<ge> a \\<down>< b = {a}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> a \\<down>< b = {a}\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> a \\<down>< b = {a}\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: set_eq_iff i_cut_mem_iff, clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> I \\<and> a \\<le> x \\<and> x < inext a I) =\n                         (x = a)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (rule iffI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I;\n        x \\<in> I \\<and> a \\<le> x \\<and> x < inext a I\\<rbrakk>\n       \\<Longrightarrow> x = a\n 2. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I; x = a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I \\<and> a \\<le> x \\<and> x < inext a I\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 4. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I; x = a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I \\<and> a \\<le> x \\<and> x < inext a I\n 2. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I;\n        x \\<in> I \\<and> a \\<le> x \\<and> x < inext a I\\<rbrakk>\n       \\<Longrightarrow> x = a\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 4. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I;\n        x \\<in> I \\<and> a \\<le> x \\<and> x < inext a I\\<rbrakk>\n       \\<Longrightarrow> x = a\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I; x \\<in> I; a \\<le> x;\n        x < inext a I\\<rbrakk>\n       \\<Longrightarrow> x = a\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (case_tac \"a < x\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I; x \\<in> I; a \\<le> x; x < inext a I;\n        a < x\\<rbrakk>\n       \\<Longrightarrow> x = a\n 2. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I; x \\<in> I; a \\<le> x; x < inext a I;\n        \\<not> a < x\\<rbrakk>\n       \\<Longrightarrow> x = a\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 4. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: inext_min_step)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a x.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< inext a I);\n        a \\<in> I; inext a I \\<in> I; \\<not> P a; P (inext a I);\n        a < inext a I; b = inext a I; x \\<in> I; a \\<le> x; x < inext a I;\n        \\<not> a < x\\<rbrakk>\n       \\<Longrightarrow> x = a\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < b; inext a I = b;\n        I \\<down>\\<ge> a \\<down>< b = {a}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a < b;\n        a \\<in> I; b \\<in> I; \\<not> P a; P b; 0 < Suc c; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I < b; inext a I \\<in> I; b \\<in> I; \\<not> P (inext a I);\n         P b; 0 < c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I \\<le> b; inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (subgoal_tac \"I \\<down>\\<ge> inext a I = I \\<down>> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> inext a I = I \\<down>> a", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> inext a I = I \\<down>> a\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (rule cut_greater_ge_inext_conv[symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> Max I \\<or> infinite I\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; finite I\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> Max I \\<or> infinite I\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; infinite I\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> Max I \\<or> infinite I\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp, rule less_imp_neq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; finite I\\<rbrakk>\n       \\<Longrightarrow> a < Max I\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; infinite I\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> Max I \\<or> infinite I\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: Max_gr_iff in_imp_not_empty)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; finite I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa\\<in>I. a < aa\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; infinite I\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> Max I \\<or> infinite I\n 3. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (blast intro: inext_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; infinite I\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> Max I \\<or> infinite I\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>\\<ge> inext a I \\<down>< b);\n         inext a I \\<in> I; \\<not> P (inext a I);\n         0 < card (I \\<down>\\<ge> inext a I \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> inext a I \\<down><\n   b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: inext_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (subgoal_tac \"a \\<notin> (I \\<down>> a \\<down>< b)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> a \\<notin> I \\<down>> a \\<down>< b", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> a \\<notin> I \\<down>> a \\<down>< b\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (subgoal_tac \"(I \\<down>\\<ge> a \\<down>< b) = insert a (I \\<down>> a \\<down>< b)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b =\n        insert a (I \\<down>> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> a \\<down>< b =\n                         insert a (I \\<down>> a \\<down>< b)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> a \\<down>< b =\n                         insert a (I \\<down>> a \\<down>< b)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b =\n        insert a (I \\<down>> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add:\n   i_cut_commute_disj[of \"(\\<down>\\<ge>)\" \"(\\<down><)\"] i_cut_commute_disj[of \"(\\<down>>)\" \"(\\<down><)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>< b \\<down>\\<ge> a); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>< b \\<down>> a); \\<not> P (inext a I);\n         0 < card (I \\<down>< b \\<down>> a)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>< b \\<down>> a.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>< b \\<down>> a\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< b \\<down>\\<ge> a =\n                         insert a (I \\<down>< b \\<down>> a)\n 2. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b =\n        insert a (I \\<down>> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: cut_ge_greater_conv_if i_cut_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>Suc c = card (I \\<down>\\<ge> a \\<down>< b); a \\<in> I;\n        b \\<in> I; \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>c = card (I \\<down>> a \\<down>< b); \\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b =\n        insert a (I \\<down>> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)", "apply (simp add: card_insert_disjoint[OF nat_cut_less_finite])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b =\n        insert a (I \\<down>> a \\<down>< b)\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply (case_tac \"P (inext a I)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        P (inext a I)\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))\n 2. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I)\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I)\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply (case_tac \"card (I \\<down>> a \\<down>< b) = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I); card (I \\<down>> a \\<down>< b) = 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))\n 2. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I);\n        card (I \\<down>> a \\<down>< b) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply (drule card_0_eq[OF nat_cut_less_finite, THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I); I \\<down>> a \\<down>< b = {}\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))\n 2. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I);\n        card (I \\<down>> a \\<down>< b) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply (simp add: cut_less_empty_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>c = 0; a \\<in> I; b \\<in> I; \\<not> P a; P b; a < inext a I;\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        I \\<down>\\<ge> a \\<down>< b = {a}; \\<not> P (inext a I);\n        \\<forall>x\\<in>I \\<down>> a. b \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I);\n        card (I \\<down>> a \\<down>< b) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply (drule_tac x=\"inext a I\" in bspec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>c = 0; a \\<in> I; b \\<in> I; \\<not> P a; P b; a < inext a I;\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        I \\<down>\\<ge> a \\<down>< b = {a}; \\<not> P (inext a I)\\<rbrakk>\n       \\<Longrightarrow> inext a I \\<in> I \\<down>> a\n 2. \\<And>c a.\n       \\<lbrakk>c = 0; a \\<in> I; b \\<in> I; \\<not> P a; P b; a < inext a I;\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        I \\<down>\\<ge> a \\<down>< b = {a}; \\<not> P (inext a I);\n        b \\<le> inext a I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 3. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I);\n        card (I \\<down>> a \\<down>< b) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply (blast intro: inext_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c a.\n       \\<lbrakk>c = 0; a \\<in> I; b \\<in> I; \\<not> P a; P b; a < inext a I;\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        I \\<down>\\<ge> a \\<down>< b = {a}; \\<not> P (inext a I);\n        b \\<le> inext a I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                            \\<not> P n \\<and> P (inext n I)\n 2. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I);\n        card (I \\<down>> a \\<down>< b) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c a.\n       \\<lbrakk>c = card (I \\<down>> a \\<down>< b); a \\<in> I; b \\<in> I;\n        \\<not> P a; P b; a < inext a I;\n        \\<lbrakk>\\<not> P (inext a I);\n         0 < card (I \\<down>> a \\<down>< b)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I);\n        inext a I < b; I \\<down>\\<ge> inext a I = I \\<down>> a;\n        a \\<notin> I \\<down>> a \\<down>< b;\n        I \\<down>\\<ge> a \\<down>< b = insert a (I \\<down>> a \\<down>< b);\n        \\<not> P (inext a I);\n        card (I \\<down>> a \\<down>< b) \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P (inext a I) \\<or>\n                         (\\<exists>n\\<in>I \\<down>> a \\<down>< b.\n                             \\<not> P n \\<and> P (inext n I))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_predicate_change_exists: \"\n  \\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a \\<le> n \\<and> n < b \\<and> \\<not> P n \\<and> P (inext n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a; P b; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a; P b; a = b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a; P b; a = b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a; P b; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a; P b; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)", "apply (drule inext_predicate_change_exists_aux[OF refl], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a; P b;\n     \\<exists>n\\<in>I \\<down>\\<ge> a \\<down>< b.\n        \\<not> P n \\<and> P (inext n I)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and> \\<not> P n \\<and> P (inext n I)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_predicate_change_exists: \"\n  \\<lbrakk> a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a < n \\<and> n \\<le> b \\<and> \\<not> P n \\<and> P (iprev n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and> \\<not> P n \\<and> P (iprev n I)", "apply (frule inext_predicate_change_exists[of a b I \"\\<lambda>x. \\<not> P x\"], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a;\n     \\<exists>n\\<in>I.\n        a \\<le> n \\<and>\n        n < b \\<and> P n \\<and> \\<not> P (inext n I)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and> \\<not> P n \\<and> P (iprev n I)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I.\n                            a < n \\<and>\n                            n \\<le> b \\<and> \\<not> P n \\<and> P (iprev n I)", "apply (rule_tac x=\"inext n I\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> inext n I \\<in> I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> inext n I \\<in> I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (blast intro: inext_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (subgoal_tac \"n < inext n I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> n < inext n I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> n < inext n I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (blast intro: inext_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (frule_tac x=a and z=\"inext n I\" in le_less_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (frule less_imp_inext_le, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (cut_tac n=n and I=I in iprev_inext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; iprev (inext n I) I = n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; iprev (inext n I) I = n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I; a \\<le> n;\n        P n; \\<not> P (inext n I); n < inext n I; inext n I \\<le> b;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; iprev (inext n I) I = n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (rule less_imp_neq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I; a \\<le> n;\n        P n; \\<not> P (inext n I); n < inext n I; inext n I \\<le> b;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n < Max I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; iprev (inext n I) I = n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply (blast intro: inext_closed Max_ge order_less_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a; n \\<in> I;\n        a \\<le> n; n < b; P n; \\<not> P (inext n I); n < inext n I;\n        a < inext n I; inext n I \\<le> b; iprev (inext n I) I = n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I \\<and>\n                         inext n I \\<le> b \\<and>\n                         \\<not> P (inext n I) \\<and> P (iprev (inext n I) I)", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nat_Suc_predicate_change_exists: \"\n  \\<lbrakk> a \\<le> b; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow> \\<exists>n\\<ge>a. n < b \\<and> \\<not> P n \\<and> P (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and> \\<not> P n \\<and> P (Suc n)", "apply (drule inext_predicate_change_exists[OF _ UNIV_I UNIV_I], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P a; P b;\n     \\<exists>n\\<in>UNIV.\n        a \\<le> n \\<and>\n        n < b \\<and> \\<not> P n \\<and> P (inext n UNIV)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and> \\<not> P n \\<and> P (Suc n)", "apply (simp add: inext_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nat_pred_predicate_change_exists: \"\n  \\<lbrakk> a \\<le> b; \\<not> P b; P a \\<rbrakk> \\<Longrightarrow> \\<exists>n\\<le>b. a < n \\<and> \\<not> P n \\<and> P (n - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<le>b.\n                         a < n \\<and> \\<not> P n \\<and> P (n - Suc 0)", "apply (drule iprev_predicate_change_exists[OF _ UNIV_I UNIV_I], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P b; P a;\n     \\<exists>n\\<in>UNIV.\n        a < n \\<and>\n        n \\<le> b \\<and> \\<not> P n \\<and> P (iprev n UNIV)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<le>b.\n                         a < n \\<and> \\<not> P n \\<and> P (n - Suc 0)", "apply (fastforce simp add: iprev_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_predicate_change_exists2_all: \"\n  \\<lbrakk> (a::nat) \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; \\<forall>k \\<in> I \\<down>\\<ge> b. P k \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a \\<le> n \\<and> n < b \\<and> \\<not> P n \\<and> (\\<forall>k \\<in> I \\<down>> n. P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a = b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a = b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (frule inext_predicate_change_exists[OF less_imp_le,\n  of a b I \"\\<lambda>n. if (n = a) then P n else (\\<forall>k\\<in>I\\<down>\\<ge>n. P k)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> I\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> b \\<in> I\n 3. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<not> (if a = a then P a\n                              else \\<forall>k\\<in>I \\<down>\\<ge> a. P k)\n 4. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> if b = a then P b\n                      else \\<forall>k\\<in>I \\<down>\\<ge> b. P k\n 5. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b;\n     \\<exists>n\\<in>I.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k) \\<and>\n        (if inext n I = a then P (inext n I)\n         else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n     \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b;\n     \\<exists>n\\<in>I.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k) \\<and>\n        (if inext n I = a then P (inext n I)\n         else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I.\n                            a \\<le> n \\<and>\n                            n < b \\<and>\n                            \\<not> P n \\<and>\n                            (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (rule_tac x=n in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k\\<rbrakk>\n       \\<Longrightarrow> n \\<in> I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k\\<rbrakk>\n       \\<Longrightarrow> n \\<in> I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (case_tac \"a < n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        \\<not> a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        \\<not> a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        if inext n I = n then P (inext n I)\n        else Ball (I \\<down>\\<ge> inext n I) P\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>> n. P x\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (split if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n; inext n I = n; P (inext n I)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>> n. P x\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n; inext n I \\<noteq> n;\n        Ball (I \\<down>\\<ge> inext n I) P\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>> n. P x\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (subgoal_tac \"I \\<down>> n = {}\", simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n; inext n I \\<noteq> n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>> n. P x\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (drule not_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>> n. P x\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (rule ssubst[OF cut_greater_ge_inext_conv])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> n \\<in> I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 4. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 4. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 4. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (rule less_imp_neq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; n \\<noteq> inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n < Max I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (drule inext_neq_imp_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; finite I;\n        n < inext n I\\<rbrakk>\n       \\<Longrightarrow> n < Max I\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (rule less_le_trans[OF _ Max_ge])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; finite I;\n        n < inext n I\\<rbrakk>\n       \\<Longrightarrow> n < ?y81 n\n 2. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; finite I;\n        n < inext n I\\<rbrakk>\n       \\<Longrightarrow> finite I\n 3. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; finite I;\n        n < inext n I\\<rbrakk>\n       \\<Longrightarrow> ?y81 n \\<in> I\n 4. \\<And>n.\n       \\<lbrakk>b \\<in> I; \\<forall>x\\<in>I \\<down>\\<ge> b. P x; n \\<in> I;\n        a = n; n < b; \\<not> P n;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x;\n        n \\<noteq> inext n I\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x\n 5. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (subgoal_tac \"a < inext n I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a < inext n I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (blast intro: inext_mono order_less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (subgoal_tac \"I \\<down>\\<ge> inext n I = I \\<down>> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> inext n I = I \\<down>> n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge> inext n I = I \\<down>> n\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (rule cut_greater_ge_inext_conv[symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I; finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; n \\<in> I; n < b;\n        \\<exists>x\\<in>I \\<down>\\<ge> n. \\<not> P x;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; a < n; a < inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (rule less_imp_neq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; n \\<in> I; n < b;\n        \\<exists>x\\<in>I \\<down>\\<ge> n. \\<not> P x;\n        \\<forall>x\\<in>I \\<down>\\<ge> inext n I. P x; a < n; a < inext n I;\n        finite I\\<rbrakk>\n       \\<Longrightarrow> n < Max I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply (blast intro: inext_closed Max_ge order_less_le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I; infinite I\\<rbrakk>\n       \\<Longrightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; a < b; n \\<in> I; a \\<le> n;\n        n < b;\n        \\<not> (if n = a then P n\n                else \\<forall>k\\<in>I \\<down>\\<ge> n. P k);\n        if inext n I = a then P (inext n I)\n        else \\<forall>k\\<in>I \\<down>\\<ge> inext n I. P k;\n        a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>> n. P k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; n \\<in> I; n < b;\n        \\<exists>x\\<in>I \\<down>\\<ge> n. \\<not> P x;\n        \\<forall>x\\<in>I \\<down>> n. P x; a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>> n\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n", "apply (simp add: cut_greater_ge_conv_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P a;\n        \\<forall>k\\<in>I \\<down>\\<ge> b. P k; n \\<in> I; n < b;\n        \\<exists>x\\<in>I \\<down>\\<ge> n. \\<not> P x;\n        \\<forall>x\\<in>I \\<down>\\<ge> n - {n}. P x; a < n; a < inext n I;\n        I \\<down>\\<ge> inext n I = I \\<down>\\<ge> n - {n}\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary inext_predicate_change_exists2: \"\n  \\<lbrakk> (a::nat) \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a \\<le> n \\<and> n < b \\<and> \\<not> P n \\<and> (\\<forall>k\\<in>I. n < k \\<and> k \\<le> b \\<longrightarrow> P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             n < k \\<and> k \\<le> b \\<longrightarrow> P k)", "apply (frule inext_predicate_change_exists2_all[of a b \"I \\<down>\\<le> b\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> I \\<down>\\<le> b\n 2. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> b \\<in> I \\<down>\\<le> b\n 3. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ?P a\n 4. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<in>I \\<down>\\<le> b \\<down>\\<ge> b. ?P k\n 5. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b;\n     \\<exists>n\\<in>I \\<down>\\<le> b.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> ?P n \\<and>\n        (\\<forall>k\\<in>I \\<down>\\<le> b \\<down>> n. ?P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             n < k \\<and> k \\<le> b \\<longrightarrow> P k)", "apply (simp add: i_cut_mem_iff)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<in>I \\<down>\\<le> b \\<down>\\<ge> b. P k\n 2. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b;\n     \\<exists>n\\<in>I \\<down>\\<le> b.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> P n \\<and>\n        (\\<forall>k\\<in>I \\<down>\\<le> b \\<down>> n. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             n < k \\<and> k \\<le> b \\<longrightarrow> P k)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P a; P b;\n     \\<exists>n\\<in>I \\<down>\\<le> b.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> P n \\<and>\n        (\\<forall>k\\<in>I \\<down>\\<le> b \\<down>> n. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a \\<le> n \\<and>\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             n < k \\<and> k \\<le> b \\<longrightarrow> P k)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nat_Suc_predicate_change_exists2_all: \"\n  \\<lbrakk> (a::nat) \\<le> b; \\<not> P a; \\<forall>k\\<ge>b. P k \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<ge>a. n < b \\<and> \\<not> P n \\<and> (\\<forall>k>n. P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> P a; \\<forall>k\\<ge>b. P k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and> \\<not> P n \\<and> (\\<forall>k>n. P k)", "apply (drule inext_predicate_change_exists2_all[rule_format, OF _ UNIV_I UNIV_I])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<not> P a; \\<forall>k\\<ge>b. P k\\<rbrakk>\n    \\<Longrightarrow> \\<not> ?P a\n 2. \\<And>x.\n       \\<lbrakk>\\<not> P a; \\<forall>k\\<ge>b. P k;\n        x \\<in> UNIV \\<down>\\<ge> b\\<rbrakk>\n       \\<Longrightarrow> ?P x\n 3. \\<lbrakk>\\<not> P a; \\<forall>k\\<ge>b. P k;\n     \\<exists>n\\<in>UNIV.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> ?P n \\<and> (\\<forall>k\\<in>UNIV \\<down>> n. ?P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and> \\<not> P n \\<and> (\\<forall>k>n. P k)", "apply (simp add: i_cut_mem_iff Ball_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nat_Suc_predicate_change_exists2: \"\n  \\<lbrakk> (a::nat) \\<le> b; \\<not> P a; P b \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<ge>a. n < b \\<and> \\<not> P n \\<and> (\\<forall>k\\<le>b. n < k \\<longrightarrow> P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> P a; P b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<le>b. n < k \\<longrightarrow> P k)", "apply (drule inext_predicate_change_exists2[of a b UNIV])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<not> P a; P b\\<rbrakk> \\<Longrightarrow> a \\<in> UNIV\n 2. \\<lbrakk>\\<not> P a; P b\\<rbrakk> \\<Longrightarrow> b \\<in> UNIV\n 3. \\<lbrakk>\\<not> P a; P b\\<rbrakk> \\<Longrightarrow> \\<not> ?P a\n 4. \\<lbrakk>\\<not> P a; P b\\<rbrakk> \\<Longrightarrow> ?P b\n 5. \\<lbrakk>\\<not> P a; P b;\n     \\<exists>n\\<in>UNIV.\n        a \\<le> n \\<and>\n        n < b \\<and>\n        \\<not> ?P n \\<and>\n        (\\<forall>k\\<in>UNIV.\n            n < k \\<and> k \\<le> b \\<longrightarrow> ?P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<le>b. n < k \\<longrightarrow> P k)", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P a; P b;\n     \\<exists>n\\<ge>a.\n        n < b \\<and>\n        \\<not> P n \\<and>\n        (\\<forall>k. n < k \\<and> k \\<le> b \\<longrightarrow> P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<ge>a.\n                         n < b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<le>b. n < k \\<longrightarrow> P k)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_predicate_change_exists2_all: \"\n  \\<lbrakk> (a::nat) \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; \\<forall>k\\<in>I\\<down>\\<le>a. P k \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a < n \\<and> n \\<le> b \\<and> \\<not> P n \\<and> (\\<forall>k\\<in>I\\<down><n. P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a = b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a = b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply (frule iprev_predicate_change_exists[OF less_imp_le,\n  of a b I \"\\<lambda>n. if (n = b) then P n else (\\<forall>k\\<in>I\\<down>\\<le>n. P k)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> I\n 2. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> b \\<in> I\n 3. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> \\<not> (if b = b then P b\n                              else \\<forall>k\\<in>I \\<down>\\<le> b. P k)\n 4. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b\\<rbrakk>\n    \\<Longrightarrow> if a = b then P a\n                      else \\<forall>k\\<in>I \\<down>\\<le> a. P k\n 5. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b;\n     \\<exists>n\\<in>I.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k) \\<and>\n        (if iprev n I = b then P (iprev n I)\n         else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n     \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b;\n     \\<exists>n\\<in>I.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k) \\<and>\n        (if iprev n I = b then P (iprev n I)\n         else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>I.\n                            a < n \\<and>\n                            n \\<le> b \\<and>\n                            \\<not> P n \\<and>\n                            (\\<forall>k\\<in>I \\<down>< n. P k)", "apply (rule_tac x=n in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k\\<rbrakk>\n       \\<Longrightarrow> n \\<in> I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k\\<rbrakk>\n       \\<Longrightarrow> n \\<in> I\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply (case_tac \"a < n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k;\n        \\<not> a < n\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k;\n        \\<not> a < n\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; a < b; n \\<in> I; a < n;\n        n \\<le> b;\n        \\<not> (if n = b then P n\n                else \\<forall>k\\<in>I \\<down>\\<le> n. P k);\n        if iprev n I = b then P (iprev n I)\n        else \\<forall>k\\<in>I \\<down>\\<le> iprev n I. P k;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I \\<down>< n. P k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        \\<not> (if n = b then P n else Ball (I \\<down>\\<le> n) P);\n        if iprev n I = b then P (iprev n I)\n        else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (subgoal_tac \"iMin I < n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        \\<not> (if n = b then P n else Ball (I \\<down>\\<le> n) P);\n        if iprev n I = b then P (iprev n I)\n        else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        \\<not> (if n = b then P n else Ball (I \\<down>\\<le> n) P);\n        if iprev n I = b then P (iprev n I)\n        else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> iMin I < n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        \\<not> (if n = b then P n else Ball (I \\<down>\\<le> n) P);\n        if iprev n I = b then P (iprev n I)\n        else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n\\<rbrakk>\n       \\<Longrightarrow> iMin I < n\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        \\<not> (if n = b then P n else Ball (I \\<down>\\<le> n) P);\n        if iprev n I = b then P (iprev n I)\n        else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (blast intro: order_le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        \\<not> (if n = b then P n else Ball (I \\<down>\\<le> n) P);\n        if iprev n I = b then P (iprev n I)\n        else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b; n = b;\n        \\<not> P n\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)\n 2. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>if iprev b I = b then P (iprev b I)\n                else Ball (I \\<down>\\<le> iprev b I) P;\n        a < b; iMin I < b; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>x\\<in>I \\<down>\\<le> a. P x; x \\<in> I; x < b\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (split if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a < b; iMin I < b; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>x\\<in>I \\<down>\\<le> a. P x; x \\<in> I; x < b;\n        iprev b I = b; P (iprev b I)\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x.\n       \\<lbrakk>a < b; iMin I < b; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>x\\<in>I \\<down>\\<le> a. P x; x \\<in> I; x < b;\n        iprev b I \\<noteq> b; Ball (I \\<down>\\<le> iprev b I) P\\<rbrakk>\n       \\<Longrightarrow> P x\n 3. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a < b; iMin I < b; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>x\\<in>I \\<down>\\<le> a. P x; x \\<in> I; x < b;\n        iprev b I \\<noteq> b; Ball (I \\<down>\\<le> iprev b I) P\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (simp add: cut_less_le_iprev_conv[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a < b; iMin I < b; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>x\\<in>I \\<down>\\<le> a. P x; x \\<in> I; x < b;\n        iprev b I \\<noteq> b; \\<forall>x\\<in>I \\<down>< b. P x\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>if iprev n I = b then P (iprev n I)\n                else Ball (I \\<down>\\<le> iprev n I) P;\n        a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P; iprev n I = b;\n        P (iprev n I)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)\n 2. \\<And>n.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P;\n        iprev n I \\<noteq> b; Ball (I \\<down>\\<le> iprev n I) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<not> Ball (I \\<down>\\<le> n) P;\n        iprev n I \\<noteq> b; Ball (I \\<down>\\<le> iprev n I) P\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n \\<and>\n                         (\\<forall>x\\<in>I \\<down>< n. P x)", "apply (simp add: cut_less_le_iprev_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; \\<exists>x\\<in>I \\<down>\\<le> n. \\<not> P x;\n        iprev n I \\<noteq> b; \\<forall>x\\<in>I \\<down>< n. P x\\<rbrakk>\n       \\<Longrightarrow> \\<not> P n", "apply (clarsimp, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; iprev n I \\<noteq> b;\n        \\<forall>x\\<in>I \\<down>< n. P x; \\<not> P x; x \\<in> I; x \\<le> n;\n        P n\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"x < n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; iprev n I \\<noteq> b;\n        \\<forall>x\\<in>I \\<down>< n. P x; \\<not> P x; x \\<in> I; x \\<le> n;\n        P n; x < n\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n x.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; iprev n I \\<noteq> b;\n        \\<forall>x\\<in>I \\<down>< n. P x; \\<not> P x; x \\<in> I; x \\<le> n;\n        P n; \\<not> x < n\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>a < n; iMin I < n; a \\<in> I; b \\<in> I; \\<not> P b;\n        \\<forall>k\\<in>I \\<down>\\<le> a. P k; n \\<in> I; n \\<le> b;\n        n \\<noteq> b; iprev n I \\<noteq> b;\n        \\<forall>x\\<in>I \\<down>< n. P x; \\<not> P x; x \\<in> I; x \\<le> n;\n        P n; \\<not> x < n\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_predicate_change_exists2: \"\n  \\<lbrakk> (a::nat) \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n\\<in>I. a < n \\<and> n \\<le> b \\<and> \\<not> P n \\<and> (\\<forall>k\\<in>I. a \\<le> k \\<and> k < n \\<longrightarrow> P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             a \\<le> k \\<and> k < n \\<longrightarrow> P k)", "apply (frule iprev_predicate_change_exists2_all[of a b \"I \\<down>\\<ge> a\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> I \\<down>\\<ge> a\n 2. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> b \\<in> I \\<down>\\<ge> a\n 3. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<not> ?P b\n 4. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<in>I \\<down>\\<ge> a \\<down>\\<le> a. ?P k\n 5. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a;\n     \\<exists>n\\<in>I \\<down>\\<ge> a.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> ?P n \\<and>\n        (\\<forall>k\\<in>I \\<down>\\<ge> a \\<down>< n. ?P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             a \\<le> k \\<and> k < n \\<longrightarrow> P k)", "apply (simp add: i_cut_mem_iff)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<in>I \\<down>\\<ge> a \\<down>\\<le> a. P k\n 2. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a;\n     \\<exists>n\\<in>I \\<down>\\<ge> a.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> P n \\<and>\n        (\\<forall>k\\<in>I \\<down>\\<ge> a \\<down>< n. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             a \\<le> k \\<and> k < n \\<longrightarrow> P k)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<in> I; b \\<in> I; \\<not> P b; P a;\n     \\<exists>n\\<in>I \\<down>\\<ge> a.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> P n \\<and>\n        (\\<forall>k\\<in>I \\<down>\\<ge> a \\<down>< n. P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>I.\n                         a < n \\<and>\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<in>I.\n                             a \\<le> k \\<and> k < n \\<longrightarrow> P k)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nat_pred_predicate_change_exists2_all: \"\n  \\<lbrakk> (a::nat) \\<le> b; \\<not> P b; \\<forall>k\\<le>a. P k \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n>a. n \\<le> b \\<and> \\<not> P n \\<and> (\\<forall>k<n. P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> P b; \\<forall>k\\<le>a. P k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n>a.\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and> (\\<forall>k<n. P k)", "apply (drule iprev_predicate_change_exists2_all[rule_format, OF _ UNIV_I UNIV_I])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<not> P b; \\<forall>k\\<le>a. P k\\<rbrakk>\n    \\<Longrightarrow> \\<not> ?P b\n 2. \\<And>x.\n       \\<lbrakk>\\<not> P b; \\<forall>k\\<le>a. P k;\n        x \\<in> UNIV \\<down>\\<le> a\\<rbrakk>\n       \\<Longrightarrow> ?P x\n 3. \\<lbrakk>\\<not> P b; \\<forall>k\\<le>a. P k;\n     \\<exists>n\\<in>UNIV.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> ?P n \\<and> (\\<forall>k\\<in>UNIV \\<down>< n. ?P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n>a.\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and> (\\<forall>k<n. P k)", "apply (simp add: i_cut_mem_iff Ball_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nat_pred_predicate_change_exists2: \"\n  \\<lbrakk> (a::nat) \\<le> b; \\<not> P b; P a \\<rbrakk> \\<Longrightarrow>\n  \\<exists>n>a. n \\<le> b \\<and> \\<not> P n \\<and> (\\<forall>k\\<ge>a. k < n \\<longrightarrow> P k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> P b; P a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n>a.\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<ge>a. k < n \\<longrightarrow> P k)", "apply (drule iprev_predicate_change_exists2[of a b UNIV])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<not> P b; P a\\<rbrakk> \\<Longrightarrow> a \\<in> UNIV\n 2. \\<lbrakk>\\<not> P b; P a\\<rbrakk> \\<Longrightarrow> b \\<in> UNIV\n 3. \\<lbrakk>\\<not> P b; P a\\<rbrakk> \\<Longrightarrow> \\<not> ?P b\n 4. \\<lbrakk>\\<not> P b; P a\\<rbrakk> \\<Longrightarrow> ?P a\n 5. \\<lbrakk>\\<not> P b; P a;\n     \\<exists>n\\<in>UNIV.\n        a < n \\<and>\n        n \\<le> b \\<and>\n        \\<not> ?P n \\<and>\n        (\\<forall>k\\<in>UNIV.\n            a \\<le> k \\<and> k < n \\<longrightarrow> ?P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n>a.\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<ge>a. k < n \\<longrightarrow> P k)", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P b; P a;\n     \\<exists>n>a.\n        n \\<le> b \\<and>\n        \\<not> P n \\<and>\n        (\\<forall>k. a \\<le> k \\<and> k < n \\<longrightarrow> P k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n>a.\n                         n \\<le> b \\<and>\n                         \\<not> P n \\<and>\n                         (\\<forall>k\\<ge>a. k < n \\<longrightarrow> P k)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>\\<open>inext_nth\\<close> and \\<open>iprev_nth\\<close> -- nth element of a natural set\\<close>"], ["", "primrec inext_nth :: \"nat set \\<Rightarrow> nat \\<Rightarrow> nat\"   (\"(_ \\<rightarrow> _)\" [100, 100] 60)\nwhere\n  \"I \\<rightarrow> 0 = iMin I\"\n| \"I \\<rightarrow> Suc n = inext (inext_nth I n) I\""], ["", "lemma inext_nth_closed: \"I \\<noteq> {} \\<Longrightarrow> I \\<rightarrow> n \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow> I \\<rightarrow> n \\<in> I", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. I \\<noteq> {} \\<Longrightarrow> I \\<rightarrow> 0 \\<in> I\n 2. \\<And>n.\n       \\<lbrakk>I \\<noteq> {} \\<Longrightarrow> I \\<rightarrow> n \\<in> I;\n        I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n \\<in> I", "apply (simp add: iMinI_ex2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>I \\<noteq> {} \\<Longrightarrow> I \\<rightarrow> n \\<in> I;\n        I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n \\<in> I", "apply (simp add: inext_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_image: \"\n  \\<lbrakk> I \\<noteq> {}; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> (f ` I) \\<rightarrow> n = f (I \\<rightarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; SetInterval2.strict_mono_on f I\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<rightarrow> n = f (I \\<rightarrow> n)", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; SetInterval2.strict_mono_on f I\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<rightarrow> 0 = f (I \\<rightarrow> 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {};\n                 SetInterval2.strict_mono_on f I\\<rbrakk>\n                \\<Longrightarrow> (f ` I) \\<rightarrow> n =\n                                  f (I \\<rightarrow> n);\n        I \\<noteq> {}; SetInterval2.strict_mono_on f I\\<rbrakk>\n       \\<Longrightarrow> (f ` I) \\<rightarrow> Suc n =\n                         f (I \\<rightarrow> Suc n)", "apply (simp add: iMin_mono_on2 strict_mono_on_imp_mono_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {};\n                 SetInterval2.strict_mono_on f I\\<rbrakk>\n                \\<Longrightarrow> (f ` I) \\<rightarrow> n =\n                                  f (I \\<rightarrow> n);\n        I \\<noteq> {}; SetInterval2.strict_mono_on f I\\<rbrakk>\n       \\<Longrightarrow> (f ` I) \\<rightarrow> Suc n =\n                         f (I \\<rightarrow> Suc n)", "apply (simp add: inext_image inext_nth_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_Suc_mono: \"I \\<rightarrow> n \\<le> I \\<rightarrow> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<rightarrow> n \\<le> I \\<rightarrow> Suc n", "by (simp add: inext_mono)"], ["", "lemma inext_nth_mono: \"a \\<le> b \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> b", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<le> 0 \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> 0\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b", "apply (drule le_Suc_eq[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b", "apply (rule_tac y=\"I \\<rightarrow> b\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> b\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> b \\<le> I \\<rightarrow> Suc b\n 3. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> b \\<le> I \\<rightarrow> Suc b\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b", "apply (rule inext_nth_Suc_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<rightarrow> a \\<le> I \\<rightarrow> b;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a \\<le> I \\<rightarrow> Suc b", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_Suc_mono2: \"\\<exists>x\\<in>I. I \\<rightarrow> n < x \\<Longrightarrow> I \\<rightarrow> n < I \\<rightarrow> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. I \\<rightarrow> n < x \\<Longrightarrow>\n    I \\<rightarrow> n < I \\<rightarrow> Suc n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. I \\<rightarrow> n < x \\<Longrightarrow>\n    I \\<rightarrow> n < inext (I \\<rightarrow> n) I", "apply (rule inext_mono2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>I. I \\<rightarrow> n < x \\<Longrightarrow>\n    I \\<rightarrow> n \\<in> I\n 2. \\<exists>x\\<in>I. I \\<rightarrow> n < x \\<Longrightarrow>\n    \\<exists>x\\<in>I. I \\<rightarrow> n < x", "apply (blast intro: inext_nth_closed inext_mono2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_mono2: \"\\<exists>x\\<in>I. I \\<rightarrow> a < x \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. I \\<rightarrow> a < x \\<Longrightarrow>\n    (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)", "apply (subgoal_tac \"I \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)\n 2. \\<exists>x\\<in>I. I \\<rightarrow> a < x \\<Longrightarrow> I \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>I. I \\<rightarrow> a < x \\<Longrightarrow> I \\<noteq> {}\n 2. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     I \\<rightarrow> a < I \\<rightarrow> b\\<rbrakk>\n    \\<Longrightarrow> a < b\n 2. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     I \\<rightarrow> a < I \\<rightarrow> b; \\<not> a < b\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     I \\<rightarrow> a < I \\<rightarrow> b; b \\<le> a\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b", "apply (drule inext_nth_mono[of _ _ I])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     I \\<rightarrow> a < I \\<rightarrow> b;\n     I \\<rightarrow> b \\<le> I \\<rightarrow> a\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x\\<in>I. I \\<rightarrow> a < x; I \\<noteq> {};\n     a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>I \\<noteq> {}; a < b; x \\<in> I;\n        I \\<rightarrow> a < x\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>I \\<noteq> {}; a < 0; x \\<in> I;\n        I \\<rightarrow> a < x\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> 0\n 2. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>I \\<noteq> {}; a < b; x \\<in> I;\n                    I \\<rightarrow> a < x\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b;\n        I \\<noteq> {}; a < Suc b; x \\<in> I; I \\<rightarrow> a < x\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> Suc b", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>I \\<noteq> {}; a < b; x \\<in> I;\n                    I \\<rightarrow> a < x\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b;\n        I \\<noteq> {}; a < Suc b; x \\<in> I; I \\<rightarrow> a < x\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> Suc b", "apply (drule less_Suc_eq[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>I \\<noteq> {}; a < b; x \\<in> I;\n                    I \\<rightarrow> a < x\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b;\n        I \\<noteq> {}; x \\<in> I; I \\<rightarrow> a < x; a < b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> Suc b\n 2. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>I \\<noteq> {}; a < b; x \\<in> I;\n                    I \\<rightarrow> a < x\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b;\n        I \\<noteq> {}; x \\<in> I; I \\<rightarrow> a < x; a = b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> Suc b", "apply (blast intro: order_less_le_trans inext_nth_Suc_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>I \\<noteq> {}; a < b; x \\<in> I;\n                    I \\<rightarrow> a < x\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> b;\n        I \\<noteq> {}; x \\<in> I; I \\<rightarrow> a < x; a = b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> a < I \\<rightarrow> Suc b", "apply (blast intro: inext_nth_Suc_mono2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_mono2_infin: \"\n  infinite I \\<Longrightarrow> (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)", "apply (drule infinite_nat_iff_unbounded[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. \\<exists>n>m. n \\<in> I \\<Longrightarrow>\n    (I \\<rightarrow> a < I \\<rightarrow> b) = (a < b)", "apply (rule inext_nth_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. \\<exists>n>m. n \\<in> I \\<Longrightarrow>\n    \\<exists>x\\<in>I. I \\<rightarrow> a < x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_Max_fix: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I; a \\<le> b \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> b = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n     a \\<le> b\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> b = Max I", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n     a \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> 0 = Max I\n 2. \\<And>b.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<rightarrow> b = Max I;\n        finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n        a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc b = Max I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<rightarrow> b = Max I;\n        finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n        a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc b = Max I", "apply (drule le_Suc_eq[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<rightarrow> b = Max I;\n        finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc b = Max I\n 2. \\<And>b.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<rightarrow> b = Max I;\n        finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc b = Max I", "apply (simp add: inext_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<rightarrow> b = Max I;\n        finite I; I \\<noteq> {}; I \\<rightarrow> a = Max I;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc b = Max I", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_cut_less_conv: \"\n  \\<And>I. I \\<rightarrow> n < t \\<Longrightarrow> (I \\<down>< t) \\<rightarrow> n = I \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       I \\<rightarrow> n < t \\<Longrightarrow>\n       I \\<down>< t \\<rightarrow> n = I \\<rightarrow> n", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>I \\<rightarrow> n < t; I = {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< t \\<rightarrow> n = I \\<rightarrow> n\n 2. \\<And>I.\n       \\<lbrakk>I \\<rightarrow> n < t; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< t \\<rightarrow> n = I \\<rightarrow> n", "apply (simp add: cut_less_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>I \\<rightarrow> n < t; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< t \\<rightarrow> n = I \\<rightarrow> n", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>I \\<rightarrow> 0 < t; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< t \\<rightarrow> 0 = I \\<rightarrow> 0\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I \\<rightarrow> n < t; I \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> I \\<down>< t \\<rightarrow> n =\n                                     I \\<rightarrow> n;\n        I \\<rightarrow> Suc n < t; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< t \\<rightarrow> Suc n =\n                         I \\<rightarrow> Suc n", "apply (simp add: cut_less_Min_eq cut_less_Min_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I \\<rightarrow> n < t; I \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> I \\<down>< t \\<rightarrow> n =\n                                     I \\<rightarrow> n;\n        I \\<rightarrow> Suc n < t; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< t \\<rightarrow> Suc n =\n                         I \\<rightarrow> Suc n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I \\<rightarrow> n < t; I \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> I \\<down>< t \\<rightarrow> n =\n                                     I \\<rightarrow> n;\n        inext (I \\<rightarrow> n) I < t; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<down>< t \\<rightarrow> n)\n                          (I \\<down>< t) =\n                         inext (I \\<rightarrow> n) I", "apply (frule order_le_less_trans[OF inext_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I \\<rightarrow> n < t; I \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> I \\<down>< t \\<rightarrow> n =\n                                     I \\<rightarrow> n;\n        inext (I \\<rightarrow> n) I < t; I \\<noteq> {};\n        I \\<rightarrow> n < t\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<down>< t \\<rightarrow> n)\n                          (I \\<down>< t) =\n                         inext (I \\<rightarrow> n) I", "apply (simp add: inext_cut_less_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma remove_Min_inext_nth_Suc_conv: \"\\<And>I.\n  Suc 0 < card I \\<or> infinite I \\<Longrightarrow>\n  (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       Suc 0 < card I \\<or> infinite I \\<Longrightarrow>\n       (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n", "(*apply (frule card_gt_0_iff[THEN iffD1, OF gr_implies_gr0], clarify)*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       Suc 0 < card I \\<or> infinite I \\<Longrightarrow>\n       (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n", "apply (subgoal_tac \"I \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n\n 2. \\<And>I. Suc 0 < card I \\<or> infinite I \\<Longrightarrow> I \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I. Suc 0 < card I \\<or> infinite I \\<Longrightarrow> I \\<noteq> {}\n 2. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (blast dest: card_gr0_imp_not_empty[OF gr_implies_gr0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (subgoal_tac \"I - {iMin I} \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n\n 2. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I - {iMin I} \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I - {iMin I} \\<noteq> {}\n 2. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>I \\<noteq> {}; I \\<subseteq> {iMin I};\n        Suc 0 < card I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>I.\n       \\<lbrakk>I \\<noteq> {}; I \\<subseteq> {iMin I}; infinite I\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (drule card_mono[OF singleton_finite])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>I \\<noteq> {}; Suc 0 < card I;\n        card I \\<le> card {iMin I}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>I.\n       \\<lbrakk>I \\<noteq> {}; I \\<subseteq> {iMin I}; infinite I\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>I \\<noteq> {}; I \\<subseteq> {iMin I}; infinite I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (simp add: subset_singleton_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>I \\<noteq> {}; I = {iMin I}; infinite I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (blast dest: infinite_imp_nonempty infinite_imp_not_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                         I \\<rightarrow> Suc n", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> 0 =\n                         I \\<rightarrow> Suc 0\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    I - {iMin I} \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     I \\<rightarrow> Suc n;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> Suc n =\n                         I \\<rightarrow> Suc (Suc n)", "apply (simp add: cut_greater_Min_eq_Diff[symmetric] inext_def iMinI_ex2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    I - {iMin I} \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     I \\<rightarrow> Suc n;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> Suc n =\n                         I \\<rightarrow> Suc (Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (inext (I \\<rightarrow> n) I)\n                          (I - {iMin I}) =\n                         inext (inext (I \\<rightarrow> n) I) I", "apply (rule_tac n=\"(inext (I \\<rightarrow> n) I)\" in ssubst[OF inext_def[THEN meta_eq_to_obj_eq], rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (inext (I \\<rightarrow> n) I)\n                          (I - {iMin I}) =\n                         (if inext (I \\<rightarrow> n) I \\<in> I \\<and>\n                             I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                             {}\n                          then iMin (I \\<down>> inext (I \\<rightarrow> n) I)\n                          else inext (I \\<rightarrow> n) I)", "apply (rule_tac n=\"(inext (I \\<rightarrow> n) I)\" in ssubst[OF inext_def[THEN meta_eq_to_obj_eq], rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> (if inext (I \\<rightarrow> n) I\n                             \\<in> I - {iMin I} \\<and>\n                             (I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I \\<noteq>\n                             {}\n                          then iMin\n                                ((I - {iMin I}) \\<down>>\n                                 inext (I \\<rightarrow> n) I)\n                          else inext (I \\<rightarrow> n) I) =\n                         (if inext (I \\<rightarrow> n) I \\<in> I \\<and>\n                             I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                             {}\n                          then iMin (I \\<down>> inext (I \\<rightarrow> n) I)\n                          else inext (I \\<rightarrow> n) I)", "apply (simp add: inext_closed inext_nth_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> (inext (I \\<rightarrow> n) I \\<noteq> iMin I \\<and>\n                          (I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         (inext (I \\<rightarrow> n) I =\n                          iMin I \\<longrightarrow>\n                          I \\<down>> iMin I \\<noteq> {} \\<longrightarrow>\n                          iMin I = iMin (I \\<down>> iMin I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply (subgoal_tac \"inext (I \\<rightarrow> n) I \\<noteq> iMin I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> (inext (I \\<rightarrow> n) I \\<noteq> iMin I \\<and>\n                          (I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         (inext (I \\<rightarrow> n) I =\n                          iMin I \\<longrightarrow>\n                          I \\<down>> iMin I \\<noteq> {} \\<longrightarrow>\n                          iMin I = iMin (I \\<down>> iMin I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I \\<noteq> iMin I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I \\<noteq> iMin I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> (inext (I \\<rightarrow> n) I \\<noteq> iMin I \\<and>\n                          (I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         (inext (I \\<rightarrow> n) I =\n                          iMin I \\<longrightarrow>\n                          I \\<down>> iMin I \\<noteq> {} \\<longrightarrow>\n                          iMin I = iMin (I \\<down>> iMin I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        I \\<noteq> {}; \\<not> I \\<subseteq> {iMin I};\n        Suc 0 < card I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I \\<noteq> iMin I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        I \\<noteq> {}; \\<not> I \\<subseteq> {iMin I}; infinite I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I \\<noteq> iMin I\n 3. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> (inext (I \\<rightarrow> n) I \\<noteq> iMin I \\<and>\n                          (I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         (inext (I \\<rightarrow> n) I =\n                          iMin I \\<longrightarrow>\n                          I \\<down>> iMin I \\<noteq> {} \\<longrightarrow>\n                          iMin I = iMin (I \\<down>> iMin I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply (simp add: inext_neq_iMin_not_card_1 inext_neq_iMin_infin)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply (subgoal_tac \"iMin I < (I \\<rightarrow> Suc n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I;\n        iMin I < I \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> iMin I < I \\<rightarrow> Suc n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> iMin I < I \\<rightarrow> Suc n\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I;\n        iMin I < I \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply (drule_tac n=\"Suc n\" in iMin_le[OF inext_nth_closed, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I;\n        iMin I \\<le> I \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> iMin I < I \\<rightarrow> Suc n\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I;\n        iMin I < I \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n                    \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n                   \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n =\n                                     inext (I \\<rightarrow> n) I;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {};\n        \\<not> I \\<subseteq> {iMin I};\n        inext (I \\<rightarrow> n) I \\<noteq> iMin I;\n        iMin I < I \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          (I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           iMin\n                            (I \\<down>> inext (I \\<rightarrow> n) I)) \\<and>\n                          (I \\<down>> inext (I \\<rightarrow> n) I =\n                           {} \\<longrightarrow>\n                           iMin\n                            ((I - {iMin I}) \\<down>>\n                             inext (I \\<rightarrow> n) I) =\n                           inext (I \\<rightarrow> n) I)) \\<and>\n                         ((I - {iMin I}) \\<down>>\n                          inext (I \\<rightarrow> n) I =\n                          {} \\<longrightarrow>\n                          I \\<down>> inext (I \\<rightarrow> n) I \\<noteq>\n                          {} \\<longrightarrow>\n                          inext (I \\<rightarrow> n) I =\n                          iMin (I \\<down>> inext (I \\<rightarrow> n) I))", "apply (simp add: cut_greater_Diff cut_greater_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary remove_Min_inext_nth_Suc_conv_finite: \"Suc 0 < card I \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 < card I \\<Longrightarrow>\n    (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n", "by (simp add: remove_Min_inext_nth_Suc_conv)"], ["", "corollary remove_Min_inext_nth_Suc_conv_infinite: \"infinite I \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    (I - {iMin I}) \\<rightarrow> n = I \\<rightarrow> Suc n", "by (simp add: remove_Min_inext_nth_Suc_conv)"], ["", "lemma remove_Max_eq: \"\\<lbrakk> finite I; I \\<noteq> {}; n \\<noteq> Max I \\<rbrakk> \\<Longrightarrow> Max (I - {n}) = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; n \\<noteq> Max I\\<rbrakk>\n    \\<Longrightarrow> Max (I - {n}) = Max I", "by (rule Max_equality, simp+)"], ["", "lemma remove_iMin_eq: \"\\<lbrakk> I \\<noteq> {}; n \\<noteq> iMin I \\<rbrakk> \\<Longrightarrow> iMin (I - {n}) = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; n \\<noteq> iMin I\\<rbrakk>\n    \\<Longrightarrow> iMin (I - {n}) = iMin I", "by (rule iMin_equality, simp_all add: iMinI_ex2 iMin_le)"], ["", "lemma remove_Min_eq: \"\\<lbrakk> finite I; I \\<noteq> {}; n \\<noteq> Min I \\<rbrakk> \\<Longrightarrow> Min (I - {n}) = Min I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; n \\<noteq> Min I\\<rbrakk>\n    \\<Longrightarrow> Min (I - {n}) = Min I", "by (rule Min_eqI, simp+)"], ["", "lemma Max_le_iMin_conv_singleton: \"\\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (Max I \\<le> iMin I) = (\\<exists>x. I = {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (Max I \\<le> iMin I) = (\\<exists>x. I = {x})", "by (simp add: iMin_Min_conv Max_le_Min_conv_singleton del: Max_le_iff Min_ge_iff)"], ["", "lemma inext_nth_card_less_Max: \"\n  \\<And>I. Suc n < card I \\<Longrightarrow> I \\<rightarrow> n < Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I. Suc n < card I \\<Longrightarrow> I \\<rightarrow> n < Max I", "apply (frule card_gr0_imp_not_empty[OF less_trans[OF zero_less_Suc]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>Suc n < card I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n < Max I", "apply (frule card_gr0_imp_finite[OF less_trans[OF zero_less_Suc]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n < Max I", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> 0 < Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n < Max I;\n        Suc (Suc n) < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n < Max I", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I; I \\<noteq> {}; finite I;\n        \\<not> I \\<rightarrow> 0 < Max I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n < Max I;\n        Suc (Suc n) < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n < Max I", "apply (simp add: linorder_not_less iMin_Min_conv del: Max_le_iff Min_ge_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I; I \\<noteq> {}; finite I;\n        Max I \\<le> Min I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n < Max I;\n        Suc (Suc n) < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n < Max I", "apply (drule Max_le_Min_conv_singleton[THEN iffD1], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>Suc 0 < card I; I \\<noteq> {}; Max I \\<le> Min I;\n        \\<exists>x. I = {x}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n < Max I;\n        Suc (Suc n) < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n < Max I", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n < Max I;\n        Suc (Suc n) < card I; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n < Max I", "apply (drule_tac x=\"I - {iMin I}\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I}); I - {iMin I} \\<noteq> {};\n         finite (I - {iMin I})\\<rbrakk>\n        \\<Longrightarrow> (I - {iMin I}) \\<rightarrow> n\n                          < Max (I - {iMin I})\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n < Max I", "apply (simp add: remove_Min_inext_nth_Suc_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I\n                          < Max (I - {iMin I})\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (subgoal_tac \"\\<not> I \\<subseteq> {iMin I}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I\n 2. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I\n                          < Max (I - {iMin I})\\<rbrakk>\n       \\<Longrightarrow> \\<not> I \\<subseteq> {iMin I}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I\n                          < Max (I - {iMin I})\\<rbrakk>\n       \\<Longrightarrow> \\<not> I \\<subseteq> {iMin I}\n 2. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (drule card_mono[OF singleton_finite])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        card I \\<le> card {iMin I}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>Suc (Suc n) < card I; I \\<noteq> {}; finite I;\n        \\<lbrakk>Suc n < card (I - {iMin I});\n         \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n        \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (simp add: card_Diff_singleton iMin_in Suc_less_pred_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (subgoal_tac \"Max I \\<noteq> iMin I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}; Max I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I\n 2. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> Max I \\<noteq> iMin I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> Max I \\<noteq> iMin I\n 2. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}; Max I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}; Max I = iMin I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n I.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        \\<not> I \\<subseteq> {iMin I}; Max I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I < Max I", "apply (frule Max_le_iMin_conv_singleton[THEN iffD1], clarsimp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I x.\n       \\<lbrakk>n < card I - Suc (Suc 0); I \\<noteq> {}; finite I;\n        inext (I \\<rightarrow> n) I < Max (I - {iMin I});\n        Max I \\<noteq> iMin I; \\<not> inext (I \\<rightarrow> n) I < Max I;\n        x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> x = iMin I", "apply (simp add: remove_Max_eq Max_le_iMin_conv_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_less_Max': \"\n  n < card I - Suc 0 \\<Longrightarrow> I \\<rightarrow> n < Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card I - Suc 0 \\<Longrightarrow> I \\<rightarrow> n < Max I", "by (simp add: inext_nth_card_less_Max)"], ["", "lemma inext_nth_card_Max_aux: \"\n  \\<And>I. card I = Suc n \\<Longrightarrow> I \\<rightarrow> n = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I. card I = Suc n \\<Longrightarrow> I \\<rightarrow> n = Max I", "apply (frule card_gr0_imp_not_empty[OF less_le_trans[OF zero_less_Suc, OF eq_imp_le[OF sym]]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>card I = Suc n; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n = Max I", "apply (frule card_gr0_imp_finite[OF less_le_trans[OF zero_less_Suc, OF eq_imp_le[OF sym]]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n = Max I", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       \\<lbrakk>card I = Suc 0; I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> 0 = Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n = Max I", "apply (clarsimp simp: card_1_singleton_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> Suc n = Max I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (cut_tac I=I and t=\"Max I\" in nat_cut_less_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (subgoal_tac \"card (I \\<down>< Max I) = Suc n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< Max I) = Suc n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< Max I) = Suc n\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (simp add: cut_less_le_conv cut_le_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (frule_tac n=n in card_gr0_imp_not_empty[OF less_le_trans[OF zero_less_Suc, OF eq_imp_le[OF sym]], rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (subgoal_tac \"Max (I \\<down>< Max I) < iMin {Max I}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        Max (I \\<down>< Max I) < iMin {Max I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< Max I) < iMin {Max I}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< Max I) < iMin {Max I}\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        Max (I \\<down>< Max I) < iMin {Max I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (simp, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        Max (I \\<down>< Max I) < iMin {Max I}\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (subgoal_tac \"inext_nth I n < Max I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}; Max (I \\<down>< Max I) < iMin {Max I};\n        I \\<rightarrow> n < Max I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        Max (I \\<down>< Max I) < iMin {Max I}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n < Max I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        Max (I \\<down>< Max I) < iMin {Max I}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n < Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}; Max (I \\<down>< Max I) < iMin {Max I};\n        I \\<rightarrow> n < Max I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (simp add: inext_nth_card_less_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}; Max (I \\<down>< Max I) < iMin {Max I};\n        I \\<rightarrow> n < Max I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply (frule inext_nth_cut_less_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {}; Max (I \\<down>< Max I) < iMin {Max I};\n        I \\<rightarrow> n < Max I;\n        I \\<rightarrow> n = I \\<down>< Max I \\<rightarrow> n\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> n) I = Max I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> inext (Max (I \\<down>< Max I)) I = Max I", "apply (rule min_step_inext)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< Max I) < Max I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< Max I) \\<in> I\n 3. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> Max I \\<in> I\n 4. \\<And>n I k.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I);\n        Max (I \\<down>< Max I) < k; k < Max I\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> I", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< Max I) \\<in> I\n 2. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> Max I \\<in> I\n 3. \\<And>n I k.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I);\n        Max (I \\<down>< Max I) < k; k < Max I\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> I", "apply (rule subsetD, rule cut_less_subset, rule Max_in, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n I.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I)\\<rbrakk>\n       \\<Longrightarrow> Max I \\<in> I\n 2. \\<And>n I k.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I);\n        Max (I \\<down>< Max I) < k; k < Max I\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I k.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I);\n        Max (I \\<down>< Max I) < k; k < Max I\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> I", "apply (frule_tac A=\"I \\<down>< Max I\" and k=k in not_greater_Max, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n I k.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>card I = Suc n; I \\<noteq> {}; finite I\\<rbrakk>\n                   \\<Longrightarrow> I \\<rightarrow> n = Max I;\n        card I = Suc (Suc n); I \\<noteq> {}; finite I;\n        finite (I \\<down>< Max I); card (I \\<down>< Max I) = Suc n;\n        I \\<down>< Max I \\<noteq> {};\n        \\<forall>a\\<in>I \\<down>< Max I. a < Max I;\n        I \\<rightarrow> n = Max (I \\<down>< Max I);\n        Max (I \\<down>< Max I) < k; k < Max I;\n        k \\<notin> I \\<down>< Max I\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> I", "apply (simp add: cut_less_mem_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_Max_aux': \"\n  \\<And>I. \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> (card I - Suc 0) = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> (card I - Suc 0) = Max I", "by (simp add: inext_nth_card_Max_aux not_empty_card_gr0_conv)"], ["", "lemma inext_nth_card_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> n = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = Max I", "apply (rule inext_nth_Max_fix[of _ \"card I - Suc 0\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> (card I - Suc 0) = Max I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> card I - Suc 0 \\<le> n", "apply (simp add: inext_nth_card_Max_aux')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> card I - Suc 0 \\<le> n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_Max': \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I - Suc 0 \\<le> n \\<rbrakk> \\<Longrightarrow> I \\<rightarrow> n = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I - Suc 0 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = Max I", "by (simp add: inext_nth_card_Max)"], ["", "lemma inext_nth_singleton: \"{a} \\<rightarrow> n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a} \\<rightarrow> n = a", "by (simp add: inext_nth_Max_fix[OF singleton_finite singleton_not_empty _ le0])"], ["", "lemma inext_nth_eq_Min_conv: \"\n  I \\<noteq> {} \\<Longrightarrow> (I \\<rightarrow> n = iMin I) = (n = 0 \\<or> (\\<exists>a. I = {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    (I \\<rightarrow> n = iMin I) = (n = 0 \\<or> (\\<exists>a. I = {a}))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; I \\<rightarrow> n = iMin I\\<rbrakk>\n    \\<Longrightarrow> n = 0 \\<or> (\\<exists>a. I = {a})\n 2. \\<lbrakk>I \\<noteq> {}; n = 0 \\<or> (\\<exists>a. I = {a})\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply (case_tac n, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nat.\n       \\<lbrakk>I \\<noteq> {}; I \\<rightarrow> n = iMin I;\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> n = 0 \\<or> (\\<exists>a. I = {a})\n 2. \\<lbrakk>I \\<noteq> {}; n = 0 \\<or> (\\<exists>a. I = {a})\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply (rename_tac n')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n'.\n       \\<lbrakk>I \\<noteq> {}; I \\<rightarrow> n = iMin I;\n        n = Suc n'\\<rbrakk>\n       \\<Longrightarrow> n = 0 \\<or> (\\<exists>a. I = {a})\n 2. \\<lbrakk>I \\<noteq> {}; n = 0 \\<or> (\\<exists>a. I = {a})\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n'.\n       \\<lbrakk>I \\<noteq> {}; I \\<rightarrow> n = iMin I; n = Suc n';\n        \\<not> (n = 0 \\<or> (\\<exists>a. I = {a}))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<noteq> {}; n = 0 \\<or> (\\<exists>a. I = {a})\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply (drule_tac n=\"I \\<rightarrow> n'\" in  inext_neq_iMin_not_singleton, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n'.\n       \\<lbrakk>I \\<rightarrow> n = iMin I; n = Suc n';\n        \\<not> (n = 0 \\<or> (\\<exists>a. I = {a}));\n        inext (I \\<rightarrow> n') I \\<noteq> iMin I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<noteq> {}; n = 0 \\<or> (\\<exists>a. I = {a})\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; n = 0 \\<or> (\\<exists>a. I = {a})\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; \\<exists>a. I = {a}\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n = iMin I", "apply (clarsimp simp: inext_nth_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_gr_Min_conv: \"\n  I \\<noteq> {} \\<Longrightarrow> (iMin I < I \\<rightarrow> n) = (0 < n \\<and> \\<not>(\\<exists>a. I = {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    (iMin I < I \\<rightarrow> n) = (0 < n \\<and> (\\<nexists>a. I = {a}))", "apply (rule subst[of \"iMin I \\<noteq> I \\<rightarrow> n\" \"iMin I < I \\<rightarrow> n\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    (iMin I \\<noteq> I \\<rightarrow> n) = (iMin I < I \\<rightarrow> n)\n 2. I \\<noteq> {} \\<Longrightarrow>\n    (iMin I \\<noteq> I \\<rightarrow> n) =\n    (0 < n \\<and> (\\<nexists>a. I = {a}))", "apply (frule iMin_le[OF inext_nth_closed[of _ n]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> (iMin I \\<noteq> I \\<rightarrow> n) =\n                      (iMin I < I \\<rightarrow> n)\n 2. I \\<noteq> {} \\<Longrightarrow>\n    (iMin I \\<noteq> I \\<rightarrow> n) =\n    (0 < n \\<and> (\\<nexists>a. I = {a}))", "apply (simp add: linorder_neq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    (iMin I \\<noteq> I \\<rightarrow> n) =\n    (0 < n \\<and> (\\<nexists>a. I = {a}))", "apply (subst neq_commute[of \"iMin I\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    (I \\<rightarrow> n \\<noteq> iMin I) =\n    (0 < n \\<and> (\\<nexists>a. I = {a}))", "apply (simp add: inext_nth_eq_Min_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_gr_Min_conv_infinite: \"\n  infinite I \\<Longrightarrow> (iMin I < I \\<rightarrow> n) = (0 < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> (iMin I < I \\<rightarrow> n) = (0 < n)", "by (simp add: inext_nth_gr_Min_conv infinite_imp_nonempty infinite_imp_not_singleton)"], ["", "lemma inext_nth_cut_ge_inext_nth: \"\\<And>I b.\n  I \\<noteq> {} \\<Longrightarrow> I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b = I \\<rightarrow> (a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I b.\n       I \\<noteq> {} \\<Longrightarrow>\n       I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n       I \\<rightarrow> (a + b)", "apply (induct a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I b.\n       I \\<noteq> {} \\<Longrightarrow>\n       I \\<down>\\<ge> (I \\<rightarrow> 0) \\<rightarrow> b =\n       I \\<rightarrow> (0 + b)\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (simp add: cut_ge_Min_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (case_tac \"card I = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I = Suc 0\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (drule card_1_imp_singleton, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b aa.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        {aa} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> {aa} \\<down>\\<ge>\n                         ({aa} \\<rightarrow> Suc a) \\<rightarrow> b =\n                         {aa} \\<rightarrow> (Suc a + b)\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (simp add: inext_nth_singleton inext_singleton cut_ge_Min_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (subgoal_tac \"Suc 0 < card I \\<or> infinite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n       \\<Longrightarrow> Suc 0 < card I \\<or> infinite I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0\\<rbrakk>\n       \\<Longrightarrow> Suc 0 < card I \\<or> infinite I\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (rule ccontr, clarsimp simp: linorder_not_less not_empty_card_gr0_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (case_tac \"I - {iMin I} = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I - {iMin I} = {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (rule_tac t=I and s=\"{iMin I}\" in subst, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I - {iMin I} = {}\\<rbrakk>\n       \\<Longrightarrow> {iMin I} \\<down>\\<ge>\n                         ({iMin I} \\<rightarrow> Suc a) \\<rightarrow> b =\n                         {iMin I} \\<rightarrow> (Suc a + b)\n 2. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (simp (no_asm) add: inext_nth_singleton inext_singleton cut_ge_Min_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I - {iMin I} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         (I \\<rightarrow> Suc a) \\<rightarrow> b =\n                         I \\<rightarrow> (Suc a + b)", "apply (simp add: subset_singleton_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>\\<And>I b.\n                   I \\<noteq> {} \\<Longrightarrow>\n                   I \\<down>\\<ge> (I \\<rightarrow> a) \\<rightarrow> b =\n                   I \\<rightarrow> (a + b);\n        I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         inext (I \\<rightarrow> a) I \\<rightarrow> b =\n                         inext (I \\<rightarrow> (a + b)) I", "apply (drule_tac x=\"I - {iMin I}\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        \\<And>b.\n           I - {iMin I} \\<noteq> {} \\<Longrightarrow>\n           (I - {iMin I}) \\<down>\\<ge>\n           ((I - {iMin I}) \\<rightarrow> a) \\<rightarrow> b =\n           (I - {iMin I}) \\<rightarrow> (a + b)\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         inext (I \\<rightarrow> a) I \\<rightarrow> b =\n                         inext (I \\<rightarrow> (a + b)) I", "apply (drule_tac x=b in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        I - {iMin I} \\<noteq> {} \\<Longrightarrow>\n        (I - {iMin I}) \\<down>\\<ge>\n        ((I - {iMin I}) \\<rightarrow> a) \\<rightarrow> b =\n        (I - {iMin I}) \\<rightarrow> (a + b)\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         inext (I \\<rightarrow> a) I \\<rightarrow> b =\n                         inext (I \\<rightarrow> (a + b)) I", "apply (drule meta_mp, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I - {iMin I}) \\<down>\\<ge>\n        ((I - {iMin I}) \\<rightarrow> a) \\<rightarrow> b =\n        (I - {iMin I}) \\<rightarrow> (a + b)\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         inext (I \\<rightarrow> a) I \\<rightarrow> b =\n                         inext (I \\<rightarrow> (a + b)) I", "apply (simp add: remove_Min_inext_nth_Suc_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I - {iMin I}) \\<down>\\<ge>\n        inext (I \\<rightarrow> a) I \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         inext (I \\<rightarrow> a) I \\<rightarrow> b =\n                         inext (I \\<rightarrow> (a + b)) I", "apply (simp add: cut_ge_Diff cut_ge_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<ge>\n                         inext (I \\<rightarrow> a) I \\<rightarrow> b =\n                         inext (I \\<rightarrow> (a + b)) I", "apply (subgoal_tac \"iMin I < inext (I \\<rightarrow> a) I\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I\\<rbrakk>\n       \\<Longrightarrow> iMin I < inext (I \\<rightarrow> a) I", "apply (rule le_neq_trans[OF _ not_sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I\\<rbrakk>\n       \\<Longrightarrow> iMin I \\<le> inext (I \\<rightarrow> a) I\n 2. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> a) I \\<noteq> iMin I", "apply (simp add: iMin_le inext_closed inext_nth_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0;\n        Suc 0 < card I \\<or> infinite I; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> a) I \\<noteq> iMin I", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I;\n        Suc 0 < card I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> a) I \\<noteq> iMin I\n 2. \\<And>a I b.\n       \\<lbrakk>I \\<noteq> {}; card I \\<noteq> Suc 0; I \\<noteq> {iMin I};\n        (I \\<down>\\<ge> inext (I \\<rightarrow> a) I -\n         (if inext (I \\<rightarrow> a) I \\<le> iMin I then {iMin I}\n          else {})) \\<rightarrow> b =\n        inext (I \\<rightarrow> (a + b)) I;\n        infinite I\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<rightarrow> a) I \\<noteq> iMin I", "apply (simp add: inext_neq_iMin_not_card_1 inext_neq_iMin_infin)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_append_eq1: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; Max A < iMin B; A \\<rightarrow> n \\<noteq> Max A \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n     A \\<rightarrow> n \\<noteq> Max A\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (case_tac \"B = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n     A \\<rightarrow> n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n     A \\<rightarrow> 0 \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> 0 = A \\<rightarrow> 0\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n                 A \\<rightarrow> n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                                  A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; Max A < iMin B;\n        A \\<rightarrow> Suc n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n =\n                         A \\<rightarrow> Suc n", "apply (simp add: iMin_Un del: Max_less_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B; iMin A \\<noteq> Max A;\n     B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> min (iMin A) (iMin B) = iMin A\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n                 A \\<rightarrow> n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                                  A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; Max A < iMin B;\n        A \\<rightarrow> Suc n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n =\n                         A \\<rightarrow> Suc n", "apply (rule min_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B; iMin A \\<noteq> Max A;\n     B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin A \\<le> iMin B\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n                 A \\<rightarrow> n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                                  A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; Max A < iMin B;\n        A \\<rightarrow> Suc n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n =\n                         A \\<rightarrow> Suc n", "apply (blast intro: order_less_imp_le order_le_less_trans iMin_le_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n                 A \\<rightarrow> n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                                  A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; Max A < iMin B;\n        A \\<rightarrow> Suc n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n =\n                         A \\<rightarrow> Suc n", "apply (frule_tac n=\"Suc n\" in Max_ge[OF _ inext_nth_closed, rule_format], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite A; A \\<noteq> {}; Max A < iMin B;\n                 A \\<rightarrow> n \\<noteq> Max A; B \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                                  A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; Max A < iMin B;\n        A \\<rightarrow> Suc n \\<noteq> Max A; B \\<noteq> {};\n        A \\<rightarrow> Suc n \\<le> Max A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n =\n                         A \\<rightarrow> Suc n", "apply (drule order_le_neq_trans, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>A \\<rightarrow> n \\<noteq> Max A \\<Longrightarrow>\n                (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; \\<forall>a\\<in>A. a < iMin B;\n        B \\<noteq> {}; inext (A \\<rightarrow> n) A < Max A\\<rbrakk>\n       \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> n)\n                          (A \\<union> B) =\n                         inext (A \\<rightarrow> n) A", "apply (drule order_le_less_trans[OF inext_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>A \\<rightarrow> n \\<noteq> Max A \\<Longrightarrow>\n                (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n;\n        finite A; A \\<noteq> {}; \\<forall>a\\<in>A. a < iMin B;\n        B \\<noteq> {}; A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> n)\n                          (A \\<union> B) =\n                         inext (A \\<rightarrow> n) A", "apply (simp add: inext_append_eq1 inext_nth_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_append_eq1: \"\n  \\<And>A B.\\<lbrakk> Max A < iMin B; n < card A \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; n < card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (case_tac \"B = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; n < card A; B \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (frule card_gr0_imp_finite[OF le_less_trans[OF le0]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; n < card A; B \\<noteq> {}; finite A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (frule card_gr0_imp_not_empty[OF le_less_trans[OF le0]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; n < card A; B \\<noteq> {}; finite A;\n        A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (drule Suc_leI[of n], drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc n < card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n\n 2. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc n = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (rule inext_nth_append_eq1, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc n < card A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> n \\<noteq> Max A\n 2. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc n = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (simp add: inext_nth_card_less_Max less_imp_neq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc n = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = A \\<rightarrow> n", "apply (simp add: inext_nth_card_Max[OF _ _ eq_imp_le[OF sym]] del: Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc n = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc 0 = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> 0 = Max A\n 2. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A;\n                    A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc (Suc n) = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n = Max A", "apply (frule card_1_imp_singleton[OF sym], erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B a.\n       \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc 0 = card A; A = {a}\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> 0 = Max A\n 2. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A;\n                    A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc (Suc n) = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n = Max A", "apply (simp add: iMin_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>Max A < iMin B; B \\<noteq> {}; finite A;\n                    A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        Max A < iMin B; B \\<noteq> {}; finite A; A \\<noteq> {};\n        Suc (Suc n) = card A\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc n = Max A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A\\<rbrakk>\n       \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> n)\n                          (A \\<union> B) =\n                         Max A", "apply (subgoal_tac \"inext_nth A n < Max A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> n)\n                          (A \\<union> B) =\n                         Max A\n 2. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> n < Max A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> n < Max A\n 2. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> n)\n                          (A \\<union> B) =\n                         Max A", "apply (rule inext_nth_card_less_Max, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> n)\n                          (A \\<union> B) =\n                         Max A", "apply (simp add: inext_nth_append_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> inext (A \\<rightarrow> n) (A \\<union> B) = Max A", "apply (rule min_step_inext)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> n < Max A\n 2. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> n \\<in> A \\<union> B\n 3. \\<And>n A B.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A;\n        A \\<rightarrow> n < Max A\\<rbrakk>\n       \\<Longrightarrow> Max A \\<in> A \\<union> B\n 4. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < Max A;\n        A \\<rightarrow> n < k; k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A \\<union> B", "apply (simp add: inext_nth_closed)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A \\<and> k \\<notin> B", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "apply (subgoal_tac \"k < A \\<rightarrow> Suc n\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; k < A \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k < A \\<rightarrow> Suc n\n 3. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k < A \\<rightarrow> Suc n\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; k < A \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 3. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "apply (subgoal_tac \"A \\<rightarrow> Suc n = Max A\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; A \\<rightarrow> Suc n = Max A\\<rbrakk>\n       \\<Longrightarrow> k < A \\<rightarrow> Suc n\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> Suc n = Max A\n 3. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; k < A \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 4. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> A \\<rightarrow> Suc n = Max A\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; A \\<rightarrow> Suc n = Max A\\<rbrakk>\n       \\<Longrightarrow> k < A \\<rightarrow> Suc n\n 3. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; k < A \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 4. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "apply (rule inext_nth_card_Max)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> finite A\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> A \\<noteq> {}\n 3. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> card A \\<le> Suc (Suc n)\n 4. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; A \\<rightarrow> Suc n = Max A\\<rbrakk>\n       \\<Longrightarrow> k < A \\<rightarrow> Suc n\n 5. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; k < A \\<rightarrow> Suc n\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 6. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A; k < inext (A \\<rightarrow> n) A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> A\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "apply (rule_tac n=\"A \\<rightarrow> n\" and k=k in inext_min_step, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k \\<notin> B", "apply (rule not_less_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k < iMin B", "apply (rule_tac y=\"Max A\" in order_less_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> k < Max A\n 2. \\<And>n A B k.\n       \\<lbrakk>\\<And>A B.\n                   \\<lbrakk>\\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n                    finite A; A \\<noteq> {}; Suc n = card A\\<rbrakk>\n                   \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n = Max A;\n        \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {}; finite A;\n        A \\<noteq> {}; Suc (Suc n) = card A; A \\<rightarrow> n < k;\n        k < Max A\\<rbrakk>\n       \\<Longrightarrow> Max A < iMin B", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_append_eq3: \"\n  \\<lbrakk> finite A; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> (card A) = iMin B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; B \\<noteq> {}; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> card A = iMin B", "apply (case_tac \"A = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; B \\<noteq> {}; Max A < iMin B; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> card A = iMin B", "apply (frule not_empty_card_gr0_conv[THEN iffD1], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; B \\<noteq> {}; Max A < iMin B; A \\<noteq> {};\n     0 < card A\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> card A = iMin B", "apply (rule subst[OF Suc_pred, of \"card A\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; B \\<noteq> {}; Max A < iMin B; A \\<noteq> {};\n     0 < card A\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> Suc (card A - Suc 0) =\n                      iMin B", "apply (simp only: inext_nth.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; B \\<noteq> {}; Max A < iMin B; A \\<noteq> {};\n     0 < card A\\<rbrakk>\n    \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> (card A - Suc 0))\n                       (A \\<union> B) =\n                      iMin B", "(* just \"simp\" wouldn't work, because it would revert \"Suc (card A - Suc 0)\" to \"card A\" instead of applying inext_nth.simps *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; B \\<noteq> {}; Max A < iMin B; A \\<noteq> {};\n     0 < card A\\<rbrakk>\n    \\<Longrightarrow> inext ((A \\<union> B) \\<rightarrow> (card A - Suc 0))\n                       (A \\<union> B) =\n                      iMin B", "apply (simp add: inext_nth_card_append_eq1 inext_nth_card_Max' inext_append_eq3)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_append_eq2: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B; card A \\<le> n \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = B \\<rightarrow> (n - card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     card A \\<le> n\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                      B \\<rightarrow> (n - card A)", "apply (rule_tac t=\"(A \\<union> B) \\<rightarrow> n\" and s=\"(A \\<union> B) \\<rightarrow> (card A + (n - card A))\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     card A \\<le> n\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> (card A + (n - card A)) =\n                      B \\<rightarrow> (n - card A)", "apply (subst inext_nth_cut_ge_inext_nth[symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     card A \\<le> n\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<down>\\<ge>\n                      ((A \\<union>\n                        B) \\<rightarrow> card\n    A) \\<rightarrow> (n - card A) =\n                      B \\<rightarrow> (n - card A)", "apply (subst inext_nth_card_append_eq3, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B;\n     card A \\<le> n\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<down>\\<ge>\n                      iMin B \\<rightarrow> (n - card A) =\n                      B \\<rightarrow> (n - card A)", "apply (simp add: cut_ge_Un cut_ge_Max_empty cut_ge_Min_all del: Max_less_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_card_append: \"\n  \\<lbrakk> finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  (A \\<union> B) \\<rightarrow> n = (if n < card A then A \\<rightarrow> n else B \\<rightarrow> (n - card A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; B \\<noteq> {}; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> (A \\<union> B) \\<rightarrow> n =\n                      (if n < card A then A \\<rightarrow> n\n                       else B \\<rightarrow> (n - card A))", "by (simp add: inext_nth_card_append_eq1 inext_nth_card_append_eq2)"], ["", "lemma inext_nth_insert_Suc: \"\n  \\<lbrakk> I \\<noteq> {}; a < iMin I \\<rbrakk> \\<Longrightarrow> (insert a I) \\<rightarrow> Suc n = I \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; a < iMin I\\<rbrakk>\n    \\<Longrightarrow> insert a I \\<rightarrow> Suc n = I \\<rightarrow> n", "apply (frule not_less_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> insert a I \\<rightarrow> Suc n = I \\<rightarrow> n", "apply (rule_tac t=\"I \\<rightarrow> n\" and s=\"(insert a I - {iMin (insert a I)}) \\<rightarrow> n\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (insert a I - {iMin (insert a I)}) \\<rightarrow> n =\n                      I \\<rightarrow> n\n 2. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> insert a I \\<rightarrow> Suc n =\n                      (insert a I - {iMin (insert a I)}) \\<rightarrow> n", "apply (simp add: iMin_insert min_eqL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> insert a I \\<rightarrow> Suc n =\n                      (insert a I - {iMin (insert a I)}) \\<rightarrow> n", "apply (subst remove_Min_inext_nth_Suc_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> Suc 0 < card (insert a I) \\<or> infinite (insert a I)\n 2. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> insert a I \\<rightarrow> Suc n =\n                      insert a I \\<rightarrow> Suc n", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I; finite I\\<rbrakk>\n    \\<Longrightarrow> Suc 0 < card (insert a I) \\<or> infinite (insert a I)\n 2. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I; infinite I\\<rbrakk>\n    \\<Longrightarrow> Suc 0 < card (insert a I) \\<or> infinite (insert a I)\n 3. \\<lbrakk>I \\<noteq> {}; a < iMin I; a \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> insert a I \\<rightarrow> Suc n =\n                      insert a I \\<rightarrow> Suc n", "apply (simp add: not_empty_card_gr0_conv)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_cut_less_eq: \"\n  n < card (I \\<down>< t) \\<Longrightarrow> (I \\<down>< t) \\<rightarrow> n = I \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< t) \\<Longrightarrow>\n    I \\<down>< t \\<rightarrow> n = I \\<rightarrow> n", "apply (rule_tac t=\"I \\<rightarrow> n\" and s=\"(I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n < card (I \\<down>< t) \\<Longrightarrow>\n    (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n    I \\<rightarrow> n\n 2. n < card (I \\<down>< t) \\<Longrightarrow>\n    I \\<down>< t \\<rightarrow> n =\n    (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n", "apply (simp add: cut_less_cut_ge_ident)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< t) \\<Longrightarrow>\n    I \\<down>< t \\<rightarrow> n =\n    (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n", "apply (case_tac \"I \\<down>\\<ge> t = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< t); I \\<down>\\<ge> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t \\<rightarrow> n =\n                      (I \\<down>< t \\<union>\n                       I \\<down>\\<ge> t) \\<rightarrow> n", "apply (rule sym, rule inext_nth_card_append_eq1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< t); I \\<down>\\<ge> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\n 2. \\<lbrakk>n < card (I \\<down>< t); I \\<down>\\<ge> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< t)", "apply (drule card_gt_0_iff[THEN iffD1, OF gr_implies_gr0], clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<down>< t \\<noteq> {};\n     finite (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\n 2. \\<lbrakk>n < card (I \\<down>< t); I \\<down>\\<ge> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< t)", "apply (simp add: Ball_def i_cut_mem_iff iMin_gr_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< t); I \\<down>\\<ge> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< t)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_card_cut_less_imp_inext_nth_less: \"\n  n < card (I \\<down>< t) \\<Longrightarrow> I \\<rightarrow> n < t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< t) \\<Longrightarrow> I \\<rightarrow> n < t", "apply (case_tac \"I \\<down>< t = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< t); I \\<down>< t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (rule subst[OF inext_nth_cut_less_eq], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< t); I \\<down>< t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t \\<rightarrow> n < t", "apply (rule cut_less_bound[OF inext_nth_closed], assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_less_less_card_conv: \"\n  I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow>\n    (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))", "apply (case_tac \"I = {}\", blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))", "apply (case_tac \"I \\<down>< t = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t = {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t = {}\\<rbrakk>\n    \\<Longrightarrow> t \\<le> I \\<rightarrow> n\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))", "apply (simp add: cut_less_empty_iff inext_nth_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<rightarrow> n < t) = (n < card (I \\<down>< t))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< t)\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (rule ccontr, simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t;\n     card (I \\<down>< t) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (subgoal_tac \"Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t;\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t;\n     card (I \\<down>< t) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\n 3. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t;\n     card (I \\<down>< t) \\<le> n\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t;\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (simp add: nat_cut_less_finite iMin_gr_iff Ball_def i_cut_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; I \\<rightarrow> n < t;\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (drule ssubst[OF cut_less_cut_ge_ident[OF order_refl], of \"\\<lambda>x. x \\<rightarrow> n < t\" _ t])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n < t\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (drule inext_nth_card_append_eq2[OF nat_cut_less_finite, of I t \"I \\<down>\\<ge> t\" n], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n < t;\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t))\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (simp add: inext_nth_card_append_eq2 nat_cut_less_finite)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t)) < t;\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t))\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (subgoal_tac \"\\<And>x. I \\<down>\\<ge> t \\<rightarrow> x \\<ge> t\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t)) < t;\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t));\n     \\<And>x. t \\<le> I \\<down>\\<ge> t \\<rightarrow> x\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n        card (I \\<down>< t) \\<le> n;\n        Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n        I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t)) < t;\n        (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n        I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t))\\<rbrakk>\n       \\<Longrightarrow> t \\<le> I \\<down>\\<ge> t \\<rightarrow> x\n 3. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n        card (I \\<down>< t) \\<le> n;\n        Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n        I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t)) < t;\n        (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n        I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t))\\<rbrakk>\n       \\<Longrightarrow> t \\<le> I \\<down>\\<ge> t \\<rightarrow> x\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t)) < t;\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t));\n     \\<And>x. t \\<le> I \\<down>\\<ge> t \\<rightarrow> x\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (rule cut_ge_bound[OF inext_nth_closed], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     card (I \\<down>< t) \\<le> n;\n     Max (I \\<down>< t) < iMin (I \\<down>\\<ge> t);\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t)) < t;\n     (I \\<down>< t \\<union> I \\<down>\\<ge> t) \\<rightarrow> n =\n     I \\<down>\\<ge> t \\<rightarrow> (n - card (I \\<down>< t));\n     \\<And>x. t \\<le> I \\<down>\\<ge> t \\<rightarrow> x\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (simp add: linorder_not_le[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < t", "apply (rule subst[OF inext_nth_cut_less_eq], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>\\<ge> t \\<noteq> {}; I \\<noteq> {};\n     I \\<down>< t \\<noteq> {}; n < card (I \\<down>< t)\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t \\<rightarrow> n < t", "apply (rule cut_less_bound[OF inext_nth_closed], assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_less_inext_nth_card_eq1: \"\n  n < card I \\<or> infinite I \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card I \\<or> infinite I \\<Longrightarrow>\n    card (I \\<down>< (I \\<rightarrow> n)) = n", "apply (case_tac \"I = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> 0)) = 0\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> Suc n)) = Suc n", "apply (simp add: card_eq_0_iff nat_cut_less_finite cut_less_Min_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> Suc n)) = Suc n", "apply (subgoal_tac \"n < card I \\<or> infinite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> Suc n)) = Suc n\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> n < card I \\<or> infinite I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> n < card I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> Suc n)) = Suc n", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> Suc n)) = Suc n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< inext (I \\<rightarrow> n) I) =\n                         Suc n", "apply (subgoal_tac \"I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I;\n        I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< inext (I \\<rightarrow> n) I) =\n                         Suc n\n 2. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I\n 2. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I;\n        I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< inext (I \\<rightarrow> n) I) =\n                         Suc n", "apply (blast dest: inext_nth_card_less_Max less_imp_neq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I;\n        I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< inext (I \\<rightarrow> n) I) =\n                         Suc n", "apply (rule subst[OF cut_le_less_inext_conv[OF inext_nth_closed]], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>card (I \\<down>< (I \\<rightarrow> n)) = n;\n        Suc n < card I \\<or> infinite I; I \\<noteq> {};\n        n < card I \\<or> infinite I;\n        I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = Suc n", "apply (simp add: cut_le_less_conv_if inext_nth_closed cut_less_mem_iff card_insert_if nat_cut_less_finite)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_less_inext_nth_card_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = card I - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = card I - Suc 0", "apply (case_tac \"I = {}\", simp add: cut_less_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> Suc n; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (I \\<rightarrow> n)) = card I - Suc 0", "apply (simp add: inext_nth_card_Max cut_less_Max_eq_Diff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_less_inext_nth_card_if: \"\n  card (I \\<down>< (I \\<rightarrow> n)) = (\n  if (n < card I \\<or> infinite I) then n else card I - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>< (I \\<rightarrow> n)) =\n    (if n < card I \\<or> infinite I then n else card I - Suc 0)", "by (simp add: cut_less_inext_nth_card_eq1 cut_less_inext_nth_card_eq2)"], ["", "lemma cut_le_inext_nth_card_eq1: \"\n  n < card I \\<or> infinite I \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card I \\<or> infinite I \\<Longrightarrow>\n    card (I \\<down>\\<le> (I \\<rightarrow> n)) = Suc n", "apply (case_tac \"I = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I \\<or> infinite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = Suc n", "apply (simp add: cut_le_less_conv_if inext_nth_closed card_insert_if nat_cut_less_finite cut_less_mem_iff cut_less_inext_nth_card_eq1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_le_inext_nth_card_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = card I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = card I", "apply (case_tac \"I = {}\", simp add: cut_le_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> Suc n; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>\\<le> (I \\<rightarrow> n)) = card I", "apply (simp add: inext_nth_card_Max cut_le_Max_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_le_inext_nth_card_if: \"\n  card (I \\<down>\\<le> (I \\<rightarrow> n)) = (\n  if (n < card I \\<or> infinite I) then Suc n else card I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>\\<le> (I \\<rightarrow> n)) =\n    (if n < card I \\<or> infinite I then Suc n else card I)", "by (simp add: cut_le_inext_nth_card_eq1 cut_le_inext_nth_card_eq2)"], ["", "primrec iprev_nth :: \"nat set \\<Rightarrow> nat \\<Rightarrow> nat\"  (\"(_ \\<leftarrow> _)\" [100, 100] 60)\nwhere\n  \"I \\<leftarrow> 0 = Max I\"\n| \"I \\<leftarrow> Suc n = iprev (iprev_nth I n) I\""], ["", "lemma iprev_nth_closed: \"\\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> n \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> n \\<in> I", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> 0 \\<in> I\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> n \\<in> I;\n        finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc n \\<in> I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> n \\<in> I;\n        finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc n \\<in> I", "apply (simp add: iprev_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_image: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; strict_mono_on f I \\<rbrakk> \\<Longrightarrow> (f ` I) \\<leftarrow> n = f (I \\<leftarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     SetInterval2.strict_mono_on f I\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<leftarrow> n = f (I \\<leftarrow> n)", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     SetInterval2.strict_mono_on f I\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<leftarrow> 0 = f (I \\<leftarrow> 0)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {};\n                 SetInterval2.strict_mono_on f I\\<rbrakk>\n                \\<Longrightarrow> (f ` I) \\<leftarrow> n =\n                                  f (I \\<leftarrow> n);\n        finite I; I \\<noteq> {}; SetInterval2.strict_mono_on f I\\<rbrakk>\n       \\<Longrightarrow> (f ` I) \\<leftarrow> Suc n =\n                         f (I \\<leftarrow> Suc n)", "apply (simp add: Max_mono_on2 strict_mono_on_imp_mono_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {};\n                 SetInterval2.strict_mono_on f I\\<rbrakk>\n                \\<Longrightarrow> (f ` I) \\<leftarrow> n =\n                                  f (I \\<leftarrow> n);\n        finite I; I \\<noteq> {}; SetInterval2.strict_mono_on f I\\<rbrakk>\n       \\<Longrightarrow> (f ` I) \\<leftarrow> Suc n =\n                         f (I \\<leftarrow> Suc n)", "apply (simp add: iprev_image iprev_nth_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_Suc_mono: \"I \\<leftarrow> (Suc n) \\<le> I \\<leftarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<leftarrow> Suc n \\<le> I \\<leftarrow> n", "by (simp add: iprev_mono)"], ["", "lemma iprev_nth_mono: \"a \\<le> b \\<Longrightarrow> I \\<leftarrow> b \\<le> I \\<leftarrow> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> I \\<leftarrow> b \\<le> I \\<leftarrow> a", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<le> 0 \\<Longrightarrow> I \\<leftarrow> 0 \\<le> I \\<leftarrow> a\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a", "apply (drule le_Suc_eq[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a", "apply (rule_tac y=\"iprev_nth I b\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> b\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> b \\<le> I \\<leftarrow> a\n 3. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a", "apply (rule iprev_nth_Suc_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> b \\<le> I \\<leftarrow> a\n 2. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>a \\<le> b \\<Longrightarrow>\n                I \\<leftarrow> b \\<le> I \\<leftarrow> a;\n        a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b \\<le> I \\<leftarrow> a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_Suc_mono2:\n  \"\\<lbrakk> finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> n \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> (Suc n) < I \\<leftarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> n\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> Suc n < I \\<leftarrow> n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> n\\<rbrakk>\n    \\<Longrightarrow> iprev (I \\<leftarrow> n) I < I \\<leftarrow> n", "apply (rule iprev_mono2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> n\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> n \\<in> I\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. x < I \\<leftarrow> n", "apply (blast intro: iprev_nth_closed)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_mono2: \"\n  \\<lbrakk> finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a \\<rbrakk> \\<Longrightarrow> (I \\<leftarrow> b < I \\<leftarrow> a) = (a < b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a\\<rbrakk>\n    \\<Longrightarrow> (I \\<leftarrow> b < I \\<leftarrow> a) = (a < b)", "apply (subgoal_tac \"I \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<leftarrow> b < I \\<leftarrow> a) = (a < b)\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a\\<rbrakk>\n    \\<Longrightarrow> I \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a\\<rbrakk>\n    \\<Longrightarrow> I \\<noteq> {}\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<leftarrow> b < I \\<leftarrow> a) = (a < b)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (I \\<leftarrow> b < I \\<leftarrow> a) = (a < b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; I \\<leftarrow> b < I \\<leftarrow> a\\<rbrakk>\n    \\<Longrightarrow> a < b\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; I \\<leftarrow> b < I \\<leftarrow> a;\n     \\<not> a < b\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; I \\<leftarrow> b < I \\<leftarrow> a; b \\<le> a\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a", "apply (drule iprev_nth_mono[of _ _ I])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; I \\<leftarrow> b < I \\<leftarrow> a;\n     I \\<leftarrow> a \\<le> I \\<leftarrow> b\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. x < I \\<leftarrow> a;\n     I \\<noteq> {}; a < b\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; a < b; x \\<in> I;\n        x < I \\<leftarrow> a\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; a < 0; x \\<in> I;\n        x < I \\<leftarrow> a\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> 0 < I \\<leftarrow> a\n 2. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>finite I; I \\<noteq> {}; a < b; x \\<in> I;\n                    x < I \\<leftarrow> a\\<rbrakk>\n                   \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a;\n        finite I; I \\<noteq> {}; a < Suc b; x \\<in> I;\n        x < I \\<leftarrow> a\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b < I \\<leftarrow> a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>finite I; I \\<noteq> {}; a < b; x \\<in> I;\n                    x < I \\<leftarrow> a\\<rbrakk>\n                   \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a;\n        finite I; I \\<noteq> {}; a < Suc b; x \\<in> I;\n        x < I \\<leftarrow> a\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b < I \\<leftarrow> a", "apply (drule less_Suc_eq[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>finite I; I \\<noteq> {}; a < b; x \\<in> I;\n                    x < I \\<leftarrow> a\\<rbrakk>\n                   \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a;\n        finite I; I \\<noteq> {}; x \\<in> I; x < I \\<leftarrow> a;\n        a < b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b < I \\<leftarrow> a\n 2. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>finite I; I \\<noteq> {}; a < b; x \\<in> I;\n                    x < I \\<leftarrow> a\\<rbrakk>\n                   \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a;\n        finite I; I \\<noteq> {}; x \\<in> I; x < I \\<leftarrow> a;\n        a = b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b < I \\<leftarrow> a", "apply (blast intro: order_le_less_trans iprev_nth_Suc_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>finite I; I \\<noteq> {}; a < b; x \\<in> I;\n                    x < I \\<leftarrow> a\\<rbrakk>\n                   \\<Longrightarrow> I \\<leftarrow> b < I \\<leftarrow> a;\n        finite I; I \\<noteq> {}; x \\<in> I; x < I \\<leftarrow> a;\n        a = b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b < I \\<leftarrow> a", "apply (blast intro: iprev_nth_Suc_mono2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_iMin_fix: \"\n  \\<lbrakk> I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> b \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> b = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> b\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> b = iMin I", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> 0 = iMin I\n 2. \\<And>b.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> b = iMin I;\n        I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b = iMin I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> b = iMin I;\n        I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b = iMin I", "apply (drule le_Suc_eq[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> b = iMin I;\n        I \\<noteq> {}; I \\<leftarrow> a = iMin I; a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b = iMin I\n 2. \\<And>b.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> b = iMin I;\n        I \\<noteq> {}; I \\<leftarrow> a = iMin I; a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b = iMin I", "apply (simp add: iprev_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>I \\<noteq> {}; I \\<leftarrow> a = iMin I;\n                 a \\<le> b\\<rbrakk>\n                \\<Longrightarrow> I \\<leftarrow> b = iMin I;\n        I \\<noteq> {}; I \\<leftarrow> a = iMin I; a = Suc b\\<rbrakk>\n       \\<Longrightarrow> I \\<leftarrow> Suc b = iMin I", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_singleton: \"{a} \\<leftarrow> n= a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a} \\<leftarrow> n = a", "by (simp add: iprev_nth_iMin_fix[OF singleton_not_empty _ le0])"], ["", "subsection \\<open>Induction over arbitrary natural sets using the functions \\<open>inext\\<close> and \\<open>iprev\\<close>\\<close>"], ["", "lemma inext_nth_surj_aux1:\"\n  {x \\<in> I. \\<not>(\\<exists>n. I \\<rightarrow> n = x)} = {}\"\n  (is \"?S = {}\"\n   is \"{ x \\<in> I. ?P x} = {}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} = {}", "apply (case_tac \"I = {}\", blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "assume as_S_not_empty: \"?S \\<noteq> {}\""], ["proof (state)\nthis:\n  {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "obtain S where s_S: \"S = ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        S =\n        {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "hence S_not_empty: \"S \\<noteq> {}\""], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "using as_S_not_empty"], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n  {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have s_not_ex: \"\\<And>x. \\<lbrakk> x \\<in> I; ?P x \\<rbrakk> \\<Longrightarrow> x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> I; \\<nexists>n. I \\<rightarrow> n = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "using s_S"], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> I; \\<nexists>n. I \\<rightarrow> n = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> I; \\<nexists>n. I \\<rightarrow> n = ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have s_subset:\"S \\<subseteq> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> I", "using s_S"], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n\ngoal (1 subgoal):\n 1. S \\<subseteq> I", "by blast"], ["proof (state)\nthis:\n  S \\<subseteq> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have i_not_empty: \"I \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {}", "using as_S_not_empty"], ["proof (prove)\nusing this:\n  {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. I \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  I \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have s_iMin_S: \"iMin S \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin S \\<in> S", "using S_not_empty"], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. iMin S \\<in> S", "by (simp add: iMinI_ex2)"], ["proof (state)\nthis:\n  iMin S \\<in> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "hence s_iMin_i: \"iMin S \\<in> I\""], ["proof (prove)\nusing this:\n  iMin S \\<in> S\n\ngoal (1 subgoal):\n 1. iMin S \\<in> I", "using s_subset"], ["proof (prove)\nusing this:\n  iMin S \\<in> S\n  S \\<subseteq> I\n\ngoal (1 subgoal):\n 1. iMin S \\<in> I", "by blast"], ["proof (state)\nthis:\n  iMin S \\<in> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume as:\"iMin I < iMin S\""], ["proof (state)\nthis:\n  iMin I < iMin S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "obtain prev where s_prev: \"prev = iprev (iMin S) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>prev.\n        prev = iprev (iMin S) I \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prev = iprev (iMin S) I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have s_prev_in: \"prev \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prev \\<in> I", "apply (simp add: s_prev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev (iMin S) I \\<in> I", "apply (rule iprev_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin S \\<in> I", "apply (rule s_iMin_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  prev \\<in> I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have s_prev_next_min: \"inext prev I = iMin S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inext prev I = iMin S", "apply (simp add: s_prev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inext (iprev (iMin S) I) I = iMin S", "apply (rule inext_iprev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin I \\<noteq> iMin S", "apply (insert as, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  inext prev I = iMin S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have s_prev_min_1: \"prev < iMin S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prev < iMin S", "apply (simp only: s_prev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev (iMin S) I < iMin S", "apply (rule iprev_mono2[of \"iMin S\" ])"], ["proof (prove)\ngoal (2 subgoals):\n 1. iMin S \\<in> I\n 2. \\<exists>x\\<in>I. x < iMin S", "apply (rule s_iMin_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. x < iMin S", "apply (rule_tac x=\"iMin I\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. iMin I < iMin S\n 2. iMin I \\<in> I", "apply (rule as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin I \\<in> I", "apply (simp add: iMinI_ex2 i_not_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  prev < iMin S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence prev_not_in_s: \"prev \\<notin> S\""], ["proof (prove)\nusing this:\n  prev < iMin S\n\ngoal (1 subgoal):\n 1. prev \\<notin> S", "by (simp add: not_less_iMin)"], ["proof (state)\nthis:\n  prev \\<notin> S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \"\\<exists>n. I \\<rightarrow> n = prev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. I \\<rightarrow> n = prev", "by (insert prev_not_in_s s_not_ex[of prev] s_prev_in, blast)"], ["proof (state)\nthis:\n  \\<exists>n. I \\<rightarrow> n = prev\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. I \\<rightarrow> n = prev", "obtain nPrev where s_nPrev: \"I \\<rightarrow> nPrev = prev\""], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<rightarrow> n = prev\n\ngoal (1 subgoal):\n 1. (\\<And>nPrev.\n        I \\<rightarrow> nPrev = prev \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  I \\<rightarrow> nPrev = prev\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"I \\<rightarrow> (Suc nPrev) = inext prev I\""], ["proof (prove)\nusing this:\n  I \\<rightarrow> nPrev = prev\n\ngoal (1 subgoal):\n 1. I \\<rightarrow> Suc nPrev = inext prev I", "by simp"], ["proof (state)\nthis:\n  I \\<rightarrow> Suc nPrev = inext prev I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"I \\<rightarrow> (Suc nPrev) = iMin S\""], ["proof (prove)\nusing this:\n  I \\<rightarrow> Suc nPrev = inext prev I\n\ngoal (1 subgoal):\n 1. I \\<rightarrow> Suc nPrev = iMin S", "using s_prev_next_min"], ["proof (prove)\nusing this:\n  I \\<rightarrow> Suc nPrev = inext prev I\n  inext prev I = iMin S\n\ngoal (1 subgoal):\n 1. I \\<rightarrow> Suc nPrev = iMin S", "by simp"], ["proof (state)\nthis:\n  I \\<rightarrow> Suc nPrev = iMin S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"\\<exists>n. I \\<rightarrow> n = iMin S\""], ["proof (prove)\nusing this:\n  I \\<rightarrow> Suc nPrev = iMin S\n\ngoal (1 subgoal):\n 1. \\<exists>n. I \\<rightarrow> n = iMin S", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. I \\<rightarrow> n = iMin S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"iMin S \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<rightarrow> n = iMin S\n\ngoal (1 subgoal):\n 1. iMin S \\<notin> S", "using s_iMin_i s_S"], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<rightarrow> n = iMin S\n  iMin S \\<in> I\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n\ngoal (1 subgoal):\n 1. iMin S \\<notin> S", "by blast"], ["proof (state)\nthis:\n  iMin S \\<notin> S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  iMin S \\<notin> S\n\ngoal (1 subgoal):\n 1. False", "using s_iMin_S"], ["proof (prove)\nusing this:\n  iMin S \\<notin> S\n  iMin S \\<in> S\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> iMin I < iMin S \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> iMin I < iMin S \\<Longrightarrow> False", "assume as:\"\\<not>(iMin I < iMin S)\""], ["proof (state)\nthis:\n  \\<not> iMin I < iMin S\n\ngoal (1 subgoal):\n 1. \\<not> iMin I < iMin S \\<Longrightarrow> False", "have \"iMin S = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin S = iMin I", "apply (insert s_subset S_not_empty as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> I; S \\<noteq> {}; \\<not> iMin I < iMin S\\<rbrakk>\n    \\<Longrightarrow> iMin S = iMin I", "apply (frule_tac A=S and B=I in iMin_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<subseteq> I; S \\<noteq> {}; \\<not> iMin I < iMin S\\<rbrakk>\n    \\<Longrightarrow> S \\<subseteq> I\n 2. \\<lbrakk>S \\<subseteq> I; S \\<noteq> {}; \\<not> iMin I < iMin S;\n     iMin I \\<le> iMin S\\<rbrakk>\n    \\<Longrightarrow> iMin S = iMin I", "by simp_all"], ["proof (state)\nthis:\n  iMin S = iMin I\n\ngoal (1 subgoal):\n 1. \\<not> iMin I < iMin S \\<Longrightarrow> False", "hence \"\\<exists>n. I \\<rightarrow> n \\<in> S\""], ["proof (prove)\nusing this:\n  iMin S = iMin I\n\ngoal (1 subgoal):\n 1. \\<exists>n. I \\<rightarrow> n \\<in> S", "apply (rule_tac x=0 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin S = iMin I \\<Longrightarrow> I \\<rightarrow> 0 \\<in> S", "apply (insert s_iMin_S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iMin S = iMin I; iMin S \\<in> S\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> 0 \\<in> S", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>n. I \\<rightarrow> n \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> iMin I < iMin S \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<rightarrow> n \\<in> S\n\ngoal (1 subgoal):\n 1. False", "using s_S"], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<rightarrow> n \\<in> S\n  S = {x \\<in> I. \\<nexists>n. I \\<rightarrow> n = x}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inext_nth_surj_on:\"surj_on (\\<lambda>n. I \\<rightarrow> n) UNIV I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_on (inext_nth I) UNIV I", "apply (simp add: surj_on_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>I. \\<exists>a. b = I \\<rightarrow> a", "by (insert inext_nth_surj_aux1[of I], blast)"], ["", "corollary in_imp_ex_inext_nth: \"x \\<in> I \\<Longrightarrow> \\<exists>n. x = I \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I \\<Longrightarrow> \\<exists>n. x = I \\<rightarrow> n", "apply (rule surj_onD[where A=UNIV, simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> surj_on (inext_nth I) UNIV ?B\n 2. x \\<in> I \\<Longrightarrow> x \\<in> ?B", "apply (rule inext_nth_surj_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> I", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_induct: \"\n  \\<lbrakk> P (iMin I); \\<And>n. \\<lbrakk> n \\<in> I; P n \\<rbrakk> \\<Longrightarrow> P (inext n I); n \\<in> I \\<rbrakk> \\<Longrightarrow> P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (iMin I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (inext n I);\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> P n", "apply (rule_tac f=\"\\<lambda>n. I \\<rightarrow> n\" and I=I in image_nat_induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>P (iMin I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (inext n I);\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> P (I \\<rightarrow> 0)\n 2. \\<And>na.\n       \\<lbrakk>P (iMin I);\n        \\<And>n.\n           \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (inext n I);\n        n \\<in> I; P (I \\<rightarrow> na)\\<rbrakk>\n       \\<Longrightarrow> P (I \\<rightarrow> Suc na)\n 3. \\<lbrakk>P (iMin I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (inext n I);\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> surj_on (inext_nth I) UNIV I\n 4. \\<lbrakk>P (iMin I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (inext n I);\n     n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I", "apply (simp add: inext_nth_closed[OF in_imp_not_empty] inext_nth_surj_on)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_surj_aux1:\"\n  finite I \\<Longrightarrow> { x \\<in> I. \\<not>(\\<exists>n. I \\<leftarrow> n = x)} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} = {}", "apply (case_tac \"I = {}\", blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "assume as_finite_i: \"finite I\""], ["proof (state)\nthis:\n  finite I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "let ?S = \"{x \\<in> I. \\<not> (\\<exists>n. I \\<leftarrow> n = x)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "assume as_S_not_empty: \"?S \\<noteq> {}\""], ["proof (state)\nthis:\n  {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "obtain S where s_S: \"S = ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "hence S_not_empty: \"S \\<noteq> {}\""], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "using as_S_not_empty"], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n  {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have s_not_ex: \"\\<And>x. \\<lbrakk> x \\<in> I; \\<not>(\\<exists>n. I \\<leftarrow> n = x) \\<rbrakk> \\<Longrightarrow> x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> I; \\<nexists>n. I \\<leftarrow> n = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "using s_S"], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> I; \\<nexists>n. I \\<leftarrow> n = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> I; \\<nexists>n. I \\<leftarrow> n = ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have s_subset:\"S \\<subseteq> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> I", "using s_S"], ["proof (prove)\nusing this:\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n\ngoal (1 subgoal):\n 1. S \\<subseteq> I", "by blast"], ["proof (state)\nthis:\n  S \\<subseteq> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have i_not_empty: \"I \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {}", "using as_S_not_empty"], ["proof (prove)\nusing this:\n  {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. I \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  I \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "from as_finite_i"], ["proof (chain)\npicking this:\n  finite I", "have S_finite: \"finite S\""], ["proof (prove)\nusing this:\n  finite I\n\ngoal (1 subgoal):\n 1. finite S", "using s_subset"], ["proof (prove)\nusing this:\n  finite I\n  S \\<subseteq> I\n\ngoal (1 subgoal):\n 1. finite S", "by (blast intro: finite_subset)"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have s_Max_S: \"Max S \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max S \\<in> S", "using S_not_empty S_finite"], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n  finite S\n\ngoal (1 subgoal):\n 1. Max S \\<in> S", "by simp"], ["proof (state)\nthis:\n  Max S \\<in> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "hence s_Max_i: \"Max S \\<in> I\""], ["proof (prove)\nusing this:\n  Max S \\<in> S\n\ngoal (1 subgoal):\n 1. Max S \\<in> I", "using s_subset"], ["proof (prove)\nusing this:\n  Max S \\<in> S\n  S \\<subseteq> I\n\ngoal (1 subgoal):\n 1. Max S \\<in> I", "by blast"], ["proof (state)\nthis:\n  Max S \\<in> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume as:\"Max S < Max I\""], ["proof (state)\nthis:\n  Max S < Max I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "obtain next' where s_next: \"next' = inext (Max S) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>next'.\n        next' = inext (Max S) I \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  next' = inext (Max S) I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have s_next_in: \"next' \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. next' \\<in> I", "by (simp add: s_next inext_closed s_Max_i)"], ["proof (state)\nthis:\n  next' \\<in> I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have s_next_prev_max: \"iprev next' I = Max S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev next' I = Max S", "apply (simp add: s_next)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iprev (inext (Max S) I) I = Max S", "apply (rule iprev_inext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max S \\<noteq> Max I \\<or> infinite I", "apply (insert as, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  iprev next' I = Max S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have s_next_max_1: \"Max S < next'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max S < next'", "apply (simp add: s_next)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max S < inext (Max S) I", "apply (rule inext_mono2[of \"Max S\" I])"], ["proof (prove)\ngoal (2 subgoals):\n 1. Max S \\<in> I\n 2. \\<exists>x\\<in>I. Max S < x", "apply (rule s_Max_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. Max S < x", "apply (rule_tac x=\"Max I\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Max S < Max I\n 2. Max I \\<in> I", "apply (rule as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max I \\<in> I", "apply (simp add: as_finite_i i_not_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Max S < next'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence next_not_in_s: \"next' \\<notin> S\""], ["proof (prove)\nusing this:\n  Max S < next'\n\ngoal (1 subgoal):\n 1. next' \\<notin> S", "using S_finite S_not_empty"], ["proof (prove)\nusing this:\n  Max S < next'\n  finite S\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. next' \\<notin> S", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Max S < next'; finite S; S \\<noteq> {}; next' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> False", "apply (drule Max_ge[of _ next'])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Max S < next'; S \\<noteq> {}; next' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> next' \\<in> S\n 2. \\<lbrakk>Max S < next'; S \\<noteq> {}; next' \\<in> S;\n     next' \\<le> Max S\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  next' \\<notin> S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \"\\<exists>n. I \\<leftarrow> n = next'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. I \\<leftarrow> n = next'", "by (insert next_not_in_s s_not_ex[of next'] s_next_in, blast)"], ["proof (state)\nthis:\n  \\<exists>n. I \\<leftarrow> n = next'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. I \\<leftarrow> n = next'", "obtain nNext where s_nNext: \"I \\<leftarrow> nNext = next'\""], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<leftarrow> n = next'\n\ngoal (1 subgoal):\n 1. (\\<And>nNext.\n        I \\<leftarrow> nNext = next' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  I \\<leftarrow> nNext = next'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"I \\<leftarrow> (Suc nNext) = iprev next' I\""], ["proof (prove)\nusing this:\n  I \\<leftarrow> nNext = next'\n\ngoal (1 subgoal):\n 1. I \\<leftarrow> Suc nNext = iprev next' I", "by simp"], ["proof (state)\nthis:\n  I \\<leftarrow> Suc nNext = iprev next' I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"I \\<leftarrow> (Suc nNext) = Max S\""], ["proof (prove)\nusing this:\n  I \\<leftarrow> Suc nNext = iprev next' I\n\ngoal (1 subgoal):\n 1. I \\<leftarrow> Suc nNext = Max S", "using s_next_prev_max"], ["proof (prove)\nusing this:\n  I \\<leftarrow> Suc nNext = iprev next' I\n  iprev next' I = Max S\n\ngoal (1 subgoal):\n 1. I \\<leftarrow> Suc nNext = Max S", "by simp"], ["proof (state)\nthis:\n  I \\<leftarrow> Suc nNext = Max S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"\\<exists>n. I \\<leftarrow> n = Max S\""], ["proof (prove)\nusing this:\n  I \\<leftarrow> Suc nNext = Max S\n\ngoal (1 subgoal):\n 1. \\<exists>n. I \\<leftarrow> n = Max S", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. I \\<leftarrow> n = Max S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \"Max S \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<leftarrow> n = Max S\n\ngoal (1 subgoal):\n 1. Max S \\<notin> S", "using s_Max_i s_S"], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<leftarrow> n = Max S\n  Max S \\<in> I\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n\ngoal (1 subgoal):\n 1. Max S \\<notin> S", "by blast"], ["proof (state)\nthis:\n  Max S \\<notin> S\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  Max S \\<notin> S\n\ngoal (1 subgoal):\n 1. False", "using s_Max_S"], ["proof (prove)\nusing this:\n  Max S \\<notin> S\n  Max S \\<in> S\n\ngoal (1 subgoal):\n 1. False", "by blast+"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> Max S < Max I \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Max S < Max I \\<Longrightarrow> False", "assume as:\"\\<not>(Max S < Max I)\""], ["proof (state)\nthis:\n  \\<not> Max S < Max I\n\ngoal (1 subgoal):\n 1. \\<not> Max S < Max I \\<Longrightarrow> False", "have \"Max S = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max S = Max I", "apply (insert s_subset S_not_empty as_finite_i as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> I; S \\<noteq> {}; finite I;\n     \\<not> Max S < Max I\\<rbrakk>\n    \\<Longrightarrow> Max S = Max I", "apply (drule Max_subset[of _ I])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<subseteq> I; finite I; \\<not> Max S < Max I\\<rbrakk>\n    \\<Longrightarrow> S \\<subseteq> I\n 2. \\<lbrakk>S \\<subseteq> I; finite I; \\<not> Max S < Max I\\<rbrakk>\n    \\<Longrightarrow> finite I\n 3. \\<lbrakk>S \\<subseteq> I; finite I; \\<not> Max S < Max I;\n     Max S \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> Max S = Max I", "by simp_all"], ["proof (state)\nthis:\n  Max S = Max I\n\ngoal (1 subgoal):\n 1. \\<not> Max S < Max I \\<Longrightarrow> False", "hence \"\\<exists>n. I \\<leftarrow> n \\<in> S\""], ["proof (prove)\nusing this:\n  Max S = Max I\n\ngoal (1 subgoal):\n 1. \\<exists>n. I \\<leftarrow> n \\<in> S", "apply (rule_tac x=0 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max S = Max I \\<Longrightarrow> I \\<leftarrow> 0 \\<in> S", "apply (insert s_Max_S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Max S = Max I; Max S \\<in> S\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> 0 \\<in> S", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>n. I \\<leftarrow> n \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> Max S < Max I \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<leftarrow> n \\<in> S\n\ngoal (1 subgoal):\n 1. False", "using s_S"], ["proof (prove)\nusing this:\n  \\<exists>n. I \\<leftarrow> n \\<in> S\n  S = {x \\<in> I. \\<nexists>n. I \\<leftarrow> n = x}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iprev_nth_surj_on: \"finite I \\<Longrightarrow> surj_on (\\<lambda>n. I \\<leftarrow> n) UNIV I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> surj_on (iprev_nth I) UNIV I", "apply (simp add: surj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    \\<forall>b\\<in>I. \\<exists>a. b = I \\<leftarrow> a", "by (insert iprev_nth_surj_aux1[of I], blast)"], ["", "corollary in_imp_ex_iprev_nth: \"\n  \\<lbrakk> finite I;  x \\<in> I \\<rbrakk> \\<Longrightarrow> \\<exists>n. x = I \\<leftarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; x \\<in> I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n. x = I \\<leftarrow> n", "apply (rule surj_onD[of _ UNIV I, simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; x \\<in> I\\<rbrakk>\n    \\<Longrightarrow> surj_on (iprev_nth I) UNIV I\n 2. \\<lbrakk>finite I; x \\<in> I\\<rbrakk> \\<Longrightarrow> x \\<in> I", "apply (rule iprev_nth_surj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; x \\<in> I\\<rbrakk> \\<Longrightarrow> finite I\n 2. \\<lbrakk>finite I; x \\<in> I\\<rbrakk> \\<Longrightarrow> x \\<in> I", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_induct: \"\n  \\<lbrakk> P (Max I); \\<And>n. \\<lbrakk> n \\<in> I; P n \\<rbrakk> \\<Longrightarrow> P (iprev n I); finite I; n \\<in> I \\<rbrakk> \\<Longrightarrow> P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (Max I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (iprev n I);\n     finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> P n", "apply (rule_tac f=\"\\<lambda>n. I \\<leftarrow> n\" and I=I in image_nat_induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>P (Max I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (iprev n I);\n     finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> P (I \\<leftarrow> 0)\n 2. \\<And>na.\n       \\<lbrakk>P (Max I);\n        \\<And>n.\n           \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (iprev n I);\n        finite I; n \\<in> I; P (I \\<leftarrow> na)\\<rbrakk>\n       \\<Longrightarrow> P (I \\<leftarrow> Suc na)\n 3. \\<lbrakk>P (Max I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (iprev n I);\n     finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> surj_on (iprev_nth I) UNIV I\n 4. \\<lbrakk>P (Max I);\n     \\<And>n.\n        \\<lbrakk>n \\<in> I; P n\\<rbrakk> \\<Longrightarrow> P (iprev n I);\n     finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> n \\<in> I", "apply (simp add: iprev_nth_closed[OF _ in_imp_not_empty] iprev_nth_surj_on)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Natural intervals with \\<open>inext\\<close> and \\<open>iprev\\<close>\\<close>"], ["", "lemma inext_atLeast: \"n \\<le> t \\<Longrightarrow> inext t {n..} = Suc t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> t \\<Longrightarrow> inext t {n..} = Suc t", "apply (unfold inext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> t \\<Longrightarrow>\n    (if t \\<in> {n..} \\<and> {n..} \\<down>> t \\<noteq> {}\n     then iMin ({n..} \\<down>> t) else t) =\n    Suc t", "apply (subgoal_tac \"Suc t \\<in> {n..} \\<down>> t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<le> t; Suc t \\<in> {n..} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> (if t \\<in> {n..} \\<and> {n..} \\<down>> t \\<noteq> {}\n                       then iMin ({n..} \\<down>> t) else t) =\n                      Suc t\n 2. n \\<le> t \\<Longrightarrow> Suc t \\<in> {n..} \\<down>> t", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<le> t \\<Longrightarrow> Suc t \\<in> {n..} \\<down>> t\n 2. \\<lbrakk>n \\<le> t; Suc t \\<in> {n..} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> (if t \\<in> {n..} \\<and> {n..} \\<down>> t \\<noteq> {}\n                       then iMin ({n..} \\<down>> t) else t) =\n                      Suc t", "apply (simp add: cut_greater_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> t; Suc t \\<in> {n..} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> (if t \\<in> {n..} \\<and> {n..} \\<down>> t \\<noteq> {}\n                       then iMin ({n..} \\<down>> t) else t) =\n                      Suc t", "apply (simp add: in_imp_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> t; Suc t \\<in> {n..} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> iMin ({n..} \\<down>> t) = Suc t", "apply (rule iMin_equality, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n \\<le> t; Suc t \\<in> {n..} \\<down>> t;\n        x \\<in> {n..} \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> Suc t \\<le> x", "apply (simp add: cut_greater_mem_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_atLeast': \"n \\<le> t \\<Longrightarrow> iprev (Suc t) {n..} = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> t \\<Longrightarrow> iprev (Suc t) {n..} = t", "apply (rule subst[OF inext_atLeast], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> t \\<Longrightarrow> iprev (inext t {n..}) {n..} = t", "apply (rule iprev_inext_infin[OF infinite_atLeast])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_atLeast: \"n < t  \\<Longrightarrow> iprev t {n..} = t - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < t \\<Longrightarrow> iprev t {n..} = t - Suc 0", "by (insert iprev_atLeast'[of n \"t - Suc 0\"], simp)"], ["", "lemma inext_atMost: \"t < n \\<Longrightarrow> inext t {..n} = Suc t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < n \\<Longrightarrow> inext t {..n} = Suc t", "apply (unfold inext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t < n \\<Longrightarrow>\n    (if t \\<in> {..n} \\<and> {..n} \\<down>> t \\<noteq> {}\n     then iMin ({..n} \\<down>> t) else t) =\n    Suc t", "apply (subgoal_tac \"Suc t \\<in> {..n} \\<down>> t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < n; Suc t \\<in> {..n} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> (if t \\<in> {..n} \\<and> {..n} \\<down>> t \\<noteq> {}\n                       then iMin ({..n} \\<down>> t) else t) =\n                      Suc t\n 2. t < n \\<Longrightarrow> Suc t \\<in> {..n} \\<down>> t", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. t < n \\<Longrightarrow> Suc t \\<in> {..n} \\<down>> t\n 2. \\<lbrakk>t < n; Suc t \\<in> {..n} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> (if t \\<in> {..n} \\<and> {..n} \\<down>> t \\<noteq> {}\n                       then iMin ({..n} \\<down>> t) else t) =\n                      Suc t", "apply (simp add: cut_greater_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t < n; Suc t \\<in> {..n} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> (if t \\<in> {..n} \\<and> {..n} \\<down>> t \\<noteq> {}\n                       then iMin ({..n} \\<down>> t) else t) =\n                      Suc t", "apply (simp add: in_imp_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t < n; Suc t \\<in> {..n} \\<down>> t\\<rbrakk>\n    \\<Longrightarrow> iMin ({..n} \\<down>> t) = Suc t", "apply (rule iMin_equality, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t < n; Suc t \\<in> {..n} \\<down>> t;\n        x \\<in> {..n} \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> Suc t \\<le> x", "apply (simp add: cut_greater_mem_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_atMost: \"t \\<le> n \\<Longrightarrow> iprev t {..n} = t - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> n \\<Longrightarrow> iprev t {..n} = t - Suc 0", "apply (case_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<le> n; t = 0\\<rbrakk>\n    \\<Longrightarrow> iprev t {..n} = t - Suc 0\n 2. \\<And>nat.\n       \\<lbrakk>t \\<le> n; t = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev t {..n} = t - Suc 0", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow> iprev 0 {..n} = 0\n 2. \\<And>nat.\n       \\<lbrakk>t \\<le> n; t = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev t {..n} = t - Suc 0", "apply (rule subst[OF iMin_atMost[of n]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow> iprev (iMin {..n}) {..n} = iMin {..n}\n 2. \\<And>nat.\n       \\<lbrakk>t \\<le> n; t = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev t {..n} = t - Suc 0", "apply (rule iprev_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>t \\<le> n; t = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev t {..n} = t - Suc 0", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>Suc nat \\<le> n; t = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev (Suc nat) {..n} = nat", "apply (drule Suc_le_lessD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>t = Suc nat; nat < n\\<rbrakk>\n       \\<Longrightarrow> iprev (Suc nat) {..n} = nat", "apply (rule subst[OF inext_atMost], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>t = Suc nat; nat < n\\<rbrakk>\n       \\<Longrightarrow> iprev (inext nat {..n}) {..n} = nat", "apply (simp add: Max_atMost iprev_inext_fin)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_lessThan: \"Suc t < n \\<Longrightarrow> inext t {..<n} = Suc t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc t < n \\<Longrightarrow> inext t {..<n} = Suc t", "apply (rule subst[OF Suc_pred, of n], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc t < n \\<Longrightarrow> inext t {..<Suc (n - Suc 0)} = Suc t", "apply (subst lessThan_Suc_atMost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc t < n \\<Longrightarrow> inext t {..n - Suc 0} = Suc t", "apply (simp add: inext_atMost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_lessThan: \"t < n \\<Longrightarrow> iprev t {..<n} = t - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < n \\<Longrightarrow> iprev t {..<n} = t - Suc 0", "apply (case_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>t < n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev t {..<n} = t - Suc 0", "apply (simp add: lessThan_Suc_atMost iprev_atMost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_atLeastAtMost: \"\\<lbrakk> m \\<le> t; t < n \\<rbrakk> \\<Longrightarrow> inext t {m..n} = Suc t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> t; t < n\\<rbrakk>\n    \\<Longrightarrow> inext t {m..n} = Suc t", "by (simp add: atLeastAtMost_def cut_le_Int_conv[symmetric] inext_atLeast inext_cut_le_conv)"], ["", "lemma iprev_atLeastAtMost: \"\\<lbrakk> m < t; t \\<le> n \\<rbrakk> \\<Longrightarrow> iprev t {m..n} = t - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < t; t \\<le> n\\<rbrakk>\n    \\<Longrightarrow> iprev t {m..n} = t - Suc 0", "by (simp add: atLeastAtMost_def cut_le_Int_conv[symmetric] iprev_atLeast iprev_cut_le_conv)"], ["", "lemma iprev_atLeastAtMost': \"\\<lbrakk> m \\<le> t; t < n \\<rbrakk> \\<Longrightarrow> iprev (Suc t) {m..n} = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> t; t < n\\<rbrakk>\n    \\<Longrightarrow> iprev (Suc t) {m..n} = t", "by (simp add: iprev_atLeastAtMost[of _ \"Suc t\"])"], ["", "lemma inext_nth_atLeast : \"{n..} \\<rightarrow> a = n + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {n..} \\<rightarrow> a = n + a", "apply (induct a, simp add: iMin_atLeast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       {n..} \\<rightarrow> a = n + a \\<Longrightarrow>\n       {n..} \\<rightarrow> Suc a = n + Suc a", "apply (simp add: inext_atLeast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_atLeastAtMost: \"\\<lbrakk> a \\<le> n - m; m \\<le> n \\<rbrakk> \\<Longrightarrow> {m..n} \\<rightarrow> a = m + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> n - m; m \\<le> n\\<rbrakk>\n    \\<Longrightarrow> {m..n} \\<rightarrow> a = m + a", "apply (induct a, simp add: iMin_atLeastAtMost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>a \\<le> n - m; m \\<le> n\\<rbrakk>\n                \\<Longrightarrow> {m..n} \\<rightarrow> a = m + a;\n        Suc a \\<le> n - m; m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> {m..n} \\<rightarrow> Suc a = m + Suc a", "apply (simp add: inext_atLeastAtMost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_atLeastAtMost: \"\\<lbrakk> a \\<le> n - m; m \\<le> n \\<rbrakk> \\<Longrightarrow> {m..n} \\<leftarrow> a = n - a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> n - m; m \\<le> n\\<rbrakk>\n    \\<Longrightarrow> {m..n} \\<leftarrow> a = n - a", "apply (induct a, simp add: Max_atLeastAtMost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<lbrakk>a \\<le> n - m; m \\<le> n\\<rbrakk>\n                \\<Longrightarrow> {m..n} \\<leftarrow> a = n - a;\n        Suc a \\<le> n - m; m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> {m..n} \\<leftarrow> Suc a = n - Suc a", "apply (simp add: iprev_atLeastAtMost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_atMost: \"a \\<le> n \\<Longrightarrow> {..n} \\<rightarrow> a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> n \\<Longrightarrow> {..n} \\<rightarrow> a = a", "apply (insert inext_nth_atLeastAtMost[of a n 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> n;\n     \\<lbrakk>a \\<le> n - 0; 0 \\<le> n\\<rbrakk>\n     \\<Longrightarrow> {0..n} \\<rightarrow> a = 0 + a\\<rbrakk>\n    \\<Longrightarrow> {..n} \\<rightarrow> a = a", "apply (simp add: atMost_atLeastAtMost_0_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_atMost: \"a \\<le> n \\<Longrightarrow> {..n} \\<leftarrow> a = n - a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> n \\<Longrightarrow> {..n} \\<leftarrow> a = n - a", "apply (insert iprev_nth_atLeastAtMost[of a n 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> n;\n     \\<lbrakk>a \\<le> n - 0; 0 \\<le> n\\<rbrakk>\n     \\<Longrightarrow> {0..n} \\<leftarrow> a = n - a\\<rbrakk>\n    \\<Longrightarrow> {..n} \\<leftarrow> a = n - a", "apply (simp add: atMost_atLeastAtMost_0_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_lessThan : \"a < n \\<Longrightarrow> {..<n} \\<rightarrow> a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < n \\<Longrightarrow> {..<n} \\<rightarrow> a = a", "apply (case_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>a < n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> {..<n} \\<rightarrow> a = a", "apply (simp add: lessThan_Suc_atMost inext_nth_atMost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_lessThan: \"a < n \\<Longrightarrow> {..<n} \\<leftarrow> a = n - Suc a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < n \\<Longrightarrow> {..<n} \\<leftarrow> a = n - Suc a", "apply (case_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>a < n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> {..<n} \\<leftarrow> a = n - Suc a", "apply (simp add: lessThan_Suc_atMost iprev_nth_atMost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_UNIV: \"UNIV \\<rightarrow> a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV \\<rightarrow> a = a", "by (simp add: inext_nth_atLeast del: atLeast_0 add: atLeast_0[symmetric])"], ["", "subsection \\<open>Further result for \\<open>inext_nth\\<close> and \\<open>iprev_nth\\<close>\\<close>"], ["", "lemma inext_iprev_nth_Suc: \"\n  iMin I \\<noteq> I \\<leftarrow> n \\<Longrightarrow> inext (I \\<leftarrow> Suc n) I = I \\<leftarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMin I \\<noteq> I \\<leftarrow> n \\<Longrightarrow>\n    inext (I \\<leftarrow> Suc n) I = I \\<leftarrow> n", "by (simp add: inext_iprev)"], ["", "lemma inext_iprev_nth_pred: \"\n  \\<lbrakk> finite I; iMin I \\<noteq> I \\<leftarrow> (n - Suc 0) \\<rbrakk> \\<Longrightarrow>\n  inext (I \\<leftarrow> n) I = I \\<leftarrow> (n - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; iMin I \\<noteq> I \\<leftarrow> (n - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> inext (I \\<leftarrow> n) I =\n                      I \\<leftarrow> (n - Suc 0)", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; iMin I \\<noteq> I \\<leftarrow> (n - Suc 0);\n     n = 0\\<rbrakk>\n    \\<Longrightarrow> inext (I \\<leftarrow> n) I =\n                      I \\<leftarrow> (n - Suc 0)\n 2. \\<And>nat.\n       \\<lbrakk>finite I; iMin I \\<noteq> I \\<leftarrow> (n - Suc 0);\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<leftarrow> n) I =\n                         I \\<leftarrow> (n - Suc 0)", "apply (simp add: inext_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>finite I; iMin I \\<noteq> I \\<leftarrow> (n - Suc 0);\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> inext (I \\<leftarrow> n) I =\n                         I \\<leftarrow> (n - Suc 0)", "apply (simp add: inext_iprev)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_inext_nth_Suc: \"\n  I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I \\<Longrightarrow> iprev (I \\<rightarrow> Suc n) I = I \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<rightarrow> n \\<noteq> Max I \\<or> infinite I \\<Longrightarrow>\n    iprev (I \\<rightarrow> Suc n) I = I \\<rightarrow> n", "by (simp add: iprev_inext)"], ["", "lemma iprev_inext_nth_pred: \"\n  I \\<rightarrow> (n - Suc 0) \\<noteq> Max I \\<or> infinite I \\<Longrightarrow>\n  iprev (I \\<rightarrow> n) I = I \\<rightarrow> (n - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<rightarrow> (n - Suc 0) \\<noteq> Max I \\<or>\n    infinite I \\<Longrightarrow>\n    iprev (I \\<rightarrow> n) I = I \\<rightarrow> (n - Suc 0)", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<rightarrow> (n - Suc 0) \\<noteq> Max I \\<or> infinite I;\n     n = 0\\<rbrakk>\n    \\<Longrightarrow> iprev (I \\<rightarrow> n) I =\n                      I \\<rightarrow> (n - Suc 0)\n 2. \\<And>nat.\n       \\<lbrakk>I \\<rightarrow> (n - Suc 0) \\<noteq> Max I \\<or> infinite I;\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev (I \\<rightarrow> n) I =\n                         I \\<rightarrow> (n - Suc 0)", "apply (simp add: iprev_iMin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>I \\<rightarrow> (n - Suc 0) \\<noteq> Max I \\<or> infinite I;\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> iprev (I \\<rightarrow> n) I =\n                         I \\<rightarrow> (n - Suc 0)", "apply (simp add: iprev_inext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inext_nth_imirror_iprev_nth_conv: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  (imirror I) \\<rightarrow> n = mirror_elem (I \\<leftarrow> n) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n =\n                      mirror_elem (I \\<leftarrow> n) I", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> 0 =\n                      mirror_elem (I \\<leftarrow> 0) I\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> imirror I \\<rightarrow> n =\n                                  mirror_elem (I \\<leftarrow> n) I;\n        finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> imirror I \\<rightarrow> Suc n =\n                         mirror_elem (I \\<leftarrow> Suc n) I", "apply (simp add: imirror_iMin mirror_elem_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> imirror I \\<rightarrow> n =\n                                  mirror_elem (I \\<leftarrow> n) I;\n        finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> imirror I \\<rightarrow> Suc n =\n                         mirror_elem (I \\<leftarrow> Suc n) I", "apply (simp add: inext_imirror_iprev_conv' iprev_nth_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary inext_nth_imirror_iprev_nth_conv2: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  mirror_elem ((imirror I) \\<leftarrow> n) I = I \\<rightarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<leftarrow> n) I =\n                      I \\<rightarrow> n", "apply (frule inext_nth_imirror_iprev_nth_conv[OF imirror_finite imirror_not_empty, of _ n], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     imirror (imirror I) \\<rightarrow> n =\n     mirror_elem (imirror I \\<leftarrow> n) (imirror I)\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<leftarrow> n) I =\n                      I \\<rightarrow> n", "apply (simp add: imirror_imirror_ident mirror_elem_imirror)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_imirror_inext_nth_conv: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  (imirror I) \\<leftarrow> n = mirror_elem (I \\<rightarrow> n) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<leftarrow> n =\n                      mirror_elem (I \\<rightarrow> n) I", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<leftarrow> 0 =\n                      mirror_elem (I \\<rightarrow> 0) I\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> imirror I \\<leftarrow> n =\n                                  mirror_elem (I \\<rightarrow> n) I;\n        finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> imirror I \\<leftarrow> Suc n =\n                         mirror_elem (I \\<rightarrow> Suc n) I", "apply (simp add: imirror_Max mirror_elem_Min)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n                \\<Longrightarrow> imirror I \\<leftarrow> n =\n                                  mirror_elem (I \\<rightarrow> n) I;\n        finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> imirror I \\<leftarrow> Suc n =\n                         mirror_elem (I \\<rightarrow> Suc n) I", "apply (simp add: iprev_imirror_inext_conv' inext_nth_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iprev_nth_imirror_inext_nth_conv2: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  mirror_elem ((imirror I) \\<rightarrow> n) I = (I \\<leftarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) I =\n                      I \\<leftarrow> n", "apply (frule iprev_nth_imirror_inext_nth_conv[OF imirror_finite imirror_not_empty, of _ n], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {};\n     imirror (imirror I) \\<leftarrow> n =\n     mirror_elem (imirror I \\<rightarrow> n) (imirror I)\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) I =\n                      I \\<leftarrow> n", "apply (simp add: imirror_imirror_ident mirror_elem_imirror)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_card_greater_iMin: \"Suc n < card I \\<Longrightarrow> iMin I < I \\<leftarrow> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n < card I \\<Longrightarrow> iMin I < I \\<leftarrow> n", "apply (subgoal_tac \"I \\<noteq> {}\" \"finite I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < I \\<leftarrow> n\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> finite I\n 3. Suc n < card I \\<Longrightarrow> I \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> finite I\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < I \\<leftarrow> n\n 3. Suc n < card I \\<Longrightarrow> I \\<noteq> {}", "apply (rule card_gr0_imp_finite, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < I \\<leftarrow> n\n 2. Suc n < card I \\<Longrightarrow> I \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. Suc n < card I \\<Longrightarrow> I \\<noteq> {}\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < I \\<leftarrow> n", "apply (rule card_gr0_imp_not_empty, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < I \\<leftarrow> n", "apply (subst iprev_nth_imirror_inext_nth_conv2[symmetric], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> iMin I < mirror_elem (imirror I \\<rightarrow> n) I", "apply (subst mirror_elem_Max[symmetric], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (Max I) I\n                      < mirror_elem (imirror I \\<rightarrow> n) I", "apply (subst mirror_elem_imirror[symmetric], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (Max I) (imirror I)\n                      < mirror_elem (imirror I \\<rightarrow> n) I", "apply (subst mirror_elem_imirror[symmetric], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (Max I) (imirror I)\n                      < mirror_elem (imirror I \\<rightarrow> n) (imirror I)", "apply (frule imirror_finite, frule imirror_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (Max I) (imirror I)\n                      < mirror_elem (imirror I \\<rightarrow> n) (imirror I)", "apply (rule mirror_elem_less_conv[THEN iffD2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> finite (imirror I)\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n \\<in> imirror I\n 3. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> imirror I\n 4. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n < Max I", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n \\<in> imirror I\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> imirror I\n 3. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n < Max I", "apply (rule inext_nth_closed, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> imirror I\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n < Max I", "apply (rule subst[OF imirror_Max], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I) \\<in> imirror I\n 2. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n < Max I", "apply (rule Max_in, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n < Max I", "apply (rule subst[OF imirror_Max], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc n < card I; I \\<noteq> {}; finite I; finite (imirror I);\n     imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<rightarrow> n < Max (imirror I)", "apply (simp add: inext_nth_card_less_Max imirror_card)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_card_iMin: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> n = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> n = iMin I", "apply (subst iprev_nth_imirror_inext_nth_conv2[symmetric], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) I = iMin I", "apply (subst mirror_elem_Max[symmetric], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) I =\n                      mirror_elem (Max I) I", "apply (subst mirror_elem_imirror[symmetric], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) (imirror I) =\n                      mirror_elem (Max I) I", "apply (subst mirror_elem_imirror[symmetric], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) (imirror I) =\n                      mirror_elem (Max I) (imirror I)", "apply (rule subst[OF imirror_Max], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) (imirror I) =\n                      mirror_elem (Max (imirror I)) (imirror I)", "apply (frule imirror_finite, frule imirror_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n;\n     finite (imirror I); imirror I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (imirror I \\<rightarrow> n) (imirror I) =\n                      mirror_elem (Max (imirror I)) (imirror I)", "apply (simp add: mirror_elem_eq_conv' inext_nth_closed inext_nth_card_Max imirror_card)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iprev_nth_card_iMin': \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I - Suc 0 \\<le> n \\<rbrakk> \\<Longrightarrow> I \\<leftarrow> n = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I - Suc 0 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> I \\<leftarrow> n = iMin I", "by (simp add: iprev_nth_card_iMin)"], ["", "end"]]}