{"file_name": "/home/qj213/afp-2021-10-22/thys/List-Infinite/ListInf/ListInf.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List-Infinite", "problem_names": ["lemmas expand_ilist_eq = fun_eq_iff", "lemmas ilist_eq_iff = expand_ilist_eq", "lemma i_append_nth: \"(xs \\<frown> f) n = (if n < length xs then xs ! n else f (n - length xs))\"", "lemma i_append_nth1[simp]: \"n < length xs \\<Longrightarrow> (xs \\<frown> f) n = xs ! n\"", "lemma i_append_nth2[simp]: \"length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) n = f (n - length xs)\"", "lemma i_append_Nil[simp]: \"[] \\<frown> f = f\"", "lemma i_append_assoc[simp]: \"xs \\<frown> (ys \\<frown> f) = (xs @ ys) \\<frown> f\"", "lemma i_append_Cons: \"(x # xs) \\<frown> f = [x] \\<frown> (xs \\<frown> f)\"", "lemma i_append_eq_i_append_conv[simp]: \"\n  length xs = length ys \\<Longrightarrow>\n  (xs \\<frown> f = ys \\<frown> g) = (xs = ys \\<and> f = g)\"", "lemma i_append_eq_i_append_conv2_aux: \"\n  \\<lbrakk> xs \\<frown> f = ys \\<frown> g; length xs \\<le> length ys \\<rbrakk> \\<Longrightarrow>\n  \\<exists>zs. xs @ zs = ys \\<and> f = zs \\<frown> g\"", "lemma i_append_eq_i_append_conv2: \"\n  (xs \\<frown> f = ys \\<frown> g) =\n  (\\<exists>zs. xs = ys @ zs \\<and> zs \\<frown> f = g \\<or> xs @ zs = ys \\<and> f = zs \\<frown> g)\"", "lemma same_i_append_eq[iff]: \"(xs \\<frown> f = xs \\<frown> g) = (f = g)\"", "lemma NOT_i_append_same_eq: \"\n  \\<not>(\\<forall>xs ys f. (xs \\<frown> (f::(nat \\<Rightarrow> nat)) = ys \\<frown> f) = (xs = ys))\"", "lemma i_append_hd: \"(xs \\<frown> f) 0 = (if xs = [] then f 0 else hd xs)\"", "lemma i_append_hd2[simp]: \"xs \\<noteq> [] \\<Longrightarrow> (xs \\<frown> f) 0 = hd xs\"", "lemma eq_Nil_i_appendI: \"f = g \\<Longrightarrow> f = [] \\<frown> g\"", "lemma i_append_eq_i_appendI: \"\n  \\<lbrakk> xs @ xs' = ys; f = xs' \\<frown> g \\<rbrakk> \\<Longrightarrow> xs \\<frown> f = ys \\<frown> g\"", "lemma o_ext: \"\n  (\\<forall>x. (x \\<in> range h \\<longrightarrow> f x = g x)) \\<Longrightarrow> f \\<circ> h = g \\<circ> h\"", "lemma i_append_o[simp]: \"g \\<circ> (xs \\<frown> f) = (map g xs) \\<frown> (g \\<circ> f)\"", "lemma o_eq_conv: \"(f \\<circ> h = g \\<circ> h) = (\\<forall>x\\<in>range h. f x = g x)\"", "lemma o_cong: \"\n  \\<lbrakk> h = i; \\<And>x. x \\<in> range i \\<Longrightarrow> f x = g x \\<rbrakk> \\<Longrightarrow> f \\<circ> h = f \\<circ> i\"", "lemma ex_o_conv: \"(\\<exists>h. g = f \\<circ> h) = (\\<forall>y\\<in>range g. \\<exists>x. y = f x)\"", "lemma o_inj_on: \"\n  \\<lbrakk> f \\<circ> g = f \\<circ> h; inj_on f (range g \\<union> range h) \\<rbrakk> \\<Longrightarrow> g = h\"", "lemma inj_on_o_eq_o: \"\n  inj_on f (range g \\<union> range h) \\<Longrightarrow>\n  (f \\<circ> g = f \\<circ> h) = (g = h)\"", "lemma o_injective: \"\\<lbrakk> f \\<circ> g = f \\<circ> h; inj f \\<rbrakk> \\<Longrightarrow> g = h\"", "lemma inj_o_eq_o: \"inj f \\<Longrightarrow> (f \\<circ> g = f \\<circ> h) = (g = h)\"", "lemma inj_oI: \"inj f \\<Longrightarrow> inj (\\<lambda>g. f \\<circ> g)\"", "lemma inj_oD: \"inj (\\<lambda>g. f \\<circ> g) \\<Longrightarrow> inj f\"", "lemma inj_o[iff]: \"inj (\\<lambda>g. f \\<circ> g) = inj f\"", "lemma inj_on_oI: \"\n  inj_on f (\\<Union> ((\\<lambda>f. range f) ` A)) \\<Longrightarrow> inj_on (\\<lambda>g. f \\<circ> g) A\"", "lemma o_idI: \"\\<forall>x. x \\<in> range g \\<longrightarrow> f x = x \\<Longrightarrow> f \\<circ> g = g\"", "lemma o_fun_upd[simp]: \"y \\<notin> range g \\<Longrightarrow> f (y := x) \\<circ> g = f \\<circ> g\"", "lemma range_i_append[simp]: \"range (xs \\<frown> f) = set xs \\<union> range f\"", "lemma set_subset_i_append: \"set xs \\<subseteq> range (xs \\<frown> f)\"", "lemma range_subset_i_append: \"range f \\<subseteq> range (xs \\<frown> f)\"", "lemma range_ConsD: \"y \\<in> range ([x] \\<frown> f) \\<Longrightarrow> y = x \\<or> y \\<in> range f\"", "lemma range_o [simp]: \"range (f \\<circ> g) = f ` range g\"", "lemma in_range_conv_decomp: \"\n  (x \\<in> range f) = (\\<exists>xs g. f = xs \\<frown> ([x] \\<frown> g))\"", "lemma i_append_nth_Cons_0[simp]: \"((x # xs) \\<frown> f) 0 = x\"", "lemma i_append_nth_Cons_Suc[simp]:\n  \"((x # xs) \\<frown> f) (Suc n) = (xs \\<frown> f) n\"", "lemma i_append_nth_Cons: \"\n  ([x] \\<frown> f) n = (case n of 0 \\<Rightarrow> x | Suc k \\<Rightarrow> f k)\"", "lemma i_append_nth_Cons': \"\n  ([x] \\<frown> f) n = (if n = 0 then x else f (n - Suc 0))\"", "lemma i_append_nth_length[simp]: \"(xs \\<frown> f) (length xs) = f 0\"", "lemma i_append_nth_length_plus[simp]: \"(xs \\<frown> f) (length xs + n) = f n\"", "lemma range_iff: \"(y \\<in> range f) = (\\<exists>x. y = f x)\"", "lemma range_ball_nth: \"\\<forall>y\\<in>range f. P y \\<Longrightarrow> P (f x)\"", "lemma all_nth_imp_all_range: \"\\<lbrakk> \\<forall>x. P (f x);y \\<in> range f \\<rbrakk> \\<Longrightarrow> P y\"", "lemma all_range_conv_all_nth: \"(\\<forall>y\\<in>range f. P y) = (\\<forall>x. P (f x))\"", "lemma i_append_update1: \"\n  n < length xs \\<Longrightarrow> (xs \\<frown> f) (n := x) = xs[n := x] \\<frown> f\"", "lemma i_append_update2: \"\n  length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) (n := x) = xs \\<frown> (f(n - length xs := x))\"", "lemma i_append_update: \"\n  (xs \\<frown> f) (n := x) =\n  (if n < length xs then xs[n := x] \\<frown> f\n   else xs \\<frown> (f(n - length xs := x)))\"", "lemma i_append_update_length[simp]: \"\n  (xs \\<frown> f) (length xs := y) = xs \\<frown> (f(0 := y))\"", "lemma range_update_subset_insert: \"\n  range (f(n := x)) \\<subseteq> insert x (range f)\"", "lemma range_update_subsetI: \"\n  \\<lbrakk> range f \\<subseteq> A; x \\<in> A \\<rbrakk> \\<Longrightarrow> range (f(n := x)) \\<subseteq> A\"", "lemma range_update_memI: \"x \\<in> range (f(n := x))\"", "lemma \"f \\<Down> n = map f [0..<n]\"", "lemma \"f \\<Up> n = (\\<lambda>x. f (n + x))\"", "lemma i_take_first: \"f \\<Down> Suc 0 = [f 0]\"", "lemma i_drop_i_take_1: \"f \\<Up> n \\<Down> Suc 0 = [f n]\"", "lemma i_take_take_eq1: \"m \\<le> n \\<Longrightarrow> (f \\<Down> n) \\<down> m = f \\<Down> m\"", "lemma i_take_take_eq2: \"n \\<le> m \\<Longrightarrow> (f \\<Down> n) \\<down> m = f \\<Down> n\"", "lemma i_take_take[simp]: \"(f \\<Down> n) \\<down> m = f \\<Down> min n m\"", "lemma i_drop_nth[simp]: \"(s \\<Up> n) x = s (n + x)\"", "lemma i_drop_nth_sub: \"n \\<le> x \\<Longrightarrow> (s \\<Up> n) (x - n) = s x\"", "theorem i_take_nth[simp]: \"i < n \\<Longrightarrow> (f \\<Down> n) ! i = f i\"", "lemma i_take_length[simp]: \"length (f \\<Down> n) = n\"", "lemma i_take_0[simp]: \"f \\<Down> 0 = []\"", "lemma i_drop_0[simp]: \"f \\<Up> 0 = f\"", "lemma i_take_eq_Nil[simp]: \"(f \\<Down> n = []) = (n = 0)\"", "lemma i_take_not_empty_conv: \"(f \\<Down> n \\<noteq> []) = (0 < n)\"", "lemma last_i_take: \"last (f \\<Down> Suc n) = f n\"", "lemma last_i_take2: \"0 < n \\<Longrightarrow> last (f \\<Down> n) = f (n - Suc 0)\"", "lemma nth_0_i_drop: \"(f \\<Up> n) 0 = f n\"", "lemma i_take_const[simp]: \"(\\<lambda>n. x) \\<Down> i = replicate i x\"", "lemma i_drop_const[simp]: \"(\\<lambda>n. x) \\<Up> i = (\\<lambda>n. x)\"", "lemma i_append_i_take_eq1: \"\n  n \\<le> length xs \\<Longrightarrow> (xs \\<frown> f) \\<Down> n = xs \\<down> n\"", "lemma i_append_i_take_eq2: \"\n  length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) \\<Down> n = xs @ (f \\<Down> (n - length xs))\"", "lemma i_append_i_take_if: \"\n  (xs \\<frown> f) \\<Down> n = (if n \\<le> length xs then xs \\<down> n else xs @ (f \\<Down> (n - length xs)))\"", "lemma i_append_i_take[simp]: \"\n  (xs \\<frown> f) \\<Down> n = (xs \\<down> n) @ (f \\<Down> (n - length xs))\"", "lemma i_append_i_drop_eq1: \"\n  n \\<le> length xs \\<Longrightarrow> (xs \\<frown> f) \\<Up> n = (xs \\<up> n) \\<frown> f\"", "lemma i_append_i_drop_eq2: \"\n  length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) \\<Up> n = f \\<Up> (n - length xs)\"", "lemma i_append_i_drop_if: \"\n  (xs \\<frown> f) \\<Up> n = (if n < length xs then (xs \\<up> n) \\<frown> f else f \\<Up> (n - length xs))\"", "lemma i_append_i_drop[simp]: \"(xs \\<frown> f) \\<Up> n = (xs \\<up> n) \\<frown> (f \\<Up> (n - length xs))\"", "lemma i_append_i_take_i_drop_id[simp]: \"(f \\<Down> n) \\<frown> (f \\<Up> n) = f\"", "lemma ilist_i_take_i_drop_imp_eq: \"\n  \\<lbrakk> f \\<Down> n  = g \\<Down> n; f \\<Up> n = g \\<Up> n \\<rbrakk> \\<Longrightarrow> f = g\"", "lemma ilist_i_take_i_drop_eq_conv: \"\n  (f = g) = (\\<exists>n. (f \\<Down> n = g \\<Down> n \\<and> f \\<Up> n = g \\<Up> n))\"", "lemma ilist_i_take_eq_conv: \"(f = g) = (\\<forall>n. f \\<Down> n = g \\<Down> n)\"", "lemma ilist_i_drop_eq_conv: \"(f = g) = (\\<forall>n. f \\<Up> n = g \\<Up> n)\"", "lemma i_take_the_conv: \"\n  f \\<Down> k = (THE xs. length xs = k \\<and> (\\<exists>g. xs \\<frown> g = f))\"", "lemma i_drop_the_conv: \"\n  f \\<Up> k = (THE g. (\\<exists>xs. length xs = k \\<and> xs \\<frown> g = f))\"", "lemma i_take_Suc_append[simp]: \"\n  ((x # xs) \\<frown> f) \\<Down> Suc n = x # ((xs \\<frown> f) \\<Down> n)\"", "lemma i_drop_Suc_append[simp]: \"((x # xs) \\<frown> f) \\<Up> Suc n = ((xs \\<frown> f) \\<Up> n)\"", "lemma i_take_Suc: \"f \\<Down> Suc n = f 0 # (f \\<Up> Suc 0 \\<Down> n)\"", "lemma i_take_Suc_conv_app_nth: \"f \\<Down> Suc n = (f \\<Down> n) @ [f n]\"", "lemma i_drop_i_drop[simp]: \"s \\<Up> a \\<Up> b = s \\<Up> (a + b)\"", "lemma i_take_commute: \"s \\<Down> a \\<down> b = s \\<Down> b \\<down> a\"", "lemma i_drop_commute: \"s \\<Up> a \\<Up> b = s \\<Up> b \\<Up> a\"", "lemma nth_via_i_drop: \"(f \\<Up> n) 0 = x \\<Longrightarrow> f n = x\"", "lemma i_drop_Suc_conv_tl: \"[f n] \\<frown> (f \\<Up> Suc n) = f \\<Up> n\"", "lemma i_drop_Suc_conv_tl': \"([f n] \\<frown> f) \\<Up> Suc n = f \\<Up> n\"", "lemma i_take_i_drop: \"f \\<Up> m \\<Down> n = f \\<Down> (n + m) \\<up> m\"", "lemma i_take_int_append: \"\n  m \\<le> n \\<Longrightarrow> (f \\<Down> m) @ map f [m..<n] = f \\<Down> n\"", "lemma i_take_drop_map_empty_iff: \"(f \\<Down> n \\<up> m = []) = (n \\<le> m)\"", "lemma i_take_drop_map: \"f \\<Down> n \\<up> m = map f [m..<n]\"", "lemma i_take_drop: \"f \\<Down> n \\<up> m = f \\<Up> m \\<Down> (n - m)\"", "lemma i_take_o[simp]: \"(f \\<circ> g) \\<Down> n = map f (g \\<Down> n)\"", "lemma i_drop_o[simp]: \"(f \\<circ> g) \\<Up> n = f \\<circ> (g \\<Up> n)\"", "lemma set_i_take_subset: \"set (f \\<Down> n) \\<subseteq> range f\"", "lemma range_i_drop_subset: \"range (f \\<Up> n) \\<subseteq> range f\"", "lemma in_set_i_takeD: \"x \\<in> set (f \\<Down> n) \\<Longrightarrow> x \\<in> range f\"", "lemma in_range_i_takeD: \"x \\<in> range (f \\<Up> n) \\<Longrightarrow> x \\<in> range f\"", "lemma i_append_eq_conv_conj: \"\n  ((xs \\<frown> f) = g) = (xs = g \\<Down> length xs \\<and> f = g \\<Up> length xs)\"", "lemma i_take_add: \"f \\<Down> (i + j) = (f \\<Down> i) @ (f \\<Up> i \\<Down> j)\"", "lemma i_append_eq_i_append_conv_if_aux: \"\n  length xs \\<le> length ys \\<Longrightarrow>\n  (xs \\<frown> f = ys \\<frown> g) = (xs = ys \\<down> length xs \\<and> f = (ys \\<up> length xs) \\<frown> g)\"", "lemma i_append_eq_i_append_conv_if: \"\n  (xs \\<frown> f = ys \\<frown> g) =\n  (if length xs \\<le> length ys\n   then xs = ys \\<down> length xs \\<and> f = (ys \\<up> length xs) \\<frown> g\n   else xs \\<down> length ys = ys \\<and> (xs \\<up> length ys) \\<frown> f = g)\"", "lemma i_take_hd_i_drop: \"(f \\<Down> n) @ [(f \\<Up> n) 0] = f \\<Down> Suc n\"", "lemma id_i_take_nth_i_drop: \"f = (f \\<Down> n) \\<frown> (([f n] \\<frown> f) \\<Up> Suc n)\"", "lemma upd_conv_i_take_nth_i_drop: \"\n  f (n := x) = (f \\<Down> n) \\<frown> ([x] \\<frown> (f \\<Up> Suc n))\"", "theorem i_take_induct: \"\n  \\<lbrakk> P (f \\<Down> 0); \\<And>n. P (f \\<Down> n) \\<Longrightarrow> P ( f \\<Down> Suc n) \\<rbrakk> \\<Longrightarrow> P ( f \\<Down> n)\"", "theorem take_induct[rule_format]: \"\n  \\<lbrakk> P (s \\<down> 0);\n    \\<And>n.  \\<lbrakk> Suc n < length s; P (s \\<down> n) \\<rbrakk> \\<Longrightarrow> P ( s \\<down> Suc n);\n    i < length s\\<rbrakk>\n  \\<Longrightarrow> P (s \\<down> i)\"", "theorem i_drop_induct: \"\n  \\<lbrakk> P (f \\<Up> 0); \\<And>n. P (f \\<Up> n) \\<Longrightarrow> P ( f \\<Up> Suc n) \\<rbrakk> \\<Longrightarrow> P ( f \\<Up> n)\"", "theorem f_drop_induct[rule_format]: \"\n  \\<lbrakk> P (s \\<up> 0);\n    \\<And>n.  \\<lbrakk> Suc n < length s; P (s \\<up> n) \\<rbrakk> \\<Longrightarrow> P ( s \\<up> Suc n);\n    i < length s\\<rbrakk>\n  \\<Longrightarrow> P (s \\<up> i)\"", "lemma i_take_drop_eq_map: \"f \\<Up> m \\<Down> n = map f [m..<m+n]\"", "lemma o_eq_i_append_imp: \"\n  f \\<circ> g = ys \\<frown> i \\<Longrightarrow>\n  \\<exists>xs h. g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i\"", "lemma i_zip_nth: \"(i_zip f g) n = (f n, g n)\"", "lemma i_zip_swap: \"(\\<lambda>(y, x). (x, y)) \\<circ> i_zip g f = i_zip f g\"", "lemma i_zip_i_take: \"(i_zip f g) \\<Down> n = zip (f \\<Down> n) (g \\<Down> n)\"", "lemma i_zip_i_drop: \"(i_zip f g) \\<Up> n = i_zip (f \\<Up> n) (g \\<Up> n)\"", "lemma fst_o_izip: \"fst \\<circ> (i_zip f g) = f\"", "lemma snd_o_i_zip: \"snd \\<circ> (i_zip f g) = g\"", "lemma update_i_zip: \"\n  (i_zip f g)(n := xy) = i_zip (f(n := fst xy)) (g(n := snd xy))\"", "lemma i_zip_Cons_Cons: \"\n  i_zip ([x] \\<frown> f) ([y] \\<frown> g) = [(x, y)] \\<frown> (i_zip f g)\"", "lemma i_zip_i_append1: \"\n  i_zip (xs \\<frown> f) g = zip xs (g \\<Down> length xs) \\<frown> (i_zip f (g \\<Up> length xs))\"", "lemma i_zip_i_append2: \"\n  i_zip f (ys \\<frown> g) = zip (f \\<Down> length ys) ys \\<frown> (i_zip (f \\<Up> length ys) g)\"", "lemma i_zip_append: \"\n  length xs = length ys \\<Longrightarrow>\n  i_zip (xs \\<frown> f) (ys \\<frown> g) = zip xs ys \\<frown> (i_zip f g)\"", "lemma i_zip_range: \"range (i_zip f g) = { (f n, g n)| n. True }\"", "lemma i_zip_update: \"\n  i_zip (f(n := x)) (g(n := y)) = (i_zip f g)( n := (x, y))\"", "lemma i_zip_const: \"i_zip (\\<lambda>n. x) (\\<lambda>n. y) = (\\<lambda>n. (x, y))\"", "lemma i_map2_nth: \"(i_map2 f xs ys) n = f (xs n) (ys n)\"", "lemma i_map2_Cons_Cons: \"\n  i_map2 f ([x] \\<frown> xs) ([y] \\<frown> ys) =\n  [f x y] \\<frown> (i_map2 f xs ys)\"", "lemma i_map2_take_ge: \"\n  n \\<le> n1 \\<Longrightarrow>\n  i_map2 f xs ys \\<Down> n =\n  map2 f (xs \\<Down> n) (ys \\<Down> n1)\"", "lemma i_map2_take_take: \"\n  i_map2 f xs ys \\<Down> n =\n  map2 f (xs \\<Down> n) (ys \\<Down> n)\"", "lemma i_map2_drop: \"\n  (i_map2 f xs ys) \\<Up> n =\n  (i_map2 f (xs \\<Up> n) (ys \\<Up> n))\"", "lemma i_map2_append_append: \"\n  length xs1 = length ys1 \\<Longrightarrow>\n  i_map2 f (xs1 \\<frown> xs) (ys1 \\<frown> ys) =\n  map2 f xs1 ys1 \\<frown> i_map2 f xs ys\"", "lemma i_map2_Cons_left: \"\n  i_map2 f ([x] \\<frown> xs) ys =\n  [f x (ys 0)] \\<frown> i_map2 f xs (ys \\<Up> Suc 0)\"", "lemma i_map2_Cons_right: \"\n  i_map2 f xs ([y] \\<frown> ys) =\n  [f (xs 0) y] \\<frown> i_map2 f (xs \\<Up> Suc 0) ys\"", "lemma i_map2_append_take_drop_left: \"\n  i_map2 f (xs1 \\<frown> xs) ys =\n  map2 f xs1 (ys \\<Down> length xs1) \\<frown>\n  i_map2 f xs (ys \\<Up> length xs1)\"", "lemma i_map2_append_take_drop_right: \"\n  i_map2 f xs (ys1 \\<frown> ys) =\n  map2 f (xs \\<Down> length ys1) ys1 \\<frown>\n  i_map2 f (xs \\<Up> length ys1) ys\"", "lemma i_map2_cong: \"\n  \\<lbrakk> xs1 = xs2; ys1 = ys2;\n    \\<And>x y. \\<lbrakk> x \\<in> range xs2; y \\<in> range ys2 \\<rbrakk> \\<Longrightarrow> f x y = g x y \\<rbrakk> \\<Longrightarrow>\n  i_map2 f xs1 ys1 = i_map2 g xs2 ys2\"", "lemma i_map2_eq_conv: \"\n  (i_map2 f xs ys = i_map2 g xs ys) = (\\<forall>i. f (xs i) (ys i) = g (xs i) (ys i))\"", "lemma i_map2_replicate: \"i_map2 f (\\<lambda>n. x) (\\<lambda>n. y)  = (\\<lambda>n. f x y)\"", "lemma i_map2_i_zip_conv: \"\n  i_map2 f xs ys = (\\<lambda>(x,y). f x y) \\<circ> (i_zip xs ys)\"", "lemma glength_fin[simp]: \"glength (FL xs) = enat (length xs)\"", "lemma glength_infin[simp]: \"glength (IL f) = \\<infinity>\"", "lemma gappend_glength[simp]: \"glength (a @\\<^sub>g b) = glength a + glength b\"", "lemma gmap_glength[simp]: \"glength (gmap f a) = glength a\"", "lemma glength_0_conv[simp]: \"(glength a = 0) = (a = FL [])\"", "lemma glength_greater_0_conv[simp]: \"(0 < glength a) = (a \\<noteq> FL [])\"", "lemma glength_gSuc_conv: \"\n  (glength a = eSuc n) =\n  (\\<exists>x b. a = x #\\<^sub>g b \\<and> glength b = n)\"", "lemma gSuc_glength_conv: \"\n  (eSuc n = glength a) =\n  (\\<exists>x b. a = x #\\<^sub>g b \\<and> glength b = n)\"", "lemma gappend_Nil[simp]: \"(FL []) @\\<^sub>g a = a\"", "lemma gappend_Nil2[simp]: \"a @\\<^sub>g (FL [])= a\"", "lemma gappend_is_Nil_conv[simp]: \"(a @\\<^sub>g b = FL []) = (a = FL [] \\<and> b = FL [])\"", "lemma Nil_is_gappend_conv[simp]: \"(FL [] = a @\\<^sub>g b) = (a = FL [] \\<and> b = FL [])\"", "lemma gappend_assoc[simp]: \"(a @\\<^sub>g b) @\\<^sub>g c = a @\\<^sub>g b @\\<^sub>g c\"", "lemma gappend_infin[simp]: \"IL f @\\<^sub>g b = IL f\"", "lemma same_gappend_eq_disj[simp]: \"(a @\\<^sub>g b = a @\\<^sub>g c) = (glength a = \\<infinity> \\<or> b = c)\"", "lemma same_gappend_eq: \"\n  glength a < \\<infinity> \\<Longrightarrow> (a @\\<^sub>g b = a @\\<^sub>g c) = (b = c)\"", "lemma gmap_gappend[simp]: \"gmap f (a @\\<^sub>g b) = gmap f a @\\<^sub>g gmap f b\"", "lemmas gmap_gmap[simp] = glist.map_comp", "lemma gmap_eq_conv[simp]: \"(gmap f a = gmap g a) = (\\<forall>x\\<in>gset a. f x = g x)\"", "lemmas gmap_cong = glist.map_cong", "lemma gmap_is_Nil_conv: \"(gmap f a = FL []) = (a = FL [])\"", "lemma gmap_eq_imp_glength_eq: \"\n  gmap f a = gmap f b \\<Longrightarrow> glength a = glength b\"", "lemma gset_gappend[simp]: \"\n  gset (a @\\<^sub>g b) =\n  (case a of FL a' \\<Rightarrow> set a' \\<union> gset b | IL a'  \\<Rightarrow> range a')\"", "lemma gset_gappend_if: \"\n  gset (a @\\<^sub>g b) =\n  (if glength a < \\<infinity> then gset a \\<union> gset b else gset a)\"", "lemma gset_empty[simp]: \"(gset a = {}) = (a = FL [])\"", "lemmas gset_gmap[simp] = glist.set_map", "lemma icard_glength: \"icard (gset a) \\<le> glength a\"", "lemma gnth_gCons_0[simp]: \"(x #\\<^sub>g a) !\\<^sub>g 0 = x\"", "lemma gnth_gCons_Suc[simp]: \"(x #\\<^sub>g a) !\\<^sub>g Suc n = a !\\<^sub>g n\"", "lemma gnth_gappend: \"\n  (a @\\<^sub>g b) !\\<^sub>g n =\n  (if enat n < glength a then a !\\<^sub>g n\n  else b !\\<^sub>g (n - the_enat (glength a)))\"", "lemma gnth_gappend_length_plus[simp]: \"(FL xs @\\<^sub>g b) !\\<^sub>g (length xs + n) = b !\\<^sub>g n\"", "lemma gmap_gnth[simp]: \"enat n < glength a \\<Longrightarrow> gmap f a !\\<^sub>g n = f (a !\\<^sub>g n)\"", "lemma in_gset_cong_gnth: \"(x \\<in> gset a) = (\\<exists>i. enat i < glength a \\<and> a !\\<^sub>g i = x)\"", "lemma gtake_0[simp]: \"a \\<down>\\<^sub>g 0 = FL []\"", "lemma gdrop_0[simp]: \"a \\<up>\\<^sub>g 0 = a\"", "lemma gtake_Infty[simp]: \"a \\<down>\\<^sub>g \\<infinity> = a\"", "lemma gdrop_Infty[simp]: \"a \\<up>\\<^sub>g \\<infinity> = FL []\"", "lemma gtake_all[simp]: \"glength a \\<le> n \\<Longrightarrow> a \\<down>\\<^sub>g n = a\"", "lemma gdrop_all[simp]: \"glength a \\<le> n \\<Longrightarrow> a \\<up>\\<^sub>g n = FL []\"", "lemma gtake_eSuc_gCons[simp]: \"(x #\\<^sub>g a) \\<down>\\<^sub>g (eSuc n) = x #\\<^sub>g a \\<down>\\<^sub>g n\"", "lemma gdrop_eSuc_gCons[simp]: \"(x #\\<^sub>g a) \\<up>\\<^sub>g (eSuc n) = a \\<up>\\<^sub>g n\"", "lemma gtake_eSuc: \"a \\<noteq> FL [] \\<Longrightarrow> a \\<down>\\<^sub>g (eSuc n) = a !\\<^sub>g 0 #\\<^sub>g (a \\<up>\\<^sub>g (eSuc 0) \\<down>\\<^sub>g n)\"", "lemma gdrop_eSuc: \"a \\<up>\\<^sub>g (eSuc n) = a \\<up>\\<^sub>g (eSuc 0) \\<up>\\<^sub>g n\"", "lemma gnth_via_grop: \"a \\<up>\\<^sub>g (enat n) = x #\\<^sub>g b \\<Longrightarrow> a !\\<^sub>g n = x\"", "lemma gtake_eSuc_conv_gapp_gnth: \"\n  enat n < glength a \\<Longrightarrow> a \\<down>\\<^sub>g enat (Suc n) = a \\<down>\\<^sub>g (enat n) @\\<^sub>g FL [a !\\<^sub>g n]\"", "lemma gdrop_eSuc_conv_tl: \"\n  enat n < glength a \\<Longrightarrow> a !\\<^sub>g n #\\<^sub>g a \\<up>\\<^sub>g enat (Suc n) = a \\<up>\\<^sub>g enat n\"", "lemma glength_gtake[simp]: \"glength (a \\<down>\\<^sub>g n) = min (glength a) n\"", "lemma glength_drop[simp]: \"glength (a \\<up>\\<^sub>g (enat n)) = glength a - (enat n)\""], "translations": [["", "lemmas expand_ilist_eq = fun_eq_iff"], ["", "lemmas ilist_eq_iff = expand_ilist_eq"], ["", "lemma i_append_nth: \"(xs \\<frown> f) n = (if n < length xs then xs ! n else f (n - length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) n =\n    (if n < length xs then xs ! n else f (n - length xs))", "by (simp add: i_append_def)"], ["", "lemma i_append_nth1[simp]: \"n < length xs \\<Longrightarrow> (xs \\<frown> f) n = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> (xs \\<frown> f) n = xs ! n", "by (simp add: i_append_def)"], ["", "lemma i_append_nth2[simp]: \"length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) n = f (n - length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    (xs \\<frown> f) n = f (n - length xs)", "by (simp add: i_append_def)"], ["", "lemma i_append_Nil[simp]: \"[] \\<frown> f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<frown> f = f", "by (simp add: i_append_def)"], ["", "lemma i_append_assoc[simp]: \"xs \\<frown> (ys \\<frown> f) = (xs @ ys) \\<frown> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<frown> ys \\<frown> f = (xs @ ys) \\<frown> f", "apply (case_tac \"ys = []\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow>\n    xs \\<frown> ys \\<frown> f = (xs @ ys) \\<frown> f", "apply (fastforce simp: expand_ilist_eq i_append_def nth_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_append_Cons: \"(x # xs) \\<frown> f = [x] \\<frown> (xs \\<frown> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs) \\<frown> f = [x] \\<frown> xs \\<frown> f", "by simp"], ["", "lemma i_append_eq_i_append_conv[simp]: \"\n  length xs = length ys \\<Longrightarrow>\n  (xs \\<frown> f = ys \\<frown> g) = (xs = ys \\<and> f = g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow>\n    (xs \\<frown> f = ys \\<frown> g) = (xs = ys \\<and> f = g)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs = length ys; xs \\<frown> f = ys \\<frown> g\\<rbrakk>\n    \\<Longrightarrow> xs = ys \\<and> f = g\n 2. \\<lbrakk>length xs = length ys; xs = ys \\<and> f = g\\<rbrakk>\n    \\<Longrightarrow> xs \\<frown> f = ys \\<frown> g", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs = length ys; xs = ys \\<and> f = g\\<rbrakk>\n    \\<Longrightarrow> xs \\<frown> f = ys \\<frown> g\n 2. \\<lbrakk>length xs = length ys; xs \\<frown> f = ys \\<frown> g\\<rbrakk>\n    \\<Longrightarrow> xs = ys \\<and> f = g", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys; xs \\<frown> f = ys \\<frown> g\\<rbrakk>\n    \\<Longrightarrow> xs = ys \\<and> f = g", "apply (simp add: expand_ilist_eq expand_list_eq i_append_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys;\n     \\<forall>x.\n        (if x < length ys then xs ! x else f (x - length xs)) =\n        (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<length ys. xs ! i = ys ! i) \\<and>\n                      (\\<forall>x. f x = g x)", "apply (intro conjI impI allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys));\n        i < length ys\\<rbrakk>\n       \\<Longrightarrow> xs ! i = ys ! i\n 2. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (rename_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys));\n        x < length ys\\<rbrakk>\n       \\<Longrightarrow> xs ! x = ys ! x\n 2. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (drule_tac x=x in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs = length ys; x < length ys;\n        (if x < length ys then xs ! x else f (x - length xs)) =\n        (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n       \\<Longrightarrow> xs ! x = ys ! x\n 2. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        \\<forall>x.\n           (if x < length ys then xs ! x else f (x - length xs)) =\n           (if x < length ys then ys ! x else g (x - length ys))\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (drule_tac x=\"x + length ys\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = length ys;\n        (if x + length ys < length ys then xs ! (x + length ys)\n         else f (x + length ys - length xs)) =\n        (if x + length ys < length ys then ys ! (x + length ys)\n         else g (x + length ys - length ys))\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_append_eq_i_append_conv2_aux: \"\n  \\<lbrakk> xs \\<frown> f = ys \\<frown> g; length xs \\<le> length ys \\<rbrakk> \\<Longrightarrow>\n  \\<exists>zs. xs @ zs = ys \\<and> f = zs \\<frown> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<frown> f = ys \\<frown> g;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs. xs @ zs = ys \\<and> f = zs \\<frown> g", "apply (simp add: expand_ilist_eq expand_list_eq nth_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         length xs + length zs = length ys \\<and>\n                         (\\<forall>i.\n                             (i < length xs \\<longrightarrow>\n                              xs ! i = ys ! i) \\<and>\n                             (\\<not> i < length xs \\<longrightarrow>\n                              i < length xs + length zs \\<longrightarrow>\n                              zs ! (i - length xs) = ys ! i)) \\<and>\n                         (\\<forall>x. f x = (zs \\<frown> g) x)", "apply (rule_tac x=\"drop (length xs) ys\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> length xs + length (ys \\<up> length xs) =\n                      length ys \\<and>\n                      (\\<forall>i.\n                          (i < length xs \\<longrightarrow>\n                           xs ! i = ys ! i) \\<and>\n                          (\\<not> i < length xs \\<longrightarrow>\n                           i < length xs +\n                               length (ys \\<up> length xs) \\<longrightarrow>\n                           ys \\<up> length xs ! (i - length xs) =\n                           ys ! i)) \\<and>\n                      (\\<forall>x. f x = (ys \\<up> length xs \\<frown> g) x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n                      (\\<forall>x. f x = (ys \\<up> length xs \\<frown> g) x)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length xs. xs ! i = ys ! i\n 2. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. f x = (ys \\<up> length xs \\<frown> g) x", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n        length xs \\<le> length ys; i < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! i = ys ! i\n 2. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. f x = (ys \\<up> length xs \\<frown> g) x", "apply (drule_tac x=i in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>length xs \\<le> length ys; i < length xs;\n        (xs \\<frown> f) i = (ys \\<frown> g) i\\<rbrakk>\n       \\<Longrightarrow> xs ! i = ys ! i\n 2. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. f x = (ys \\<up> length xs \\<frown> g) x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. f x = (ys \\<up> length xs \\<frown> g) x", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>x. (xs \\<frown> f) x = (ys \\<frown> g) x;\n        length xs \\<le> length ys\\<rbrakk>\n       \\<Longrightarrow> f i = (ys \\<up> length xs \\<frown> g) i", "apply (drule_tac x=\"length xs + i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>length xs \\<le> length ys;\n        (xs \\<frown> f) (length xs + i) =\n        (ys \\<frown> g) (length xs + i)\\<rbrakk>\n       \\<Longrightarrow> f i = (ys \\<up> length xs \\<frown> g) i", "apply (simp add: i_append_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>length xs \\<le> length ys;\n        f i =\n        (if length xs + i < length ys then ys ! (length xs + i)\n         else g (length xs + i - length ys))\\<rbrakk>\n       \\<Longrightarrow> (length xs + i < length ys \\<longrightarrow>\n                          \\<not> i < length ys - length xs \\<longrightarrow>\n                          ys ! (length xs + i) = g 0) \\<and>\n                         (\\<not> length xs + i < length ys \\<longrightarrow>\n                          (i < length ys - length xs \\<longrightarrow>\n                           g 0 = ys ! (length xs + i)) \\<and>\n                          (\\<not> i < length ys -\nlength xs \\<longrightarrow>\n                           g (length xs + i - length ys) =\n                           g (i + length xs - length ys)))", "apply (case_tac \"length xs + i < length ys\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>length xs \\<le> length ys;\n        f i =\n        (if length xs + i < length ys then ys ! (length xs + i)\n         else g (length xs + i - length ys));\n        length xs + i < length ys\\<rbrakk>\n       \\<Longrightarrow> (length xs + i < length ys \\<longrightarrow>\n                          \\<not> i < length ys - length xs \\<longrightarrow>\n                          ys ! (length xs + i) = g 0) \\<and>\n                         (\\<not> length xs + i < length ys \\<longrightarrow>\n                          (i < length ys - length xs \\<longrightarrow>\n                           g 0 = ys ! (length xs + i)) \\<and>\n                          (\\<not> i < length ys -\nlength xs \\<longrightarrow>\n                           g (length xs + i - length ys) =\n                           g (i + length xs - length ys)))\n 2. \\<And>i.\n       \\<lbrakk>length xs \\<le> length ys;\n        f i =\n        (if length xs + i < length ys then ys ! (length xs + i)\n         else g (length xs + i - length ys));\n        \\<not> length xs + i < length ys\\<rbrakk>\n       \\<Longrightarrow> (length xs + i < length ys \\<longrightarrow>\n                          \\<not> i < length ys - length xs \\<longrightarrow>\n                          ys ! (length xs + i) = g 0) \\<and>\n                         (\\<not> length xs + i < length ys \\<longrightarrow>\n                          (i < length ys - length xs \\<longrightarrow>\n                           g 0 = ys ! (length xs + i)) \\<and>\n                          (\\<not> i < length ys -\nlength xs \\<longrightarrow>\n                           g (length xs + i - length ys) =\n                           g (i + length xs - length ys)))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>length xs \\<le> length ys;\n        f i =\n        (if length xs + i < length ys then ys ! (length xs + i)\n         else g (length xs + i - length ys));\n        \\<not> length xs + i < length ys\\<rbrakk>\n       \\<Longrightarrow> (length xs + i < length ys \\<longrightarrow>\n                          \\<not> i < length ys - length xs \\<longrightarrow>\n                          ys ! (length xs + i) = g 0) \\<and>\n                         (\\<not> length xs + i < length ys \\<longrightarrow>\n                          (i < length ys - length xs \\<longrightarrow>\n                           g 0 = ys ! (length xs + i)) \\<and>\n                          (\\<not> i < length ys -\nlength xs \\<longrightarrow>\n                           g (length xs + i - length ys) =\n                           g (i + length xs - length ys)))", "apply (fastforce simp: add.commute[of _ \"length xs\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_append_eq_i_append_conv2: \"\n  (xs \\<frown> f = ys \\<frown> g) =\n  (\\<exists>zs. xs = ys @ zs \\<and> zs \\<frown> f = g \\<or> xs @ zs = ys \\<and> f = zs \\<frown> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f = ys \\<frown> g) =\n    (\\<exists>zs.\n        xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n        xs @ zs = ys \\<and> f = zs \\<frown> g)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs \\<frown> f = ys \\<frown> g \\<Longrightarrow>\n    \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g\n 2. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply (case_tac \"length xs \\<le> length ys\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>xs \\<frown> f = ys \\<frown> g;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 2. \\<lbrakk>xs \\<frown> f = ys \\<frown> g;\n     \\<not> length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 3. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply (frule i_append_eq_i_append_conv2_aux, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>xs \\<frown> f = ys \\<frown> g; length xs \\<le> length ys;\n     \\<exists>zs. xs @ zs = ys \\<and> f = zs \\<frown> g\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 2. \\<lbrakk>xs \\<frown> f = ys \\<frown> g;\n     \\<not> length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 3. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<frown> f = ys \\<frown> g;\n     \\<not> length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 2. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply (simp add: linorder_not_le eq_commute[of \"xs \\<frown> f\"], drule less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ys \\<frown> g = xs \\<frown> f;\n     length ys \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 2. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply (frule i_append_eq_i_append_conv2_aux, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ys \\<frown> g = xs \\<frown> f; length ys \\<le> length xs;\n     \\<exists>zs. ys @ zs = xs \\<and> g = zs \\<frown> f\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n                         xs @ zs = ys \\<and> f = zs \\<frown> g\n 2. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>zs.\n       xs = ys @ zs \\<and> zs \\<frown> f = g \\<or>\n       xs @ zs = ys \\<and> f = zs \\<frown> g \\<Longrightarrow>\n    xs \\<frown> f = ys \\<frown> g", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma same_i_append_eq[iff]: \"(xs \\<frown> f = xs \\<frown> g) = (f = g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f = xs \\<frown> g) = (f = g)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs \\<frown> f = xs \\<frown> g \\<Longrightarrow> f = g\n 2. f = g \\<Longrightarrow> xs \\<frown> f = xs \\<frown> g", "apply (clarsimp simp: expand_ilist_eq, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<forall>x. (xs \\<frown> f) x = (xs \\<frown> g) x \\<Longrightarrow>\n       f i = g i\n 2. f = g \\<Longrightarrow> xs \\<frown> f = xs \\<frown> g", "apply (erule_tac x=\"length xs + i\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       (xs \\<frown> f) (length xs + i) =\n       (xs \\<frown> g) (length xs + i) \\<Longrightarrow>\n       f i = g i\n 2. f = g \\<Longrightarrow> xs \\<frown> f = xs \\<frown> g", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<Longrightarrow> xs \\<frown> f = xs \\<frown> g", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NOT_i_append_same_eq: \"\n  \\<not>(\\<forall>xs ys f. (xs \\<frown> (f::(nat \\<Rightarrow> nat)) = ys \\<frown> f) = (xs = ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>xs ys f. (xs \\<frown> f = ys \\<frown> f) = (xs = ys))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs ys f. (xs \\<frown> f = ys \\<frown> f) = (xs \\<noteq> ys)", "apply (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys f. ([] \\<frown> f = ys \\<frown> f) = ([] \\<noteq> ys)", "apply (rule_tac x=\"[0]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. ([] \\<frown> f = [0] \\<frown> f) = ([] \\<noteq> [0])", "apply (rule_tac x=\"\\<lambda>n. 0\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] \\<frown> (\\<lambda>n. 0) = [0] \\<frown> (\\<lambda>n. 0)) =\n    ([] \\<noteq> [0])", "apply (simp add: expand_ilist_eq i_append_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_append_hd: \"(xs \\<frown> f) 0 = (if xs = [] then f 0 else hd xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) 0 = (if xs = [] then f 0 else hd xs)", "by (simp add: hd_eq_first)"], ["", "lemma i_append_hd2[simp]: \"xs \\<noteq> [] \\<Longrightarrow> (xs \\<frown> f) 0 = hd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> (xs \\<frown> f) 0 = hd xs", "by (simp add: i_append_hd)"], ["", "lemma eq_Nil_i_appendI: \"f = g \\<Longrightarrow> f = [] \\<frown> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<Longrightarrow> f = [] \\<frown> g", "by simp"], ["", "lemma i_append_eq_i_appendI: \"\n  \\<lbrakk> xs @ xs' = ys; f = xs' \\<frown> g \\<rbrakk> \\<Longrightarrow> xs \\<frown> f = ys \\<frown> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ xs' = ys; f = xs' \\<frown> g\\<rbrakk>\n    \\<Longrightarrow> xs \\<frown> f = ys \\<frown> g", "by simp"], ["", "lemma o_ext: \"\n  (\\<forall>x. (x \\<in> range h \\<longrightarrow> f x = g x)) \\<Longrightarrow> f \\<circ> h = g \\<circ> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> range h \\<longrightarrow> f x = g x \\<Longrightarrow>\n    f \\<circ> h = g \\<circ> h", "by (simp add: expand_ilist_eq)"], ["", "lemma i_append_o[simp]: \"g \\<circ> (xs \\<frown> f) = (map g xs) \\<frown> (g \\<circ> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<circ> xs \\<frown> f = map g xs \\<frown> (g \\<circ> f)", "by (simp add: expand_ilist_eq i_append_nth)"], ["", "lemma o_eq_conv: \"(f \\<circ> h = g \\<circ> h) = (\\<forall>x\\<in>range h. f x = g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> h = g \\<circ> h) = (\\<forall>x\\<in>range h. f x = g x)", "by (simp add: expand_ilist_eq)"], ["", "lemma o_cong: \"\n  \\<lbrakk> h = i; \\<And>x. x \\<in> range i \\<Longrightarrow> f x = g x \\<rbrakk> \\<Longrightarrow> f \\<circ> h = f \\<circ> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h = i;\n     \\<And>x. x \\<in> range i \\<Longrightarrow> f x = g x\\<rbrakk>\n    \\<Longrightarrow> f \\<circ> h = f \\<circ> i", "by blast"], ["", "lemma ex_o_conv: \"(\\<exists>h. g = f \\<circ> h) = (\\<forall>y\\<in>range g. \\<exists>x. y = f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>h. g = f \\<circ> h) =\n    (\\<forall>y\\<in>range g. \\<exists>x. y = f x)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>h. g = f \\<circ> h \\<Longrightarrow>\n    \\<forall>y\\<in>range g. \\<exists>x. y = f x\n 2. \\<forall>y\\<in>range g. \\<exists>x. y = f x \\<Longrightarrow>\n    \\<exists>h. g = f \\<circ> h", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>range g. \\<exists>x. y = f x \\<Longrightarrow>\n    \\<exists>h. g = f \\<circ> h", "apply (simp add: expand_ilist_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. \\<exists>x. g y = f x \\<Longrightarrow>\n    \\<exists>h. \\<forall>x. g x = f (h x)", "apply (rule_tac x=\"\\<lambda>x. (SOME y. g x = f y)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. \\<exists>x. g y = f x \\<Longrightarrow>\n    \\<forall>x. g x = f (SOME y. g x = f y)", "apply (fastforce intro: someI_ex)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma o_inj_on: \"\n  \\<lbrakk> f \\<circ> g = f \\<circ> h; inj_on f (range g \\<union> range h) \\<rbrakk> \\<Longrightarrow> g = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<circ> g = f \\<circ> h;\n     inj_on f (range g \\<union> range h)\\<rbrakk>\n    \\<Longrightarrow> g = h", "apply (rule expand_ilist_eq[THEN iffD2], clarify, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<circ> g = f \\<circ> h;\n        inj_on f (range g \\<union> range h)\\<rbrakk>\n       \\<Longrightarrow> g x = h x", "apply (drule_tac x=x in fun_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f (range g \\<union> range h);\n        (f \\<circ> g) x = (f \\<circ> h) x\\<rbrakk>\n       \\<Longrightarrow> g x = h x", "apply (rule inj_onD)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f (range g \\<union> range h);\n        (f \\<circ> g) x = (f \\<circ> h) x\\<rbrakk>\n       \\<Longrightarrow> inj_on (?f6 x) (?A6 x)\n 2. \\<And>x.\n       \\<lbrakk>inj_on f (range g \\<union> range h);\n        (f \\<circ> g) x = (f \\<circ> h) x\\<rbrakk>\n       \\<Longrightarrow> ?f6 x (g x) = ?f6 x (h x)\n 3. \\<And>x.\n       \\<lbrakk>inj_on f (range g \\<union> range h);\n        (f \\<circ> g) x = (f \\<circ> h) x\\<rbrakk>\n       \\<Longrightarrow> g x \\<in> ?A6 x\n 4. \\<And>x.\n       \\<lbrakk>inj_on f (range g \\<union> range h);\n        (f \\<circ> g) x = (f \\<circ> h) x\\<rbrakk>\n       \\<Longrightarrow> h x \\<in> ?A6 x", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_on_o_eq_o: \"\n  inj_on f (range g \\<union> range h) \\<Longrightarrow>\n  (f \\<circ> g = f \\<circ> h) = (g = h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f (range g \\<union> range h) \\<Longrightarrow>\n    (f \\<circ> g = f \\<circ> h) = (g = h)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inj_on f (range g \\<union> range h);\n     f \\<circ> g = f \\<circ> h\\<rbrakk>\n    \\<Longrightarrow> g = h\n 2. \\<lbrakk>inj_on f (range g \\<union> range h); g = h\\<rbrakk>\n    \\<Longrightarrow> f \\<circ> g = f \\<circ> h", "apply (rule o_inj_on, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f (range g \\<union> range h); g = h\\<rbrakk>\n    \\<Longrightarrow> f \\<circ> g = f \\<circ> h", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma o_injective: \"\\<lbrakk> f \\<circ> g = f \\<circ> h; inj f \\<rbrakk> \\<Longrightarrow> g = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<circ> g = f \\<circ> h; inj f\\<rbrakk>\n    \\<Longrightarrow> g = h", "by (simp add: expand_ilist_eq inj_on_def)"], ["", "lemma inj_o_eq_o: \"inj f \\<Longrightarrow> (f \\<circ> g = f \\<circ> h) = (g = h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f \\<Longrightarrow> (f \\<circ> g = f \\<circ> h) = (g = h)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inj f; f \\<circ> g = f \\<circ> h\\<rbrakk>\n    \\<Longrightarrow> g = h\n 2. \\<lbrakk>inj f; g = h\\<rbrakk>\n    \\<Longrightarrow> f \\<circ> g = f \\<circ> h", "apply (rule o_injective, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj f; g = h\\<rbrakk>\n    \\<Longrightarrow> f \\<circ> g = f \\<circ> h", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_oI: \"inj f \\<Longrightarrow> inj (\\<lambda>g. f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f \\<Longrightarrow> inj ((\\<circ>) f)", "apply (simp add: inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. f x = f y \\<longrightarrow> x = y \\<Longrightarrow>\n    \\<forall>x y. f \\<circ> x = f \\<circ> y \\<longrightarrow> x = y", "apply (blast intro: o_inj_on[unfolded inj_on_def])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_oD: \"inj (\\<lambda>g. f \\<circ> g) \\<Longrightarrow> inj f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj ((\\<circ>) f) \\<Longrightarrow> inj f", "apply (clarsimp simp add: inj_on_def, rename_tac g h)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g h.\n       \\<lbrakk>\\<forall>x y.\n                   f \\<circ> x = f \\<circ> y \\<longrightarrow> x = y;\n        f g = f h\\<rbrakk>\n       \\<Longrightarrow> g = h", "apply (erule_tac x=\"\\<lambda>n. g\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g h.\n       \\<lbrakk>f g = f h;\n        \\<forall>y.\n           f \\<circ> (\\<lambda>n. g) = f \\<circ> y \\<longrightarrow>\n           (\\<lambda>n. g) = y\\<rbrakk>\n       \\<Longrightarrow> g = h", "apply (erule_tac x=\"\\<lambda>n. h\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g h.\n       \\<lbrakk>f g = f h;\n        f \\<circ> (\\<lambda>n. g) =\n        f \\<circ> (\\<lambda>n. h) \\<longrightarrow>\n        (\\<lambda>n. g) = (\\<lambda>n. h)\\<rbrakk>\n       \\<Longrightarrow> g = h", "apply (simp add: expand_ilist_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_o[iff]: \"inj (\\<lambda>g. f \\<circ> g) = inj f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj ((\\<circ>) f) = inj f", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj ((\\<circ>) f) \\<Longrightarrow> inj f\n 2. inj f \\<Longrightarrow> inj ((\\<circ>) f)", "apply (rule inj_oD, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f \\<Longrightarrow> inj ((\\<circ>) f)", "apply (rule inj_oI, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_on_oI: \"\n  inj_on f (\\<Union> ((\\<lambda>f. range f) ` A)) \\<Longrightarrow> inj_on (\\<lambda>g. f \\<circ> g) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f (\\<Union> (range ` A)) \\<Longrightarrow> inj_on ((\\<circ>) f) A", "apply (rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>inj_on f (\\<Union> (range ` A)); x \\<in> A; y \\<in> A;\n        f \\<circ> x = f \\<circ> y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (rule o_inj_on, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>inj_on f (\\<Union> (range ` A)); x \\<in> A; y \\<in> A;\n        f \\<circ> x = f \\<circ> y\\<rbrakk>\n       \\<Longrightarrow> inj_on f (range x \\<union> range y)", "apply (unfold inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>x\\<in>\\<Union> (range ` A).\n                   \\<forall>y\\<in>\\<Union> (range ` A).\n                      f x = f y \\<longrightarrow> x = y;\n        x \\<in> A; y \\<in> A; f \\<circ> x = f \\<circ> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa\\<in>range x \\<union> range y.\n                            \\<forall>y\\<in>range x \\<union> range y.\n                               f xa = f y \\<longrightarrow> xa = y", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma o_idI: \"\\<forall>x. x \\<in> range g \\<longrightarrow> f x = x \\<Longrightarrow> f \\<circ> g = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> range g \\<longrightarrow> f x = x \\<Longrightarrow>\n    f \\<circ> g = g", "by (simp add: expand_ilist_eq)"], ["", "lemma o_fun_upd[simp]: \"y \\<notin> range g \\<Longrightarrow> f (y := x) \\<circ> g = f \\<circ> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> range g \\<Longrightarrow> f(y := x) \\<circ> g = f \\<circ> g", "by (fastforce simp: expand_ilist_eq)"], ["", "lemma range_i_append[simp]: \"range (xs \\<frown> f) = set xs \\<union> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (xs \\<frown> f) = set xs \\<union> range f", "by (fastforce simp: in_set_conv_nth i_append_nth)"], ["", "lemma set_subset_i_append: \"set xs \\<subseteq> range (xs \\<frown> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> range (xs \\<frown> f)", "by simp"], ["", "lemma range_subset_i_append: \"range f \\<subseteq> range (xs \\<frown> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range f \\<subseteq> range (xs \\<frown> f)", "by simp"], ["", "lemma range_ConsD: \"y \\<in> range ([x] \\<frown> f) \\<Longrightarrow> y = x \\<or> y \\<in> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> range ([x] \\<frown> f) \\<Longrightarrow>\n    y = x \\<or> y \\<in> range f", "by simp"], ["", "lemma range_o [simp]: \"range (f \\<circ> g) = f ` range g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (f \\<circ> g) = f ` range g", "by (simp add: image_comp)"], ["", "lemma in_range_conv_decomp: \"\n  (x \\<in> range f) = (\\<exists>xs g. f = xs \\<frown> ([x] \\<frown> g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> range f) = (\\<exists>xs g. f = xs \\<frown> [x] \\<frown> g)", "apply (simp add: image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>xa. x = f xa) = (\\<exists>xs g. f = (xs @ [x]) \\<frown> g)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>xa. x = f xa \\<Longrightarrow>\n    \\<exists>xs g. f = (xs @ [x]) \\<frown> g\n 2. \\<exists>xs g. f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n    \\<exists>xa. x = f xa", "apply (clarify, rename_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       x = f n \\<Longrightarrow> \\<exists>xs g. f = (xs @ [f n]) \\<frown> g\n 2. \\<exists>xs g. f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n    \\<exists>xa. x = f xa", "apply (rule_tac x=\"map f [0..<n]\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       x = f n \\<Longrightarrow>\n       \\<exists>g. f = (map f [0..<n] @ [f n]) \\<frown> g\n 2. \\<exists>xs g. f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n    \\<exists>xa. x = f xa", "apply (rule_tac x=\"\\<lambda>i. f (i + Suc n)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       x = f n \\<Longrightarrow>\n       f = (map f [0..<n] @ [f n]) \\<frown> (\\<lambda>i. f (i + Suc n))\n 2. \\<exists>xs g. f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n    \\<exists>xa. x = f xa", "apply (simp add: expand_ilist_eq i_append_nth nth_append linorder_not_less less_Suc_eq_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs g. f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n    \\<exists>xa. x = f xa", "apply (clarify, rename_tac xs g)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs g.\n       f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n       \\<exists>xa. x = ((xs @ [x]) \\<frown> g) xa", "apply (rule_tac x=\"length xs\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs g.\n       f = (xs @ [x]) \\<frown> g \\<Longrightarrow>\n       x = ((xs @ [x]) \\<frown> g) (length xs)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>\\<open>nth\\<close>\\<close>"], ["", "lemma i_append_nth_Cons_0[simp]: \"((x # xs) \\<frown> f) 0 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x # xs) \\<frown> f) 0 = x", "by simp"], ["", "lemma i_append_nth_Cons_Suc[simp]:\n  \"((x # xs) \\<frown> f) (Suc n) = (xs \\<frown> f) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x # xs) \\<frown> f) (Suc n) = (xs \\<frown> f) n", "by (simp add: i_append_nth)"], ["", "lemma i_append_nth_Cons: \"\n  ([x] \\<frown> f) n = (case n of 0 \\<Rightarrow> x | Suc k \\<Rightarrow> f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([x] \\<frown> f) n =\n    (case n of 0 \\<Rightarrow> x | Suc k \\<Rightarrow> f k)", "by (case_tac n, simp_all add: i_append_nth)"], ["", "lemma i_append_nth_Cons': \"\n  ([x] \\<frown> f) n = (if n = 0 then x else f (n - Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([x] \\<frown> f) n = (if n = 0 then x else f (n - Suc 0))", "by (case_tac n, simp_all add: i_append_nth)"], ["", "lemma i_append_nth_length[simp]: \"(xs \\<frown> f) (length xs) = f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) (length xs) = f 0", "by simp"], ["", "lemma i_append_nth_length_plus[simp]: \"(xs \\<frown> f) (length xs + n) = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) (length xs + n) = f n", "by simp"], ["", "lemma range_iff: \"(y \\<in> range f) = (\\<exists>x. y = f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> range f) = (\\<exists>x. y = f x)", "by blast"], ["", "lemma range_ball_nth: \"\\<forall>y\\<in>range f. P y \\<Longrightarrow> P (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>range f. P y \\<Longrightarrow> P (f x)", "by blast"], ["", "lemma all_nth_imp_all_range: \"\\<lbrakk> \\<forall>x. P (f x);y \\<in> range f \\<rbrakk> \\<Longrightarrow> P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. P (f x); y \\<in> range f\\<rbrakk>\n    \\<Longrightarrow> P y", "by blast"], ["", "lemma all_range_conv_all_nth: \"(\\<forall>y\\<in>range f. P y) = (\\<forall>x. P (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>range f. P y) = (\\<forall>x. P (f x))", "by blast"], ["", "lemma i_append_update1: \"\n  n < length xs \\<Longrightarrow> (xs \\<frown> f) (n := x) = xs[n := x] \\<frown> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow>\n    (xs \\<frown> f)(n := x) = xs[n := x] \\<frown> f", "by (simp add: expand_ilist_eq i_append_nth)"], ["", "lemma i_append_update2: \"\n  length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) (n := x) = xs \\<frown> (f(n - length xs := x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    (xs \\<frown> f)(n := x) = xs \\<frown> f(n - length xs := x)", "by (fastforce simp: expand_ilist_eq i_append_nth)"], ["", "lemma i_append_update: \"\n  (xs \\<frown> f) (n := x) =\n  (if n < length xs then xs[n := x] \\<frown> f\n   else xs \\<frown> (f(n - length xs := x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f)(n := x) =\n    (if n < length xs then xs[n := x] \\<frown> f\n     else xs \\<frown> f(n - length xs := x))", "by (simp add: i_append_update1 i_append_update2)"], ["", "lemma i_append_update_length[simp]: \"\n  (xs \\<frown> f) (length xs := y) = xs \\<frown> (f(0 := y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f)(length xs := y) = xs \\<frown> f(0 := y)", "by (simp add: i_append_update2)"], ["", "lemma range_update_subset_insert: \"\n  range (f(n := x)) \\<subseteq> insert x (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (f(n := x)) \\<subseteq> insert x (range f)", "by fastforce"], ["", "lemma range_update_subsetI: \"\n  \\<lbrakk> range f \\<subseteq> A; x \\<in> A \\<rbrakk> \\<Longrightarrow> range (f(n := x)) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>range f \\<subseteq> A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> range (f(n := x)) \\<subseteq> A", "by fastforce"], ["", "lemma range_update_memI: \"x \\<in> range (f(n := x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> range (f(n := x))", "by fastforce"], ["", "subsubsection \\<open>@{term take} and @{term drop} for infinite lists\\<close>"], ["", "text \\<open>\n  The @{term i_take} operator takes the first @{term n} elements of an infinite list,\n  i.e. \\<open>i_take f n = [f 0, f 1, \\<dots>, f (n-1)]\\<close>.\n  The @{term i_drop} operator drops the first @{term n} elements of an infinite list,\n  i.e. \\<open>(i_take f n) 0 = f n, (i_take f n) 1 = f (n + 1), \\<dots>\\<close>.\\<close>"], ["", "definition i_take  :: \"nat \\<Rightarrow> 'a ilist \\<Rightarrow> 'a list\"\n  where \"i_take n f \\<equiv> map f [0..<n]\""], ["", "definition i_drop  :: \"nat \\<Rightarrow> 'a ilist \\<Rightarrow> 'a ilist\"\n  where \"i_drop n f \\<equiv> (\\<lambda>x. f (n + x))\""], ["", "abbreviation i_take' :: \"'a ilist \\<Rightarrow> nat \\<Rightarrow> 'a list\"  (infixl \"\\<Down>\" 100)\n  where \"f \\<Down> n \\<equiv> i_take n f\""], ["", "abbreviation i_drop' :: \"'a ilist \\<Rightarrow> nat \\<Rightarrow> 'a ilist\"  (infixl \"\\<Up>\" 100)\n  where \"f \\<Up> n \\<equiv> i_drop n f\""], ["", "lemma \"f \\<Down> n = map f [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n = map f [0..<n]", "by (simp add: i_take_def)"], ["", "lemma \"f \\<Up> n = (\\<lambda>x. f (n + x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> n = (\\<lambda>x. f (n + x))", "by (simp add: i_drop_def)"], ["", "text \\<open>Basic results for @{term i_take} and @{term i_drop}\\<close>"], ["", "lemma i_take_first: \"f \\<Down> Suc 0 = [f 0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> Suc 0 = [f 0]", "by (simp add: i_take_def)"], ["", "lemma i_drop_i_take_1: \"f \\<Up> n \\<Down> Suc 0 = [f n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> n \\<Down> Suc 0 = [f n]", "by (simp add: i_drop_def i_take_def)"], ["", "lemma i_take_take_eq1: \"m \\<le> n \\<Longrightarrow> (f \\<Down> n) \\<down> m = f \\<Down> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> f \\<Down> n \\<down> m = f \\<Down> m", "by (simp add: i_take_def take_map)"], ["", "lemma i_take_take_eq2: \"n \\<le> m \\<Longrightarrow> (f \\<Down> n) \\<down> m = f \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow> f \\<Down> n \\<down> m = f \\<Down> n", "by (simp add: i_take_def take_map)"], ["", "lemma i_take_take[simp]: \"(f \\<Down> n) \\<down> m = f \\<Down> min n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<down> m = f \\<Down> min n m", "by (simp add: min_def i_take_take_eq1 i_take_take_eq2)"], ["", "lemma i_drop_nth[simp]: \"(s \\<Up> n) x = s (n + x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<Up> n) x = s (n + x)", "by (simp add: i_drop_def)"], ["", "lemma i_drop_nth_sub: \"n \\<le> x \\<Longrightarrow> (s \\<Up> n) (x - n) = s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> x \\<Longrightarrow> (s \\<Up> n) (x - n) = s x", "by (simp add: i_drop_def)"], ["", "theorem i_take_nth[simp]: \"i < n \\<Longrightarrow> (f \\<Down> n) ! i = f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> f \\<Down> n ! i = f i", "by (simp add: i_take_def)"], ["", "lemma i_take_length[simp]: \"length (f \\<Down> n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (f \\<Down> n) = n", "by (simp add: i_take_def)"], ["", "lemma i_take_0[simp]: \"f \\<Down> 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> 0 = []", "by (simp add: i_take_def)"], ["", "lemma i_drop_0[simp]: \"f \\<Up> 0 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> 0 = f", "by (simp add: i_drop_def)"], ["", "lemma i_take_eq_Nil[simp]: \"(f \\<Down> n = []) = (n = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<Down> n = []) = (n = 0)", "by (simp add: length_0_conv[symmetric] del: length_0_conv)"], ["", "lemma i_take_not_empty_conv: \"(f \\<Down> n \\<noteq> []) = (0 < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<Down> n \\<noteq> []) = (0 < n)", "by simp"], ["", "lemma last_i_take: \"last (f \\<Down> Suc n) = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (f \\<Down> Suc n) = f n", "by (simp add: last_nth)"], ["", "lemma last_i_take2: \"0 < n \\<Longrightarrow> last (f \\<Down> n) = f (n - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> last (f \\<Down> n) = f (n - Suc 0)", "by (simp add: last_i_take[of _ f, symmetric])"], ["", "lemma nth_0_i_drop: \"(f \\<Up> n) 0 = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<Up> n) 0 = f n", "by simp"], ["", "lemma i_take_const[simp]: \"(\\<lambda>n. x) \\<Down> i = replicate i x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. x) \\<Down> i = x\\<^bsup>i\\<^esup>", "by (simp add: expand_list_eq)"], ["", "lemma i_drop_const[simp]: \"(\\<lambda>n. x) \\<Up> i = (\\<lambda>n. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. x) \\<Up> i = (\\<lambda>n. x)", "by (simp add: expand_ilist_eq)"], ["", "lemma i_append_i_take_eq1: \"\n  n \\<le> length xs \\<Longrightarrow> (xs \\<frown> f) \\<Down> n = xs \\<down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow>\n    (xs \\<frown> f) \\<Down> n = xs \\<down> n", "by (simp add: expand_list_eq)"], ["", "lemma i_append_i_take_eq2: \"\n  length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) \\<Down> n = xs @ (f \\<Down> (n - length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    (xs \\<frown> f) \\<Down> n = xs @ f \\<Down> (n - length xs)", "by (simp add: expand_list_eq nth_append)"], ["", "lemma i_append_i_take_if: \"\n  (xs \\<frown> f) \\<Down> n = (if n \\<le> length xs then xs \\<down> n else xs @ (f \\<Down> (n - length xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) \\<Down> n =\n    (if n \\<le> length xs then xs \\<down> n\n     else xs @ f \\<Down> (n - length xs))", "by (simp add: i_append_i_take_eq1 i_append_i_take_eq2)"], ["", "lemma i_append_i_take[simp]: \"\n  (xs \\<frown> f) \\<Down> n = (xs \\<down> n) @ (f \\<Down> (n - length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) \\<Down> n = xs \\<down> n @ f \\<Down> (n - length xs)", "by (simp add: i_append_i_take_if)"], ["", "lemma i_append_i_drop_eq1: \"\n  n \\<le> length xs \\<Longrightarrow> (xs \\<frown> f) \\<Up> n = (xs \\<up> n) \\<frown> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow>\n    (xs \\<frown> f) \\<Up> n = xs \\<up> n \\<frown> f", "by (simp add: expand_ilist_eq i_append_nth less_diff_conv add.commute[of _ n])"], ["", "lemma i_append_i_drop_eq2: \"\n  length xs \\<le> n \\<Longrightarrow> (xs \\<frown> f) \\<Up> n = f \\<Up> (n - length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    (xs \\<frown> f) \\<Up> n = f \\<Up> (n - length xs)", "by (simp add: expand_ilist_eq i_append_nth)"], ["", "lemma i_append_i_drop_if: \"\n  (xs \\<frown> f) \\<Up> n = (if n < length xs then (xs \\<up> n) \\<frown> f else f \\<Up> (n - length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) \\<Up> n =\n    (if n < length xs then xs \\<up> n \\<frown> f\n     else f \\<Up> (n - length xs))", "by (simp add: i_append_i_drop_eq1 i_append_i_drop_eq2)"], ["", "lemma i_append_i_drop[simp]: \"(xs \\<frown> f) \\<Up> n = (xs \\<up> n) \\<frown> (f \\<Up> (n - length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) \\<Up> n = xs \\<up> n \\<frown> f \\<Up> (n - length xs)", "by (simp add: i_append_i_drop_if)"], ["", "lemma i_append_i_take_i_drop_id[simp]: \"(f \\<Down> n) \\<frown> (f \\<Up> n) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<frown> f \\<Up> n = f", "by (simp add: expand_ilist_eq i_append_nth)"], ["", "lemma ilist_i_take_i_drop_imp_eq: \"\n  \\<lbrakk> f \\<Down> n  = g \\<Down> n; f \\<Up> n = g \\<Up> n \\<rbrakk> \\<Longrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<Down> n = g \\<Down> n; f \\<Up> n = g \\<Up> n\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (subst i_append_i_take_i_drop_id[of n f, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<Down> n = g \\<Down> n; f \\<Up> n = g \\<Up> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> n \\<frown> f \\<Up> n = g", "apply (subst i_append_i_take_i_drop_id[of n g, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<Down> n = g \\<Down> n; f \\<Up> n = g \\<Up> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> n \\<frown> f \\<Up> n =\n                      g \\<Down> n \\<frown> g \\<Up> n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ilist_i_take_i_drop_eq_conv: \"\n  (f = g) = (\\<exists>n. (f \\<Down> n = g \\<Down> n \\<and> f \\<Up> n = g \\<Up> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g) =\n    (\\<exists>n. f \\<Down> n = g \\<Down> n \\<and> f \\<Up> n = g \\<Up> n)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       f \\<Down> n = g \\<Down> n \\<and>\n       f \\<Up> n = g \\<Up> n \\<Longrightarrow>\n    f = g", "apply (blast intro: ilist_i_take_i_drop_imp_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ilist_i_take_eq_conv: \"(f = g) = (\\<forall>n. f \\<Down> n = g \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g) = (\\<forall>n. f \\<Down> n = g \\<Down> n)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f \\<Down> n = g \\<Down> n \\<Longrightarrow> f = g", "apply (clarsimp simp: expand_ilist_eq, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<forall>n. f \\<Down> n = g \\<Down> n \\<Longrightarrow> f i = g i", "apply (drule_tac x=\"Suc i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. f \\<Down> Suc i = g \\<Down> Suc i \\<Longrightarrow> f i = g i", "apply (drule_tac f=\"\\<lambda>xs. xs ! i\" in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       f \\<Down> Suc i ! i = g \\<Down> Suc i ! i \\<Longrightarrow> f i = g i", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ilist_i_drop_eq_conv: \"(f = g) = (\\<forall>n. f \\<Up> n = g \\<Up> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g) = (\\<forall>n. f \\<Up> n = g \\<Up> n)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. f \\<Up> n = g \\<Up> n \\<Longrightarrow> f = g", "apply (drule_tac x=0 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> 0 = g \\<Up> 0 \\<Longrightarrow> f = g", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_take_the_conv: \"\n  f \\<Down> k = (THE xs. length xs = k \\<and> (\\<exists>g. xs \\<frown> g = f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> k =\n    (THE xs. length xs = k \\<and> (\\<exists>g. xs \\<frown> g = f))", "apply (rule the1I2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>!xs. length xs = k \\<and> (\\<exists>g. xs \\<frown> g = f)\n 2. \\<And>xs.\n       length xs = k \\<and>\n       (\\<exists>g. xs \\<frown> g = f) \\<Longrightarrow>\n       f \\<Down> k = xs", "apply (rule_tac a=\"f \\<Down> k\" in ex1I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (f \\<Down> k) = k \\<and> (\\<exists>g. f \\<Down> k \\<frown> g = f)\n 2. \\<And>x.\n       length x = k \\<and> (\\<exists>g. x \\<frown> g = f) \\<Longrightarrow>\n       x = f \\<Down> k\n 3. \\<And>xs.\n       length xs = k \\<and>\n       (\\<exists>g. xs \\<frown> g = f) \\<Longrightarrow>\n       f \\<Down> k = xs", "apply (fastforce intro: i_append_i_take_i_drop_id)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_drop_the_conv: \"\n  f \\<Up> k = (THE g. (\\<exists>xs. length xs = k \\<and> xs \\<frown> g = f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> k = (THE g. \\<exists>xs. length xs = k \\<and> xs \\<frown> g = f)", "apply (rule sym, rule the1_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>!g. \\<exists>xs. length xs = k \\<and> xs \\<frown> g = f\n 2. \\<exists>xs. length xs = k \\<and> xs \\<frown> f \\<Up> k = f", "apply (rule_tac a=\"f \\<Up> k\" in ex1I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>xs. length xs = k \\<and> xs \\<frown> f \\<Up> k = f\n 2. \\<And>x.\n       \\<exists>xs. length xs = k \\<and> xs \\<frown> x = f \\<Longrightarrow>\n       x = f \\<Up> k\n 3. \\<exists>xs. length xs = k \\<and> xs \\<frown> f \\<Up> k = f", "apply (rule_tac x=\"f \\<Down> k\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xs. length xs = k \\<and> xs \\<frown> x = f \\<Longrightarrow>\n       x = f \\<Up> k\n 2. \\<exists>xs. length xs = k \\<and> xs \\<frown> f \\<Up> k = f", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. length xs = k \\<and> xs \\<frown> f \\<Up> k = f", "apply (rule_tac x=\"f \\<Down> k\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_take_Suc_append[simp]: \"\n  ((x # xs) \\<frown> f) \\<Down> Suc n = x # ((xs \\<frown> f) \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x # xs) \\<frown> f) \\<Down> Suc n = x # (xs \\<frown> f) \\<Down> n", "by (simp add: expand_list_eq)"], ["", "corollary i_take_Suc_Cons: \"([x] \\<frown> f) \\<Down> Suc n = x # (f \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([x] \\<frown> f) \\<Down> Suc n = x # f \\<Down> n", "by simp"], ["", "lemma i_drop_Suc_append[simp]: \"((x # xs) \\<frown> f) \\<Up> Suc n = ((xs \\<frown> f) \\<Up> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x # xs) \\<frown> f) \\<Up> Suc n = (xs \\<frown> f) \\<Up> n", "by (simp add: expand_list_eq)"], ["", "corollary i_drop_Suc_Cons: \"([x] \\<frown> f) \\<Up> Suc n = f \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([x] \\<frown> f) \\<Up> Suc n = f \\<Up> n", "by simp"], ["", "lemma i_take_Suc: \"f \\<Down> Suc n = f 0 # (f \\<Up> Suc 0 \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> Suc n = f 0 # f \\<Up> Suc 0 \\<Down> n", "by (simp add: expand_list_eq nth_Cons')"], ["", "lemma i_take_Suc_conv_app_nth: \"f \\<Down> Suc n = (f \\<Down> n) @ [f n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> Suc n = f \\<Down> n @ [f n]", "by (simp add: i_take_def)"], ["", "lemma i_drop_i_drop[simp]: \"s \\<Up> a \\<Up> b = s \\<Up> (a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<Up> a \\<Up> b = s \\<Up> (a + b)", "by (simp add: i_drop_def add.assoc)"], ["", "corollary i_drop_Suc: \"f \\<Up> Suc 0 \\<Up> n = f \\<Up> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> Suc 0 \\<Up> n = f \\<Up> Suc n", "by simp"], ["", "lemma i_take_commute: \"s \\<Down> a \\<down> b = s \\<Down> b \\<down> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<Down> a \\<down> b = s \\<Down> b \\<down> a", "by (simp add: ac_simps)"], ["", "lemma i_drop_commute: \"s \\<Up> a \\<Up> b = s \\<Up> b \\<Up> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<Up> a \\<Up> b = s \\<Up> b \\<Up> a", "by (simp add: add.commute[of a])"], ["", "corollary i_drop_tl: \"f \\<Up> Suc 0 \\<Up> n = f \\<Up> n \\<Up> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> Suc 0 \\<Up> n = f \\<Up> n \\<Up> Suc 0", "by simp"], ["", "lemma nth_via_i_drop: \"(f \\<Up> n) 0 = x \\<Longrightarrow> f n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<Up> n) 0 = x \\<Longrightarrow> f n = x", "by simp"], ["", "lemma i_drop_Suc_conv_tl: \"[f n] \\<frown> (f \\<Up> Suc n) = f \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [f n] \\<frown> f \\<Up> Suc n = f \\<Up> n", "by (simp add: expand_ilist_eq i_append_nth)"], ["", "lemma i_drop_Suc_conv_tl': \"([f n] \\<frown> f) \\<Up> Suc n = f \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([f n] \\<frown> f) \\<Up> Suc n = f \\<Up> n", "by (simp add: i_drop_Suc_Cons)"], ["", "lemma i_take_i_drop: \"f \\<Up> m \\<Down> n = f \\<Down> (n + m) \\<up> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> m \\<Down> n = f \\<Down> (n + m) \\<up> m", "by (simp add: expand_list_eq)"], ["", "text \\<open>Appending an interval of a function\\<close>"], ["", "lemma i_take_int_append: \"\n  m \\<le> n \\<Longrightarrow> (f \\<Down> m) @ map f [m..<n] = f \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> f \\<Down> m @ map f [m..<n] = f \\<Down> n", "by (simp add: expand_list_eq nth_append)"], ["", "lemma i_take_drop_map_empty_iff: \"(f \\<Down> n \\<up> m = []) = (n \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<Down> n \\<up> m = []) = (n \\<le> m)", "by simp"], ["", "lemma i_take_drop_map: \"f \\<Down> n \\<up> m = map f [m..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<up> m = map f [m..<n]", "by (simp add: expand_list_eq)"], ["", "corollary i_take_drop_append[simp]: \"\n  m \\<le> n \\<Longrightarrow> (f \\<Down> m) @ (f \\<Down> n \\<up> m) = f \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow>\n    f \\<Down> m @ f \\<Down> n \\<up> m = f \\<Down> n", "by (simp add: i_take_drop_map i_take_int_append)"], ["", "lemma i_take_drop: \"f \\<Down> n \\<up> m = f \\<Up> m \\<Down> (n - m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<up> m = f \\<Up> m \\<Down> (n - m)", "by (simp add: expand_list_eq)"], ["", "lemma i_take_o[simp]: \"(f \\<circ> g) \\<Down> n = map f (g \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> g) \\<Down> n = map f (g \\<Down> n)", "by (simp add: expand_list_eq)"], ["", "lemma i_drop_o[simp]: \"(f \\<circ> g) \\<Up> n = f \\<circ> (g \\<Up> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> g) \\<Up> n = f \\<circ> g \\<Up> n", "by (simp add: expand_ilist_eq)"], ["", "lemma set_i_take_subset: \"set (f \\<Down> n) \\<subseteq> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (f \\<Down> n) \\<subseteq> range f", "by (fastforce simp: in_set_conv_nth)"], ["", "lemma range_i_drop_subset: \"range (f \\<Up> n) \\<subseteq> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (f \\<Up> n) \\<subseteq> range f", "by fastforce"], ["", "lemma in_set_i_takeD: \"x \\<in> set (f \\<Down> n) \\<Longrightarrow> x \\<in> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (f \\<Down> n) \\<Longrightarrow> x \\<in> range f", "by (rule subsetD[OF set_i_take_subset])"], ["", "lemma in_range_i_takeD: \"x \\<in> range (f \\<Up> n) \\<Longrightarrow> x \\<in> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> range (f \\<Up> n) \\<Longrightarrow> x \\<in> range f", "by (rule subsetD[OF range_i_drop_subset])"], ["", "lemma i_append_eq_conv_conj: \"\n  ((xs \\<frown> f) = g) = (xs = g \\<Down> length xs \\<and> f = g \\<Up> length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f = g) =\n    (xs = g \\<Down> length xs \\<and> f = g \\<Up> length xs)", "apply (simp add: expand_ilist_eq expand_list_eq i_append_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n        (\\<not> x < length xs \\<longrightarrow> f (x - length xs) = g x)) =\n    ((\\<forall>i<length xs. xs ! i = g i) \\<and>\n     (\\<forall>x. f x = g (length xs + x)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x.\n       (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n       (\\<not> x < length xs \\<longrightarrow>\n        f (x - length xs) = g x) \\<Longrightarrow>\n    (\\<forall>i<length xs. xs ! i = g i) \\<and>\n    (\\<forall>x. f x = g (length xs + x))\n 2. (\\<forall>i<length xs. xs ! i = g i) \\<and>\n    (\\<forall>x. f x = g (length xs + x)) \\<Longrightarrow>\n    \\<forall>x.\n       (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n       (\\<not> x < length xs \\<longrightarrow> f (x - length xs) = g x)", "apply (clarsimp, rename_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>x.\n          (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n          (\\<not> x < length xs \\<longrightarrow>\n           f (x - length xs) = g x) \\<Longrightarrow>\n       f x = g (length xs + x)\n 2. (\\<forall>i<length xs. xs ! i = g i) \\<and>\n    (\\<forall>x. f x = g (length xs + x)) \\<Longrightarrow>\n    \\<forall>x.\n       (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n       (\\<not> x < length xs \\<longrightarrow> f (x - length xs) = g x)", "apply (drule_tac x=\"length xs + x\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (length xs + x < length xs \\<longrightarrow>\n        xs ! (length xs + x) = g (length xs + x)) \\<and>\n       (\\<not> length xs + x < length xs \\<longrightarrow>\n        f (length xs + x - length xs) = g (length xs + x)) \\<Longrightarrow>\n       f x = g (length xs + x)\n 2. (\\<forall>i<length xs. xs ! i = g i) \\<and>\n    (\\<forall>x. f x = g (length xs + x)) \\<Longrightarrow>\n    \\<forall>x.\n       (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n       (\\<not> x < length xs \\<longrightarrow> f (x - length xs) = g x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i<length xs. xs ! i = g i) \\<and>\n    (\\<forall>x. f x = g (length xs + x)) \\<Longrightarrow>\n    \\<forall>x.\n       (x < length xs \\<longrightarrow> xs ! x = g x) \\<and>\n       (\\<not> x < length xs \\<longrightarrow> f (x - length xs) = g x)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_take_add: \"f \\<Down> (i + j) = (f \\<Down> i) @ (f \\<Up> i \\<Down> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> (i + j) = f \\<Down> i @ f \\<Up> i \\<Down> j", "by (simp add: expand_list_eq nth_append)"], ["", "lemma i_append_eq_i_append_conv_if_aux: \"\n  length xs \\<le> length ys \\<Longrightarrow>\n  (xs \\<frown> f = ys \\<frown> g) = (xs = ys \\<down> length xs \\<and> f = (ys \\<up> length xs) \\<frown> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    (xs \\<frown> f = ys \\<frown> g) =\n    (xs = ys \\<down> length xs \\<and> f = ys \\<up> length xs \\<frown> g)", "apply (simp add: expand_list_eq expand_ilist_eq i_append_nth min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    (\\<forall>x.\n        (x < length xs \\<longrightarrow> xs ! x = ys ! x) \\<and>\n        (\\<not> x < length xs \\<longrightarrow>\n         (x < length ys \\<longrightarrow> f (x - length xs) = ys ! x) \\<and>\n         (\\<not> x < length ys \\<longrightarrow>\n          f (x - length xs) = g (x - length ys)))) =\n    ((\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n     (\\<forall>x.\n         (x < length ys - length xs \\<longrightarrow>\n          f x = ys ! (length xs + x)) \\<and>\n         (\\<not> x < length ys - length xs \\<longrightarrow>\n          f x = g (x + length xs - length ys))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ys;\n     \\<forall>x.\n        (x < length xs \\<longrightarrow> xs ! x = ys ! x) \\<and>\n        (\\<not> x < length xs \\<longrightarrow>\n         (x < length ys \\<longrightarrow> f (x - length xs) = ys ! x) \\<and>\n         (\\<not> x < length ys \\<longrightarrow>\n          f (x - length xs) = g (x - length ys)))\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n                      (\\<forall>x.\n                          (x < length ys - length xs \\<longrightarrow>\n                           f x = ys ! (length xs + x)) \\<and>\n                          (\\<not> x < length ys -\nlength xs \\<longrightarrow>\n                           f x = g (x + length xs - length ys)))\n 2. \\<lbrakk>length xs \\<le> length ys;\n     (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n     (\\<forall>x.\n         (x < length ys - length xs \\<longrightarrow>\n          f x = ys ! (length xs + x)) \\<and>\n         (\\<not> x < length ys - length xs \\<longrightarrow>\n          f x = g (x + length xs - length ys)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (x < length xs \\<longrightarrow>\n                          xs ! x = ys ! x) \\<and>\n                         (\\<not> x < length xs \\<longrightarrow>\n                          (x < length ys \\<longrightarrow>\n                           f (x - length xs) = ys ! x) \\<and>\n                          (\\<not> x < length ys \\<longrightarrow>\n                           f (x - length xs) = g (x - length ys)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ys;\n     \\<forall>x.\n        (x < length xs \\<longrightarrow> xs ! x = ys ! x) \\<and>\n        (\\<not> x < length xs \\<longrightarrow>\n         (x < length ys \\<longrightarrow> f (x - length xs) = ys ! x) \\<and>\n         (\\<not> x < length ys \\<longrightarrow>\n          f (x - length xs) = g (x - length ys)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (x < length ys - length xs \\<longrightarrow>\n                          f x = ys ! (length xs + x)) \\<and>\n                         (\\<not> x < length ys - length xs \\<longrightarrow>\n                          f x = g (x + length xs - length ys))\n 2. \\<lbrakk>length xs \\<le> length ys;\n     (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n     (\\<forall>x.\n         (x < length ys - length xs \\<longrightarrow>\n          f x = ys ! (length xs + x)) \\<and>\n         (\\<not> x < length ys - length xs \\<longrightarrow>\n          f x = g (x + length xs - length ys)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (x < length xs \\<longrightarrow>\n                          xs ! x = ys ! x) \\<and>\n                         (\\<not> x < length xs \\<longrightarrow>\n                          (x < length ys \\<longrightarrow>\n                           f (x - length xs) = ys ! x) \\<and>\n                          (\\<not> x < length ys \\<longrightarrow>\n                           f (x - length xs) = g (x - length ys)))", "apply (clarify, rename_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs \\<le> length ys;\n        \\<forall>x.\n           (x < length xs \\<longrightarrow> xs ! x = ys ! x) \\<and>\n           (\\<not> x < length xs \\<longrightarrow>\n            (x < length ys \\<longrightarrow>\n             f (x - length xs) = ys ! x) \\<and>\n            (\\<not> x < length ys \\<longrightarrow>\n             f (x - length xs) = g (x - length ys)))\\<rbrakk>\n       \\<Longrightarrow> (x < length ys - length xs \\<longrightarrow>\n                          f x = ys ! (length xs + x)) \\<and>\n                         (\\<not> x < length ys - length xs \\<longrightarrow>\n                          f x = g (x + length xs - length ys))\n 2. \\<lbrakk>length xs \\<le> length ys;\n     (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n     (\\<forall>x.\n         (x < length ys - length xs \\<longrightarrow>\n          f x = ys ! (length xs + x)) \\<and>\n         (\\<not> x < length ys - length xs \\<longrightarrow>\n          f x = g (x + length xs - length ys)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (x < length xs \\<longrightarrow>\n                          xs ! x = ys ! x) \\<and>\n                         (\\<not> x < length xs \\<longrightarrow>\n                          (x < length ys \\<longrightarrow>\n                           f (x - length xs) = ys ! x) \\<and>\n                          (\\<not> x < length ys \\<longrightarrow>\n                           f (x - length xs) = g (x - length ys)))", "apply (drule_tac x=\"length xs + x\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs \\<le> length ys;\n        (length xs + x < length xs \\<longrightarrow>\n         xs ! (length xs + x) = ys ! (length xs + x)) \\<and>\n        (\\<not> length xs + x < length xs \\<longrightarrow>\n         (length xs + x < length ys \\<longrightarrow>\n          f (length xs + x - length xs) = ys ! (length xs + x)) \\<and>\n         (\\<not> length xs + x < length ys \\<longrightarrow>\n          f (length xs + x - length xs) =\n          g (length xs + x - length ys)))\\<rbrakk>\n       \\<Longrightarrow> (x < length ys - length xs \\<longrightarrow>\n                          f x = ys ! (length xs + x)) \\<and>\n                         (\\<not> x < length ys - length xs \\<longrightarrow>\n                          f x = g (x + length xs - length ys))\n 2. \\<lbrakk>length xs \\<le> length ys;\n     (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n     (\\<forall>x.\n         (x < length ys - length xs \\<longrightarrow>\n          f x = ys ! (length xs + x)) \\<and>\n         (\\<not> x < length ys - length xs \\<longrightarrow>\n          f x = g (x + length xs - length ys)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (x < length xs \\<longrightarrow>\n                          xs ! x = ys ! x) \\<and>\n                         (\\<not> x < length xs \\<longrightarrow>\n                          (x < length ys \\<longrightarrow>\n                           f (x - length xs) = ys ! x) \\<and>\n                          (\\<not> x < length ys \\<longrightarrow>\n                           f (x - length xs) = g (x - length ys)))", "apply (simp add: less_diff_conv add.commute[of _ \"length xs\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<le> length ys;\n     (\\<forall>i<length xs. xs ! i = ys ! i) \\<and>\n     (\\<forall>x.\n         (x < length ys - length xs \\<longrightarrow>\n          f x = ys ! (length xs + x)) \\<and>\n         (\\<not> x < length ys - length xs \\<longrightarrow>\n          f x = g (x + length xs - length ys)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (x < length xs \\<longrightarrow>\n                          xs ! x = ys ! x) \\<and>\n                         (\\<not> x < length xs \\<longrightarrow>\n                          (x < length ys \\<longrightarrow>\n                           f (x - length xs) = ys ! x) \\<and>\n                          (\\<not> x < length ys \\<longrightarrow>\n                           f (x - length xs) = g (x - length ys)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_append_eq_i_append_conv_if: \"\n  (xs \\<frown> f = ys \\<frown> g) =\n  (if length xs \\<le> length ys\n   then xs = ys \\<down> length xs \\<and> f = (ys \\<up> length xs) \\<frown> g\n   else xs \\<down> length ys = ys \\<and> (xs \\<up> length ys) \\<frown> f = g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f = ys \\<frown> g) =\n    (if length xs \\<le> length ys\n     then xs = ys \\<down> length xs \\<and> f = ys \\<up> length xs \\<frown> g\n     else xs \\<down> length ys = ys \\<and>\n          xs \\<up> length ys \\<frown> f = g)", "apply (split if_split, intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    (xs \\<frown> f = ys \\<frown> g) =\n    (xs = ys \\<down> length xs \\<and> f = ys \\<up> length xs \\<frown> g)\n 2. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    (xs \\<frown> f = ys \\<frown> g) =\n    (xs \\<down> length ys = ys \\<and> xs \\<up> length ys \\<frown> f = g)", "apply (simp add: i_append_eq_i_append_conv_if_aux)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    (xs \\<frown> f = ys \\<frown> g) =\n    (xs \\<down> length ys = ys \\<and> xs \\<up> length ys \\<frown> f = g)", "apply (force simp: eq_commute[of \"xs \\<frown> f\"] i_append_eq_i_append_conv_if_aux)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_take_hd_i_drop: \"(f \\<Down> n) @ [(f \\<Up> n) 0] = f \\<Down> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n @ [(f \\<Up> n) 0] = f \\<Down> Suc n", "by (simp add: i_take_Suc_conv_app_nth)"], ["", "lemma id_i_take_nth_i_drop: \"f = (f \\<Down> n) \\<frown> (([f n] \\<frown> f) \\<Up> Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = f \\<Down> n \\<frown> ([f n] \\<frown> f) \\<Up> Suc n", "by (simp add: i_drop_Suc_Cons)"], ["", "lemma upd_conv_i_take_nth_i_drop: \"\n  f (n := x) = (f \\<Down> n) \\<frown> ([x] \\<frown> (f \\<Up> Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f(n := x) = f \\<Down> n \\<frown> [x] \\<frown> f \\<Up> Suc n", "by (simp add: expand_ilist_eq nth_append i_append_nth)"], ["", "theorem i_take_induct: \"\n  \\<lbrakk> P (f \\<Down> 0); \\<And>n. P (f \\<Down> n) \\<Longrightarrow> P ( f \\<Down> Suc n) \\<rbrakk> \\<Longrightarrow> P ( f \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (f \\<Down> 0);\n     \\<And>n. P (f \\<Down> n) \\<Longrightarrow> P (f \\<Down> Suc n)\\<rbrakk>\n    \\<Longrightarrow> P (f \\<Down> n)", "by (rule nat.induct)"], ["", "theorem take_induct[rule_format]: \"\n  \\<lbrakk> P (s \\<down> 0);\n    \\<And>n.  \\<lbrakk> Suc n < length s; P (s \\<down> n) \\<rbrakk> \\<Longrightarrow> P ( s \\<down> Suc n);\n    i < length s\\<rbrakk>\n  \\<Longrightarrow> P (s \\<down> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (s \\<down> 0);\n     \\<And>n.\n        \\<lbrakk>Suc n < length s; P (s \\<down> n)\\<rbrakk>\n        \\<Longrightarrow> P (s \\<down> Suc n);\n     i < length s\\<rbrakk>\n    \\<Longrightarrow> P (s \\<down> i)", "by (induct i, simp+)"], ["", "theorem i_drop_induct: \"\n  \\<lbrakk> P (f \\<Up> 0); \\<And>n. P (f \\<Up> n) \\<Longrightarrow> P ( f \\<Up> Suc n) \\<rbrakk> \\<Longrightarrow> P ( f \\<Up> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (f \\<Up> 0);\n     \\<And>n. P (f \\<Up> n) \\<Longrightarrow> P (f \\<Up> Suc n)\\<rbrakk>\n    \\<Longrightarrow> P (f \\<Up> n)", "by (rule nat.induct)"], ["", "theorem f_drop_induct[rule_format]: \"\n  \\<lbrakk> P (s \\<up> 0);\n    \\<And>n.  \\<lbrakk> Suc n < length s; P (s \\<up> n) \\<rbrakk> \\<Longrightarrow> P ( s \\<up> Suc n);\n    i < length s\\<rbrakk>\n  \\<Longrightarrow> P (s \\<up> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (s \\<up> 0);\n     \\<And>n.\n        \\<lbrakk>Suc n < length s; P (s \\<up> n)\\<rbrakk>\n        \\<Longrightarrow> P (s \\<up> Suc n);\n     i < length s\\<rbrakk>\n    \\<Longrightarrow> P (s \\<up> i)", "by (induct i, simp+)"], ["", "lemma i_take_drop_eq_map: \"f \\<Up> m \\<Down> n = map f [m..<m+n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> m \\<Down> n = map f [m..<m + n]", "by (simp add: expand_list_eq)"], ["", "lemma o_eq_i_append_imp: \"\n  f \\<circ> g = ys \\<frown> i \\<Longrightarrow>\n  \\<exists>xs h. g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ> g = ys \\<frown> i \\<Longrightarrow>\n    \\<exists>xs h.\n       g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i", "apply (rule_tac x=\"g \\<Down> (length ys)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ> g = ys \\<frown> i \\<Longrightarrow>\n    \\<exists>h.\n       g = g \\<Down> length ys \\<frown> h \\<and>\n       map f (g \\<Down> length ys) = ys \\<and> f \\<circ> h = i", "apply (rule_tac x=\"g \\<Up> (length ys)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ> g = ys \\<frown> i \\<Longrightarrow>\n    g = g \\<Down> length ys \\<frown> g \\<Up> length ys \\<and>\n    map f (g \\<Down> length ys) = ys \\<and> f \\<circ> g \\<Up> length ys = i", "apply (frule arg_cong[where f=\"\\<lambda>x. x \\<Down> length ys\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<circ> g = ys \\<frown> i;\n     (f \\<circ> g) \\<Down> length ys =\n     (ys \\<frown> i) \\<Down> length ys\\<rbrakk>\n    \\<Longrightarrow> g =\n                      g \\<Down> length ys \\<frown> g \\<Up> length ys \\<and>\n                      map f (g \\<Down> length ys) = ys \\<and>\n                      f \\<circ> g \\<Up> length ys = i", "apply (drule arg_cong[where f=\"\\<lambda>x. x \\<Up> length ys\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<circ> g) \\<Down> length ys =\n             (ys \\<frown> i) \\<Down> length ys;\n     (f \\<circ> g) \\<Up> length ys =\n     (ys \\<frown> i) \\<Up> length ys\\<rbrakk>\n    \\<Longrightarrow> g =\n                      g \\<Down> length ys \\<frown> g \\<Up> length ys \\<and>\n                      map f (g \\<Down> length ys) = ys \\<and>\n                      f \\<circ> g \\<Up> length ys = i", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary o_eq_i_append_conv: \"\n  (f \\<circ> g = ys \\<frown> i) =\n  (\\<exists>xs h. g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> g = ys \\<frown> i) =\n    (\\<exists>xs h.\n        g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i)", "by (fastforce simp: o_eq_i_append_imp)"], ["", "corollary i_append_eq_o_conv: \"\n  (ys \\<frown> i = f \\<circ> g) =\n  (\\<exists>xs h. g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys \\<frown> i = f \\<circ> g) =\n    (\\<exists>xs h.\n        g = xs \\<frown> h \\<and> map f xs = ys \\<and> f \\<circ> h = i)", "by (fastforce simp: o_eq_i_append_imp)"], ["", "subsubsection \\<open>@{term zip} for infinite lists\\<close>"], ["", "definition i_zip :: \"'a ilist \\<Rightarrow> 'b ilist \\<Rightarrow> ('a \\<times> 'b) ilist\"\n  where \"i_zip f g \\<equiv> \\<lambda>n. (f n, g n)\""], ["", "lemma i_zip_nth: \"(i_zip f g) n = (f n, g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip f g n = (f n, g n)", "by (simp add: i_zip_def)"], ["", "lemma i_zip_swap: \"(\\<lambda>(y, x). (x, y)) \\<circ> i_zip g f = i_zip f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(y, x). (x, y)) \\<circ> i_zip g f = i_zip f g", "by (simp add: expand_ilist_eq i_zip_nth)"], ["", "lemma i_zip_i_take: \"(i_zip f g) \\<Down> n = zip (f \\<Down> n) (g \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip f g \\<Down> n = zip (f \\<Down> n) (g \\<Down> n)", "by (simp add: expand_list_eq i_zip_nth)"], ["", "lemma i_zip_i_drop: \"(i_zip f g) \\<Up> n = i_zip (f \\<Up> n) (g \\<Up> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip f g \\<Up> n = i_zip (f \\<Up> n) (g \\<Up> n)", "by (simp add: expand_ilist_eq i_zip_nth)"], ["", "lemma fst_o_izip: \"fst \\<circ> (i_zip f g) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<circ> i_zip f g = f", "by (simp add: expand_ilist_eq i_zip_nth)"], ["", "lemma snd_o_i_zip: \"snd \\<circ> (i_zip f g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<circ> i_zip f g = g", "by (simp add: expand_ilist_eq i_zip_nth)"], ["", "lemma update_i_zip: \"\n  (i_zip f g)(n := xy) = i_zip (f(n := fst xy)) (g(n := snd xy))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i_zip f g)(n := xy) = i_zip (f(n := fst xy)) (g(n := snd xy))", "by (simp add: expand_ilist_eq i_zip_nth)"], ["", "lemma i_zip_Cons_Cons: \"\n  i_zip ([x] \\<frown> f) ([y] \\<frown> g) = [(x, y)] \\<frown> (i_zip f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip ([x] \\<frown> f) ([y] \\<frown> g) = [(x, y)] \\<frown> i_zip f g", "by (simp add: expand_ilist_eq i_zip_nth i_append_nth)"], ["", "lemma i_zip_i_append1: \"\n  i_zip (xs \\<frown> f) g = zip xs (g \\<Down> length xs) \\<frown> (i_zip f (g \\<Up> length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip (xs \\<frown> f) g =\n    zip xs (g \\<Down> length xs) \\<frown> i_zip f (g \\<Up> length xs)", "by (simp add: expand_ilist_eq i_zip_nth i_append_nth)"], ["", "lemma i_zip_i_append2: \"\n  i_zip f (ys \\<frown> g) = zip (f \\<Down> length ys) ys \\<frown> (i_zip (f \\<Up> length ys) g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip f (ys \\<frown> g) =\n    zip (f \\<Down> length ys) ys \\<frown> i_zip (f \\<Up> length ys) g", "by (simp add: expand_ilist_eq i_zip_nth i_append_nth)"], ["", "lemma i_zip_append: \"\n  length xs = length ys \\<Longrightarrow>\n  i_zip (xs \\<frown> f) (ys \\<frown> g) = zip xs ys \\<frown> (i_zip f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow>\n    i_zip (xs \\<frown> f) (ys \\<frown> g) = zip xs ys \\<frown> i_zip f g", "by (simp add: expand_ilist_eq i_zip_nth i_append_nth)"], ["", "lemma i_zip_range: \"range (i_zip f g) = { (f n, g n)| n. True }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (i_zip f g) = {(f n, g n) |n. True}", "by (fastforce simp: i_zip_nth)"], ["", "lemma i_zip_update: \"\n  i_zip (f(n := x)) (g(n := y)) = (i_zip f g)( n := (x, y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip (f(n := x)) (g(n := y)) = (i_zip f g)(n := (x, y))", "by (simp add: update_i_zip)"], ["", "lemma i_zip_const: \"i_zip (\\<lambda>n. x) (\\<lambda>n. y) = (\\<lambda>n. (x, y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_zip (\\<lambda>n. x) (\\<lambda>n. y) = (\\<lambda>n. (x, y))", "by (simp add: expand_ilist_eq i_zip_nth)"], ["", "subsubsection \\<open>Mapping functions with two arguments to infinite lists\\<close>"], ["", "definition i_map2 :: \"\n  \\<comment> \\<open>Function taking two parameters\\<close>\n  ('a \\<Rightarrow> 'b \\<Rightarrow> 'c) \\<Rightarrow>\n  \\<comment> \\<open>Lists of parameters\\<close>\n  'a ilist \\<Rightarrow> 'b ilist \\<Rightarrow>\n  'c ilist\"\nwhere\n  \"i_map2 f xs ys \\<equiv> \\<lambda>n. f (xs n) (ys n)\""], ["", "lemma i_map2_nth: \"(i_map2 f xs ys) n = f (xs n) (ys n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f xs ys n = f (xs n) (ys n)", "by (simp add: i_map2_def)"], ["", "lemma i_map2_Cons_Cons: \"\n  i_map2 f ([x] \\<frown> xs) ([y] \\<frown> ys) =\n  [f x y] \\<frown> (i_map2 f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f ([x] \\<frown> xs) ([y] \\<frown> ys) =\n    [f x y] \\<frown> i_map2 f xs ys", "by (simp add: fun_eq_iff i_map2_nth i_append_nth_Cons')"], ["", "lemma i_map2_take_ge: \"\n  n \\<le> n1 \\<Longrightarrow>\n  i_map2 f xs ys \\<Down> n =\n  map2 f (xs \\<Down> n) (ys \\<Down> n1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> n1 \\<Longrightarrow>\n    i_map2 f xs ys \\<Down> n = map2 f (xs \\<Down> n) (ys \\<Down> n1)", "by (simp add: expand_list_eq map2_length i_map2_nth map2_nth)"], ["", "lemma i_map2_take_take: \"\n  i_map2 f xs ys \\<Down> n =\n  map2 f (xs \\<Down> n) (ys \\<Down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f xs ys \\<Down> n = map2 f (xs \\<Down> n) (ys \\<Down> n)", "by (rule i_map2_take_ge[OF le_refl])"], ["", "lemma i_map2_drop: \"\n  (i_map2 f xs ys) \\<Up> n =\n  (i_map2 f (xs \\<Up> n) (ys \\<Up> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f xs ys \\<Up> n = i_map2 f (xs \\<Up> n) (ys \\<Up> n)", "by (simp add: fun_eq_iff i_map2_nth)"], ["", "lemma i_map2_append_append: \"\n  length xs1 = length ys1 \\<Longrightarrow>\n  i_map2 f (xs1 \\<frown> xs) (ys1 \\<frown> ys) =\n  map2 f xs1 ys1 \\<frown> i_map2 f xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs1 = length ys1 \\<Longrightarrow>\n    i_map2 f (xs1 \\<frown> xs) (ys1 \\<frown> ys) =\n    map2 f xs1 ys1 \\<frown> i_map2 f xs ys", "by (simp add: fun_eq_iff i_map2_nth i_append_nth map2_length map2_nth)"], ["", "lemma i_map2_Cons_left: \"\n  i_map2 f ([x] \\<frown> xs) ys =\n  [f x (ys 0)] \\<frown> i_map2 f xs (ys \\<Up> Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f ([x] \\<frown> xs) ys =\n    [f x (ys 0)] \\<frown> i_map2 f xs (ys \\<Up> Suc 0)", "by (simp add: fun_eq_iff i_map2_nth i_append_nth_Cons')"], ["", "lemma i_map2_Cons_right: \"\n  i_map2 f xs ([y] \\<frown> ys) =\n  [f (xs 0) y] \\<frown> i_map2 f (xs \\<Up> Suc 0) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f xs ([y] \\<frown> ys) =\n    [f (xs 0) y] \\<frown> i_map2 f (xs \\<Up> Suc 0) ys", "by (simp add: fun_eq_iff i_map2_nth i_append_nth_Cons')"], ["", "lemma i_map2_append_take_drop_left: \"\n  i_map2 f (xs1 \\<frown> xs) ys =\n  map2 f xs1 (ys \\<Down> length xs1) \\<frown>\n  i_map2 f xs (ys \\<Up> length xs1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f (xs1 \\<frown> xs) ys =\n    map2 f xs1 (ys \\<Down> length xs1) \\<frown>\n    i_map2 f xs (ys \\<Up> length xs1)", "by (simp add: fun_eq_iff map2_nth i_map2_nth i_append_nth map2_length)"], ["", "lemma i_map2_append_take_drop_right: \"\n  i_map2 f xs (ys1 \\<frown> ys) =\n  map2 f (xs \\<Down> length ys1) ys1 \\<frown>\n  i_map2 f (xs \\<Up> length ys1) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f xs (ys1 \\<frown> ys) =\n    map2 f (xs \\<Down> length ys1) ys1 \\<frown>\n    i_map2 f (xs \\<Up> length ys1) ys", "by (simp add: fun_eq_iff map2_nth i_map2_nth i_append_nth map2_length)"], ["", "lemma i_map2_cong: \"\n  \\<lbrakk> xs1 = xs2; ys1 = ys2;\n    \\<And>x y. \\<lbrakk> x \\<in> range xs2; y \\<in> range ys2 \\<rbrakk> \\<Longrightarrow> f x y = g x y \\<rbrakk> \\<Longrightarrow>\n  i_map2 f xs1 ys1 = i_map2 g xs2 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs1 = xs2; ys1 = ys2;\n     \\<And>x y.\n        \\<lbrakk>x \\<in> range xs2; y \\<in> range ys2\\<rbrakk>\n        \\<Longrightarrow> f x y = g x y\\<rbrakk>\n    \\<Longrightarrow> i_map2 f xs1 ys1 = i_map2 g xs2 ys2", "by (simp add: fun_eq_iff i_map2_nth)"], ["", "lemma i_map2_eq_conv: \"\n  (i_map2 f xs ys = i_map2 g xs ys) = (\\<forall>i. f (xs i) (ys i) = g (xs i) (ys i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i_map2 f xs ys = i_map2 g xs ys) =\n    (\\<forall>i. f (xs i) (ys i) = g (xs i) (ys i))", "by (simp add: fun_eq_iff i_map2_nth)"], ["", "lemma i_map2_replicate: \"i_map2 f (\\<lambda>n. x) (\\<lambda>n. y)  = (\\<lambda>n. f x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f (\\<lambda>n. x) (\\<lambda>n. y) = (\\<lambda>n. f x y)", "by (simp add: fun_eq_iff i_map2_nth)"], ["", "lemma i_map2_i_zip_conv: \"\n  i_map2 f xs ys = (\\<lambda>(x,y). f x y) \\<circ> (i_zip xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_map2 f xs ys = (\\<lambda>(x, y). f x y) \\<circ> i_zip xs ys", "by (simp add: fun_eq_iff i_map2_nth i_zip_nth)"], ["", "subsection \\<open>Generalised lists as combination of finite and infinite lists\\<close>"], ["", "subsubsection \\<open>Basic definitions\\<close>"], ["", "datatype (gset: 'a) glist = FL \"'a list\" | IL \"'a ilist\" for map: gmap"], ["", "definition glength :: \"'a glist \\<Rightarrow> enat\"\nwhere\n  \"glength a \\<equiv> case a of\n    FL xs \\<Rightarrow> enat (length xs) |\n    IL f  \\<Rightarrow> \\<infinity>\""], ["", "definition gCons :: \"'a \\<Rightarrow> 'a glist \\<Rightarrow> 'a glist\"  (infixr \"#\\<^sub>g\" 65)\nwhere\n  \"x #\\<^sub>g a \\<equiv> case a of\n    FL xs \\<Rightarrow> FL (x # xs) |\n    IL g  \\<Rightarrow> IL ([x] \\<frown> g)\""], ["", "definition gappend :: \"'a glist \\<Rightarrow> 'a glist \\<Rightarrow> 'a glist\"  (infixr \"@\\<^sub>g\" 65)\nwhere\n  \"gappend a b \\<equiv> case a of\n    FL xs \\<Rightarrow> (case b of FL ys \\<Rightarrow> FL (xs @ ys) | IL f \\<Rightarrow> IL (xs \\<frown> f)) |\n    IL f  \\<Rightarrow> IL f\""], ["", "definition gtake :: \"enat \\<Rightarrow> 'a glist \\<Rightarrow> 'a glist\"\nwhere\n  \"gtake n a \\<equiv> case n of\n    enat m \\<Rightarrow> FL (case a of\n      FL xs \\<Rightarrow> xs \\<down> m |\n      IL f  \\<Rightarrow> f \\<Down> m) |\n    \\<infinity> \\<Rightarrow> a\""], ["", "definition gdrop :: \"enat \\<Rightarrow> 'a glist \\<Rightarrow> 'a glist\"\nwhere\n  \"gdrop n a \\<equiv> case n of\n    enat m \\<Rightarrow> (case a of\n      FL xs \\<Rightarrow> FL (xs \\<up> m) |\n      IL f  \\<Rightarrow> IL (f \\<Up> m)) |\n    \\<infinity> \\<Rightarrow> FL []\""], ["", "definition gnth :: \"'a glist \\<Rightarrow> nat \\<Rightarrow> 'a\"  (infixl \"!\\<^sub>g\" 100)\nwhere\n  \"a !\\<^sub>g n \\<equiv> case a of\n    FL xs \\<Rightarrow> xs ! n |\n    IL f  \\<Rightarrow> f n\""], ["", "abbreviation g_take' :: \"'a glist \\<Rightarrow> enat \\<Rightarrow> 'a glist\"  (infixl \"\\<down>\\<^sub>g\" 100)\n  where \"a \\<down>\\<^sub>g n \\<equiv> gtake n a\""], ["", "abbreviation g_drop' :: \"'a glist \\<Rightarrow> enat \\<Rightarrow> 'a glist\"  (infixl \"\\<up>\\<^sub>g\" 100)\n  where \"a \\<up>\\<^sub>g n \\<equiv> gdrop n a\""], ["", "subsubsection \\<open>\\<open>glength\\<close>\\<close>"], ["", "lemma glength_fin[simp]: \"glength (FL xs) = enat (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength (FL xs) = enat (length xs)", "by (simp add: glength_def)"], ["", "lemma glength_infin[simp]: \"glength (IL f) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength (IL f) = \\<infinity>", "by (simp add: glength_def)"], ["", "lemma gappend_glength[simp]: \"glength (a @\\<^sub>g b) = glength a + glength b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength (a @\\<^sub>g b) = glength a + glength b", "by (unfold gappend_def, case_tac a, case_tac b, simp+)"], ["", "lemma gmap_glength[simp]: \"glength (gmap f a) = glength a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength (gmap f a) = glength a", "by (case_tac a, simp+)"], ["", "lemma glength_0_conv[simp]: \"(glength a = 0) = (a = FL [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glength a = 0) = (a = FL [])", "by (unfold glength_def, case_tac a, simp+)"], ["", "lemma glength_greater_0_conv[simp]: \"(0 < glength a) = (a \\<noteq> FL [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < glength a) = (a \\<noteq> FL [])", "by (simp add: glength_0_conv[symmetric])"], ["", "lemma glength_gSuc_conv: \"\n  (glength a = eSuc n) =\n  (\\<exists>x b. a = x #\\<^sub>g b \\<and> glength b = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glength a = eSuc n) =\n    (\\<exists>x b. a = x #\\<^sub>g b \\<and> glength b = n)", "apply (unfold glength_def gCons_def, rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n \\<Longrightarrow>\n    \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n\n 2. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (case_tac a, rename_tac a')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (case_tac n, rename_tac n')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = enat n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (rule_tac x=\"hd a'\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = enat n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (hd a' # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([hd a'] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (rule_tac x=\"FL (tl a')\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = enat n'\\<rbrakk>\n       \\<Longrightarrow> a =\n                         (case FL (tl a') of\n                          FL xs \\<Rightarrow> FL (hd a' # xs)\n                          | IL g \\<Rightarrow>\n                              IL ([hd a'] \\<frown> g)) \\<and>\n                         (case FL (tl a') of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         n\n 2. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (simp add: eSuc_enat)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>length a' = Suc n'; a = FL a'; n = enat n'\\<rbrakk>\n       \\<Longrightarrow> a' = hd a' # tl a'\n 2. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (subgoal_tac \"a' \\<noteq> []\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>length a' = Suc n'; a = FL a'; n = enat n';\n        a' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> a' = hd a' # tl a'\n 2. \\<And>a' n'.\n       \\<lbrakk>length a' = Suc n'; a = FL a'; n = enat n'\\<rbrakk>\n       \\<Longrightarrow> a' \\<noteq> []\n 3. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 5. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>length a' = Suc n'; a = FL a'; n = enat n'\\<rbrakk>\n       \\<Longrightarrow> a' \\<noteq> []\n 2. \\<And>a' n'.\n       \\<lbrakk>length a' = Suc n'; a = FL a'; n = enat n';\n        a' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> a' = hd a' # tl a'\n 3. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 5. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a' n'.\n       \\<lbrakk>length a' = Suc n'; a = FL a'; n = enat n';\n        a' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> a' = hd a' # tl a'\n 2. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 4. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a'.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = FL a'; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 3. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (rename_tac f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (case_tac n, simp add: eSuc_enat)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL f; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (x # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([x] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (rule_tac x=\"f 0\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL f; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            a =\n                            (case b of FL xs \\<Rightarrow> FL (f 0 # xs)\n                             | IL g \\<Rightarrow>\n                                 IL ([f 0] \\<frown> g)) \\<and>\n                            (case b of FL xs \\<Rightarrow> enat (length xs)\n                             | IL f \\<Rightarrow> \\<infinity>) =\n                            n\n 2. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (rule_tac x=\"IL (f \\<Up> Suc 0)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>(case a of FL xs \\<Rightarrow> enat (length xs)\n                 | IL f \\<Rightarrow> \\<infinity>) =\n                eSuc n;\n        a = IL f; n = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a =\n                         (case IL (f \\<Up> Suc 0) of\n                          FL xs \\<Rightarrow> FL (f 0 # xs)\n                          | IL g \\<Rightarrow> IL ([f 0] \\<frown> g)) \\<and>\n                         (case IL (f \\<Up> Suc 0) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         n\n 2. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (simp add: i_take_first[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x b.\n       a =\n       (case b of FL xs \\<Rightarrow> FL (x # xs)\n        | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<and>\n       (case b of FL xs \\<Rightarrow> enat (length xs)\n        | IL f \\<Rightarrow> \\<infinity>) =\n       n \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> enat (length xs)\n     | IL f \\<Rightarrow> \\<infinity>) =\n    eSuc n", "apply (clarsimp, rename_tac x b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b.\n       \\<lbrakk>a =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x b x1.\n       \\<lbrakk>a =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a = FL x1\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)\n 2. \\<And>x b x2.\n       \\<lbrakk>a =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)", "apply (case_tac b)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x b x1 x1a.\n       \\<lbrakk>a =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a = FL x1; b = FL x1a\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)\n 2. \\<And>x b x1 x2.\n       \\<lbrakk>a =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a = FL x1; b = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)\n 3. \\<And>x b x2.\n       \\<lbrakk>a =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)", "apply (simp add: eSuc_enat)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x b x2.\n       \\<lbrakk>IL x2 =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a =\n        (case b of FL xs \\<Rightarrow> FL (x # xs)\n         | IL g \\<Rightarrow> IL ([x] \\<frown> g))\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)", "apply (case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x b x2 x1.\n       \\<lbrakk>IL x2 =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a =\n        (case b of FL xs \\<Rightarrow> FL (x # xs)\n         | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        b = FL x1\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)\n 2. \\<And>x b x2 x2a.\n       \\<lbrakk>IL x2 =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        n =\n        (case b of FL xs \\<Rightarrow> enat (length xs)\n         | IL f \\<Rightarrow> \\<infinity>);\n        a =\n        (case b of FL xs \\<Rightarrow> FL (x # xs)\n         | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        b = IL x2a\\<rbrakk>\n       \\<Longrightarrow> (case case b of FL xs \\<Rightarrow> FL (x # xs)\n                               | IL g \\<Rightarrow> IL ([x] \\<frown> g) of\n                          FL xs \\<Rightarrow> enat (length xs)\n                          | IL f \\<Rightarrow> \\<infinity>) =\n                         eSuc\n                          (case b of FL xs \\<Rightarrow> enat (length xs)\n                           | IL f \\<Rightarrow> \\<infinity>)", "apply (simp add: eSuc_enat)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gSuc_glength_conv: \"\n  (eSuc n = glength a) =\n  (\\<exists>x b. a = x #\\<^sub>g b \\<and> glength b = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eSuc n = glength a) =\n    (\\<exists>x b. a = x #\\<^sub>g b \\<and> glength b = n)", "by (simp add: eq_commute[of _ \"glength a\"] glength_gSuc_conv)"], ["", "subsubsection \\<open>\\<open>@\\<close>\\ensuremath{{}_g} -- gappend\\<close>"], ["", "lemma gappend_Nil[simp]: \"(FL []) @\\<^sub>g a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL [] @\\<^sub>g a = a", "by (unfold gappend_def, case_tac a, simp+)"], ["", "lemma gappend_Nil2[simp]: \"a @\\<^sub>g (FL [])= a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a @\\<^sub>g FL [] = a", "by (unfold gappend_def, case_tac a, simp+)"], ["", "lemma gappend_is_Nil_conv[simp]: \"(a @\\<^sub>g b = FL []) = (a = FL [] \\<and> b = FL [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a @\\<^sub>g b = FL []) = (a = FL [] \\<and> b = FL [])", "by (unfold gappend_def, case_tac a, case_tac b, simp+)"], ["", "lemma Nil_is_gappend_conv[simp]: \"(FL [] = a @\\<^sub>g b) = (a = FL [] \\<and> b = FL [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (FL [] = a @\\<^sub>g b) = (a = FL [] \\<and> b = FL [])", "by (simp add: eq_commute[of \"FL []\"])"], ["", "lemma gappend_assoc[simp]: \"(a @\\<^sub>g b) @\\<^sub>g c = a @\\<^sub>g b @\\<^sub>g c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a @\\<^sub>g b) @\\<^sub>g c = a @\\<^sub>g b @\\<^sub>g c", "by (unfold gappend_def, case_tac a, case_tac b, case_tac c, simp+)"], ["", "lemma gappend_infin[simp]: \"IL f @\\<^sub>g b = IL f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IL f @\\<^sub>g b = IL f", "by (simp add: gappend_def)"], ["", "lemma same_gappend_eq_disj[simp]: \"(a @\\<^sub>g b = a @\\<^sub>g c) = (glength a = \\<infinity> \\<or> b = c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a @\\<^sub>g b = a @\\<^sub>g c) = (glength a = \\<infinity> \\<or> b = c)", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       a = FL x1 \\<Longrightarrow>\n       (a @\\<^sub>g b = a @\\<^sub>g c) =\n       (glength a = \\<infinity> \\<or> b = c)\n 2. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (a @\\<^sub>g b = a @\\<^sub>g c) =\n       (glength a = \\<infinity> \\<or> b = c)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       a = FL x1 \\<Longrightarrow>\n       (FL x1 @\\<^sub>g b = FL x1 @\\<^sub>g c) = (b = c)\n 2. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (a @\\<^sub>g b = a @\\<^sub>g c) =\n       (glength a = \\<infinity> \\<or> b = c)", "apply (case_tac b, case_tac c)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x1a x1b.\n       \\<lbrakk>a = FL x1; b = FL x1a; c = FL x1b\\<rbrakk>\n       \\<Longrightarrow> (FL x1 @\\<^sub>g b = FL x1 @\\<^sub>g c) = (b = c)\n 2. \\<And>x1 x1a x2.\n       \\<lbrakk>a = FL x1; b = FL x1a; c = IL x2\\<rbrakk>\n       \\<Longrightarrow> (FL x1 @\\<^sub>g b = FL x1 @\\<^sub>g c) = (b = c)\n 3. \\<And>x1 x2.\n       \\<lbrakk>a = FL x1; b = IL x2\\<rbrakk>\n       \\<Longrightarrow> (FL x1 @\\<^sub>g b = FL x1 @\\<^sub>g c) = (b = c)\n 4. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (a @\\<^sub>g b = a @\\<^sub>g c) =\n       (glength a = \\<infinity> \\<or> b = c)", "apply (simp add: gappend_def)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>a = FL x1; b = IL x2\\<rbrakk>\n       \\<Longrightarrow> (IL (x1 \\<frown> x2) =\n                          (case c of FL ys \\<Rightarrow> FL (x1 @ ys)\n                           | IL f \\<Rightarrow> IL (x1 \\<frown> f))) =\n                         (IL x2 = c)\n 2. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (a @\\<^sub>g b = a @\\<^sub>g c) =\n       (glength a = \\<infinity> \\<or> b = c)", "apply (case_tac c)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 x1a.\n       \\<lbrakk>a = FL x1; b = IL x2; c = FL x1a\\<rbrakk>\n       \\<Longrightarrow> (IL (x1 \\<frown> x2) =\n                          (case c of FL ys \\<Rightarrow> FL (x1 @ ys)\n                           | IL f \\<Rightarrow> IL (x1 \\<frown> f))) =\n                         (IL x2 = c)\n 2. \\<And>x1 x2 x2a.\n       \\<lbrakk>a = FL x1; b = IL x2; c = IL x2a\\<rbrakk>\n       \\<Longrightarrow> (IL (x1 \\<frown> x2) =\n                          (case c of FL ys \\<Rightarrow> FL (x1 @ ys)\n                           | IL f \\<Rightarrow> IL (x1 \\<frown> f))) =\n                         (IL x2 = c)\n 3. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (a @\\<^sub>g b = a @\\<^sub>g c) =\n       (glength a = \\<infinity> \\<or> b = c)", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma same_gappend_eq: \"\n  glength a < \\<infinity> \\<Longrightarrow> (a @\\<^sub>g b = a @\\<^sub>g c) = (b = c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength a < \\<infinity> \\<Longrightarrow>\n    (a @\\<^sub>g b = a @\\<^sub>g c) = (b = c)", "by fastforce"], ["", "subsubsection \\<open>\\<open>gmap\\<close>\\<close>"], ["", "lemma gmap_gappend[simp]: \"gmap f (a @\\<^sub>g b) = gmap f a @\\<^sub>g gmap f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmap f (a @\\<^sub>g b) = gmap f a @\\<^sub>g gmap f b", "by (unfold gappend_def, induct a, induct b, simp+)"], ["", "lemmas gmap_gmap[simp] = glist.map_comp"], ["", "lemma gmap_eq_conv[simp]: \"(gmap f a = gmap g a) = (\\<forall>x\\<in>gset a. f x = g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gmap f a = gmap g a) = (\\<forall>x\\<in>gset a. f x = g x)", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       a = FL x1 \\<Longrightarrow>\n       (gmap f a = gmap g a) = (\\<forall>x\\<in>gset a. f x = g x)\n 2. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (gmap f a = gmap g a) = (\\<forall>x\\<in>gset a. f x = g x)", "apply (simp add: o_eq_conv)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas gmap_cong = glist.map_cong"], ["", "lemma gmap_is_Nil_conv: \"(gmap f a = FL []) = (a = FL [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gmap f a = FL []) = (a = FL [])", "by (simp add: glength_0_conv[symmetric])"], ["", "lemma gmap_eq_imp_glength_eq: \"\n  gmap f a = gmap f b \\<Longrightarrow> glength a = glength b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gmap f a = gmap f b \\<Longrightarrow> glength a = glength b", "by (drule arg_cong[where f=glength], simp)"], ["", "subsubsection \\<open>\\<open>gset\\<close>\\<close>"], ["", "lemma gset_gappend[simp]: \"\n  gset (a @\\<^sub>g b) =\n  (case a of FL a' \\<Rightarrow> set a' \\<union> gset b | IL a'  \\<Rightarrow> range a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gset (a @\\<^sub>g b) =\n    (case a of FL a' \\<Rightarrow> set a' \\<union> gset b\n     | IL a' \\<Rightarrow> range a')", "by (unfold gappend_def, case_tac a, case_tac b, simp+)"], ["", "lemma gset_gappend_if: \"\n  gset (a @\\<^sub>g b) =\n  (if glength a < \\<infinity> then gset a \\<union> gset b else gset a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gset (a @\\<^sub>g b) =\n    (if glength a < \\<infinity> then gset a \\<union> gset b else gset a)", "by (unfold gappend_def, case_tac a, case_tac b, simp+)"], ["", "lemma gset_empty[simp]: \"(gset a = {}) = (a = FL [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gset a = {}) = (a = FL [])", "by (case_tac a, simp+)"], ["", "lemmas gset_gmap[simp] = glist.set_map"], ["", "lemma icard_glength: \"icard (gset a) \\<le> glength a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. icard (gset a) \\<le> glength a", "apply (unfold icard_def glength_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if finite (gset a) then enat (card (gset a)) else \\<infinity>)\n    \\<le> (case a of FL xs \\<Rightarrow> enat (length xs)\n           | IL f \\<Rightarrow> \\<infinity>)", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       a = FL x1 \\<Longrightarrow>\n       (if finite (gset a) then enat (card (gset a)) else \\<infinity>)\n       \\<le> (case a of FL xs \\<Rightarrow> enat (length xs)\n              | IL f \\<Rightarrow> \\<infinity>)\n 2. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (if finite (gset a) then enat (card (gset a)) else \\<infinity>)\n       \\<le> (case a of FL xs \\<Rightarrow> enat (length xs)\n              | IL f \\<Rightarrow> \\<infinity>)", "apply (simp add: card_length)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>!\\<close>\\ensuremath{{}_g} -- gnth\\<close>"], ["", "lemma gnth_gCons_0[simp]: \"(x #\\<^sub>g a) !\\<^sub>g 0 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x #\\<^sub>g a) !\\<^sub>g 0 = x", "by (unfold gCons_def gnth_def, case_tac a, simp+)"], ["", "lemma gnth_gCons_Suc[simp]: \"(x #\\<^sub>g a) !\\<^sub>g Suc n = a !\\<^sub>g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x #\\<^sub>g a) !\\<^sub>g Suc n = a !\\<^sub>g n", "by (unfold gCons_def gnth_def, case_tac a, simp+)"], ["", "lemma gnth_gappend: \"\n  (a @\\<^sub>g b) !\\<^sub>g n =\n  (if enat n < glength a then a !\\<^sub>g n\n  else b !\\<^sub>g (n - the_enat (glength a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a @\\<^sub>g b) !\\<^sub>g n =\n    (if enat n < glength a then a !\\<^sub>g n\n     else b !\\<^sub>g (n - the_enat (glength a)))", "apply (unfold glength_def gappend_def gCons_def gnth_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case a of\n          FL xs \\<Rightarrow>\n            case b of FL ys \\<Rightarrow> FL (xs @ ys)\n            | IL f \\<Rightarrow> IL (xs \\<frown> f)\n          | IL x \\<Rightarrow> IL x of\n     FL xs \\<Rightarrow> xs ! n | IL f \\<Rightarrow> f n) =\n    (if enat n\n        < (case a of FL xs \\<Rightarrow> enat (length xs)\n           | IL f \\<Rightarrow> \\<infinity>)\n     then case a of FL xs \\<Rightarrow> xs ! n | IL f \\<Rightarrow> f n\n     else case b of\n          FL xs \\<Rightarrow>\n            xs !\n            (n -\n             the_enat\n              (case a of FL xs \\<Rightarrow> enat (length xs)\n               | IL f \\<Rightarrow> \\<infinity>))\n          | IL f \\<Rightarrow>\n              f (n -\n                 the_enat\n                  (case a of FL xs \\<Rightarrow> enat (length xs)\n                   | IL f \\<Rightarrow> \\<infinity>)))", "apply (case_tac a, case_tac b)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>a = FL x1; b = FL x1a\\<rbrakk>\n       \\<Longrightarrow> (case case a of\n                               FL xs \\<Rightarrow>\n                                 case b of FL ys \\<Rightarrow> FL (xs @ ys)\n                                 | IL f \\<Rightarrow> IL (xs \\<frown> f)\n                               | IL x \\<Rightarrow> IL x of\n                          FL xs \\<Rightarrow> xs ! n\n                          | IL f \\<Rightarrow> f n) =\n                         (if enat n\n                             < (case a of\n                                FL xs \\<Rightarrow> enat (length xs)\n                                | IL f \\<Rightarrow> \\<infinity>)\n                          then case a of FL xs \\<Rightarrow> xs ! n\n                               | IL f \\<Rightarrow> f n\n                          else case b of\n                               FL xs \\<Rightarrow>\n                                 xs !\n                                 (n -\n                                  the_enat\n                                   (case a of\n                                    FL xs \\<Rightarrow> enat (length xs)\n                                    | IL f \\<Rightarrow> \\<infinity>))\n                               | IL f \\<Rightarrow>\n                                   f (n -\nthe_enat\n (case a of FL xs \\<Rightarrow> enat (length xs)\n  | IL f \\<Rightarrow> \\<infinity>)))\n 2. \\<And>x1 x2.\n       \\<lbrakk>a = FL x1; b = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case case a of\n                               FL xs \\<Rightarrow>\n                                 case b of FL ys \\<Rightarrow> FL (xs @ ys)\n                                 | IL f \\<Rightarrow> IL (xs \\<frown> f)\n                               | IL x \\<Rightarrow> IL x of\n                          FL xs \\<Rightarrow> xs ! n\n                          | IL f \\<Rightarrow> f n) =\n                         (if enat n\n                             < (case a of\n                                FL xs \\<Rightarrow> enat (length xs)\n                                | IL f \\<Rightarrow> \\<infinity>)\n                          then case a of FL xs \\<Rightarrow> xs ! n\n                               | IL f \\<Rightarrow> f n\n                          else case b of\n                               FL xs \\<Rightarrow>\n                                 xs !\n                                 (n -\n                                  the_enat\n                                   (case a of\n                                    FL xs \\<Rightarrow> enat (length xs)\n                                    | IL f \\<Rightarrow> \\<infinity>))\n                               | IL f \\<Rightarrow>\n                                   f (n -\nthe_enat\n (case a of FL xs \\<Rightarrow> enat (length xs)\n  | IL f \\<Rightarrow> \\<infinity>)))\n 3. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (case case a of\n             FL xs \\<Rightarrow>\n               case b of FL ys \\<Rightarrow> FL (xs @ ys)\n               | IL f \\<Rightarrow> IL (xs \\<frown> f)\n             | IL x \\<Rightarrow> IL x of\n        FL xs \\<Rightarrow> xs ! n | IL f \\<Rightarrow> f n) =\n       (if enat n\n           < (case a of FL xs \\<Rightarrow> enat (length xs)\n              | IL f \\<Rightarrow> \\<infinity>)\n        then case a of FL xs \\<Rightarrow> xs ! n | IL f \\<Rightarrow> f n\n        else case b of\n             FL xs \\<Rightarrow>\n               xs !\n               (n -\n                the_enat\n                 (case a of FL xs \\<Rightarrow> enat (length xs)\n                  | IL f \\<Rightarrow> \\<infinity>))\n             | IL f \\<Rightarrow>\n                 f (n -\n                    the_enat\n                     (case a of FL xs \\<Rightarrow> enat (length xs)\n                      | IL f \\<Rightarrow> \\<infinity>)))", "apply (simp add: nth_append)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gnth_gappend_length_plus[simp]: \"(FL xs @\\<^sub>g b) !\\<^sub>g (length xs + n) = b !\\<^sub>g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (FL xs @\\<^sub>g b) !\\<^sub>g (length xs + n) = b !\\<^sub>g n", "by (simp add: gnth_gappend)"], ["", "lemma gmap_gnth[simp]: \"enat n < glength a \\<Longrightarrow> gmap f a !\\<^sub>g n = f (a !\\<^sub>g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < glength a \\<Longrightarrow>\n    gmap f a !\\<^sub>g n = f (a !\\<^sub>g n)", "by (unfold gnth_def, case_tac a, simp+)"], ["", "lemma in_gset_cong_gnth: \"(x \\<in> gset a) = (\\<exists>i. enat i < glength a \\<and> a !\\<^sub>g i = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> gset a) =\n    (\\<exists>i. enat i < glength a \\<and> a !\\<^sub>g i = x)", "apply (unfold gnth_def, case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       a = FL x1 \\<Longrightarrow>\n       (x \\<in> gset a) =\n       (\\<exists>i.\n           enat i < glength a \\<and>\n           (case a of FL xs \\<Rightarrow> xs ! i | IL f \\<Rightarrow> f i) =\n           x)\n 2. \\<And>x2.\n       a = IL x2 \\<Longrightarrow>\n       (x \\<in> gset a) =\n       (\\<exists>i.\n           enat i < glength a \\<and>\n           (case a of FL xs \\<Rightarrow> xs ! i | IL f \\<Rightarrow> f i) =\n           x)", "apply (fastforce simp: in_set_conv_nth)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>gtake\\<close> and \\<open>gdrop\\<close>\\<close>"], ["", "lemma gtake_0[simp]: \"a \\<down>\\<^sub>g 0 = FL []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<down>\\<^sub>g 0 = FL []", "by (unfold gtake_def, case_tac a, simp+)"], ["", "lemma gdrop_0[simp]: \"a \\<up>\\<^sub>g 0 = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<up>\\<^sub>g 0 = a", "by (unfold gdrop_def, case_tac a, simp+)"], ["", "lemma gtake_Infty[simp]: \"a \\<down>\\<^sub>g \\<infinity> = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<down>\\<^sub>g \\<infinity> = a", "by (unfold gtake_def, case_tac a, simp+)"], ["", "lemma gdrop_Infty[simp]: \"a \\<up>\\<^sub>g \\<infinity> = FL []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<up>\\<^sub>g \\<infinity> = FL []", "by (unfold gdrop_def, case_tac a, simp+)"], ["", "lemma gtake_all[simp]: \"glength a \\<le> n \\<Longrightarrow> a \\<down>\\<^sub>g n = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength a \\<le> n \\<Longrightarrow> a \\<down>\\<^sub>g n = a", "by (unfold gtake_def, case_tac a, case_tac n, simp+)"], ["", "lemma gdrop_all[simp]: \"glength a \\<le> n \\<Longrightarrow> a \\<up>\\<^sub>g n = FL []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength a \\<le> n \\<Longrightarrow> a \\<up>\\<^sub>g n = FL []", "by (unfold gdrop_def, case_tac a, case_tac n, simp+)"], ["", "lemma gtake_eSuc_gCons[simp]: \"(x #\\<^sub>g a) \\<down>\\<^sub>g (eSuc n) = x #\\<^sub>g a \\<down>\\<^sub>g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x #\\<^sub>g a) \\<down>\\<^sub>g eSuc n = x #\\<^sub>g a \\<down>\\<^sub>g n", "by (unfold gtake_def gCons_def, case_tac n, case_tac a, simp_all add: eSuc_enat)"], ["", "lemma gdrop_eSuc_gCons[simp]: \"(x #\\<^sub>g a) \\<up>\\<^sub>g (eSuc n) = a \\<up>\\<^sub>g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x #\\<^sub>g a) \\<up>\\<^sub>g eSuc n = a \\<up>\\<^sub>g n", "by (unfold gdrop_def gCons_def, case_tac n, case_tac a, simp_all add: eSuc_enat)"], ["", "lemma gtake_eSuc: \"a \\<noteq> FL [] \\<Longrightarrow> a \\<down>\\<^sub>g (eSuc n) = a !\\<^sub>g 0 #\\<^sub>g (a \\<up>\\<^sub>g (eSuc 0) \\<down>\\<^sub>g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> FL [] \\<Longrightarrow>\n    a \\<down>\\<^sub>g eSuc n =\n    a !\\<^sub>g 0 #\\<^sub>g a \\<up>\\<^sub>g eSuc 0 \\<down>\\<^sub>g n", "apply (unfold gtake_def gdrop_def gnth_def gCons_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> FL [] \\<Longrightarrow>\n    (case eSuc n of\n     enat m \\<Rightarrow>\n       FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n           | IL f \\<Rightarrow> f \\<Down> m)\n     | \\<infinity> \\<Rightarrow> a) =\n    (case case n of\n          enat m \\<Rightarrow>\n            FL (case case eSuc 0 of\n                     enat m \\<Rightarrow>\n                       case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                       | IL f \\<Rightarrow> IL (f \\<Up> m)\n                     | \\<infinity> \\<Rightarrow> FL [] of\n                FL x \\<Rightarrow> take m x | IL x \\<Rightarrow> i_take m x)\n          | \\<infinity> \\<Rightarrow>\n              case eSuc 0 of\n              enat m \\<Rightarrow>\n                case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                | IL f \\<Rightarrow> IL (f \\<Up> m)\n              | \\<infinity> \\<Rightarrow> FL [] of\n     FL xs \\<Rightarrow>\n       FL ((case a of FL xs \\<Rightarrow> xs ! 0 | IL f \\<Rightarrow> f 0) #\n           xs)\n     | IL g \\<Rightarrow>\n         IL ([case a of FL xs \\<Rightarrow> xs ! 0\n              | IL f \\<Rightarrow> f 0] \\<frown>\n             g))", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nat.\n       \\<lbrakk>a \\<noteq> FL []; n = enat nat\\<rbrakk>\n       \\<Longrightarrow> (case eSuc n of\n                          enat m \\<Rightarrow>\n                            FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                                | IL f \\<Rightarrow> f \\<Down> m)\n                          | \\<infinity> \\<Rightarrow> a) =\n                         (case case n of\n                               enat m \\<Rightarrow>\n                                 FL (case case eSuc 0 of\n    enat m \\<Rightarrow>\n      case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n      | IL f \\<Rightarrow> IL (f \\<Up> m)\n    | \\<infinity> \\<Rightarrow> FL [] of\n                                     FL x \\<Rightarrow> take m x\n                                     | IL x \\<Rightarrow> i_take m x)\n                               | \\<infinity> \\<Rightarrow>\n                                   case eSuc 0 of\n                                   enat m \\<Rightarrow>\n                                     case a of\n                                     FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                     | IL f \\<Rightarrow> IL (f \\<Up> m)\n                                   | \\<infinity> \\<Rightarrow> FL [] of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                                 | IL f \\<Rightarrow> f 0) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                   | IL f \\<Rightarrow> f 0] \\<frown>\n                                  g))\n 2. \\<lbrakk>a \\<noteq> FL []; n = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (case eSuc n of\n                       enat m \\<Rightarrow>\n                         FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                             | IL f \\<Rightarrow> f \\<Down> m)\n                       | \\<infinity> \\<Rightarrow> a) =\n                      (case case n of\n                            enat m \\<Rightarrow>\n                              FL (case case eSuc 0 of\n enat m \\<Rightarrow>\n   case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n   | IL f \\<Rightarrow> IL (f \\<Up> m)\n | \\<infinity> \\<Rightarrow> FL [] of\n                                  FL x \\<Rightarrow> take m x\n                                  | IL x \\<Rightarrow> i_take m x)\n                            | \\<infinity> \\<Rightarrow>\n                                case eSuc 0 of\n                                enat m \\<Rightarrow>\n                                  case a of\n                                  FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                  | IL f \\<Rightarrow> IL (f \\<Up> m)\n                                | \\<infinity> \\<Rightarrow> FL [] of\n                       FL xs \\<Rightarrow>\n                         FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                              | IL f \\<Rightarrow> f 0) #\n                             xs)\n                       | IL g \\<Rightarrow>\n                           IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                | IL f \\<Rightarrow> f 0] \\<frown>\n                               g))", "apply (case_tac a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>nat x1.\n       \\<lbrakk>a \\<noteq> FL []; n = enat nat; a = FL x1\\<rbrakk>\n       \\<Longrightarrow> (case eSuc n of\n                          enat m \\<Rightarrow>\n                            FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                                | IL f \\<Rightarrow> f \\<Down> m)\n                          | \\<infinity> \\<Rightarrow> a) =\n                         (case case n of\n                               enat m \\<Rightarrow>\n                                 FL (case case eSuc 0 of\n    enat m \\<Rightarrow>\n      case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n      | IL f \\<Rightarrow> IL (f \\<Up> m)\n    | \\<infinity> \\<Rightarrow> FL [] of\n                                     FL x \\<Rightarrow> take m x\n                                     | IL x \\<Rightarrow> i_take m x)\n                               | \\<infinity> \\<Rightarrow>\n                                   case eSuc 0 of\n                                   enat m \\<Rightarrow>\n                                     case a of\n                                     FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                     | IL f \\<Rightarrow> IL (f \\<Up> m)\n                                   | \\<infinity> \\<Rightarrow> FL [] of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                                 | IL f \\<Rightarrow> f 0) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                   | IL f \\<Rightarrow> f 0] \\<frown>\n                                  g))\n 2. \\<And>nat x2.\n       \\<lbrakk>a \\<noteq> FL []; n = enat nat; a = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case eSuc n of\n                          enat m \\<Rightarrow>\n                            FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                                | IL f \\<Rightarrow> f \\<Down> m)\n                          | \\<infinity> \\<Rightarrow> a) =\n                         (case case n of\n                               enat m \\<Rightarrow>\n                                 FL (case case eSuc 0 of\n    enat m \\<Rightarrow>\n      case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n      | IL f \\<Rightarrow> IL (f \\<Up> m)\n    | \\<infinity> \\<Rightarrow> FL [] of\n                                     FL x \\<Rightarrow> take m x\n                                     | IL x \\<Rightarrow> i_take m x)\n                               | \\<infinity> \\<Rightarrow>\n                                   case eSuc 0 of\n                                   enat m \\<Rightarrow>\n                                     case a of\n                                     FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                     | IL f \\<Rightarrow> IL (f \\<Up> m)\n                                   | \\<infinity> \\<Rightarrow> FL [] of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                                 | IL f \\<Rightarrow> f 0) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                   | IL f \\<Rightarrow> f 0] \\<frown>\n                                  g))\n 3. \\<lbrakk>a \\<noteq> FL []; n = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (case eSuc n of\n                       enat m \\<Rightarrow>\n                         FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                             | IL f \\<Rightarrow> f \\<Down> m)\n                       | \\<infinity> \\<Rightarrow> a) =\n                      (case case n of\n                            enat m \\<Rightarrow>\n                              FL (case case eSuc 0 of\n enat m \\<Rightarrow>\n   case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n   | IL f \\<Rightarrow> IL (f \\<Up> m)\n | \\<infinity> \\<Rightarrow> FL [] of\n                                  FL x \\<Rightarrow> take m x\n                                  | IL x \\<Rightarrow> i_take m x)\n                            | \\<infinity> \\<Rightarrow>\n                                case eSuc 0 of\n                                enat m \\<Rightarrow>\n                                  case a of\n                                  FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                  | IL f \\<Rightarrow> IL (f \\<Up> m)\n                                | \\<infinity> \\<Rightarrow> FL [] of\n                       FL xs \\<Rightarrow>\n                         FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                              | IL f \\<Rightarrow> f 0) #\n                             xs)\n                       | IL g \\<Rightarrow>\n                           IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                | IL f \\<Rightarrow> f 0] \\<frown>\n                               g))", "apply (simp add: eSuc_enat take_Suc hd_eq_first take_drop i_take_Suc)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> FL []; n = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a =\n                      (case case a of\n                            FL xs \\<Rightarrow> FL (xs \\<up> Suc 0)\n                            | IL f \\<Rightarrow> IL (f \\<Up> Suc 0) of\n                       FL xs \\<Rightarrow>\n                         FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                              | IL f \\<Rightarrow> f 0) #\n                             xs)\n                       | IL g \\<Rightarrow>\n                           IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                | IL f \\<Rightarrow> f 0] \\<frown>\n                               g))", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>a \\<noteq> FL []; n = \\<infinity>; a = FL x1\\<rbrakk>\n       \\<Longrightarrow> a =\n                         (case case a of\n                               FL xs \\<Rightarrow> FL (xs \\<up> Suc 0)\n                               | IL f \\<Rightarrow> IL (f \\<Up> Suc 0) of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                                 | IL f \\<Rightarrow> f 0) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                   | IL f \\<Rightarrow> f 0] \\<frown>\n                                  g))\n 2. \\<And>x2.\n       \\<lbrakk>a \\<noteq> FL []; n = \\<infinity>; a = IL x2\\<rbrakk>\n       \\<Longrightarrow> a =\n                         (case case a of\n                               FL xs \\<Rightarrow> FL (xs \\<up> Suc 0)\n                               | IL f \\<Rightarrow> IL (f \\<Up> Suc 0) of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! 0\n                                 | IL f \\<Rightarrow> f 0) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! 0\n                                   | IL f \\<Rightarrow> f 0] \\<frown>\n                                  g))", "apply (simp add: hd_eq_first drop_eq_tl i_drop_Suc_conv_tl)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gdrop_eSuc: \"a \\<up>\\<^sub>g (eSuc n) = a \\<up>\\<^sub>g (eSuc 0) \\<up>\\<^sub>g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<up>\\<^sub>g eSuc n = a \\<up>\\<^sub>g eSuc 0 \\<up>\\<^sub>g n", "by (unfold gtake_def gdrop_def gnth_def gCons_def, case_tac n, case_tac a, simp_all add: eSuc_enat)"], ["", "lemma gnth_via_grop: \"a \\<up>\\<^sub>g (enat n) = x #\\<^sub>g b \\<Longrightarrow> a !\\<^sub>g n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<up>\\<^sub>g enat n = x #\\<^sub>g b \\<Longrightarrow>\n    a !\\<^sub>g n = x", "apply (unfold gdrop_def gnth_def gCons_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case enat n of\n     enat m \\<Rightarrow>\n       case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n       | IL f \\<Rightarrow> IL (f \\<Up> m)\n     | \\<infinity> \\<Rightarrow> FL []) =\n    (case b of FL xs \\<Rightarrow> FL (x # xs)\n     | IL g \\<Rightarrow> IL ([x] \\<frown> g)) \\<Longrightarrow>\n    (case a of FL xs \\<Rightarrow> xs ! n | IL f \\<Rightarrow> f n) = x", "apply (case_tac a, case_tac b)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>(case enat n of\n                 enat m \\<Rightarrow>\n                   case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                   | IL f \\<Rightarrow> IL (f \\<Up> m)\n                 | \\<infinity> \\<Rightarrow> FL []) =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        a = FL x1; b = FL x1a\\<rbrakk>\n       \\<Longrightarrow> (case a of FL xs \\<Rightarrow> xs ! n\n                          | IL f \\<Rightarrow> f n) =\n                         x\n 2. \\<And>x1 x2.\n       \\<lbrakk>(case enat n of\n                 enat m \\<Rightarrow>\n                   case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                   | IL f \\<Rightarrow> IL (f \\<Up> m)\n                 | \\<infinity> \\<Rightarrow> FL []) =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        a = FL x1; b = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case a of FL xs \\<Rightarrow> xs ! n\n                          | IL f \\<Rightarrow> f n) =\n                         x\n 3. \\<And>x2.\n       \\<lbrakk>(case enat n of\n                 enat m \\<Rightarrow>\n                   case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                   | IL f \\<Rightarrow> IL (f \\<Up> m)\n                 | \\<infinity> \\<Rightarrow> FL []) =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case a of FL xs \\<Rightarrow> xs ! n\n                          | IL f \\<Rightarrow> f n) =\n                         x", "apply (simp add: nth_via_drop)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>IL (x2 \\<Up> n) =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> x2 n = x", "apply (case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x1.\n       \\<lbrakk>IL (x2 \\<Up> n) =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        a = IL x2; b = FL x1\\<rbrakk>\n       \\<Longrightarrow> x2 n = x\n 2. \\<And>x2 x2a.\n       \\<lbrakk>IL (x2 \\<Up> n) =\n                (case b of FL xs \\<Rightarrow> FL (x # xs)\n                 | IL g \\<Rightarrow> IL ([x] \\<frown> g));\n        a = IL x2; b = IL x2a\\<rbrakk>\n       \\<Longrightarrow> x2 n = x", "apply (fastforce intro: nth_via_i_drop)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gtake_eSuc_conv_gapp_gnth: \"\n  enat n < glength a \\<Longrightarrow> a \\<down>\\<^sub>g enat (Suc n) = a \\<down>\\<^sub>g (enat n) @\\<^sub>g FL [a !\\<^sub>g n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < glength a \\<Longrightarrow>\n    a \\<down>\\<^sub>g enat (Suc n) =\n    a \\<down>\\<^sub>g enat n @\\<^sub>g FL [a !\\<^sub>g n]", "apply (unfold glength_def gtake_def gappend_def gnth_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n\n    < (case a of FL xs \\<Rightarrow> enat (length xs)\n       | IL f \\<Rightarrow> \\<infinity>) \\<Longrightarrow>\n    (case enat (Suc n) of\n     enat m \\<Rightarrow>\n       FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n           | IL f \\<Rightarrow> f \\<Down> m)\n     | \\<infinity> \\<Rightarrow> a) =\n    (case case enat n of\n          enat m \\<Rightarrow>\n            FL (case a of FL x \\<Rightarrow> take m x\n                | IL x \\<Rightarrow> i_take m x)\n          | \\<infinity> \\<Rightarrow> a of\n     FL xs \\<Rightarrow>\n       case FL [case a of FL xs \\<Rightarrow> xs ! n\n                | IL f \\<Rightarrow> f n] of\n       FL ys \\<Rightarrow> FL (xs @ ys)\n       | IL f \\<Rightarrow> IL (xs \\<frown> f)\n     | IL f \\<Rightarrow> IL f)", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>enat n\n                < (case a of FL xs \\<Rightarrow> enat (length xs)\n                   | IL f \\<Rightarrow> \\<infinity>);\n        a = FL x1\\<rbrakk>\n       \\<Longrightarrow> (case enat (Suc n) of\n                          enat m \\<Rightarrow>\n                            FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                                | IL f \\<Rightarrow> f \\<Down> m)\n                          | \\<infinity> \\<Rightarrow> a) =\n                         (case case enat n of\n                               enat m \\<Rightarrow>\n                                 FL (case a of FL x \\<Rightarrow> take m x\n                                     | IL x \\<Rightarrow> i_take m x)\n                               | \\<infinity> \\<Rightarrow> a of\n                          FL xs \\<Rightarrow>\n                            case FL [case a of FL xs \\<Rightarrow> xs ! n\n                                     | IL f \\<Rightarrow> f n] of\n                            FL ys \\<Rightarrow> FL (xs @ ys)\n                            | IL f \\<Rightarrow> IL (xs \\<frown> f)\n                          | IL f \\<Rightarrow> IL f)\n 2. \\<And>x2.\n       \\<lbrakk>enat n\n                < (case a of FL xs \\<Rightarrow> enat (length xs)\n                   | IL f \\<Rightarrow> \\<infinity>);\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case enat (Suc n) of\n                          enat m \\<Rightarrow>\n                            FL (case a of FL xs \\<Rightarrow> xs \\<down> m\n                                | IL f \\<Rightarrow> f \\<Down> m)\n                          | \\<infinity> \\<Rightarrow> a) =\n                         (case case enat n of\n                               enat m \\<Rightarrow>\n                                 FL (case a of FL x \\<Rightarrow> take m x\n                                     | IL x \\<Rightarrow> i_take m x)\n                               | \\<infinity> \\<Rightarrow> a of\n                          FL xs \\<Rightarrow>\n                            case FL [case a of FL xs \\<Rightarrow> xs ! n\n                                     | IL f \\<Rightarrow> f n] of\n                            FL ys \\<Rightarrow> FL (xs @ ys)\n                            | IL f \\<Rightarrow> IL (xs \\<frown> f)\n                          | IL f \\<Rightarrow> IL f)", "apply (simp add: take_Suc_conv_app_nth i_take_Suc_conv_app_nth)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gdrop_eSuc_conv_tl: \"\n  enat n < glength a \\<Longrightarrow> a !\\<^sub>g n #\\<^sub>g a \\<up>\\<^sub>g enat (Suc n) = a \\<up>\\<^sub>g enat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < glength a \\<Longrightarrow>\n    a !\\<^sub>g n #\\<^sub>g a \\<up>\\<^sub>g enat (Suc n) =\n    a \\<up>\\<^sub>g enat n", "apply (unfold glength_def gdrop_def gappend_def gnth_def gCons_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n\n    < (case a of FL xs \\<Rightarrow> enat (length xs)\n       | IL f \\<Rightarrow> \\<infinity>) \\<Longrightarrow>\n    (case case enat (Suc n) of\n          enat m \\<Rightarrow>\n            case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n            | IL f \\<Rightarrow> IL (f \\<Up> m)\n          | \\<infinity> \\<Rightarrow> FL [] of\n     FL xs \\<Rightarrow>\n       FL ((case a of FL xs \\<Rightarrow> xs ! n | IL f \\<Rightarrow> f n) #\n           xs)\n     | IL g \\<Rightarrow>\n         IL ([case a of FL xs \\<Rightarrow> xs ! n\n              | IL f \\<Rightarrow> f n] \\<frown>\n             g)) =\n    (case enat n of\n     enat m \\<Rightarrow>\n       case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n       | IL f \\<Rightarrow> IL (f \\<Up> m)\n     | \\<infinity> \\<Rightarrow> FL [])", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>enat n\n                < (case a of FL xs \\<Rightarrow> enat (length xs)\n                   | IL f \\<Rightarrow> \\<infinity>);\n        a = FL x1\\<rbrakk>\n       \\<Longrightarrow> (case case enat (Suc n) of\n                               enat m \\<Rightarrow>\n                                 case a of\n                                 FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                 | IL f \\<Rightarrow> IL (f \\<Up> m)\n                               | \\<infinity> \\<Rightarrow> FL [] of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! n\n                                 | IL f \\<Rightarrow> f n) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! n\n                                   | IL f \\<Rightarrow> f n] \\<frown>\n                                  g)) =\n                         (case enat n of\n                          enat m \\<Rightarrow>\n                            case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                            | IL f \\<Rightarrow> IL (f \\<Up> m)\n                          | \\<infinity> \\<Rightarrow> FL [])\n 2. \\<And>x2.\n       \\<lbrakk>enat n\n                < (case a of FL xs \\<Rightarrow> enat (length xs)\n                   | IL f \\<Rightarrow> \\<infinity>);\n        a = IL x2\\<rbrakk>\n       \\<Longrightarrow> (case case enat (Suc n) of\n                               enat m \\<Rightarrow>\n                                 case a of\n                                 FL xs \\<Rightarrow> FL (xs \\<up> m)\n                                 | IL f \\<Rightarrow> IL (f \\<Up> m)\n                               | \\<infinity> \\<Rightarrow> FL [] of\n                          FL xs \\<Rightarrow>\n                            FL ((case a of FL xs \\<Rightarrow> xs ! n\n                                 | IL f \\<Rightarrow> f n) #\n                                xs)\n                          | IL g \\<Rightarrow>\n                              IL ([case a of FL xs \\<Rightarrow> xs ! n\n                                   | IL f \\<Rightarrow> f n] \\<frown>\n                                  g)) =\n                         (case enat n of\n                          enat m \\<Rightarrow>\n                            case a of FL xs \\<Rightarrow> FL (xs \\<up> m)\n                            | IL f \\<Rightarrow> IL (f \\<Up> m)\n                          | \\<infinity> \\<Rightarrow> FL [])", "apply (simp add: Cons_nth_drop_Suc i_drop_Suc_conv_tl)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma glength_gtake[simp]: \"glength (a \\<down>\\<^sub>g n) = min (glength a) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength (a \\<down>\\<^sub>g n) = min (glength a) n", "by (unfold glength_def gtake_def, case_tac n, case_tac a, simp+)"], ["", "lemma glength_drop[simp]: \"glength (a \\<up>\\<^sub>g (enat n)) = glength a - (enat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glength (a \\<up>\\<^sub>g enat n) = glength a - enat n", "by (unfold glength_def gdrop_def, case_tac a, case_tac n, simp+)"], ["", "end"]]}