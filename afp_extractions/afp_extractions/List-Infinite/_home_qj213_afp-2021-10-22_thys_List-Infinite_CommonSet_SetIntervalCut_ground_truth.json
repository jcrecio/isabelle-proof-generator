{"file_name": "/home/qj213/afp-2021-10-22/thys/List-Infinite/CommonSet/SetIntervalCut.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List-Infinite", "problem_names": ["lemma set_restrictionD: \"set_restriction f \\<Longrightarrow> \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}\"", "lemma set_restrictionD_spec: \"set_restriction f \\<Longrightarrow> \\<exists>P. f A = {x \\<in> A. P x}\"", "lemma set_restrictionI: \"f = (\\<lambda>A. {x \\<in> A. P x}) \\<Longrightarrow> set_restriction f\"", "lemma set_restriction_comp: \"\n  \\<lbrakk> set_restriction f; set_restriction g \\<rbrakk> \\<Longrightarrow> set_restriction (f \\<circ> g)\"", "lemma set_restriction_commute: \"\n  \\<lbrakk> set_restriction f; set_restriction g \\<rbrakk> \\<Longrightarrow> f (g I) = g (f I)\"", "lemma set_restriction_fun_is_set_restriction: \"\n  set_restriction (set_restriction_fun P)\"", "lemma set_restriction_Int_conv:\n  \"set_restriction f = (\\<exists>B. \\<forall>A. f A = A \\<inter> B)\"", "lemma set_restriction_Un: \"\n  set_restriction f \\<Longrightarrow> f (A \\<union> B) = f A \\<union> f B\"", "lemma set_restriction_Int: \"\n  set_restriction f \\<Longrightarrow> f (A \\<inter> B) = f A \\<inter> f B\"", "lemma set_restriction_Diff: \"\n  set_restriction f \\<Longrightarrow> f (A - B) = f A - f B\"", "lemma set_restriction_mono: \"\n  \\<lbrakk> set_restriction f; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> f A \\<subseteq> f B\"", "lemma set_restriction_absorb: \"\n  set_restriction f \\<Longrightarrow> f (f A) = f A\"", "lemma set_restriction_empty: \"\n  set_restriction f \\<Longrightarrow> f {} = {}\"", "lemma set_restriction_non_empty_imp: \"\n  \\<lbrakk> set_restriction f; f A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> A \\<noteq> {}\"", "lemma set_restriction_subset: \"\n  set_restriction f \\<Longrightarrow> f A \\<subseteq> A\"", "lemma set_restriction_finite: \"\n  \\<lbrakk> set_restriction f; finite A \\<rbrakk> \\<Longrightarrow> finite (f A)\"", "lemma set_restriction_card: \"\n  \\<lbrakk> set_restriction f; finite A \\<rbrakk> \\<Longrightarrow>\n  card (f A) = card A - card {a \\<in> A. f {a} = {}}\"", "lemma set_restriction_card_le: \"\n  \\<lbrakk> set_restriction f; finite A \\<rbrakk> \\<Longrightarrow> card (f A) \\<le> card A\"", "lemma set_restriction_not_in_imp: \"\n  \\<lbrakk> set_restriction f; x \\<notin> A \\<rbrakk> \\<Longrightarrow> x \\<notin> f A\"", "lemma set_restriction_in_imp: \"\n  \\<lbrakk> set_restriction f; x \\<in> f A \\<rbrakk> \\<Longrightarrow> x \\<in> A\"", "lemma set_restriction_fun_singleton: \"\n  set_restriction_fun P {a} = (if P a then {a} else {})\"", "lemma set_restriction_fun_all_conv: \"\n  ((set_restriction_fun P) A = A) = (\\<forall>x\\<in>A. P x)\"", "lemma set_restriction_fun_empty_conv: \"\n  ((set_restriction_fun P) A = {}) = (\\<forall>x\\<in>A. \\<not> P x)\"", "lemmas i_cut_defs =\n  cut_le_def cut_less_def\n  cut_ge_def cut_greater_def", "lemma cut_le_mem_iff: \"x \\<in> I \\<down>\\<le> t = (x \\<in> I \\<and> x \\<le> t)\"", "lemma cut_less_mem_iff: \"x \\<in> I \\<down>< t = (x \\<in> I \\<and> x < t)\"", "lemma cut_ge_mem_iff: \"x \\<in> I \\<down>\\<ge> t = (x \\<in> I \\<and> t \\<le> x)\"", "lemma cut_greater_mem_iff: \"x \\<in> I \\<down>> t = (x \\<in> I \\<and> t < x)\"", "lemmas i_cut_mem_iff =\n  cut_le_mem_iff cut_less_mem_iff\n  cut_ge_mem_iff cut_greater_mem_iff", "lemma\n  cut_leI [intro!]:      \"x \\<in> I \\<Longrightarrow> x \\<le> t \\<Longrightarrow> x \\<in> I \\<down>\\<le> t\" and\n  cut_lessI [intro!]:    \"x \\<in> I \\<Longrightarrow> x < t \\<Longrightarrow> x \\<in> I \\<down>< t\" and\n  cut_geI [intro!]:      \"x \\<in> I \\<Longrightarrow> x \\<ge> t \\<Longrightarrow> x \\<in> I \\<down>\\<ge> t\" and\n  cut_greaterI [intro!]: \"x \\<in> I \\<Longrightarrow> x > t \\<Longrightarrow> x \\<in> I \\<down>> t\"", "lemma\n  cut_leE [elim!]:      \"x \\<in> I \\<down>\\<le> t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x \\<le> t \\<Longrightarrow> P) \\<Longrightarrow> P\" and\n  cut_lessE [elim!]:    \"x \\<in> I \\<down>< t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x < t \\<Longrightarrow> P) \\<Longrightarrow> P\" and\n  cut_geE [elim!]:      \"x \\<in> I \\<down>\\<ge> t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x \\<ge> t \\<Longrightarrow> P) \\<Longrightarrow> P\" and\n  cut_greaterE [elim!]: \"x \\<in> I \\<down>> t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x > t \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma\n  cut_less_bound:    \"n \\<in> I \\<down>< t \\<Longrightarrow> n < t\" and\n  cut_le_bound:      \"n \\<in> I \\<down>\\<le> t \\<Longrightarrow> n \\<le> t\" and\n  cut_greater_bound: \"n \\<in> i \\<down>> t \\<Longrightarrow> t < n\" and\n  cut_ge_bound:      \"n \\<in> i \\<down>\\<ge> t \\<Longrightarrow> t \\<le> n\"", "lemmas i_cut_bound =\n  cut_less_bound cut_le_bound\n  cut_greater_bound cut_ge_bound", "lemma\n  cut_le_Int_conv: \"I \\<down>\\<le> t = I \\<inter> {..t}\" and\n  cut_less_Int_conv: \"I \\<down>< t = I \\<inter> {..<t}\" and\n  cut_ge_Int_conv: \"I \\<down>\\<ge> t = I \\<inter> {t..}\" and\n  cut_greater_Int_conv: \"I \\<down>> t = I \\<inter> {t<..}\"", "lemmas i_cut_Int_conv =\n  cut_le_Int_conv cut_less_Int_conv\n  cut_ge_Int_conv cut_greater_Int_conv", "lemma\n  cut_le_Diff_conv: \"I \\<down>\\<le> t = I - {t<..}\" and\n  cut_less_Diff_conv: \"I \\<down>< t = I - {t..}\" and\n  cut_ge_Diff_conv: \"I \\<down>\\<ge> t = I - {..<t}\" and\n  cut_greater_Diff_conv: \"I \\<down>> t = I - {..t}\"", "lemmas i_cut_Diff_conv =\n  cut_le_Diff_conv cut_less_Diff_conv\n  cut_ge_Diff_conv cut_greater_Diff_conv", "lemma\n  cut_less_eq_set_restriction_fun':    \"(\\<lambda>I. I \\<down>< t) = set_restriction_fun (\\<lambda>x. x < t)\" and\n  cut_le_eq_set_restriction_fun':      \"(\\<lambda>I. I \\<down>\\<le> t) = set_restriction_fun (\\<lambda>x. x \\<le> t)\" and\n  cut_greater_eq_set_restriction_fun': \"(\\<lambda>I. I \\<down>> t) = set_restriction_fun (\\<lambda>x. x > t)\" and\n  cut_ge_eq_set_restriction_fun':      \"(\\<lambda>I. I \\<down>\\<ge> t) = set_restriction_fun (\\<lambda>x. x \\<ge> t)\"", "lemmas i_cut_eq_set_restriction_fun' =\n  cut_less_eq_set_restriction_fun' cut_le_eq_set_restriction_fun'\n  cut_greater_eq_set_restriction_fun' cut_ge_eq_set_restriction_fun'", "lemma\n  cut_less_eq_set_restriction_fun:    \"I \\<down>< t = set_restriction_fun (\\<lambda>x. x < t) I\" and\n  cut_le_eq_set_restriction_fun:      \"I \\<down>\\<le> t = set_restriction_fun (\\<lambda>x. x \\<le> t) I\" and\n  cut_greater_eq_set_restriction_fun: \"I \\<down>> t = set_restriction_fun (\\<lambda>x. x > t) I\" and\n  cut_ge_eq_set_restriction_fun:      \"I \\<down>\\<ge> t = set_restriction_fun (\\<lambda>x. x \\<ge> t) I\"", "lemmas i_cut_eq_set_restriction_fun =\n  cut_less_eq_set_restriction_fun cut_le_eq_set_restriction_fun\n  cut_greater_eq_set_restriction_fun cut_ge_eq_set_restriction_fun", "lemma i_cut_set_restriction_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>);\n    f = (\\<lambda>I. cut_op I t)  \\<rbrakk> \\<Longrightarrow> set_restriction f\"", "lemmas i_cut_set_restriction =\n  i_cut_le_set_restriction i_cut_less_set_restriction\n  i_cut_ge_set_restriction i_cut_greater_set_restriction", "lemma i_cut_commute_disj: \"\\<lbrakk>\n  cut_op1 = (\\<down><) \\<or> cut_op1 = (\\<down>\\<le>) \\<or>\n  cut_op1 = (\\<down>>) \\<or> cut_op1 = (\\<down>\\<ge>);\n  cut_op2 = (\\<down><) \\<or> cut_op2 = (\\<down>\\<le>) \\<or>\n  cut_op2 = (\\<down>>) \\<or> cut_op2 = (\\<down>\\<ge>) \\<rbrakk> \\<Longrightarrow>\n  cut_op2 (cut_op1 I t1) t2 = cut_op1 (cut_op2 I t2) t1\"", "lemma\n  cut_less_empty:    \"{} \\<down>< t = {}\" and\n  cut_le_empty:      \"{} \\<down>\\<le> t = {}\" and\n  cut_greater_empty: \"{} \\<down>> t = {}\" and\n  cut_ge_empty:      \"{} \\<down>\\<ge> t = {}\"", "lemmas i_cut_empty =\n  cut_less_empty cut_le_empty\n  cut_greater_empty cut_ge_empty", "lemma\n  cut_less_not_empty_imp:    \"I \\<down>< t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\" and\n  cut_le_not_empty_imp:      \"I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\" and\n  cut_greater_not_empty_imp: \"I \\<down>> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\" and\n  cut_ge_not_empty_imp:      \"I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\"", "lemma\n  cut_less_singleton:    \"{a} \\<down>< t = (if a < t then {a} else {})\" and\n  cut_le_singleton:      \"{a} \\<down>\\<le> t = (if a \\<le> t then {a} else {})\" and\n  cut_greater_singleton: \"{a} \\<down>> t = (if a > t then {a} else {})\" and\n  cut_ge_singleton:      \"{a} \\<down>\\<ge> t = (if a \\<ge> t then {a} else {})\"", "lemmas i_cut_singleton =\n  cut_le_singleton cut_less_singleton\n  cut_ge_singleton cut_greater_singleton", "lemma\n  cut_less_subset:    \"I \\<down>< t \\<subseteq> I\" and\n  cut_le_subset:      \"I \\<down>\\<le> t \\<subseteq> I\" and\n  cut_greater_subset: \"I \\<down>> t \\<subseteq> I\" and\n  cut_ge_subset:      \"I \\<down>\\<ge> t \\<subseteq> I\"", "lemmas i_cut_subset =\n  cut_less_subset cut_le_subset\n  cut_greater_subset cut_ge_subset", "lemma i_cut_Un_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (A \\<union> B) t = cut_op A t \\<union> cut_op B t\"", "lemmas i_cut_Un =\n  cut_less_Un cut_le_Un\n  cut_greater_Un cut_ge_Un", "lemma i_cut_Int_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (A \\<inter> B) t = cut_op A t \\<inter> cut_op B t\"", "lemma\n  cut_less_Int:    \"(A \\<inter> B) \\<down>< t = A \\<down>< t \\<inter> B \\<down>< t\" and\n  cut_le_Int:      \"(A \\<inter> B) \\<down>\\<le> t = A \\<down>\\<le> t \\<inter> B \\<down>\\<le> t\" and\n  cut_greater_Int: \"(A \\<inter> B) \\<down>> t = A \\<down>> t \\<inter> B \\<down>> t\" and\n  cut_ge_Int:      \"(A \\<inter> B) \\<down>\\<ge> t = A \\<down>\\<ge> t \\<inter> B \\<down>\\<ge> t\"", "lemmas i_cut_Int =\n  cut_less_Int cut_le_Int\n  cut_greater_Int cut_ge_Int", "lemma\n  cut_less_Int_left:    \"(A \\<inter> B) \\<down>< t = A \\<down>< t \\<inter> B\" and\n  cut_le_Int_left:      \"(A \\<inter> B) \\<down>\\<le> t = A \\<down>\\<le> t \\<inter> B\" and\n  cut_greater_Int_left: \"(A \\<inter> B) \\<down>> t = A \\<down>> t \\<inter> B\" and\n  cut_ge_Int_left:      \"(A \\<inter> B) \\<down>\\<ge> t = A \\<down>\\<ge> t \\<inter> B\"", "lemmas i_cut_Int_left =\n  cut_less_Int_left cut_le_Int_left\n  cut_greater_Int_left cut_ge_Int_left", "lemma\n  cut_less_Int_right:    \"(A \\<inter> B) \\<down>< t = A \\<inter> B \\<down>< t\" and\n  cut_le_Int_right:      \"(A \\<inter> B) \\<down>\\<le> t = A \\<inter> B \\<down>\\<le> t\" and\n  cut_greater_Int_right: \"(A \\<inter> B) \\<down>> t = A \\<inter> B \\<down>> t\" and\n  cut_ge_Int_right:      \"(A \\<inter> B) \\<down>\\<ge> t = A \\<inter> B \\<down>\\<ge> t\"", "lemmas i_cut_Int_right =\n  cut_less_Int_right cut_le_Int_right\n  cut_greater_Int_right cut_ge_Int_right", "lemma i_cut_Diff_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (A - B) t = cut_op A t - cut_op B t\"", "lemmas i_cut_Diff =\n  cut_less_Diff cut_le_Diff\n  cut_greater_Diff cut_ge_Diff", "lemma i_cut_subset_mono_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>); A \\<subseteq> B \\<rbrakk>\n  \\<Longrightarrow> cut_op A t \\<subseteq> cut_op B t\"", "lemmas i_cut_subset_mono =\n  cut_less_subset_mono cut_le_subset_mono\n  cut_greater_subset_mono cut_ge_subset_mono", "lemma\n  cut_less_mono:    \"t \\<le> t' \\<Longrightarrow> I \\<down>< t \\<subseteq> I \\<down>< t'\" and\n  cut_greater_mono: \"t' \\<le> t \\<Longrightarrow> I \\<down>> t \\<subseteq> I \\<down>> t'\" and\n  cut_le_mono:      \"t \\<le> t' \\<Longrightarrow> I \\<down>\\<le> t \\<subseteq> I \\<down>\\<le> t'\" and\n  cut_ge_mono:      \"t' \\<le> t \\<Longrightarrow> I \\<down>\\<ge> t \\<subseteq> I \\<down>\\<ge> t'\"", "lemmas i_cut_mono =\n  cut_le_mono cut_less_mono\n  cut_ge_mono cut_greater_mono", "lemma\n  cut_cut_le: \"i \\<down>\\<le> a \\<down>\\<le> b = i \\<down>\\<le> min a b\" and\n  cut_cut_less: \"i \\<down>< a \\<down>< b = i \\<down>< min a b\" and\n  cut_cut_ge: \"i \\<down>\\<ge> a \\<down>\\<ge> b = i \\<down>\\<ge> max a b\" and\n  cut_cut_greater: \"i \\<down>> a \\<down>> b = i \\<down>> max a b\"", "lemmas i_cut_cut =\n  cut_cut_le cut_cut_less\n  cut_cut_ge cut_cut_greater", "lemma i_cut_absorb_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (cut_op I t) t = cut_op I t\"", "lemmas i_cut_absorb =\n  cut_le_absorb cut_less_absorb\n  cut_ge_absorb cut_greater_absorb", "lemma\n  cut_less_0_empty: \"I \\<down>< (0::nat) = {}\" and\n  cut_ge_0_all:     \"I \\<down>\\<ge> (0::nat) = I\"", "lemma\n  cut_le_all_iff:      \"(I \\<down>\\<le> t = I) = (\\<forall>x\\<in>I. x \\<le> t)\" and\n  cut_less_all_iff:    \"(I \\<down>< t = I) = (\\<forall>x\\<in>I. x < t)\" and\n  cut_ge_all_iff:      \"(I \\<down>\\<ge> t = I) = (\\<forall>x\\<in>I. x \\<ge> t)\" and\n  cut_greater_all_iff: \"(I \\<down>> t = I) = (\\<forall>x\\<in>I. x > t)\"", "lemmas i_cut_all_iff =\n  cut_le_all_iff cut_less_all_iff\n  cut_ge_all_iff cut_greater_all_iff", "lemma\n  cut_le_empty_iff:      \"(I \\<down>\\<le> t = {}) = (\\<forall>x\\<in>I. t < x)\" and\n  cut_less_empty_iff:    \"(I \\<down>< t = {}) = (\\<forall>x\\<in>I. t \\<le> x)\" and\n  cut_ge_empty_iff:      \"(I \\<down>\\<ge> t = {}) = (\\<forall>x\\<in>I. x < t)\" and\n  cut_greater_empty_iff: \"(I \\<down>> t = {}) = (\\<forall>x\\<in>I. x \\<le> t)\"", "lemmas i_cut_empty_iff =\n  cut_le_empty_iff cut_less_empty_iff\n  cut_ge_empty_iff cut_greater_empty_iff", "lemma\n  cut_le_not_empty_iff:      \"(I \\<down>\\<le> t \\<noteq> {}) = (\\<exists>x\\<in>I. x \\<le> t)\" and\n  cut_less_not_empty_iff:    \"(I \\<down>< t \\<noteq> {}) = (\\<exists>x\\<in>I. x < t)\" and\n  cut_ge_not_empty_iff:      \"(I \\<down>\\<ge> t \\<noteq> {}) = (\\<exists>x\\<in>I. t \\<le> x)\" and\n  cut_greater_not_empty_iff: \"(I \\<down>> t \\<noteq> {}) = (\\<exists>x\\<in>I. t < x)\"", "lemmas i_cut_not_empty_iff =\n  cut_le_not_empty_iff cut_less_not_empty_iff\n  cut_ge_not_empty_iff cut_greater_not_empty_iff", "lemma nat_cut_ge_infinite_not_empty: \"infinite I \\<Longrightarrow> I \\<down>\\<ge> (t::nat) \\<noteq> {}\"", "lemma nat_cut_greater_infinite_not_empty: \"infinite I \\<Longrightarrow> I \\<down>> (t::nat) \\<noteq> {}\"", "lemmas i_cut_not_in_imp =\n  cut_le_not_in_imp cut_less_not_in_imp\n  cut_ge_not_in_imp cut_greater_not_in_imp", "lemmas i_cut_in_imp =\n  cut_le_in_imp cut_less_in_imp\n  cut_ge_in_imp cut_greater_in_imp", "lemma Collect_minI_cut: \"\\<lbrakk> k \\<in> I; P (k::('a::wellorder)) \\<rbrakk> \\<Longrightarrow> \\<exists>x\\<in>I. P x \\<and> (\\<forall>y\\<in>(I \\<down>< x). \\<not> P y)\"", "lemma cut_le_cut_greater_ident: \"t2 \\<le> t1 \\<Longrightarrow> I \\<down>\\<le> t1 \\<union> I \\<down>> t2 = I\"", "lemma cut_less_cut_ge_ident: \"t2 \\<le> t1 \\<Longrightarrow> I \\<down>< t1 \\<union> I \\<down>\\<ge> t2 = I\"", "lemma cut_le_cut_ge_ident: \"t2 \\<le> t1 \\<Longrightarrow> I \\<down>\\<le> t1 \\<union> I \\<down>\\<ge> t2 = I\"", "lemma cut_less_cut_greater_ident: \"\n  \\<lbrakk> t2 \\<le> t1; I \\<inter> {t1..t2} = {} \\<rbrakk> \\<Longrightarrow> I \\<down>< t1 \\<union> I \\<down>> t2 = I\"", "lemma insert_eq_cut_less_cut_greater: \"insert n I = I \\<down>< n \\<union> {n} \\<union> I \\<down>> n\"", "lemma insert_Int_conv_if: \"A \\<inter> (insert x B) = (\n  if x \\<in> A then insert x (A \\<inter> B) else A \\<inter> B)\"", "lemma cut_le_less_conv_if: \"I \\<down>\\<le> t = (\n  if t \\<in> I then insert t (I \\<down>< t) else (I \\<down>< t))\"", "lemma cut_le_less_conv: \"I \\<down>\\<le> t = ({t} \\<inter> I) \\<union> (I \\<down>< t)\"", "lemma cut_less_le_conv: \"I \\<down>< t = (I \\<down>\\<le> t) - {t}\"", "lemma cut_less_le_conv_if: \"I \\<down>< t = (\n  if t \\<in> I then (I \\<down>\\<le> t) - {t} else (I \\<down>\\<le> t))\"", "lemma cut_ge_greater_conv_if: \"I \\<down>\\<ge> t = (\n  if t \\<in> I then insert t (I \\<down>> t) else (I \\<down>> t))\"", "lemma cut_ge_greater_conv: \"I \\<down>\\<ge> t = ({t} \\<inter> I) \\<union> (I \\<down>> t)\"", "lemma cut_greater_ge_conv: \"I \\<down>> t = (I \\<down>\\<ge> t) - {t}\"", "lemma cut_greater_ge_conv_if: \"I \\<down>> t = (\n  if t \\<in> I then (I \\<down>\\<ge> t) - {t} else (I \\<down>\\<ge> t))\"", "lemma nat_cut_le_less_conv: \"I \\<down>\\<le> t = I \\<down>< Suc t\"", "lemma nat_cut_less_le_conv: \"0 < t \\<Longrightarrow> I \\<down>< t = I \\<down>\\<le> (t - Suc 0)\"", "lemma nat_cut_ge_greater_conv: \"I \\<down>\\<ge> Suc t = I \\<down>> t\"", "lemma nat_cut_greater_ge_conv: \"0 < t \\<Longrightarrow> I \\<down>> (t - Suc 0) = I \\<down>\\<ge> t\"", "lemma cut_less_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>< f n = f ` (I \\<down>< n)\"", "lemma cut_le_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>\\<le> f n = f ` (I \\<down>\\<le> n)\"", "lemma cut_greater_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>> f n = f ` (I \\<down>> n)\"", "lemma cut_ge_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>\\<ge> f n = f ` (I \\<down>\\<ge> n)\"", "lemmas i_cut_image =\n  cut_le_image cut_less_image\n  cut_ge_image cut_greater_image", "lemma\n  cut_le_finite:      \"finite I \\<Longrightarrow> finite (I \\<down>\\<le> t)\" and\n  cut_less_finite:    \"finite I \\<Longrightarrow> finite (I \\<down>< t)\" and\n  cut_ge_finite:      \"finite I \\<Longrightarrow> finite (I \\<down>\\<ge> t)\" and\n  cut_greater_finite: \"finite I \\<Longrightarrow> finite (I \\<down>> t)\"", "lemma nat_cut_le_finite: \"finite (I \\<down>\\<le> (t::nat))\"", "lemma nat_cut_less_finite: \"finite (I \\<down>< (t::nat))\"", "lemma nat_cut_ge_finite_iff: \"finite (I \\<down>\\<ge> (t::nat)) = finite I\"", "lemma nat_cut_greater_finite_iff: \"finite (I \\<down>> (t::nat)) = finite I\"", "lemma\n  cut_le_card:      \"finite I \\<Longrightarrow> card (I \\<down>\\<le> t) \\<le> card I\" and\n  cut_less_card:    \"finite I \\<Longrightarrow> card (I \\<down>< t) \\<le> card I\" and\n  cut_ge_card:      \"finite I \\<Longrightarrow> card (I \\<down>\\<ge> t) \\<le> card I\" and\n  cut_greater_card: \"finite I \\<Longrightarrow> card (I \\<down>> t) \\<le> card I\"", "lemma nat_cut_greater_card: \"card (I \\<down>> (t::nat)) \\<le> card I\"", "lemma nat_cut_ge_card: \"card (I \\<down>\\<ge> (t::nat)) \\<le> card I\"", "lemma cut_greater_Min_eq_Diff: \"I \\<down>> (iMin I) = I - {iMin I}\"", "lemma cut_less_Max_eq_Diff: \"finite I \\<Longrightarrow> I \\<down>< (Max I) = I - {Max I}\"", "lemma cut_le_Min_empty: \"t < iMin I \\<Longrightarrow> I \\<down>\\<le> t = {}\"", "lemma cut_less_Min_empty: \"t \\<le> iMin I \\<Longrightarrow> I \\<down>< t = {}\"", "lemma cut_le_Min_not_empty: \"\\<lbrakk> I \\<noteq> {}; iMin I \\<le> t \\<rbrakk> \\<Longrightarrow> I \\<down>\\<le> t \\<noteq> {}\"", "lemma cut_less_Min_not_empty: \"\\<lbrakk> I \\<noteq> {}; iMin I < t \\<rbrakk> \\<Longrightarrow> I \\<down>< t \\<noteq> {}\"", "lemma cut_ge_Min_all: \"t \\<le> iMin I \\<Longrightarrow> I \\<down>\\<ge> t = I\"", "lemma cut_greater_Min_all: \"t < iMin I \\<Longrightarrow> I \\<down>> t = I\"", "lemmas i_cut_min_empty =\n  cut_le_Min_empty\n  cut_less_Min_empty\n  cut_le_Min_not_empty\n  cut_less_Min_not_empty", "lemmas i_cut_min_all =\n  cut_ge_Min_all\n  cut_greater_Min_all", "lemma cut_ge_Max_empty: \"finite I \\<Longrightarrow> Max I < t \\<Longrightarrow> I \\<down>\\<ge> t = {}\"", "lemma cut_greater_Max_empty: \"finite I \\<Longrightarrow> Max I \\<le> t \\<Longrightarrow> I \\<down>> t = {}\"", "lemma cut_ge_Max_not_empty: \"\\<lbrakk> I \\<noteq> {}; finite I; t \\<le> Max I \\<rbrakk> \\<Longrightarrow> I \\<down>\\<ge> t \\<noteq> {}\"", "lemma cut_greater_Max_not_empty: \"\\<lbrakk> I \\<noteq> {}; finite I; t < Max I \\<rbrakk> \\<Longrightarrow> I \\<down>> t \\<noteq> {}\"", "lemma cut_le_Max_all: \"finite I \\<Longrightarrow> Max I \\<le> t \\<Longrightarrow> I \\<down>\\<le> t = I\"", "lemma cut_less_Max_all: \"finite I \\<Longrightarrow> Max I < t \\<Longrightarrow> I \\<down>< t = I\"", "lemmas i_cut_max_empty =\n  cut_ge_Max_empty\n  cut_greater_Max_empty\n  cut_ge_Max_not_empty\n  cut_greater_Max_not_empty", "lemmas i_cut_max_all =\n  cut_le_Max_all\n  cut_less_Max_all", "lemma cut_less_Max_less: \"\n  \\<lbrakk> finite (I \\<down>< t); I \\<down>< t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>< t) < t\"", "lemma cut_le_Max_le: \"\n  \\<lbrakk> finite (I \\<down>\\<le> t); I \\<down>\\<le> t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>\\<le> t) \\<le> t\"", "lemma nat_cut_less_Max_less: \"\n  I \\<down>< t \\<noteq> {} \\<Longrightarrow> Max (I \\<down>< t) < (t::nat)\"", "lemma nat_cut_le_Max_le: \"\n  I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> Max (I \\<down>\\<le> t) \\<le> (t::nat)\"", "lemma cut_greater_Min_greater: \"\n  I \\<down>> t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>> t) > t\"", "lemma cut_ge_Min_greater: \"\n  I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>\\<ge> t) \\<ge> t\"", "lemma cut_less_Min_eq: \"I \\<down>< t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>< t) = iMin I\"", "lemma cut_le_Min_eq: \"I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>\\<le> t) = iMin I\"", "lemma cut_ge_Max_eq: \"\\<lbrakk> finite I; I \\<down>\\<ge> t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>\\<ge> t) = Max I\"", "lemma cut_greater_Max_eq: \"\\<lbrakk> finite I; I \\<down>> t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>> t) = Max I\"", "lemma\n  UNIV_cut_le:      \"UNIV \\<down>\\<le> t = {..t}\" and\n  UNIV_cut_less:    \"UNIV \\<down>< t = {..<t}\" and\n  UNIV_cut_ge:      \"UNIV \\<down>\\<ge> t = {t..}\" and\n  UNIV_cut_greater: \"UNIV \\<down>> t = {t<..}\"", "lemma\n  lessThan_cut_le:      \"{..<n} \\<down>\\<le> t = (if n \\<le> t then {..<n} else {..t})\" and\n  lessThan_cut_less:    \"{..<n} \\<down>< t = (if n \\<le> t then {..<n} else {..<t})\" and\n  lessThan_cut_ge:      \"{..<n} \\<down>\\<ge> t = {t..<n}\" and\n  lessThan_cut_greater: \"{..<n} \\<down>> t = {t<..<n}\" and\n  atMost_cut_le:      \"{..n} \\<down>\\<le> t = (if n \\<le> t then {..n} else {..t})\" and\n  atMost_cut_less:    \"{..n} \\<down>< t = (if n < t then {..n} else {..<t})\" and\n  atMost_cut_ge:      \"{..n} \\<down>\\<ge> t = {t..n}\" and\n  atMost_cut_greager: \"{..n} \\<down>> t = {t<..n}\" and\n  greaterThan_cut_le:      \"{n<..} \\<down>\\<le> t = {n<..t}\" and\n  greaterThan_cut_less:    \"{n<..} \\<down>< t = {n<..<t}\" and\n  greaterThan_cut_ge:      \"{n<..} \\<down>\\<ge> t = (if t \\<le> n then {n<..} else {t..})\" and\n  greaterThan_cut_greater: \"{n<..} \\<down>> t = (if t \\<le> n then {n<..} else {t<..})\" and\n  atLeast_cut_le:      \"{n..} \\<down>\\<le> t = {n..t}\" and\n  atLeast_cut_less:    \"{n..} \\<down>< t = {n..<t}\" and\n  atLeast_cut_ge:      \"{n..} \\<down>\\<ge> t = (if t \\<le> n then {n..} else {t..})\" and\n  atLeast_cut_greater: \"{n..} \\<down>\\<ge> t = (if t \\<le> n then {n..} else {t..})\"", "lemma\n  greaterThanLessThan_cut_le:      \"{m<..<n} \\<down>\\<le> t = (if n \\<le> t then {m<..<n} else {m<..t})\" and\n  greaterThanLessThan_cut_less:    \"{m<..<n} \\<down>< t = (if n \\<le> t then {m<..<n} else {m<..<t})\" and\n  greaterThanLessThan_cut_ge:      \"{m<..<n} \\<down>\\<ge> t = (if t \\<le> m then {m<..<n} else {t..<n})\" and\n  greaterThanLessThan_cut_greater: \"{m<..<n} \\<down>> t = (if t \\<le> m then {m<..<n} else {t<..<n})\" and\n  atLeastLessThan_cut_le:      \"{m..<n} \\<down>\\<le> t = (if n \\<le> t then {m..<n} else {m..t})\" and\n  atLeastLessThan_cut_less:    \"{m..<n} \\<down>< t = (if n \\<le> t then {m..<n} else {m..<t})\" and\n  atLeastLessThan_cut_ge:      \"{m..<n} \\<down>\\<ge> t = (if t \\<le> m then {m..<n} else {t..<n})\" and\n  atLeastLessThan_cut_greater: \"{m..<n} \\<down>> t = (if t < m then {m..<n} else {t<..<n})\" and\n  greaterThanAtMost_cut_le:      \"{m<..n} \\<down>\\<le> t = (if n \\<le> t then {m<..n} else {m<..t})\" and\n  greaterThanAtMost_cut_less:    \"{m<..n} \\<down>< t = (if n < t then {m<..n} else {m<..<t})\" and\n  greaterThanAtMost_cut_ge:      \"{m<..n} \\<down>\\<ge> t = (if t \\<le> m then {m<..n} else {t..n})\" and\n  greaterThanAtMost_cut_greater: \"{m<..n} \\<down>> t = (if t \\<le> m then {m<..n} else {t<..n})\" and\n  atLeastAtMost_cut_le:      \"{m..n} \\<down>\\<le> t = (if n \\<le> t then {m..n} else {m..t})\" and\n  atLeastAtMost_cut_less:    \"{m..n} \\<down>< t = (if n < t then {m..n} else {m..<t})\" and\n  atLeastAtMost_cut_ge:      \"{m..n} \\<down>\\<ge> t = (if t \\<le> m then {m..n} else {t..n})\" and\n  atLeastAtMost_cut_greater: \"{m..n} \\<down>> t = (if t < m then {m..n} else {t<..n})\"", "lemma nat_mirror_commute: \"nat_mirror n l r = nat_mirror n r l\"", "lemma nat_mirror_inj_on: \"inj_on (\\<lambda>x. nat_mirror x l r) {..l + r}\"", "lemma nat_mirror_nat_mirror_ident: \"\n  n \\<le> l + r \\<Longrightarrow> nat_mirror (nat_mirror n l r) l r = n\"", "lemma nat_mirror_add: \"\n  nat_mirror (n + k) l r = (nat_mirror n l r) - k\"", "lemma nat_mirror_diff: \"\n  \\<lbrakk> k \\<le> n; n \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  nat_mirror (n - k) l r = (nat_mirror n l r) + k\"", "lemma nat_mirror_le: \"a \\<le> b \\<Longrightarrow> nat_mirror b l r \\<le> nat_mirror a l r\"", "lemma nat_mirror_le_conv: \"\n  a \\<le> l + r \\<Longrightarrow> (nat_mirror b l r \\<le> nat_mirror a l r) = (a \\<le> b)\"", "lemma nat_mirror_less: \"\n  \\<lbrakk> a < b; a < l + r \\<rbrakk> \\<Longrightarrow>\n  nat_mirror b l r < nat_mirror a l r\"", "lemma nat_mirror_less_imp_less: \"\n  nat_mirror b l r < nat_mirror a l r \\<Longrightarrow> a < b\"", "lemma nat_mirror_less_conv: \"\n  a < l + r \\<Longrightarrow> (nat_mirror b l r < nat_mirror a l r) = (a < b)\"", "lemma nat_mirror_eq_conv: \"\n  \\<lbrakk> a \\<le> l + r; b \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  (nat_mirror a l r = nat_mirror b l r) = (a = b)\"", "lemma mirror_elem_inj_on: \"finite I \\<Longrightarrow> inj_on (\\<lambda>x. mirror_elem x I) I\"", "lemma mirror_elem_add: \"\n  finite I \\<Longrightarrow> mirror_elem (n + k) I = mirror_elem n I - k\"", "lemma mirror_elem_diff: \"\n  \\<lbrakk> finite I; k \\<le> n; n \\<in> I \\<rbrakk> \\<Longrightarrow> mirror_elem (n - k) I = mirror_elem n I + k\"", "lemma mirror_elem_Min: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> mirror_elem (iMin I) I = Max I\"", "lemma mirror_elem_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> mirror_elem (Max I) I = iMin I\"", "lemma mirror_elem_mirror_elem_ident: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow> mirror_elem (mirror_elem n I) I = n\"", "lemma mirror_elem_le_conv: \"\n  \\<lbrakk> finite I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow>\n  (mirror_elem b I \\<le> mirror_elem a I) = (a \\<le> b)\"", "lemma mirror_elem_less_conv: \"\n  \\<lbrakk> finite I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow>\n  (mirror_elem b I < mirror_elem a I) = (a < b)\"", "lemma mirror_elem_eq_conv: \"\n  \\<lbrakk> a \\<le> iMin I + Max I; b \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  (mirror_elem a I = mirror_elem b I) = (a = b)\"", "lemma mirror_elem_eq_conv': \"\n  \\<lbrakk> finite I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> (mirror_elem a I = mirror_elem b I) = (a = b)\"", "lemma imirror_eq_nat_mirror_image: \"\n  imirror I = (\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I\"", "lemma imirror_eq_mirror_elem_image: \"\n  imirror I = (\\<lambda>x. mirror_elem x I) ` I\"", "lemma imirror_eq_imirror_bounds: \"\n  imirror I = imirror_bounds I (iMin I) (Max I)\"", "lemma imirror_empty: \"imirror {} = {}\"", "lemma imirror_is_empty: \"(imirror I = {}) = (I = {})\"", "lemma imirror_not_empty: \"I \\<noteq> {} \\<Longrightarrow> imirror I \\<noteq> {}\"", "lemma imirror_singleton: \"imirror {a} = {a}\"", "lemma imirror_finite: \"finite I \\<Longrightarrow> finite (imirror I)\"", "lemma imirror_bounds_iMin: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; iMin I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  iMin (imirror_bounds I l r) = l + r - Max I\"", "lemma imirror_bounds_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; Max I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  Max (imirror_bounds I l r) = l + r - iMin I\"", "lemma imirror_iMin: \"finite I \\<Longrightarrow> iMin (imirror I) = iMin I\"", "lemma imirror_Max: \"finite I \\<Longrightarrow> Max (imirror I) = Max I\"", "lemma imirror_bounds_iff:\n  \"(n \\<in> imirror_bounds I l r) = (\\<exists>x\\<in>I. n = l + r - x)\"", "lemma imirror_iff: \"(n \\<in> imirror I) = (\\<exists>x\\<in>I. n = iMin I + Max I - x)\"", "lemma imirror_bounds_imirror_bounds_ident: \"\n  \\<lbrakk> finite I; Max I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  imirror_bounds (imirror_bounds I l r) l r = I\"", "lemma imirror_imirror_ident: \"finite I \\<Longrightarrow> imirror (imirror I) = I\"", "lemma mirror_elem_imirror: \"\n  finite I \\<Longrightarrow> mirror_elem t (imirror I) = mirror_elem t I\"", "lemma imirror_card: \"finite I \\<Longrightarrow> card (imirror I) = card I\"", "lemma imirror_bounds_elem_conv: \"\n  \\<lbrakk> finite I; n \\<le> l + r; Max I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  ((nat_mirror n l r) \\<in> imirror_bounds I l r) = (n \\<in> I)\"", "lemma imirror_mem_conv: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow> ((mirror_elem n I) \\<in> imirror I) = (n \\<in> I)\"", "lemma imirror_cut_less: \"\n  finite I \\<Longrightarrow>\n  imirror I \\<down>< (mirror_elem t I) =\n  imirror_bounds (I \\<down>> t) (iMin I) (Max I)\"", "lemma imirror_cut_le: \"\n  \\<lbrakk> finite I; t \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  imirror I \\<down>\\<le> (mirror_elem t I) =\n  imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)\"", "lemma imirror_cut_ge: \"\n  finite I \\<Longrightarrow>\n  imirror I \\<down>\\<ge> (mirror_elem t I) =\n  imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)\"\n  (is \"?P \\<Longrightarrow> ?lhs I = ?rhs I t\")", "lemma imirror_cut_greater: \"\\<lbrakk> finite I; t \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  imirror I \\<down>> (mirror_elem t I) =\n  imirror_bounds (I \\<down>< t) (iMin I) (Max I)\"", "lemmas imirror_cut =\n  imirror_cut_less imirror_cut_ge\n  imirror_cut_le imirror_cut_greater", "lemmas imirror_cut' =\n  imirror_cut_le' imirror_cut_greater'", "lemma imirror_bounds_Un: \"\n  imirror_bounds (A \\<union> B) l r =\n  imirror_bounds A l r \\<union> imirror_bounds B l r\"", "lemma imirror_bounds_Int: \"\n  \\<lbrakk> A \\<subseteq> {..l + r}; B \\<subseteq> {..l + r} \\<rbrakk> \\<Longrightarrow>\n  imirror_bounds (A \\<inter> B) l r =\n  imirror_bounds A l r \\<inter> imirror_bounds B l r\""], "translations": [["", "lemma set_restrictionD: \"set_restriction f \\<Longrightarrow> \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow>\n    \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}", "by blast"], ["", "lemma set_restrictionD_spec: \"set_restriction f \\<Longrightarrow> \\<exists>P. f A = {x \\<in> A. P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> \\<exists>P. f A = {x \\<in> A. P x}", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    \\<exists>P. f A = {x \\<in> A. P x}", "by blast"], ["", "lemma set_restrictionI: \"f = (\\<lambda>A. {x \\<in> A. P x}) \\<Longrightarrow> set_restriction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (\\<lambda>A. {x \\<in> A. P x}) \\<Longrightarrow> set_restriction f", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (\\<lambda>A. {x \\<in> A. P x}) \\<Longrightarrow>\n    \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}", "by blast"], ["", "lemma set_restriction_comp: \"\n  \\<lbrakk> set_restriction f; set_restriction g \\<rbrakk> \\<Longrightarrow> set_restriction (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; set_restriction g\\<rbrakk>\n    \\<Longrightarrow> set_restriction (f \\<circ> g)", "apply (unfold set_restriction_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     \\<exists>P. \\<forall>A. g A = {x \\<in> A. P x}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P.\n                         \\<forall>A. (f \\<circ> g) A = {x \\<in> A. P x}", "apply (elim exE, rename_tac P1 P2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P1 P2.\n       \\<lbrakk>\\<forall>A. f A = {x \\<in> A. P1 x};\n        \\<forall>A. g A = {x \\<in> A. P2 x}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P.\n                            \\<forall>A. (f \\<circ> g) A = {x \\<in> A. P x}", "apply (rule_tac x=\"\\<lambda>x. P1 x \\<and> P2 x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P1 P2.\n       \\<lbrakk>\\<forall>A. f A = {x \\<in> A. P1 x};\n        \\<forall>A. g A = {x \\<in> A. P2 x}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A.\n                            (f \\<circ> g) A = {x \\<in> A. P1 x \\<and> P2 x}", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_restriction_commute: \"\n  \\<lbrakk> set_restriction f; set_restriction g \\<rbrakk> \\<Longrightarrow> f (g I) = g (f I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; set_restriction g\\<rbrakk>\n    \\<Longrightarrow> f (g I) = g (f I)", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     \\<exists>P. \\<forall>A. g A = {x \\<in> A. P x}\\<rbrakk>\n    \\<Longrightarrow> f (g I) = g (f I)", "by fastforce"], ["", "text \\<open>Constructs a set restriction function with the given restriction predicate\\<close>"], ["", "definition\n  set_restriction_fun :: \"('a \\<Rightarrow> bool) \\<Rightarrow> ('a set \\<Rightarrow> 'a set)\"\nwhere\n  \"set_restriction_fun P \\<equiv> \\<lambda>A. {x \\<in> A. P x}\""], ["", "lemma set_restriction_fun_is_set_restriction: \"\n  set_restriction (set_restriction_fun P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction (set_restriction_fun P)", "unfolding set_restriction_def set_restriction_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Pa. \\<forall>A. {x \\<in> A. P x} = {x \\<in> A. Pa x}", "by blast"], ["", "lemma set_restriction_Int_conv:\n  \"set_restriction f = (\\<exists>B. \\<forall>A. f A = A \\<inter> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f = (\\<exists>B. \\<forall>A. f A = A \\<inter> B)", "apply (unfold set_restriction_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}) =\n    (\\<exists>B. \\<forall>A. f A = A \\<inter> B)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    \\<exists>B. \\<forall>A. f A = A \\<inter> B\n 2. \\<exists>B. \\<forall>A. f A = A \\<inter> B \\<Longrightarrow>\n    \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}", "apply (erule exE, rule_tac x=\"Collect P\" in exI, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B. \\<forall>A. f A = A \\<inter> B \\<Longrightarrow>\n    \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}", "apply (erule exE, rule_tac x=\"\\<lambda>x. x \\<in> B\" in exI, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_restriction_Un: \"\n  set_restriction f \\<Longrightarrow> f (A \\<union> B) = f A \\<union> f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> f (A \\<union> B) = f A \\<union> f B", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    f (A \\<union> B) = f A \\<union> f B", "by fastforce"], ["", "lemma set_restriction_Int: \"\n  set_restriction f \\<Longrightarrow> f (A \\<inter> B) = f A \\<inter> f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> f (A \\<inter> B) = f A \\<inter> f B", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    f (A \\<inter> B) = f A \\<inter> f B", "by fastforce"], ["", "lemma set_restriction_Diff: \"\n  set_restriction f \\<Longrightarrow> f (A - B) = f A - f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> f (A - B) = f A - f B", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    f (A - B) = f A - f B", "by fastforce"], ["", "lemma set_restriction_mono: \"\n  \\<lbrakk> set_restriction f; A \\<subseteq> B \\<rbrakk> \\<Longrightarrow> f A \\<subseteq> f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> f A \\<subseteq> f B", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> f A \\<subseteq> f B", "by fastforce"], ["", "lemma set_restriction_absorb: \"\n  set_restriction f \\<Longrightarrow> f (f A) = f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> f (f A) = f A", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    f (f A) = f A", "by fastforce"], ["", "lemma set_restriction_empty: \"\n  set_restriction f \\<Longrightarrow> f {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> f {} = {}", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    f {} = {}", "by blast"], ["", "lemma set_restriction_non_empty_imp: \"\n  \\<lbrakk> set_restriction f; f A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; f A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {}", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     f A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {}", "by blast"], ["", "lemma set_restriction_subset: \"\n  set_restriction f \\<Longrightarrow> f A \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction f \\<Longrightarrow> f A \\<subseteq> A", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. \\<forall>A. f A = {x \\<in> A. P x} \\<Longrightarrow>\n    f A \\<subseteq> A", "by blast"], ["", "lemma set_restriction_finite: \"\n  \\<lbrakk> set_restriction f; finite A \\<rbrakk> \\<Longrightarrow> finite (f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; finite A\\<rbrakk>\n    \\<Longrightarrow> finite (f A)", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     finite A\\<rbrakk>\n    \\<Longrightarrow> finite (f A)", "by fastforce"], ["", "lemma set_restriction_card: \"\n  \\<lbrakk> set_restriction f; finite A \\<rbrakk> \\<Longrightarrow>\n  card (f A) = card A - card {a \\<in> A. f {a} = {}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; finite A\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card A - card {a \\<in> A. f {a} = {}}", "apply (unfold set_restriction_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     finite A\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card A - card {a \\<in> A. f {a} = {}}", "apply (subgoal_tac \"{a \\<in> A. f {a} = {}} \\<subseteq> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}; finite A;\n     {a \\<in> A. f {a} = {}} \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card A - card {a \\<in> A. f {a} = {}}\n 2. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     finite A\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> A. f {a} = {}} \\<subseteq> A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     finite A\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> A. f {a} = {}} \\<subseteq> A\n 2. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}; finite A;\n     {a \\<in> A. f {a} = {}} \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card A - card {a \\<in> A. f {a} = {}}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}; finite A;\n     {a \\<in> A. f {a} = {}} \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card A - card {a \\<in> A. f {a} = {}}", "apply (frule finite_subset, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}; finite A;\n     {a \\<in> A. f {a} = {}} \\<subseteq> A;\n     finite {a \\<in> A. f {a} = {}}\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card A - card {a \\<in> A. f {a} = {}}", "apply (simp only: card_Diff_subset[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}; finite A;\n     {a \\<in> A. f {a} = {}} \\<subseteq> A;\n     finite {a \\<in> A. f {a} = {}}\\<rbrakk>\n    \\<Longrightarrow> card (f A) = card (A - {a \\<in> A. f {a} = {}})", "apply (rule arg_cong[where f=card])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x}; finite A;\n     {a \\<in> A. f {a} = {}} \\<subseteq> A;\n     finite {a \\<in> A. f {a} = {}}\\<rbrakk>\n    \\<Longrightarrow> f A = A - {a \\<in> A. f {a} = {}}", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_restriction_card_le: \"\n  \\<lbrakk> set_restriction f; finite A \\<rbrakk> \\<Longrightarrow> card (f A) \\<le> card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; finite A\\<rbrakk>\n    \\<Longrightarrow> card (f A) \\<le> card A", "by (simp add: set_restriction_card)"], ["", "lemma set_restriction_not_in_imp: \"\n  \\<lbrakk> set_restriction f; x \\<notin> A \\<rbrakk> \\<Longrightarrow> x \\<notin> f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> f A", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> f A", "by blast"], ["", "lemma set_restriction_in_imp: \"\n  \\<lbrakk> set_restriction f; x \\<in> f A \\<rbrakk> \\<Longrightarrow> x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_restriction f; x \\<in> f A\\<rbrakk>\n    \\<Longrightarrow> x \\<in> A", "unfolding set_restriction_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. \\<forall>A. f A = {x \\<in> A. P x};\n     x \\<in> f A\\<rbrakk>\n    \\<Longrightarrow> x \\<in> A", "by blast"], ["", "lemma set_restriction_fun_singleton: \"\n  set_restriction_fun P {a} = (if P a then {a} else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction_fun P {a} = (if P a then {a} else {})", "unfolding set_restriction_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> {a}. P x} = (if P a then {a} else {})", "by force"], ["", "lemma set_restriction_fun_all_conv: \"\n  ((set_restriction_fun P) A = A) = (\\<forall>x\\<in>A. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_restriction_fun P A = A) = (\\<forall>x\\<in>A. P x)", "unfolding set_restriction_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x \\<in> A. P x} = A) = (\\<forall>x\\<in>A. P x)", "by blast"], ["", "lemma set_restriction_fun_empty_conv: \"\n  ((set_restriction_fun P) A = {}) = (\\<forall>x\\<in>A. \\<not> P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_restriction_fun P A = {}) = (\\<forall>x\\<in>A. \\<not> P x)", "unfolding set_restriction_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x \\<in> A. P x} = {}) = (\\<forall>x\\<in>A. \\<not> P x)", "by blast"], ["", "subsection \\<open>Cut operators for sets/intervals\\<close>"], ["", "subsubsection \\<open>Definitions and basic lemmata for cut operators\\<close>"], ["", "definition cut_le :: \"'a::linorder set \\<Rightarrow> 'a \\<Rightarrow> 'a set\"   (infixl \"\\<down>\\<le>\" 100)\n  where \"I \\<down>\\<le> t \\<equiv> {x\\<in>I. x \\<le> t}\""], ["", "definition cut_less :: \"'a::linorder set \\<Rightarrow> 'a \\<Rightarrow> 'a set\"  (infixl \"\\<down><\" 100)\n  where \"I \\<down>< t \\<equiv> {x\\<in>I. x < t}\""], ["", "definition cut_ge :: \"'a::linorder set \\<Rightarrow> 'a \\<Rightarrow> 'a set\"  (infixl \"\\<down>\\<ge>\" 100)\n  where \"I \\<down>\\<ge> t \\<equiv> {x\\<in>I. t \\<le> x}\""], ["", "definition cut_greater :: \"'a::linorder set \\<Rightarrow> 'a \\<Rightarrow> 'a set\"  (infixl \"\\<down>>\" 100)\n  where \"I \\<down>> t \\<equiv> {x\\<in>I. t < x}\""], ["", "lemmas i_cut_defs =\n  cut_le_def cut_less_def\n  cut_ge_def cut_greater_def"], ["", "lemma cut_le_mem_iff: \"x \\<in> I \\<down>\\<le> t = (x \\<in> I \\<and> x \\<le> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> I \\<down>\\<le> t) = (x \\<in> I \\<and> x \\<le> t)", "by (unfold cut_le_def, blast)"], ["", "lemma cut_less_mem_iff: \"x \\<in> I \\<down>< t = (x \\<in> I \\<and> x < t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> I \\<down>< t) = (x \\<in> I \\<and> x < t)", "by (unfold cut_less_def, blast)"], ["", "lemma cut_ge_mem_iff: \"x \\<in> I \\<down>\\<ge> t = (x \\<in> I \\<and> t \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> I \\<down>\\<ge> t) = (x \\<in> I \\<and> t \\<le> x)", "by (unfold cut_ge_def, blast)"], ["", "lemma cut_greater_mem_iff: \"x \\<in> I \\<down>> t = (x \\<in> I \\<and> t < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> I \\<down>> t) = (x \\<in> I \\<and> t < x)", "by (unfold cut_greater_def, blast)"], ["", "lemmas i_cut_mem_iff =\n  cut_le_mem_iff cut_less_mem_iff\n  cut_ge_mem_iff cut_greater_mem_iff"], ["", "lemma\n  cut_leI [intro!]:      \"x \\<in> I \\<Longrightarrow> x \\<le> t \\<Longrightarrow> x \\<in> I \\<down>\\<le> t\" and\n  cut_lessI [intro!]:    \"x \\<in> I \\<Longrightarrow> x < t \\<Longrightarrow> x \\<in> I \\<down>< t\" and\n  cut_geI [intro!]:      \"x \\<in> I \\<Longrightarrow> x \\<ge> t \\<Longrightarrow> x \\<in> I \\<down>\\<ge> t\" and\n  cut_greaterI [intro!]: \"x \\<in> I \\<Longrightarrow> x > t \\<Longrightarrow> x \\<in> I \\<down>> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>x \\<in> I; x \\<le> t\\<rbrakk>\n      \\<Longrightarrow> x \\<in> I \\<down>\\<le> t) &&&\n     (\\<lbrakk>x \\<in> I; x < t\\<rbrakk>\n      \\<Longrightarrow> x \\<in> I \\<down>< t)) &&&\n    (\\<lbrakk>x \\<in> I; t \\<le> x\\<rbrakk>\n     \\<Longrightarrow> x \\<in> I \\<down>\\<ge> t) &&&\n    (\\<lbrakk>x \\<in> I; t < x\\<rbrakk>\n     \\<Longrightarrow> x \\<in> I \\<down>> t)", "by (simp_all add: i_cut_mem_iff)"], ["", "lemma\n  cut_leE [elim!]:      \"x \\<in> I \\<down>\\<le> t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x \\<le> t \\<Longrightarrow> P) \\<Longrightarrow> P\" and\n  cut_lessE [elim!]:    \"x \\<in> I \\<down>< t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x < t \\<Longrightarrow> P) \\<Longrightarrow> P\" and\n  cut_geE [elim!]:      \"x \\<in> I \\<down>\\<ge> t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x \\<ge> t \\<Longrightarrow> P) \\<Longrightarrow> P\" and\n  cut_greaterE [elim!]: \"x \\<in> I \\<down>> t \\<Longrightarrow> (x \\<in> I \\<Longrightarrow> x > t \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>x \\<in> I \\<down>\\<le> t;\n       \\<lbrakk>x \\<in> I; x \\<le> t\\<rbrakk> \\<Longrightarrow> P\\<rbrakk>\n      \\<Longrightarrow> P) &&&\n     (\\<lbrakk>x \\<in> I \\<down>< t;\n       \\<lbrakk>x \\<in> I; x < t\\<rbrakk> \\<Longrightarrow> P\\<rbrakk>\n      \\<Longrightarrow> P)) &&&\n    (\\<lbrakk>x \\<in> I \\<down>\\<ge> t;\n      \\<lbrakk>x \\<in> I; t \\<le> x\\<rbrakk> \\<Longrightarrow> P\\<rbrakk>\n     \\<Longrightarrow> P) &&&\n    (\\<lbrakk>x \\<in> I \\<down>> t;\n      \\<lbrakk>x \\<in> I; t < x\\<rbrakk> \\<Longrightarrow> P\\<rbrakk>\n     \\<Longrightarrow> P)", "by (simp_all add: i_cut_mem_iff)"], ["", "lemma\n  cut_less_bound:    \"n \\<in> I \\<down>< t \\<Longrightarrow> n < t\" and\n  cut_le_bound:      \"n \\<in> I \\<down>\\<le> t \\<Longrightarrow> n \\<le> t\" and\n  cut_greater_bound: \"n \\<in> i \\<down>> t \\<Longrightarrow> t < n\" and\n  cut_ge_bound:      \"n \\<in> i \\<down>\\<ge> t \\<Longrightarrow> t \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n \\<in> I \\<down>< t \\<Longrightarrow> n < t) &&&\n     (n \\<in> I \\<down>\\<le> t \\<Longrightarrow> n \\<le> t)) &&&\n    (n \\<in> i \\<down>> t \\<Longrightarrow> t < n) &&&\n    (n \\<in> i \\<down>\\<ge> t \\<Longrightarrow> t \\<le> n)", "unfolding i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n \\<in> {x \\<in> I. x < t} \\<Longrightarrow> n < t) &&&\n     (n \\<in> {x \\<in> I. x \\<le> t} \\<Longrightarrow> n \\<le> t)) &&&\n    (n \\<in> {x \\<in> i. t < x} \\<Longrightarrow> t < n) &&&\n    (n \\<in> {x \\<in> i. t \\<le> x} \\<Longrightarrow> t \\<le> n)", "by simp_all"], ["", "lemmas i_cut_bound =\n  cut_less_bound cut_le_bound\n  cut_greater_bound cut_ge_bound"], ["", "lemma\n  cut_le_Int_conv: \"I \\<down>\\<le> t = I \\<inter> {..t}\" and\n  cut_less_Int_conv: \"I \\<down>< t = I \\<inter> {..<t}\" and\n  cut_ge_Int_conv: \"I \\<down>\\<ge> t = I \\<inter> {t..}\" and\n  cut_greater_Int_conv: \"I \\<down>> t = I \\<inter> {t<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<down>\\<le> t = I \\<inter> {..t} &&&\n     I \\<down>< t = I \\<inter> {..<t}) &&&\n    I \\<down>\\<ge> t = I \\<inter> {t..} &&& I \\<down>> t = I \\<inter> {t<..}", "unfolding i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x \\<in> I. x \\<le> t} = I \\<inter> {..t} &&&\n     {x \\<in> I. x < t} = I \\<inter> {..<t}) &&&\n    {x \\<in> I. t \\<le> x} = I \\<inter> {t..} &&&\n    {x \\<in> I. t < x} = I \\<inter> {t<..}", "by blast+"], ["", "lemmas i_cut_Int_conv =\n  cut_le_Int_conv cut_less_Int_conv\n  cut_ge_Int_conv cut_greater_Int_conv"], ["", "lemma\n  cut_le_Diff_conv: \"I \\<down>\\<le> t = I - {t<..}\" and\n  cut_less_Diff_conv: \"I \\<down>< t = I - {t..}\" and\n  cut_ge_Diff_conv: \"I \\<down>\\<ge> t = I - {..<t}\" and\n  cut_greater_Diff_conv: \"I \\<down>> t = I - {..t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<down>\\<le> t = I - {t<..} &&& I \\<down>< t = I - {t..}) &&&\n    I \\<down>\\<ge> t = I - {..<t} &&& I \\<down>> t = I - {..t}", "by (fastforce simp: i_cut_defs)+"], ["", "lemmas i_cut_Diff_conv =\n  cut_le_Diff_conv cut_less_Diff_conv\n  cut_ge_Diff_conv cut_greater_Diff_conv"], ["", "subsubsection \\<open>Basic results for cut operators\\<close>"], ["", "lemma\n  cut_less_eq_set_restriction_fun':    \"(\\<lambda>I. I \\<down>< t) = set_restriction_fun (\\<lambda>x. x < t)\" and\n  cut_le_eq_set_restriction_fun':      \"(\\<lambda>I. I \\<down>\\<le> t) = set_restriction_fun (\\<lambda>x. x \\<le> t)\" and\n  cut_greater_eq_set_restriction_fun': \"(\\<lambda>I. I \\<down>> t) = set_restriction_fun (\\<lambda>x. x > t)\" and\n  cut_ge_eq_set_restriction_fun':      \"(\\<lambda>I. I \\<down>\\<ge> t) = set_restriction_fun (\\<lambda>x. x \\<ge> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>I. I \\<down>< t) =\n     set_restriction_fun (\\<lambda>x. x < t) &&&\n     (\\<lambda>I. I \\<down>\\<le> t) =\n     set_restriction_fun (\\<lambda>x. x \\<le> t)) &&&\n    (\\<lambda>I. I \\<down>> t) = set_restriction_fun ((<) t) &&&\n    (\\<lambda>I. I \\<down>\\<ge> t) = set_restriction_fun ((\\<le>) t)", "unfolding set_restriction_fun_def i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>I. {x \\<in> I. x < t}) = (\\<lambda>A. {x \\<in> A. x < t}) &&&\n     (\\<lambda>I. {x \\<in> I. x \\<le> t}) =\n     (\\<lambda>A. {x \\<in> A. x \\<le> t})) &&&\n    (\\<lambda>I. {x \\<in> I. t < x}) = (\\<lambda>A. {x \\<in> A. t < x}) &&&\n    (\\<lambda>I. {x \\<in> I. t \\<le> x}) =\n    (\\<lambda>A. {x \\<in> A. t \\<le> x})", "by blast+"], ["", "lemmas i_cut_eq_set_restriction_fun' =\n  cut_less_eq_set_restriction_fun' cut_le_eq_set_restriction_fun'\n  cut_greater_eq_set_restriction_fun' cut_ge_eq_set_restriction_fun'"], ["", "lemma\n  cut_less_eq_set_restriction_fun:    \"I \\<down>< t = set_restriction_fun (\\<lambda>x. x < t) I\" and\n  cut_le_eq_set_restriction_fun:      \"I \\<down>\\<le> t = set_restriction_fun (\\<lambda>x. x \\<le> t) I\" and\n  cut_greater_eq_set_restriction_fun: \"I \\<down>> t = set_restriction_fun (\\<lambda>x. x > t) I\" and\n  cut_ge_eq_set_restriction_fun:      \"I \\<down>\\<ge> t = set_restriction_fun (\\<lambda>x. x \\<ge> t) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<down>< t = set_restriction_fun (\\<lambda>x. x < t) I &&&\n     I \\<down>\\<le> t = set_restriction_fun (\\<lambda>x. x \\<le> t) I) &&&\n    I \\<down>> t = set_restriction_fun ((<) t) I &&&\n    I \\<down>\\<ge> t = set_restriction_fun ((\\<le>) t) I", "by (simp_all only: i_cut_eq_set_restriction_fun'[symmetric])"], ["", "lemmas i_cut_eq_set_restriction_fun =\n  cut_less_eq_set_restriction_fun cut_le_eq_set_restriction_fun\n  cut_greater_eq_set_restriction_fun cut_ge_eq_set_restriction_fun"], ["", "lemma i_cut_set_restriction_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>);\n    f = (\\<lambda>I. cut_op I t)  \\<rbrakk> \\<Longrightarrow> set_restriction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cut_op = (\\<down><) \\<or>\n             cut_op = (\\<down>\\<le>) \\<or>\n             cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>);\n     f = (\\<lambda>I. cut_op I t)\\<rbrakk>\n    \\<Longrightarrow> set_restriction f", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f = (\\<lambda>I. I \\<down>< t); cut_op = (\\<down><)\\<rbrakk>\n    \\<Longrightarrow> set_restriction (\\<lambda>I. I \\<down>< t)\n 2. \\<lbrakk>f = (\\<lambda>I. I \\<down>\\<le> t);\n     cut_op = (\\<down>\\<le>)\\<rbrakk>\n    \\<Longrightarrow> set_restriction (\\<lambda>I. I \\<down>\\<le> t)\n 3. \\<lbrakk>f = (\\<lambda>I. I \\<down>> t); cut_op = (\\<down>>)\\<rbrakk>\n    \\<Longrightarrow> set_restriction (\\<lambda>I. I \\<down>> t)\n 4. \\<lbrakk>f = (\\<lambda>I. I \\<down>\\<ge> t);\n     cut_op = (\\<down>\\<ge>)\\<rbrakk>\n    \\<Longrightarrow> set_restriction (\\<lambda>I. I \\<down>\\<ge> t)", "apply (simp_all only: i_cut_eq_set_restriction_fun set_restriction_fun_is_set_restriction)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary\n  i_cut_less_set_restriction:    \"set_restriction (\\<lambda>I. I \\<down>< t)\" and\n  i_cut_le_set_restriction:      \"set_restriction (\\<lambda>I. I \\<down>\\<le> t)\" and\n  i_cut_greater_set_restriction: \"set_restriction (\\<lambda>I. I \\<down>> t)\" and\n  i_cut_ge_set_restriction:      \"set_restriction (\\<lambda>I. I \\<down>\\<ge> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_restriction (\\<lambda>I. I \\<down>< t) &&&\n     set_restriction (\\<lambda>I. I \\<down>\\<le> t)) &&&\n    set_restriction (\\<lambda>I. I \\<down>> t) &&&\n    set_restriction (\\<lambda>I. I \\<down>\\<ge> t)", "by (simp_all only: i_cut_eq_set_restriction_fun set_restriction_fun_is_set_restriction)"], ["", "lemmas i_cut_set_restriction =\n  i_cut_le_set_restriction i_cut_less_set_restriction\n  i_cut_ge_set_restriction i_cut_greater_set_restriction"], ["", "lemma i_cut_commute_disj: \"\\<lbrakk>\n  cut_op1 = (\\<down><) \\<or> cut_op1 = (\\<down>\\<le>) \\<or>\n  cut_op1 = (\\<down>>) \\<or> cut_op1 = (\\<down>\\<ge>);\n  cut_op2 = (\\<down><) \\<or> cut_op2 = (\\<down>\\<le>) \\<or>\n  cut_op2 = (\\<down>>) \\<or> cut_op2 = (\\<down>\\<ge>) \\<rbrakk> \\<Longrightarrow>\n  cut_op2 (cut_op1 I t1) t2 = cut_op1 (cut_op2 I t2) t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cut_op1 = (\\<down><) \\<or>\n             cut_op1 = (\\<down>\\<le>) \\<or>\n             cut_op1 = (\\<down>>) \\<or> cut_op1 = (\\<down>\\<ge>);\n     cut_op2 = (\\<down><) \\<or>\n     cut_op2 = (\\<down>\\<le>) \\<or>\n     cut_op2 = (\\<down>>) \\<or> cut_op2 = (\\<down>\\<ge>)\\<rbrakk>\n    \\<Longrightarrow> cut_op2 (cut_op1 I t1) t2 = cut_op1 (cut_op2 I t2) t1", "apply (rule set_restriction_commute)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>cut_op1 = (\\<down><) \\<or>\n             cut_op1 = (\\<down>\\<le>) \\<or>\n             cut_op1 = (\\<down>>) \\<or> cut_op1 = (\\<down>\\<ge>);\n     cut_op2 = (\\<down><) \\<or>\n     cut_op2 = (\\<down>\\<le>) \\<or>\n     cut_op2 = (\\<down>>) \\<or> cut_op2 = (\\<down>\\<ge>)\\<rbrakk>\n    \\<Longrightarrow> set_restriction (\\<lambda>a. cut_op2 a t2)\n 2. \\<lbrakk>cut_op1 = (\\<down><) \\<or>\n             cut_op1 = (\\<down>\\<le>) \\<or>\n             cut_op1 = (\\<down>>) \\<or> cut_op1 = (\\<down>\\<ge>);\n     cut_op2 = (\\<down><) \\<or>\n     cut_op2 = (\\<down>\\<le>) \\<or>\n     cut_op2 = (\\<down>>) \\<or> cut_op2 = (\\<down>\\<ge>)\\<rbrakk>\n    \\<Longrightarrow> set_restriction (\\<lambda>a. cut_op1 a t1)", "apply (simp_all only: i_cut_set_restriction_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  cut_less_empty:    \"{} \\<down>< t = {}\" and\n  cut_le_empty:      \"{} \\<down>\\<le> t = {}\" and\n  cut_greater_empty: \"{} \\<down>> t = {}\" and\n  cut_ge_empty:      \"{} \\<down>\\<ge> t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<down>< t = {} &&& {} \\<down>\\<le> t = {}) &&&\n    {} \\<down>> t = {} &&& {} \\<down>\\<ge> t = {}", "by blast+"], ["", "lemmas i_cut_empty =\n  cut_less_empty cut_le_empty\n  cut_greater_empty cut_ge_empty"], ["", "lemma\n  cut_less_not_empty_imp:    \"I \\<down>< t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\" and\n  cut_le_not_empty_imp:      \"I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\" and\n  cut_greater_not_empty_imp: \"I \\<down>> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\" and\n  cut_ge_not_empty_imp:      \"I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((I \\<down>< t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}) &&&\n     (I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {})) &&&\n    (I \\<down>> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {}) &&&\n    (I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> I \\<noteq> {})", "by blast+"], ["", "lemma\n  cut_less_singleton:    \"{a} \\<down>< t = (if a < t then {a} else {})\" and\n  cut_le_singleton:      \"{a} \\<down>\\<le> t = (if a \\<le> t then {a} else {})\" and\n  cut_greater_singleton: \"{a} \\<down>> t = (if a > t then {a} else {})\" and\n  cut_ge_singleton:      \"{a} \\<down>\\<ge> t = (if a \\<ge> t then {a} else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({a} \\<down>< t = (if a < t then {a} else {}) &&&\n     {a} \\<down>\\<le> t = (if a \\<le> t then {a} else {})) &&&\n    {a} \\<down>> t = (if t < a then {a} else {}) &&&\n    {a} \\<down>\\<ge> t = (if t \\<le> a then {a} else {})", "by (rule i_cut_eq_set_restriction_fun[THEN ssubst], simp only: set_restriction_fun_singleton)+"], ["", "lemmas i_cut_singleton =\n  cut_le_singleton cut_less_singleton\n  cut_ge_singleton cut_greater_singleton"], ["", "lemma\n  cut_less_subset:    \"I \\<down>< t \\<subseteq> I\" and\n  cut_le_subset:      \"I \\<down>\\<le> t \\<subseteq> I\" and\n  cut_greater_subset: \"I \\<down>> t \\<subseteq> I\" and\n  cut_ge_subset:      \"I \\<down>\\<ge> t \\<subseteq> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<down>< t \\<subseteq> I &&& I \\<down>\\<le> t \\<subseteq> I) &&&\n    I \\<down>> t \\<subseteq> I &&& I \\<down>\\<ge> t \\<subseteq> I", "by (simp_all only: i_cut_set_restriction[THEN set_restriction_subset])"], ["", "lemmas i_cut_subset =\n  cut_less_subset cut_le_subset\n  cut_greater_subset cut_ge_subset"], ["", "lemma i_cut_Un_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (A \\<union> B) t = cut_op A t \\<union> cut_op B t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_op = (\\<down><) \\<or>\n    cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<Longrightarrow>\n    cut_op (A \\<union> B) t = cut_op A t \\<union> cut_op B t", "apply (drule i_cut_set_restriction_disj[where f=\"\\<lambda>I. cut_op I t\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction (\\<lambda>I. cut_op I t) \\<Longrightarrow>\n    cut_op (A \\<union> B) t = cut_op A t \\<union> cut_op B t", "by (rule set_restriction_Un)"], ["", "corollary\n  cut_less_Un:    \"(A \\<union> B) \\<down>< t = A \\<down>< t \\<union> B \\<down>< t\" and\n  cut_le_Un:      \"(A \\<union> B) \\<down>\\<le> t = A \\<down>\\<le> t \\<union> B \\<down>\\<le> t\" and\n  cut_greater_Un: \"(A \\<union> B) \\<down>> t = A \\<down>> t \\<union> B \\<down>> t\" and\n  cut_ge_Un:      \"(A \\<union> B) \\<down>\\<ge> t = A \\<down>\\<ge> t \\<union> B \\<down>\\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A \\<union> B) \\<down>< t = A \\<down>< t \\<union> B \\<down>< t &&&\n     (A \\<union> B) \\<down>\\<le> t =\n     A \\<down>\\<le> t \\<union> B \\<down>\\<le> t) &&&\n    (A \\<union> B) \\<down>> t = A \\<down>> t \\<union> B \\<down>> t &&&\n    (A \\<union> B) \\<down>\\<ge> t =\n    A \\<down>\\<ge> t \\<union> B \\<down>\\<ge> t", "by (rule i_cut_Un_disj, blast)+"], ["", "lemmas i_cut_Un =\n  cut_less_Un cut_le_Un\n  cut_greater_Un cut_ge_Un"], ["", "lemma i_cut_Int_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (A \\<inter> B) t = cut_op A t \\<inter> cut_op B t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_op = (\\<down><) \\<or>\n    cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<Longrightarrow>\n    cut_op (A \\<inter> B) t = cut_op A t \\<inter> cut_op B t", "apply (drule i_cut_set_restriction_disj[where f=\"\\<lambda>I. cut_op I t\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction (\\<lambda>I. cut_op I t) \\<Longrightarrow>\n    cut_op (A \\<inter> B) t = cut_op A t \\<inter> cut_op B t", "by (rule set_restriction_Int)"], ["", "lemma\n  cut_less_Int:    \"(A \\<inter> B) \\<down>< t = A \\<down>< t \\<inter> B \\<down>< t\" and\n  cut_le_Int:      \"(A \\<inter> B) \\<down>\\<le> t = A \\<down>\\<le> t \\<inter> B \\<down>\\<le> t\" and\n  cut_greater_Int: \"(A \\<inter> B) \\<down>> t = A \\<down>> t \\<inter> B \\<down>> t\" and\n  cut_ge_Int:      \"(A \\<inter> B) \\<down>\\<ge> t = A \\<down>\\<ge> t \\<inter> B \\<down>\\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A \\<inter> B) \\<down>< t = A \\<down>< t \\<inter> B \\<down>< t &&&\n     (A \\<inter> B) \\<down>\\<le> t =\n     A \\<down>\\<le> t \\<inter> B \\<down>\\<le> t) &&&\n    (A \\<inter> B) \\<down>> t = A \\<down>> t \\<inter> B \\<down>> t &&&\n    (A \\<inter> B) \\<down>\\<ge> t =\n    A \\<down>\\<ge> t \\<inter> B \\<down>\\<ge> t", "by blast+"], ["", "lemmas i_cut_Int =\n  cut_less_Int cut_le_Int\n  cut_greater_Int cut_ge_Int"], ["", "lemma\n  cut_less_Int_left:    \"(A \\<inter> B) \\<down>< t = A \\<down>< t \\<inter> B\" and\n  cut_le_Int_left:      \"(A \\<inter> B) \\<down>\\<le> t = A \\<down>\\<le> t \\<inter> B\" and\n  cut_greater_Int_left: \"(A \\<inter> B) \\<down>> t = A \\<down>> t \\<inter> B\" and\n  cut_ge_Int_left:      \"(A \\<inter> B) \\<down>\\<ge> t = A \\<down>\\<ge> t \\<inter> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A \\<inter> B) \\<down>< t = A \\<down>< t \\<inter> B &&&\n     (A \\<inter> B) \\<down>\\<le> t = A \\<down>\\<le> t \\<inter> B) &&&\n    (A \\<inter> B) \\<down>> t = A \\<down>> t \\<inter> B &&&\n    (A \\<inter> B) \\<down>\\<ge> t = A \\<down>\\<ge> t \\<inter> B", "by blast+"], ["", "lemmas i_cut_Int_left =\n  cut_less_Int_left cut_le_Int_left\n  cut_greater_Int_left cut_ge_Int_left"], ["", "lemma\n  cut_less_Int_right:    \"(A \\<inter> B) \\<down>< t = A \\<inter> B \\<down>< t\" and\n  cut_le_Int_right:      \"(A \\<inter> B) \\<down>\\<le> t = A \\<inter> B \\<down>\\<le> t\" and\n  cut_greater_Int_right: \"(A \\<inter> B) \\<down>> t = A \\<inter> B \\<down>> t\" and\n  cut_ge_Int_right:      \"(A \\<inter> B) \\<down>\\<ge> t = A \\<inter> B \\<down>\\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A \\<inter> B) \\<down>< t = A \\<inter> B \\<down>< t &&&\n     (A \\<inter> B) \\<down>\\<le> t = A \\<inter> B \\<down>\\<le> t) &&&\n    (A \\<inter> B) \\<down>> t = A \\<inter> B \\<down>> t &&&\n    (A \\<inter> B) \\<down>\\<ge> t = A \\<inter> B \\<down>\\<ge> t", "by blast+"], ["", "lemmas i_cut_Int_right =\n  cut_less_Int_right cut_le_Int_right\n  cut_greater_Int_right cut_ge_Int_right"], ["", "lemma i_cut_Diff_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (A - B) t = cut_op A t - cut_op B t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_op = (\\<down><) \\<or>\n    cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<Longrightarrow>\n    cut_op (A - B) t = cut_op A t - cut_op B t", "apply (drule i_cut_set_restriction_disj[where f=\"\\<lambda>I. cut_op I t\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction (\\<lambda>I. cut_op I t) \\<Longrightarrow>\n    cut_op (A - B) t = cut_op A t - cut_op B t", "by (rule set_restriction_Diff)"], ["", "corollary\n  cut_less_Diff:    \"(A - B) \\<down>< t = A \\<down>< t - B \\<down>< t\" and\n  cut_le_Diff:      \"(A - B) \\<down>\\<le> t = A \\<down>\\<le> t - B \\<down>\\<le> t\" and\n  cut_greater_Diff: \"(A - B) \\<down>> t = A \\<down>> t - B \\<down>> t\" and\n  cut_ge_Diff:      \"(A - B) \\<down>\\<ge> t = A \\<down>\\<ge> t - B \\<down>\\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A - B) \\<down>< t = A \\<down>< t - B \\<down>< t &&&\n     (A - B) \\<down>\\<le> t = A \\<down>\\<le> t - B \\<down>\\<le> t) &&&\n    (A - B) \\<down>> t = A \\<down>> t - B \\<down>> t &&&\n    (A - B) \\<down>\\<ge> t = A \\<down>\\<ge> t - B \\<down>\\<ge> t", "by (rule i_cut_Diff_disj, blast)+"], ["", "lemmas i_cut_Diff =\n  cut_less_Diff cut_le_Diff\n  cut_greater_Diff cut_ge_Diff"], ["", "lemma i_cut_subset_mono_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>); A \\<subseteq> B \\<rbrakk>\n  \\<Longrightarrow> cut_op A t \\<subseteq> cut_op B t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cut_op = (\\<down><) \\<or>\n             cut_op = (\\<down>\\<le>) \\<or>\n             cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>);\n     A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> cut_op A t \\<subseteq> cut_op B t", "apply (drule i_cut_set_restriction_disj[where f=\"\\<lambda>I. cut_op I t\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B;\n     set_restriction (\\<lambda>I. cut_op I t)\\<rbrakk>\n    \\<Longrightarrow> cut_op A t \\<subseteq> cut_op B t", "by (rule set_restriction_mono[where f=\"\\<lambda>I. cut_op I t\"])"], ["", "corollary\n  cut_less_subset_mono:    \"A \\<subseteq> B \\<Longrightarrow> A \\<down>< t \\<subseteq> B \\<down>< t\" and\n  cut_le_subset_mono:      \"A \\<subseteq> B \\<Longrightarrow> A \\<down>\\<le> t \\<subseteq> B \\<down>\\<le> t\" and\n  cut_greater_subset_mono: \"A \\<subseteq> B \\<Longrightarrow> A \\<down>> t \\<subseteq> B \\<down>> t\" and\n  cut_ge_subset_mono:      \"A \\<subseteq> B \\<Longrightarrow> A \\<down>\\<ge> t \\<subseteq> B \\<down>\\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A \\<subseteq> B \\<Longrightarrow>\n      A \\<down>< t \\<subseteq> B \\<down>< t) &&&\n     (A \\<subseteq> B \\<Longrightarrow>\n      A \\<down>\\<le> t \\<subseteq> B \\<down>\\<le> t)) &&&\n    (A \\<subseteq> B \\<Longrightarrow>\n     A \\<down>> t \\<subseteq> B \\<down>> t) &&&\n    (A \\<subseteq> B \\<Longrightarrow>\n     A \\<down>\\<ge> t \\<subseteq> B \\<down>\\<ge> t)", "by (rule i_cut_subset_mono_disj[of _ A], simp+)+"], ["", "lemmas i_cut_subset_mono =\n  cut_less_subset_mono cut_le_subset_mono\n  cut_greater_subset_mono cut_ge_subset_mono"], ["", "lemma\n  cut_less_mono:    \"t \\<le> t' \\<Longrightarrow> I \\<down>< t \\<subseteq> I \\<down>< t'\" and\n  cut_greater_mono: \"t' \\<le> t \\<Longrightarrow> I \\<down>> t \\<subseteq> I \\<down>> t'\" and\n  cut_le_mono:      \"t \\<le> t' \\<Longrightarrow> I \\<down>\\<le> t \\<subseteq> I \\<down>\\<le> t'\" and\n  cut_ge_mono:      \"t' \\<le> t \\<Longrightarrow> I \\<down>\\<ge> t \\<subseteq> I \\<down>\\<ge> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((t \\<le> t' \\<Longrightarrow>\n      I \\<down>< t \\<subseteq> I \\<down>< t') &&&\n     (t' \\<le> t \\<Longrightarrow>\n      I \\<down>> t \\<subseteq> I \\<down>> t')) &&&\n    (t \\<le> t' \\<Longrightarrow>\n     I \\<down>\\<le> t \\<subseteq> I \\<down>\\<le> t') &&&\n    (t' \\<le> t \\<Longrightarrow>\n     I \\<down>\\<ge> t \\<subseteq> I \\<down>\\<ge> t')", "by (unfold i_cut_defs, safe, simp_all)"], ["", "lemmas i_cut_mono =\n  cut_le_mono cut_less_mono\n  cut_ge_mono cut_greater_mono"], ["", "lemma\n  cut_cut_le: \"i \\<down>\\<le> a \\<down>\\<le> b = i \\<down>\\<le> min a b\" and\n  cut_cut_less: \"i \\<down>< a \\<down>< b = i \\<down>< min a b\" and\n  cut_cut_ge: \"i \\<down>\\<ge> a \\<down>\\<ge> b = i \\<down>\\<ge> max a b\" and\n  cut_cut_greater: \"i \\<down>> a \\<down>> b = i \\<down>> max a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i \\<down>\\<le> a \\<down>\\<le> b = i \\<down>\\<le> min a b &&&\n     i \\<down>< a \\<down>< b = i \\<down>< min a b) &&&\n    i \\<down>\\<ge> a \\<down>\\<ge> b = i \\<down>\\<ge> max a b &&&\n    i \\<down>> a \\<down>> b = i \\<down>> max a b", "unfolding i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x \\<in> {x \\<in> i. x \\<le> a}. x \\<le> b} =\n     {x \\<in> i. x \\<le> min a b} &&&\n     {x \\<in> {x \\<in> i. x < a}. x < b} = {x \\<in> i. x < min a b}) &&&\n    {x \\<in> {x \\<in> i. a \\<le> x}. b \\<le> x} =\n    {x \\<in> i. max a b \\<le> x} &&&\n    {x \\<in> {x \\<in> i. a < x}. b < x} = {x \\<in> i. max a b < x}", "by simp_all"], ["", "lemmas i_cut_cut =\n  cut_cut_le cut_cut_less\n  cut_cut_ge cut_cut_greater"], ["", "lemma i_cut_absorb_disj: \"\n  \\<lbrakk> cut_op = (\\<down><) \\<or> cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<rbrakk>\n  \\<Longrightarrow> cut_op (cut_op I t) t = cut_op I t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cut_op = (\\<down><) \\<or>\n    cut_op = (\\<down>\\<le>) \\<or>\n    cut_op = (\\<down>>) \\<or> cut_op = (\\<down>\\<ge>) \\<Longrightarrow>\n    cut_op (cut_op I t) t = cut_op I t", "apply (drule i_cut_set_restriction_disj[where f=\"\\<lambda>I. cut_op I t\"], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_restriction (\\<lambda>I. cut_op I t) \\<Longrightarrow>\n    cut_op (cut_op I t) t = cut_op I t", "apply (blast dest: set_restriction_absorb)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary\n  cut_le_absorb:      \"I \\<down>\\<le> t \\<down>\\<le> t = I \\<down>\\<le> t\" and\n  cut_less_absorb:    \"I \\<down>< t \\<down>< t = I \\<down>< t\" and\n  cut_ge_absorb:      \"I \\<down>\\<ge> t \\<down>\\<ge> t = I \\<down>\\<ge> t\" and\n  cut_greater_absorb: \"I \\<down>> t \\<down>> t = I \\<down>> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<down>\\<le> t \\<down>\\<le> t = I \\<down>\\<le> t &&&\n     I \\<down>< t \\<down>< t = I \\<down>< t) &&&\n    I \\<down>\\<ge> t \\<down>\\<ge> t = I \\<down>\\<ge> t &&&\n    I \\<down>> t \\<down>> t = I \\<down>> t", "by (rule i_cut_absorb_disj, blast)+"], ["", "lemmas i_cut_absorb =\n  cut_le_absorb cut_less_absorb\n  cut_ge_absorb cut_greater_absorb"], ["", "lemma\n  cut_less_0_empty: \"I \\<down>< (0::nat) = {}\" and\n  cut_ge_0_all:     \"I \\<down>\\<ge> (0::nat) = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>< 0 = {} &&& I \\<down>\\<ge> 0 = I", "unfolding i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> I. x < 0} = {} &&& {x \\<in> I. 0 \\<le> x} = I", "by blast+"], ["", "lemma\n  cut_le_all_iff:      \"(I \\<down>\\<le> t = I) = (\\<forall>x\\<in>I. x \\<le> t)\" and\n  cut_less_all_iff:    \"(I \\<down>< t = I) = (\\<forall>x\\<in>I. x < t)\" and\n  cut_ge_all_iff:      \"(I \\<down>\\<ge> t = I) = (\\<forall>x\\<in>I. x \\<ge> t)\" and\n  cut_greater_all_iff: \"(I \\<down>> t = I) = (\\<forall>x\\<in>I. x > t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((I \\<down>\\<le> t = I) = (\\<forall>x\\<in>I. x \\<le> t) &&&\n     (I \\<down>< t = I) = (\\<forall>x\\<in>I. x < t)) &&&\n    (I \\<down>\\<ge> t = I) = (\\<forall>x\\<in>I. t \\<le> x) &&&\n    (I \\<down>> t = I) = (\\<forall>x\\<in>I. t < x)", "by blast+"], ["", "lemmas i_cut_all_iff =\n  cut_le_all_iff cut_less_all_iff\n  cut_ge_all_iff cut_greater_all_iff"], ["", "lemma\n  cut_le_empty_iff:      \"(I \\<down>\\<le> t = {}) = (\\<forall>x\\<in>I. t < x)\" and\n  cut_less_empty_iff:    \"(I \\<down>< t = {}) = (\\<forall>x\\<in>I. t \\<le> x)\" and\n  cut_ge_empty_iff:      \"(I \\<down>\\<ge> t = {}) = (\\<forall>x\\<in>I. x < t)\" and\n  cut_greater_empty_iff: \"(I \\<down>> t = {}) = (\\<forall>x\\<in>I. x \\<le> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((I \\<down>\\<le> t = {}) = (\\<forall>x\\<in>I. t < x) &&&\n     (I \\<down>< t = {}) = (\\<forall>x\\<in>I. t \\<le> x)) &&&\n    (I \\<down>\\<ge> t = {}) = (\\<forall>x\\<in>I. x < t) &&&\n    (I \\<down>> t = {}) = (\\<forall>x\\<in>I. x \\<le> t)", "unfolding i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (({x \\<in> I. x \\<le> t} = {}) = (\\<forall>x\\<in>I. t < x) &&&\n     ({x \\<in> I. x < t} = {}) = (\\<forall>x\\<in>I. t \\<le> x)) &&&\n    ({x \\<in> I. t \\<le> x} = {}) = (\\<forall>x\\<in>I. x < t) &&&\n    ({x \\<in> I. t < x} = {}) = (\\<forall>x\\<in>I. x \\<le> t)", "by fastforce+"], ["", "lemmas i_cut_empty_iff =\n  cut_le_empty_iff cut_less_empty_iff\n  cut_ge_empty_iff cut_greater_empty_iff"], ["", "lemma\n  cut_le_not_empty_iff:      \"(I \\<down>\\<le> t \\<noteq> {}) = (\\<exists>x\\<in>I. x \\<le> t)\" and\n  cut_less_not_empty_iff:    \"(I \\<down>< t \\<noteq> {}) = (\\<exists>x\\<in>I. x < t)\" and\n  cut_ge_not_empty_iff:      \"(I \\<down>\\<ge> t \\<noteq> {}) = (\\<exists>x\\<in>I. t \\<le> x)\" and\n  cut_greater_not_empty_iff: \"(I \\<down>> t \\<noteq> {}) = (\\<exists>x\\<in>I. t < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((I \\<down>\\<le> t \\<noteq> {}) = (\\<exists>x\\<in>I. x \\<le> t) &&&\n     (I \\<down>< t \\<noteq> {}) = (\\<exists>x\\<in>I. x < t)) &&&\n    (I \\<down>\\<ge> t \\<noteq> {}) = (\\<exists>x\\<in>I. t \\<le> x) &&&\n    (I \\<down>> t \\<noteq> {}) = (\\<exists>x\\<in>I. t < x)", "unfolding i_cut_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (({x \\<in> I. x \\<le> t} \\<noteq> {}) =\n     (\\<exists>x\\<in>I. x \\<le> t) &&&\n     ({x \\<in> I. x < t} \\<noteq> {}) = (\\<exists>x\\<in>I. x < t)) &&&\n    ({x \\<in> I. t \\<le> x} \\<noteq> {}) = (\\<exists>x\\<in>I. t \\<le> x) &&&\n    ({x \\<in> I. t < x} \\<noteq> {}) = (\\<exists>x\\<in>I. t < x)", "by blast+"], ["", "lemmas i_cut_not_empty_iff =\n  cut_le_not_empty_iff cut_less_not_empty_iff\n  cut_ge_not_empty_iff cut_greater_not_empty_iff"], ["", "lemma nat_cut_ge_infinite_not_empty: \"infinite I \\<Longrightarrow> I \\<down>\\<ge> (t::nat) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> I \\<down>\\<ge> t \\<noteq> {}", "by (drule infinite_nat_iff_unbounded_le[THEN iffD1], blast)"], ["", "lemma nat_cut_greater_infinite_not_empty: \"infinite I \\<Longrightarrow> I \\<down>> (t::nat) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> I \\<down>> t \\<noteq> {}", "by (drule infinite_nat_iff_unbounded[THEN iffD1], blast)"], ["", "corollary\n  cut_le_not_in_imp:      \"x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>\\<le> t\" and\n  cut_less_not_in_imp:    \"x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>< t\" and\n  cut_ge_not_in_imp:      \"x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>\\<ge> t\" and\n  cut_greater_not_in_imp: \"x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>\\<le> t) &&&\n     (x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>< t)) &&&\n    (x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>\\<ge> t) &&&\n    (x \\<notin> I \\<Longrightarrow> x \\<notin> I \\<down>> t)", "by (rule i_cut_set_restriction[THEN set_restriction_not_in_imp], assumption)+"], ["", "lemmas i_cut_not_in_imp =\n  cut_le_not_in_imp cut_less_not_in_imp\n  cut_ge_not_in_imp cut_greater_not_in_imp"], ["", "corollary\n  cut_le_in_imp:      \"x \\<in> I \\<down>\\<le> t \\<Longrightarrow> x \\<in> I\" and\n  cut_less_in_imp:    \"x \\<in> I \\<down>< t \\<Longrightarrow> x \\<in> I\" and\n  cut_ge_in_imp:      \"x \\<in> I \\<down>\\<ge> t \\<Longrightarrow> x \\<in> I\" and\n  cut_greater_in_imp: \"x \\<in> I \\<down>> t \\<Longrightarrow> x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<in> I \\<down>\\<le> t \\<Longrightarrow> x \\<in> I) &&&\n     (x \\<in> I \\<down>< t \\<Longrightarrow> x \\<in> I)) &&&\n    (x \\<in> I \\<down>\\<ge> t \\<Longrightarrow> x \\<in> I) &&&\n    (x \\<in> I \\<down>> t \\<Longrightarrow> x \\<in> I)", "by (rule i_cut_set_restriction[THEN set_restriction_in_imp], assumption)+"], ["", "lemmas i_cut_in_imp =\n  cut_le_in_imp cut_less_in_imp\n  cut_ge_in_imp cut_greater_in_imp"], ["", "lemma Collect_minI_cut: \"\\<lbrakk> k \\<in> I; P (k::('a::wellorder)) \\<rbrakk> \\<Longrightarrow> \\<exists>x\\<in>I. P x \\<and> (\\<forall>y\\<in>(I \\<down>< x). \\<not> P y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<in> I; P k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I.\n                         P x \\<and>\n                         (\\<forall>y\\<in>I \\<down>< x. \\<not> P y)", "by (drule Collect_minI, assumption, blast)"], ["", "corollary Collect_minI_ex_cut: \"\\<exists>k\\<in>I. P (k::('a::wellorder)) \\<Longrightarrow> \\<exists>x\\<in>I. P x \\<and> (\\<forall>y\\<in>(I \\<down>< x). \\<not> P y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>I. P k \\<Longrightarrow>\n    \\<exists>x\\<in>I. P x \\<and> (\\<forall>y\\<in>I \\<down>< x. \\<not> P y)", "by (drule Collect_minI_ex, blast)"], ["", "corollary Collect_minI_ex2_cut: \"{k\\<in>I. P (k::('a::wellorder))} \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>I. P x \\<and> (\\<forall>y\\<in>(I \\<down>< x). \\<not> P y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {k \\<in> I. P k} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>I. P x \\<and> (\\<forall>y\\<in>I \\<down>< x. \\<not> P y)", "by (drule Collect_minI_ex2, blast)"], ["", "lemma cut_le_cut_greater_ident: \"t2 \\<le> t1 \\<Longrightarrow> I \\<down>\\<le> t1 \\<union> I \\<down>> t2 = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t2 \\<le> t1 \\<Longrightarrow>\n    I \\<down>\\<le> t1 \\<union> I \\<down>> t2 = I", "by fastforce"], ["", "lemma cut_less_cut_ge_ident: \"t2 \\<le> t1 \\<Longrightarrow> I \\<down>< t1 \\<union> I \\<down>\\<ge> t2 = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t2 \\<le> t1 \\<Longrightarrow>\n    I \\<down>< t1 \\<union> I \\<down>\\<ge> t2 = I", "by fastforce"], ["", "lemma cut_le_cut_ge_ident: \"t2 \\<le> t1 \\<Longrightarrow> I \\<down>\\<le> t1 \\<union> I \\<down>\\<ge> t2 = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t2 \\<le> t1 \\<Longrightarrow>\n    I \\<down>\\<le> t1 \\<union> I \\<down>\\<ge> t2 = I", "by fastforce"], ["", "lemma cut_less_cut_greater_ident: \"\n  \\<lbrakk> t2 \\<le> t1; I \\<inter> {t1..t2} = {} \\<rbrakk> \\<Longrightarrow> I \\<down>< t1 \\<union> I \\<down>> t2 = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t2 \\<le> t1; I \\<inter> {t1..t2} = {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t1 \\<union> I \\<down>> t2 = I", "by fastforce"], ["", "corollary cut_less_cut_greater_ident': \"\n  t \\<notin> I \\<Longrightarrow> I \\<down>< t \\<union> I \\<down>> t = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<notin> I \\<Longrightarrow> I \\<down>< t \\<union> I \\<down>> t = I", "by (simp add: cut_less_cut_greater_ident)"], ["", "lemma insert_eq_cut_less_cut_greater: \"insert n I = I \\<down>< n \\<union> {n} \\<union> I \\<down>> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert n I = I \\<down>< n \\<union> {n} \\<union> I \\<down>> n", "by fastforce"], ["", "subsubsection \\<open>Relations between cut operators\\<close>"], ["", "lemma insert_Int_conv_if: \"A \\<inter> (insert x B) = (\n  if x \\<in> A then insert x (A \\<inter> B) else A \\<inter> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> insert x B =\n    (if x \\<in> A then insert x (A \\<inter> B) else A \\<inter> B)", "by simp"], ["", "lemma cut_le_less_conv_if: \"I \\<down>\\<le> t = (\n  if t \\<in> I then insert t (I \\<down>< t) else (I \\<down>< t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<le> t =\n    (if t \\<in> I then insert t (I \\<down>< t) else I \\<down>< t)", "by (simp add: i_cut_Int_conv lessThan_insert[symmetric] insert_Int_conv_if)"], ["", "lemma cut_le_less_conv: \"I \\<down>\\<le> t = ({t} \\<inter> I) \\<union> (I \\<down>< t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<le> t = {t} \\<inter> I \\<union> I \\<down>< t", "by fastforce"], ["", "lemma cut_less_le_conv: \"I \\<down>< t = (I \\<down>\\<le> t) - {t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>< t = I \\<down>\\<le> t - {t}", "by fastforce"], ["", "lemma cut_less_le_conv_if: \"I \\<down>< t = (\n  if t \\<in> I then (I \\<down>\\<le> t) - {t} else (I \\<down>\\<le> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>< t =\n    (if t \\<in> I then I \\<down>\\<le> t - {t} else I \\<down>\\<le> t)", "by (simp only: cut_less_le_conv, force)"], ["", "lemma cut_ge_greater_conv_if: \"I \\<down>\\<ge> t = (\n  if t \\<in> I then insert t (I \\<down>> t) else (I \\<down>> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<ge> t =\n    (if t \\<in> I then insert t (I \\<down>> t) else I \\<down>> t)", "by (simp add: i_cut_Int_conv greaterThan_insert[symmetric] insert_Int_conv_if)"], ["", "lemma cut_ge_greater_conv: \"I \\<down>\\<ge> t = ({t} \\<inter> I) \\<union> (I \\<down>> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<ge> t = {t} \\<inter> I \\<union> I \\<down>> t", "apply (simp only: cut_ge_greater_conv_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if t \\<in> I then insert t (I \\<down>> t) else I \\<down>> t) =\n    {t} \\<inter> I \\<union> I \\<down>> t", "apply (case_tac \"t \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. t \\<in> I \\<Longrightarrow>\n    (if t \\<in> I then insert t (I \\<down>> t) else I \\<down>> t) =\n    {t} \\<inter> I \\<union> I \\<down>> t\n 2. t \\<notin> I \\<Longrightarrow>\n    (if t \\<in> I then insert t (I \\<down>> t) else I \\<down>> t) =\n    {t} \\<inter> I \\<union> I \\<down>> t", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_greater_ge_conv: \"I \\<down>> t = (I \\<down>\\<ge> t) - {t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>> t = I \\<down>\\<ge> t - {t}", "by fastforce"], ["", "lemma cut_greater_ge_conv_if: \"I \\<down>> t = (\n  if t \\<in> I then (I \\<down>\\<ge> t) - {t} else (I \\<down>\\<ge> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>> t =\n    (if t \\<in> I then I \\<down>\\<ge> t - {t} else I \\<down>\\<ge> t)", "by (simp only: cut_greater_ge_conv, force)"], ["", "lemma nat_cut_le_less_conv: \"I \\<down>\\<le> t = I \\<down>< Suc t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<le> t = I \\<down>< Suc t", "by fastforce"], ["", "lemma nat_cut_less_le_conv: \"0 < t \\<Longrightarrow> I \\<down>< t = I \\<down>\\<le> (t - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t \\<Longrightarrow> I \\<down>< t = I \\<down>\\<le> (t - Suc 0)", "by fastforce"], ["", "lemma nat_cut_ge_greater_conv: \"I \\<down>\\<ge> Suc t = I \\<down>> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<ge> Suc t = I \\<down>> t", "by fastforce"], ["", "lemma nat_cut_greater_ge_conv: \"0 < t \\<Longrightarrow> I \\<down>> (t - Suc 0) = I \\<down>\\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t \\<Longrightarrow> I \\<down>> (t - Suc 0) = I \\<down>\\<ge> t", "by fastforce"], ["", "subsubsection \\<open>Function images with cut operators\\<close>"], ["", "lemma cut_less_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>< f n = f ` (I \\<down>< n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<down>< f n = f ` I \\<down>< n", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n        n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> (f ` I) \\<down>< f n) =\n                         (x \\<in> f ` I \\<down>< n)", "apply (simp add: image_iff Bex_def cut_less_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n        n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                          x < f n) =\n                         (\\<exists>xa.\n                             xa \\<in> I \\<and> xa < n \\<and> x = f xa)", "apply (unfold strict_mono_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                          x < f n) =\n                         (\\<exists>xa.\n                             xa \\<in> I \\<and> xa < n \\<and> x = f xa)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A;\n        (\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and> x < f n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> I \\<and> xa < n \\<and> x = f xa\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A;\n        \\<exists>xa. xa \\<in> I \\<and> xa < n \\<and> x = f xa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                         x < f n", "apply (metis not_less_iff_gr_or_eq rev_subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A;\n        \\<exists>xa. xa \\<in> I \\<and> xa < n \\<and> x = f xa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                         x < f n", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_le_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>\\<le> f n = f ` (I \\<down>\\<le> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<down>\\<le> f n = f ` I \\<down>\\<le> n", "apply (frule strict_mono_on_imp_inj_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A; n \\<in> A;\n     inj_on f A\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<down>\\<le> f n = f ` I \\<down>\\<le> n", "apply (clarsimp simp: cut_le_less_conv_if cut_less_image inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A; n \\<in> A;\n        \\<forall>x\\<in>A.\n           \\<forall>y\\<in>A. f x = f y \\<longrightarrow> x = y;\n        n \\<notin> I; f n = f x; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> insert (f x) (f ` I \\<down>< n) = f ` I \\<down>< n", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_greater_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>> f n = f ` (I \\<down>> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<down>> f n = f ` I \\<down>> n", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n        n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> (f ` I) \\<down>> f n) =\n                         (x \\<in> f ` I \\<down>> n)", "apply (simp add: image_iff Bex_def cut_greater_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n        n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                          f n < x) =\n                         (\\<exists>xa.\n                             xa \\<in> I \\<and> n < xa \\<and> x = f xa)", "apply (unfold strict_mono_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                          f n < x) =\n                         (\\<exists>xa.\n                             xa \\<in> I \\<and> n < xa \\<and> x = f xa)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A;\n        (\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and> f n < x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> I \\<and> n < xa \\<and> x = f xa\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A;\n        \\<exists>xa. xa \\<in> I \\<and> n < xa \\<and> x = f xa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                         f n < x", "apply (metis not_less_iff_gr_or_eq rev_subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A.\n                   \\<forall>b\\<in>A. a < b \\<longrightarrow> f a < f b;\n        I \\<subseteq> A; n \\<in> A;\n        \\<exists>xa. xa \\<in> I \\<and> n < xa \\<and> x = f xa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa. xa \\<in> I \\<and> x = f xa) \\<and>\n                         f n < x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_ge_image: \"\n  \\<lbrakk> strict_mono_on f A; I \\<subseteq> A; n \\<in> A \\<rbrakk> \\<Longrightarrow>\n  (f ` I) \\<down>\\<ge> f n = f ` (I \\<down>\\<ge> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<down>\\<ge> f n = f ` I \\<down>\\<ge> n", "apply (frule strict_mono_on_imp_inj_on)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A; n \\<in> A;\n     inj_on f A\\<rbrakk>\n    \\<Longrightarrow> (f ` I) \\<down>\\<ge> f n = f ` I \\<down>\\<ge> n", "apply (clarsimp simp: cut_ge_greater_conv_if cut_greater_image inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>SetInterval2.strict_mono_on f A; I \\<subseteq> A; n \\<in> A;\n        \\<forall>x\\<in>A.\n           \\<forall>y\\<in>A. f x = f y \\<longrightarrow> x = y;\n        n \\<notin> I; f n = f x; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> insert (f x) (f ` I \\<down>> n) = f ` I \\<down>> n", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas i_cut_image =\n  cut_le_image cut_less_image\n  cut_ge_image cut_greater_image"], ["", "subsubsection \\<open>Finiteness and cardinality with cut operators\\<close>"], ["", "lemma\n  cut_le_finite:      \"finite I \\<Longrightarrow> finite (I \\<down>\\<le> t)\" and\n  cut_less_finite:    \"finite I \\<Longrightarrow> finite (I \\<down>< t)\" and\n  cut_ge_finite:      \"finite I \\<Longrightarrow> finite (I \\<down>\\<ge> t)\" and\n  cut_greater_finite: \"finite I \\<Longrightarrow> finite (I \\<down>> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((finite I \\<Longrightarrow> finite (I \\<down>\\<le> t)) &&&\n     (finite I \\<Longrightarrow> finite (I \\<down>< t))) &&&\n    (finite I \\<Longrightarrow> finite (I \\<down>\\<ge> t)) &&&\n    (finite I \\<Longrightarrow> finite (I \\<down>> t))", "by (rule finite_subset[of _ I], rule i_cut_subset, assumption+)+"], ["", "lemma nat_cut_le_finite: \"finite (I \\<down>\\<le> (t::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (I \\<down>\\<le> t)", "by (fastforce simp: finite_nat_iff_bounded_le2 cut_le_def)"], ["", "lemma nat_cut_less_finite: \"finite (I \\<down>< (t::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (I \\<down>< t)", "by (fastforce simp: finite_nat_iff_bounded2 cut_less_def)"], ["", "lemma nat_cut_ge_finite_iff: \"finite (I \\<down>\\<ge> (t::nat)) = finite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (I \\<down>\\<ge> t) = finite I", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (I \\<down>\\<ge> t) \\<Longrightarrow> finite I\n 2. finite I \\<Longrightarrow> finite (I \\<down>\\<ge> t)", "apply (subst cut_less_cut_ge_ident[of t, OF order_refl, symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (I \\<down>\\<ge> t) \\<Longrightarrow>\n    finite (I \\<down>< t \\<union> I \\<down>\\<ge> t)\n 2. finite I \\<Longrightarrow> finite (I \\<down>\\<ge> t)", "apply (simp add: nat_cut_less_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> finite (I \\<down>\\<ge> t)", "apply (simp add: cut_ge_finite)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_cut_greater_finite_iff: \"finite (I \\<down>> (t::nat)) = finite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (I \\<down>> t) = finite I", "by (simp only: nat_cut_ge_greater_conv[symmetric] nat_cut_ge_finite_iff)"], ["", "lemma\n  cut_le_card:      \"finite I \\<Longrightarrow> card (I \\<down>\\<le> t) \\<le> card I\" and\n  cut_less_card:    \"finite I \\<Longrightarrow> card (I \\<down>< t) \\<le> card I\" and\n  cut_ge_card:      \"finite I \\<Longrightarrow> card (I \\<down>\\<ge> t) \\<le> card I\" and\n  cut_greater_card: \"finite I \\<Longrightarrow> card (I \\<down>> t) \\<le> card I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((finite I \\<Longrightarrow> card (I \\<down>\\<le> t) \\<le> card I) &&&\n     (finite I \\<Longrightarrow> card (I \\<down>< t) \\<le> card I)) &&&\n    (finite I \\<Longrightarrow> card (I \\<down>\\<ge> t) \\<le> card I) &&&\n    (finite I \\<Longrightarrow> card (I \\<down>> t) \\<le> card I)", "by (rule card_mono, assumption, rule i_cut_subset)+"], ["", "lemma nat_cut_greater_card: \"card (I \\<down>> (t::nat)) \\<le> card I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>> t) \\<le> card I", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite I \\<Longrightarrow> card (I \\<down>> t) \\<le> card I\n 2. infinite I \\<Longrightarrow> card (I \\<down>> t) \\<le> card I", "apply (simp add: cut_greater_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> card (I \\<down>> t) \\<le> card I", "apply (simp add: nat_cut_greater_finite_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_cut_ge_card: \"card (I \\<down>\\<ge> (t::nat)) \\<le> card I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>\\<ge> t) \\<le> card I", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite I \\<Longrightarrow> card (I \\<down>\\<ge> t) \\<le> card I\n 2. infinite I \\<Longrightarrow> card (I \\<down>\\<ge> t) \\<le> card I", "apply (simp add: cut_ge_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow> card (I \\<down>\\<ge> t) \\<le> card I", "apply (simp add: nat_cut_ge_finite_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Cutting a set at  \\<open>Min\\<close> or \\<open>Max\\<close> element\\<close>"], ["", "lemma cut_greater_Min_eq_Diff: \"I \\<down>> (iMin I) = I - {iMin I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>> iMin I = I - {iMin I}", "by blast"], ["", "lemma cut_less_Max_eq_Diff: \"finite I \\<Longrightarrow> I \\<down>< (Max I) = I - {Max I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> I \\<down>< Max I = I - {Max I}", "by blast"], ["", "lemma cut_le_Min_empty: \"t < iMin I \\<Longrightarrow> I \\<down>\\<le> t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < iMin I \\<Longrightarrow> I \\<down>\\<le> t = {}", "by (fastforce simp: i_cut_defs)"], ["", "lemma cut_less_Min_empty: \"t \\<le> iMin I \\<Longrightarrow> I \\<down>< t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> iMin I \\<Longrightarrow> I \\<down>< t = {}", "by (fastforce simp: i_cut_defs)"], ["", "lemma cut_le_Min_not_empty: \"\\<lbrakk> I \\<noteq> {}; iMin I \\<le> t \\<rbrakk> \\<Longrightarrow> I \\<down>\\<le> t \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<le> t \\<noteq> {}", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> x \\<le> t", "apply (rule_tac x=\"iMin I\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<in> I \\<and> iMin I \\<le> t", "apply (simp add: iMinI_ex2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_less_Min_not_empty: \"\\<lbrakk> I \\<noteq> {}; iMin I < t \\<rbrakk> \\<Longrightarrow> I \\<down>< t \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I < t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< t \\<noteq> {}", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I < t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> x < t", "apply (rule_tac x=\"iMin I\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; iMin I < t\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<in> I \\<and> iMin I < t", "apply (simp add: iMinI_ex2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_ge_Min_all: \"t \\<le> iMin I \\<Longrightarrow> I \\<down>\\<ge> t = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> iMin I \\<Longrightarrow> I \\<down>\\<ge> t = I", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le> iMin I \\<Longrightarrow> {x \\<in> I. t \\<le> x} = I", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<le> iMin I; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> t \\<le> x", "apply (drule iMin_le, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_greater_Min_all: \"t < iMin I \\<Longrightarrow> I \\<down>> t = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t < iMin I \\<Longrightarrow> I \\<down>> t = I", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t < iMin I \\<Longrightarrow> {x \\<in> I. t < x} = I", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<lbrakk>t < iMin I; x \\<in> I\\<rbrakk> \\<Longrightarrow> t < x", "apply (drule iMin_le, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas i_cut_min_empty =\n  cut_le_Min_empty\n  cut_less_Min_empty\n  cut_le_Min_not_empty\n  cut_less_Min_not_empty"], ["", "lemmas i_cut_min_all =\n  cut_ge_Min_all\n  cut_greater_Min_all"], ["", "lemma cut_ge_Max_empty: \"finite I \\<Longrightarrow> Max I < t \\<Longrightarrow> I \\<down>\\<ge> t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> t = {}", "by (fastforce simp: i_cut_defs)"], ["", "lemma cut_greater_Max_empty: \"finite I \\<Longrightarrow> Max I \\<le> t \\<Longrightarrow> I \\<down>> t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>> t = {}", "by (fastforce simp: i_cut_defs)"], ["", "lemma cut_ge_Max_not_empty: \"\\<lbrakk> I \\<noteq> {}; finite I; t \\<le> Max I \\<rbrakk> \\<Longrightarrow> I \\<down>\\<ge> t \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; finite I; t \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> t \\<noteq> {}", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; finite I; t \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> t \\<le> x", "apply (rule_tac x=\"Max I\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; finite I; t \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> I \\<and> t \\<le> Max I", "apply (simp add: MaxI_ex2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_greater_Max_not_empty: \"\\<lbrakk> I \\<noteq> {}; finite I; t < Max I \\<rbrakk> \\<Longrightarrow> I \\<down>> t \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; finite I; t < Max I\\<rbrakk>\n    \\<Longrightarrow> I \\<down>> t \\<noteq> {}", "apply (simp add: i_cut_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; finite I; t < Max I\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> I \\<and> t < x", "apply (rule_tac x=\"Max I\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<noteq> {}; finite I; t < Max I\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> I \\<and> t < Max I", "apply (simp add: MaxI_ex2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_le_Max_all: \"finite I \\<Longrightarrow> Max I \\<le> t \\<Longrightarrow> I \\<down>\\<le> t = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<le> t = I", "by (fastforce simp: i_cut_defs)"], ["", "lemma cut_less_Max_all: \"finite I \\<Longrightarrow> Max I < t \\<Longrightarrow> I \\<down>< t = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < t\\<rbrakk> \\<Longrightarrow> I \\<down>< t = I", "by (fastforce simp: i_cut_defs)"], ["", "lemmas i_cut_max_empty =\n  cut_ge_Max_empty\n  cut_greater_Max_empty\n  cut_ge_Max_not_empty\n  cut_greater_Max_not_empty"], ["", "lemmas i_cut_max_all =\n  cut_le_Max_all\n  cut_less_Max_all"], ["", "lemma cut_less_Max_less: \"\n  \\<lbrakk> finite (I \\<down>< t); I \\<down>< t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>< t) < t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (I \\<down>< t); I \\<down>< t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< t) < t", "by (rule cut_less_bound[OF Max_in])"], ["", "lemma cut_le_Max_le: \"\n  \\<lbrakk> finite (I \\<down>\\<le> t); I \\<down>\\<le> t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>\\<le> t) \\<le> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (I \\<down>\\<le> t);\n     I \\<down>\\<le> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>\\<le> t) \\<le> t", "by (rule cut_le_bound[OF Max_in])"], ["", "lemma nat_cut_less_Max_less: \"\n  I \\<down>< t \\<noteq> {} \\<Longrightarrow> Max (I \\<down>< t) < (t::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>< t \\<noteq> {} \\<Longrightarrow> Max (I \\<down>< t) < t", "by (rule cut_less_bound[OF Max_in[OF nat_cut_less_finite]])"], ["", "lemma nat_cut_le_Max_le: \"\n  I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> Max (I \\<down>\\<le> t) \\<le> (t::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow>\n    Max (I \\<down>\\<le> t) \\<le> t", "by (rule cut_le_bound[OF Max_in[OF nat_cut_le_finite]])"], ["", "lemma cut_greater_Min_greater: \"\n  I \\<down>> t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>> t) > t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>> t \\<noteq> {} \\<Longrightarrow> t < iMin (I \\<down>> t)", "by (rule cut_greater_bound[OF iMinI_ex2])"], ["", "lemma cut_ge_Min_greater: \"\n  I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>\\<ge> t) \\<ge> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<ge> t \\<noteq> {} \\<Longrightarrow>\n    t \\<le> iMin (I \\<down>\\<ge> t)", "by (rule cut_ge_bound[OF iMinI_ex2])"], ["", "lemma cut_less_Min_eq: \"I \\<down>< t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>< t) = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>< t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>< t) = iMin I", "apply (drule cut_less_not_empty_iff[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. x < t \\<Longrightarrow> iMin (I \\<down>< t) = iMin I", "apply (rule iMin_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>I. x < t \\<Longrightarrow> iMin I \\<in> I \\<down>< t\n 2. \\<And>x.\n       \\<lbrakk>\\<exists>x\\<in>I. x < t; x \\<in> I \\<down>< t\\<rbrakk>\n       \\<Longrightarrow> iMin I \\<le> x", "apply (fastforce intro: iMinI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<exists>x\\<in>I. x < t; x \\<in> I \\<down>< t\\<rbrakk>\n       \\<Longrightarrow> iMin I \\<le> x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_le_Min_eq: \"I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow> iMin (I \\<down>\\<le> t) = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>\\<le> t \\<noteq> {} \\<Longrightarrow>\n    iMin (I \\<down>\\<le> t) = iMin I", "apply (drule cut_le_not_empty_iff[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>I. x \\<le> t \\<Longrightarrow>\n    iMin (I \\<down>\\<le> t) = iMin I", "apply (rule iMin_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>I. x \\<le> t \\<Longrightarrow>\n    iMin I \\<in> I \\<down>\\<le> t\n 2. \\<And>x.\n       \\<lbrakk>\\<exists>x\\<in>I. x \\<le> t;\n        x \\<in> I \\<down>\\<le> t\\<rbrakk>\n       \\<Longrightarrow> iMin I \\<le> x", "apply (fastforce intro: iMinI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<exists>x\\<in>I. x \\<le> t;\n        x \\<in> I \\<down>\\<le> t\\<rbrakk>\n       \\<Longrightarrow> iMin I \\<le> x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_ge_Max_eq: \"\\<lbrakk> finite I; I \\<down>\\<ge> t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>\\<ge> t) = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<down>\\<ge> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>\\<ge> t) = Max I", "apply (drule cut_ge_not_empty_iff[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>\\<ge> t) = Max I", "apply (rule Max_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> I \\<down>\\<ge> t\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x\\<rbrakk>\n    \\<Longrightarrow> finite (I \\<down>\\<ge> t)\n 3. \\<And>x.\n       \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x;\n        x \\<in> I \\<down>\\<ge> t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Max I", "apply (fastforce intro: MaxI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x\\<rbrakk>\n    \\<Longrightarrow> finite (I \\<down>\\<ge> t)\n 2. \\<And>x.\n       \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x;\n        x \\<in> I \\<down>\\<ge> t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Max I", "apply (simp add: cut_ge_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; \\<exists>x\\<in>I. t \\<le> x;\n        x \\<in> I \\<down>\\<ge> t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Max I", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_greater_Max_eq: \"\\<lbrakk> finite I; I \\<down>> t \\<noteq> {} \\<rbrakk> \\<Longrightarrow> Max (I \\<down>> t) = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<down>> t \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>> t) = Max I", "apply (drule cut_greater_not_empty_iff[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>> t) = Max I", "apply (rule Max_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x\\<rbrakk>\n    \\<Longrightarrow> Max I \\<in> I \\<down>> t\n 2. \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x\\<rbrakk>\n    \\<Longrightarrow> finite (I \\<down>> t)\n 3. \\<And>x.\n       \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x;\n        x \\<in> I \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Max I", "apply (fastforce intro: MaxI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x\\<rbrakk>\n    \\<Longrightarrow> finite (I \\<down>> t)\n 2. \\<And>x.\n       \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x;\n        x \\<in> I \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Max I", "apply (simp add: cut_greater_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; \\<exists>x\\<in>I. t < x;\n        x \\<in> I \\<down>> t\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Max I", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Cut operators with intervals from SetInterval\\<close>"], ["", "lemma\n  UNIV_cut_le:      \"UNIV \\<down>\\<le> t = {..t}\" and\n  UNIV_cut_less:    \"UNIV \\<down>< t = {..<t}\" and\n  UNIV_cut_ge:      \"UNIV \\<down>\\<ge> t = {t..}\" and\n  UNIV_cut_greater: \"UNIV \\<down>> t = {t<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (UNIV \\<down>\\<le> t = {..t} &&& UNIV \\<down>< t = {..<t}) &&&\n    UNIV \\<down>\\<ge> t = {t..} &&& UNIV \\<down>> t = {t<..}", "by blast+"], ["", "lemma\n  lessThan_cut_le:      \"{..<n} \\<down>\\<le> t = (if n \\<le> t then {..<n} else {..t})\" and\n  lessThan_cut_less:    \"{..<n} \\<down>< t = (if n \\<le> t then {..<n} else {..<t})\" and\n  lessThan_cut_ge:      \"{..<n} \\<down>\\<ge> t = {t..<n}\" and\n  lessThan_cut_greater: \"{..<n} \\<down>> t = {t<..<n}\" and\n  atMost_cut_le:      \"{..n} \\<down>\\<le> t = (if n \\<le> t then {..n} else {..t})\" and\n  atMost_cut_less:    \"{..n} \\<down>< t = (if n < t then {..n} else {..<t})\" and\n  atMost_cut_ge:      \"{..n} \\<down>\\<ge> t = {t..n}\" and\n  atMost_cut_greager: \"{..n} \\<down>> t = {t<..n}\" and\n  greaterThan_cut_le:      \"{n<..} \\<down>\\<le> t = {n<..t}\" and\n  greaterThan_cut_less:    \"{n<..} \\<down>< t = {n<..<t}\" and\n  greaterThan_cut_ge:      \"{n<..} \\<down>\\<ge> t = (if t \\<le> n then {n<..} else {t..})\" and\n  greaterThan_cut_greater: \"{n<..} \\<down>> t = (if t \\<le> n then {n<..} else {t<..})\" and\n  atLeast_cut_le:      \"{n..} \\<down>\\<le> t = {n..t}\" and\n  atLeast_cut_less:    \"{n..} \\<down>< t = {n..<t}\" and\n  atLeast_cut_ge:      \"{n..} \\<down>\\<ge> t = (if t \\<le> n then {n..} else {t..})\" and\n  atLeast_cut_greater: \"{n..} \\<down>\\<ge> t = (if t \\<le> n then {n..} else {t..})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((({..<n} \\<down>\\<le> t = (if n \\<le> t then {..<n} else {..t}) &&&\n       {..<n} \\<down>< t = (if n \\<le> t then {..<n} else {..<t})) &&&\n      {..<n} \\<down>\\<ge> t = {t..<n} &&& {..<n} \\<down>> t = {t<..<n}) &&&\n     ({..n} \\<down>\\<le> t = (if n \\<le> t then {..n} else {..t}) &&&\n      {..n} \\<down>< t = (if n < t then {..n} else {..<t})) &&&\n     {..n} \\<down>\\<ge> t = {t..n} &&& {..n} \\<down>> t = {t<..n}) &&&\n    (({n<..} \\<down>\\<le> t = {n<..t} &&& {n<..} \\<down>< t = {n<..<t}) &&&\n     {n<..} \\<down>\\<ge> t = (if t \\<le> n then {n<..} else {t..}) &&&\n     {n<..} \\<down>> t = (if t \\<le> n then {n<..} else {t<..})) &&&\n    ({n..} \\<down>\\<le> t = {n..t} &&& {n..} \\<down>< t = {n..<t}) &&&\n    {n..} \\<down>\\<ge> t = (if t \\<le> n then {n..} else {t..}) &&&\n    {n..} \\<down>\\<ge> t = (if t \\<le> n then {n..} else {t..})", "apply (simp_all add: set_eq_iff i_cut_mem_iff linorder_not_le linorder_not_less)"], ["proof (prove)\ngoal (12 subgoals):\n 1. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x. (x < n \\<and> x \\<le> t) = (x < n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x. (x < n \\<and> x \\<le> t) = (x \\<le> t)))\n 2. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x. (x < n \\<and> x < t) = (x < n))) \\<and>\n    (t < n \\<longrightarrow> (\\<forall>x. (x < n \\<and> x < t) = (x < t)))\n 3. \\<forall>x. (x < n \\<and> t \\<le> x) = (t \\<le> x \\<and> x < n)\n 4. \\<forall>x. (x < n \\<and> t < x) = (t < x \\<and> x < n)\n 5. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x. (x \\<le> n \\<and> x \\<le> t) = (x \\<le> n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x. (x \\<le> n \\<and> x \\<le> t) = (x \\<le> t)))\n 6. (n < t \\<longrightarrow>\n     (\\<forall>x. (x \\<le> n \\<and> x < t) = (x \\<le> n))) \\<and>\n    (t \\<le> n \\<longrightarrow>\n     (\\<forall>x. (x \\<le> n \\<and> x < t) = (x < t)))\n 7. \\<forall>x. (x \\<le> n \\<and> t \\<le> x) = (t \\<le> x \\<and> x \\<le> n)\n 8. \\<forall>x. (x \\<le> n \\<and> t < x) = (t < x \\<and> x \\<le> n)\n 9. (t \\<le> n \\<longrightarrow>\n     (\\<forall>x. (n < x \\<and> t \\<le> x) = (n < x))) \\<and>\n    (n < t \\<longrightarrow>\n     (\\<forall>x. (n < x \\<and> t \\<le> x) = (t \\<le> x)))\n 10. (t \\<le> n \\<longrightarrow>\n      (\\<forall>x. (n < x \\<and> t < x) = (n < x))) \\<and>\n     (n < t \\<longrightarrow> (\\<forall>x. (n < x \\<and> t < x) = (t < x)))\nA total of 12 subgoals...", "apply fastforce+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma\n  greaterThanLessThan_cut_le:      \"{m<..<n} \\<down>\\<le> t = (if n \\<le> t then {m<..<n} else {m<..t})\" and\n  greaterThanLessThan_cut_less:    \"{m<..<n} \\<down>< t = (if n \\<le> t then {m<..<n} else {m<..<t})\" and\n  greaterThanLessThan_cut_ge:      \"{m<..<n} \\<down>\\<ge> t = (if t \\<le> m then {m<..<n} else {t..<n})\" and\n  greaterThanLessThan_cut_greater: \"{m<..<n} \\<down>> t = (if t \\<le> m then {m<..<n} else {t<..<n})\" and\n  atLeastLessThan_cut_le:      \"{m..<n} \\<down>\\<le> t = (if n \\<le> t then {m..<n} else {m..t})\" and\n  atLeastLessThan_cut_less:    \"{m..<n} \\<down>< t = (if n \\<le> t then {m..<n} else {m..<t})\" and\n  atLeastLessThan_cut_ge:      \"{m..<n} \\<down>\\<ge> t = (if t \\<le> m then {m..<n} else {t..<n})\" and\n  atLeastLessThan_cut_greater: \"{m..<n} \\<down>> t = (if t < m then {m..<n} else {t<..<n})\" and\n  greaterThanAtMost_cut_le:      \"{m<..n} \\<down>\\<le> t = (if n \\<le> t then {m<..n} else {m<..t})\" and\n  greaterThanAtMost_cut_less:    \"{m<..n} \\<down>< t = (if n < t then {m<..n} else {m<..<t})\" and\n  greaterThanAtMost_cut_ge:      \"{m<..n} \\<down>\\<ge> t = (if t \\<le> m then {m<..n} else {t..n})\" and\n  greaterThanAtMost_cut_greater: \"{m<..n} \\<down>> t = (if t \\<le> m then {m<..n} else {t<..n})\" and\n  atLeastAtMost_cut_le:      \"{m..n} \\<down>\\<le> t = (if n \\<le> t then {m..n} else {m..t})\" and\n  atLeastAtMost_cut_less:    \"{m..n} \\<down>< t = (if n < t then {m..n} else {m..<t})\" and\n  atLeastAtMost_cut_ge:      \"{m..n} \\<down>\\<ge> t = (if t \\<le> m then {m..n} else {t..n})\" and\n  atLeastAtMost_cut_greater: \"{m..n} \\<down>> t = (if t < m then {m..n} else {t<..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((({m<..<n} \\<down>\\<le> t =\n       (if n \\<le> t then {m<..<n} else {m<..t}) &&&\n       {m<..<n} \\<down>< t = (if n \\<le> t then {m<..<n} else {m<..<t})) &&&\n      {m<..<n} \\<down>\\<ge> t =\n      (if t \\<le> m then {m<..<n} else {t..<n}) &&&\n      {m<..<n} \\<down>> t = (if t \\<le> m then {m<..<n} else {t<..<n})) &&&\n     ({m..<n} \\<down>\\<le> t = (if n \\<le> t then {m..<n} else {m..t}) &&&\n      {m..<n} \\<down>< t = (if n \\<le> t then {m..<n} else {m..<t})) &&&\n     {m..<n} \\<down>\\<ge> t = (if t \\<le> m then {m..<n} else {t..<n}) &&&\n     {m..<n} \\<down>> t = (if t < m then {m..<n} else {t<..<n})) &&&\n    (({m<..n} \\<down>\\<le> t = (if n \\<le> t then {m<..n} else {m<..t}) &&&\n      {m<..n} \\<down>< t = (if n < t then {m<..n} else {m<..<t})) &&&\n     {m<..n} \\<down>\\<ge> t = (if t \\<le> m then {m<..n} else {t..n}) &&&\n     {m<..n} \\<down>> t = (if t \\<le> m then {m<..n} else {t<..n})) &&&\n    ({m..n} \\<down>\\<le> t = (if n \\<le> t then {m..n} else {m..t}) &&&\n     {m..n} \\<down>< t = (if n < t then {m..n} else {m..<t})) &&&\n    {m..n} \\<down>\\<ge> t = (if t \\<le> m then {m..n} else {t..n}) &&&\n    {m..n} \\<down>> t = (if t < m then {m..n} else {t<..n})", "apply (simp_all add: set_eq_iff i_cut_mem_iff if_split linorder_not_le linorder_not_less)"], ["proof (prove)\ngoal (16 subgoals):\n 1. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x < n \\<and> x \\<le> t) =\n         (m < x \\<and> x < n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x < n \\<and> x \\<le> t) = (m < x \\<and> x \\<le> t)))\n 2. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x < n \\<and> x < t) = (m < x \\<and> x < n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x. (m < x \\<and> x < n \\<and> x < t) = (m < x \\<and> x < t)))\n 3. (t \\<le> m \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x < n \\<and> t \\<le> x) =\n         (m < x \\<and> x < n))) \\<and>\n    (m < t \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x < n \\<and> t \\<le> x) = (t \\<le> x \\<and> x < n)))\n 4. (t \\<le> m \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x < n \\<and> t < x) = (m < x \\<and> x < n))) \\<and>\n    (m < t \\<longrightarrow>\n     (\\<forall>x. (m < x \\<and> x < n \\<and> t < x) = (t < x \\<and> x < n)))\n 5. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> x \\<le> t) =\n         (m \\<le> x \\<and> x < n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> x \\<le> t) =\n         (m \\<le> x \\<and> x \\<le> t)))\n 6. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> x < t) =\n         (m \\<le> x \\<and> x < n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> x < t) = (m \\<le> x \\<and> x < t)))\n 7. (t \\<le> m \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> t \\<le> x) =\n         (m \\<le> x \\<and> x < n))) \\<and>\n    (m < t \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> t \\<le> x) =\n         (t \\<le> x \\<and> x < n)))\n 8. (t < m \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> t < x) =\n         (m \\<le> x \\<and> x < n))) \\<and>\n    (m \\<le> t \\<longrightarrow>\n     (\\<forall>x.\n         (m \\<le> x \\<and> x < n \\<and> t < x) = (t < x \\<and> x < n)))\n 9. (n \\<le> t \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x \\<le> n \\<and> x \\<le> t) =\n         (m < x \\<and> x \\<le> n))) \\<and>\n    (t < n \\<longrightarrow>\n     (\\<forall>x.\n         (m < x \\<and> x \\<le> n \\<and> x \\<le> t) =\n         (m < x \\<and> x \\<le> t)))\n 10. (n < t \\<longrightarrow>\n      (\\<forall>x.\n          (m < x \\<and> x \\<le> n \\<and> x < t) =\n          (m < x \\<and> x \\<le> n))) \\<and>\n     (t \\<le> n \\<longrightarrow>\n      (\\<forall>x.\n          (m < x \\<and> x \\<le> n \\<and> x < t) = (m < x \\<and> x < t)))\nA total of 16 subgoals...", "apply fastforce+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Mirroring finite natural sets between their @{term Min} and @{term Max} element\\<close>"], ["", "text \\<open>Mirroring a number at the middle of the interval {min l r..max l r}\\<close>"], ["", "text_raw \\<open>\\bigskip\\<close>"], ["", "text \\<open>Mirroring a single element n between the interval boundaries l and r\\<close>"], ["", "definition nat_mirror :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\"\n  where \"nat_mirror n l r \\<equiv> l + r - n\""], ["", "lemma nat_mirror_commute: \"nat_mirror n l r = nat_mirror n r l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_mirror n l r = nat_mirror n r l", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. l + r - n = r + l - n", "by simp"], ["", "lemma nat_mirror_inj_on: \"inj_on (\\<lambda>x. nat_mirror x l r) {..l + r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. nat_mirror x l r) {..l + r}", "unfolding inj_on_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{..l + r}.\n       \\<forall>y\\<in>{..l + r}.\n          l + r - x = l + r - y \\<longrightarrow> x = y", "by fastforce"], ["", "lemma nat_mirror_nat_mirror_ident: \"\n  n \\<le> l + r \\<Longrightarrow> nat_mirror (nat_mirror n l r) l r = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> l + r \\<Longrightarrow> nat_mirror (nat_mirror n l r) l r = n", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> l + r \\<Longrightarrow> l + r - (l + r - n) = n", "by simp"], ["", "lemma nat_mirror_add: \"\n  nat_mirror (n + k) l r = (nat_mirror n l r) - k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_mirror (n + k) l r = nat_mirror n l r - k", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. l + r - (n + k) = l + r - n - k", "by simp"], ["", "lemma nat_mirror_diff: \"\n  \\<lbrakk> k \\<le> n; n \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  nat_mirror (n - k) l r = (nat_mirror n l r) + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> n; n \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> nat_mirror (n - k) l r = nat_mirror n l r + k", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> n; n \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> l + r - (n - k) = l + r - n + k", "by simp"], ["", "lemma nat_mirror_le: \"a \\<le> b \\<Longrightarrow> nat_mirror b l r \\<le> nat_mirror a l r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> nat_mirror b l r \\<le> nat_mirror a l r", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> l + r - b \\<le> l + r - a", "by simp"], ["", "lemma nat_mirror_le_conv: \"\n  a \\<le> l + r \\<Longrightarrow> (nat_mirror b l r \\<le> nat_mirror a l r) = (a \\<le> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> l + r \\<Longrightarrow>\n    (nat_mirror b l r \\<le> nat_mirror a l r) = (a \\<le> b)", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> l + r \\<Longrightarrow>\n    (l + r - b \\<le> l + r - a) = (a \\<le> b)", "by fastforce"], ["", "lemma nat_mirror_less: \"\n  \\<lbrakk> a < b; a < l + r \\<rbrakk> \\<Longrightarrow>\n  nat_mirror b l r < nat_mirror a l r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a < l + r\\<rbrakk>\n    \\<Longrightarrow> nat_mirror b l r < nat_mirror a l r", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; a < l + r\\<rbrakk>\n    \\<Longrightarrow> l + r - b < l + r - a", "by simp"], ["", "lemma nat_mirror_less_imp_less: \"\n  nat_mirror b l r < nat_mirror a l r \\<Longrightarrow> a < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_mirror b l r < nat_mirror a l r \\<Longrightarrow> a < b", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. l + r - b < l + r - a \\<Longrightarrow> a < b", "by simp"], ["", "lemma nat_mirror_less_conv: \"\n  a < l + r \\<Longrightarrow> (nat_mirror b l r < nat_mirror a l r) = (a < b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < l + r \\<Longrightarrow>\n    (nat_mirror b l r < nat_mirror a l r) = (a < b)", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < l + r \\<Longrightarrow> (l + r - b < l + r - a) = (a < b)", "by fastforce"], ["", "lemma nat_mirror_eq_conv: \"\n  \\<lbrakk> a \\<le> l + r; b \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  (nat_mirror a l r = nat_mirror b l r) = (a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> l + r; b \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> (nat_mirror a l r = nat_mirror b l r) = (a = b)", "unfolding nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> l + r; b \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> (l + r - a = l + r - b) = (a = b)", "by fastforce"], ["", "text \\<open>Mirroring a single element n between the interval boundaries of I\\<close>"], ["", "definition\n  mirror_elem :: \"nat \\<Rightarrow> nat set \\<Rightarrow> nat\"\nwhere\n  \"mirror_elem n I \\<equiv> nat_mirror n (iMin I) (Max I)\""], ["", "lemma mirror_elem_inj_on: \"finite I \\<Longrightarrow> inj_on (\\<lambda>x. mirror_elem x I) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> inj_on (\\<lambda>x. mirror_elem x I) I", "unfolding mirror_elem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    inj_on (\\<lambda>x. nat_mirror x (iMin I) (Max I)) I", "by (metis Max_le_imp_subset_atMost nat_mirror_inj_on not_add_less2 not_le_imp_less subset_inj_on)"], ["", "lemma mirror_elem_add: \"\n  finite I \\<Longrightarrow> mirror_elem (n + k) I = mirror_elem n I - k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> mirror_elem (n + k) I = mirror_elem n I - k", "unfolding mirror_elem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    nat_mirror (n + k) (iMin I) (Max I) = nat_mirror n (iMin I) (Max I) - k", "by (rule nat_mirror_add)"], ["", "lemma mirror_elem_diff: \"\n  \\<lbrakk> finite I; k \\<le> n; n \\<in> I \\<rbrakk> \\<Longrightarrow> mirror_elem (n - k) I = mirror_elem n I + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; k \\<le> n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (n - k) I = mirror_elem n I + k", "apply (unfold mirror_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; k \\<le> n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> nat_mirror (n - k) (iMin I) (Max I) =\n                      nat_mirror n (iMin I) (Max I) + k", "apply (rule nat_mirror_diff, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; k \\<le> n; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> n \\<le> iMin I + Max I", "apply (simp add: trans_le_add2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mirror_elem_Min: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> mirror_elem (iMin I) I = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (iMin I) I = Max I", "unfolding mirror_elem_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin I + Max I - iMin I = Max I", "by simp"], ["", "lemma mirror_elem_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> mirror_elem (Max I) I = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (Max I) I = iMin I", "unfolding mirror_elem_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin I + Max I - Max I = iMin I", "by simp"], ["", "lemma mirror_elem_mirror_elem_ident: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow> mirror_elem (mirror_elem n I) I = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (mirror_elem n I) I = n", "unfolding mirror_elem_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> iMin I + Max I - (iMin I + Max I - n) = n", "by simp"], ["", "lemma mirror_elem_le_conv: \"\n  \\<lbrakk> finite I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow>\n  (mirror_elem b I \\<le> mirror_elem a I) = (a \\<le> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (mirror_elem b I \\<le> mirror_elem a I) = (a \\<le> b)", "apply (unfold mirror_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (nat_mirror b (iMin I) (Max I)\n                       \\<le> nat_mirror a (iMin I) (Max I)) =\n                      (a \\<le> b)", "apply (rule nat_mirror_le_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> a \\<le> iMin I + Max I", "apply (simp add: trans_le_add2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mirror_elem_less_conv: \"\n  \\<lbrakk> finite I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow>\n  (mirror_elem b I < mirror_elem a I) = (a < b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (mirror_elem b I < mirror_elem a I) = (a < b)", "unfolding mirror_elem_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (iMin I + Max I - b < iMin I + Max I - a) = (a < b)", "by (metis diff_less_mono2 nat_diff_left_cancel_less nat_ex_greater_infinite_finite_Max_conv' trans_less_add2)"], ["", "lemma mirror_elem_eq_conv: \"\n  \\<lbrakk> a \\<le> iMin I + Max I; b \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  (mirror_elem a I = mirror_elem b I) = (a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> iMin I + Max I; b \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> (mirror_elem a I = mirror_elem b I) = (a = b)", "by (simp add: mirror_elem_def nat_mirror_eq_conv)"], ["", "lemma mirror_elem_eq_conv': \"\n  \\<lbrakk> finite I; a \\<in> I; b \\<in> I \\<rbrakk> \\<Longrightarrow> (mirror_elem a I = mirror_elem b I) = (a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (mirror_elem a I = mirror_elem b I) = (a = b)", "apply (rule mirror_elem_eq_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> a \\<le> iMin I + Max I\n 2. \\<lbrakk>finite I; a \\<in> I; b \\<in> I\\<rbrakk>\n    \\<Longrightarrow> b \\<le> iMin I + Max I", "apply (simp_all add: trans_le_add2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  imirror_bounds :: \"nat set \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat set\"\nwhere\n  \"imirror_bounds I l r \\<equiv> (\\<lambda>x. nat_mirror x l r) ` I\""], ["", "text \\<open>Mirroring all elements between the interval boundaries of I\\<close>"], ["", "definition\n  imirror :: \"nat set \\<Rightarrow> nat set\"\nwhere\n  \"imirror I \\<equiv> (\\<lambda>x. iMin I + Max I - x) ` I\""], ["", "lemma imirror_eq_nat_mirror_image: \"\n  imirror I = (\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imirror I = (\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I", "unfolding imirror_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (-) (iMin I + Max I) ` I = (-) (iMin I + Max I) ` I", "by simp"], ["", "lemma imirror_eq_mirror_elem_image: \"\n  imirror I = (\\<lambda>x. mirror_elem x I) ` I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imirror I = (\\<lambda>x. mirror_elem x I) ` I", "by (simp add: mirror_elem_def imirror_eq_nat_mirror_image)"], ["", "lemma imirror_eq_imirror_bounds: \"\n  imirror I = imirror_bounds I (iMin I) (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imirror I = imirror_bounds I (iMin I) (Max I)", "unfolding imirror_def imirror_bounds_def nat_mirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (-) (iMin I + Max I) ` I = (-) (iMin I + Max I) ` I", "by simp"], ["", "lemma imirror_empty: \"imirror {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imirror {} = {}", "unfolding imirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (-) (iMin {} + Max {}) ` {} = {}", "by simp"], ["", "lemma imirror_is_empty: \"(imirror I = {}) = (I = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (imirror I = {}) = (I = {})", "unfolding imirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((-) (iMin I + Max I) ` I = {}) = (I = {})", "by simp"], ["", "lemma imirror_not_empty: \"I \\<noteq> {} \\<Longrightarrow> imirror I \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow> imirror I \\<noteq> {}", "unfolding imirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow> (-) (iMin I + Max I) ` I \\<noteq> {}", "by simp"], ["", "lemma imirror_singleton: \"imirror {a} = {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imirror {a} = {a}", "unfolding imirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (-) (iMin {a} + Max {a}) ` {a} = {a}", "by simp"], ["", "lemma imirror_finite: \"finite I \\<Longrightarrow> finite (imirror I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> finite (imirror I)", "unfolding imirror_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> finite ((-) (iMin I + Max I) ` I)", "by simp"], ["", "lemma imirror_bounds_iMin: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; iMin I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  iMin (imirror_bounds I l r) = l + r - Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror_bounds I l r) = l + r - Max I", "apply (unfold imirror_bounds_def nat_mirror_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> iMin ((-) (l + r) ` I) = l + r - Max I", "apply (rule iMin_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> l + r - Max I \\<in> (-) (l + r) ` I\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<le> l + r;\n        x \\<in> (-) (l + r) ` I\\<rbrakk>\n       \\<Longrightarrow> l + r - Max I \\<le> x", "apply (blast intro: Max_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; iMin I \\<le> l + r;\n        x \\<in> (-) (l + r) ` I\\<rbrakk>\n       \\<Longrightarrow> l + r - Max I \\<le> x", "apply (blast intro: Max_ge diff_le_mono2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_bounds_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; Max I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  Max (imirror_bounds I l r) = l + r - iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> Max (imirror_bounds I l r) = l + r - iMin I", "apply (unfold imirror_bounds_def nat_mirror_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> Max ((-) (l + r) ` I) = l + r - iMin I", "apply (rule Max_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> l + r - iMin I \\<in> (-) (l + r) ` I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> finite ((-) (l + r) ` I)\n 3. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r;\n        x \\<in> (-) (l + r) ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<le> l + r - iMin I", "apply (blast intro: iMinI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> finite ((-) (l + r) ` I)\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r;\n        x \\<in> (-) (l + r) ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<le> l + r - iMin I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I \\<le> l + r;\n        x \\<in> (-) (l + r) ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<le> l + r - iMin I", "apply (blast intro: iMin_le diff_le_mono2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_iMin: \"finite I \\<Longrightarrow> iMin (imirror I) = iMin I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> iMin (imirror I) = iMin I", "apply (case_tac \"I = {}\", simp add: imirror_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> iMin (imirror I) = iMin I", "apply (simp add: imirror_eq_imirror_bounds imirror_bounds_iMin le_add1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_Max: \"finite I \\<Longrightarrow> Max (imirror I) = Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> Max (imirror I) = Max I", "apply (case_tac \"I = {}\", simp add: imirror_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I) = Max I", "apply (simp add: imirror_eq_imirror_bounds imirror_bounds_Max trans_le_add2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary imirror_iMin_Max: \"\\<lbrakk> finite I; n \\<in> imirror I \\<rbrakk> \\<Longrightarrow> iMin I \\<le> n \\<and> n \\<le> Max I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<in> imirror I\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<le> n \\<and> n \\<le> Max I", "apply (frule Max_ge[OF imirror_finite, of _ n], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<in> imirror I; n \\<le> Max (imirror I)\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<le> n \\<and> n \\<le> Max I", "apply (fastforce simp: imirror_iMin imirror_Max)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_bounds_iff:\n  \"(n \\<in> imirror_bounds I l r) = (\\<exists>x\\<in>I. n = l + r - x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> imirror_bounds I l r) = (\\<exists>x\\<in>I. n = l + r - x)", "by (simp add: imirror_bounds_def nat_mirror_def image_iff)"], ["", "lemma imirror_iff: \"(n \\<in> imirror I) = (\\<exists>x\\<in>I. n = iMin I + Max I - x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> imirror I) = (\\<exists>x\\<in>I. n = iMin I + Max I - x)", "by (simp add: imirror_def image_iff)"], ["", "lemma imirror_bounds_imirror_bounds_ident: \"\n  \\<lbrakk> finite I; Max I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  imirror_bounds (imirror_bounds I l r) l r = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> imirror_bounds (imirror_bounds I l r) l r = I", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> imirror_bounds (imirror_bounds I l r) l\n                                   r) =\n                         (x \\<in> I)", "apply (simp add: imirror_bounds_def image_image image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa\\<in>I.\n                             x = nat_mirror (nat_mirror xa l r) l r) =\n                         (x \\<in> I)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r;\n        \\<exists>xa\\<in>I. x = nat_mirror (nat_mirror xa l r) l r\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I\n 2. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>I.\n                            x = nat_mirror (nat_mirror xa l r) l r", "apply (fastforce simp: nat_mirror_nat_mirror_ident)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>I.\n                            x = nat_mirror (nat_mirror xa l r) l r", "apply (rule_tac x=x in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> x = nat_mirror (nat_mirror x l r) l r\n 2. \\<And>x.\n       \\<lbrakk>finite I; Max I \\<le> l + r; x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "apply (fastforce simp: nat_mirror_nat_mirror_ident)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_imirror_ident: \"finite I \\<Longrightarrow> imirror (imirror I) = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> imirror (imirror I) = I", "apply (case_tac \"I = {}\", simp add: imirror_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> imirror (imirror I) = I", "apply (simp add: imirror_eq_imirror_bounds imirror_bounds_iMin imirror_bounds_Max\n  le_add1 trans_le_add2 imirror_bounds_imirror_bounds_ident)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mirror_elem_imirror: \"\n  finite I \\<Longrightarrow> mirror_elem t (imirror I) = mirror_elem t I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> mirror_elem t (imirror I) = mirror_elem t I", "by (simp add: mirror_elem_def imirror_iMin imirror_Max)"], ["", "lemma imirror_card: \"finite I \\<Longrightarrow> card (imirror I) = card I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> card (imirror I) = card I", "apply (simp only: imirror_eq_mirror_elem_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    card ((\\<lambda>x. mirror_elem x I) ` I) = card I", "apply (rule inj_on_iff_eq_card[THEN iffD1], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> inj_on (\\<lambda>x. mirror_elem x I) I", "apply (rule mirror_elem_inj_on, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_bounds_elem_conv: \"\n  \\<lbrakk> finite I; n \\<le> l + r; Max I \\<le> l + r \\<rbrakk> \\<Longrightarrow>\n  ((nat_mirror n l r) \\<in> imirror_bounds I l r) = (n \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> (nat_mirror n l r \\<in> imirror_bounds I l r) =\n                      (n \\<in> I)", "apply (unfold imirror_bounds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> (nat_mirror n l r\n                       \\<in> (\\<lambda>x. nat_mirror x l r) ` I) =\n                      (n \\<in> I)", "apply (rule inj_on_image_mem_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> inj_on (\\<lambda>x. nat_mirror x l r) ?A\n 2. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> I \\<subseteq> ?A\n 3. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> n \\<in> ?A", "apply (rule nat_mirror_inj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> I \\<subseteq> {..l + r}\n 2. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> n \\<in> {..l + r}", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> l + r; Max I \\<le> l + r\\<rbrakk>\n    \\<Longrightarrow> n \\<in> {..l + r}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_mem_conv: \"\n  \\<lbrakk> finite I; n \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow> ((mirror_elem n I) \\<in> imirror I) = (n \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> (mirror_elem n I \\<in> imirror I) = (n \\<in> I)", "by (simp add: mirror_elem_def imirror_eq_imirror_bounds imirror_bounds_elem_conv)"], ["", "corollary in_imp_mirror_elem_in: \"\n  \\<lbrakk> finite I; n \\<in> I \\<rbrakk> \\<Longrightarrow> (mirror_elem n I) \\<in> imirror I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; n \\<in> I\\<rbrakk>\n    \\<Longrightarrow> mirror_elem n I \\<in> imirror I", "by (rule imirror_mem_conv[OF _ trans_le_add2[OF Max_ge], THEN iffD2])"], ["", "lemma imirror_cut_less: \"\n  finite I \\<Longrightarrow>\n  imirror I \\<down>< (mirror_elem t I) =\n  imirror_bounds (I \\<down>> t) (iMin I) (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    imirror I \\<down>< mirror_elem t I =\n    imirror_bounds (I \\<down>> t) (iMin I) (Max I)", "apply (simp only: imirror_eq_imirror_bounds)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    imirror_bounds I (iMin I) (Max I) \\<down>< mirror_elem t I =\n    imirror_bounds (I \\<down>> t) (iMin I) (Max I)", "apply (unfold imirror_def imirror_bounds_def mirror_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    ((\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I) \\<down><\n    nat_mirror t (iMin I) (Max I) =\n    (\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I \\<down>> t", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       finite I \\<Longrightarrow>\n       (x \\<in> ((\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I) \\<down><\n                nat_mirror t (iMin I) (Max I)) =\n       (x \\<in> (\\<lambda>x. nat_mirror x (iMin I) (Max I)) ` I \\<down>> t)", "apply (simp add: Bex_def i_cut_mem_iff image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       finite I \\<Longrightarrow>\n       ((\\<exists>xa.\n            xa \\<in> I \\<and> x = nat_mirror xa (iMin I) (Max I)) \\<and>\n        x < nat_mirror t (iMin I) (Max I)) =\n       (\\<exists>xa.\n           xa \\<in> I \\<and>\n           t < xa \\<and> x = nat_mirror xa (iMin I) (Max I))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I;\n        (\\<exists>xa.\n            xa \\<in> I \\<and> x = nat_mirror xa (iMin I) (Max I)) \\<and>\n        x < nat_mirror t (iMin I) (Max I)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> I \\<and>\n                            t < xa \\<and> x = nat_mirror xa (iMin I) (Max I)\n 2. \\<And>x.\n       \\<lbrakk>finite I;\n        \\<exists>xa.\n           xa \\<in> I \\<and>\n           t < xa \\<and> x = nat_mirror xa (iMin I) (Max I)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa.\n                             xa \\<in> I \\<and>\n                             x = nat_mirror xa (iMin I) (Max I)) \\<and>\n                         x < nat_mirror t (iMin I) (Max I)", "apply (bestsimp intro: nat_mirror_less_imp_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I;\n        \\<exists>xa.\n           xa \\<in> I \\<and>\n           t < xa \\<and> x = nat_mirror xa (iMin I) (Max I)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa.\n                             xa \\<in> I \\<and>\n                             x = nat_mirror xa (iMin I) (Max I)) \\<and>\n                         x < nat_mirror t (iMin I) (Max I)", "apply (bestsimp simp add: nat_mirror_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_cut_le: \"\n  \\<lbrakk> finite I; t \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  imirror I \\<down>\\<le> (mirror_elem t I) =\n  imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<le> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (simp only: nat_cut_le_less_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (case_tac \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t = 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (simp add: cut_ge_0_all i_cut_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem 0 I) =\n                      imirror_bounds I (iMin I) (Max I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (simp only: imirror_eq_imirror_bounds[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem 0 I) = imirror I\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (rule cut_less_Max_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk> \\<Longrightarrow> finite (imirror I)\n 2. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I) < Suc (mirror_elem 0 I)\n 3. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (rule imirror_finite, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I) < Suc (mirror_elem 0 I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (simp add: mirror_elem_def nat_mirror_def imirror_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "apply (simp add: nat_cut_greater_ge_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>> (t - Suc 0)) (iMin I)\n                       (Max I)", "apply (rule subst[of \"mirror_elem (t - Suc 0) I\" \"Suc (mirror_elem t I)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (t - Suc 0) I = Suc (mirror_elem t I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< mirror_elem (t - Suc 0) I =\n                      imirror_bounds (I \\<down>> (t - Suc 0)) (iMin I)\n                       (Max I)", "apply (simp add: mirror_elem_def nat_mirror_diff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>< mirror_elem (t - Suc 0) I =\n                      imirror_bounds (I \\<down>> (t - Suc 0)) (iMin I)\n                       (Max I)", "apply (rule imirror_cut_less, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma imirror_cut_ge: \"\n  finite I \\<Longrightarrow>\n  imirror I \\<down>\\<ge> (mirror_elem t I) =\n  imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)\"\n  (is \"?P \\<Longrightarrow> ?lhs I = ?rhs I t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    imirror I \\<down>\\<ge> mirror_elem t I =\n    imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)", "apply (case_tac \"iMin I + Max I < t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; iMin I + Max I < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)\n 2. \\<lbrakk>finite I; \\<not> iMin I + Max I < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)", "apply (simp add: mirror_elem_def nat_mirror_def cut_ge_0_all cut_le_Max_all imirror_eq_imirror_bounds)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<not> iMin I + Max I < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)", "apply (case_tac \"t < iMin I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<not> iMin I + Max I < t; t < iMin I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)\n 2. \\<lbrakk>finite I; \\<not> iMin I + Max I < t; \\<not> t < iMin I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)", "apply (simp add: cut_le_Min_empty imirror_bounds_def mirror_elem_def nat_mirror_def cut_ge_Max_empty imirror_Max imirror_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<not> iMin I + Max I < t; \\<not> t < iMin I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)", "apply (simp add: linorder_not_le linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<le> t) (iMin I) (Max I)", "apply (rule subst[of \"imirror (imirror I) \\<down>\\<le> mirror_elem (mirror_elem t I) (imirror I)\" \"I \\<down>\\<le> t\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> imirror (imirror I) \\<down>\\<le>\n                      mirror_elem (mirror_elem t I) (imirror I) =\n                      I \\<down>\\<le> t\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds\n                       (imirror (imirror I) \\<down>\\<le>\n                        mirror_elem (mirror_elem t I) (imirror I))\n                       (iMin I) (Max I)", "apply (simp add: imirror_imirror_ident mirror_elem_imirror mirror_elem_mirror_elem_ident)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds\n                       (imirror (imirror I) \\<down>\\<le>\n                        mirror_elem (mirror_elem t I) (imirror I))\n                       (iMin I) (Max I)", "apply (subgoal_tac \"mirror_elem t I \\<le> Max (imirror I)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t;\n     mirror_elem t I \\<le> Max (imirror I)\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds\n                       (imirror (imirror I) \\<down>\\<le>\n                        mirror_elem (mirror_elem t I) (imirror I))\n                       (iMin I) (Max I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> mirror_elem t I \\<le> Max (imirror I)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t\\<rbrakk>\n    \\<Longrightarrow> mirror_elem t I \\<le> Max (imirror I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t;\n     mirror_elem t I \\<le> Max (imirror I)\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds\n                       (imirror (imirror I) \\<down>\\<le>\n                        mirror_elem (mirror_elem t I) (imirror I))\n                       (iMin I) (Max I)", "apply (simp add: imirror_Max mirror_elem_def nat_mirror_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t;\n     mirror_elem t I \\<le> Max (imirror I)\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds\n                       (imirror (imirror I) \\<down>\\<le>\n                        mirror_elem (mirror_elem t I) (imirror I))\n                       (iMin I) (Max I)", "apply (simp add: imirror_cut_le imirror_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; iMin I \\<le> t;\n     mirror_elem t I \\<le> Max (imirror I)\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem t I =\n                      imirror_bounds\n                       (imirror_bounds\n                         (imirror I \\<down>\\<ge> mirror_elem t I)\n                         (iMin (imirror I)) (Max (imirror I)))\n                       (iMin I) (Max I)", "by (metis cut_ge_Max_eq cut_ge_Max_not_empty imirror_Max imirror_bounds_imirror_bounds_ident imirror_finite imirror_iMin le_add2 nat_cut_ge_finite_iff)"], ["", "lemma imirror_cut_greater: \"\\<lbrakk> finite I; t \\<le> iMin I + Max I \\<rbrakk> \\<Longrightarrow>\n  imirror I \\<down>> (mirror_elem t I) =\n  imirror_bounds (I \\<down>< t) (iMin I) (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (case_tac \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t = 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (simp add: cut_less_0_empty imirror_bounds_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem 0 I = {}\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (rule cut_greater_Max_empty)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk> \\<Longrightarrow> finite (imirror I)\n 2. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I) \\<le> mirror_elem 0 I\n 3. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (rule imirror_finite, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t = 0\\<rbrakk>\n    \\<Longrightarrow> Max (imirror I) \\<le> mirror_elem 0 I\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (simp add: imirror_Max mirror_elem_def nat_mirror_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; t \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (simp add: nat_cut_ge_greater_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> Suc (mirror_elem t I) =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (rule subst[of \"mirror_elem (t - Suc 0) I\" \"Suc (mirror_elem t I)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> mirror_elem (t - Suc 0) I = Suc (mirror_elem t I)\n 2. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem (t - Suc 0) I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (simp add: mirror_elem_def nat_mirror_diff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<le> iMin I + Max I; 0 < t\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<ge> mirror_elem (t - Suc 0) I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "apply (simp add: imirror_cut_ge nat_cut_less_le_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas imirror_cut =\n  imirror_cut_less imirror_cut_ge\n  imirror_cut_le imirror_cut_greater"], ["", "corollary imirror_cut_le': \"\n  \\<lbrakk> finite I; t \\<in> I \\<rbrakk> \\<Longrightarrow>\n  imirror I \\<down>\\<le> mirror_elem t I =\n  imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<in> I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>\\<le> mirror_elem t I =\n                      imirror_bounds (I \\<down>\\<ge> t) (iMin I) (Max I)", "by (rule imirror_cut_le[OF _ trans_le_add2[OF Max_ge]])"], ["", "corollary imirror_cut_greater': \"\n  \\<lbrakk> finite I; t \\<in> I \\<rbrakk> \\<Longrightarrow>\n  imirror I \\<down>> mirror_elem t I =\n  imirror_bounds (I \\<down>< t) (iMin I) (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; t \\<in> I\\<rbrakk>\n    \\<Longrightarrow> imirror I \\<down>> mirror_elem t I =\n                      imirror_bounds (I \\<down>< t) (iMin I) (Max I)", "by (rule imirror_cut_greater[OF _ trans_le_add2[OF Max_ge]])"], ["", "lemmas imirror_cut' =\n  imirror_cut_le' imirror_cut_greater'"], ["", "lemma imirror_bounds_Un: \"\n  imirror_bounds (A \\<union> B) l r =\n  imirror_bounds A l r \\<union> imirror_bounds B l r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imirror_bounds (A \\<union> B) l r =\n    imirror_bounds A l r \\<union> imirror_bounds B l r", "by (simp add: imirror_bounds_def image_Un)"], ["", "lemma imirror_bounds_Int: \"\n  \\<lbrakk> A \\<subseteq> {..l + r}; B \\<subseteq> {..l + r} \\<rbrakk> \\<Longrightarrow>\n  imirror_bounds (A \\<inter> B) l r =\n  imirror_bounds A l r \\<inter> imirror_bounds B l r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {..l + r}; B \\<subseteq> {..l + r}\\<rbrakk>\n    \\<Longrightarrow> imirror_bounds (A \\<inter> B) l r =\n                      imirror_bounds A l r \\<inter> imirror_bounds B l r", "apply (unfold imirror_bounds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {..l + r}; B \\<subseteq> {..l + r}\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. nat_mirror x l r) ` (A \\<inter> B) =\n                      (\\<lambda>x. nat_mirror x l r) ` A \\<inter>\n                      (\\<lambda>x. nat_mirror x l r) ` B", "apply (rule inj_on_image_Int[OF _ Un_upper1 Un_upper2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {..l + r}; B \\<subseteq> {..l + r}\\<rbrakk>\n    \\<Longrightarrow> inj_on (\\<lambda>x. nat_mirror x l r) (A \\<union> B)", "apply (rule subset_inj_on[OF nat_mirror_inj_on])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {..l + r}; B \\<subseteq> {..l + r}\\<rbrakk>\n    \\<Longrightarrow> A \\<union> B \\<subseteq> {..l + r}", "apply (rule Un_least[of A _ B], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}