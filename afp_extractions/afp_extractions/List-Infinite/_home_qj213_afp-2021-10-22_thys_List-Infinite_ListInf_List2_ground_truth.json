{"file_name": "/home/qj213/afp-2021-10-22/thys/List-Infinite/ListInf/List2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/List-Infinite", "problem_names": ["lemma append_eq_Cons: \"[x] @ xs = x # xs\"", "lemma length_Cons: \"length (x # xs) = Suc (length xs)\"", "lemma length_snoc: \"length (xs @ [x]) = Suc (length xs)\"", "lemma length_greater_imp_not_empty:\"n < length xs \\<Longrightarrow> xs \\<noteq> []\"", "lemma length_ge_Suc_imp_not_empty:\"Suc n \\<le> length xs \\<Longrightarrow> xs \\<noteq> []\"", "lemma length_take_le: \"length (xs \\<down> n) \\<le> length xs\"", "lemma take_not_empty_conv:\"(xs \\<down> n \\<noteq> []) = (0 < n \\<and> xs \\<noteq> [])\"", "lemma drop_not_empty_conv:\"(xs \\<up> n \\<noteq> []) = (n < length xs)\"", "lemma zip_eq_Nil: \"(zip xs ys = []) = (xs = [] \\<or> ys = [])\"", "lemma zip_not_empty_conv: \"(zip xs ys \\<noteq> []) = (xs \\<noteq> [] \\<and> ys \\<noteq> [])\"", "lemma nth_tl_eq_nth_Suc: \"\n  Suc n \\<le> length xs \\<Longrightarrow> (tl xs) ! n = xs ! Suc n\"", "lemma hd_eq_first: \"xs \\<noteq> [] \\<Longrightarrow> xs ! 0 = hd xs\"", "theorem last_nth: \"xs \\<noteq> [] \\<Longrightarrow> last xs = xs ! (length xs - Suc 0)\"", "lemma last_take: \"n < length xs \\<Longrightarrow> last (xs \\<down> Suc n) = xs ! n\"", "lemma drop_eq_tl: \"xs \\<up> (Suc 0) = tl xs\"", "lemma drop_take_1: \"\n  n < length xs \\<Longrightarrow> xs \\<up> n \\<down> (Suc 0) = [xs ! n]\"", "lemma upt_append: \"m \\<le> n \\<Longrightarrow> [0..<m] @ [m..<n] = [0..<n]\"", "lemma nth_append1: \"n < length xs \\<Longrightarrow> (xs @ ys) ! n = xs ! n\"", "lemma nth_append2: \"length xs \\<le> n \\<Longrightarrow> (xs @ ys) ! n = ys ! (n - length xs)\"", "lemma list_all_conv: \"list_all P xs = (\\<forall>i<length xs. P (xs ! i))\"", "lemma expand_list_eq: \"\n  \\<And>ys. (xs = ys) = (length xs = length ys \\<and> (\\<forall>i<length xs. xs ! i = ys ! i))\"", "lemmas list_eq_iff = expand_list_eq", "lemma list_take_drop_imp_eq: \"\n  \\<lbrakk> xs \\<down> n = ys \\<down> n;  xs \\<up> n = ys \\<up> n \\<rbrakk> \\<Longrightarrow> xs = ys\"", "lemma list_take_drop_eq_conv: \"\n  (xs = ys) = (\\<exists>n. (xs \\<down> n = ys \\<down> n \\<and> xs \\<up> n = ys \\<up> n))\"", "lemma list_take_eq_conv: \"(xs = ys) = (\\<forall>n. xs \\<down> n = ys \\<down> n)\"", "lemma list_drop_eq_conv: \"(xs = ys) = (\\<forall>n. xs \\<up> n = ys \\<up> n)\"", "lemma replicate_snoc: \"x\\<^bsup>n\\<^esup> @ [x] = x\\<^bsup>Suc n\\<^esup>\"", "lemma eq_replicate_conv: \"(\\<forall>i<length xs. xs ! i = m) = (xs = m\\<^bsup>length xs\\<^esup>)\"", "lemma replicate_Cons_length: \"length (x # a\\<^bsup>n\\<^esup>) = Suc n\"", "lemma replicate_pred_Cons_length: \"0 < n \\<Longrightarrow> length (x # a\\<^bsup>n - Suc 0\\<^esup>) = n\"", "lemma replicate_le_diff: \"m \\<le> n \\<Longrightarrow> x\\<^bsup>m\\<^esup> @ x\\<^bsup>n - m\\<^esup> = x\\<^bsup>n\\<^esup>\"", "lemma replicate_le_diff2: \"\\<lbrakk> k \\<le> m; m \\<le> n \\<rbrakk> \\<Longrightarrow> x\\<^bsup>m - k\\<^esup> @ x\\<^bsup>n - m\\<^esup> = x\\<^bsup>n - k\\<^esup>\"", "lemma append_constant_length_induct_aux: \"\\<And>xs.\n  \\<lbrakk> length xs div k = n; \\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n    \\<And>xs ys. \\<lbrakk> length xs = k; P ys \\<rbrakk> \\<Longrightarrow> P (xs @ ys) \\<rbrakk> \\<Longrightarrow> P xs\"", "lemma append_constant_length_induct: \"\n  \\<lbrakk> \\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n    \\<And>xs ys. \\<lbrakk> length xs = k; P ys \\<rbrakk> \\<Longrightarrow> P (xs @ ys) \\<rbrakk> \\<Longrightarrow> P xs\"", "lemma zip_swap: \"map (\\<lambda>(y,x). (x,y)) (zip ys xs) = (zip xs ys)\"", "lemma zip_takeL: \"(zip xs ys) \\<down> n = zip (xs \\<down> n) ys\"", "lemma zip_takeR: \"(zip xs ys) \\<down> n = zip xs (ys \\<down> n)\"", "lemma zip_take: \"(zip xs ys) \\<down> n = zip (xs \\<down> n) (ys \\<down> n)\"", "lemma hd_zip: \"\\<lbrakk> xs \\<noteq> []; ys \\<noteq> [] \\<rbrakk> \\<Longrightarrow> hd (zip xs ys) = (hd xs, hd ys)\"", "lemma map_id: \"map id xs = xs\"", "lemma map_id_subst: \"P (map id xs) \\<Longrightarrow> P xs\"", "lemma map_one: \"map f [x] = [f x]\"", "lemma map_last: \"xs \\<noteq> [] \\<Longrightarrow> last (map f xs) = f (last xs)\"", "lemma filter_list_all: \"list_all P xs \\<Longrightarrow> filter P xs = xs\"", "lemma filter_snoc: \"filter P (xs @ [x]) = (if P x then (filter P xs) @ [x] else filter P xs)\"", "lemma filter_filter_eq: \"list_all (\\<lambda>x. P x = Q x) xs \\<Longrightarrow> filter P xs = filter Q xs\"", "lemma filter_nth: \"\\<And>n.\n  n < length (filter P xs) \\<Longrightarrow>\n  (filter P xs) ! n =\n  xs ! (LEAST k.\n    k < length xs \\<and>\n    n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)})\"", "lemma list_ord_Nil: \"list_ord ord []\"", "lemma list_ord_one: \"list_ord ord [x]\"", "lemma list_ord_Cons: \"\n  list_ord ord (x # xs) =\n  (xs = [] \\<or> (ord x (hd xs) \\<and> list_ord ord xs))\"", "lemma list_ord_Cons_imp: \"\\<lbrakk> list_ord ord xs; ord x (hd xs) \\<rbrakk> \\<Longrightarrow> list_ord ord (x # xs)\"", "lemma list_ord_append: \"\\<And>ys.\n  list_ord ord (xs @ ys) =\n  (list_ord ord xs \\<and>\n  (ys = [] \\<or> (list_ord ord ys \\<and> (xs = [] \\<or> ord (last xs) (hd ys)))))\"", "lemma list_ord_snoc: \"\n  list_ord ord (xs @ [x]) =\n  (xs = [] \\<or> (ord (last xs) x \\<and> list_ord ord xs))\"", "lemma list_ord_all_conv: \"\n  (list_ord ord xs) = (\\<forall>n < length xs - 1. ord (xs ! n) (xs ! Suc n))\"", "lemma list_ord_imp: \"\n  \\<lbrakk> \\<And>x y. ord x y \\<Longrightarrow> ord' x y; list_ord ord xs \\<rbrakk> \\<Longrightarrow>\n  list_ord ord' xs\"", "lemma list_ord_trans_imp: \"\\<And>i.\n  \\<lbrakk> transP ord; list_ord ord xs; j < length xs; i < j \\<rbrakk> \\<Longrightarrow>\n  ord (xs ! i) (xs ! j)\"", "lemma list_ord_trans: \"\n  transP ord \\<Longrightarrow>\n  (list_ord ord xs) =\n  (\\<forall>j < length xs. \\<forall>i < j. ord (xs ! i) (xs ! j))\"", "lemma list_ord_trans_refl_le: \"\n  \\<lbrakk> transP ord; reflP ord \\<rbrakk> \\<Longrightarrow>\n  (list_ord ord xs) =\n  (\\<forall>j < length xs. \\<forall>i \\<le> j. ord (xs ! i) (xs ! j))\"", "lemma list_ord_trans_refl_le_imp: \"\n  \\<lbrakk> transP ord; \\<And>x y. ord x y \\<Longrightarrow> ord' x y; reflP ord';\n    list_ord ord xs \\<rbrakk> \\<Longrightarrow>\n  (\\<forall>j < length xs. \\<forall>i \\<le> j. ord' (xs ! i) (xs ! j))\"", "lemma list_ord_le_sorted_eq: \"list_asc xs = sorted xs\"", "lemma list_strict_asc_upt: \"list_strict_asc [m..<n]\"", "lemma list_ord_distinct_aux: \"\n  \\<lbrakk> irrefl {(a, b). ord a b}; transP ord; list_ord ord xs;\n    i < length xs; j < length xs; i < j \\<rbrakk> \\<Longrightarrow>\n  xs ! i \\<noteq> xs ! j\"", "lemma list_ord_distinct: \"\n  \\<lbrakk> irrefl {(a,b). ord a b}; transP ord; list_ord ord xs \\<rbrakk> \\<Longrightarrow>\n  distinct xs\"", "lemma list_strict_asc_distinct: \"list_strict_asc (xs::'a::preorder list) \\<Longrightarrow> distinct xs\"", "lemma list_strict_desc_distinct: \"list_strict_desc (xs::'a::preorder list) \\<Longrightarrow> distinct xs\"", "lemma sublist_list_length: \"length (sublist_list xs ys) = length ys\"", "lemma sublist_list_append: \"\n \\<And>zs. sublist_list xs (ys @ zs) = sublist_list xs ys @ sublist_list xs zs\"", "lemma sublist_list_Nil: \"sublist_list xs [] =[]\"", "lemma sublist_list_is_Nil_conv: \"\n  (sublist_list xs ys = []) = (ys = [])\"", "lemma sublist_list_eq_imp_length_eq: \"\n  sublist_list xs ys = sublist_list xs zs \\<Longrightarrow> length ys = length zs\"", "lemma sublist_list_nth: \"\n  \\<And>n. n < length ys \\<Longrightarrow> sublist_list xs ys ! n = xs ! (ys ! n)\"", "lemma take_drop_eq_sublist_list: \"\n  m + n \\<le> length xs \\<Longrightarrow> xs \\<up> m \\<down> n = sublist_list xs [m..<m+n]\"", "lemma sublist_list_if_sublist_list_filter_conv: \"\\<And>xs.\n  sublist_list_if xs ys = sublist_list xs (filter (\\<lambda>i. i < length xs) ys)\"", "lemma sublist_list_if_Nil_left: \"sublist_list_if [] ys = []\"", "lemma sublist_list_if_Nil_right: \"sublist_list_if xs [] = []\"", "lemma sublist_list_if_length: \"\n  length (sublist_list_if xs ys) = length (filter (\\<lambda>i. i < length xs) ys)\"", "lemma sublist_list_if_append: \"\n  sublist_list_if xs (ys @ zs) = sublist_list_if xs ys @ sublist_list_if xs zs\"", "lemma sublist_list_if_snoc: \"\n  sublist_list_if xs (ys @ [y]) = sublist_list_if xs ys @ (if y < length xs then [xs ! y] else [])\"", "lemma sublist_list_if_is_Nil_conv: \"\n  (sublist_list_if xs ys = []) = (list_all (\\<lambda>i. length xs \\<le> i) ys)\"", "lemma sublist_list_if_nth: \"\n  n < length ((filter (\\<lambda>i. i < length xs) ys)) \\<Longrightarrow>\n  sublist_list_if xs ys ! n = xs ! ((filter (\\<lambda>i. i < length xs) ys) ! n)\"", "lemma take_drop_eq_sublist_list_if: \"\n  m + n \\<le> length xs \\<Longrightarrow> xs \\<up> m \\<down> n = sublist_list_if xs [m..<m+n]\"", "lemma nths_empty_conv: \"(nths xs I = []) = (\\<forall>i\\<in>I. length xs \\<le> i)\"", "lemma nths_singleton2: \"nths xs {y} = (if y < length xs then [xs ! y] else [])\"", "lemma nths_take_eq: \"\n  \\<lbrakk> finite I; Max I < n \\<rbrakk> \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I\"", "lemma nths_drop_eq: \"\n  n \\<le> iMin I \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I\"", "lemma nths_cut_less_eq: \"\n  length xs \\<le> n \\<Longrightarrow> nths xs (I \\<down>< n) = nths xs I\"", "lemma nths_disjoint_Un: \"\n  \\<lbrakk> finite A; Max A < iMin B \\<rbrakk> \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B\"", "lemma nths_all: \"{..<length xs} \\<subseteq> I \\<Longrightarrow> nths xs I = xs\"", "lemma sublist_list_nths_eq: \"\\<And>xs.\n  list_strict_asc ys \\<Longrightarrow> sublist_list_if xs ys = nths xs (set ys)\"", "lemma set_sublist_list_if: \"\\<And>xs. set (sublist_list_if xs ys) = {xs ! i |i. i < length xs \\<and> i \\<in> set ys}\"", "lemma set_sublist_list: \"\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n  set (sublist_list xs ys) = {xs ! i |i. i < length xs \\<and> i \\<in> set ys}\"", "lemma set_sublist_list_if_eq_set_sublist: \"set (sublist_list_if xs ys) = set (nths xs (set ys))\"", "lemma set_sublist_list_eq_set_sublist: \"\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n  set (sublist_list xs ys) = set (nths xs (set ys))\"", "lemma f_image_eqI[simp, intro]: \"\n  \\<lbrakk> x = xs ! n; n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> x \\<in> xs `\\<^sup>f A\"", "lemma f_imageI: \"\\<lbrakk> n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> xs ! n \\<in> xs `\\<^sup>f A\"", "lemma rev_f_imageI: \"\\<lbrakk> n \\<in> A; n < length xs; x = xs ! n \\<rbrakk> \\<Longrightarrow> x \\<in> xs `\\<^sup>f A\"", "lemma f_imageE[elim!]: \"\n  \\<lbrakk> x \\<in> xs `\\<^sup>f A; \\<And>n. \\<lbrakk> x = xs ! n; n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma f_image_Un: \"xs `\\<^sup>f (A \\<union> B) = xs `\\<^sup>f A \\<union> xs `\\<^sup>f B\"", "lemma f_image_mono: \"A \\<subseteq> B ==> xs `\\<^sup>f A \\<subseteq> xs `\\<^sup>f B\"", "lemma f_image_iff: \"(x \\<in> xs `\\<^sup>f A) = (\\<exists>n\\<in>A. n < length xs \\<and> x = xs ! n)\"", "lemma f_image_subset_iff: \"\n  (xs `\\<^sup>f A \\<subseteq> B) = (\\<forall>n\\<in>A. n < length xs \\<longrightarrow> xs ! n \\<in> B)\"", "lemma subset_f_image_iff: \"(B \\<subseteq> xs `\\<^sup>f A) = (\\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A')\"", "lemma f_image_subsetI: \"\n  \\<lbrakk> \\<And>n. n \\<in> A \\<and> n < length xs \\<Longrightarrow> xs ! n \\<in> B \\<rbrakk> \\<Longrightarrow> xs `\\<^sup>f A \\<subseteq> B\"", "lemma f_image_empty: \"xs `\\<^sup>f {} = {}\"", "lemma f_image_insert_if: \"\n  xs `\\<^sup>f (insert n A) = (\n  if n < length xs then insert (xs ! n) (xs `\\<^sup>f A) else (xs `\\<^sup>f A))\"", "lemma f_image_insert_eq1: \"\n  n < length xs \\<Longrightarrow> xs `\\<^sup>f (insert n A) = insert (xs ! n) (xs `\\<^sup>f A)\"", "lemma f_image_insert_eq2: \"\n  length xs \\<le> n \\<Longrightarrow> xs `\\<^sup>f (insert n A) = (xs `\\<^sup>f A)\"", "lemma insert_f_image: \"\n  \\<lbrakk> n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> insert (xs ! n) (xs `\\<^sup>f A) = (xs `\\<^sup>f A)\"", "lemma f_image_is_empty: \"(xs `\\<^sup>f A = {}) = ({x. x \\<in> A \\<and> x < length xs} = {})\"", "lemma f_image_Collect: \"xs `\\<^sup>f {n. P n} = {xs ! n |n. P n \\<and> n < length xs}\"", "lemma f_image_eq_set: \"\\<forall>n<length xs. n \\<in> A \\<Longrightarrow> xs `\\<^sup>f A = set xs\"", "lemma f_range_eq_set: \"f_range xs = set xs\"", "lemma f_image_eq_set_nths: \"xs `\\<^sup>f A = set (nths xs A)\"", "lemma f_image_eq_set_sublist_list_if: \"xs `\\<^sup>f (set ys) = set (sublist_list_if xs ys)\"", "lemma f_image_eq_set_sublist_list: \"\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow> xs `\\<^sup>f (set ys) = set (sublist_list xs ys)\"", "lemma f_range_eqI: \"\\<lbrakk> x = xs ! n; n < length xs \\<rbrakk> \\<Longrightarrow> x \\<in> f_range xs\"", "lemma f_rangeI: \"n < length xs \\<Longrightarrow> xs ! n \\<in> f_range xs\"", "lemma f_rangeE[elim?]: \"\n  \\<lbrakk> x \\<in> f_range xs; \\<And>n. \\<lbrakk> n < length xs; x = xs ! n \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma map_list_Nil: \"map_list [] xs = []\"", "lemma map_list_Cons_Cons: \"\n  map_list (f # fs) (x # xs) =\n  (f x) # map_list fs xs\"", "lemma map_list_length: \"\\<And>xs.\n  length (map_list fs xs) = length fs\"", "lemma map_list_nth: \"\\<And>n xs.\n  \\<lbrakk> n < length fs; n < length xs \\<rbrakk> \\<Longrightarrow>\n  (map_list fs xs ! n) =\n  (fs ! n) (xs ! n)\"", "lemma map_list_xs_take: \"\\<And>n xs.\n  length fs \\<le> n \\<Longrightarrow>\n  map_list fs (xs \\<down> n) =\n  map_list fs xs\"", "lemma map_list_take: \"\\<And>n xs.\n  (map_list fs xs) \\<down> n =\n  (map_list (fs \\<down> n) xs)\"", "lemma map_list_take_take: \"\\<And>n xs.\n  (map_list fs xs) \\<down> n =\n  (map_list (fs \\<down> n) (xs \\<down> n))\"", "lemma map_list_drop: \"\\<And>n xs.\n  (map_list fs xs) \\<up> n =\n  (map_list (fs \\<up> n) (xs \\<up> n))\"", "lemma map_list_append_append: \"\\<And>xs1 .\n  length fs1 = length xs1 \\<Longrightarrow>\n  map_list (fs1 @ fs2) (xs1 @ xs2) =\n  map_list fs1 xs1 @\n  map_list fs2 xs2\"", "lemma map_list_snoc_snoc: \"\n  length fs = length xs \\<Longrightarrow>\n  map_list (fs @ [f]) (xs @ [x]) =\n  map_list fs xs @ [f x]\"", "lemma map_list_snoc: \"\\<And>xs.\n  length fs < length xs \\<Longrightarrow>\n  map_list (fs @ [f]) xs =\n  map_list fs xs @  [f (xs ! (length fs))]\"", "lemma map_list_Cons_if: \"\n  map_list fs (x # xs) =\n  (if (fs = []) then [] else (\n    ((hd fs) x) # map_list (tl fs) xs))\"", "lemma map_list_Cons_not_empty: \"\n  fs \\<noteq> [] \\<Longrightarrow>\n  map_list fs (x # xs) =\n  ((hd fs) x) # map_list (tl fs) xs\"", "lemma map_eq_map_list_take: \"\\<And>xs.\n  \\<lbrakk> length fs \\<le> length xs; list_all (\\<lambda>x. x = f) fs \\<rbrakk> \\<Longrightarrow>\n  map_list fs xs = map f (xs \\<down> length fs)\"", "lemma map_eq_map_list_take2: \"\n  \\<lbrakk> length fs = length xs; list_all (\\<lambda>x. x = f) fs \\<rbrakk> \\<Longrightarrow>\n  map_list fs xs = map f xs\"", "lemma map_eq_map_list_replicate: \"\n  map_list (f\\<^bsup>length xs\\<^esup>) xs = map f xs\"", "lemma map2_map_list_conv: \"\\<And>ys. map2 f xs ys = map_list (map f xs) ys\"", "lemma map2_Nil: \"map2 f [] ys = []\"", "lemma map2_Cons_Cons: \"\n  map2 f (x # xs) (y # ys) =\n  (f x y) # map2 f xs ys\"", "lemma map2_length: \"\\<And>ys. length (map2 f xs ys) = length xs\"", "lemma map2_nth: \"\\<And>n ys.\n  \\<lbrakk> n < length xs; n < length ys \\<rbrakk> \\<Longrightarrow>\n  (map2 f xs ys ! n) =\n  f (xs ! n) (ys ! n)\"", "lemma map2_ys_take: \"\\<And>n ys.\n  length xs \\<le> n \\<Longrightarrow>\n  map2 f xs (ys \\<down> n) =\n  map2 f xs ys\"", "lemma map2_take: \"\\<And>n ys.\n  (map2 f xs ys) \\<down> n =\n  (map2 f (xs \\<down> n) ys)\"", "lemma map2_take_take: \"\\<And>n ys.\n  (map2 f xs ys) \\<down> n =\n  (map2 f (xs \\<down> n) (ys \\<down> n))\"", "lemma map2_drop: \"\\<And>n ys.\n  (map2 f xs ys) \\<up> n =\n  (map2 f (xs \\<up> n) (ys \\<up> n))\"", "lemma map2_append_append: \"\\<And>ys1 .\n  length xs1 = length ys1 \\<Longrightarrow>\n  map2 f (xs1 @ xs2) (ys1 @ ys2) =\n  map2 f xs1 ys1 @\n  map2 f xs2 ys2\"", "lemma map2_snoc_snoc: \"\n  length xs = length ys \\<Longrightarrow>\n  map2 f (xs @ [x]) (ys @ [y]) =\n  map2 f xs ys @\n  [f x y]\"", "lemma map2_snoc: \"\\<And>ys.\n  length xs < length ys \\<Longrightarrow>\n  map2 f (xs @ [x]) ys =\n  map2 f xs ys @\n  [f x (ys ! (length xs))]\"", "lemma map2_Cons_if: \"\n  map2 f xs (y # ys) =\n  (if (xs = []) then [] else (\n    (f (hd xs) y) # map2 f (tl xs) ys))\"", "lemma map2_Cons_not_empty: \"\n  xs \\<noteq> [] \\<Longrightarrow>\n  map2 f xs (y # ys) =\n  (f (hd xs) y) # map2 f (tl xs) ys\"", "lemma map2_append1_take_drop: \"\n  length xs1 \\<le> length ys \\<Longrightarrow>\n  map2 f (xs1 @ xs2) ys =\n  map2 f xs1 (ys \\<down> length xs1) @\n  map2 f xs2 (ys \\<up> length xs1)\"", "lemma map2_append2_take_drop: \"\n  length ys1 \\<le> length xs \\<Longrightarrow>\n  map2 f xs (ys1 @ ys2) =\n  map2 f (xs \\<down> length ys1) ys1 @\n  map2 f (xs \\<up> length ys1) ys2\"", "lemma map2_cong: \"\n  \\<lbrakk> xs1 = xs2; ys1 = ys2; length xs2 \\<le> length ys2;\n    \\<And>x y. \\<lbrakk> x \\<in> set xs2; y \\<in> set ys2 \\<rbrakk> \\<Longrightarrow> f x y = g x y \\<rbrakk> \\<Longrightarrow>\n  map2 f xs1 ys1 = map2 g xs2 ys2\"", "lemma map2_eq_conv: \"\n  length xs \\<le> length ys \\<Longrightarrow>\n  (map2 f xs ys = map2 g xs ys) = (\\<forall>i<length xs. f (xs ! i) (ys ! i) = g (xs ! i) (ys ! i))\"", "lemma map2_replicate: \"map2 f x\\<^bsup>n\\<^esup> y\\<^bsup>n\\<^esup> = (f x y)\\<^bsup>n\\<^esup>\"", "lemma map2_zip_conv: \"\\<And>ys.\n  length xs \\<le> length ys \\<Longrightarrow>\n  map2 f xs ys = map (\\<lambda>(x,y). f x y) (zip xs ys)\"", "lemma map2_rev: \"\\<And>ys.\n  length xs = length ys \\<Longrightarrow>\n  rev (map2 f xs ys) = map2 f (rev xs) (rev ys)\""], "translations": [["", "lemma append_eq_Cons: \"[x] @ xs = x # xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] @ xs = x # xs", "by simp"], ["", "lemma length_Cons: \"length (x # xs) = Suc (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x # xs) = Suc (length xs)", "by simp"], ["", "lemma length_snoc: \"length (xs @ [x]) = Suc (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs @ [x]) = Suc (length xs)", "by simp"], ["", "subsubsection \\<open>Additional lemmata about list emptiness\\<close>"], ["", "lemma length_greater_imp_not_empty:\"n < length xs \\<Longrightarrow> xs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> xs \\<noteq> []", "by fastforce"], ["", "lemma length_ge_Suc_imp_not_empty:\"Suc n \\<le> length xs \\<Longrightarrow> xs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> length xs \\<Longrightarrow> xs \\<noteq> []", "by fastforce"], ["", "lemma length_take_le: \"length (xs \\<down> n) \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<down> n) \\<le> length xs", "by simp"], ["", "lemma take_not_empty_conv:\"(xs \\<down> n \\<noteq> []) = (0 < n \\<and> xs \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<down> n \\<noteq> []) = (0 < n \\<and> xs \\<noteq> [])", "by simp"], ["", "lemma drop_not_empty_conv:\"(xs \\<up> n \\<noteq> []) = (n < length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<up> n \\<noteq> []) = (n < length xs)", "by fastforce"], ["", "lemma zip_eq_Nil: \"(zip xs ys = []) = (xs = [] \\<or> ys = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zip xs ys = []) = (xs = [] \\<or> ys = [])", "by (force simp: length_0_conv[symmetric] min_def simp del: length_0_conv)"], ["", "lemma zip_not_empty_conv: \"(zip xs ys \\<noteq> []) = (xs \\<noteq> [] \\<and> ys \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zip xs ys \\<noteq> []) = (xs \\<noteq> [] \\<and> ys \\<noteq> [])", "by (simp add: zip_eq_Nil)"], ["", "subsubsection \\<open>Additional lemmata about @{term take}, @{term drop}, @{term hd}, @{term last}, \\<open>nth\\<close> and \\<open>filter\\<close>\\<close>"], ["", "lemma nth_tl_eq_nth_Suc: \"\n  Suc n \\<le> length xs \\<Longrightarrow> (tl xs) ! n = xs ! Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> length xs \\<Longrightarrow> tl xs ! n = xs ! Suc n", "by (rule hd_Cons_tl[OF length_ge_Suc_imp_not_empty, THEN subst], simp+)"], ["", "corollary nth_tl_eq_nth_Suc2: \"\n  n < length xs \\<Longrightarrow> (tl xs) ! n = xs ! Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> tl xs ! n = xs ! Suc n", "by (simp add: nth_tl_eq_nth_Suc)"], ["", "lemma hd_eq_first: \"xs \\<noteq> [] \\<Longrightarrow> xs ! 0 = hd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> xs ! 0 = hd xs", "by (induct xs, simp_all)"], ["", "corollary take_first:\"xs \\<noteq> [] \\<Longrightarrow> xs \\<down>  (Suc 0) = [xs ! 0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> xs \\<down> Suc 0 = [xs ! 0]", "by (induct xs, simp_all)"], ["", "corollary take_hd:\"xs \\<noteq> [] \\<Longrightarrow> xs \\<down>  (Suc 0) = [hd xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> xs \\<down> Suc 0 = [hd xs]", "by (simp add: take_first hd_eq_first)"], ["", "theorem last_nth: \"xs \\<noteq> [] \\<Longrightarrow> last xs = xs ! (length xs - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> last xs = xs ! (length xs - Suc 0)", "by (simp add: last_conv_nth)"], ["", "lemma last_take: \"n < length xs \\<Longrightarrow> last (xs \\<down> Suc n) = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> last (xs \\<down> Suc n) = xs ! n", "by (simp add: last_nth length_greater_imp_not_empty min_eqR)"], ["", "corollary last_take2:\"\n  \\<lbrakk> 0 < n; n \\<le> length xs \\<rbrakk> \\<Longrightarrow> last (xs \\<down> n) = xs ! (n - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; n \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<down> n) = xs ! (n - Suc 0)", "apply (frule diff_Suc_less[THEN order_less_le_trans, of _ \"length xs\" 0], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; n \\<le> length xs; n - Suc 0 < length xs\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<down> n) = xs ! (n - Suc 0)", "apply (drule last_take[of \"n - Suc 0\" xs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; n \\<le> length xs;\n     last (xs \\<down> Suc (n - Suc 0)) = xs ! (n - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<down> n) = xs ! (n - Suc 0)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nth_0_drop: \"n \\<le> length xs \\<Longrightarrow> (xs \\<up> n) ! 0 = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow> xs \\<up> n ! 0 = xs ! n", "by (cut_tac nth_drop[of n xs 0], simp+)"], ["", "lemma drop_eq_tl: \"xs \\<up> (Suc 0) = tl xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<up> Suc 0 = tl xs", "by (simp add: drop_Suc)"], ["", "lemma drop_take_1: \"\n  n < length xs \\<Longrightarrow> xs \\<up> n \\<down> (Suc 0) = [xs ! n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> xs \\<up> n \\<down> Suc 0 = [xs ! n]", "by (simp add: take_hd hd_drop_conv_nth)"], ["", "lemma upt_append: \"m \\<le> n \\<Longrightarrow> [0..<m] @ [m..<n] = [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> [0..<m] @ [m..<n] = [0..<n]", "by (insert upt_add_eq_append[of 0 m \"n - m\"], simp)"], ["", "lemma nth_append1: \"n < length xs \\<Longrightarrow> (xs @ ys) ! n = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> (xs @ ys) ! n = xs ! n", "by (simp add: nth_append)"], ["", "lemma nth_append2: \"length xs \\<le> n \\<Longrightarrow> (xs @ ys) ! n = ys ! (n - length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow> (xs @ ys) ! n = ys ! (n - length xs)", "by (simp add: nth_append)"], ["", "lemma list_all_conv: \"list_all P xs = (\\<forall>i<length xs. P (xs ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P xs = (\\<forall>i<length xs. P (xs ! i))", "by (rule list_all_length)"], ["", "lemma expand_list_eq: \"\n  \\<And>ys. (xs = ys) = (length xs = length ys \\<and> (\\<forall>i<length xs. xs ! i = ys ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       (xs = ys) =\n       (length xs = length ys \\<and>\n        (\\<forall>i<length xs. xs ! i = ys ! i))", "by (rule list_eq_iff_nth_eq)"], ["", "lemmas list_eq_iff = expand_list_eq"], ["", "lemma list_take_drop_imp_eq: \"\n  \\<lbrakk> xs \\<down> n = ys \\<down> n;  xs \\<up> n = ys \\<up> n \\<rbrakk> \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<down> n = ys \\<down> n; xs \\<up> n = ys \\<up> n\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "apply (rule subst[OF append_take_drop_id[of n xs]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<down> n = ys \\<down> n; xs \\<up> n = ys \\<up> n\\<rbrakk>\n    \\<Longrightarrow> xs \\<down> n @ xs \\<up> n = ys", "apply (rule subst[OF append_take_drop_id[of n ys]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<down> n = ys \\<down> n; xs \\<up> n = ys \\<up> n\\<rbrakk>\n    \\<Longrightarrow> xs \\<down> n @ xs \\<up> n = ys \\<down> n @ ys \\<up> n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_take_drop_eq_conv: \"\n  (xs = ys) = (\\<exists>n. (xs \\<down> n = ys \\<down> n \\<and> xs \\<up> n = ys \\<up> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = ys) =\n    (\\<exists>n. xs \\<down> n = ys \\<down> n \\<and> xs \\<up> n = ys \\<up> n)", "by (blast intro: list_take_drop_imp_eq)"], ["", "lemma list_take_eq_conv: \"(xs = ys) = (\\<forall>n. xs \\<down> n = ys \\<down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = ys) = (\\<forall>n. xs \\<down> n = ys \\<down> n)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. xs \\<down> n = ys \\<down> n \\<Longrightarrow> xs = ys", "apply (drule_tac x=\"max (length xs) (length ys)\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> max (length xs) (length ys) =\n    ys \\<down> max (length xs) (length ys) \\<Longrightarrow>\n    xs = ys", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_drop_eq_conv: \"(xs = ys) = (\\<forall>n. xs \\<up> n = ys \\<up> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = ys) = (\\<forall>n. xs \\<up> n = ys \\<up> n)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. xs \\<up> n = ys \\<up> n \\<Longrightarrow> xs = ys", "apply (drule_tac x=0 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<up> 0 = ys \\<up> 0 \\<Longrightarrow> xs = ys", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "abbreviation replicate' :: \"'a \\<Rightarrow> nat \\<Rightarrow> 'a list\"  (\"_\\<^bsup>_\\<^esup>\" [1000,65])\n  where \"x\\<^bsup>n\\<^esup> \\<equiv> replicate n x\""], ["", "lemma replicate_snoc: \"x\\<^bsup>n\\<^esup> @ [x] = x\\<^bsup>Suc n\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^bsup>n\\<^esup> @ [x] = x\\<^bsup>Suc n\\<^esup>", "by (simp add: replicate_app_Cons_same)"], ["", "lemma eq_replicate_conv: \"(\\<forall>i<length xs. xs ! i = m) = (xs = m\\<^bsup>length xs\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i<length xs. xs ! i = m) = (xs = m\\<^bsup>length xs\\<^esup>)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>i<length xs. xs ! i = m \\<Longrightarrow>\n    xs = m\\<^bsup>length xs\\<^esup>\n 2. xs = m\\<^bsup>length xs\\<^esup> \\<Longrightarrow>\n    \\<forall>i<length xs. xs ! i = m", "apply (simp add: expand_list_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = m\\<^bsup>length xs\\<^esup> \\<Longrightarrow>\n    \\<forall>i<length xs. xs ! i = m", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>xs = m\\<^bsup>length xs\\<^esup>; i < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! i = m", "apply (rule ssubst[of xs \"replicate (length xs) m\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>xs = m\\<^bsup>length xs\\<^esup>; i < length xs\\<rbrakk>\n       \\<Longrightarrow> m\\<^bsup>length xs\\<^esup> ! i = m", "apply (rule nth_replicate, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma replicate_Cons_length: \"length (x # a\\<^bsup>n\\<^esup>) = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x # a\\<^bsup>n\\<^esup>) = Suc n", "by simp"], ["", "lemma replicate_pred_Cons_length: \"0 < n \\<Longrightarrow> length (x # a\\<^bsup>n - Suc 0\\<^esup>) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> length (x # a\\<^bsup>n - Suc 0\\<^esup>) = n", "by simp"], ["", "lemma replicate_le_diff: \"m \\<le> n \\<Longrightarrow> x\\<^bsup>m\\<^esup> @ x\\<^bsup>n - m\\<^esup> = x\\<^bsup>n\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow>\n    x\\<^bsup>m\\<^esup> @ x\\<^bsup>n - m\\<^esup> = x\\<^bsup>n\\<^esup>", "by (simp add: replicate_add[symmetric])"], ["", "lemma replicate_le_diff2: \"\\<lbrakk> k \\<le> m; m \\<le> n \\<rbrakk> \\<Longrightarrow> x\\<^bsup>m - k\\<^esup> @ x\\<^bsup>n - m\\<^esup> = x\\<^bsup>n - k\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> m; m \\<le> n\\<rbrakk>\n    \\<Longrightarrow> x\\<^bsup>m - k\\<^esup> @ x\\<^bsup>n - m\\<^esup> =\n                      x\\<^bsup>n - k\\<^esup>", "by (subst replicate_add[symmetric], simp)"], ["", "lemma append_constant_length_induct_aux: \"\\<And>xs.\n  \\<lbrakk> length xs div k = n; \\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n    \\<And>xs ys. \\<lbrakk> length xs = k; P ys \\<rbrakk> \\<Longrightarrow> P (xs @ ys) \\<rbrakk> \\<Longrightarrow> P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>length xs div k = n;\n        \\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys)\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (case_tac \"k = 0\", blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>length xs div k = n;\n        \\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>length xs div k = n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>length xs div k = 0;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> P xs\n 2. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (simp add: div_eq_0_conv')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (subgoal_tac \"k \\<le> length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k; k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> P xs\n 2. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> length xs\n 2. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k; k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (rule div_gr_imp_gr_divisor[of 0], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs div k = n;\n                    \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n                    \\<And>xs ys.\n                       \\<lbrakk>length xs = k; P ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ ys);\n                    0 < k\\<rbrakk>\n                   \\<Longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<And>ys. length ys < k \\<Longrightarrow> P ys;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = k; P ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ ys);\n        0 < k; k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (simp only: atomize_all atomize_imp, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<forall>xs. length xs div k = n \\<longrightarrow> P xs;\n        length xs div k = Suc n;\n        \\<forall>ys. length ys < k \\<longrightarrow> P ys;\n        \\<forall>xs.\n           length xs = k \\<longrightarrow>\n           (\\<forall>ys. P ys \\<longrightarrow> P (xs @ ys));\n        0 < k; k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (erule_tac x=\"drop k xs\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>length xs div k = Suc n;\n        \\<forall>ys. length ys < k \\<longrightarrow> P ys;\n        \\<forall>xs.\n           length xs = k \\<longrightarrow>\n           (\\<forall>ys. P ys \\<longrightarrow> P (xs @ ys));\n        0 < k; k \\<le> length xs;\n        length (xs \\<up> k) div k = n \\<longrightarrow>\n        P (xs \\<up> k)\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (simp add: div_diff_self2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>length xs div k = Suc n;\n        \\<forall>ys. length ys < k \\<longrightarrow> P ys;\n        \\<forall>xs.\n           length xs = k \\<longrightarrow>\n           (\\<forall>ys. P ys \\<longrightarrow> P (xs @ ys));\n        0 < k; k \\<le> length xs; P (xs \\<up> k)\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (erule_tac x=undefined in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>length xs div k = Suc n;\n        \\<forall>xs.\n           length xs = k \\<longrightarrow>\n           (\\<forall>ys. P ys \\<longrightarrow> P (xs @ ys));\n        0 < k; k \\<le> length xs; P (xs \\<up> k);\n        length undefined < k \\<longrightarrow> P undefined\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (erule_tac x=\"take k xs\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>length xs div k = Suc n; 0 < k; k \\<le> length xs;\n        P (xs \\<up> k); length undefined < k \\<longrightarrow> P undefined;\n        length (xs \\<down> k) = k \\<longrightarrow>\n        (\\<forall>ys. P ys \\<longrightarrow> P (xs \\<down> k @ ys))\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>length xs div k = Suc n; 0 < k; k \\<le> length xs;\n        P (xs \\<up> k); length undefined < k \\<longrightarrow> P undefined;\n        \\<forall>ys. P ys \\<longrightarrow> P (xs \\<down> k @ ys)\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply (erule_tac x=\"drop k xs\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>length xs div k = Suc n; 0 < k; k \\<le> length xs;\n        P (xs \\<up> k); length undefined < k \\<longrightarrow> P undefined;\n        P (xs \\<up> k) \\<longrightarrow>\n        P (xs \\<down> k @ xs \\<up> k)\\<rbrakk>\n       \\<Longrightarrow> P xs", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma append_constant_length_induct: \"\n  \\<lbrakk> \\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n    \\<And>xs ys. \\<lbrakk> length xs = k; P ys \\<rbrakk> \\<Longrightarrow> P (xs @ ys) \\<rbrakk> \\<Longrightarrow> P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ys. k = 0 \\<or> length ys < k \\<Longrightarrow> P ys;\n     \\<And>xs ys.\n        \\<lbrakk>length xs = k; P ys\\<rbrakk>\n        \\<Longrightarrow> P (xs @ ys)\\<rbrakk>\n    \\<Longrightarrow> P xs", "by (simp add: append_constant_length_induct_aux[of _ _ \"length xs div k\"])"], ["", "lemma zip_swap: \"map (\\<lambda>(y,x). (x,y)) (zip ys xs) = (zip xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 (\\<lambda>y x. (x, y)) ys xs = zip xs ys", "by (simp add: expand_list_eq)"], ["", "lemma zip_takeL: \"(zip xs ys) \\<down> n = zip (xs \\<down> n) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip xs ys \\<down> n = zip (xs \\<down> n) ys", "by (simp add: expand_list_eq)"], ["", "lemma zip_takeR: \"(zip xs ys) \\<down> n = zip xs (ys \\<down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip xs ys \\<down> n = zip xs (ys \\<down> n)", "apply (subst zip_swap[of ys, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 (\\<lambda>y x. (x, y)) ys xs \\<down> n = zip xs (ys \\<down> n)", "apply (subst take_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(y, x). (x, y)) (zip ys xs \\<down> n) =\n    zip xs (ys \\<down> n)", "apply (subst zip_takeL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 (\\<lambda>y x. (x, y)) (ys \\<down> n) xs = zip xs (ys \\<down> n)", "apply (simp add: zip_swap)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zip_take: \"(zip xs ys) \\<down> n = zip (xs \\<down> n) (ys \\<down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip xs ys \\<down> n = zip (xs \\<down> n) (ys \\<down> n)", "by (rule take_zip)"], ["", "lemma hd_zip: \"\\<lbrakk> xs \\<noteq> []; ys \\<noteq> [] \\<rbrakk> \\<Longrightarrow> hd (zip xs ys) = (hd xs, hd ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; ys \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> hd (zip xs ys) = (hd xs, hd ys)", "by (simp add: hd_conv_nth zip_not_empty_conv)"], ["", "lemma map_id: \"map id xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map id xs = xs", "by (simp add: id_def)"], ["", "lemma map_id_subst: \"P (map id xs) \\<Longrightarrow> P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (map id xs) \\<Longrightarrow> P xs", "by (subst map_id[symmetric])"], ["", "lemma map_one: \"map f [x] = [f x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f [x] = [f x]", "by simp"], ["", "lemma map_last: \"xs \\<noteq> [] \\<Longrightarrow> last (map f xs) = f (last xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> last (map f xs) = f (last xs)", "by (rule last_map)"], ["", "lemma filter_list_all: \"list_all P xs \\<Longrightarrow> filter P xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P xs \\<Longrightarrow> filter P xs = xs", "by (induct xs, simp+)"], ["", "lemma filter_snoc: \"filter P (xs @ [x]) = (if P x then (filter P xs) @ [x] else filter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P (xs @ [x]) = (if P x then filter P xs @ [x] else filter P xs)", "by (case_tac \"P x\", simp+)"], ["", "lemma filter_filter_eq: \"list_all (\\<lambda>x. P x = Q x) xs \\<Longrightarrow> filter P xs = filter Q xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. P x = Q x) xs \\<Longrightarrow>\n    filter P xs = filter Q xs", "by (induct xs, simp+)"], ["", "lemma filter_nth: \"\\<And>n.\n  n < length (filter P xs) \\<Longrightarrow>\n  (filter P xs) ! n =\n  xs ! (LEAST k.\n    k < length xs \\<and>\n    n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length (filter P xs) \\<Longrightarrow>\n       filter P xs ! n =\n       xs !\n       (LEAST k.\n           k < length xs \\<and>\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)})", "apply (induct xs rule: rev_induct, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (filter P (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> filter P (xs @ [x]) ! n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length (xs @ [x]) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length (xs @ [x]) \\<and> P ((xs @ [x]) ! i)})", "apply (rename_tac x xs n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (filter P (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> filter P (xs @ [x]) ! n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length (xs @ [x]) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length (xs @ [x]) \\<and> P ((xs @ [x]) ! i)})", "apply (simp only: filter_snoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length (xs @ [x]) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length (xs @ [x]) \\<and> P ((xs @ [x]) ! i)})", "apply (simp split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply (case_tac \"xs = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply (simp split del: if_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         [x] !\n                         (LEAST k.\n                             k = 0 \\<and>\n                             n < card\n                                  {i. i = 0 \\<and>\ni \\<le> k \\<and> P ([x] ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply (rule_tac\n   t = \"\\<lambda>k i. i = 0 \\<and> i \\<le> k \\<and> P ([x] ! i)\" and\n   s = \"\\<lambda>k i. i = 0 \\<and> P x\"\n   in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k i. i = 0 \\<and> P x) =\n                         (\\<lambda>k i.\n                             i = 0 \\<and> i \\<le> k \\<and> P ([x] ! i))\n 2. \\<And>x xs n.\n       \\<lbrakk>n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         [x] !\n                         (LEAST k.\n                             k = 0 \\<and> n < card {i. i = 0 \\<and> P x})\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa xb.\n                            (xb = 0 \\<and> P x) =\n                            (xb = 0 \\<and> xb \\<le> xa \\<and> P ([x] ! xb))\n 2. \\<And>x xs n.\n       \\<lbrakk>n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         [x] !\n                         (LEAST k.\n                             k = 0 \\<and> n < card {i. i = 0 \\<and> P x})\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         [x] !\n                         (LEAST k.\n                             k = 0 \\<and> n < card {i. i = 0 \\<and> P x})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply (fastforce simp: Least_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < Suc (length xs) \\<and> P ((xs @ [x]) ! i)})", "apply (rule_tac\n  t = \"\\<lambda>k. card {i. i \\<le> k \\<and> i < Suc (length xs) \\<and> P ((xs @ [x]) ! i)}\" and\n  s = \"\\<lambda>k. (card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)} +\n           (if k \\<ge> length xs \\<and> P x then Suc 0 else 0))\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k.\n                             card\n                              {i. i \\<le> k \\<and>\n                                  i < length xs \\<and> P (xs ! i)} +\n                             (if length xs \\<le> k \\<and> P x then Suc 0\n                              else 0)) =\n                         (\\<lambda>k.\n                             card\n                              {i. i \\<le> k \\<and>\n                                  i < Suc (length xs) \\<and>\n                                  P ((xs @ [x]) ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (clarsimp simp: fun_eq_iff split del: if_split, rename_tac k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < Suc (length xs) \\<and> P ((xs @ [x]) ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (simp split del: if_split add: less_Suc_eq conj_disj_distribL conj_disj_distribR Collect_disj_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          ({i. i \\<le> k \\<and>\n                               i < length xs \\<and>\n                               P ((xs @ [x]) ! i)} \\<union>\n                           {i. i = length xs \\<and>\n                               i \\<le> k \\<and> P ((xs @ [x]) ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (subst card_Un_disjoint)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P ((xs @ [x]) ! i)}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 3. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> k \\<and>\n                             i < length xs \\<and>\n                             P ((xs @ [x]) ! i)} \\<inter>\n                         {i. i = length xs \\<and>\n                             i \\<le> k \\<and> P ((xs @ [x]) ! i)} =\n                         {}\n 4. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P ((xs @ [x]) ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 5. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac n=\"length xs\" in bounded_nat_set_is_finite, blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> k \\<and>\n                             i < length xs \\<and>\n                             P ((xs @ [x]) ! i)} \\<inter>\n                         {i. i = length xs \\<and>\n                             i \\<le> k \\<and> P ((xs @ [x]) ! i)} =\n                         {}\n 3. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P ((xs @ [x]) ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 4. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac n=\"Suc (length xs)\" in bounded_nat_set_is_finite, blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> k \\<and>\n                             i < length xs \\<and>\n                             P ((xs @ [x]) ! i)} \\<inter>\n                         {i. i = length xs \\<and>\n                             i \\<le> k \\<and> P ((xs @ [x]) ! i)} =\n                         {}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P ((xs @ [x]) ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P ((xs @ [x]) ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac\n   t = \"\\<lambda>i. i < length xs \\<and> P ((xs @ [x]) ! i)\" and\n   s = \"\\<lambda>i. i < length xs \\<and> P (xs ! i)\"\n   in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i. i < length xs \\<and> P (xs ! i)) =\n                         (\\<lambda>i.\n                             i < length xs \\<and> P ((xs @ [x]) ! i))\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule fun_eq_iff[THEN iffD2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            (xa < length xs \\<and> P (xs ! xa)) =\n                            (xa < length xs \\<and> P ((xs @ [x]) ! xa))\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (fastforce simp: nth_append1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)} +\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule add_left_cancel[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card\n                          {i. i = length xs \\<and>\n                              i \\<le> k \\<and> P ((xs @ [x]) ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac\n   t = \"\\<lambda>i. i = length xs \\<and> i \\<le> k \\<and> P ((xs @ [x]) ! i)\" and\n   s = \"\\<lambda>i. i = length xs \\<and> i \\<le> k \\<and> P x\"\n   in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i.\n                             i = length xs \\<and> i \\<le> k \\<and> P x) =\n                         (\\<lambda>i.\n                             i = length xs \\<and>\n                             i \\<le> k \\<and> P ((xs @ [x]) ! i))\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule fun_eq_iff[THEN iffD2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            (xa = length xs \\<and> xa \\<le> k \\<and> P x) =\n                            (xa = length xs \\<and>\n                             xa \\<le> k \\<and> P ((xs @ [x]) ! xa))\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (case_tac \"length xs \\<le> k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> []; length xs \\<le> k;\n        P x\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = card {i. i = length xs \\<and> i \\<le> k}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac\n    t = \"\\<lambda>i. i = length xs \\<and> i \\<le> k\" and\n    s = \"\\<lambda>i. i = length xs\"\n    in subst)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> []; length xs \\<le> k;\n        P x\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i. i = length xs) =\n                         (\\<lambda>i. i = length xs \\<and> i \\<le> k)\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> []; length xs \\<le> k;\n        P x\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = card {i. i = length xs}\n 3. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 4. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule fun_eq_iff[THEN iffD2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> []; length xs \\<le> k;\n        P x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            (x = length xs) =\n                            (x = length xs \\<and> x \\<le> k)\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> []; length xs \\<le> k;\n        P x\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = card {i. i = length xs}\n 3. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 4. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> []; length xs \\<le> k;\n        P x\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = card {i. i = length xs}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> length xs \\<le> k\\<rbrakk>\n       \\<Longrightarrow> (if length xs \\<le> k \\<and> P x then Suc 0\n                          else 0) =\n                         card {i. i = length xs \\<and> i \\<le> k \\<and> P x}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < Suc (length xs) \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (simp split del: if_split add: less_Suc_eq conj_disj_distribL conj_disj_distribR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0) \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac\n  t = \"\\<lambda>k. k < length xs \\<and>\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)} + (if length xs \\<le> k \\<and> P x then Suc 0 else 0)\" and\n  s = \"\\<lambda>k. k < length xs \\<and> n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (\\<lambda>k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))", "apply (rule_tac\n  t = \"\\<lambda>k. k = length xs \\<and>\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)} + (if length xs \\<le> k \\<and> P x then Suc 0 else 0)\" and\n  s = \"\\<lambda>k. k = length xs \\<and>\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)} + (if P x then Suc 0 else 0)\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k.\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0)) =\n                         (\\<lambda>k.\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if length xs \\<le> k \\<and> P x then Suc 0\n                                  else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (case_tac \"n < length (filter P xs)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (rule_tac\n   t = \"(if P x then filter P xs @ [x] else filter P xs) ! n\" and\n   s = \"(filter P xs) ! n\"\n   in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> filter P xs ! n =\n                         (if P x then filter P xs @ [x] else filter P xs) !\n                         n\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> filter P xs ! n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (simp add: nth_append1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> filter P xs ! n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (simp split del: if_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (subgoal_tac \"\\<exists>k<length xs. n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k<length xs.\n                            n < card\n                                 {i. i \\<le> k \\<and>\n                                     i < length xs \\<and> P (xs ! i)}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k<length xs.\n                            n < card\n                                 {i. i \\<le> k \\<and>\n                                     i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (rule_tac x=\"length xs - Suc 0\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> length xs - Suc 0 < length xs \\<and>\n                         n < card\n                              {i. i \\<le> length xs - Suc 0 \\<and>\n                                  i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (simp add: length_filter_conv_card less_eq_le_pred[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (subgoal_tac \"\\<exists>k\\<le>length xs. n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k\\<le>length xs.\n                            n < card\n                                 {i. i \\<le> k \\<and>\n                                     i < length xs \\<and> P (xs ! i)}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k\\<le>length xs.\n                            n < card\n                                 {i. i \\<le> k \\<and>\n                                     i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (blast intro: less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (subst Least_le_imp_le_disj)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x<length xs.\n                            n < card\n                                 {i. i \\<le> x \\<and>\n                                     i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n xa y.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        xa < length xs \\<and>\n        n < card {i. i \\<le> xa \\<and> i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        n < card {i. i \\<le> y \\<and> i < length xs \\<and> P (xs ! i)} +\n            (if P x then Suc 0 else 0)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> y\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST x.\n                             x < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> x \\<and>\ni < length xs \\<and> P (xs ! i)})\n 4. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n xa y.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        xa < length xs \\<and>\n        n < card {i. i \\<le> xa \\<and> i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        n < card {i. i \\<le> y \\<and> i < length xs \\<and> P (xs ! i)} +\n            (if P x then Suc 0 else 0)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> y\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST x.\n                             x < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> x \\<and>\ni < length xs \\<and> P (xs ! i)})\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)}) =\n                         (xs @ [x]) !\n                         (LEAST x.\n                             x < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> x \\<and>\ni < length xs \\<and> P (xs ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (rule sym, rule nth_append1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card\n                {i. i \\<le> k \\<and>\n                    i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> (LEAST x.\n                             x < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> x \\<and>\ni < length xs \\<and> P (xs ! i)})\n                         < length xs\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (rule LeastI2_ex, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n xa.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; n < length (filter P xs);\n        \\<exists>k<length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        \\<exists>k\\<le>length xs.\n           n < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)};\n        xa < length xs \\<and>\n        n < card\n             {i. i \\<le> xa \\<and> i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> xa < length xs\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; \\<not> n < length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (if P x then filter P xs @ [x] else filter P xs) !\n                         n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} +\n                                 (if P x then Suc 0 else 0))", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length (filter P xs) \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (P x \\<longrightarrow>\n                          (filter P xs @ [x]) ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < Suc (card\n  {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))) \\<and>\n                         (\\<not> P x \\<longrightarrow>\n                          filter P xs ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)}))", "apply (subgoal_tac \"P x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length (filter P xs) \\<le> n; P x\\<rbrakk>\n       \\<Longrightarrow> (P x \\<longrightarrow>\n                          (filter P xs @ [x]) ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < Suc (card\n  {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))) \\<and>\n                         (\\<not> P x \\<longrightarrow>\n                          filter P xs ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)}))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length (filter P xs) \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P x", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length (filter P xs) \\<le> n\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length (filter P xs) \\<le> n; P x\\<rbrakk>\n       \\<Longrightarrow> (P x \\<longrightarrow>\n                          (filter P xs @ [x]) ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < Suc (card\n  {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))) \\<and>\n                         (\\<not> P x \\<longrightarrow>\n                          filter P xs ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)}))", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < length (if P x then filter P xs @ [x] else filter P xs);\n        xs \\<noteq> []; length (filter P xs) \\<le> n; P x\\<rbrakk>\n       \\<Longrightarrow> (P x \\<longrightarrow>\n                          (filter P xs @ [x]) ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < Suc (card\n  {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))) \\<and>\n                         (\\<not> P x \\<longrightarrow>\n                          filter P xs ! n =\n                          (xs @ [x]) !\n                          (LEAST k.\n                              k < length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)} \\<or>\n                              k = length xs \\<and>\n                              n < card\n                                   {i. i \\<le> k \\<and>\n i < length xs \\<and> P (xs ! i)}))", "apply (simp add: length_snoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        n < Suc (length (filter P xs)); xs \\<noteq> [];\n        length (filter P xs) \\<le> n; P x\\<rbrakk>\n       \\<Longrightarrow> (filter P xs @ [x]) ! n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < Suc (card\n {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (drule less_Suc_eq_le[THEN iffD1], drule_tac x=n in order_antisym, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; length (filter P xs) \\<le> n; P x;\n        n = length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> (filter P xs @ [x]) ! n =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             n < card\n                                  {i. i \\<le> k \\<and>\ni < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             n < Suc (card\n {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (simp add: nth_append2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < length (filter P xs) \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = length (filter P xs)\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             length (filter P xs)\n                             < card\n                                {i. i \\<le> k \\<and>\n                                    i < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             length (filter P xs)\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (simp add: length_filter_conv_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < card\n                                {i. i \\<le> k \\<and>\n                                    i < length xs \\<and> P (xs ! i)} \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (rule_tac\n  t = \"\\<lambda>k. card {i. i < length xs \\<and> P (xs ! i)} < card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}\" and\n  s = \"\\<lambda>k. False\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>k. False) =\n                         (\\<lambda>k.\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < card\n                                {i. i \\<le> k \\<and>\n                                    i < length xs \\<and> P (xs ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and> False \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (rule fun_eq_iff[THEN iffD2], rule allI, rename_tac k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> False =\n                         (card {i. i < length xs \\<and> P (xs ! i)}\n                          < card\n                             {i. i \\<le> k \\<and>\n                                 i < length xs \\<and> P (xs ! i)})\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and> False \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> card\n                          {i. i \\<le> k \\<and>\n                              i < length xs \\<and> P (xs ! i)}\n                         \\<le> card {i. i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and> False \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (rule card_mono)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> finite {i. i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> k \\<and>\n                             i < length xs \\<and> P (xs ! i)}\n                         \\<subseteq> {i. i < length xs \\<and> P (xs ! i)}\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and> False \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n k.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> k \\<and>\n                             i < length xs \\<and> P (xs ! i)}\n                         \\<subseteq> {i. i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and> False \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k < length xs \\<and> False \\<or>\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x =\n                         (xs @ [x]) !\n                         (LEAST k.\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))", "apply (rule_tac\n  t = \"(LEAST k. k = length xs \\<and>\n                 card {i. i < length xs \\<and> P (xs ! i)} < Suc (card {i. i \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))\" and\n  s = \"length xs\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> length xs =\n                         (LEAST k.\n                             k = length xs \\<and>\n                             card {i. i < length xs \\<and> P (xs ! i)}\n                             < Suc (card\n                                     {i.\ni \\<le> k \\<and> i < length xs \\<and> P (xs ! i)}))\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply (rule sym, rule Least_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> length xs = length xs \\<and>\n                         card {i. i < length xs \\<and> P (xs ! i)}\n                         < Suc (card\n                                 {i. i \\<le> length xs \\<and>\n                                     i < length xs \\<and> P (xs ! i)})\n 2. \\<And>x xs n y.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = card {i. i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        card {i. i < length xs \\<and> P (xs ! i)}\n        < Suc (card\n                {i. i \\<le> y \\<and>\n                    i < length xs \\<and> P (xs ! i)})\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> y\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> card {i. i < length xs \\<and> P (xs ! i)}\n                         < Suc (card\n                                 {i. i \\<le> length xs \\<and>\n                                     i < length xs \\<and> P (xs ! i)})\n 2. \\<And>x xs n y.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = card {i. i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        card {i. i < length xs \\<and> P (xs ! i)}\n        < Suc (card\n                {i. i \\<le> y \\<and>\n                    i < length xs \\<and> P (xs ! i)})\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> y\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply (rule le_imp_less_Suc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> card {i. i < length xs \\<and> P (xs ! i)}\n                         \\<le> card\n                                {i. i \\<le> length xs \\<and>\n                                    i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n y.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = card {i. i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        card {i. i < length xs \\<and> P (xs ! i)}\n        < Suc (card\n                {i. i \\<le> y \\<and>\n                    i < length xs \\<and> P (xs ! i)})\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> y\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply (rule card_mono)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {i. i \\<le> length xs \\<and>\n                              i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> {i. i < length xs \\<and> P (xs ! i)}\n                         \\<subseteq> {i.\ni \\<le> length xs \\<and> i < length xs \\<and> P (xs ! i)}\n 3. \\<And>x xs n y.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = card {i. i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        card {i. i < length xs \\<and> P (xs ! i)}\n        < Suc (card\n                {i. i \\<le> y \\<and>\n                    i < length xs \\<and> P (xs ! i)})\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> y\n 4. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> {i. i < length xs \\<and> P (xs ! i)}\n                         \\<subseteq> {i.\ni \\<le> length xs \\<and> i < length xs \\<and> P (xs ! i)}\n 2. \\<And>x xs n y.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = card {i. i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        card {i. i < length xs \\<and> P (xs ! i)}\n        < Suc (card\n                {i. i \\<le> y \\<and>\n                    i < length xs \\<and> P (xs ! i)})\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> y\n 3. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs n y.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x; n = card {i. i < length xs \\<and> P (xs ! i)};\n        y = length xs \\<and>\n        card {i. i < length xs \\<and> P (xs ! i)}\n        < Suc (card\n                {i. i \\<le> y \\<and>\n                    i < length xs \\<and> P (xs ! i)})\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> y\n 2. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs n.\n       \\<lbrakk>\\<And>n.\n                   n < card\n                        {i. i < length xs \\<and>\n                            P (xs ! i)} \\<Longrightarrow>\n                   filter P xs ! n =\n                   xs !\n                   (LEAST k.\n                       k < length xs \\<and>\n                       n < card\n                            {i. i \\<le> k \\<and>\n                                i < length xs \\<and> P (xs ! i)});\n        xs \\<noteq> []; P x;\n        n = card {i. i < length xs \\<and> P (xs ! i)}\\<rbrakk>\n       \\<Longrightarrow> x = (xs @ [x]) ! length xs", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Ordered lists\\<close>"], ["", "fun list_ord :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> ('a::ord) list \\<Rightarrow> bool\"\nwhere\n  \"list_ord ord (x1 # x2 # xs) = (ord x1 x2 \\<and> list_ord ord (x2 # xs))\"\n| \"list_ord ord xs = True\""], ["", "definition list_asc :: \"('a::ord) list \\<Rightarrow> bool\" where\n  \"list_asc xs \\<equiv> list_ord (\\<le>) xs\""], ["", "definition list_strict_asc :: \"('a::ord) list \\<Rightarrow> bool\" where\n  \"list_strict_asc xs \\<equiv> list_ord (<) xs\""], ["", "value \"list_asc  [1::nat, 2, 2]\""], ["", "value \"list_strict_asc  [1::nat, 2, 2]\""], ["", "definition list_desc :: \"('a::ord) list \\<Rightarrow> bool\" where\n  \"list_desc xs \\<equiv> list_ord (\\<ge>) xs\""], ["", "definition list_strict_desc :: \"('a::ord) list \\<Rightarrow> bool\" where\n  \"list_strict_desc xs \\<equiv> list_ord (>) xs\""], ["", "lemma list_ord_Nil: \"list_ord ord []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord ord []", "by simp"], ["", "lemma list_ord_one: \"list_ord ord [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord ord [x]", "by simp"], ["", "lemma list_ord_Cons: \"\n  list_ord ord (x # xs) =\n  (xs = [] \\<or> (ord x (hd xs) \\<and> list_ord ord xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord ord (x # xs) =\n    (xs = [] \\<or> ord x (hd xs) \\<and> list_ord ord xs)", "by (induct xs, simp+)"], ["", "lemma list_ord_Cons_imp: \"\\<lbrakk> list_ord ord xs; ord x (hd xs) \\<rbrakk> \\<Longrightarrow> list_ord ord (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_ord ord xs; ord x (hd xs)\\<rbrakk>\n    \\<Longrightarrow> list_ord ord (x # xs)", "by (induct xs, simp+)"], ["", "lemma list_ord_append: \"\\<And>ys.\n  list_ord ord (xs @ ys) =\n  (list_ord ord xs \\<and>\n  (ys = [] \\<or> (list_ord ord ys \\<and> (xs = [] \\<or> ord (last xs) (hd ys)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       list_ord ord (xs @ ys) =\n       (list_ord ord xs \\<and>\n        (ys = [] \\<or>\n         list_ord ord ys \\<and> (xs = [] \\<or> ord (last xs) (hd ys))))", "apply (induct xs, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           list_ord ord (xs @ ys) =\n           (list_ord ord xs \\<and>\n            (ys = [] \\<or>\n             list_ord ord ys \\<and>\n             (xs = [] \\<or> ord (last xs) (hd ys))))) \\<Longrightarrow>\n       list_ord ord ((a # xs) @ ys) =\n       (list_ord ord (a # xs) \\<and>\n        (ys = [] \\<or>\n         list_ord ord ys \\<and>\n         (a # xs = [] \\<or> ord (last (a # xs)) (hd ys))))", "apply (case_tac xs, case_tac ys, fastforce+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_snoc: \"\n  list_ord ord (xs @ [x]) =\n  (xs = [] \\<or> (ord (last xs) x \\<and> list_ord ord xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord ord (xs @ [x]) =\n    (xs = [] \\<or> ord (last xs) x \\<and> list_ord ord xs)", "by (fastforce simp: list_ord_append)"], ["", "lemma list_ord_all_conv: \"\n  (list_ord ord xs) = (\\<forall>n < length xs - 1. ord (xs ! n) (xs ! Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord ord xs = (\\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_ord ord xs \\<Longrightarrow>\n    \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply (induct xs, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>list_ord ord xs \\<Longrightarrow>\n                \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n);\n        list_ord ord (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n<length (a # xs) - 1.\n                            ord ((a # xs) ! n) ((a # xs) ! Suc n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>list_ord ord xs \\<Longrightarrow>\n                \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        list_ord ord (a # xs); n < length xs\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply (simp add: list_ord_Cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>list_ord ord xs \\<Longrightarrow>\n                \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs;\n        n < length xs\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>list_ord ord xs \\<Longrightarrow>\n                \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        n < length xs; ord a (hd xs) \\<and> list_ord ord xs\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        n < length xs; ord a (hd xs); list_ord ord xs\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply (case_tac n)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        n < length xs; ord a (hd xs); list_ord ord xs; n = 0\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 2. \\<And>a xs n nat.\n       \\<lbrakk>\\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        n < length xs; ord a (hd xs); list_ord ord xs; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 3. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply (simp add: hd_conv_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n nat.\n       \\<lbrakk>\\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        n < length xs; ord a (hd xs); list_ord ord xs; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ord ((a # xs) ! n) (xs ! n)\n 2. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length xs - 1. ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n    list_ord ord xs", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs - 1.\n                   ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n                list_ord ord xs;\n        \\<forall>n<length (a # xs) - 1.\n           ord ((a # xs) ! n) ((a # xs) ! Suc n)\\<rbrakk>\n       \\<Longrightarrow> list_ord ord (a # xs)", "apply (simp add: list_ord_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs - Suc 0.\n                   ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n                list_ord ord xs;\n        \\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n)\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs", "apply (case_tac \"xs = []\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs - Suc 0.\n                   ord (xs ! n) (xs ! Suc n) \\<Longrightarrow>\n                list_ord ord xs;\n        \\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs", "apply (drule meta_mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n<length xs - Suc 0.\n                            ord (xs ! n) (xs ! Suc n)\n 2. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n);\n        xs \\<noteq> []; list_ord ord xs\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs", "apply (intro allI impI, rename_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n);\n        xs \\<noteq> []; n < length xs - Suc 0\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! n) (xs ! Suc n)\n 2. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n);\n        xs \\<noteq> []; list_ord ord xs\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs", "apply (drule_tac x=\"Suc n\" in spec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<forall>n<length xs. ord ((a # xs) ! n) (xs ! n);\n        xs \\<noteq> []; list_ord ord xs\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs", "apply (drule_tac x=0 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>xs \\<noteq> []; list_ord ord xs;\n        0 < length xs \\<longrightarrow> ord ((a # xs) ! 0) (xs ! 0)\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs", "apply (simp add: hd_conv_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_imp: \"\n  \\<lbrakk> \\<And>x y. ord x y \\<Longrightarrow> ord' x y; list_ord ord xs \\<rbrakk> \\<Longrightarrow>\n  list_ord ord' xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n     list_ord ord xs\\<rbrakk>\n    \\<Longrightarrow> list_ord ord' xs", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>\\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n                 list_ord ord xs\\<rbrakk>\n                \\<Longrightarrow> list_ord ord' xs;\n        \\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n        list_ord ord (a # xs)\\<rbrakk>\n       \\<Longrightarrow> list_ord ord' (a # xs)", "apply (simp add: list_ord_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>list_ord ord xs \\<Longrightarrow> list_ord ord' xs;\n        \\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n        xs = [] \\<or> ord a (hd xs) \\<and> list_ord ord xs\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<or>\n                         ord' a (hd xs) \\<and> list_ord ord' xs", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary list_strict_asc_imp_list_asc: \"\n  list_strict_asc (xs::'a::preorder list) \\<Longrightarrow> list_asc xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_strict_asc xs \\<Longrightarrow> list_asc xs", "by (unfold list_strict_asc_def list_asc_def, rule list_ord_imp[of \"(<)\"], rule order_less_imp_le)"], ["", "corollary list_strict_desc_imp_list_desc: \"\n  list_strict_desc (xs::'a::preorder list) \\<Longrightarrow> list_desc xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_strict_desc xs \\<Longrightarrow> list_desc xs", "by (unfold list_strict_desc_def list_desc_def, rule list_ord_imp[of \"(>)\"], rule order_less_imp_le)"], ["", "lemma list_ord_trans_imp: \"\\<And>i.\n  \\<lbrakk> transP ord; list_ord ord xs; j < length xs; i < j \\<rbrakk> \\<Longrightarrow>\n  ord (xs ! i) (xs ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>trans {(x, y). ord x y}; list_ord ord xs; j < length xs;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! j)", "apply (simp add: list_ord_all_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>trans {(x, y). ord x y};\n        \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        j < length xs; i < j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! j)", "apply (induct j, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>trans {(x, y). ord x y};\n                    \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n                    j < length xs; i < j\\<rbrakk>\n                   \\<Longrightarrow> ord (xs ! i) (xs ! j);\n        trans {(x, y). ord x y};\n        \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        Suc j < length xs; i < Suc j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (case_tac \"j < i\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>trans {(x, y). ord x y};\n                    \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n                    j < length xs; i < j\\<rbrakk>\n                   \\<Longrightarrow> ord (xs ! i) (xs ! j);\n        trans {(x, y). ord x y};\n        \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        Suc j < length xs; i < Suc j; \\<not> j < i\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>\\<And>i. i < j \\<Longrightarrow> ord (xs ! i) (xs ! j);\n        trans {(x, y). ord x y};\n        \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        Suc j < length xs; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (case_tac \"i = j\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>\\<And>i. i < j \\<Longrightarrow> ord (xs ! i) (xs ! j);\n        trans {(x, y). ord x y};\n        \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        Suc j < length xs; i \\<le> j; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (drule_tac x=i in meta_spec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y};\n        \\<forall>n<length xs - Suc 0. ord (xs ! n) (xs ! Suc n);\n        Suc j < length xs; i \\<le> j; i \\<noteq> j;\n        ord (xs ! i) (xs ! j)\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (drule_tac x=j in spec, simp add: Suc_less_pred_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y}; j < length xs - Suc 0; i \\<le> j;\n        i \\<noteq> j; ord (xs ! i) (xs ! j);\n        ord (xs ! j) (xs ! Suc j)\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (unfold trans_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>\\<forall>x y z.\n                   (x, y) \\<in> {(x, y). ord x y} \\<longrightarrow>\n                   (y, z) \\<in> {(x, y). ord x y} \\<longrightarrow>\n                   (x, z) \\<in> {(x, y). ord x y};\n        j < length xs - Suc 0; i \\<le> j; i \\<noteq> j;\n        ord (xs ! i) (xs ! j); ord (xs ! j) (xs ! Suc j)\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply (drule_tac x=\"xs ! i\" in spec, drule_tac x=\"xs ! j\" in spec, drule_tac x=\"xs ! Suc j\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>j < length xs - Suc 0; i \\<le> j; i \\<noteq> j;\n        ord (xs ! i) (xs ! j); ord (xs ! j) (xs ! Suc j);\n        (xs ! i, xs ! j) \\<in> {(x, y). ord x y} \\<longrightarrow>\n        (xs ! j, xs ! Suc j) \\<in> {(x, y). ord x y} \\<longrightarrow>\n        (xs ! i, xs ! Suc j) \\<in> {(x, y). ord x y}\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! Suc j)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_trans: \"\n  transP ord \\<Longrightarrow>\n  (list_ord ord xs) =\n  (\\<forall>j < length xs. \\<forall>i < j. ord (xs ! i) (xs ! j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans {(x, y). ord x y} \\<Longrightarrow>\n    list_ord ord xs =\n    (\\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>trans {(x, y). ord x y}; list_ord ord xs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i<j. ord (xs ! i) (xs ! j)\n 2. \\<lbrakk>trans {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> list_ord ord xs", "apply (simp add: list_ord_trans_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> list_ord ord xs", "apply (simp add: list_ord_all_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_trans_refl_le: \"\n  \\<lbrakk> transP ord; reflP ord \\<rbrakk> \\<Longrightarrow>\n  (list_ord ord xs) =\n  (\\<forall>j < length xs. \\<forall>i \\<le> j. ord (xs ! i) (xs ! j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y}\\<rbrakk>\n    \\<Longrightarrow> list_ord ord xs =\n                      (\\<forall>j<length xs.\n                          \\<forall>i\\<le>j. ord (xs ! i) (xs ! j))", "apply (subst list_ord_trans, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y}\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>j<length xs.\n                          \\<forall>i<j. ord (xs ! i) (xs ! j)) =\n                      (\\<forall>j<length xs.\n                          \\<forall>i\\<le>j. ord (xs ! i) (xs ! j))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i\\<le>j. ord (xs ! i) (xs ! j)\n 2. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i\\<le>j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i<j. ord (xs ! i) (xs ! j)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n        \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j);\n        j < length xs; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! j)\n 2. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i\\<le>j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i<j. ord (xs ! i) (xs ! j)", "apply (case_tac \"i = j\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n        \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j);\n        j < length xs; i \\<le> j; i = j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! j)\n 2. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n        \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j);\n        j < length xs; i \\<le> j; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! j)\n 3. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i\\<le>j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i<j. ord (xs ! i) (xs ! j)", "apply (simp add: refl_on_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n        \\<forall>j<length xs. \\<forall>i<j. ord (xs ! i) (xs ! j);\n        j < length xs; i \\<le> j; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> ord (xs ! i) (xs ! j)\n 2. \\<lbrakk>trans {(x, y). ord x y}; refl {(x, y). ord x y};\n     \\<forall>j<length xs. \\<forall>i\\<le>j. ord (xs ! i) (xs ! j)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i<j. ord (xs ! i) (xs ! j)", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_trans_refl_le_imp: \"\n  \\<lbrakk> transP ord; \\<And>x y. ord x y \\<Longrightarrow> ord' x y; reflP ord';\n    list_ord ord xs \\<rbrakk> \\<Longrightarrow>\n  (\\<forall>j < length xs. \\<forall>i \\<le> j. ord' (xs ! i) (xs ! j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans {(x, y). ord x y};\n     \\<And>x y. ord x y \\<Longrightarrow> ord' x y; refl {(x, y). ord' x y};\n     list_ord ord xs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>j<length xs.\n                         \\<forall>i\\<le>j. ord' (xs ! i) (xs ! j)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y};\n        \\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n        refl {(x, y). ord' x y}; list_ord ord xs; j < length xs;\n        i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> ord' (xs ! i) (xs ! j)", "apply (case_tac \"i = j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y};\n        \\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n        refl {(x, y). ord' x y}; list_ord ord xs; j < length xs; i \\<le> j;\n        i = j\\<rbrakk>\n       \\<Longrightarrow> ord' (xs ! i) (xs ! j)\n 2. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y};\n        \\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n        refl {(x, y). ord' x y}; list_ord ord xs; j < length xs; i \\<le> j;\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> ord' (xs ! i) (xs ! j)", "apply (simp add: refl_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j i.\n       \\<lbrakk>trans {(x, y). ord x y};\n        \\<And>x y. ord x y \\<Longrightarrow> ord' x y;\n        refl {(x, y). ord' x y}; list_ord ord xs; j < length xs; i \\<le> j;\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> ord' (xs ! i) (xs ! j)", "apply (simp add: list_ord_trans_imp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary\n  list_asc_trans: \"\n    (list_asc (xs::'a::preorder list)) =\n    (\\<forall>j < length xs. \\<forall>i < j. xs ! i \\<le> xs ! j)\" and\n  list_strict_asc_trans: \"\n    (list_strict_asc (xs::'a::preorder list)) =\n    (\\<forall>j < length xs. \\<forall>i < j. xs ! i < xs ! j)\" and\n  list_desc_trans: \"\n    (list_desc (xs::'a::preorder list)) =\n    (\\<forall>j < length xs. \\<forall>i < j. xs ! j \\<le> xs ! i)\" and\n  list_strict_desc_trans: \"\n    (list_strict_desc (xs::'a::preorder list)) =\n    (\\<forall>j < length xs. \\<forall>i < j. xs ! j < xs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (list_asc xs =\n     (\\<forall>j<length xs. \\<forall>i<j. xs ! i \\<le> xs ! j) &&&\n     list_strict_asc xs =\n     (\\<forall>j<length xs. \\<forall>i<j. xs ! i < xs ! j)) &&&\n    list_desc xs =\n    (\\<forall>j<length xs. \\<forall>i<j. xs ! j \\<le> xs ! i) &&&\n    list_strict_desc xs =\n    (\\<forall>j<length xs. \\<forall>i<j. xs ! j < xs ! i)", "apply (unfold list_asc_def list_strict_asc_def list_desc_def list_strict_desc_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. list_ord (\\<le>) xs =\n    (\\<forall>j<length xs. \\<forall>i<j. xs ! i \\<le> xs ! j)\n 2. list_ord (<) xs = (\\<forall>j<length xs. \\<forall>i<j. xs ! i < xs ! j)\n 3. list_ord (\\<lambda>x y. y \\<le> x) xs =\n    (\\<forall>j<length xs. \\<forall>i<j. xs ! j \\<le> xs ! i)\n 4. list_ord (\\<lambda>x y. y < x) xs =\n    (\\<forall>j<length xs. \\<forall>i<j. xs ! j < xs ! i)", "apply (rule list_ord_trans, unfold trans_def, blast intro: order_trans order_less_trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary\n  list_asc_trans_le: \"\n    (list_asc (xs::'a::preorder list)) =\n    (\\<forall>j < length xs. \\<forall>i \\<le> j. xs ! i \\<le> xs ! j)\" and\n  list_desc_trans_le: \"\n    (list_desc (xs::'a::preorder list)) =\n    (\\<forall>j < length xs. \\<forall>i \\<le> j. xs ! j \\<le> xs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_asc xs =\n    (\\<forall>j<length xs. \\<forall>i\\<le>j. xs ! i \\<le> xs ! j) &&&\n    list_desc xs =\n    (\\<forall>j<length xs. \\<forall>i\\<le>j. xs ! j \\<le> xs ! i)", "apply (unfold list_asc_def list_strict_asc_def list_desc_def list_strict_desc_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_ord (\\<le>) xs =\n    (\\<forall>j<length xs. \\<forall>i\\<le>j. xs ! i \\<le> xs ! j)\n 2. list_ord (\\<lambda>x y. y \\<le> x) xs =\n    (\\<forall>j<length xs. \\<forall>i\\<le>j. xs ! j \\<le> xs ! i)", "apply (rule list_ord_trans_refl_le, unfold trans_def, blast intro: order_trans, simp add: refl_on_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary\n  list_strict_asc_trans_le: \"\n    (list_strict_asc (xs::'a::preorder list)) \\<Longrightarrow>\n    (\\<forall>j < length xs. \\<forall>i \\<le> j. xs ! i \\<le> xs ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_strict_asc xs \\<Longrightarrow>\n    \\<forall>j<length xs. \\<forall>i\\<le>j. xs ! i \\<le> xs ! j", "apply (unfold list_strict_asc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord (<) xs \\<Longrightarrow>\n    \\<forall>j<length xs. \\<forall>i\\<le>j. xs ! i \\<le> xs ! j", "apply (rule list_ord_trans_refl_le_imp[where ord=\"(\\<le>)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. list_ord (<) xs \\<Longrightarrow> trans {(x, y). x \\<le> y}\n 2. \\<And>x y.\n       \\<lbrakk>list_ord (<) xs; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 3. list_ord (<) xs \\<Longrightarrow> refl {(x, y). x \\<le> y}\n 4. list_ord (<) xs \\<Longrightarrow> list_ord (\\<le>) xs", "apply (unfold trans_def, blast intro: order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>list_ord (<) xs; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 2. list_ord (<) xs \\<Longrightarrow> refl {(x, y). x \\<le> y}\n 3. list_ord (<) xs \\<Longrightarrow> list_ord (\\<le>) xs", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_ord (<) xs \\<Longrightarrow> refl {(x, y). x \\<le> y}\n 2. list_ord (<) xs \\<Longrightarrow> list_ord (\\<le>) xs", "apply (unfold refl_on_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ord (<) xs \\<Longrightarrow> list_ord (\\<le>) xs", "apply (rule list_ord_imp[where ord=\"(<)\"], simp_all add: less_imp_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_le_sorted_eq: \"list_asc xs = sorted xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_asc xs = sorted xs", "apply (rule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted xs = list_asc xs", "apply (simp add: list_asc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted xs = list_ord (\\<le>) xs", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       sorted xs = list_ord (\\<le>) xs \\<Longrightarrow>\n       sorted (a # xs) = list_ord (\\<le>) (a # xs)", "apply (rename_tac x xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       sorted xs = list_ord (\\<le>) xs \\<Longrightarrow>\n       sorted (x # xs) = list_ord (\\<le>) (x # xs)", "apply (simp add: list_ord_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       sorted xs = list_ord (\\<le>) xs \\<Longrightarrow>\n       ((\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and> list_ord (\\<le>) xs) =\n       (xs = [] \\<or> x \\<le> hd xs \\<and> list_ord (\\<le>) xs)", "apply (case_tac \"xs = []\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted xs = list_ord (\\<le>) xs; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and>\n                          list_ord (\\<le>) xs) =\n                         (x \\<le> hd xs \\<and> list_ord (\\<le>) xs)", "apply (case_tac \"list_ord (\\<le>) xs\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs\\<rbrakk>\n       \\<Longrightarrow> Ball (set xs) ((\\<le>) x) = (x \\<le> hd xs)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        Ball (set xs) ((\\<le>) x)\\<rbrakk>\n       \\<Longrightarrow> x \\<le> hd xs\n 2. \\<And>x xs.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> hd xs\\<rbrakk>\n       \\<Longrightarrow> Ball (set xs) ((\\<le>) x)", "apply (drule_tac x=\"hd xs\" in bspec, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> hd xs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa\\<in>set xs. x \\<le> xa", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> hd xs; xa \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xa", "apply (drule in_set_conv_nth[THEN iffD1], clarsimp, rename_tac i1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs i1.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> hd xs; i1 < length xs\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xs ! i1", "apply (simp add: hd_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs i1.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> xs ! 0; i1 < length xs\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xs ! i1", "apply (case_tac i1, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs i1 nat.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> xs ! 0; i1 < length xs; i1 = Suc nat\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xs ! i1", "apply (rename_tac i2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs i1 i2.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> xs ! 0; i1 < length xs; i1 = Suc i2\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xs ! i1", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs i1 i2.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_ord (\\<le>) xs;\n        x \\<le> xs ! 0; Suc i2 < length xs; i1 = Suc i2\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xs ! Suc i2", "apply (fold list_asc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs i1 i2.\n       \\<lbrakk>sorted xs; xs \\<noteq> []; list_asc xs; x \\<le> xs ! 0;\n        Suc i2 < length xs; i1 = Suc i2\\<rbrakk>\n       \\<Longrightarrow> x \\<le> xs ! Suc i2", "apply (fastforce simp: list_asc_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary list_asc_upto: \"list_asc [m..n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_asc [m..n]", "by (simp add: list_ord_le_sorted_eq)"], ["", "lemma list_strict_asc_upt: \"list_strict_asc [m..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_strict_asc [m..<n]", "by (simp add: list_strict_asc_def list_ord_all_conv)"], ["", "lemma list_ord_distinct_aux: \"\n  \\<lbrakk> irrefl {(a, b). ord a b}; transP ord; list_ord ord xs;\n    i < length xs; j < length xs; i < j \\<rbrakk> \\<Longrightarrow>\n  xs ! i \\<noteq> xs ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n     list_ord ord xs; i < length xs; j < length xs; i < j\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (subgoal_tac \"\\<And>x y. ord x y \\<Longrightarrow> x \\<noteq> y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n     list_ord ord xs; i < length xs; j < length xs; i < j;\n     \\<And>x y. ord x y \\<Longrightarrow> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<noteq> xs ! j\n 2. \\<And>x y.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; i < j;\n        ord x y\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; i < j;\n        ord x y\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> y\n 2. \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n     list_ord ord xs; i < length xs; j < length xs; i < j;\n     \\<And>x y. ord x y \\<Longrightarrow> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; i < j; ord x y;\n        \\<not> x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n     list_ord ord xs; i < length xs; j < length xs; i < j;\n     \\<And>x y. ord x y \\<Longrightarrow> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (simp add: irrefl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n     list_ord ord xs; i < length xs; j < length xs; i < j;\n     \\<And>x y. ord x y \\<Longrightarrow> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (simp add: list_ord_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_ord_distinct: \"\n  \\<lbrakk> irrefl {(a,b). ord a b}; transP ord; list_ord ord xs \\<rbrakk> \\<Longrightarrow>\n  distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n     list_ord ord xs\\<rbrakk>\n    \\<Longrightarrow> distinct xs", "apply (simp add: distinct_conv_nth, intro allI impI, rename_tac i j)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (drule neq_iff[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; i < j\\<rbrakk>\n       \\<Longrightarrow> xs ! i \\<noteq> xs ! j\n 2. \\<And>i j.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; j < i\\<rbrakk>\n       \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (simp add: list_ord_distinct_aux)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>irrefl {(a, b). ord a b}; trans {(x, y). ord x y};\n        list_ord ord xs; i < length xs; j < length xs; j < i\\<rbrakk>\n       \\<Longrightarrow> xs ! i \\<noteq> xs ! j", "apply (simp add: list_ord_distinct_aux[THEN not_sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_strict_asc_distinct: \"list_strict_asc (xs::'a::preorder list) \\<Longrightarrow> distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_strict_asc xs \\<Longrightarrow> distinct xs", "apply (rule_tac ord=\"(<)\" in list_ord_distinct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. list_strict_asc xs \\<Longrightarrow> irrefl {(a, b). a < b}\n 2. list_strict_asc xs \\<Longrightarrow> trans {(x, y). x < y}\n 3. list_strict_asc xs \\<Longrightarrow> list_ord (<) xs", "apply (unfold irrefl_def list_strict_asc_def trans_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. list_ord (<) xs \\<Longrightarrow>\n    \\<forall>a. (a, a) \\<notin> {(x, y). x < y}\n 2. list_ord (<) xs \\<Longrightarrow>\n    \\<forall>x y z.\n       (x, y) \\<in> {(x, y). x < y} \\<longrightarrow>\n       (y, z) \\<in> {(x, y). x < y} \\<longrightarrow>\n       (x, z) \\<in> {(x, y). x < y}\n 3. list_ord (<) xs \\<Longrightarrow> list_ord (<) xs", "apply (blast intro: less_trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_strict_desc_distinct: \"list_strict_desc (xs::'a::preorder list) \\<Longrightarrow> distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_strict_desc xs \\<Longrightarrow> distinct xs", "apply (rule_tac ord=\"(>)\" in list_ord_distinct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. list_strict_desc xs \\<Longrightarrow> irrefl {(a, b). b < a}\n 2. list_strict_desc xs \\<Longrightarrow> trans {(x, y). y < x}\n 3. list_strict_desc xs \\<Longrightarrow> list_ord (\\<lambda>x y. y < x) xs", "apply (unfold irrefl_def list_strict_desc_def trans_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. list_ord (\\<lambda>x y. y < x) xs \\<Longrightarrow>\n    \\<forall>a. (a, a) \\<notin> {(a, b). b < a}\n 2. list_ord (\\<lambda>x y. y < x) xs \\<Longrightarrow>\n    \\<forall>x y z.\n       (x, y) \\<in> {(x, y). y < x} \\<longrightarrow>\n       (y, z) \\<in> {(x, y). y < x} \\<longrightarrow>\n       (x, z) \\<in> {(x, y). y < x}\n 3. list_ord (\\<lambda>x y. y < x) xs \\<Longrightarrow>\n    list_ord (\\<lambda>x y. y < x) xs", "apply (blast intro: less_trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Additional definitions and results for sublists\\<close>"], ["", "primrec sublist_list :: \"'a list \\<Rightarrow> nat list \\<Rightarrow> 'a list\"\nwhere\n  \"sublist_list xs [] = []\"\n| \"sublist_list xs (y # ys) = (xs ! y) # (sublist_list xs ys)\""], ["", "value \"sublist_list [0::int,10::int,20,30,40,50] [1::nat,2,3]\""], ["", "value \"sublist_list [0::int,10::int,20,30,40,50] [1::nat,1,2,3]\""], ["", "value [nbe] \"sublist_list [0::int,10::int,20,30,40,50] [1::nat,1,2,3,10]\""], ["", "lemma sublist_list_length: \"length (sublist_list xs ys) = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sublist_list xs ys) = length ys", "by (induct ys, simp_all)"], ["", "lemma sublist_list_append: \"\n \\<And>zs. sublist_list xs (ys @ zs) = sublist_list xs ys @ sublist_list xs zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>zs.\n       sublist_list xs (ys @ zs) = sublist_list xs ys @ sublist_list xs zs", "by (induct ys, simp_all)"], ["", "lemma sublist_list_Nil: \"sublist_list xs [] =[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_list xs [] = []", "by simp"], ["", "lemma sublist_list_is_Nil_conv: \"\n  (sublist_list xs ys = []) = (ys = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sublist_list xs ys = []) = (ys = [])", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sublist_list xs ys = [] \\<Longrightarrow> ys = []\n 2. ys = [] \\<Longrightarrow> sublist_list xs ys = []", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sublist_list xs ys = []; ys \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. ys = [] \\<Longrightarrow> sublist_list xs ys = []", "apply (clarsimp simp: neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = [] \\<Longrightarrow> sublist_list xs ys = []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sublist_list_eq_imp_length_eq: \"\n  sublist_list xs ys = sublist_list xs zs \\<Longrightarrow> length ys = length zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_list xs ys = sublist_list xs zs \\<Longrightarrow>\n    length ys = length zs", "by (drule arg_cong[where f=length], simp add: sublist_list_length)"], ["", "lemma sublist_list_nth: \"\n  \\<And>n. n < length ys \\<Longrightarrow> sublist_list xs ys ! n = xs ! (ys ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length ys \\<Longrightarrow>\n       sublist_list xs ys ! n = xs ! (ys ! n)", "apply (induct ys, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys n.\n       \\<lbrakk>\\<And>n.\n                   n < length ys \\<Longrightarrow>\n                   sublist_list xs ys ! n = xs ! (ys ! n);\n        n < length (a # ys)\\<rbrakk>\n       \\<Longrightarrow> sublist_list xs (a # ys) ! n = xs ! ((a # ys) ! n)", "apply (case_tac n, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_drop_eq_sublist_list: \"\n  m + n \\<le> length xs \\<Longrightarrow> xs \\<up> m \\<down> n = sublist_list xs [m..<m+n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m + n \\<le> length xs \\<Longrightarrow>\n    xs \\<up> m \\<down> n = sublist_list xs [m..<m + n]", "apply (insert length_upt[of m \"m+n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + n \\<le> length xs; length [m..<m + n] = m + n - m\\<rbrakk>\n    \\<Longrightarrow> xs \\<up> m \\<down> n = sublist_list xs [m..<m + n]", "apply (simp add: expand_list_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m + n \\<le> length xs \\<Longrightarrow>\n    min (length xs - m) n = length (sublist_list xs [m..<m + n]) \\<and>\n    (\\<forall>i.\n        i < length xs - m \\<and> i < n \\<longrightarrow>\n        xs ! (m + i) = sublist_list xs [m..<m + n] ! i)", "apply (simp add: sublist_list_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m + n \\<le> length xs \\<Longrightarrow>\n    min (length xs - m) n = n \\<and>\n    (\\<forall>i.\n        i < length xs - m \\<and> i < n \\<longrightarrow>\n        xs ! (m + i) = sublist_list xs [m..<m + n] ! i)", "apply (frule add_le_imp_le_diff2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + n \\<le> length xs; n \\<le> length xs - m\\<rbrakk>\n    \\<Longrightarrow> min (length xs - m) n = n \\<and>\n                      (\\<forall>i.\n                          i < length xs - m \\<and> i < n \\<longrightarrow>\n                          xs ! (m + i) = sublist_list xs [m..<m + n] ! i)", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m + n \\<le> length xs; n \\<le> length xs - m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         i < length xs - m \\<and> i < n \\<longrightarrow>\n                         xs ! (m + i) = sublist_list xs [m..<m + n] ! i", "apply (clarsimp, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>m + n \\<le> length xs; n \\<le> length xs - m; i < n\\<rbrakk>\n       \\<Longrightarrow> xs ! (m + i) = sublist_list xs [m..<m + n] ! i", "apply (simp add: sublist_list_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec sublist_list_if :: \"'a list \\<Rightarrow> nat list \\<Rightarrow> 'a list\"\nwhere\n  \"sublist_list_if xs [] = []\"\n| \"sublist_list_if xs (y # ys) =\n    (if y < length xs then (xs ! y) # (sublist_list_if xs ys)\n     else (sublist_list_if xs ys))\""], ["", "value \"sublist_list_if [0::int,10::int,20,30,40,50] [1::nat,2,3]\""], ["", "value \"sublist_list_if [0::int,10::int,20,30,40,50] [1::nat,1,2,3]\""], ["", "value \"sublist_list_if [0::int,10::int,20,30,40,50] [1::nat,1,2,3,10]\""], ["", "lemma sublist_list_if_sublist_list_filter_conv: \"\\<And>xs.\n  sublist_list_if xs ys = sublist_list xs (filter (\\<lambda>i. i < length xs) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       sublist_list_if xs ys =\n       sublist_list xs (filter (\\<lambda>i. i < length xs) ys)", "by (induct ys, simp+)"], ["", "corollary sublist_list_if_sublist_list_eq: \"\\<And>xs.\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n  sublist_list_if xs ys = sublist_list xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n       sublist_list_if xs ys = sublist_list xs ys", "by (simp add: sublist_list_if_sublist_list_filter_conv filter_list_all)"], ["", "corollary sublist_list_if_sublist_list_eq2: \"\\<And>xs.\n  \\<forall>n<length ys. ys ! n < length xs \\<Longrightarrow>\n  sublist_list_if xs ys = sublist_list xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>n<length ys. ys ! n < length xs \\<Longrightarrow>\n       sublist_list_if xs ys = sublist_list xs ys", "by (rule sublist_list_if_sublist_list_eq, rule list_all_conv[THEN iffD2])"], ["", "lemma sublist_list_if_Nil_left: \"sublist_list_if [] ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_list_if [] ys = []", "by (induct ys, simp+)"], ["", "lemma sublist_list_if_Nil_right: \"sublist_list_if xs [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_list_if xs [] = []", "by simp"], ["", "lemma sublist_list_if_length: \"\n  length (sublist_list_if xs ys) = length (filter (\\<lambda>i. i < length xs) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sublist_list_if xs ys) =\n    length (filter (\\<lambda>i. i < length xs) ys)", "by (simp add: sublist_list_if_sublist_list_filter_conv sublist_list_length)"], ["", "lemma sublist_list_if_append: \"\n  sublist_list_if xs (ys @ zs) = sublist_list_if xs ys @ sublist_list_if xs zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_list_if xs (ys @ zs) =\n    sublist_list_if xs ys @ sublist_list_if xs zs", "by (simp add: sublist_list_if_sublist_list_filter_conv sublist_list_append)"], ["", "lemma sublist_list_if_snoc: \"\n  sublist_list_if xs (ys @ [y]) = sublist_list_if xs ys @ (if y < length xs then [xs ! y] else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_list_if xs (ys @ [y]) =\n    sublist_list_if xs ys @ (if y < length xs then [xs ! y] else [])", "by (simp add: sublist_list_if_append)"], ["", "lemma sublist_list_if_is_Nil_conv: \"\n  (sublist_list_if xs ys = []) = (list_all (\\<lambda>i. length xs \\<le> i) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sublist_list_if xs ys = []) = list_all ((\\<le>) (length xs)) ys", "by (simp add: sublist_list_if_sublist_list_filter_conv sublist_list_is_Nil_conv filter_empty_conv list_all_iff linorder_not_less)"], ["", "lemma sublist_list_if_nth: \"\n  n < length ((filter (\\<lambda>i. i < length xs) ys)) \\<Longrightarrow>\n  sublist_list_if xs ys ! n = xs ! ((filter (\\<lambda>i. i < length xs) ys) ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length (filter (\\<lambda>i. i < length xs) ys) \\<Longrightarrow>\n    sublist_list_if xs ys ! n =\n    xs ! (filter (\\<lambda>i. i < length xs) ys ! n)", "by (simp add: sublist_list_if_sublist_list_filter_conv sublist_list_nth)"], ["", "lemma take_drop_eq_sublist_list_if: \"\n  m + n \\<le> length xs \\<Longrightarrow> xs \\<up> m \\<down> n = sublist_list_if xs [m..<m+n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m + n \\<le> length xs \\<Longrightarrow>\n    xs \\<up> m \\<down> n = sublist_list_if xs [m..<m + n]", "by (simp add: sublist_list_if_sublist_list_filter_conv take_drop_eq_sublist_list)"], ["", "lemma nths_empty_conv: \"(nths xs I = []) = (\\<forall>i\\<in>I. length xs \\<le> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nths xs I = []) = (\\<forall>i\\<in>I. length xs \\<le> i)", "using [[hypsubst_thin = true]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (nths xs I = []) = (\\<forall>i\\<in>I. length xs \\<le> i)", "by (fastforce simp: set_empty[symmetric] set_nths linorder_not_le[symmetric])"], ["", "lemma nths_singleton2: \"nths xs {y} = (if y < length xs then [xs ! y] else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs {y} = (if y < length xs then [xs ! y] else [])", "apply (unfold nths_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst\n     (filter (\\<lambda>p. snd p \\<in> {y}) (zip xs [0..<length xs])) =\n    (if y < length xs then [xs ! y] else [])", "apply (induct xs rule: rev_induct, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       map fst\n        (filter (\\<lambda>p. snd p \\<in> {y}) (zip xs [0..<length xs])) =\n       (if y < length xs then [xs ! y] else []) \\<Longrightarrow>\n       map fst\n        (filter (\\<lambda>p. snd p \\<in> {y})\n          (zip (xs @ [x]) [0..<length (xs @ [x])])) =\n       (if y < length (xs @ [x]) then [(xs @ [x]) ! y] else [])", "apply (simp add: nth_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nths_take_eq: \"\n  \\<lbrakk> finite I; Max I < n \\<rbrakk> \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < n\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I", "apply (case_tac \"I = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I", "apply (case_tac \"n < length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I\n 2. \\<lbrakk>finite I; Max I < n; I \\<noteq> {};\n     \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {};\n     \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I\n 2. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I = nths xs I", "apply (rule_tac\n  t = \"nths xs I\" and\n  s = \"nths (xs \\<down> n @ xs \\<up> n) I\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n @ xs \\<up> n) I = nths xs I\n 2. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I =\n                      nths (xs \\<down> n @ xs \\<up> n) I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I =\n                      nths (xs \\<down> n @ xs \\<up> n) I", "apply (subst nths_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < n; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n) I =\n                      nths (xs \\<down> n) I @\n                      nths (xs \\<up> n)\n                       {j. j + length (xs \\<down> n) \\<in> I}", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<forall>a\\<in>I. a < n; I \\<noteq> {};\n     n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = []", "apply (rule_tac t=\"{j. j + n \\<in> I}\" and s=\"{}\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; \\<forall>a\\<in>I. a < n; I \\<noteq> {};\n     n < length xs\\<rbrakk>\n    \\<Longrightarrow> {} = {j. j + n \\<in> I}\n 2. \\<lbrakk>finite I; \\<forall>a\\<in>I. a < n; I \\<noteq> {};\n     n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {} = []", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; \\<forall>a\\<in>I. a < n; I \\<noteq> {};\n     n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {} = []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nths_drop_eq: \"\n  n \\<le> iMin I \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> iMin I \\<Longrightarrow>\n    nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply (case_tac \"I = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply (case_tac \"n < length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I\n 2. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; \\<not> n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I\n 2. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply (simp add: nths_def filter_empty_conv linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; length xs \\<le> n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (zip xs [0..<length xs]).\n                         snd x \\<notin> I\n 2. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply (clarsimp, rename_tac a b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; length xs \\<le> n;\n        (a, b) \\<in> set (zip xs [0..<length xs]); b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply (drule set_zip_rightD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; length xs \\<le> n; b \\<in> I;\n        b \\<in> set [0..<length xs]\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} = nths xs I", "apply (rule_tac\n  t = \"nths xs I\" and\n  s = \"nths (xs \\<down> n @ xs \\<up> n) I\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> n @ xs \\<up> n) I = nths xs I\n 2. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} =\n                      nths (xs \\<down> n @ xs \\<up> n) I", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} =\n                      nths (xs \\<down> n @ xs \\<up> n) I", "apply (subst nths_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> iMin I; I \\<noteq> {}; n < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> n) {j. j + n \\<in> I} =\n                      nths (xs \\<down> n) I @\n                      nths (xs \\<up> n)\n                       {j. j + length (xs \\<down> n) \\<in> I}", "apply (fastforce simp: nths_empty_conv min_eqR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nths_cut_less_eq: \"\n  length xs \\<le> n \\<Longrightarrow> nths xs (I \\<down>< n) = nths xs I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow> nths xs (I \\<down>< n) = nths xs I", "apply (simp add: nths_def cut_less_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    map fst\n     (filter (\\<lambda>p. snd p \\<in> I \\<and> snd p < n)\n       (zip xs [0..<length xs])) =\n    map fst (filter (\\<lambda>p. snd p \\<in> I) (zip xs [0..<length xs]))", "apply (rule_tac f=\"\\<lambda>xs. map fst xs\" in arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    filter (\\<lambda>p. snd p \\<in> I \\<and> snd p < n)\n     (zip xs [0..<length xs]) =\n    filter (\\<lambda>p. snd p \\<in> I) (zip xs [0..<length xs])", "apply (rule filter_filter_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    list_all\n     (\\<lambda>x. (snd x \\<in> I \\<and> snd x < n) = (snd x \\<in> I))\n     (zip xs [0..<length xs])", "apply (simp add: list_all_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nths_disjoint_Un: \"\n  \\<lbrakk> finite A; Max A < iMin B \\<rbrakk> \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (case_tac \"A = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (case_tac \"B = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (case_tac \"length xs \\<le> iMin B\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B\n 2. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     \\<not> length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (subst nths_cut_less_eq[of xs \"iMin B\", symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs ((A \\<union> B) \\<down>< iMin B) =\n                      nths xs A @ nths xs B\n 2. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     \\<not> length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (simp (no_asm_simp) add: cut_less_Un cut_less_Min_empty cut_less_Max_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs B = []\n 2. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     \\<not> length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (simp add: nths_empty_conv iMin_ge_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     \\<not> length xs \\<le> iMin B\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (simp add: linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths xs (A \\<union> B) = nths xs A @ nths xs B", "apply (rule_tac\n  t = \"nths xs (A \\<union> B)\" and\n  s = \"nths (xs \\<down> (iMin B) @ xs \\<up> (iMin B)) (A \\<union> B)\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B @ xs \\<up> iMin B)\n                       (A \\<union> B) =\n                      nths xs (A \\<union> B)\n 2. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B @ xs \\<up> iMin B)\n                       (A \\<union> B) =\n                      nths xs A @ nths xs B", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B @ xs \\<up> iMin B)\n                       (A \\<union> B) =\n                      nths xs A @ nths xs B", "apply (subst nths_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B) (A \\<union> B) @\n                      nths (xs \\<up> iMin B)\n                       {j. j + length (xs \\<down> iMin B)\n                           \\<in> A \\<union> B} =\n                      nths xs A @ nths xs B", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B) (A \\<union> B) @\n                      nths (xs \\<up> iMin B)\n                       {j. j + iMin B \\<in> A \\<or> j + iMin B \\<in> B} =\n                      nths xs A @ nths xs B", "apply (subst nths_cut_less_eq[where xs=\"xs \\<down> iMin B\" and n=\"iMin B\", symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B)\n                       ((A \\<union> B) \\<down>< iMin B) @\n                      nths (xs \\<up> iMin B)\n                       {j. j + iMin B \\<in> A \\<or> j + iMin B \\<in> B} =\n                      nths xs A @ nths xs B", "apply (simp add: cut_less_Un cut_less_Min_empty cut_less_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<down> iMin B) A @\n                      nths (xs \\<up> iMin B)\n                       {j. j + iMin B \\<in> A \\<or> j + iMin B \\<in> B} =\n                      nths xs A @ nths xs B", "apply (simp add: nths_take_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> iMin B)\n                       {j. j + iMin B \\<in> A \\<or> j + iMin B \\<in> B} =\n                      nths xs B", "apply (rule_tac\n  t = \"\\<lambda>j. j + iMin B \\<in> A \\<or> j + iMin B \\<in> B\" and\n  s = \"\\<lambda>j. j + iMin B \\<in> B\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>j. j + iMin B \\<in> B) =\n                      (\\<lambda>j.\n                          j + iMin B \\<in> A \\<or> j + iMin B \\<in> B)\n 2. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> iMin B) {j. j + iMin B \\<in> B} =\n                      nths xs B", "apply (force simp: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; iMin B < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs \\<up> iMin B) {j. j + iMin B \\<in> B} =\n                      nths xs B", "apply (simp add: nths_drop_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nths_disjoint_insert_left: \"\n  \\<lbrakk> finite I; x < iMin I \\<rbrakk> \\<Longrightarrow> nths xs (insert x I) = nths xs {x} @ nths xs I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; x < iMin I\\<rbrakk>\n    \\<Longrightarrow> nths xs (insert x I) = nths xs {x} @ nths xs I", "apply (rule_tac t=\"insert x I\" and s=\"{x} \\<union> I\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; x < iMin I\\<rbrakk>\n    \\<Longrightarrow> nths xs ({x} \\<union> I) = nths xs {x} @ nths xs I", "apply (subst nths_disjoint_Un)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; x < iMin I\\<rbrakk> \\<Longrightarrow> finite {x}\n 2. \\<lbrakk>finite I; x < iMin I\\<rbrakk>\n    \\<Longrightarrow> Max {x} < iMin I\n 3. \\<lbrakk>finite I; x < iMin I\\<rbrakk>\n    \\<Longrightarrow> nths xs {x} @ nths xs I = nths xs {x} @ nths xs I", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nths_disjoint_insert_right: \"\n  \\<lbrakk> finite I; Max I < x \\<rbrakk> \\<Longrightarrow> nths xs (insert x I) = nths xs I @ nths xs {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < x\\<rbrakk>\n    \\<Longrightarrow> nths xs (insert x I) = nths xs I @ nths xs {x}", "apply (rule_tac t=\"insert x I\" and s=\"I \\<union> {x}\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; Max I < x\\<rbrakk>\n    \\<Longrightarrow> nths xs (I \\<union> {x}) = nths xs I @ nths xs {x}", "apply (subst nths_disjoint_Un)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; Max I < x\\<rbrakk> \\<Longrightarrow> finite I\n 2. \\<lbrakk>finite I; Max I < x\\<rbrakk> \\<Longrightarrow> Max I < iMin {x}\n 3. \\<lbrakk>finite I; Max I < x\\<rbrakk>\n    \\<Longrightarrow> nths xs I @ nths xs {x} = nths xs I @ nths xs {x}", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nths_all: \"{..<length xs} \\<subseteq> I \\<Longrightarrow> nths xs I = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<length xs} \\<subseteq> I \\<Longrightarrow> nths xs I = xs", "apply (case_tac \"xs = []\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nths xs I = xs", "apply (rule_tac\n  t = \"I\" and\n  s = \"I \\<down>< (length xs) \\<union> I \\<down>\\<ge> (length xs)\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< length xs \\<union>\n                      I \\<down>\\<ge> length xs =\n                      I\n 2. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       (I \\<down>< length xs \\<union>\n                        I \\<down>\\<ge> length xs) =\n                      xs", "apply (simp add: cut_less_cut_ge_ident)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       (I \\<down>< length xs \\<union>\n                        I \\<down>\\<ge> length xs) =\n                      xs", "apply (rule_tac\n  t = \"I \\<down>< length xs\" and\n  s = \"{..<length xs}\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> {..<length xs} = I \\<down>< length xs\n 2. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({..<length xs} \\<union> I \\<down>\\<ge> length xs) =\n                      xs", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({..<length xs} \\<union> I \\<down>\\<ge> length xs) =\n                      xs", "apply (case_tac \"I \\<down>\\<ge> (length xs) = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs\n                       ({..<length xs} \\<union> I \\<down>\\<ge> length xs) =\n                      xs", "apply (subst nths_disjoint_Un[OF finite_lessThan])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max {..<length xs} < iMin (I \\<down>\\<ge> length xs)\n 2. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs {..<length xs} @\n                      nths xs (I \\<down>\\<ge> length xs) =\n                      xs", "apply (rule less_imp_Max_less_iMin[OF finite_lessThan])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> {..<length xs} \\<noteq> {}\n 2. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> length xs \\<noteq> {}\n 3. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>{..<length xs}.\n                         \\<forall>b\\<in>I \\<down>\\<ge> length xs. a < b\n 4. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs {..<length xs} @\n                      nths xs (I \\<down>\\<ge> length xs) =\n                      xs", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> length xs \\<noteq> {}\n 2. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>{..<length xs}.\n                         \\<forall>b\\<in>I \\<down>\\<ge> length xs. a < b\n 3. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs {..<length xs} @\n                      nths xs (I \\<down>\\<ge> length xs) =\n                      xs", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>{..<length xs}.\n                         \\<forall>b\\<in>I \\<down>\\<ge> length xs. a < b\n 2. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs {..<length xs} @\n                      nths xs (I \\<down>\\<ge> length xs) =\n                      xs", "apply (blast intro: less_le_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{..<length xs} \\<subseteq> I; xs \\<noteq> [];\n     I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> nths xs {..<length xs} @\n                      nths xs (I \\<down>\\<ge> length xs) =\n                      xs", "apply (fastforce simp: nths_empty_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary nths_UNIV: \"nths xs UNIV = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs UNIV = xs", "by (rule nths_all[OF subset_UNIV])"], ["", "lemma sublist_list_nths_eq: \"\\<And>xs.\n  list_strict_asc ys \\<Longrightarrow> sublist_list_if xs ys = nths xs (set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       list_strict_asc ys \\<Longrightarrow>\n       sublist_list_if xs ys = nths xs (set ys)", "apply (case_tac \"xs = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>list_strict_asc ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs ys = nths xs (set ys)\n 2. \\<And>xs.\n       \\<lbrakk>list_strict_asc ys; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs ys = nths xs (set ys)", "apply (simp add: sublist_list_if_Nil_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>list_strict_asc ys; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs ys = nths xs (set ys)", "apply (induct ys rule: rev_induct, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs xsa.\n       \\<lbrakk>\\<And>xsa.\n                   \\<lbrakk>list_strict_asc xs; xsa \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xsa xs =\n                                     nths xsa (set xs);\n        list_strict_asc (xs @ [x]); xsa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xsa (xs @ [x]) =\n                         nths xsa (set (xs @ [x]))", "apply (rename_tac y ys xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_strict_asc ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_strict_asc (ys @ [y]); xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs (ys @ [y]) =\n                         nths xs (set (ys @ [y]))", "apply (case_tac \"ys = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_strict_asc ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_strict_asc (ys @ [y]); xs \\<noteq> []; ys = []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs (ys @ [y]) =\n                         nths xs (set (ys @ [y]))\n 2. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_strict_asc ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_strict_asc (ys @ [y]); xs \\<noteq> []; ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs (ys @ [y]) =\n                         nths xs (set (ys @ [y]))", "apply (simp add: nths_singleton2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_strict_asc ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_strict_asc (ys @ [y]); xs \\<noteq> []; ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs (ys @ [y]) =\n                         nths xs (set (ys @ [y]))", "apply (unfold list_strict_asc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_ord (<) ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs (ys @ [y]) =\n                         nths xs (set (ys @ [y]))", "apply (simp add: sublist_list_if_snoc split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_ord (<) ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs ys @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (insert y (set ys))", "apply (frule list_ord_append[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>list_ord (<) ys; xs \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> sublist_list_if xs ys =\n                                     nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys \\<and>\n        ([y] = [] \\<or>\n         list_ord (<) [y] \\<and> (ys = [] \\<or> last ys < hd [y]))\\<rbrakk>\n       \\<Longrightarrow> sublist_list_if xs ys @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (insert y (set ys))", "apply (clarsimp split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> nths xs (set ys) @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (insert y (set ys))", "apply (subst nths_disjoint_insert_right)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> finite (set ys)\n 2. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> Max (set ys) < y\n 3. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> nths xs (set ys) @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (set ys) @ nths xs {y}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> Max (set ys) < y\n 2. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> nths xs (set ys) @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (set ys) @ nths xs {y}", "apply (clarsimp simp: in_set_conv_nth, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y ys xs i.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y; i < length ys\\<rbrakk>\n       \\<Longrightarrow> ys ! i < y\n 2. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> nths xs (set ys) @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (set ys) @ nths xs {y}", "apply (drule_tac i=i and j=\"length ys\" in list_strict_asc_trans[unfolded list_strict_asc_def, THEN iffD1, rule_format])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y ys xs i.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        xs \\<noteq> []; ys \\<noteq> []; list_ord (<) ys; last ys < y;\n        i < length ys\\<rbrakk>\n       \\<Longrightarrow> length ys < length (ys @ [y])\n 2. \\<And>y ys xs i.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        xs \\<noteq> []; ys \\<noteq> []; list_ord (<) ys; last ys < y;\n        i < length ys\\<rbrakk>\n       \\<Longrightarrow> i < length ys\n 3. \\<And>y ys xs i.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        xs \\<noteq> []; ys \\<noteq> []; list_ord (<) ys; last ys < y;\n        i < length ys; (ys @ [y]) ! i < (ys @ [y]) ! length ys\\<rbrakk>\n       \\<Longrightarrow> ys ! i < y\n 4. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> nths xs (set ys) @\n                         (if y < length xs then [xs ! y] else []) =\n                         nths xs (set ys) @ nths xs {y}", "apply (simp add: nth_append split del: if_split)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ys xs.\n       \\<lbrakk>\\<And>xs.\n                   xs \\<noteq> [] \\<Longrightarrow>\n                   sublist_list_if xs ys = nths xs (set ys);\n        list_ord (<) (ys @ [y]); xs \\<noteq> []; ys \\<noteq> [];\n        list_ord (<) ys; last ys < y\\<rbrakk>\n       \\<Longrightarrow> (if y < length xs then [xs ! y] else []) =\n                         nths xs {y}", "apply (simp add: nths_singleton2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_sublist_list_if: \"\\<And>xs. set (sublist_list_if xs ys) = {xs ! i |i. i < length xs \\<and> i \\<in> set ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       set (sublist_list_if xs ys) =\n       {xs ! i |i. i < length xs \\<and> i \\<in> set ys}", "apply (induct ys, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           set (sublist_list_if xs ys) =\n           {xs ! i |i.\n            i < length xs \\<and> i \\<in> set ys}) \\<Longrightarrow>\n       (a < length xs \\<longrightarrow>\n        insert (xs ! a) {xs ! i |i. i < length xs \\<and> i \\<in> set ys} =\n        {xs ! i |i.\n         i < length xs \\<and> (i = a \\<or> i \\<in> set ys)}) \\<and>\n       (\\<not> a < length xs \\<longrightarrow>\n        {xs ! i |i. i < length xs \\<and> i \\<in> set ys} =\n        {xs ! i |i. i < length xs \\<and> (i = a \\<or> i \\<in> set ys)})", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_sublist_list: \"\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n  set (sublist_list xs ys) = {xs ! i |i. i < length xs \\<and> i \\<in> set ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n    set (sublist_list xs ys) =\n    {xs ! i |i. i < length xs \\<and> i \\<in> set ys}", "by (simp add: sublist_list_if_sublist_list_eq[symmetric] set_sublist_list_if)"], ["", "lemma set_sublist_list_if_eq_set_sublist: \"set (sublist_list_if xs ys) = set (nths xs (set ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (sublist_list_if xs ys) = set (nths xs (set ys))", "by (simp add: set_nths set_sublist_list_if)"], ["", "lemma set_sublist_list_eq_set_sublist: \"\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n  set (sublist_list xs ys) = set (nths xs (set ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n    set (sublist_list xs ys) = set (nths xs (set ys))", "by (simp add: sublist_list_if_sublist_list_eq[symmetric] set_sublist_list_if_eq_set_sublist)"], ["", "subsubsection \\<open>Natural set images with lists\\<close>"], ["", "definition f_image :: \"'a list \\<Rightarrow> nat set \\<Rightarrow> 'a set\"    (infixr \"`\\<^sup>f\" 90)\n  where \"xs `\\<^sup>f A \\<equiv> {y. \\<exists>n\\<in>A. n < length xs \\<and> y = xs ! n}\""], ["", "abbreviation f_range :: \"'a list \\<Rightarrow> 'a set\"\n  where \"f_range xs \\<equiv> f_image xs UNIV\""], ["", "lemma f_image_eqI[simp, intro]: \"\n  \\<lbrakk> x = xs ! n; n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> x \\<in> xs `\\<^sup>f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = xs ! n; n \\<in> A; n < length xs\\<rbrakk>\n    \\<Longrightarrow> x \\<in> xs `\\<^sup>f A", "by (unfold f_image_def, blast)"], ["", "lemma f_imageI: \"\\<lbrakk> n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> xs ! n \\<in> xs `\\<^sup>f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n    \\<Longrightarrow> xs ! n \\<in> xs `\\<^sup>f A", "by blast"], ["", "lemma rev_f_imageI: \"\\<lbrakk> n \\<in> A; n < length xs; x = xs ! n \\<rbrakk> \\<Longrightarrow> x \\<in> xs `\\<^sup>f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> A; n < length xs; x = xs ! n\\<rbrakk>\n    \\<Longrightarrow> x \\<in> xs `\\<^sup>f A", "by (rule f_image_eqI)"], ["", "lemma f_imageE[elim!]: \"\n  \\<lbrakk> x \\<in> xs `\\<^sup>f A; \\<And>n. \\<lbrakk> x = xs ! n; n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> xs `\\<^sup>f A;\n     \\<And>n.\n        \\<lbrakk>x = xs ! n; n \\<in> A; n < length xs\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (unfold f_image_def, blast)"], ["", "lemma f_image_Un: \"xs `\\<^sup>f (A \\<union> B) = xs `\\<^sup>f A \\<union> xs `\\<^sup>f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs `\\<^sup>f (A \\<union> B) = xs `\\<^sup>f A \\<union> xs `\\<^sup>f B", "by blast"], ["", "lemma f_image_mono: \"A \\<subseteq> B ==> xs `\\<^sup>f A \\<subseteq> xs `\\<^sup>f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow>\n    xs `\\<^sup>f A \\<subseteq> xs `\\<^sup>f B", "by blast"], ["", "lemma f_image_iff: \"(x \\<in> xs `\\<^sup>f A) = (\\<exists>n\\<in>A. n < length xs \\<and> x = xs ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> xs `\\<^sup>f A) =\n    (\\<exists>n\\<in>A. n < length xs \\<and> x = xs ! n)", "by blast"], ["", "lemma f_image_subset_iff: \"\n  (xs `\\<^sup>f A \\<subseteq> B) = (\\<forall>n\\<in>A. n < length xs \\<longrightarrow> xs ! n \\<in> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs `\\<^sup>f A \\<subseteq> B) =\n    (\\<forall>n\\<in>A. n < length xs \\<longrightarrow> xs ! n \\<in> B)", "by blast"], ["", "lemma subset_f_image_iff: \"(B \\<subseteq> xs `\\<^sup>f A) = (\\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B \\<subseteq> xs `\\<^sup>f A) =\n    (\\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A')", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> xs `\\<^sup>f A \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A'\n 2. \\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A' \\<Longrightarrow>\n    B \\<subseteq> xs `\\<^sup>f A", "apply (rule_tac x=\"{ n. n \\<in> A \\<and> n < length xs \\<and> xs ! n \\<in> B }\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> xs `\\<^sup>f A \\<Longrightarrow>\n    {n \\<in> A. n < length xs \\<and> xs ! n \\<in> B} \\<subseteq> A \\<and>\n    B = xs `\\<^sup>f {n \\<in> A. n < length xs \\<and> xs ! n \\<in> B}\n 2. \\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A' \\<Longrightarrow>\n    B \\<subseteq> xs `\\<^sup>f A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A. B = xs `\\<^sup>f A' \\<Longrightarrow>\n    B \\<subseteq> xs `\\<^sup>f A", "apply (blast intro: f_image_mono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_image_subsetI: \"\n  \\<lbrakk> \\<And>n. n \\<in> A \\<and> n < length xs \\<Longrightarrow> xs ! n \\<in> B \\<rbrakk> \\<Longrightarrow> xs `\\<^sup>f A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        n \\<in> A \\<and> n < length xs \\<Longrightarrow>\n        xs ! n \\<in> B) \\<Longrightarrow>\n    xs `\\<^sup>f A \\<subseteq> B", "by blast"], ["", "lemma f_image_empty: \"xs `\\<^sup>f {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs `\\<^sup>f {} = {}", "by blast"], ["", "lemma f_image_insert_if: \"\n  xs `\\<^sup>f (insert n A) = (\n  if n < length xs then insert (xs ! n) (xs `\\<^sup>f A) else (xs `\\<^sup>f A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs `\\<^sup>f insert n A =\n    (if n < length xs then insert (xs ! n) (xs `\\<^sup>f A)\n     else xs `\\<^sup>f A)", "by (split if_split, blast)"], ["", "lemma f_image_insert_eq1: \"\n  n < length xs \\<Longrightarrow> xs `\\<^sup>f (insert n A) = insert (xs ! n) (xs `\\<^sup>f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow>\n    xs `\\<^sup>f insert n A = insert (xs ! n) (xs `\\<^sup>f A)", "by (simp add: f_image_insert_if)"], ["", "lemma f_image_insert_eq2: \"\n  length xs \\<le> n \\<Longrightarrow> xs `\\<^sup>f (insert n A) = (xs `\\<^sup>f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n \\<Longrightarrow>\n    xs `\\<^sup>f insert n A = xs `\\<^sup>f A", "by (simp add: f_image_insert_if)"], ["", "lemma insert_f_image: \"\n  \\<lbrakk> n \\<in> A; n < length xs \\<rbrakk> \\<Longrightarrow> insert (xs ! n) (xs `\\<^sup>f A) = (xs `\\<^sup>f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n    \\<Longrightarrow> insert (xs ! n) (xs `\\<^sup>f A) = xs `\\<^sup>f A", "by blast"], ["", "lemma f_image_is_empty: \"(xs `\\<^sup>f A = {}) = ({x. x \\<in> A \\<and> x < length xs} = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs `\\<^sup>f A = {}) = ({x \\<in> A. x < length xs} = {})", "by blast"], ["", "lemma f_image_Collect: \"xs `\\<^sup>f {n. P n} = {xs ! n |n. P n \\<and> n < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs `\\<^sup>f {n. P n} = {xs ! n |n. P n \\<and> n < length xs}", "by blast"], ["", "lemma f_image_eq_set: \"\\<forall>n<length xs. n \\<in> A \\<Longrightarrow> xs `\\<^sup>f A = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length xs. n \\<in> A \\<Longrightarrow>\n    xs `\\<^sup>f A = set xs", "by (fastforce simp: in_set_conv_nth)"], ["", "lemma f_range_eq_set: \"f_range xs = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_range xs = set xs", "by (simp add: f_image_eq_set)"], ["", "lemma f_image_eq_set_nths: \"xs `\\<^sup>f A = set (nths xs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs `\\<^sup>f A = set (nths xs A)", "by (unfold set_nths, blast)"], ["", "lemma f_image_eq_set_sublist_list_if: \"xs `\\<^sup>f (set ys) = set (sublist_list_if xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs `\\<^sup>f set ys = set (sublist_list_if xs ys)", "by (simp add: set_sublist_list_if_eq_set_sublist f_image_eq_set_nths)"], ["", "lemma f_image_eq_set_sublist_list: \"\n  list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow> xs `\\<^sup>f (set ys) = set (sublist_list xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>i. i < length xs) ys \\<Longrightarrow>\n    xs `\\<^sup>f set ys = set (sublist_list xs ys)", "by (simp add: sublist_list_if_sublist_list_eq f_image_eq_set_sublist_list_if)"], ["", "lemma f_range_eqI: \"\\<lbrakk> x = xs ! n; n < length xs \\<rbrakk> \\<Longrightarrow> x \\<in> f_range xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = xs ! n; n < length xs\\<rbrakk>\n    \\<Longrightarrow> x \\<in> f_range xs", "by blast"], ["", "lemma f_rangeI: \"n < length xs \\<Longrightarrow> xs ! n \\<in> f_range xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> xs ! n \\<in> f_range xs", "by blast"], ["", "lemma f_rangeE[elim?]: \"\n  \\<lbrakk> x \\<in> f_range xs; \\<And>n. \\<lbrakk> n < length xs; x = xs ! n \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> f_range xs;\n     \\<And>n.\n        \\<lbrakk>n < length xs; x = xs ! n\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by blast"], ["", "subsubsection \\<open>Mapping lists of functions to lists\\<close>"], ["", "primrec map_list :: \"('a \\<Rightarrow> 'b) list \\<Rightarrow> 'a list \\<Rightarrow> 'b list\"\nwhere\n  \"map_list [] xs = []\"\n| \"map_list (f # fs) xs = f (hd xs) # map_list fs (tl xs)\""], ["", "lemma map_list_Nil: \"map_list [] xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_list [] xs = []", "by simp"], ["", "lemma map_list_Cons_Cons: \"\n  map_list (f # fs) (x # xs) =\n  (f x) # map_list fs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_list (f # fs) (x # xs) = f x # map_list fs xs", "by simp"], ["", "lemma map_list_length: \"\\<And>xs.\n  length (map_list fs xs) = length fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs. length (map_list fs xs) = length fs", "by (induct fs, simp+)"], ["", "corollary map_list_empty_conv: \"\n  (map_list fs xs = []) = (fs = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_list fs xs = []) = (fs = [])", "by (simp del: length_0_conv add: length_0_conv[symmetric] map_list_length)"], ["", "corollary map_list_not_empty_conv: \"\n  (map_list fs xs \\<noteq> []) = (fs \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_list fs xs \\<noteq> []) = (fs \\<noteq> [])", "by (simp add: map_list_empty_conv)"], ["", "lemma map_list_nth: \"\\<And>n xs.\n  \\<lbrakk> n < length fs; n < length xs \\<rbrakk> \\<Longrightarrow>\n  (map_list fs xs ! n) =\n  (fs ! n) (xs ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>n < length fs; n < length xs\\<rbrakk>\n       \\<Longrightarrow> map_list fs xs ! n = (fs ! n) (xs ! n)", "apply (induct fs, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fs n xs.\n       \\<lbrakk>\\<And>n xs.\n                   \\<lbrakk>n < length fs; n < length xs\\<rbrakk>\n                   \\<Longrightarrow> map_list fs xs ! n = (fs ! n) (xs ! n);\n        n < Suc (length fs); n < length xs\\<rbrakk>\n       \\<Longrightarrow> (a (hd xs) # map_list fs (tl xs)) ! n =\n                         ((a # fs) ! n) (xs ! n)", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a fs n xs.\n       \\<lbrakk>\\<And>n xs.\n                   \\<lbrakk>n < length fs; n < length xs\\<rbrakk>\n                   \\<Longrightarrow> map_list fs xs ! n = (fs ! n) (xs ! n);\n        n < Suc (length fs); n < length xs; n = 0\\<rbrakk>\n       \\<Longrightarrow> (a (hd xs) # map_list fs (tl xs)) ! n =\n                         ((a # fs) ! n) (xs ! n)\n 2. \\<And>a fs n xs nat.\n       \\<lbrakk>\\<And>n xs.\n                   \\<lbrakk>n < length fs; n < length xs\\<rbrakk>\n                   \\<Longrightarrow> map_list fs xs ! n = (fs ! n) (xs ! n);\n        n < Suc (length fs); n < length xs; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a (hd xs) # map_list fs (tl xs)) ! n =\n                         ((a # fs) ! n) (xs ! n)", "apply (simp add: hd_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fs n xs nat.\n       \\<lbrakk>\\<And>n xs.\n                   \\<lbrakk>n < length fs; n < length xs\\<rbrakk>\n                   \\<Longrightarrow> map_list fs xs ! n = (fs ! n) (xs ! n);\n        n < Suc (length fs); n < length xs; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a (hd xs) # map_list fs (tl xs)) ! n =\n                         ((a # fs) ! n) (xs ! n)", "apply (simp add: nth_tl_eq_nth_Suc2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_list_xs_take: \"\\<And>n xs.\n  length fs \\<le> n \\<Longrightarrow>\n  map_list fs (xs \\<down> n) =\n  map_list fs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       length fs \\<le> n \\<Longrightarrow>\n       map_list fs (xs \\<down> n) = map_list fs xs", "apply (induct fs, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs n xs.\n       \\<lbrakk>\\<And>n xs.\n                   length fs \\<le> n \\<Longrightarrow>\n                   map_list fs (xs \\<down> n) = map_list fs xs;\n        Suc (length fs) \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map_list fs (tl (xs \\<down> n)) =\n                         map_list fs (tl xs)", "apply (rename_tac fs n xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs n xs.\n       \\<lbrakk>\\<And>n xs.\n                   length fs \\<le> n \\<Longrightarrow>\n                   map_list fs (xs \\<down> n) = map_list fs xs;\n        Suc (length fs) \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map_list fs (tl (xs \\<down> n)) =\n                         map_list fs (tl xs)", "apply (simp add: tl_take)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_list_take: \"\\<And>n xs.\n  (map_list fs xs) \\<down> n =\n  (map_list (fs \\<down> n) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs. map_list fs xs \\<down> n = map_list (fs \\<down> n) xs", "apply (induct fs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fs n xs.\n       (\\<And>n xs.\n           map_list fs xs \\<down> n =\n           map_list (fs \\<down> n) xs) \\<Longrightarrow>\n       map_list (a # fs) xs \\<down> n = map_list ((a # fs) \\<down> n) xs", "apply (case_tac n, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_list_take_take: \"\\<And>n xs.\n  (map_list fs xs) \\<down> n =\n  (map_list (fs \\<down> n) (xs \\<down> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       map_list fs xs \\<down> n = map_list (fs \\<down> n) (xs \\<down> n)", "by (simp add: map_list_take map_list_xs_take)"], ["", "lemma map_list_drop: \"\\<And>n xs.\n  (map_list fs xs) \\<up> n =\n  (map_list (fs \\<up> n) (xs \\<up> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs. map_list fs xs \\<up> n = map_list (fs \\<up> n) (xs \\<up> n)", "apply (induct fs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fs n xs.\n       (\\<And>n xs.\n           map_list fs xs \\<up> n =\n           map_list (fs \\<up> n) (xs \\<up> n)) \\<Longrightarrow>\n       map_list (a # fs) xs \\<up> n =\n       map_list ((a # fs) \\<up> n) (xs \\<up> n)", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a fs n xs.\n       \\<lbrakk>\\<And>n xs.\n                   map_list fs xs \\<up> n =\n                   map_list (fs \\<up> n) (xs \\<up> n);\n        n = 0\\<rbrakk>\n       \\<Longrightarrow> map_list (a # fs) xs \\<up> n =\n                         map_list ((a # fs) \\<up> n) (xs \\<up> n)\n 2. \\<And>a fs n xs nat.\n       \\<lbrakk>\\<And>n xs.\n                   map_list fs xs \\<up> n =\n                   map_list (fs \\<up> n) (xs \\<up> n);\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> map_list (a # fs) xs \\<up> n =\n                         map_list ((a # fs) \\<up> n) (xs \\<up> n)", "apply (simp add: drop_Suc)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_list_append_append: \"\\<And>xs1 .\n  length fs1 = length xs1 \\<Longrightarrow>\n  map_list (fs1 @ fs2) (xs1 @ xs2) =\n  map_list fs1 xs1 @\n  map_list fs2 xs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs1.\n       length fs1 = length xs1 \\<Longrightarrow>\n       map_list (fs1 @ fs2) (xs1 @ xs2) =\n       map_list fs1 xs1 @ map_list fs2 xs2", "apply (induct fs1, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fs1 xs1.\n       \\<lbrakk>\\<And>xs1.\n                   length fs1 = length xs1 \\<Longrightarrow>\n                   map_list (fs1 @ fs2) (xs1 @ xs2) =\n                   map_list fs1 xs1 @ map_list fs2 xs2;\n        Suc (length fs1) = length xs1\\<rbrakk>\n       \\<Longrightarrow> a (hd (xs1 @ xs2)) = a (hd xs1) \\<and>\n                         map_list (fs1 @ fs2) (tl (xs1 @ xs2)) =\n                         map_list fs1 (tl xs1) @ map_list fs2 xs2", "apply (case_tac \"xs1\", simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_list_snoc_snoc: \"\n  length fs = length xs \\<Longrightarrow>\n  map_list (fs @ [f]) (xs @ [x]) =\n  map_list fs xs @ [f x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length fs = length xs \\<Longrightarrow>\n    map_list (fs @ [f]) (xs @ [x]) = map_list fs xs @ [f x]", "by (simp add: map_list_append_append)"], ["", "lemma map_list_snoc: \"\\<And>xs.\n  length fs < length xs \\<Longrightarrow>\n  map_list (fs @ [f]) xs =\n  map_list fs xs @  [f (xs ! (length fs))]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       length fs < length xs \\<Longrightarrow>\n       map_list (fs @ [f]) xs = map_list fs xs @ [f (xs ! length fs)]", "apply (induct fs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       length [] < length xs \\<Longrightarrow>\n       map_list ([] @ [f]) xs = map_list [] xs @ [f (xs ! length [])]\n 2. \\<And>a fs xs.\n       \\<lbrakk>\\<And>xs.\n                   length fs < length xs \\<Longrightarrow>\n                   map_list (fs @ [f]) xs =\n                   map_list fs xs @ [f (xs ! length fs)];\n        length (a # fs) < length xs\\<rbrakk>\n       \\<Longrightarrow> map_list ((a # fs) @ [f]) xs =\n                         map_list (a # fs) xs @ [f (xs ! length (a # fs))]", "apply (simp add: hd_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fs xs.\n       \\<lbrakk>\\<And>xs.\n                   length fs < length xs \\<Longrightarrow>\n                   map_list (fs @ [f]) xs =\n                   map_list fs xs @ [f (xs ! length fs)];\n        length (a # fs) < length xs\\<rbrakk>\n       \\<Longrightarrow> map_list ((a # fs) @ [f]) xs =\n                         map_list (a # fs) xs @ [f (xs ! length (a # fs))]", "apply (simp add: nth_tl_eq_nth_Suc2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_list_Cons_if: \"\n  map_list fs (x # xs) =\n  (if (fs = []) then [] else (\n    ((hd fs) x) # map_list (tl fs) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_list fs (x # xs) =\n    (if fs = [] then [] else hd fs x # map_list (tl fs) xs)", "by (case_tac \"fs\", simp+)"], ["", "lemma map_list_Cons_not_empty: \"\n  fs \\<noteq> [] \\<Longrightarrow>\n  map_list fs (x # xs) =\n  ((hd fs) x) # map_list (tl fs) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fs \\<noteq> [] \\<Longrightarrow>\n    map_list fs (x # xs) = hd fs x # map_list (tl fs) xs", "by (simp add: map_list_Cons_if)"], ["", "lemma map_eq_map_list_take: \"\\<And>xs.\n  \\<lbrakk> length fs \\<le> length xs; list_all (\\<lambda>x. x = f) fs \\<rbrakk> \\<Longrightarrow>\n  map_list fs xs = map f (xs \\<down> length fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>length fs \\<le> length xs;\n        list_all (\\<lambda>x. x = f) fs\\<rbrakk>\n       \\<Longrightarrow> map_list fs xs = map f (xs \\<down> length fs)", "apply (induct fs, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs xs.\n       \\<lbrakk>\\<And>xs.\n                   length fs \\<le> length xs \\<Longrightarrow>\n                   map_list fs xs = map f (xs \\<down> length fs);\n        Suc (length fs) \\<le> length xs;\n        list_all (\\<lambda>x. x = f) fs\\<rbrakk>\n       \\<Longrightarrow> f (hd xs) # map f (tl xs \\<down> length fs) =\n                         map f (xs \\<down> Suc (length fs))", "apply (case_tac xs, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_eq_map_list_take2: \"\n  \\<lbrakk> length fs = length xs; list_all (\\<lambda>x. x = f) fs \\<rbrakk> \\<Longrightarrow>\n  map_list fs xs = map f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length fs = length xs; list_all (\\<lambda>x. x = f) fs\\<rbrakk>\n    \\<Longrightarrow> map_list fs xs = map f xs", "by (simp add: map_eq_map_list_take)"], ["", "lemma map_eq_map_list_replicate: \"\n  map_list (f\\<^bsup>length xs\\<^esup>) xs = map f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_list f\\<^bsup>length xs\\<^esup> xs = map f xs", "by (induct xs, simp+)"], ["", "subsubsection \\<open>Mapping functions with two arguments to lists\\<close>"], ["", "primrec map2 :: \"\n  \\<comment> \\<open>Function taking two parameters\\<close>\n  ('a \\<Rightarrow> 'b \\<Rightarrow> 'c) \\<Rightarrow>\n  \\<comment> \\<open>Lists of parameters\\<close>\n  'a list \\<Rightarrow> 'b list \\<Rightarrow>\n  'c list\"\nwhere\n  \"map2 f [] ys = []\"\n| \"map2 f (x # xs) ys = f x (hd ys) # map2 f xs (tl ys)\""], ["", "lemma map2_map_list_conv: \"\\<And>ys. map2 f xs ys = map_list (map f xs) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys. List2.map2 f xs ys = map_list (map f xs) ys", "by (induct xs, simp+)"], ["", "lemma map2_Nil: \"map2 f [] ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List2.map2 f [] ys = []", "by simp"], ["", "lemma map2_Cons_Cons: \"\n  map2 f (x # xs) (y # ys) =\n  (f x y) # map2 f xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List2.map2 f (x # xs) (y # ys) = f x y # List2.map2 f xs ys", "by simp"], ["", "lemma map2_length: \"\\<And>ys. length (map2 f xs ys) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys. length (List2.map2 f xs ys) = length xs", "by (induct xs, simp+)"], ["", "corollary map2_empty_conv: \"\n  (map2 f xs ys = []) = (xs = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (List2.map2 f xs ys = []) = (xs = [])", "by (simp del: length_0_conv add: length_0_conv[symmetric] map2_length)"], ["", "corollary map2_not_empty_conv: \"\n  (map2 f xs ys \\<noteq> []) = (xs \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (List2.map2 f xs ys \\<noteq> []) = (xs \\<noteq> [])", "by (simp add: map2_empty_conv)"], ["", "lemma map2_nth: \"\\<And>n ys.\n  \\<lbrakk> n < length xs; n < length ys \\<rbrakk> \\<Longrightarrow>\n  (map2 f xs ys ! n) =\n  f (xs ! n) (ys ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ys.\n       \\<lbrakk>n < length xs; n < length ys\\<rbrakk>\n       \\<Longrightarrow> List2.map2 f xs ys ! n = f (xs ! n) (ys ! n)", "by (simp add: map2_map_list_conv map_list_nth)"], ["", "lemma map2_ys_take: \"\\<And>n ys.\n  length xs \\<le> n \\<Longrightarrow>\n  map2 f xs (ys \\<down> n) =\n  map2 f xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ys.\n       length xs \\<le> n \\<Longrightarrow>\n       List2.map2 f xs (ys \\<down> n) = List2.map2 f xs ys", "by (simp add: map2_map_list_conv map_list_xs_take)"], ["", "lemma map2_take: \"\\<And>n ys.\n  (map2 f xs ys) \\<down> n =\n  (map2 f (xs \\<down> n) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ys.\n       List2.map2 f xs ys \\<down> n = List2.map2 f (xs \\<down> n) ys", "by (simp add: map2_map_list_conv take_map map_list_take)"], ["", "lemma map2_take_take: \"\\<And>n ys.\n  (map2 f xs ys) \\<down> n =\n  (map2 f (xs \\<down> n) (ys \\<down> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ys.\n       List2.map2 f xs ys \\<down> n =\n       List2.map2 f (xs \\<down> n) (ys \\<down> n)", "by (simp add: map2_take map2_ys_take)"], ["", "lemma map2_drop: \"\\<And>n ys.\n  (map2 f xs ys) \\<up> n =\n  (map2 f (xs \\<up> n) (ys \\<up> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ys.\n       List2.map2 f xs ys \\<up> n = List2.map2 f (xs \\<up> n) (ys \\<up> n)", "by (simp add: map2_map_list_conv map_list_drop drop_map)"], ["", "lemma map2_append_append: \"\\<And>ys1 .\n  length xs1 = length ys1 \\<Longrightarrow>\n  map2 f (xs1 @ xs2) (ys1 @ ys2) =\n  map2 f xs1 ys1 @\n  map2 f xs2 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys1.\n       length xs1 = length ys1 \\<Longrightarrow>\n       List2.map2 f (xs1 @ xs2) (ys1 @ ys2) =\n       List2.map2 f xs1 ys1 @ List2.map2 f xs2 ys2", "by (simp add: map2_map_list_conv map_list_append_append)"], ["", "lemma map2_snoc_snoc: \"\n  length xs = length ys \\<Longrightarrow>\n  map2 f (xs @ [x]) (ys @ [y]) =\n  map2 f xs ys @\n  [f x y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow>\n    List2.map2 f (xs @ [x]) (ys @ [y]) = List2.map2 f xs ys @ [f x y]", "by (simp add: map2_append_append)"], ["", "lemma map2_snoc: \"\\<And>ys.\n  length xs < length ys \\<Longrightarrow>\n  map2 f (xs @ [x]) ys =\n  map2 f xs ys @\n  [f x (ys ! (length xs))]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       length xs < length ys \\<Longrightarrow>\n       List2.map2 f (xs @ [x]) ys =\n       List2.map2 f xs ys @ [f x (ys ! length xs)]", "by (simp add: map2_map_list_conv map_list_snoc)"], ["", "lemma map2_Cons_if: \"\n  map2 f xs (y # ys) =\n  (if (xs = []) then [] else (\n    (f (hd xs) y) # map2 f (tl xs) ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List2.map2 f xs (y # ys) =\n    (if xs = [] then [] else f (hd xs) y # List2.map2 f (tl xs) ys)", "by (case_tac \"xs\", simp+)"], ["", "lemma map2_Cons_not_empty: \"\n  xs \\<noteq> [] \\<Longrightarrow>\n  map2 f xs (y # ys) =\n  (f (hd xs) y) # map2 f (tl xs) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    List2.map2 f xs (y # ys) = f (hd xs) y # List2.map2 f (tl xs) ys", "by (simp add: map2_Cons_if)"], ["", "lemma map2_append1_take_drop: \"\n  length xs1 \\<le> length ys \\<Longrightarrow>\n  map2 f (xs1 @ xs2) ys =\n  map2 f xs1 (ys \\<down> length xs1) @\n  map2 f xs2 (ys \\<up> length xs1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs1 \\<le> length ys \\<Longrightarrow>\n    List2.map2 f (xs1 @ xs2) ys =\n    List2.map2 f xs1 (ys \\<down> length xs1) @\n    List2.map2 f xs2 (ys \\<up> length xs1)", "apply (rule_tac\n  t = \"map2 f (xs1 @ xs2) ys\" and\n  s = \"map2 f (xs1 @ xs2) (ys \\<down> length xs1 @ ys \\<up> length xs1)\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length xs1 \\<le> length ys \\<Longrightarrow>\n    List2.map2 f (xs1 @ xs2) (ys \\<down> length xs1 @ ys \\<up> length xs1) =\n    List2.map2 f (xs1 @ xs2) ys\n 2. length xs1 \\<le> length ys \\<Longrightarrow>\n    List2.map2 f (xs1 @ xs2) (ys \\<down> length xs1 @ ys \\<up> length xs1) =\n    List2.map2 f xs1 (ys \\<down> length xs1) @\n    List2.map2 f xs2 (ys \\<up> length xs1)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs1 \\<le> length ys \\<Longrightarrow>\n    List2.map2 f (xs1 @ xs2) (ys \\<down> length xs1 @ ys \\<up> length xs1) =\n    List2.map2 f xs1 (ys \\<down> length xs1) @\n    List2.map2 f xs2 (ys \\<up> length xs1)", "apply (simp add: map2_append_append del: append_take_drop_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map2_append2_take_drop: \"\n  length ys1 \\<le> length xs \\<Longrightarrow>\n  map2 f xs (ys1 @ ys2) =\n  map2 f (xs \\<down> length ys1) ys1 @\n  map2 f (xs \\<up> length ys1) ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys1 \\<le> length xs \\<Longrightarrow>\n    List2.map2 f xs (ys1 @ ys2) =\n    List2.map2 f (xs \\<down> length ys1) ys1 @\n    List2.map2 f (xs \\<up> length ys1) ys2", "apply (rule_tac\n  t = \"map2 f xs (ys1 @ ys2)\" and\n  s = \"map2 f (xs \\<down> length ys1 @ xs \\<up> length ys1) (ys1 @ ys2)\"\n  in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length ys1 \\<le> length xs \\<Longrightarrow>\n    List2.map2 f (xs \\<down> length ys1 @ xs \\<up> length ys1) (ys1 @ ys2) =\n    List2.map2 f xs (ys1 @ ys2)\n 2. length ys1 \\<le> length xs \\<Longrightarrow>\n    List2.map2 f (xs \\<down> length ys1 @ xs \\<up> length ys1) (ys1 @ ys2) =\n    List2.map2 f (xs \\<down> length ys1) ys1 @\n    List2.map2 f (xs \\<up> length ys1) ys2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys1 \\<le> length xs \\<Longrightarrow>\n    List2.map2 f (xs \\<down> length ys1 @ xs \\<up> length ys1) (ys1 @ ys2) =\n    List2.map2 f (xs \\<down> length ys1) ys1 @\n    List2.map2 f (xs \\<up> length ys1) ys2", "apply (simp add: map2_append_append del: append_take_drop_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map2_cong: \"\n  \\<lbrakk> xs1 = xs2; ys1 = ys2; length xs2 \\<le> length ys2;\n    \\<And>x y. \\<lbrakk> x \\<in> set xs2; y \\<in> set ys2 \\<rbrakk> \\<Longrightarrow> f x y = g x y \\<rbrakk> \\<Longrightarrow>\n  map2 f xs1 ys1 = map2 g xs2 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs1 = xs2; ys1 = ys2; length xs2 \\<le> length ys2;\n     \\<And>x y.\n        \\<lbrakk>x \\<in> set xs2; y \\<in> set ys2\\<rbrakk>\n        \\<Longrightarrow> f x y = g x y\\<rbrakk>\n    \\<Longrightarrow> List2.map2 f xs1 ys1 = List2.map2 g xs2 ys2", "by (simp (no_asm_simp) add: expand_list_eq map2_length map2_nth)"], ["", "lemma map2_eq_conv: \"\n  length xs \\<le> length ys \\<Longrightarrow>\n  (map2 f xs ys = map2 g xs ys) = (\\<forall>i<length xs. f (xs ! i) (ys ! i) = g (xs ! i) (ys ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    (List2.map2 f xs ys = List2.map2 g xs ys) =\n    (\\<forall>i<length xs. f (xs ! i) (ys ! i) = g (xs ! i) (ys ! i))", "by (simp add: expand_list_eq map2_length map2_nth)"], ["", "lemma map2_replicate: \"map2 f x\\<^bsup>n\\<^esup> y\\<^bsup>n\\<^esup> = (f x y)\\<^bsup>n\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List2.map2 f x\\<^bsup>n\\<^esup> y\\<^bsup>n\\<^esup> =\n    (f x y)\\<^bsup>n\\<^esup>", "by (induct n, simp+)"], ["", "lemma map2_zip_conv: \"\\<And>ys.\n  length xs \\<le> length ys \\<Longrightarrow>\n  map2 f xs ys = map (\\<lambda>(x,y). f x y) (zip xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       length xs \\<le> length ys \\<Longrightarrow>\n       List2.map2 f xs ys = List.map2 f xs ys", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs \\<le> length ys \\<Longrightarrow>\n                   List2.map2 f xs ys = List.map2 f xs ys;\n        length (a # xs) \\<le> length ys\\<rbrakk>\n       \\<Longrightarrow> List2.map2 f (a # xs) ys = List.map2 f (a # xs) ys", "apply (case_tac ys, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map2_rev: \"\\<And>ys.\n  length xs = length ys \\<Longrightarrow>\n  rev (map2 f xs ys) = map2 f (rev xs) (rev ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       length xs = length ys \\<Longrightarrow>\n       rev (List2.map2 f xs ys) = List2.map2 f (rev xs) (rev ys)", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   rev (List2.map2 f xs ys) =\n                   List2.map2 f (rev xs) (rev ys);\n        length (a # xs) = length ys\\<rbrakk>\n       \\<Longrightarrow> rev (List2.map2 f (a # xs) ys) =\n                         List2.map2 f (rev (a # xs)) (rev ys)", "apply (case_tac ys, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys aa list.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   rev (List2.map2 f xs ys) =\n                   List2.map2 f (rev xs) (rev ys);\n        length (a # xs) = length ys; ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> rev (List2.map2 f (a # xs) ys) =\n                         List2.map2 f (rev (a # xs)) (rev ys)", "apply (simp add: map2_Cons_Cons map2_snoc_snoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "hide_const (open) map2"], ["", "end"]]}