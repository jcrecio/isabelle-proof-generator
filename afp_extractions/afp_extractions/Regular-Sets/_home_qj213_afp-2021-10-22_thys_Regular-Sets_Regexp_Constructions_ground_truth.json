{"file_name": "/home/qj213/afp-2021-10-22/thys/Regular-Sets/Regexp_Constructions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Regular-Sets", "problem_names": ["lemma rev_conc [simp]: \"rev ` (A @@ B) = rev ` B @@ rev ` A\"", "lemma rev_compower [simp]: \"rev ` (A ^^ n) = (rev ` A) ^^ n\"", "lemma rev_star [simp]: \"rev ` star A = star (rev ` A)\"", "lemma subst_word_Nil [simp]: \"subst_word f [] = []\"", "lemma subst_word_singleton [simp]: \"subst_word f [x] = f x\"", "lemma subst_word_append [simp]: \"subst_word f (xs @ ys) = subst_word f xs @ subst_word f ys\"", "lemma subst_word_Cons [simp]: \"subst_word f (x # xs) = f x @ subst_word f xs\"", "lemma subst_word_conc [simp]: \"subst_word f ` (A @@ B) = subst_word f ` A @@ subst_word f ` B\"", "lemma subst_word_compower [simp]: \"subst_word f ` (A ^^ n) = (subst_word f ` A) ^^ n\"", "lemma subst_word_star [simp]: \"subst_word f ` (star A) = star (subst_word f ` A)\"", "lemma Suffixes_altdef [code]: \"Suffixes A = (\\<Union>w\\<in>A. set (suffixes w))\"", "lemma Nil_in_Suffixes_iff [simp]: \"[] \\<in> Suffixes A \\<longleftrightarrow> A \\<noteq> {}\"", "lemma Suffixes_empty [simp]: \"Suffixes {} = {}\"", "lemma Suffixes_empty_iff [simp]: \"Suffixes A = {} \\<longleftrightarrow> A = {}\"", "lemma Suffixes_singleton [simp]: \"Suffixes {xs} = set (suffixes xs)\"", "lemma Suffixes_insert: \"Suffixes (insert xs A) = set (suffixes xs) \\<union> Suffixes A\"", "lemma Suffixes_conc [simp]: \"A \\<noteq> {} \\<Longrightarrow> Suffixes (A @@ B) = Suffixes B \\<union> (Suffixes A @@ B)\"", "lemma Suffixes_union [simp]: \"Suffixes (A \\<union> B) = Suffixes A \\<union> Suffixes B\"", "lemma Suffixes_UNION [simp]: \"Suffixes (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Suffixes (f x)) ` A)\"", "lemma Suffixes_compower: \n  assumes \"A \\<noteq> {}\"\n  shows   \"Suffixes (A ^^ n) = insert [] (Suffixes A @@ (\\<Union>k<n. A ^^ k))\"", "lemma Suffixes_star [simp]: \n  assumes \"A \\<noteq> {}\"\n  shows   \"Suffixes (star A) = Suffixes A @@ star A\"", "lemma Prefixes_altdef [code]: \"Prefixes A = (\\<Union>w\\<in>A. set (prefixes w))\"", "lemma Nil_in_Prefixes_iff [simp]: \"[] \\<in> Prefixes A \\<longleftrightarrow> A \\<noteq> {}\"", "lemma Prefixes_empty [simp]: \"Prefixes {} = {}\"", "lemma Prefixes_empty_iff [simp]: \"Prefixes A = {} \\<longleftrightarrow> A = {}\"", "lemma Prefixes_singleton [simp]: \"Prefixes {xs} = set (prefixes xs)\"", "lemma Prefixes_insert: \"Prefixes (insert xs A) = set (prefixes xs) \\<union> Prefixes A\"", "lemma Prefixes_conc [simp]: \"B \\<noteq> {} \\<Longrightarrow> Prefixes (A @@ B) = Prefixes A \\<union> (A @@ Prefixes B)\"", "lemma Prefixes_union [simp]: \"Prefixes (A \\<union> B) = Prefixes A \\<union> Prefixes B\"", "lemma Prefixes_UNION [simp]: \"Prefixes (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Prefixes (f x)) ` A)\"", "lemma Prefixes_rev: \"Prefixes (rev ` A) = rev ` Suffixes A\"", "lemma Suffixes_rev: \"Suffixes (rev ` A) = rev ` Prefixes A\"", "lemma Prefixes_compower:\n  assumes \"A \\<noteq> {}\"\n  shows   \"Prefixes (A ^^ n) = insert [] ((\\<Union>k<n. A ^^ k) @@ Prefixes A)\"", "lemma Prefixes_star [simp]:\n  assumes \"A \\<noteq> {}\"\n  shows   \"Prefixes (star A) = star A @@ Prefixes A\"", "lemma Sublists_altdef [code]: \"Sublists A = (\\<Union>w\\<in>A. set (sublists w))\"", "lemma Sublists_empty [simp]: \"Sublists {} = {}\"", "lemma Sublists_singleton [simp]: \"Sublists {w} = set (sublists w)\"", "lemma Sublists_insert: \"Sublists (insert w A) = set (sublists w) \\<union> Sublists A\"", "lemma Sublists_Un [simp]: \"Sublists (A \\<union> B) = Sublists A \\<union> Sublists B\"", "lemma Sublists_UN [simp]: \"Sublists (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Sublists (f x)) ` A)\"", "lemma Sublists_conv_Prefixes: \"Sublists A = Prefixes (Suffixes A)\"", "lemma Sublists_conv_Suffixes: \"Sublists A = Suffixes (Prefixes A)\"", "lemma Sublists_conc [simp]: \n  assumes \"A \\<noteq> {}\" \"B \\<noteq> {}\"\n  shows   \"Sublists (A @@ B) = Sublists A \\<union> Sublists B \\<union> Suffixes A @@ Prefixes B\"", "lemma star_not_empty [simp]: \"star A \\<noteq> {}\"", "lemma Sublists_star:\n  \"A \\<noteq> {} \\<Longrightarrow> Sublists (star A) = Sublists A \\<union> Suffixes A @@ star A @@ Prefixes A\"", "lemma Prefixes_subset_Sublists: \"Prefixes A \\<subseteq> Sublists A\"", "lemma Suffixes_subset_Sublists: \"Suffixes A \\<subseteq> Sublists A\"", "lemma Subseqs_empty [simp]: \"Subseqs {} = {}\"", "lemma Subseqs_insert [simp]: \"Subseqs (insert xs A) = set (subseqs xs) \\<union> Subseqs A\"", "lemma Subseqs_singleton [simp]: \"Subseqs {xs} = set (subseqs xs)\"", "lemma Subseqs_Un [simp]: \"Subseqs (A \\<union> B) = Subseqs A \\<union> Subseqs B\"", "lemma Subseqs_UNION [simp]: \"Subseqs (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Subseqs (f x)) ` A)\"", "lemma Subseqs_conc [simp]: \"Subseqs (A @@ B) = Subseqs A @@ Subseqs B\"", "lemma Subseqs_compower [simp]: \"Subseqs (A ^^ n) = Subseqs A ^^ n\"", "lemma Subseqs_star [simp]: \"Subseqs (star A) = star (Subseqs A)\"", "lemma Sublists_subset_Subseqs: \"Sublists A \\<subseteq> Subseqs A\"", "lemma lang_rexp_rev [simp]: \"lang (rexp_rev r) = rev ` lang r\"", "lemma lang_rexp_of_word [simp]: \"lang (rexp_of_word xs) = {xs}\"", "lemma size_rexp_of_word [simp]: \"size (rexp_of_word xs) = Suc (2 * (length xs - 1))\"", "lemma lang_rexp_subst: \"lang (rexp_subst f r) = subst_word f ` lang r\"", "theorem lang_suffix_rexp [simp]:\n  \"lang (suffix_rexp r) = Suffixes (lang r)\"", "theorem lang_prefix_rexp [simp]:\n  \"lang (prefix_rexp r) = Prefixes (lang r)\"", "theorem lang_sublist_rexp [simp]:\n  \"lang (sublist_rexp r) = Sublists (lang r)\"", "lemma lang_subseqs_rexp [simp]: \"lang (subseqs_rexp r) = Subseqs (lang r)\""], "translations": [["", "lemma rev_conc [simp]: \"rev ` (A @@ B) = rev ` B @@ rev ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` (A @@ B) = rev ` B @@ rev ` A", "unfolding conc_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B}.\n           y = rev x} =\n    {xs @ ys |xs ys.\n     xs \\<in> {y. \\<exists>x\\<in>B. y = rev x} \\<and>\n     ys \\<in> {y. \\<exists>x\\<in>A. y = rev x}}", "by force"], ["", "lemma rev_compower [simp]: \"rev ` (A ^^ n) = (rev ` A) ^^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` (A ^^ n) = rev ` A ^^ n", "by (induction n) (simp_all add: conc_pow_comm)"], ["", "lemma rev_star [simp]: \"rev ` star A = star (rev ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` star A = star (rev ` A)", "by (simp add: star_def image_UN)"], ["", "subsection \\<open>Substituting characters in a language\\<close>"], ["", "definition subst_word :: \"('a \\<Rightarrow> 'b list) \\<Rightarrow> 'a list \\<Rightarrow> 'b list\" where\n  \"subst_word f xs = concat (map f xs)\""], ["", "lemma subst_word_Nil [simp]: \"subst_word f [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f [] = []", "by (simp add: subst_word_def)"], ["", "lemma subst_word_singleton [simp]: \"subst_word f [x] = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f [x] = f x", "by (simp add: subst_word_def)"], ["", "lemma subst_word_append [simp]: \"subst_word f (xs @ ys) = subst_word f xs @ subst_word f ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f (xs @ ys) = subst_word f xs @ subst_word f ys", "by (simp add: subst_word_def)"], ["", "lemma subst_word_Cons [simp]: \"subst_word f (x # xs) = f x @ subst_word f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f (x # xs) = f x @ subst_word f xs", "by (simp add: subst_word_def)"], ["", "lemma subst_word_conc [simp]: \"subst_word f ` (A @@ B) = subst_word f ` A @@ subst_word f ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f ` (A @@ B) = subst_word f ` A @@ subst_word f ` B", "unfolding conc_def image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B}.\n           y = subst_word f x} =\n    {xs @ ys |xs ys.\n     xs \\<in> {y. \\<exists>x\\<in>A. y = subst_word f x} \\<and>\n     ys \\<in> {y. \\<exists>x\\<in>B. y = subst_word f x}}", "by force"], ["", "lemma subst_word_compower [simp]: \"subst_word f ` (A ^^ n) = (subst_word f ` A) ^^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f ` (A ^^ n) = subst_word f ` A ^^ n", "by (induction n) simp_all"], ["", "lemma subst_word_star [simp]: \"subst_word f ` (star A) = star (subst_word f ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_word f ` star A = star (subst_word f ` A)", "by (simp add: star_def image_UN)"], ["", "text \\<open>Suffix language\\<close>"], ["", "definition Suffixes :: \"'a list set \\<Rightarrow> 'a list set\" where\n  \"Suffixes A = {w. \\<exists>q. q @ w \\<in> A}\""], ["", "lemma Suffixes_altdef [code]: \"Suffixes A = (\\<Union>w\\<in>A. set (suffixes w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes A = (\\<Union>w\\<in>A. set (suffixes w))", "unfolding Suffixes_def set_suffixes_eq suffix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {w. \\<exists>q. q @ w \\<in> A} =\n    (\\<Union>w\\<in>A. {ys. \\<exists>zs. w = zs @ ys})", "by blast"], ["", "lemma Nil_in_Suffixes_iff [simp]: \"[] \\<in> Suffixes A \\<longleftrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] \\<in> Suffixes A) = (A \\<noteq> {})", "by (auto simp: Suffixes_def)"], ["", "lemma Suffixes_empty [simp]: \"Suffixes {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes {} = {}", "by (auto simp: Suffixes_def)"], ["", "lemma Suffixes_empty_iff [simp]: \"Suffixes A = {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suffixes A = {}) = (A = {})", "by (auto simp: Suffixes_altdef)"], ["", "lemma Suffixes_singleton [simp]: \"Suffixes {xs} = set (suffixes xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes {xs} = set (suffixes xs)", "by (auto simp: Suffixes_altdef)"], ["", "lemma Suffixes_insert: \"Suffixes (insert xs A) = set (suffixes xs) \\<union> Suffixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (insert xs A) = set (suffixes xs) \\<union> Suffixes A", "by (simp add: Suffixes_altdef)"], ["", "lemma Suffixes_conc [simp]: \"A \\<noteq> {} \\<Longrightarrow> Suffixes (A @@ B) = Suffixes B \\<union> (Suffixes A @@ B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    Suffixes (A @@ B) = Suffixes B \\<union> Suffixes A @@ B", "unfolding Suffixes_altdef conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    (\\<Union>w\\<in>{xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B}.\n        set (suffixes w)) =\n    (\\<Union>w\\<in>B. set (suffixes w)) \\<union>\n    {xs @ ys |xs ys.\n     xs \\<in> (\\<Union>w\\<in>A. set (suffixes w)) \\<and> ys \\<in> B}", "by (force simp: suffix_append)"], ["", "lemma Suffixes_union [simp]: \"Suffixes (A \\<union> B) = Suffixes A \\<union> Suffixes B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (A \\<union> B) = Suffixes A \\<union> Suffixes B", "by (auto simp: Suffixes_def)"], ["", "lemma Suffixes_UNION [simp]: \"Suffixes (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Suffixes (f x)) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (\\<Union> (f ` A)) = (\\<Union>x\\<in>A. Suffixes (f x))", "by (auto simp: Suffixes_def)"], ["", "lemma Suffixes_compower: \n  assumes \"A \\<noteq> {}\"\n  shows   \"Suffixes (A ^^ n) = insert [] (Suffixes A @@ (\\<Union>k<n. A ^^ k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (A ^^ n) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "case (Suc n)"], ["proof (state)\nthis:\n  Suffixes (A ^^ n) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))\n\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "from Suc"], ["proof (chain)\npicking this:\n  Suffixes (A ^^ n) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))", "have \"Suffixes (A ^^ Suc n) = \n                   insert [] (Suffixes A @@ ((\\<Union>k<n. A ^^ k) \\<union> A ^^ n))\""], ["proof (prove)\nusing this:\n  Suffixes (A ^^ n) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))\n\ngoal (1 subgoal):\n 1. Suffixes (A ^^ Suc n) =\n    insert [] (Suffixes A @@ (\\<Union> ((^^) A ` {..<n}) \\<union> A ^^ n))", "by (simp_all add: assms conc_Un_distrib)"], ["proof (state)\nthis:\n  Suffixes (A ^^ Suc n) =\n  insert [] (Suffixes A @@ (\\<Union> ((^^) A ` {..<n}) \\<union> A ^^ n))\n\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "also"], ["proof (state)\nthis:\n  Suffixes (A ^^ Suc n) =\n  insert [] (Suffixes A @@ (\\<Union> ((^^) A ` {..<n}) \\<union> A ^^ n))\n\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "have \"(\\<Union>k<n. A ^^ k) \\<union> A ^^ n = (\\<Union>k\\<in>insert n {..<n}. A ^^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> ((^^) A ` {..<n}) \\<union> A ^^ n =\n    \\<Union> ((^^) A ` insert n {..<n})", "by blast"], ["proof (state)\nthis:\n  \\<Union> ((^^) A ` {..<n}) \\<union> A ^^ n =\n  \\<Union> ((^^) A ` insert n {..<n})\n\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "also"], ["proof (state)\nthis:\n  \\<Union> ((^^) A ` {..<n}) \\<union> A ^^ n =\n  \\<Union> ((^^) A ` insert n {..<n})\n\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "have \"insert n {..<n} = {..<Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert n {..<n} = {..<Suc n}", "by auto"], ["proof (state)\nthis:\n  insert n {..<n} = {..<Suc n}\n\ngoal (2 subgoals):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))\n 2. \\<And>n.\n       Suffixes (A ^^ n) =\n       insert []\n        (Suffixes A @@ \\<Union> ((^^) A ` {..<n})) \\<Longrightarrow>\n       Suffixes (A ^^ Suc n) =\n       insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "finally"], ["proof (chain)\npicking this:\n  Suffixes (A ^^ Suc n) =\n  insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "show ?case"], ["proof (prove)\nusing this:\n  Suffixes (A ^^ Suc n) =\n  insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))\n\ngoal (1 subgoal):\n 1. Suffixes (A ^^ Suc n) =\n    insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))", "."], ["proof (state)\nthis:\n  Suffixes (A ^^ Suc n) =\n  insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<Suc n}))\n\ngoal (1 subgoal):\n 1. Suffixes (A ^^ 0) = insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<0}))", "qed simp_all"], ["", "lemma Suffixes_star [simp]: \n  assumes \"A \\<noteq> {}\"\n  shows   \"Suffixes (star A) = Suffixes A @@ star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"star A = (\\<Union>n. A ^^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = \\<Union> (range ((^^) A))", "unfolding star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range ((^^) A)) = \\<Union> (range ((^^) A))", ".."], ["proof (state)\nthis:\n  star A = \\<Union> (range ((^^) A))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "also"], ["proof (state)\nthis:\n  star A = \\<Union> (range ((^^) A))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"Suffixes \\<dots> = (\\<Union>x. Suffixes (A ^^ x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (\\<Union> (range ((^^) A))) = (\\<Union>x. Suffixes (A ^^ x))", "by simp"], ["proof (state)\nthis:\n  Suffixes (\\<Union> (range ((^^) A))) = (\\<Union>x. Suffixes (A ^^ x))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "also"], ["proof (state)\nthis:\n  Suffixes (\\<Union> (range ((^^) A))) = (\\<Union>x. Suffixes (A ^^ x))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"\\<dots> = (\\<Union>n. insert [] (Suffixes A @@ (\\<Union>k<n. A ^^ k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x. Suffixes (A ^^ x)) =\n    (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n})))", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<Union>x. Suffixes (A ^^ x)) =\n    (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n})))", "by (subst Suffixes_compower) auto"], ["proof (state)\nthis:\n  (\\<Union>x. Suffixes (A ^^ x)) =\n  (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n})))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "also"], ["proof (state)\nthis:\n  (\\<Union>x. Suffixes (A ^^ x)) =\n  (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n})))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"\\<dots> = insert [] (Suffixes A @@ (\\<Union>n. (\\<Union>k<n. A ^^ k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))) =\n    insert [] (Suffixes A @@ (\\<Union>n. \\<Union> ((^^) A ` {..<n})))", "by (simp_all add: conc_UNION_distrib)"], ["proof (state)\nthis:\n  (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))) =\n  insert [] (Suffixes A @@ (\\<Union>n. \\<Union> ((^^) A ` {..<n})))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "also"], ["proof (state)\nthis:\n  (\\<Union>n. insert [] (Suffixes A @@ \\<Union> ((^^) A ` {..<n}))) =\n  insert [] (Suffixes A @@ (\\<Union>n. \\<Union> ((^^) A ` {..<n})))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"(\\<Union>n. (\\<Union>k<n. A ^^ k)) = (\\<Union>n. A ^^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n. \\<Union> ((^^) A ` {..<n})) = \\<Union> (range ((^^) A))", "by auto"], ["proof (state)\nthis:\n  (\\<Union>n. \\<Union> ((^^) A ` {..<n})) = \\<Union> (range ((^^) A))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "also"], ["proof (state)\nthis:\n  (\\<Union>n. \\<Union> ((^^) A ` {..<n})) = \\<Union> (range ((^^) A))\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"\\<dots> = star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range ((^^) A)) = star A", "unfolding star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range ((^^) A)) = \\<Union> (range ((^^) A))", ".."], ["proof (state)\nthis:\n  \\<Union> (range ((^^) A)) = star A\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "also"], ["proof (state)\nthis:\n  \\<Union> (range ((^^) A)) = star A\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "have \"insert [] (Suffixes A @@ star A) = Suffixes A @@ star A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert [] (Suffixes A @@ star A) = Suffixes A @@ star A", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. insert [] (Suffixes A @@ star A) = Suffixes A @@ star A", "by auto"], ["proof (state)\nthis:\n  insert [] (Suffixes A @@ star A) = Suffixes A @@ star A\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "finally"], ["proof (chain)\npicking this:\n  Suffixes (star A) = Suffixes A @@ star A", "show ?thesis"], ["proof (prove)\nusing this:\n  Suffixes (star A) = Suffixes A @@ star A\n\ngoal (1 subgoal):\n 1. Suffixes (star A) = Suffixes A @@ star A", "."], ["proof (state)\nthis:\n  Suffixes (star A) = Suffixes A @@ star A\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Prefix language\\<close>"], ["", "definition Prefixes :: \"'a list set \\<Rightarrow> 'a list set\" where\n  \"Prefixes A = {w. \\<exists>q. w @ q \\<in> A}\""], ["", "lemma Prefixes_altdef [code]: \"Prefixes A = (\\<Union>w\\<in>A. set (prefixes w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes A = (\\<Union>w\\<in>A. set (prefixes w))", "unfolding Prefixes_def set_prefixes_eq prefix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {w. \\<exists>q. w @ q \\<in> A} =\n    (\\<Union>w\\<in>A. {ys. \\<exists>zs. w = ys @ zs})", "by blast"], ["", "lemma Nil_in_Prefixes_iff [simp]: \"[] \\<in> Prefixes A \\<longleftrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] \\<in> Prefixes A) = (A \\<noteq> {})", "by (auto simp: Prefixes_def)"], ["", "lemma Prefixes_empty [simp]: \"Prefixes {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes {} = {}", "by (auto simp: Prefixes_def)"], ["", "lemma Prefixes_empty_iff [simp]: \"Prefixes A = {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Prefixes A = {}) = (A = {})", "by (auto simp: Prefixes_altdef)"], ["", "lemma Prefixes_singleton [simp]: \"Prefixes {xs} = set (prefixes xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes {xs} = set (prefixes xs)", "by (auto simp: Prefixes_altdef)"], ["", "lemma Prefixes_insert: \"Prefixes (insert xs A) = set (prefixes xs) \\<union> Prefixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (insert xs A) = set (prefixes xs) \\<union> Prefixes A", "by (simp add: Prefixes_altdef)"], ["", "lemma Prefixes_conc [simp]: \"B \\<noteq> {} \\<Longrightarrow> Prefixes (A @@ B) = Prefixes A \\<union> (A @@ Prefixes B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<noteq> {} \\<Longrightarrow>\n    Prefixes (A @@ B) = Prefixes A \\<union> A @@ Prefixes B", "unfolding Prefixes_altdef conc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<noteq> {} \\<Longrightarrow>\n    (\\<Union>w\\<in>{xs @ ys |xs ys. xs \\<in> A \\<and> ys \\<in> B}.\n        set (prefixes w)) =\n    (\\<Union>w\\<in>A. set (prefixes w)) \\<union>\n    {xs @ ys |xs ys.\n     xs \\<in> A \\<and> ys \\<in> (\\<Union>w\\<in>B. set (prefixes w))}", "by (force simp: prefix_append)"], ["", "lemma Prefixes_union [simp]: \"Prefixes (A \\<union> B) = Prefixes A \\<union> Prefixes B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (A \\<union> B) = Prefixes A \\<union> Prefixes B", "by (auto simp: Prefixes_def)"], ["", "lemma Prefixes_UNION [simp]: \"Prefixes (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Prefixes (f x)) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (\\<Union> (f ` A)) = (\\<Union>x\\<in>A. Prefixes (f x))", "by (auto simp: Prefixes_def)"], ["", "lemma Prefixes_rev: \"Prefixes (rev ` A) = rev ` Suffixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (rev ` A) = rev ` Suffixes A", "by (auto simp: Prefixes_altdef prefixes_rev Suffixes_altdef)"], ["", "lemma Suffixes_rev: \"Suffixes (rev ` A) = rev ` Prefixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes (rev ` A) = rev ` Prefixes A", "by (auto simp: Prefixes_altdef suffixes_rev Suffixes_altdef)"], ["", "lemma Prefixes_compower:\n  assumes \"A \\<noteq> {}\"\n  shows   \"Prefixes (A ^^ n) = insert [] ((\\<Union>k<n. A ^^ k) @@ Prefixes A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "have \"A ^^ n = rev ` ((rev ` A) ^^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^^ n = rev ` (rev ` A ^^ n)", "by (simp add: image_image)"], ["proof (state)\nthis:\n  A ^^ n = rev ` (rev ` A ^^ n)\n\ngoal (1 subgoal):\n 1. Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "also"], ["proof (state)\nthis:\n  A ^^ n = rev ` (rev ` A ^^ n)\n\ngoal (1 subgoal):\n 1. Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "have \"Prefixes \\<dots> = insert [] ((\\<Union>k<n. A ^^ k) @@ Prefixes A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (rev ` (rev ` A ^^ n)) =\n    insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "unfolding Prefixes_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` Suffixes (rev ` A ^^ n) =\n    insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "by (subst Suffixes_compower) (simp_all add: image_UN image_image Suffixes_rev assms)"], ["proof (state)\nthis:\n  Prefixes (rev ` (rev ` A ^^ n)) =\n  insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)\n\ngoal (1 subgoal):\n 1. Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "finally"], ["proof (chain)\npicking this:\n  Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "show ?thesis"], ["proof (prove)\nusing this:\n  Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)\n\ngoal (1 subgoal):\n 1. Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)", "."], ["proof (state)\nthis:\n  Prefixes (A ^^ n) = insert [] (\\<Union> ((^^) A ` {..<n}) @@ Prefixes A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Prefixes_star [simp]:\n  assumes \"A \\<noteq> {}\"\n  shows   \"Prefixes (star A) = star A @@ Prefixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (star A) = star A @@ Prefixes A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Prefixes (star A) = star A @@ Prefixes A", "have \"star A = rev ` star (rev ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A = rev ` star (rev ` A)", "by (simp add: image_image)"], ["proof (state)\nthis:\n  star A = rev ` star (rev ` A)\n\ngoal (1 subgoal):\n 1. Prefixes (star A) = star A @@ Prefixes A", "also"], ["proof (state)\nthis:\n  star A = rev ` star (rev ` A)\n\ngoal (1 subgoal):\n 1. Prefixes (star A) = star A @@ Prefixes A", "have \"Prefixes \\<dots> = star A @@ Prefixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes (rev ` star (rev ` A)) = star A @@ Prefixes A", "unfolding Prefixes_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev ` Suffixes (star (rev ` A)) = star A @@ Prefixes A", "by (subst Suffixes_star) (simp_all add: assms image_image Suffixes_rev)"], ["proof (state)\nthis:\n  Prefixes (rev ` star (rev ` A)) = star A @@ Prefixes A\n\ngoal (1 subgoal):\n 1. Prefixes (star A) = star A @@ Prefixes A", "finally"], ["proof (chain)\npicking this:\n  Prefixes (star A) = star A @@ Prefixes A", "show ?thesis"], ["proof (prove)\nusing this:\n  Prefixes (star A) = star A @@ Prefixes A\n\ngoal (1 subgoal):\n 1. Prefixes (star A) = star A @@ Prefixes A", "."], ["proof (state)\nthis:\n  Prefixes (star A) = star A @@ Prefixes A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Subword language\\<close>"], ["", "text \\<open>\n  The language of all sub-words, i.e. all words that are a contiguous sublist of a word in\n  the original language.\n\\<close>"], ["", "definition Sublists :: \"'a list set \\<Rightarrow> 'a list set\" where\n  \"Sublists A = {w. \\<exists>q\\<in>A. sublist w q}\""], ["", "lemma Sublists_altdef [code]: \"Sublists A = (\\<Union>w\\<in>A. set (sublists w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists A = (\\<Union>w\\<in>A. set (sublists w))", "by (auto simp: Sublists_def)"], ["", "lemma Sublists_empty [simp]: \"Sublists {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists {} = {}", "by (auto simp: Sublists_def)"], ["", "lemma Sublists_singleton [simp]: \"Sublists {w} = set (sublists w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists {w} = set (sublists w)", "by (auto simp: Sublists_altdef)"], ["", "lemma Sublists_insert: \"Sublists (insert w A) = set (sublists w) \\<union> Sublists A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists (insert w A) = set (sublists w) \\<union> Sublists A", "by (auto simp: Sublists_altdef)"], ["", "lemma Sublists_Un [simp]: \"Sublists (A \\<union> B) = Sublists A \\<union> Sublists B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists (A \\<union> B) = Sublists A \\<union> Sublists B", "by (auto simp: Sublists_altdef)"], ["", "lemma Sublists_UN [simp]: \"Sublists (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Sublists (f x)) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists (\\<Union> (f ` A)) = (\\<Union>x\\<in>A. Sublists (f x))", "by (auto simp: Sublists_altdef)"], ["", "lemma Sublists_conv_Prefixes: \"Sublists A = Prefixes (Suffixes A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists A = Prefixes (Suffixes A)", "by (auto simp: Sublists_def Prefixes_def Suffixes_def sublist_def)"], ["", "lemma Sublists_conv_Suffixes: \"Sublists A = Suffixes (Prefixes A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists A = Suffixes (Prefixes A)", "by (auto simp: Sublists_def Prefixes_def Suffixes_def sublist_def)"], ["", "lemma Sublists_conc [simp]: \n  assumes \"A \\<noteq> {}\" \"B \\<noteq> {}\"\n  shows   \"Sublists (A @@ B) = Sublists A \\<union> Sublists B \\<union> Suffixes A @@ Prefixes B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists (A @@ B) =\n    Sublists A \\<union> Sublists B \\<union> Suffixes A @@ Prefixes B", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Sublists (A @@ B) =\n    Sublists A \\<union> Sublists B \\<union> Suffixes A @@ Prefixes B", "unfolding Sublists_conv_Suffixes"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Suffixes (Prefixes (A @@ B)) =\n    Suffixes (Prefixes A) \\<union> Suffixes (Prefixes B) \\<union>\n    Suffixes A @@ Prefixes B", "by auto"], ["", "lemma star_not_empty [simp]: \"star A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. star A \\<noteq> {}", "by auto"], ["", "lemma Sublists_star:\n  \"A \\<noteq> {} \\<Longrightarrow> Sublists (star A) = Sublists A \\<union> Suffixes A @@ star A @@ Prefixes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    Sublists (star A) =\n    Sublists A \\<union> Suffixes A @@ star A @@ Prefixes A", "by (simp add: Sublists_conv_Prefixes)"], ["", "lemma Prefixes_subset_Sublists: \"Prefixes A \\<subseteq> Sublists A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes A \\<subseteq> Sublists A", "unfolding Prefixes_def Sublists_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {w. \\<exists>q. w @ q \\<in> A} \\<subseteq> {w. Bex A (sublist w)}", "by auto"], ["", "lemma Suffixes_subset_Sublists: \"Suffixes A \\<subseteq> Sublists A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suffixes A \\<subseteq> Sublists A", "unfolding Suffixes_def Sublists_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {w. \\<exists>q. q @ w \\<in> A} \\<subseteq> {w. Bex A (sublist w)}", "by auto"], ["", "subsection \\<open>Fragment language\\<close>"], ["", "text \\<open>\n  The following is the fragment language of a given language, i.e. the set of all words that\n  are (not necessarily contiguous) sub-sequences of a word in the original language.\n\\<close>"], ["", "definition Subseqs where \"Subseqs A = (\\<Union>w\\<in>A. set (subseqs w))\""], ["", "lemma Subseqs_empty [simp]: \"Subseqs {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs {} = {}", "by (simp add: Subseqs_def)"], ["", "lemma Subseqs_insert [simp]: \"Subseqs (insert xs A) = set (subseqs xs) \\<union> Subseqs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs (insert xs A) = set (subseqs xs) \\<union> Subseqs A", "by (simp add: Subseqs_def)"], ["", "lemma Subseqs_singleton [simp]: \"Subseqs {xs} = set (subseqs xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs {xs} = set (subseqs xs)", "by simp"], ["", "lemma Subseqs_Un [simp]: \"Subseqs (A \\<union> B) = Subseqs A \\<union> Subseqs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs (A \\<union> B) = Subseqs A \\<union> Subseqs B", "by (simp add: Subseqs_def)"], ["", "lemma Subseqs_UNION [simp]: \"Subseqs (\\<Union>(f ` A)) = \\<Union>((\\<lambda>x. Subseqs (f x)) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs (\\<Union> (f ` A)) = (\\<Union>x\\<in>A. Subseqs (f x))", "by (simp add: Subseqs_def)"], ["", "lemma Subseqs_conc [simp]: \"Subseqs (A @@ B) = Subseqs A @@ Subseqs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs (A @@ B) = Subseqs A @@ Subseqs B", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Subseqs (A @@ B) \\<Longrightarrow>\n       x \\<in> Subseqs A @@ Subseqs B\n 2. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "fix xs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Subseqs (A @@ B) \\<Longrightarrow>\n       x \\<in> Subseqs A @@ Subseqs B\n 2. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "assume \"xs \\<in> Subseqs (A @@ B)\""], ["proof (state)\nthis:\n  xs \\<in> Subseqs (A @@ B)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Subseqs (A @@ B) \\<Longrightarrow>\n       x \\<in> Subseqs A @@ Subseqs B\n 2. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "then"], ["proof (chain)\npicking this:\n  xs \\<in> Subseqs (A @@ B)", "obtain ys zs where *: \"ys \\<in> A\" \"zs \\<in> B\" \"subseq xs (ys @ zs)\""], ["proof (prove)\nusing this:\n  xs \\<in> Subseqs (A @@ B)\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        \\<lbrakk>ys \\<in> A; zs \\<in> B; subseq xs (ys @ zs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: Subseqs_def conc_def)"], ["proof (state)\nthis:\n  ys \\<in> A\n  zs \\<in> B\n  subseq xs (ys @ zs)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Subseqs (A @@ B) \\<Longrightarrow>\n       x \\<in> Subseqs A @@ Subseqs B\n 2. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "from *(3)"], ["proof (chain)\npicking this:\n  subseq xs (ys @ zs)", "obtain xs1 xs2 where \"xs = xs1 @ xs2\" \"subseq xs1 ys\" \"subseq xs2 zs\""], ["proof (prove)\nusing this:\n  subseq xs (ys @ zs)\n\ngoal (1 subgoal):\n 1. (\\<And>xs1 xs2.\n        \\<lbrakk>xs = xs1 @ xs2; subseq xs1 ys; subseq xs2 zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subseq_appendE)"], ["proof (state)\nthis:\n  xs = xs1 @ xs2\n  subseq xs1 ys\n  subseq xs2 zs\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Subseqs (A @@ B) \\<Longrightarrow>\n       x \\<in> Subseqs A @@ Subseqs B\n 2. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "with *(1,2)"], ["proof (chain)\npicking this:\n  ys \\<in> A\n  zs \\<in> B\n  xs = xs1 @ xs2\n  subseq xs1 ys\n  subseq xs2 zs", "show \"xs \\<in> Subseqs A @@ Subseqs B\""], ["proof (prove)\nusing this:\n  ys \\<in> A\n  zs \\<in> B\n  xs = xs1 @ xs2\n  subseq xs1 ys\n  subseq xs2 zs\n\ngoal (1 subgoal):\n 1. xs \\<in> Subseqs A @@ Subseqs B", "by (auto simp: Subseqs_def set_subseqs_eq)"], ["proof (state)\nthis:\n  xs \\<in> Subseqs A @@ Subseqs B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "assume \"xs \\<in> Subseqs A @@ Subseqs B\""], ["proof (state)\nthis:\n  xs \\<in> Subseqs A @@ Subseqs B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "then"], ["proof (chain)\npicking this:\n  xs \\<in> Subseqs A @@ Subseqs B", "obtain xs1 xs2 ys zs \n    where \"xs = xs1 @ xs2\" \"subseq xs1 ys\" \"subseq xs2 zs\" \"ys \\<in> A\" \"zs \\<in> B\""], ["proof (prove)\nusing this:\n  xs \\<in> Subseqs A @@ Subseqs B\n\ngoal (1 subgoal):\n 1. (\\<And>xs1 xs2 ys zs.\n        \\<lbrakk>xs = xs1 @ xs2; subseq xs1 ys; subseq xs2 zs; ys \\<in> A;\n         zs \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: conc_def Subseqs_def)"], ["proof (state)\nthis:\n  xs = xs1 @ xs2\n  subseq xs1 ys\n  subseq xs2 zs\n  ys \\<in> A\n  zs \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Subseqs A @@ Subseqs B \\<Longrightarrow>\n       x \\<in> Subseqs (A @@ B)", "thus \"xs \\<in> Subseqs (A @@ B)\""], ["proof (prove)\nusing this:\n  xs = xs1 @ xs2\n  subseq xs1 ys\n  subseq xs2 zs\n  ys \\<in> A\n  zs \\<in> B\n\ngoal (1 subgoal):\n 1. xs \\<in> Subseqs (A @@ B)", "by (force simp: Subseqs_def conc_def intro: list_emb_append_mono)"], ["proof (state)\nthis:\n  xs \\<in> Subseqs (A @@ B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subseqs_compower [simp]: \"Subseqs (A ^^ n) = Subseqs A ^^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs (A ^^ n) = Subseqs A ^^ n", "by (induction n) simp_all"], ["", "lemma Subseqs_star [simp]: \"Subseqs (star A) = star (Subseqs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subseqs (star A) = star (Subseqs A)", "by (simp add: star_def)"], ["", "lemma Sublists_subset_Subseqs: \"Sublists A \\<subseteq> Subseqs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sublists A \\<subseteq> Subseqs A", "by (auto simp: Sublists_def Subseqs_def dest!: sublist_imp_subseq)"], ["", "subsection \\<open>Various regular expression constructions\\<close>"], ["", "text \\<open>A construction for language reversal of a regular expression:\\<close>"], ["", "primrec rexp_rev where\n  \"rexp_rev Zero = Zero\"\n| \"rexp_rev One = One\"\n| \"rexp_rev (Atom x) = Atom x\"\n| \"rexp_rev (Plus r s) = Plus (rexp_rev r) (rexp_rev s)\"\n| \"rexp_rev (Times r s) = Times (rexp_rev s) (rexp_rev r)\"\n| \"rexp_rev (Star r) = Star (rexp_rev r)\""], ["", "lemma lang_rexp_rev [simp]: \"lang (rexp_rev r) = rev ` lang r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (rexp_rev r) = rev ` lang r", "by (induction r) (simp_all add: image_Un)"], ["", "text \\<open>The obvious construction for a singleton-language regular expression:\\<close>"], ["", "fun rexp_of_word where\n  \"rexp_of_word [] = One\"\n| \"rexp_of_word [x] = Atom x\"\n| \"rexp_of_word (x#xs) = Times (Atom x) (rexp_of_word xs)\""], ["", "lemma lang_rexp_of_word [simp]: \"lang (rexp_of_word xs) = {xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (rexp_of_word xs) = {xs}", "by (induction xs rule: rexp_of_word.induct) (simp_all add: conc_def)"], ["", "lemma size_rexp_of_word [simp]: \"size (rexp_of_word xs) = Suc (2 * (length xs - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (rexp_of_word xs) = Suc (2 * (length xs - 1))", "by (induction xs rule: rexp_of_word.induct) auto"], ["", "text \\<open>Character substitution in a regular expression:\\<close>"], ["", "primrec rexp_subst where\n  \"rexp_subst f Zero = Zero\"\n| \"rexp_subst f One = One\"\n| \"rexp_subst f (Atom x) = rexp_of_word (f x)\"\n| \"rexp_subst f (Plus r s) = Plus (rexp_subst f r) (rexp_subst f s)\"\n| \"rexp_subst f (Times r s) = Times (rexp_subst f r) (rexp_subst f s)\"\n| \"rexp_subst f (Star r) = Star (rexp_subst f r)\""], ["", "lemma lang_rexp_subst: \"lang (rexp_subst f r) = subst_word f ` lang r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (rexp_subst f r) = subst_word f ` lang r", "by (induction r) (simp_all add: image_Un)"], ["", "text \\<open>Suffix language of a regular expression:\\<close>"], ["", "primrec suffix_rexp :: \"'a rexp \\<Rightarrow> 'a rexp\" where\n  \"suffix_rexp Zero = Zero\"\n| \"suffix_rexp One = One\"\n| \"suffix_rexp (Atom a) = Plus (Atom a) One\"\n| \"suffix_rexp (Plus r s) = Plus (suffix_rexp r) (suffix_rexp s)\"\n| \"suffix_rexp (Times r s) =\n    (if rexp_empty r then Zero else Plus (Times (suffix_rexp r) s) (suffix_rexp s))\"\n| \"suffix_rexp (Star r) =\n    (if rexp_empty r then One else Times (suffix_rexp r) (Star r))\""], ["", "theorem lang_suffix_rexp [simp]:\n  \"lang (suffix_rexp r) = Suffixes (lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (suffix_rexp r) = Suffixes (lang r)", "by (induction r) (auto simp: rexp_empty_iff)"], ["", "text \\<open>Prefix language of a regular expression:\\<close>"], ["", "primrec prefix_rexp :: \"'a rexp \\<Rightarrow> 'a rexp\" where\n  \"prefix_rexp Zero = Zero\"\n| \"prefix_rexp One = One\"\n| \"prefix_rexp (Atom a) = Plus (Atom a) One\"\n| \"prefix_rexp (Plus r s) = Plus (prefix_rexp r) (prefix_rexp s)\"\n| \"prefix_rexp (Times r s) =\n    (if rexp_empty s then Zero else Plus (Times r (prefix_rexp s)) (prefix_rexp r))\"\n| \"prefix_rexp (Star r) =\n    (if rexp_empty r then One else Times (Star r) (prefix_rexp r))\""], ["", "theorem lang_prefix_rexp [simp]:\n  \"lang (prefix_rexp r) = Prefixes (lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (prefix_rexp r) = Prefixes (lang r)", "by (induction r) (auto simp: rexp_empty_iff)"], ["", "text \\<open>Sub-word language of a regular expression\\<close>"], ["", "primrec sublist_rexp :: \"'a rexp \\<Rightarrow> 'a rexp\" where\n  \"sublist_rexp Zero = Zero\"\n| \"sublist_rexp One = One\"\n| \"sublist_rexp (Atom a) = Plus (Atom a) One\"\n| \"sublist_rexp (Plus r s) = Plus (sublist_rexp r) (sublist_rexp s)\"\n| \"sublist_rexp (Times r s) =\n    (if rexp_empty r \\<or> rexp_empty s then Zero else \n       Plus (sublist_rexp r) (Plus (sublist_rexp s) (Times (suffix_rexp r) (prefix_rexp s))))\"\n| \"sublist_rexp (Star r) =\n    (if rexp_empty r then One else \n       Plus (sublist_rexp r) (Times (suffix_rexp r) (Times (Star r) (prefix_rexp r))))\""], ["", "theorem lang_sublist_rexp [simp]:\n  \"lang (sublist_rexp r) = Sublists (lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (sublist_rexp r) = Sublists (lang r)", "by (induction r) (auto simp: rexp_empty_iff Sublists_star)"], ["", "text \\<open>Fragment language of a regular expression:\\<close>"], ["", "primrec subseqs_rexp :: \"'a rexp \\<Rightarrow> 'a rexp\" where\n  \"subseqs_rexp Zero = Zero\"\n| \"subseqs_rexp One = One\"\n| \"subseqs_rexp (Atom x) = Plus (Atom x) One\"\n| \"subseqs_rexp (Plus r s) = Plus (subseqs_rexp r) (subseqs_rexp s)\"\n| \"subseqs_rexp (Times r s) = Times (subseqs_rexp r) (subseqs_rexp s)\"\n| \"subseqs_rexp (Star r) = Star (subseqs_rexp r)\""], ["", "lemma lang_subseqs_rexp [simp]: \"lang (subseqs_rexp r) = Subseqs (lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang (subseqs_rexp r) = Subseqs (lang r)", "by (induction r) auto"], ["", "text \\<open>Subword language of a regular expression\\<close>"], ["", "end"]]}