{"file_name": "/home/qj213/afp-2021-10-22/thys/Regular-Sets/Relation_Interpretation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Regular-Sets", "problem_names": ["lemma word_rel_append: \n  \"word_rel v w O word_rel v w' = word_rel v (w @ w')\"", "lemma rel_word_rel: \"rel v r = (\\<Union>w\\<in>lang r. word_rel v w)\"", "lemma soundness:\n \"lang r = lang s \\<Longrightarrow> rel v r = rel v s\""], "translations": [["", "lemma word_rel_append: \n  \"word_rel v w O word_rel v w' = word_rel v (w @ w')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_rel v w O word_rel v w' = word_rel v (w @ w')", "by (rule sym) (induct w, auto)"], ["", "lemma rel_word_rel: \"rel v r = (\\<Union>w\\<in>lang r. word_rel v w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel v r = \\<Union> (word_rel v ` lang r)", "proof (induct r)"], ["proof (state)\ngoal (6 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Times r1 r2) =\n                         \\<Union> (word_rel v ` lang (Times r1 r2))\n 6. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "case Times"], ["proof (state)\nthis:\n  rel v r1_ = \\<Union> (word_rel v ` lang r1_)\n  rel v r2_ = \\<Union> (word_rel v ` lang r2_)\n\ngoal (6 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Times r1 r2) =\n                         \\<Union> (word_rel v ` lang (Times r1 r2))\n 6. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "thus ?case"], ["proof (prove)\nusing this:\n  rel v r1_ = \\<Union> (word_rel v ` lang r1_)\n  rel v r2_ = \\<Union> (word_rel v ` lang r2_)\n\ngoal (1 subgoal):\n 1. rel v (Times r1_ r2_) = \\<Union> (word_rel v ` lang (Times r1_ r2_))", "by (auto simp: rel_def word_rel_append conc_def relcomp_UNION_distrib relcomp_UNION_distrib2)"], ["proof (state)\nthis:\n  rel v (Times r1_ r2_) = \\<Union> (word_rel v ` lang (Times r1_ r2_))\n\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "case (Star r)"], ["proof (state)\nthis:\n  rel v r = \\<Union> (word_rel v ` lang r)\n\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "{"], ["proof (state)\nthis:\n  rel v r = \\<Union> (word_rel v ` lang r)\n\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "fix n"], ["proof (state)\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "have \"(rel v r) ^^ n = (\\<Union>w \\<in> lang r ^^ n. word_rel v w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel v r ^^ n = \\<Union> (word_rel v ` (lang r ^^ n))", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. rel v r ^^ 0 = \\<Union> (word_rel v ` (lang r ^^ 0))\n 2. \\<And>n.\n       rel v r ^^ n =\n       \\<Union> (word_rel v ` (lang r ^^ n)) \\<Longrightarrow>\n       rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. rel v r ^^ 0 = \\<Union> (word_rel v ` (lang r ^^ 0))\n 2. \\<And>n.\n       rel v r ^^ n =\n       \\<Union> (word_rel v ` (lang r ^^ n)) \\<Longrightarrow>\n       rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel v r ^^ 0 = \\<Union> (word_rel v ` (lang r ^^ 0))", "by simp"], ["proof (state)\nthis:\n  rel v r ^^ 0 = \\<Union> (word_rel v ` (lang r ^^ 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       rel v r ^^ n =\n       \\<Union> (word_rel v ` (lang r ^^ n)) \\<Longrightarrow>\n       rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       rel v r ^^ n =\n       \\<Union> (word_rel v ` (lang r ^^ n)) \\<Longrightarrow>\n       rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  rel v r ^^ n = \\<Union> (word_rel v ` (lang r ^^ n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       rel v r ^^ n =\n       \\<Union> (word_rel v ` (lang r ^^ n)) \\<Longrightarrow>\n       rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "thus ?case"], ["proof (prove)\nusing this:\n  rel v r ^^ n = \\<Union> (word_rel v ` (lang r ^^ n))\n\ngoal (1 subgoal):\n 1. rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "unfolding relpow.simps relpow_commute[symmetric]"], ["proof (prove)\nusing this:\n  rel v r ^^ n = \\<Union> (word_rel v ` (lang r ^^ n))\n\ngoal (1 subgoal):\n 1. rel v r O rel v r ^^ n = \\<Union> (word_rel v ` (lang r ^^ Suc n))", "by (auto simp add: Star conc_def word_rel_append\n          relcomp_UNION_distrib relcomp_UNION_distrib2)"], ["proof (state)\nthis:\n  rel v r ^^ Suc n = \\<Union> (word_rel v ` (lang r ^^ Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel v r ^^ n = \\<Union> (word_rel v ` (lang r ^^ n))\n\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "}"], ["proof (state)\nthis:\n  rel v r ^^ ?n2 = \\<Union> (word_rel v ` (lang r ^^ ?n2))\n\ngoal (5 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))\n 5. \\<And>r.\n       rel v r = \\<Union> (word_rel v ` lang r) \\<Longrightarrow>\n       rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "thus ?case"], ["proof (prove)\nusing this:\n  rel v r ^^ ?n2 = \\<Union> (word_rel v ` (lang r ^^ ?n2))\n\ngoal (1 subgoal):\n 1. rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))", "unfolding rel.simps"], ["proof (prove)\nusing this:\n  rel v r ^^ ?n2 = \\<Union> (word_rel v ` (lang r ^^ ?n2))\n\ngoal (1 subgoal):\n 1. (rel v r)\\<^sup>* = \\<Union> (word_rel v ` lang (Star r))", "by (force simp: rtrancl_power star_def)"], ["proof (state)\nthis:\n  rel v (Star r) = \\<Union> (word_rel v ` lang (Star r))\n\ngoal (4 subgoals):\n 1. rel v Zero = \\<Union> (word_rel v ` lang Zero)\n 2. rel v One = \\<Union> (word_rel v ` lang One)\n 3. \\<And>x. rel v (Atom x) = \\<Union> (word_rel v ` lang (Atom x))\n 4. \\<And>r1 r2.\n       \\<lbrakk>rel v r1 = \\<Union> (word_rel v ` lang r1);\n        rel v r2 = \\<Union> (word_rel v ` lang r2)\\<rbrakk>\n       \\<Longrightarrow> rel v (Plus r1 r2) =\n                         \\<Union> (word_rel v ` lang (Plus r1 r2))", "qed auto"], ["", "text \\<open>Soundness:\\<close>"], ["", "lemma soundness:\n \"lang r = lang s \\<Longrightarrow> rel v r = rel v s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang r = lang s \\<Longrightarrow> rel v r = rel v s", "unfolding rel_word_rel"], ["proof (prove)\ngoal (1 subgoal):\n 1. lang r = lang s \\<Longrightarrow>\n    \\<Union> (word_rel v ` lang r) = \\<Union> (word_rel v ` lang s)", "by auto"], ["", "end"]]}