{"file_name": "/home/qj213/afp-2021-10-22/thys/Differential_Game_Logic/Syntax.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Differential_Game_Logic", "problem_names": ["lemma game_induct [case_names Game Assign ODE Test Choice Compose Loop Dual]:\n   \"(\\<And>a. P (Game a)) \n    \\<Longrightarrow> (\\<And>x \\<theta>. P (Assign x \\<theta>))\n    \\<Longrightarrow> (\\<And>x \\<theta>. P (ODE x \\<theta>))\n    \\<Longrightarrow> (\\<And>\\<phi>. P (? \\<phi>))\n    \\<Longrightarrow> (\\<And>\\<alpha> \\<beta>. P \\<alpha> \\<Longrightarrow> P \\<beta> \\<Longrightarrow> P (\\<alpha> \\<union>\\<union> \\<beta>))\n    \\<Longrightarrow> (\\<And>\\<alpha> \\<beta>. P \\<alpha> \\<Longrightarrow> P \\<beta> \\<Longrightarrow> P (\\<alpha> ;; \\<beta>))\n    \\<Longrightarrow> (\\<And>\\<alpha>. P \\<alpha> \\<Longrightarrow> P (\\<alpha>**))\n    \\<Longrightarrow> (\\<And>\\<alpha>. P \\<alpha> \\<Longrightarrow> P (\\<alpha>^d))\n    \\<Longrightarrow> P \\<alpha>\"", "lemma fml_induct [case_names Pred Geq Not And Exists Diamond]:\n  \"(\\<And>x \\<theta>. P (Pred x \\<theta>))\n  \\<Longrightarrow> (\\<And>\\<theta> \\<eta>. P (Geq \\<theta> \\<eta>))\n  \\<Longrightarrow> (\\<And>\\<phi>. P \\<phi> \\<Longrightarrow> P (Not \\<phi>))\n  \\<Longrightarrow> (\\<And>\\<phi> \\<psi>. P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (And \\<phi> \\<psi>))\n  \\<Longrightarrow> (\\<And>x \\<phi>. P \\<phi> \\<Longrightarrow> P (Exists x \\<phi>))\n  \\<Longrightarrow> (\\<And>\\<alpha> \\<phi>. P \\<phi> \\<Longrightarrow> P (Diamond \\<alpha> \\<phi>))\n  \\<Longrightarrow> P \\<phi>\""], "translations": [["", "lemma game_induct [case_names Game Assign ODE Test Choice Compose Loop Dual]:\n   \"(\\<And>a. P (Game a)) \n    \\<Longrightarrow> (\\<And>x \\<theta>. P (Assign x \\<theta>))\n    \\<Longrightarrow> (\\<And>x \\<theta>. P (ODE x \\<theta>))\n    \\<Longrightarrow> (\\<And>\\<phi>. P (? \\<phi>))\n    \\<Longrightarrow> (\\<And>\\<alpha> \\<beta>. P \\<alpha> \\<Longrightarrow> P \\<beta> \\<Longrightarrow> P (\\<alpha> \\<union>\\<union> \\<beta>))\n    \\<Longrightarrow> (\\<And>\\<alpha> \\<beta>. P \\<alpha> \\<Longrightarrow> P \\<beta> \\<Longrightarrow> P (\\<alpha> ;; \\<beta>))\n    \\<Longrightarrow> (\\<And>\\<alpha>. P \\<alpha> \\<Longrightarrow> P (\\<alpha>**))\n    \\<Longrightarrow> (\\<And>\\<alpha>. P \\<alpha> \\<Longrightarrow> P (\\<alpha>^d))\n    \\<Longrightarrow> P \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a. P (Game a); \\<And>x \\<theta>. P (x := \\<theta>);\n     \\<And>x \\<theta>. P (ODE x \\<theta>); \\<And>\\<phi>. P (? \\<phi>);\n     \\<And>\\<alpha> \\<beta>.\n        \\<lbrakk>P \\<alpha>; P \\<beta>\\<rbrakk>\n        \\<Longrightarrow> P (\\<alpha> \\<union>\\<union> \\<beta>);\n     \\<And>\\<alpha> \\<beta>.\n        \\<lbrakk>P \\<alpha>; P \\<beta>\\<rbrakk>\n        \\<Longrightarrow> P (\\<alpha> ;; \\<beta>);\n     \\<And>\\<alpha>. P \\<alpha> \\<Longrightarrow> P \\<alpha>**;\n     \\<And>\\<alpha>. P \\<alpha> \\<Longrightarrow> P \\<alpha>^d\\<rbrakk>\n    \\<Longrightarrow> P \\<alpha>", "by(induction rule: game.induct) (auto)"], ["", "lemma fml_induct [case_names Pred Geq Not And Exists Diamond]:\n  \"(\\<And>x \\<theta>. P (Pred x \\<theta>))\n  \\<Longrightarrow> (\\<And>\\<theta> \\<eta>. P (Geq \\<theta> \\<eta>))\n  \\<Longrightarrow> (\\<And>\\<phi>. P \\<phi> \\<Longrightarrow> P (Not \\<phi>))\n  \\<Longrightarrow> (\\<And>\\<phi> \\<psi>. P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (And \\<phi> \\<psi>))\n  \\<Longrightarrow> (\\<And>x \\<phi>. P \\<phi> \\<Longrightarrow> P (Exists x \\<phi>))\n  \\<Longrightarrow> (\\<And>\\<alpha> \\<phi>. P \\<phi> \\<Longrightarrow> P (Diamond \\<alpha> \\<phi>))\n  \\<Longrightarrow> P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x \\<theta>. P (Pred x \\<theta>);\n     \\<And>\\<theta> \\<eta>. P (Geq \\<theta> \\<eta>);\n     \\<And>\\<phi>. P \\<phi> \\<Longrightarrow> P (! \\<phi>);\n     \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>P \\<phi>; P \\<psi>\\<rbrakk>\n        \\<Longrightarrow> P (\\<phi> && \\<psi>);\n     \\<And>x \\<phi>. P \\<phi> \\<Longrightarrow> P (Exists x \\<phi>);\n     \\<And>\\<alpha> \\<phi>.\n        P \\<phi> \\<Longrightarrow>\n        P (\\<langle> \\<alpha> \\<rangle> \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> P \\<phi>", "by (induction rule: fml.induct) (auto)"], ["", "text \\<open>the set of all variables\\<close>"], ["", "abbreviation allvars:: \"variable set\"\n  where \"allvars \\<equiv> {x::variable. True}\""], ["", "end"]]}