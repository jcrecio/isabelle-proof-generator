{"file_name": "/home/qj213/afp-2021-10-22/thys/Differential_Game_Logic/Axioms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Differential_Game_Logic", "problem_names": ["lemma box_valid: \"valid box_axiom\"", "lemma assigneq_valid: \"valid assigneq_axiom\"", "lemma stutterd_valid: \"valid stutterd_axiom\"", "lemma test_valid: \"valid test_axiom\"", "lemma choice_valid: \"valid choice_axiom\"", "lemma compose_valid: \"valid compose_axiom\"", "lemma dual_valid: \"valid dual_axiom\"", "lemma iterate_valid: \"valid iterate_axiom\"", "lemma mon_locsound: \"locally_sound mon_rule\"", "lemma FP_locsound: \"locally_sound FP_rule\"", "lemma MP_locsound: \"locally_sound MP_rule\"", "lemma gena_locsound: \"locally_sound gena_rule\""], "translations": [["", "lemma box_valid: \"valid box_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid box_axiom", "unfolding box_axiom_def Box_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (! (\\<langle> Game hgid1 \\<rangle> ! pusall) \\<leftrightarrow>\n      ! (\\<langle> Game hgid1 \\<rangle> ! pusall))", "by simp"], ["", "(*lemma assign_equal: \"game_sem I (Assign x (Const f)) (fml_sem I \\<phi>) = fml_sem I (Exists x (Equals (Var x) (Const f) && \\<phi>))\"\n  by simp*)"], ["", "lemma assigneq_valid: \"valid assigneq_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid assigneq_axiom", "unfolding assigneq_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> xid1 := Const fid1 \\<rangle> pusall \\<leftrightarrow>\n      Exists xid1 (Equals (Var xid1) (Const fid1) && pusall))", "by (auto simp add: valid_equiv)"], ["", "(*lemma game_sem_stutter: \"game_sem I (Assign x (Var x)) X = X\"\n  by (auto simp add: repv_self)*)"], ["", "lemma stutterd_valid: \"valid stutterd_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid stutterd_axiom", "unfolding stutterd_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> xid1 := Var xid1 \\<rangle> pusall \\<leftrightarrow> pusall)", "by (auto simp add: valid_equiv)"], ["", "lemma test_valid: \"valid test_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid test_axiom", "unfolding test_axiom_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> ? (Pred pid2\n                    nothing) \\<rangle> Pred pid1 nothing \\<leftrightarrow>\n      (Pred pid2 nothing && Pred pid1 nothing))", "using valid_equiv"], ["proof (prove)\nusing this:\n  valid (?\\<phi> \\<leftrightarrow> ?\\<psi>) =\n  (\\<forall>I. fml_sem I ?\\<phi> = fml_sem I ?\\<psi>)\n\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> ? (Pred pid2\n                    nothing) \\<rangle> Pred pid1 nothing \\<leftrightarrow>\n      (Pred pid2 nothing && Pred pid1 nothing))", "by fastforce"], ["", "lemma choice_valid: \"valid choice_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid choice_axiom", "unfolding choice_axiom_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1 \\<union>\\<union>\n                Game hgid2 \\<rangle> pusall \\<leftrightarrow>\n      ! (! (\\<langle> Game hgid1 \\<rangle> pusall) &&\n         ! (\\<langle> Game hgid2 \\<rangle> pusall)))", "by (auto simp add: valid_equiv)"], ["", "lemma compose_valid: \"valid compose_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid compose_axiom", "unfolding compose_axiom_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1 ;; Game hgid2 \\<rangle> pusall \\<leftrightarrow>\n      \\<langle> Game hgid1 \\<rangle> \\<langle> Game hgid2 \\<rangle> pusall)", "by (simp add: valid_equiv)"], ["", "lemma dual_valid: \"valid dual_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid dual_axiom", "unfolding dual_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1^d \\<rangle> pusall \\<leftrightarrow>\n      ! (\\<langle> Game hgid1 \\<rangle> ! pusall))", "using valid_equiv fml_sem_not"], ["proof (prove)\nusing this:\n  valid (?\\<phi> \\<leftrightarrow> ?\\<psi>) =\n  (\\<forall>I. fml_sem I ?\\<phi> = fml_sem I ?\\<psi>)\n  fml_sem ?I (! ?\\<phi>) = - fml_sem ?I ?\\<phi>\n\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1^d \\<rangle> pusall \\<leftrightarrow>\n      ! (\\<langle> Game hgid1 \\<rangle> ! pusall))", "using fml_sem.simps(6) game_sem.simps(7)"], ["proof (prove)\nusing this:\n  valid (?\\<phi> \\<leftrightarrow> ?\\<psi>) =\n  (\\<forall>I. fml_sem I ?\\<phi> = fml_sem I ?\\<psi>)\n  fml_sem ?I (! ?\\<phi>) = - fml_sem ?I ?\\<phi>\n  fml_sem ?I (\\<langle> ?\\<alpha> \\<rangle> ?\\<phi>) =\n  game_sem ?I ?\\<alpha> (fml_sem ?I ?\\<phi>)\n  game_sem ?I ?\\<alpha>^d = (\\<lambda>X. - game_sem ?I ?\\<alpha> (- X))\n\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1^d \\<rangle> pusall \\<leftrightarrow>\n      ! (\\<langle> Game hgid1 \\<rangle> ! pusall))", "by presburger"], ["", "lemma iterate_valid: \"valid iterate_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid iterate_axiom", "(*unfolding iterate_axiom_def using valid_equiv fml_sem.simps(6) game_equiv_subst[OF loop_iterate_equiv]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid iterate_axiom", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. valid iterate_axiom", "have \"\\<forall>I. fml_sem I (Diamond (Loop (Game hgid1)) pusall) = fml_sem I (pusall || Diamond (Game hgid1) (Diamond (Loop (Game hgid1)) pusall))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "fix I"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"fml_sem I (Diamond (Loop (Game hgid1)) pusall) = game_sem I (Loop (Game hgid1)) (fml_sem I pusall)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n    game_sem I Game hgid1** (fml_sem I pusall)", "by (rule fml_sem.simps(6))"], ["proof (state)\nthis:\n  fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n  game_sem I Game hgid1** (fml_sem I pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "also"], ["proof (state)\nthis:\n  fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n  game_sem I Game hgid1** (fml_sem I pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"... = game_sem I (Choice Skip (Compose (Game hgid1) (Loop (Game hgid1)))) (fml_sem I pusall)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I Game hgid1** (fml_sem I pusall) =\n    game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n     (fml_sem I pusall)", "using game_equiv_subst[where I=I and X=\\<open>fml_sem I pusall\\<close>, OF loop_iterate_equiv[where \\<alpha>=\\<open>Game hgid1\\<close>]]"], ["proof (prove)\nusing this:\n  ?P (game_sem I Game hgid1** (fml_sem I pusall)) \\<Longrightarrow>\n  ?P (game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n       (fml_sem I pusall))\n\ngoal (1 subgoal):\n 1. game_sem I Game hgid1** (fml_sem I pusall) =\n    game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n     (fml_sem I pusall)", "by blast"], ["proof (state)\nthis:\n  game_sem I Game hgid1** (fml_sem I pusall) =\n  game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n   (fml_sem I pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "also"], ["proof (state)\nthis:\n  game_sem I Game hgid1** (fml_sem I pusall) =\n  game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n   (fml_sem I pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"... = fml_sem I (Diamond (Choice Skip (Compose (Game hgid1) (Loop (Game hgid1)))) pusall)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n     (fml_sem I pusall) =\n    fml_sem I\n     (\\<langle> Skip \\<union>\\<union>\n                (Game hgid1 ;; Game hgid1**) \\<rangle> pusall)", "by simp"], ["proof (state)\nthis:\n  game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n   (fml_sem I pusall) =\n  fml_sem I\n   (\\<langle> Skip \\<union>\\<union>\n              (Game hgid1 ;; Game hgid1**) \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "also"], ["proof (state)\nthis:\n  game_sem I (Skip \\<union>\\<union> (Game hgid1 ;; Game hgid1**))\n   (fml_sem I pusall) =\n  fml_sem I\n   (\\<langle> Skip \\<union>\\<union>\n              (Game hgid1 ;; Game hgid1**) \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"... = fml_sem I (Diamond Skip pusall || Diamond (Compose (Game hgid1) (Loop (Game hgid1))) pusall)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I\n     (\\<langle> Skip \\<union>\\<union>\n                (Game hgid1 ;; Game hgid1**) \\<rangle> pusall) =\n    fml_sem I\n     (\\<langle> Skip \\<rangle> pusall ||\n      \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall)", "by simp"], ["proof (state)\nthis:\n  fml_sem I\n   (\\<langle> Skip \\<union>\\<union>\n              (Game hgid1 ;; Game hgid1**) \\<rangle> pusall) =\n  fml_sem I\n   (\\<langle> Skip \\<rangle> pusall ||\n    \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "also"], ["proof (state)\nthis:\n  fml_sem I\n   (\\<langle> Skip \\<union>\\<union>\n              (Game hgid1 ;; Game hgid1**) \\<rangle> pusall) =\n  fml_sem I\n   (\\<langle> Skip \\<rangle> pusall ||\n    \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"... = fml_sem I (pusall || Diamond (Compose (Game hgid1) (Loop (Game hgid1))) pusall)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I\n     (\\<langle> Skip \\<rangle> pusall ||\n      \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall) =\n    fml_sem I\n     (pusall || \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall)", "by simp"], ["proof (state)\nthis:\n  fml_sem I\n   (\\<langle> Skip \\<rangle> pusall ||\n    \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall) =\n  fml_sem I\n   (pusall || \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "also"], ["proof (state)\nthis:\n  fml_sem I\n   (\\<langle> Skip \\<rangle> pusall ||\n    \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall) =\n  fml_sem I\n   (pusall || \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"... = fml_sem I (pusall || Diamond (Game hgid1) (Diamond (Loop (Game hgid1)) pusall))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I\n     (pusall || \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall) =\n    fml_sem I\n     (pusall ||\n      \\<langle> Game\n                 hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "by simp"], ["proof (state)\nthis:\n  fml_sem I\n   (pusall || \\<langle> Game hgid1 ;; Game hgid1** \\<rangle> pusall) =\n  fml_sem I\n   (pusall ||\n    \\<langle> Game hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n       fml_sem I\n        (pusall ||\n         \\<langle> Game\n                    hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "finally"], ["proof (chain)\npicking this:\n  fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n  fml_sem I\n   (pusall ||\n    \\<langle> Game hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "show \"fml_sem I (Diamond (Loop (Game hgid1)) pusall) = fml_sem I (pusall || Diamond (Game hgid1) (Diamond (Loop (Game hgid1)) pusall))\""], ["proof (prove)\nusing this:\n  fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n  fml_sem I\n   (pusall ||\n    \\<langle> Game hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n    fml_sem I\n     (pusall ||\n      \\<langle> Game\n                 hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "."], ["proof (state)\nthis:\n  fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n  fml_sem I\n   (pusall ||\n    \\<langle> Game hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>I.\n     fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n     fml_sem I\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. valid iterate_axiom", "then"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n     fml_sem I\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)", "have \"valid ((Diamond (Loop (Game hgid1)) pusall) \\<leftrightarrow> (pusall || Diamond (Game hgid1) (Diamond (Loop (Game hgid1)) pusall)))\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n     fml_sem I\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)\n\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))", "using valid_equiv"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     fml_sem I (\\<langle> Game hgid1** \\<rangle> pusall) =\n     fml_sem I\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall)\n  valid (?\\<phi> \\<leftrightarrow> ?\\<psi>) =\n  (\\<forall>I. fml_sem I ?\\<phi> = fml_sem I ?\\<psi>)\n\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))", "by (rule rev_iffD2)"], ["proof (state)\nthis:\n  valid\n   (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n    (pusall ||\n     \\<langle> Game\n                hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))\n\ngoal (1 subgoal):\n 1. valid iterate_axiom", "then"], ["proof (chain)\npicking this:\n  valid\n   (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n    (pusall ||\n     \\<langle> Game\n                hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))", "show \"valid iterate_axiom\""], ["proof (prove)\nusing this:\n  valid\n   (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n    (pusall ||\n     \\<langle> Game\n                hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))\n\ngoal (1 subgoal):\n 1. valid iterate_axiom", "unfolding iterate_axiom_def"], ["proof (prove)\nusing this:\n  valid\n   (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n    (pusall ||\n     \\<langle> Game\n                hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))\n\ngoal (1 subgoal):\n 1. valid\n     (\\<langle> Game hgid1** \\<rangle> pusall \\<leftrightarrow>\n      (pusall ||\n       \\<langle> Game\n                  hgid1 \\<rangle> \\<langle> Game hgid1** \\<rangle> pusall))", "by auto"], ["proof (state)\nthis:\n  valid iterate_axiom\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Local Soundness Proofs for Axiomatic Rules\\<close>"], ["", "lemma mon_locsound: \"locally_sound mon_rule\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_sound mon_rule", "unfolding mon_rule_def locally_sound_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length\n                (fst ([pusall \\<rightarrow>\n                       \\<langle> Game hgidd \\<rangle> TT],\n                      \\<langle> Game hgid1 \\<rangle> pusall \\<rightarrow>\n                      \\<langle> Game\n                                 hgid1 \\<rangle> \\<langle> Game\n                      hgidd \\<rangle> TT)) \\<longrightarrow>\n           valid_in I\n            (fst ([pusall \\<rightarrow> \\<langle> Game hgidd \\<rangle> TT],\n                  \\<langle> Game hgid1 \\<rangle> pusall \\<rightarrow>\n                  \\<langle> Game\n                             hgid1 \\<rangle> \\<langle> Game\n                  hgidd \\<rangle> TT) !\n             k)) \\<longrightarrow>\n       valid_in I\n        (snd ([pusall \\<rightarrow> \\<langle> Game hgidd \\<rangle> TT],\n              \\<langle> Game hgid1 \\<rangle> pusall \\<rightarrow>\n              \\<langle> Game\n                         hgid1 \\<rangle> \\<langle> Game hgidd \\<rangle> TT))", "using valid_in_impl monotone"], ["proof (prove)\nusing this:\n  valid_in ?I (?\\<phi> \\<rightarrow> ?\\<psi>) =\n  (fml_sem ?I ?\\<phi> \\<subseteq> fml_sem ?I ?\\<psi>)\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem ?I ?\\<alpha> ?X \\<subseteq> game_sem ?I ?\\<alpha> ?Y\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length\n                (fst ([pusall \\<rightarrow>\n                       \\<langle> Game hgidd \\<rangle> TT],\n                      \\<langle> Game hgid1 \\<rangle> pusall \\<rightarrow>\n                      \\<langle> Game\n                                 hgid1 \\<rangle> \\<langle> Game\n                      hgidd \\<rangle> TT)) \\<longrightarrow>\n           valid_in I\n            (fst ([pusall \\<rightarrow> \\<langle> Game hgidd \\<rangle> TT],\n                  \\<langle> Game hgid1 \\<rangle> pusall \\<rightarrow>\n                  \\<langle> Game\n                             hgid1 \\<rangle> \\<langle> Game\n                  hgidd \\<rangle> TT) !\n             k)) \\<longrightarrow>\n       valid_in I\n        (snd ([pusall \\<rightarrow> \\<langle> Game hgidd \\<rangle> TT],\n              \\<langle> Game hgid1 \\<rangle> pusall \\<rightarrow>\n              \\<langle> Game\n                         hgid1 \\<rangle> \\<langle> Game hgidd \\<rangle> TT))", "by simp"], ["", "lemma FP_locsound: \"locally_sound FP_rule\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_sound FP_rule", "unfolding FP_rule_def locally_sound_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length\n                (fst ([(pusall ||\n                        \\<langle> Game\n                                   hgid1 \\<rangle> \\<langle> Game\n                        hgidd \\<rangle> TT) \\<rightarrow>\n                       \\<langle> Game hgidd \\<rangle> TT],\n                      \\<langle> Game hgid1** \\<rangle> pusall \\<rightarrow>\n                      \\<langle> Game hgidd \\<rangle> TT)) \\<longrightarrow>\n           valid_in I\n            (fst ([(pusall ||\n                    \\<langle> Game\n                               hgid1 \\<rangle> \\<langle> Game\n                    hgidd \\<rangle> TT) \\<rightarrow>\n                   \\<langle> Game hgidd \\<rangle> TT],\n                  \\<langle> Game hgid1** \\<rangle> pusall \\<rightarrow>\n                  \\<langle> Game hgidd \\<rangle> TT) !\n             k)) \\<longrightarrow>\n       valid_in I\n        (snd ([(pusall ||\n                \\<langle> Game\n                           hgid1 \\<rangle> \\<langle> Game\n                hgidd \\<rangle> TT) \\<rightarrow>\n               \\<langle> Game hgidd \\<rangle> TT],\n              \\<langle> Game hgid1** \\<rangle> pusall \\<rightarrow>\n              \\<langle> Game hgidd \\<rangle> TT))", "using valid_in_impl game_sem_loop"], ["proof (prove)\nusing this:\n  valid_in ?I (?\\<phi> \\<rightarrow> ?\\<psi>) =\n  (fml_sem ?I ?\\<phi> \\<subseteq> fml_sem ?I ?\\<psi>)\n  game_sem ?I ?\\<alpha>** =\n  (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem ?I ?\\<alpha> Z))\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length\n                (fst ([(pusall ||\n                        \\<langle> Game\n                                   hgid1 \\<rangle> \\<langle> Game\n                        hgidd \\<rangle> TT) \\<rightarrow>\n                       \\<langle> Game hgidd \\<rangle> TT],\n                      \\<langle> Game hgid1** \\<rangle> pusall \\<rightarrow>\n                      \\<langle> Game hgidd \\<rangle> TT)) \\<longrightarrow>\n           valid_in I\n            (fst ([(pusall ||\n                    \\<langle> Game\n                               hgid1 \\<rangle> \\<langle> Game\n                    hgidd \\<rangle> TT) \\<rightarrow>\n                   \\<langle> Game hgidd \\<rangle> TT],\n                  \\<langle> Game hgid1** \\<rangle> pusall \\<rightarrow>\n                  \\<langle> Game hgidd \\<rangle> TT) !\n             k)) \\<longrightarrow>\n       valid_in I\n        (snd ([(pusall ||\n                \\<langle> Game\n                           hgid1 \\<rangle> \\<langle> Game\n                hgidd \\<rangle> TT) \\<rightarrow>\n               \\<langle> Game hgidd \\<rangle> TT],\n              \\<langle> Game hgid1** \\<rangle> pusall \\<rightarrow>\n              \\<langle> Game hgidd \\<rangle> TT))", "by auto"], ["", "lemma MP_locsound: \"locally_sound MP_rule\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_sound MP_rule", "unfolding MP_rule_def locally_sound_def valid_in_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length\n                (fst ([Pred pid1 nothing,\n                       Pred pid1 nothing \\<rightarrow> Pred pid2 nothing],\n                      Pred pid2 nothing)) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega>\n               \\<in> fml_sem I\n                      (fst ([Pred pid1 nothing,\n                             Pred pid1 nothing \\<rightarrow>\n                             Pred pid2 nothing],\n                            Pred pid2 nothing) !\n                       k))) \\<longrightarrow>\n       (\\<forall>\\<omega>.\n           \\<omega>\n           \\<in> fml_sem I\n                  (snd ([Pred pid1 nothing,\n                         Pred pid1 nothing \\<rightarrow> Pred pid2 nothing],\n                        Pred pid2 nothing)))", "using fml_sem_implies less_Suc_eq"], ["proof (prove)\nusing this:\n  fml_sem ?I (?\\<phi> \\<rightarrow> ?\\<psi>) =\n  - fml_sem ?I ?\\<phi> \\<union> fml_sem ?I ?\\<psi>\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length\n                (fst ([Pred pid1 nothing,\n                       Pred pid1 nothing \\<rightarrow> Pred pid2 nothing],\n                      Pred pid2 nothing)) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega>\n               \\<in> fml_sem I\n                      (fst ([Pred pid1 nothing,\n                             Pred pid1 nothing \\<rightarrow>\n                             Pred pid2 nothing],\n                            Pred pid2 nothing) !\n                       k))) \\<longrightarrow>\n       (\\<forall>\\<omega>.\n           \\<omega>\n           \\<in> fml_sem I\n                  (snd ([Pred pid1 nothing,\n                         Pred pid1 nothing \\<rightarrow> Pred pid2 nothing],\n                        Pred pid2 nothing)))", "by auto"], ["", "lemma gena_locsound: \"locally_sound gena_rule\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_sound gena_rule", "unfolding gena_rule_def locally_sound_def valid_in_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length (fst ([pusall], Exists xid1 pusall)) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega>\n               \\<in> fml_sem I\n                      (fst ([pusall], Exists xid1 pusall) !\n                       k))) \\<longrightarrow>\n       (\\<forall>\\<omega>.\n           \\<omega> \\<in> fml_sem I (snd ([pusall], Exists xid1 pusall)))", "using fml_sem_implies less_Suc_eq"], ["proof (prove)\nusing this:\n  fml_sem ?I (?\\<phi> \\<rightarrow> ?\\<psi>) =\n  - fml_sem ?I ?\\<phi> \\<union> fml_sem ?I ?\\<psi>\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length (fst ([pusall], Exists xid1 pusall)) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega>\n               \\<in> fml_sem I\n                      (fst ([pusall], Exists xid1 pusall) !\n                       k))) \\<longrightarrow>\n       (\\<forall>\\<omega>.\n           \\<omega> \\<in> fml_sem I (snd ([pusall], Exists xid1 pusall)))", "by auto"], ["", "end"]]}