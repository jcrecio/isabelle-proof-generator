{"file_name": "/home/qj213/afp-2021-10-22/thys/Differential_Game_Logic/Denotational_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Differential_Game_Logic", "problem_names": ["lemma ident_finite: \"finite({x::ident. True})\"", "lemma allvar_cases: \"allvars = allrvars \\<union> alldvars\"", "lemma rvar_finite: \"finite allrvars\"", "lemma dvar_finite: \"finite alldvars\"", "lemma allvars_finite [simp]: \"finite(allvars)\"", "lemma Uvariation_Vagree [simp]: \"Uvariation \\<nu> \\<nu>' (-V) = Vagree \\<nu> \\<nu>' V\"", "lemma Vagree_refl [simp]: \"Vagree \\<nu> \\<nu> V\"", "lemma Vagree_sym: \"Vagree \\<nu> \\<nu>' V = Vagree \\<nu>' \\<nu> V\"", "lemma Vagree_sym_rel [sym]: \"Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree \\<nu>' \\<nu> V\"", "lemma Vagree_union [trans]: \"Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree \\<nu> \\<nu>' W \\<Longrightarrow> Vagree \\<nu> \\<nu>' (V\\<union>W)\"", "lemma Vagree_trans [trans]: \"Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree  \\<nu>' \\<nu>'' W \\<Longrightarrow> Vagree \\<nu> \\<nu>'' (V\\<inter>W)\"", "lemma Vagree_antimon [simp]: \"Vagree \\<nu> \\<nu>' V \\<and> W\\<subseteq>V \\<longrightarrow> Vagree \\<nu> \\<nu>' W\"", "lemma Vagree_empty [simp]: \"Vagree \\<nu> \\<nu>' {}\"", "lemma Uvariation_empty [simp]: \"Uvariation \\<nu> \\<nu>' {} = (\\<nu>=\\<nu>')\"", "lemma Vagree_univ [simp]: \"Vagree \\<nu> \\<nu>' allvars = (\\<nu>=\\<nu>')\"", "lemma Uvariation_univ [simp]: \"Uvariation \\<nu> \\<nu>' allvars\"", "lemma Vagree_and [simp]: \"Vagree \\<nu> \\<nu>' V \\<and> Vagree \\<nu> \\<nu>' W \\<longleftrightarrow> Vagree \\<nu> \\<nu>' (V\\<union>W)\"", "lemma Vagree_or: \"Vagree \\<nu> \\<nu>' V \\<or> Vagree \\<nu> \\<nu>' W \\<longrightarrow> Vagree \\<nu> \\<nu>' (V\\<inter>W)\"", "lemma Uvariation_refl [simp]: \"Uvariation \\<nu> \\<nu> V\"", "lemma Uvariation_sym: \"Uvariation \\<omega> \\<nu> U = Uvariation \\<nu> \\<omega> U\"", "lemma Uvariation_sym_rel [sym]: \"Uvariation \\<omega> \\<nu> U \\<Longrightarrow> Uvariation \\<nu> \\<omega> U\"", "lemma Uvariation_trans [trans]: \"Uvariation \\<omega> \\<nu> U \\<Longrightarrow> Uvariation \\<nu> \\<mu> V \\<Longrightarrow> Uvariation \\<omega> \\<mu> (U\\<union>V)\"", "lemma Uvariation_mon [simp]: \"V \\<supseteq> U \\<Longrightarrow> Uvariation \\<omega> \\<nu> U \\<Longrightarrow> Uvariation \\<omega> \\<nu> V\"", "lemma mon_mono: \"mono r = ((\\<forall>X Y. (X\\<subseteq>Y \\<longrightarrow> r(X)\\<subseteq>r(Y))))\"", "lemma Consts_mkinterp [simp]: \"Consts (mkinterp(C,F,P,G)) = C\"", "lemma Funcs_mkinterp [simp]: \"Funcs (mkinterp(C,F,P,G)) = F\"", "lemma Preds_mkinterp [simp]: \"Preds (mkinterp(C,F,P,G)) = P\"", "lemma Games_mkinterp [simp]: \"(\\<And>a. mono (G a) ) \\<Longrightarrow> Games (mkinterp(C,F,P,G)) = G\"", "lemma mkinterp_eq [iff]: \"(Consts I = Consts J \\<and> Funcs I = Funcs J \\<and> Preds I = Preds J \\<and> Games I = Games J) = (I=J)\"", "lemma [simp]: \"X\\<subseteq>Y \\<Longrightarrow> (Games I a)(X)\\<subseteq>(Games I a)(Y)\"", "lemma repv_def_correct: \"repv \\<omega> x r = (\\<lambda>y. if x = y then r else \\<omega>(y))\"", "lemma repv_access [simp]: \"(repv \\<omega> x r)(y) = (if (x=y) then r else \\<omega>(y))\"", "lemma repv_self [simp]: \"repv \\<omega> x (\\<omega>(x)) = \\<omega>\"", "lemma Vagree_repv: \"Vagree \\<omega> (repv \\<omega> x d) (-{x})\"", "lemma Vagree_repv_self: \"Vagree \\<omega> (repv \\<omega> x d) {x} = (d=\\<omega>(x))\"", "lemma Uvariation_repv: \"Uvariation \\<omega> (repv \\<omega> x d) {x}\"", "lemma valid_is_valid_in_all: \"valid \\<phi> = (\\<forall>I. valid_in I \\<phi>)\"", "lemma locally_sound_is_sound: \"locally_sound R \\<Longrightarrow> sound R\"", "lemma monotone_Test [simp]: \"X\\<subseteq>Y \\<Longrightarrow> game_sem I (Test \\<phi>) X \\<subseteq> game_sem I (Test \\<phi>) Y\"", "lemma monotone [simp]: \"X\\<subseteq>Y \\<Longrightarrow> game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y\"", "lemmas game_sem_union = game_union", "lemma game_sem_loop_fixpoint_mono: \"mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\"", "lemma game_sem_loop: \"game_sem I (Loop \\<alpha>) = (\\<lambda>X. lfp(\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\"", "lemmas lfp_ordinal_induct_set_cases = lfp_ordinal_induct_set [case_names mono step union]", "lemma game_loop_induct [case_names step union]: \n  \"(\\<And>Z. Z \\<subseteq> game_sem I (Loop \\<alpha>) X \\<Longrightarrow> P(Z) \\<Longrightarrow> P(X \\<union> game_sem I \\<alpha> Z))\n  \\<Longrightarrow> (\\<And>M. (\\<forall>Z\\<in>M. P(Z)) \\<Longrightarrow> P(Sup M))\n  \\<Longrightarrow> P(game_sem I (Loop \\<alpha>) X)\"", "lemma fml_sem_not [simp]: \"fml_sem I (Not \\<phi>) = -fml_sem I \\<phi>\"", "lemma fml_sem_not_not [simp]: \"fml_sem I (Not (Not \\<phi>)) = fml_sem I \\<phi>\"", "lemma fml_sem_or [simp]: \"fml_sem I (Or \\<phi> \\<psi>) = fml_sem I \\<phi> \\<union> fml_sem I \\<psi>\"", "lemma fml_sem_implies [simp]: \"fml_sem I (Implies \\<phi> \\<psi>) = (-fml_sem I \\<phi>) \\<union> fml_sem I \\<psi>\"", "lemma TT_valid [simp]: \"valid TT\"", "lemma fml_equiv_subst: \"fml_equiv \\<phi> \\<psi> \\<Longrightarrow> P (fml_sem I \\<phi>) \\<Longrightarrow> P (fml_sem I \\<psi>)\"", "lemma valid_fml_equiv: \"valid (\\<phi> \\<leftrightarrow> \\<psi>) = fml_equiv \\<phi> \\<psi>\"", "lemma valid_in_equiv: \"valid_in I (\\<phi> \\<leftrightarrow> \\<psi>) = ((fml_sem I \\<phi>) = (fml_sem I \\<psi>))\"", "lemma valid_in_impl: \"valid_in I (\\<phi> \\<rightarrow> \\<psi>) = ((fml_sem I \\<phi>) \\<subseteq> (fml_sem I \\<psi>))\"", "lemma valid_equiv: \"valid (\\<phi> \\<leftrightarrow> \\<psi>) = (\\<forall>I. fml_sem I \\<phi> = fml_sem I \\<psi>)\"", "lemma valid_impl: \"valid (\\<phi> \\<rightarrow> \\<psi>) = (\\<forall>I. (fml_sem I \\<phi>) \\<subseteq> (fml_sem I \\<psi>))\"", "lemma fml_sem_equals [simp]: \"(\\<omega> \\<in> fml_sem I (Equals \\<theta> \\<eta>)) = (term_sem I \\<theta> \\<omega> = term_sem I \\<eta> \\<omega>)\"", "lemma equiv_refl_valid [simp]: \"valid (\\<phi> \\<leftrightarrow> \\<phi>)\"", "lemma equal_refl_valid [simp]: \"valid (Equals \\<theta> \\<theta>)\"", "lemma solves_ODE_alt : \"solves_ODE I F x \\<theta> \\<equiv> (\\<forall>\\<zeta>::real.\n     Vagree (F(0)) (F(\\<zeta>)) (-{RVar x, DVar x})\n   \\<and> F(\\<zeta>)(DVar x) = deriv(\\<lambda>t. F(t)(RVar x))(\\<zeta>)\n   \\<and> F(\\<zeta>) \\<in> fml_sem I (Equals (Var (DVar x)) \\<theta>))\"", "lemma game_equiv_subst: \"game_equiv \\<alpha> \\<beta> \\<Longrightarrow> P (game_sem I \\<alpha> X) \\<Longrightarrow> P (game_sem I \\<beta> X)\"", "lemma game_equiv_subst_eq: \"game_equiv \\<alpha> \\<beta> \\<Longrightarrow> P (game_sem I \\<alpha> X) == P (game_sem I \\<beta> X)\"", "lemma skip_id [simp]: \"game_sem I Skip X = X\"", "lemma loop_iterate_equiv: \"game_equiv (Loop \\<alpha>) (Choice Skip (Compose \\<alpha> (Loop \\<alpha>)))\"", "lemma fml_equiv_valid: \"fml_equiv \\<phi> \\<psi> \\<Longrightarrow> valid \\<phi> = valid \\<psi>\"", "lemma solves_Vagree: \"solves_ODE I F x \\<theta> \\<Longrightarrow> (\\<And>\\<zeta>. Vagree (F(\\<zeta>)) (F(0)) (-{RVar x,DVar x}))\"", "lemma solves_Vagree_trans: \"Uvariation (F(0)) \\<omega> U \\<Longrightarrow> solves_ODE I F x \\<theta> \\<Longrightarrow> Uvariation (F(\\<zeta>)) \\<omega> (U\\<union>{RVar x,DVar x})\""], "translations": [["", "lemma ident_finite: \"finite({x::ident. True})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {x. True}", "by auto"], ["", "lemma allvar_cases: \"allvars = allrvars \\<union> alldvars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Denotational_Semantics.allvars = allrvars \\<union> alldvars", "using variable.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x1. ?y = RVar x1 \\<Longrightarrow> ?P;\n   \\<And>x2. ?y = DVar x2 \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. Denotational_Semantics.allvars = allrvars \\<union> alldvars", "by blast"], ["", "lemma rvar_finite: \"finite allrvars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite allrvars", "using finite_imageI[OF ident_finite, where h=\\<open>\\<lambda>x. RVar x\\<close>]"], ["proof (prove)\nusing this:\n  finite (RVar ` {x. True})\n\ngoal (1 subgoal):\n 1. finite allrvars", "by (simp add: full_SetCompr_eq)"], ["", "lemma dvar_finite: \"finite alldvars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite alldvars", "using finite_imageI[OF ident_finite, where h=\\<open>\\<lambda>x. DVar x\\<close>]"], ["proof (prove)\nusing this:\n  finite (DVar ` {x. True})\n\ngoal (1 subgoal):\n 1. finite alldvars", "by (simp add: full_SetCompr_eq)"], ["", "lemma allvars_finite [simp]: \"finite(allvars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite Denotational_Semantics.allvars", "using allvar_cases dvar_finite rvar_finite"], ["proof (prove)\nusing this:\n  Denotational_Semantics.allvars = allrvars \\<union> alldvars\n  finite alldvars\n  finite allrvars\n\ngoal (1 subgoal):\n 1. finite Denotational_Semantics.allvars", "by (metis finite_Un)"], ["", "definition Vagree :: \"state \\<Rightarrow> state \\<Rightarrow> variable set \\<Rightarrow> bool\"\n  where \"Vagree \\<nu> \\<nu>' V \\<equiv> (\\<forall>i. i\\<in>V \\<longrightarrow> \\<nu>(i) = \\<nu>'(i))\""], ["", "definition Uvariation :: \"state \\<Rightarrow> state \\<Rightarrow> variable set \\<Rightarrow> bool\"\n  where \"Uvariation \\<nu> \\<nu>' U \\<equiv> (\\<forall>i. ~(i\\<in>U) \\<longrightarrow> \\<nu>(i) = \\<nu>'(i))\""], ["", "lemma Uvariation_Vagree [simp]: \"Uvariation \\<nu> \\<nu>' (-V) = Vagree \\<nu> \\<nu>' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<nu> \\<nu>' (- V) = Vagree \\<nu> \\<nu>' V", "unfolding Vagree_def Uvariation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i. i \\<notin> - V \\<longrightarrow> \\<nu> i = \\<nu>' i) =\n    (\\<forall>i. i \\<in> V \\<longrightarrow> \\<nu> i = \\<nu>' i)", "by simp"], ["", "lemma Vagree_refl [simp]: \"Vagree \\<nu> \\<nu> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu> V", "by (auto simp add: Vagree_def)"], ["", "lemma Vagree_sym: \"Vagree \\<nu> \\<nu>' V = Vagree \\<nu>' \\<nu> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' V = Vagree \\<nu>' \\<nu> V", "by (auto simp add: Vagree_def)"], ["", "lemma Vagree_sym_rel [sym]: \"Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree \\<nu>' \\<nu> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree \\<nu>' \\<nu> V", "using Vagree_sym"], ["proof (prove)\nusing this:\n  Vagree ?\\<nu> ?\\<nu>' ?V = Vagree ?\\<nu>' ?\\<nu> ?V\n\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree \\<nu>' \\<nu> V", "by auto"], ["", "lemma Vagree_union [trans]: \"Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree \\<nu> \\<nu>' W \\<Longrightarrow> Vagree \\<nu> \\<nu>' (V\\<union>W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Vagree \\<nu> \\<nu>' V; Vagree \\<nu> \\<nu>' W\\<rbrakk>\n    \\<Longrightarrow> Vagree \\<nu> \\<nu>' (V \\<union> W)", "by (auto simp add: Vagree_def)"], ["", "lemma Vagree_trans [trans]: \"Vagree \\<nu> \\<nu>' V \\<Longrightarrow> Vagree  \\<nu>' \\<nu>'' W \\<Longrightarrow> Vagree \\<nu> \\<nu>'' (V\\<inter>W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Vagree \\<nu> \\<nu>' V; Vagree \\<nu>' \\<nu>'' W\\<rbrakk>\n    \\<Longrightarrow> Vagree \\<nu> \\<nu>'' (V \\<inter> W)", "by (auto simp add: Vagree_def)"], ["", "lemma Vagree_antimon [simp]: \"Vagree \\<nu> \\<nu>' V \\<and> W\\<subseteq>V \\<longrightarrow> Vagree \\<nu> \\<nu>' W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' V \\<and> W \\<subseteq> V \\<longrightarrow>\n    Vagree \\<nu> \\<nu>' W", "by (auto simp add: Vagree_def)"], ["", "lemma Vagree_empty [simp]: \"Vagree \\<nu> \\<nu>' {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' {}", "by (auto simp add: Vagree_def)"], ["", "lemma Uvariation_empty [simp]: \"Uvariation \\<nu> \\<nu>' {} = (\\<nu>=\\<nu>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<nu> \\<nu>' {} = (\\<nu> = \\<nu>')", "by (auto simp add: Uvariation_def)"], ["", "lemma Vagree_univ [simp]: \"Vagree \\<nu> \\<nu>' allvars = (\\<nu>=\\<nu>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' Denotational_Semantics.allvars = (\\<nu> = \\<nu>')", "by (auto simp add: Vagree_def)"], ["", "lemma Uvariation_univ [simp]: \"Uvariation \\<nu> \\<nu>' allvars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<nu> \\<nu>' Denotational_Semantics.allvars", "by (auto simp add: Uvariation_def)"], ["", "lemma Vagree_and [simp]: \"Vagree \\<nu> \\<nu>' V \\<and> Vagree \\<nu> \\<nu>' W \\<longleftrightarrow> Vagree \\<nu> \\<nu>' (V\\<union>W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Vagree \\<nu> \\<nu>' V \\<and> Vagree \\<nu> \\<nu>' W) =\n    Vagree \\<nu> \\<nu>' (V \\<union> W)", "by (auto simp add: Vagree_def)"], ["", "lemma Vagree_or: \"Vagree \\<nu> \\<nu>' V \\<or> Vagree \\<nu> \\<nu>' W \\<longrightarrow> Vagree \\<nu> \\<nu>' (V\\<inter>W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<nu> \\<nu>' V \\<or> Vagree \\<nu> \\<nu>' W \\<longrightarrow>\n    Vagree \\<nu> \\<nu>' (V \\<inter> W)", "by (auto simp add: Vagree_def)"], ["", "lemma Uvariation_refl [simp]: \"Uvariation \\<nu> \\<nu> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<nu> \\<nu> V", "by (auto simp add: Uvariation_def)"], ["", "lemma Uvariation_sym: \"Uvariation \\<omega> \\<nu> U = Uvariation \\<nu> \\<omega> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<omega> \\<nu> U = Uvariation \\<nu> \\<omega> U", "unfolding Uvariation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i. i \\<notin> U \\<longrightarrow> \\<omega> i = \\<nu> i) =\n    (\\<forall>i. i \\<notin> U \\<longrightarrow> \\<nu> i = \\<omega> i)", "by auto"], ["", "lemma Uvariation_sym_rel [sym]: \"Uvariation \\<omega> \\<nu> U \\<Longrightarrow> Uvariation \\<nu> \\<omega> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<omega> \\<nu> U \\<Longrightarrow>\n    Uvariation \\<nu> \\<omega> U", "using Uvariation_sym"], ["proof (prove)\nusing this:\n  Uvariation ?\\<omega> ?\\<nu> ?U = Uvariation ?\\<nu> ?\\<omega> ?U\n\ngoal (1 subgoal):\n 1. Uvariation \\<omega> \\<nu> U \\<Longrightarrow>\n    Uvariation \\<nu> \\<omega> U", "by auto"], ["", "lemma Uvariation_trans [trans]: \"Uvariation \\<omega> \\<nu> U \\<Longrightarrow> Uvariation \\<nu> \\<mu> V \\<Longrightarrow> Uvariation \\<omega> \\<mu> (U\\<union>V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Uvariation \\<omega> \\<nu> U; Uvariation \\<nu> \\<mu> V\\<rbrakk>\n    \\<Longrightarrow> Uvariation \\<omega> \\<mu> (U \\<union> V)", "unfolding Uvariation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<notin> U \\<longrightarrow> \\<omega> i = \\<nu> i;\n     \\<forall>i. i \\<notin> V \\<longrightarrow> \\<nu> i = \\<mu> i\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         i \\<notin> U \\<union> V \\<longrightarrow>\n                         \\<omega> i = \\<mu> i", "by simp"], ["", "lemma Uvariation_mon [simp]: \"V \\<supseteq> U \\<Longrightarrow> Uvariation \\<omega> \\<nu> U \\<Longrightarrow> Uvariation \\<omega> \\<nu> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>U \\<subseteq> V; Uvariation \\<omega> \\<nu> U\\<rbrakk>\n    \\<Longrightarrow> Uvariation \\<omega> \\<nu> V", "unfolding Uvariation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>U \\<subseteq> V;\n     \\<forall>i.\n        i \\<notin> U \\<longrightarrow> \\<omega> i = \\<nu> i\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         i \\<notin> V \\<longrightarrow> \\<omega> i = \\<nu> i", "by auto"], ["", "subsection Interpretations"], ["", "lemma mon_mono: \"mono r = ((\\<forall>X Y. (X\\<subseteq>Y \\<longrightarrow> r(X)\\<subseteq>r(Y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono r =\n    (\\<forall>X Y. X \\<subseteq> Y \\<longrightarrow> r X \\<subseteq> r Y)", "unfolding mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y. x \\<subseteq> y \\<longrightarrow> r x \\<subseteq> r y) =\n    (\\<forall>X Y. X \\<subseteq> Y \\<longrightarrow> r X \\<subseteq> r Y)", "by simp"], ["", "text \\<open>interpretations of symbols in ident\\<close>"], ["", "type_synonym interp_rep =\n \"(ident \\<Rightarrow> real) \\<times> (ident \\<Rightarrow> (real \\<Rightarrow> real)) \\<times> (ident \\<Rightarrow> (real \\<Rightarrow> bool)) \\<times> (ident \\<Rightarrow> (state set \\<Rightarrow> state set))\""], ["", "definition is_interp :: \"interp_rep \\<Rightarrow> bool\"\n where \"is_interp I \\<equiv> case I of (_, _, _, G) \\<Rightarrow> (\\<forall>a. mono (G a))\""], ["", "typedef interp = \"{I:: interp_rep. is_interp I}\"\n  morphisms raw_interp well_interp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {I. is_interp I}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?x \\<in> {I. is_interp I}", "show \"(\\<lambda>f. 0, \\<lambda>f x. 0, \\<lambda>p x. True, \\<lambda>a. \\<lambda>X. X) \\<in> {I. is_interp I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. 0, \\<lambda>f x. 0, \\<lambda>p x. True, \\<lambda>a X. X)\n    \\<in> {I. is_interp I}", "unfolding is_interp_def mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. 0, \\<lambda>f x. 0, \\<lambda>p x. True, \\<lambda>a X. X)\n    \\<in> {I. case I of\n              (x, xa, xb, G) \\<Rightarrow>\n                \\<forall>a x y.\n                   x \\<subseteq> y \\<longrightarrow>\n                   G a x \\<subseteq> G a y}", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>f. 0, \\<lambda>f x. 0, \\<lambda>p x. True, \\<lambda>a X. X)\n  \\<in> {I. is_interp I}\n\ngoal:\nNo subgoals!", "qed"], ["", "setup_lifting type_definition_interp"], ["", "lift_definition Consts::\"interp \\<Rightarrow> ident \\<Rightarrow> (real)\" is \"\\<lambda>(F0, _, _, _). F0\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition Funcs:: \"interp \\<Rightarrow> ident \\<Rightarrow> (real \\<Rightarrow> real)\" is \"\\<lambda>(_, F, _, _). F\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition Preds:: \"interp \\<Rightarrow> ident \\<Rightarrow> (real \\<Rightarrow> bool)\" is \"\\<lambda>(_, _, P, _). P\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition Games:: \"interp \\<Rightarrow> ident \\<Rightarrow> (state set \\<Rightarrow> state set)\" is \"\\<lambda>(_, _, _, G). G\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "text \\<open>make interpretations\\<close>"], ["", "lift_definition mkinterp:: \"(ident \\<Rightarrow> real) \\<times> (ident \\<Rightarrow> (real \\<Rightarrow> real)) \\<times> (ident \\<Rightarrow> (real \\<Rightarrow> bool)) \\<times> (ident \\<Rightarrow> (state set \\<Rightarrow> state set))\n\\<Rightarrow> interp\" \n  is \"\\<lambda>(C, F, P, G). if \\<forall>a. mono (G a) then (C, F, P, G) else (C, F, P, \\<lambda>_ _. {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>prod.\n       is_interp\n        (case prod of\n         (C, F, P, G) \\<Rightarrow>\n           if \\<forall>a. mono (G a) then (C, F, P, G)\n           else (C, F, P, \\<lambda>_ _. {}))", "by (auto split: prod.splits simp: mono_def is_interp_def)"], ["", "lemma Consts_mkinterp [simp]: \"Consts (mkinterp(C,F,P,G)) = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Consts (mkinterp (C, F, P, G)) = C", "apply (transfer fixing: C F P G)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case (C, F, P, G) of\n          (C, F, P, G) \\<Rightarrow>\n            if \\<forall>a. mono (G a) then (C, F, P, G)\n            else (C, F, P, \\<lambda>_ _. {}) of\n     (F0, uu_, uua_, uub_) \\<Rightarrow> F0) =\n    C", "apply (auto simp add: is_interp_def mono_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Funcs_mkinterp [simp]: \"Funcs (mkinterp(C,F,P,G)) = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Funcs (mkinterp (C, F, P, G)) = F", "apply (transfer fixing: C F P G)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case (C, F, P, G) of\n          (C, F, P, G) \\<Rightarrow>\n            if \\<forall>a. mono (G a) then (C, F, P, G)\n            else (C, F, P, \\<lambda>_ _. {}) of\n     (uu_, F, uua_, uub_) \\<Rightarrow> F) =\n    F", "apply (auto simp add: is_interp_def mono_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Preds_mkinterp [simp]: \"Preds (mkinterp(C,F,P,G)) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Preds (mkinterp (C, F, P, G)) = P", "apply (transfer fixing: C F P G)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case (C, F, P, G) of\n          (C, F, P, G) \\<Rightarrow>\n            if \\<forall>a. mono (G a) then (C, F, P, G)\n            else (C, F, P, \\<lambda>_ _. {}) of\n     (uu_, uua_, P, uub_) \\<Rightarrow> P) =\n    P", "apply (auto simp add: is_interp_def mono_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Games_mkinterp [simp]: \"(\\<And>a. mono (G a) ) \\<Longrightarrow> Games (mkinterp(C,F,P,G)) = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a. mono (G a)) \\<Longrightarrow>\n    Games (mkinterp (C, F, P, G)) = G", "apply (transfer fixing: C F P G)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a. mono (G a)) \\<Longrightarrow>\n    (case case (C, F, P, G) of\n          (C, F, P, G) \\<Rightarrow>\n            if \\<forall>a. mono (G a) then (C, F, P, G)\n            else (C, F, P, \\<lambda>_ _. {}) of\n     (uu_, uua_, uub_, G) \\<Rightarrow> G) =\n    G", "apply (auto simp add: is_interp_def mono_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mkinterp_eq [iff]: \"(Consts I = Consts J \\<and> Funcs I = Funcs J \\<and> Preds I = Preds J \\<and> Games I = Games J) = (I=J)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Consts I = Consts J \\<and>\n     Funcs I = Funcs J \\<and> Preds I = Preds J \\<and> Games I = Games J) =\n    (I = J)", "apply (transfer fixing: C F P G)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I J.\n       \\<lbrakk>is_interp I; is_interp J\\<rbrakk>\n       \\<Longrightarrow> ((case I of\n                           (F0, uu_, uua_, uub_) \\<Rightarrow> F0) =\n                          (case J of\n                           (F0, uu_, uua_, uub_) \\<Rightarrow> F0) \\<and>\n                          (case I of (uu_, F, uua_, uub_) \\<Rightarrow> F) =\n                          (case J of\n                           (uu_, F, uua_, uub_) \\<Rightarrow> F) \\<and>\n                          (case I of (uu_, uua_, P, uub_) \\<Rightarrow> P) =\n                          (case J of\n                           (uu_, uua_, P, uub_) \\<Rightarrow> P) \\<and>\n                          (case I of (uu_, uua_, uub_, G) \\<Rightarrow> G) =\n                          (case J of\n                           (uu_, uua_, uub_, G) \\<Rightarrow> G)) =\n                         (I = J)", "apply (auto simp add: is_interp_def mono_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]: \"X\\<subseteq>Y \\<Longrightarrow> (Games I a)(X)\\<subseteq>(Games I a)(Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> Y \\<Longrightarrow> Games I a X \\<subseteq> Games I a Y", "apply (transfer fixing: a X Y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       \\<lbrakk>X \\<subseteq> Y; is_interp I\\<rbrakk>\n       \\<Longrightarrow> (case I of (uu_, uua_, uub_, G) \\<Rightarrow> G) a\n                          X\n                         \\<subseteq> (case I of\n(uu_, uua_, uub_, G) \\<Rightarrow> G)\na Y", "apply (auto simp add: is_interp_def mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x.\n       \\<lbrakk>X \\<subseteq> Y;\n        \\<forall>a x y.\n           x \\<subseteq> y \\<longrightarrow> b a x \\<subseteq> b a y;\n        x \\<in> b a X\\<rbrakk>\n       \\<Longrightarrow> x \\<in> b a Y", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lifting_update interp.lifting"], ["", "lifting_forget interp.lifting"], ["", "subsection Semantics"], ["", "text \\<open>Semantic modification \\<open>repv \\<omega> x r\\<close> replaces the value of variable \\<open>x\\<close> in the state \\<open>\\<omega>\\<close> with r\\<close>"], ["", "definition repv :: \"state \\<Rightarrow> variable \\<Rightarrow> real \\<Rightarrow> state\"\n  where \"repv \\<omega> x r = fun_upd \\<omega> x r\""], ["", "lemma repv_def_correct: \"repv \\<omega> x r = (\\<lambda>y. if x = y then r else \\<omega>(y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repv \\<omega> x r = (\\<lambda>y. if x = y then r else \\<omega> y)", "unfolding repv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>(x := r) = (\\<lambda>y. if x = y then r else \\<omega> y)", "by auto"], ["", "lemma repv_access [simp]: \"(repv \\<omega> x r)(y) = (if (x=y) then r else \\<omega>(y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repv \\<omega> x r y = (if x = y then r else \\<omega> y)", "unfolding repv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<omega>(x := r)) y = (if x = y then r else \\<omega> y)", "by simp"], ["", "lemma repv_self [simp]: \"repv \\<omega> x (\\<omega>(x)) = \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repv \\<omega> x (\\<omega> x) = \\<omega>", "unfolding repv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>(x := \\<omega> x) = \\<omega>", "by auto"], ["", "lemma Vagree_repv: \"Vagree \\<omega> (repv \\<omega> x d) (-{x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<omega> (repv \\<omega> x d) (- {x})", "unfolding repv_def Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<in> - {x} \\<longrightarrow> \\<omega> i = (\\<omega>(x := d)) i", "by simp"], ["", "lemma Vagree_repv_self: \"Vagree \\<omega> (repv \\<omega> x d) {x} = (d=\\<omega>(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree \\<omega> (repv \\<omega> x d) {x} = (d = \\<omega> x)", "unfolding repv_def Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        i \\<in> {x} \\<longrightarrow> \\<omega> i = (\\<omega>(x := d)) i) =\n    (d = \\<omega> x)", "by auto"], ["", "lemma Uvariation_repv: \"Uvariation \\<omega> (repv \\<omega> x d) {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Uvariation \\<omega> (repv \\<omega> x d) {x}", "unfolding repv_def Uvariation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<notin> {x} \\<longrightarrow> \\<omega> i = (\\<omega>(x := d)) i", "by simp"], ["", "paragraph \\<open>Semantics of Terms\\<close>"], ["", "fun term_sem :: \"interp \\<Rightarrow> trm \\<Rightarrow> (state \\<Rightarrow> real)\"\nwhere\n  \"term_sem I (Var x) = (\\<lambda>\\<omega>. \\<omega>(x))\"\n| \"term_sem I (Number r) = (\\<lambda>\\<omega>. r)\"\n| \"term_sem I (Const f) = (\\<lambda>\\<omega>. (Consts I f))\"\n| \"term_sem I (Func f \\<theta>) = (\\<lambda>\\<omega>. (Funcs I f)(term_sem I \\<theta> \\<omega>))\"\n| \"term_sem I (Plus \\<theta> \\<eta>) = (\\<lambda>\\<omega>. term_sem I \\<theta> \\<omega> + term_sem I \\<eta> \\<omega>)\"\n| \"term_sem I (Times \\<theta> \\<eta>) = (\\<lambda>\\<omega>. term_sem I \\<theta> \\<omega> * term_sem I \\<eta> \\<omega>)\"\n| \"term_sem I (Differential \\<theta>) = (\\<lambda>\\<omega>. sum(\\<lambda>x. \\<omega>(DVar x)*deriv(\\<lambda>X. term_sem I \\<theta> (repv \\<omega> (RVar x) X))(\\<omega>(RVar x)))(allidents))\""], ["", "paragraph \\<open>Solutions of Differential Equations\\<close>"], ["", "(*@note For simplicity, solutions are not limited to a smaller interval of existence*)"], ["", "type_synonym solution = \"real \\<Rightarrow> state\""], ["", "definition solves_ODE :: \"interp \\<Rightarrow> solution \\<Rightarrow> ident \\<Rightarrow> trm \\<Rightarrow> bool\"\nwhere \"solves_ODE I F x \\<theta> \\<equiv> (\\<forall>\\<zeta>::real.\n     Vagree (F(0)) (F(\\<zeta>)) (-{RVar x, DVar x})\n   \\<and> F(\\<zeta>)(DVar x) = deriv(\\<lambda>t. F(t)(RVar x))(\\<zeta>)\n   \\<and> F(\\<zeta>)(DVar x) = term_sem I \\<theta> (F(\\<zeta>)))\""], ["", "paragraph \\<open>Semantics of Formulas and Games\\<close>"], ["", "fun fml_sem :: \"interp \\<Rightarrow> fml \\<Rightarrow> (state set)\" and\n   game_sem :: \"interp \\<Rightarrow> game \\<Rightarrow> (state set \\<Rightarrow> state set)\"\nwhere\n  \"fml_sem I (Pred p \\<theta>) = {\\<omega>. (Preds I p)(term_sem I \\<theta> \\<omega>)}\"\n| \"fml_sem I (Geq \\<theta> \\<eta>) = {\\<omega>. term_sem I \\<theta> \\<omega> \\<ge> term_sem I \\<eta> \\<omega>}\"\n| \"fml_sem I (Not \\<phi>) = {\\<omega>. \\<omega> \\<notin> fml_sem I \\<phi>}\"\n| \"fml_sem I (And \\<phi> \\<psi>) = fml_sem I \\<phi> \\<inter> fml_sem I \\<psi>\"\n| \"fml_sem I (Exists x \\<phi>) = {\\<omega>. \\<exists>r. (repv \\<omega> x r) \\<in> fml_sem I \\<phi>}\"\n| \"fml_sem I (Diamond \\<alpha> \\<phi>) = game_sem I \\<alpha> (fml_sem I \\<phi>)\"\n\n| \"game_sem I (Game a) = (\\<lambda>X. (Games I a)(X))\"\n| \"game_sem I (Assign x \\<theta>) = (\\<lambda>X. {\\<omega>. (repv \\<omega> x (term_sem I \\<theta> \\<omega>)) \\<in> X})\"\n| \"game_sem I (Test \\<phi>) = (\\<lambda>X. fml_sem I \\<phi> \\<inter> X)\"\n| \"game_sem I (Choice \\<alpha> \\<beta>) = (\\<lambda>X. game_sem I \\<alpha> X \\<union> game_sem I \\<beta> X)\"\n| \"game_sem I (Compose \\<alpha> \\<beta>) = (\\<lambda>X. game_sem I \\<alpha> (game_sem I \\<beta> X))\"\n| \"game_sem I (Loop \\<alpha>) = (\\<lambda>X. \\<Inter>{Z. X \\<union> game_sem I \\<alpha> Z \\<subseteq> Z})\"\n| \"game_sem I (Dual \\<alpha>) = (\\<lambda>X. -(game_sem I \\<alpha> (-X)))\"\n| \"game_sem I (ODE x \\<theta>) = (\\<lambda>X. {\\<omega>. \\<exists>F T. Vagree \\<omega> (F(0)) (-{DVar x}) \\<and> F(T) \\<in> X \\<and> solves_ODE I F x \\<theta>})\""], ["", "text \\<open>Validity\\<close>"], ["", "definition valid_in :: \"interp \\<Rightarrow> fml \\<Rightarrow> bool\"\nwhere \"valid_in I \\<phi> \\<equiv> (\\<forall>\\<omega>. \\<omega> \\<in> fml_sem I \\<phi>)\""], ["", "definition valid :: \"fml \\<Rightarrow> bool\"\n  where \"valid \\<phi> \\<equiv> (\\<forall>I.\\<forall>\\<omega>. \\<omega> \\<in> fml_sem I \\<phi>)\""], ["", "lemma valid_is_valid_in_all: \"valid \\<phi> = (\\<forall>I. valid_in I \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid \\<phi> = (\\<forall>I. valid_in I \\<phi>)", "unfolding valid_def valid_in_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>I \\<omega>. \\<omega> \\<in> fml_sem I \\<phi>) =\n    (\\<forall>I \\<omega>. \\<omega> \\<in> fml_sem I \\<phi>)", "by auto"], ["", "definition locally_sound :: \"inference \\<Rightarrow> bool\"\n  where \"locally_sound R \\<equiv>\n  (\\<forall>I. (\\<forall>k. 0\\<le>k \\<longrightarrow> k<length (fst R) \\<longrightarrow> valid_in I (nth (fst R) k)) \\<longrightarrow> valid_in I (snd R))\""], ["", "definition sound :: \"inference \\<Rightarrow> bool\"\n  where \"sound R \\<equiv>\n  (\\<forall>k. 0\\<le>k \\<longrightarrow> k<length (fst R) \\<longrightarrow> valid (nth (fst R) k)) \\<longrightarrow> valid (snd R)\""], ["", "lemma locally_sound_is_sound: \"locally_sound R \\<Longrightarrow> sound R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_sound R \\<Longrightarrow> sound R", "unfolding locally_sound_def sound_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length (fst R) \\<longrightarrow>\n           valid_in I (fst R ! k)) \\<longrightarrow>\n       valid_in I (snd R) \\<Longrightarrow>\n    (\\<forall>k\\<ge>0.\n        k < length (fst R) \\<longrightarrow>\n        valid (fst R ! k)) \\<longrightarrow>\n    valid (snd R)", "using valid_is_valid_in_all"], ["proof (prove)\nusing this:\n  valid ?\\<phi> = (\\<forall>I. valid_in I ?\\<phi>)\n\ngoal (1 subgoal):\n 1. \\<forall>I.\n       (\\<forall>k\\<ge>0.\n           k < length (fst R) \\<longrightarrow>\n           valid_in I (fst R ! k)) \\<longrightarrow>\n       valid_in I (snd R) \\<Longrightarrow>\n    (\\<forall>k\\<ge>0.\n        k < length (fst R) \\<longrightarrow>\n        valid (fst R ! k)) \\<longrightarrow>\n    valid (snd R)", "by auto"], ["", "subsection \\<open>Monotone Semantics\\<close>"], ["", "lemma monotone_Test [simp]: \"X\\<subseteq>Y \\<Longrightarrow> game_sem I (Test \\<phi>) X \\<subseteq> game_sem I (Test \\<phi>) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> Y \\<Longrightarrow>\n    game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y", "by auto"], ["", "lemma monotone [simp]: \"X\\<subseteq>Y \\<Longrightarrow> game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> Y \\<Longrightarrow>\n    game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y", "proof (induction \\<alpha> arbitrary: X Y rule: game_induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>a X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (Game a) X \\<subseteq> game_sem I (Game a) Y\n 2. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y\n 3. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 4. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 5. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 6. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 7. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 8. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Game a)"], ["proof (state)\nthis:\n  X \\<subseteq> Y\n\ngoal (8 subgoals):\n 1. \\<And>a X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (Game a) X \\<subseteq> game_sem I (Game a) Y\n 2. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y\n 3. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 4. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 5. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 6. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 7. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 8. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I (Game a) X \\<subseteq> game_sem I (Game a) Y", "by simp"], ["proof (state)\nthis:\n  game_sem I (Game a) X \\<subseteq> game_sem I (Game a) Y\n\ngoal (7 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y\n 2. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 3. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 4. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 5. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 6. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 7. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y\n 2. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 3. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 4. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 5. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 6. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 7. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Assign x \\<theta>)"], ["proof (state)\nthis:\n  X \\<subseteq> Y\n\ngoal (7 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y\n 2. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 3. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 4. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 5. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 6. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 7. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y", "by auto"], ["proof (state)\nthis:\n  game_sem I (x := \\<theta>) X \\<subseteq> game_sem I (x := \\<theta>) Y\n\ngoal (6 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 3. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 4. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 5. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 6. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 3. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 4. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 5. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 6. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Test \\<phi>)"], ["proof (state)\nthis:\n  X \\<subseteq> Y\n\ngoal (6 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<phi> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n 3. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 4. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 5. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 6. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y", "by auto"], ["proof (state)\nthis:\n  game_sem I (? \\<phi>) X \\<subseteq> game_sem I (? \\<phi>) Y\n\ngoal (5 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 3. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 4. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 5. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 3. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 4. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 5. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Choice \\<alpha>1 \\<alpha>2)"], ["proof (state)\nthis:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>1 ?X \\<subseteq> game_sem I \\<alpha>1 ?Y\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>2 ?X \\<subseteq> game_sem I \\<alpha>2 ?Y\n  X \\<subseteq> Y\n\ngoal (5 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> \\<union>\\<union> \\<beta>) X\n                         \\<subseteq> game_sem I\n(\\<alpha> \\<union>\\<union> \\<beta>) Y\n 3. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 4. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 5. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>1 ?X \\<subseteq> game_sem I \\<alpha>1 ?Y\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>2 ?X \\<subseteq> game_sem I \\<alpha>2 ?Y\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>1 ?X \\<subseteq> game_sem I \\<alpha>1 ?Y\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>2 ?X \\<subseteq> game_sem I \\<alpha>2 ?Y\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I (\\<alpha>1 \\<union>\\<union> \\<alpha>2) X\n    \\<subseteq> game_sem I (\\<alpha>1 \\<union>\\<union> \\<alpha>2) Y", "by (metis Un_mono game_sem.simps(4))"], ["proof (state)\nthis:\n  game_sem I (\\<alpha>1 \\<union>\\<union> \\<alpha>2) X\n  \\<subseteq> game_sem I (\\<alpha>1 \\<union>\\<union> \\<alpha>2) Y\n\ngoal (4 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 3. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 4. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 3. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 4. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Compose \\<alpha>1 \\<alpha>2)"], ["proof (state)\nthis:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>1 ?X \\<subseteq> game_sem I \\<alpha>1 ?Y\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>2 ?X \\<subseteq> game_sem I \\<alpha>2 ?Y\n  X \\<subseteq> Y\n\ngoal (4 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> \\<beta> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        \\<And>X Y.\n           X \\<subseteq> Y \\<Longrightarrow>\n           game_sem I \\<beta> X \\<subseteq> game_sem I \\<beta> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I (\\<alpha> ;; \\<beta>) X\n                         \\<subseteq> game_sem I (\\<alpha> ;; \\<beta>) Y\n 3. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 4. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>1 ?X \\<subseteq> game_sem I \\<alpha>1 ?Y\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>2 ?X \\<subseteq> game_sem I \\<alpha>2 ?Y\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>1 ?X \\<subseteq> game_sem I \\<alpha>1 ?Y\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha>2 ?X \\<subseteq> game_sem I \\<alpha>2 ?Y\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I (\\<alpha>1 ;; \\<alpha>2) X\n    \\<subseteq> game_sem I (\\<alpha>1 ;; \\<alpha>2) Y", "by auto"], ["proof (state)\nthis:\n  game_sem I (\\<alpha>1 ;; \\<alpha>2) X\n  \\<subseteq> game_sem I (\\<alpha>1 ;; \\<alpha>2) Y\n\ngoal (3 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 3. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 3. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Loop \\<alpha>)"], ["proof (state)\nthis:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha> ?X \\<subseteq> game_sem I \\<alpha> ?Y\n  X \\<subseteq> Y\n\ngoal (3 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>** X\n                         \\<subseteq> game_sem I \\<alpha>** Y\n 3. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha> ?X \\<subseteq> game_sem I \\<alpha> ?Y\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha> ?X \\<subseteq> game_sem I \\<alpha> ?Y\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** X \\<subseteq> game_sem I \\<alpha>** Y", "by auto"], ["proof (state)\nthis:\n  game_sem I \\<alpha>** X \\<subseteq> game_sem I \\<alpha>** Y\n\ngoal (2 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "case (Dual \\<alpha>)"], ["proof (state)\nthis:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha> ?X \\<subseteq> game_sem I \\<alpha> ?Y\n  X \\<subseteq> Y\n\ngoal (2 subgoals):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y\n 2. \\<And>\\<alpha> X Y.\n       \\<lbrakk>\\<And>X Y.\n                   X \\<subseteq> Y \\<Longrightarrow>\n                   game_sem I \\<alpha> X \\<subseteq> game_sem I \\<alpha> Y;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> game_sem I \\<alpha>^d X\n                         \\<subseteq> game_sem I \\<alpha>^d Y", "then"], ["proof (chain)\npicking this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha> ?X \\<subseteq> game_sem I \\<alpha> ?Y\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  ?X \\<subseteq> ?Y \\<Longrightarrow>\n  game_sem I \\<alpha> ?X \\<subseteq> game_sem I \\<alpha> ?Y\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>^d X \\<subseteq> game_sem I \\<alpha>^d Y", "by auto"], ["proof (state)\nthis:\n  game_sem I \\<alpha>^d X \\<subseteq> game_sem I \\<alpha>^d Y\n\ngoal (1 subgoal):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y", "case (ODE x \\<theta>)"], ["proof (state)\nthis:\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. \\<And>x \\<theta> X Y.\n       X \\<subseteq> Y \\<Longrightarrow>\n       game_sem I (ODE x \\<theta>) X\n       \\<subseteq> game_sem I (ODE x \\<theta>) Y", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> Y", "show ?case"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. game_sem I (ODE x \\<theta>) X \\<subseteq> game_sem I (ODE x \\<theta>) Y", "by auto"], ["proof (state)\nthis:\n  game_sem I (ODE x \\<theta>) X \\<subseteq> game_sem I (ODE x \\<theta>) Y\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary game_sem_mono [simp]: \"mono (\\<lambda>X. game_sem I \\<alpha> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (game_sem I \\<alpha>)", "by (simp add: mon_mono)"], ["", "corollary game_union: \"game_sem I \\<alpha> (X\\<union>Y) \\<supseteq> game_sem I \\<alpha> X \\<union> game_sem I \\<alpha> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I \\<alpha> X \\<union> game_sem I \\<alpha> Y\n    \\<subseteq> game_sem I \\<alpha> (X \\<union> Y)", "by simp"], ["", "lemmas game_sem_union = game_union"], ["", "subsection \\<open>Fixpoint Semantics Alternative for Loops\\<close>"], ["", "lemma game_sem_loop_fixpoint_mono: \"mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "using game_sem_mono"], ["proof (prove)\nusing this:\n  mono (game_sem ?I ?\\<alpha>)\n\ngoal (1 subgoal):\n 1. mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "by (metis Un_mono mon_mono order_refl)"], ["", "text \\<open>Consequence of Knaster-Tarski Theorem 3.5 of \\<^url>\\<open>https://doi.org/10.1145/2817824\\<close>\\<close>"], ["", "lemma game_sem_loop: \"game_sem I (Loop \\<alpha>) = (\\<lambda>X. lfp(\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))", "have \"\\<Inter>{Z. X \\<union> game_sem I \\<alpha> Z \\<subseteq> Z} = lfp(\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Inter> {Z. X \\<union> game_sem I \\<alpha> Z \\<subseteq> Z} =\n    lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "by (simp add: lfp_def)"], ["proof (state)\nthis:\n  \\<Inter> {Z. X \\<union> game_sem I \\<alpha> Z \\<subseteq> Z} =\n  lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))", "then"], ["proof (chain)\npicking this:\n  \\<Inter> {Z. X \\<union> game_sem I \\<alpha> Z \\<subseteq> Z} =\n  lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Inter> {Z. X \\<union> game_sem I \\<alpha> Z \\<subseteq> Z} =\n  lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))", "by (simp add: lfp_def)"], ["proof (state)\nthis:\n  game_sem I \\<alpha>** =\n  (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary game_sem_loop_back: \"(\\<lambda>X. lfp(\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)) = game_sem I (Loop \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)) =\n    game_sem I \\<alpha>**", "using game_sem_loop"], ["proof (prove)\nusing this:\n  game_sem ?I ?\\<alpha>** =\n  (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem ?I ?\\<alpha> Z))\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)) =\n    game_sem I \\<alpha>**", "by simp"], ["", "corollary game_sem_loop_iterate: \"game_sem I (Loop \\<alpha>) = (\\<lambda>X. X \\<union> game_sem I \\<alpha> (game_sem I (Loop \\<alpha>) X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. X \\<union> game_sem I \\<alpha> (game_sem I \\<alpha>** X))", "by (metis (no_types) game_sem_loop game_sem_loop_fixpoint_mono lfp_fixpoint)"], ["", "corollary game_sem_loop_unwind: \"game_sem I (Loop \\<alpha>) = (\\<lambda>X. X \\<union> game_sem I (Compose \\<alpha> (Loop \\<alpha>)) X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X)", "using game_sem_loop_iterate"], ["proof (prove)\nusing this:\n  game_sem ?I ?\\<alpha>** =\n  (\\<lambda>X. X \\<union> game_sem ?I ?\\<alpha> (game_sem ?I ?\\<alpha>** X))\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** =\n    (\\<lambda>X. X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X)", "by (metis game_sem.simps(5))"], ["", "corollary game_sem_loop_unwind_reduce: \"(\\<lambda>X. X \\<union> game_sem I (Compose \\<alpha> (Loop \\<alpha>)) X) = game_sem I (Loop \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X) =\n    game_sem I \\<alpha>**", "using game_sem_loop_unwind"], ["proof (prove)\nusing this:\n  game_sem ?I ?\\<alpha>** =\n  (\\<lambda>X. X \\<union> game_sem ?I (?\\<alpha> ;; ?\\<alpha>**) X)\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X) =\n    game_sem I \\<alpha>**", "by (rule sym)"], ["", "lemmas lfp_ordinal_induct_set_cases = lfp_ordinal_induct_set [case_names mono step union]"], ["", "(* Read off a fixpoint induction scheme from the fact that loops have a least fixpoint semantics *)"], ["", "lemma game_loop_induct [case_names step union]: \n  \"(\\<And>Z. Z \\<subseteq> game_sem I (Loop \\<alpha>) X \\<Longrightarrow> P(Z) \\<Longrightarrow> P(X \\<union> game_sem I \\<alpha> Z))\n  \\<Longrightarrow> (\\<And>M. (\\<forall>Z\\<in>M. P(Z)) \\<Longrightarrow> P(Sup M))\n  \\<Longrightarrow> P(game_sem I (Loop \\<alpha>) X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Z.\n                \\<lbrakk>Z \\<subseteq> game_sem I \\<alpha>** X; P Z\\<rbrakk>\n                \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> Z);\n     \\<And>M.\n        \\<forall>Z\\<in>M. P Z \\<Longrightarrow> P (\\<Union> M)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<alpha>** X)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Z.\n                \\<lbrakk>Z \\<subseteq> game_sem I \\<alpha>** X; P Z\\<rbrakk>\n                \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> Z);\n     \\<And>M.\n        \\<forall>Z\\<in>M. P Z \\<Longrightarrow> P (\\<Union> M)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<alpha>** X)", "assume loopstep: \"\\<And>Z. Z \\<subseteq> game_sem I (Loop \\<alpha>) X \\<Longrightarrow> P(Z) \\<Longrightarrow>  P(X \\<union> game_sem I \\<alpha> Z)\""], ["proof (state)\nthis:\n  \\<lbrakk>?Z \\<subseteq> game_sem I \\<alpha>** X; P ?Z\\<rbrakk>\n  \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> ?Z)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Z.\n                \\<lbrakk>Z \\<subseteq> game_sem I \\<alpha>** X; P Z\\<rbrakk>\n                \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> Z);\n     \\<And>M.\n        \\<forall>Z\\<in>M. P Z \\<Longrightarrow> P (\\<Union> M)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<alpha>** X)", "assume loopsup: \"\\<And>M. (\\<forall>Z\\<in>M. P(Z)) \\<Longrightarrow> P(Sup M)\""], ["proof (state)\nthis:\n  \\<forall>Z\\<in>?M. P Z \\<Longrightarrow> P (\\<Union> ?M)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Z.\n                \\<lbrakk>Z \\<subseteq> game_sem I \\<alpha>** X; P Z\\<rbrakk>\n                \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> Z);\n     \\<And>M.\n        \\<forall>Z\\<in>M. P Z \\<Longrightarrow> P (\\<Union> M)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<alpha>** X)", "have \"P(lfp(\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))", "proof (induction rule: lfp_ordinal_induct[where f=\\<open>\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z\\<close>])"], ["proof (state)\ngoal (3 subgoals):\n 1. mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n 2. \\<And>S.\n       \\<lbrakk>P S;\n        S \\<subseteq> lfp (\\<lambda>Z.\n                              X \\<union> game_sem I \\<alpha> Z)\\<rbrakk>\n       \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> S)\n 3. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "case mono"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n 2. \\<And>S.\n       \\<lbrakk>P S;\n        S \\<subseteq> lfp (\\<lambda>Z.\n                              X \\<union> game_sem I \\<alpha> Z)\\<rbrakk>\n       \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> S)\n 3. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "using game_sem_loop_fixpoint_mono"], ["proof (prove)\nusing this:\n  mono (\\<lambda>Z. ?X \\<union> game_sem ?I ?\\<alpha> Z)\n\ngoal (1 subgoal):\n 1. mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "by simp"], ["proof (state)\nthis:\n  mono (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>P S;\n        S \\<subseteq> lfp (\\<lambda>Z.\n                              X \\<union> game_sem I \\<alpha> Z)\\<rbrakk>\n       \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> S)\n 2. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>P S;\n        S \\<subseteq> lfp (\\<lambda>Z.\n                              X \\<union> game_sem I \\<alpha> Z)\\<rbrakk>\n       \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> S)\n 2. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "case (step S)"], ["proof (state)\nthis:\n  P S\n  S \\<subseteq> lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>P S;\n        S \\<subseteq> lfp (\\<lambda>Z.\n                              X \\<union> game_sem I \\<alpha> Z)\\<rbrakk>\n       \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> S)\n 2. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "then"], ["proof (chain)\npicking this:\n  P S\n  S \\<subseteq> lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)", "show ?case"], ["proof (prove)\nusing this:\n  P S\n  S \\<subseteq> lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n\ngoal (1 subgoal):\n 1. P (X \\<union> game_sem I \\<alpha> S)", "using loopstep[where Z=S] game_sem_loop[where I=I and \\<alpha>=\\<alpha>]"], ["proof (prove)\nusing this:\n  P S\n  S \\<subseteq> lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z)\n  \\<lbrakk>S \\<subseteq> game_sem I \\<alpha>** X; P S\\<rbrakk>\n  \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> S)\n  game_sem I \\<alpha>** =\n  (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\n\ngoal (1 subgoal):\n 1. P (X \\<union> game_sem I \\<alpha> S)", "by (simp add: loopstep)"], ["proof (state)\nthis:\n  P (X \\<union> game_sem I \\<alpha> S)\n\ngoal (1 subgoal):\n 1. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "case (union M)"], ["proof (state)\nthis:\n  \\<forall>S\\<in>M. P S\n\ngoal (1 subgoal):\n 1. \\<And>M. \\<forall>S\\<in>M. P S \\<Longrightarrow> P (\\<Union> M)", "then"], ["proof (chain)\npicking this:\n  \\<forall>S\\<in>M. P S", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>M. P S\n\ngoal (1 subgoal):\n 1. P (\\<Union> M)", "using loopsup game_sem_loop"], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>M. P S\n  \\<forall>Z\\<in>?M. P Z \\<Longrightarrow> P (\\<Union> ?M)\n  game_sem ?I ?\\<alpha>** =\n  (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem ?I ?\\<alpha> Z))\n\ngoal (1 subgoal):\n 1. P (\\<Union> M)", "by auto"], ["proof (state)\nthis:\n  P (\\<Union> M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>Z.\n                \\<lbrakk>Z \\<subseteq> game_sem I \\<alpha>** X; P Z\\<rbrakk>\n                \\<Longrightarrow> P (X \\<union> game_sem I \\<alpha> Z);\n     \\<And>M.\n        \\<forall>Z\\<in>M. P Z \\<Longrightarrow> P (\\<Union> M)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<alpha>** X)", "then"], ["proof (chain)\npicking this:\n  P (lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))", "show \"P(game_sem I (Loop \\<alpha>) X)\""], ["proof (prove)\nusing this:\n  P (lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\n\ngoal (1 subgoal):\n 1. P (game_sem I \\<alpha>** X)", "using game_sem_loop"], ["proof (prove)\nusing this:\n  P (lfp (\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z))\n  game_sem ?I ?\\<alpha>** =\n  (\\<lambda>X. lfp (\\<lambda>Z. X \\<union> game_sem ?I ?\\<alpha> Z))\n\ngoal (1 subgoal):\n 1. P (game_sem I \\<alpha>** X)", "by simp"], ["proof (state)\nthis:\n  P (game_sem I \\<alpha>** X)\n\ngoal:\nNo subgoals!", "(*proof (induction rule: lfp_ordinal_induct_set_cases[where f=\\<open>\\<lambda>Z. X \\<union> game_sem I \\<alpha> Z\\<close>])\n    case mono\n    then show ?case using game_sem_loop_fixpoint_mono by simp\n  next\n    case (step S)\n    then show ?case using loopstep by auto\n  next\n    case (union M)\n    then show ?case using loopsup game_sem_loop by auto\n  qed*)"], ["proof (state)\nthis:\n  P (game_sem I \\<alpha>** X)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Some Simple Obvious Observations\\<close>"], ["", "lemma fml_sem_not [simp]: \"fml_sem I (Not \\<phi>) = -fml_sem I \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (! \\<phi>) = - fml_sem I \\<phi>", "by auto"], ["", "lemma fml_sem_not_not [simp]: \"fml_sem I (Not (Not \\<phi>)) = fml_sem I \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (! (! \\<phi>)) = fml_sem I \\<phi>", "by simp"], ["", "lemma fml_sem_or [simp]: \"fml_sem I (Or \\<phi> \\<psi>) = fml_sem I \\<phi> \\<union> fml_sem I \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (\\<phi> || \\<psi>) =\n    fml_sem I \\<phi> \\<union> fml_sem I \\<psi>", "unfolding Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (! (! \\<phi> && ! \\<psi>)) =\n    fml_sem I \\<phi> \\<union> fml_sem I \\<psi>", "by auto"], ["", "lemma fml_sem_implies [simp]: \"fml_sem I (Implies \\<phi> \\<psi>) = (-fml_sem I \\<phi>) \\<union> fml_sem I \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (\\<phi> \\<rightarrow> \\<psi>) =\n    - fml_sem I \\<phi> \\<union> fml_sem I \\<psi>", "unfolding Implies_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_sem I (\\<psi> || ! \\<phi>) =\n    - fml_sem I \\<phi> \\<union> fml_sem I \\<psi>", "by auto"], ["", "lemma TT_valid [simp]: \"valid TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid TT", "unfolding valid_def TT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<omega>.\n       \\<omega> \\<in> fml_sem I (Geq (Number 0) (Number 0))", "by simp"], ["", "paragraph \\<open>Semantic equivalence of formulas\\<close>"], ["", "definition fml_equiv:: \"fml => fml => bool\"\n  where \"fml_equiv \\<phi> \\<psi> \\<equiv> (\\<forall>I. fml_sem I \\<phi> = fml_sem I \\<psi>)\""], ["", "text \\<open>Substitutionality for Equivalent Formulas\\<close>"], ["", "lemma fml_equiv_subst: \"fml_equiv \\<phi> \\<psi> \\<Longrightarrow> P (fml_sem I \\<phi>) \\<Longrightarrow> P (fml_sem I \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fml_equiv \\<phi> \\<psi>; P (fml_sem I \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> P (fml_sem I \\<psi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fml_equiv \\<phi> \\<psi>; P (fml_sem I \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> P (fml_sem I \\<psi>)", "assume a1: \"fml_equiv \\<phi> \\<psi>\""], ["proof (state)\nthis:\n  fml_equiv \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fml_equiv \\<phi> \\<psi>; P (fml_sem I \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> P (fml_sem I \\<psi>)", "assume a2: \"P (fml_sem I \\<phi>)\""], ["proof (state)\nthis:\n  P (fml_sem I \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fml_equiv \\<phi> \\<psi>; P (fml_sem I \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> P (fml_sem I \\<psi>)", "from a1"], ["proof (chain)\npicking this:\n  fml_equiv \\<phi> \\<psi>", "have \"fml_sem I \\<phi> = fml_sem I \\<psi>\""], ["proof (prove)\nusing this:\n  fml_equiv \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. fml_sem I \\<phi> = fml_sem I \\<psi>", "using fml_equiv_def"], ["proof (prove)\nusing this:\n  fml_equiv \\<phi> \\<psi>\n  fml_equiv ?\\<phi> ?\\<psi> \\<equiv>\n  \\<forall>I. fml_sem I ?\\<phi> = fml_sem I ?\\<psi>\n\ngoal (1 subgoal):\n 1. fml_sem I \\<phi> = fml_sem I \\<psi>", "by blast"], ["proof (state)\nthis:\n  fml_sem I \\<phi> = fml_sem I \\<psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fml_equiv \\<phi> \\<psi>; P (fml_sem I \\<phi>)\\<rbrakk>\n    \\<Longrightarrow> P (fml_sem I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  fml_sem I \\<phi> = fml_sem I \\<psi>", "show ?thesis"], ["proof (prove)\nusing this:\n  fml_sem I \\<phi> = fml_sem I \\<psi>\n\ngoal (1 subgoal):\n 1. P (fml_sem I \\<psi>)", "using forw_subst a2"], ["proof (prove)\nusing this:\n  fml_sem I \\<phi> = fml_sem I \\<psi>\n  \\<lbrakk>?a = ?b; ?P ?b\\<rbrakk> \\<Longrightarrow> ?P ?a\n  P (fml_sem I \\<phi>)\n\ngoal (1 subgoal):\n 1. P (fml_sem I \\<psi>)", "by simp"], ["proof (state)\nthis:\n  P (fml_sem I \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_fml_equiv: \"valid (\\<phi> \\<leftrightarrow> \\<psi>) = fml_equiv \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid (\\<phi> \\<leftrightarrow> \\<psi>) = fml_equiv \\<phi> \\<psi>", "unfolding valid_def Equiv_def Or_def fml_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>I \\<omega>.\n        \\<omega>\n        \\<in> fml_sem I\n               (! (! (\\<phi> && \\<psi>) && ! (! \\<phi> && ! \\<psi>)))) =\n    (\\<forall>I. fml_sem I \\<phi> = fml_sem I \\<psi>)", "by auto"], ["", "lemma valid_in_equiv: \"valid_in I (\\<phi> \\<leftrightarrow> \\<psi>) = ((fml_sem I \\<phi>) = (fml_sem I \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_in I (\\<phi> \\<leftrightarrow> \\<psi>) =\n    (fml_sem I \\<phi> = fml_sem I \\<psi>)", "using valid_in_def Equiv_def Or_def"], ["proof (prove)\nusing this:\n  valid_in ?I ?\\<phi> \\<equiv>\n  \\<forall>\\<omega>. \\<omega> \\<in> fml_sem ?I ?\\<phi>\n  (?P \\<leftrightarrow> ?Q) = (?P && ?Q || ! ?P && ! ?Q)\n  (?P || ?Q) = ! (! ?P && ! ?Q)\n\ngoal (1 subgoal):\n 1. valid_in I (\\<phi> \\<leftrightarrow> \\<psi>) =\n    (fml_sem I \\<phi> = fml_sem I \\<psi>)", "by auto"], ["", "lemma valid_in_impl: \"valid_in I (\\<phi> \\<rightarrow> \\<psi>) = ((fml_sem I \\<phi>) \\<subseteq> (fml_sem I \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_in I (\\<phi> \\<rightarrow> \\<psi>) =\n    (fml_sem I \\<phi> \\<subseteq> fml_sem I \\<psi>)", "unfolding valid_in_def Implies_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<omega>.\n        \\<omega> \\<in> fml_sem I (! (! \\<psi> && ! (! \\<phi>)))) =\n    (fml_sem I \\<phi> \\<subseteq> fml_sem I \\<psi>)", "by auto"], ["", "lemma valid_equiv: \"valid (\\<phi> \\<leftrightarrow> \\<psi>) = (\\<forall>I. fml_sem I \\<phi> = fml_sem I \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid (\\<phi> \\<leftrightarrow> \\<psi>) =\n    (\\<forall>I. fml_sem I \\<phi> = fml_sem I \\<psi>)", "using valid_fml_equiv fml_equiv_def"], ["proof (prove)\nusing this:\n  valid (?\\<phi> \\<leftrightarrow> ?\\<psi>) = fml_equiv ?\\<phi> ?\\<psi>\n  fml_equiv ?\\<phi> ?\\<psi> \\<equiv>\n  \\<forall>I. fml_sem I ?\\<phi> = fml_sem I ?\\<psi>\n\ngoal (1 subgoal):\n 1. valid (\\<phi> \\<leftrightarrow> \\<psi>) =\n    (\\<forall>I. fml_sem I \\<phi> = fml_sem I \\<psi>)", "by auto"], ["", "lemma valid_impl: \"valid (\\<phi> \\<rightarrow> \\<psi>) = (\\<forall>I. (fml_sem I \\<phi>) \\<subseteq> (fml_sem I \\<psi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid (\\<phi> \\<rightarrow> \\<psi>) =\n    (\\<forall>I. fml_sem I \\<phi> \\<subseteq> fml_sem I \\<psi>)", "unfolding valid_def Implies_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>I \\<omega>.\n        \\<omega> \\<in> fml_sem I (! (! \\<psi> && ! (! \\<phi>)))) =\n    (\\<forall>I. fml_sem I \\<phi> \\<subseteq> fml_sem I \\<psi>)", "by auto"], ["", "lemma fml_sem_equals [simp]: \"(\\<omega> \\<in> fml_sem I (Equals \\<theta> \\<eta>)) = (term_sem I \\<theta> \\<omega> = term_sem I \\<eta> \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<omega> \\<in> fml_sem I (Equals \\<theta> \\<eta>)) =\n    (term_sem I \\<theta> \\<omega> = term_sem I \\<eta> \\<omega>)", "unfolding valid_def Equals_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<omega>\n     \\<in> fml_sem I (Geq \\<theta> \\<eta> && Geq \\<eta> \\<theta>)) =\n    (term_sem I \\<theta> \\<omega> = term_sem I \\<eta> \\<omega>)", "by auto"], ["", "lemma equiv_refl_valid [simp]: \"valid (\\<phi> \\<leftrightarrow> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid (\\<phi> \\<leftrightarrow> \\<phi>)", "unfolding valid_def Equiv_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<omega>.\n       \\<omega>\n       \\<in> fml_sem I\n              (! (! (\\<phi> && \\<phi>) && ! (! \\<phi> && ! \\<phi>)))", "by simp"], ["", "lemma equal_refl_valid [simp]: \"valid (Equals \\<theta> \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid (Equals \\<theta> \\<theta>)", "unfolding valid_def Equals_def Or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<omega>.\n       \\<omega>\n       \\<in> fml_sem I (Geq \\<theta> \\<theta> && Geq \\<theta> \\<theta>)", "by simp"], ["", "lemma solves_ODE_alt : \"solves_ODE I F x \\<theta> \\<equiv> (\\<forall>\\<zeta>::real.\n     Vagree (F(0)) (F(\\<zeta>)) (-{RVar x, DVar x})\n   \\<and> F(\\<zeta>)(DVar x) = deriv(\\<lambda>t. F(t)(RVar x))(\\<zeta>)\n   \\<and> F(\\<zeta>) \\<in> fml_sem I (Equals (Var (DVar x)) \\<theta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. solves_ODE I F x \\<theta> \\<equiv>\n    \\<forall>\\<zeta>.\n       Vagree (F 0) (F \\<zeta>) (- {RVar x, DVar x}) \\<and>\n       F \\<zeta> (DVar x) = deriv (\\<lambda>t. F t (RVar x)) \\<zeta> \\<and>\n       F \\<zeta> \\<in> fml_sem I (Equals (Var (DVar x)) \\<theta>)", "unfolding solves_ODE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<zeta>.\n       Vagree (F 0) (F \\<zeta>) (- {RVar x, DVar x}) \\<and>\n       F \\<zeta> (DVar x) = deriv (\\<lambda>t. F t (RVar x)) \\<zeta> \\<and>\n       F \\<zeta> (DVar x) = term_sem I \\<theta> (F \\<zeta>) \\<equiv>\n    \\<forall>\\<zeta>.\n       Vagree (F 0) (F \\<zeta>) (- {RVar x, DVar x}) \\<and>\n       F \\<zeta> (DVar x) = deriv (\\<lambda>t. F t (RVar x)) \\<zeta> \\<and>\n       F \\<zeta> \\<in> fml_sem I (Equals (Var (DVar x)) \\<theta>)", "using fml_sem_equals"], ["proof (prove)\nusing this:\n  (?\\<omega> \\<in> fml_sem ?I (Equals ?\\<theta> ?\\<eta>)) =\n  (term_sem ?I ?\\<theta> ?\\<omega> = term_sem ?I ?\\<eta> ?\\<omega>)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<zeta>.\n       Vagree (F 0) (F \\<zeta>) (- {RVar x, DVar x}) \\<and>\n       F \\<zeta> (DVar x) = deriv (\\<lambda>t. F t (RVar x)) \\<zeta> \\<and>\n       F \\<zeta> (DVar x) = term_sem I \\<theta> (F \\<zeta>) \\<equiv>\n    \\<forall>\\<zeta>.\n       Vagree (F 0) (F \\<zeta>) (- {RVar x, DVar x}) \\<and>\n       F \\<zeta> (DVar x) = deriv (\\<lambda>t. F t (RVar x)) \\<zeta> \\<and>\n       F \\<zeta> \\<in> fml_sem I (Equals (Var (DVar x)) \\<theta>)", "by simp"], ["", "paragraph \\<open>Semantic equivalence of games\\<close>"], ["", "definition game_equiv:: \"game => game => bool\"\n  where \"game_equiv \\<alpha> \\<beta> \\<equiv> (\\<forall>I X. game_sem I \\<alpha> X = game_sem I \\<beta> X)\""], ["", "text \\<open>Substitutionality for Equivalent Games\\<close>"], ["", "lemma game_equiv_subst: \"game_equiv \\<alpha> \\<beta> \\<Longrightarrow> P (game_sem I \\<alpha> X) \\<Longrightarrow> P (game_sem I \\<beta> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>game_equiv \\<alpha> \\<beta>; P (game_sem I \\<alpha> X)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<beta> X)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>game_equiv \\<alpha> \\<beta>; P (game_sem I \\<alpha> X)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<beta> X)", "assume a1: \"game_equiv \\<alpha> \\<beta>\""], ["proof (state)\nthis:\n  game_equiv \\<alpha> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>game_equiv \\<alpha> \\<beta>; P (game_sem I \\<alpha> X)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<beta> X)", "assume a2: \"P (game_sem I \\<alpha> X)\""], ["proof (state)\nthis:\n  P (game_sem I \\<alpha> X)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>game_equiv \\<alpha> \\<beta>; P (game_sem I \\<alpha> X)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<beta> X)", "from a1"], ["proof (chain)\npicking this:\n  game_equiv \\<alpha> \\<beta>", "have \"game_sem I \\<alpha> X = game_sem I \\<beta> X\""], ["proof (prove)\nusing this:\n  game_equiv \\<alpha> \\<beta>\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha> X = game_sem I \\<beta> X", "using game_equiv_def"], ["proof (prove)\nusing this:\n  game_equiv \\<alpha> \\<beta>\n  game_equiv ?\\<alpha> ?\\<beta> \\<equiv>\n  \\<forall>I X. game_sem I ?\\<alpha> X = game_sem I ?\\<beta> X\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha> X = game_sem I \\<beta> X", "by blast"], ["proof (state)\nthis:\n  game_sem I \\<alpha> X = game_sem I \\<beta> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>game_equiv \\<alpha> \\<beta>; P (game_sem I \\<alpha> X)\\<rbrakk>\n    \\<Longrightarrow> P (game_sem I \\<beta> X)", "then"], ["proof (chain)\npicking this:\n  game_sem I \\<alpha> X = game_sem I \\<beta> X", "show ?thesis"], ["proof (prove)\nusing this:\n  game_sem I \\<alpha> X = game_sem I \\<beta> X\n\ngoal (1 subgoal):\n 1. P (game_sem I \\<beta> X)", "using forw_subst a2"], ["proof (prove)\nusing this:\n  game_sem I \\<alpha> X = game_sem I \\<beta> X\n  \\<lbrakk>?a = ?b; ?P ?b\\<rbrakk> \\<Longrightarrow> ?P ?a\n  P (game_sem I \\<alpha> X)\n\ngoal (1 subgoal):\n 1. P (game_sem I \\<beta> X)", "by simp"], ["proof (state)\nthis:\n  P (game_sem I \\<beta> X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma game_equiv_subst_eq: \"game_equiv \\<alpha> \\<beta> \\<Longrightarrow> P (game_sem I \\<alpha> X) == P (game_sem I \\<beta> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_equiv \\<alpha> \\<beta> \\<Longrightarrow>\n    P (game_sem I \\<alpha> X) \\<equiv> P (game_sem I \\<beta> X)", "by (simp add: game_equiv_def)"], ["", "lemma skip_id [simp]: \"game_sem I Skip X = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I Skip X = X", "unfolding Skip_def TT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. game_sem I (? (Geq (Number 0) (Number 0))) X = X", "by auto"], ["", "lemma loop_iterate_equiv: \"game_equiv (Loop \\<alpha>) (Choice Skip (Compose \\<alpha> (Loop \\<alpha>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. game_equiv \\<alpha>** (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**))", "unfolding game_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I X.\n       game_sem I \\<alpha>** X =\n       game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I X.\n       game_sem I \\<alpha>** X =\n       game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X", "fix I X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I X.\n       game_sem I \\<alpha>** X =\n       game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X", "from game_sem_loop_unwind_reduce"], ["proof (chain)\npicking this:\n  (\\<lambda>X. X \\<union> game_sem ?I (?\\<alpha> ;; ?\\<alpha>**) X) =\n  game_sem ?I ?\\<alpha>**", "have \"X \\<union> game_sem I (Compose \\<alpha> (Loop \\<alpha>)) X = game_sem I (Loop \\<alpha>) X\""], ["proof (prove)\nusing this:\n  (\\<lambda>X. X \\<union> game_sem ?I (?\\<alpha> ;; ?\\<alpha>**) X) =\n  game_sem ?I ?\\<alpha>**\n\ngoal (1 subgoal):\n 1. X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X =\n    game_sem I \\<alpha>** X", "by metis"], ["proof (state)\nthis:\n  X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X = game_sem I \\<alpha>** X\n\ngoal (1 subgoal):\n 1. \\<And>I X.\n       game_sem I \\<alpha>** X =\n       game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X", "then"], ["proof (chain)\npicking this:\n  X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X = game_sem I \\<alpha>** X", "show \"game_sem I (Loop \\<alpha>) X = game_sem I (Choice Skip (Compose \\<alpha> (Loop \\<alpha>))) X\""], ["proof (prove)\nusing this:\n  X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X = game_sem I \\<alpha>** X\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** X =\n    game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X", "using skip_id"], ["proof (prove)\nusing this:\n  X \\<union> game_sem I (\\<alpha> ;; \\<alpha>**) X = game_sem I \\<alpha>** X\n  game_sem ?I Skip ?X = ?X\n\ngoal (1 subgoal):\n 1. game_sem I \\<alpha>** X =\n    game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X", "by auto"], ["proof (state)\nthis:\n  game_sem I \\<alpha>** X =\n  game_sem I (Skip \\<union>\\<union> (\\<alpha> ;; \\<alpha>**)) X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fml_equiv_valid: \"fml_equiv \\<phi> \\<psi> \\<Longrightarrow> valid \\<phi> = valid \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_equiv \\<phi> \\<psi> \\<Longrightarrow> valid \\<phi> = valid \\<psi>", "unfolding valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fml_equiv \\<phi> \\<psi> \\<Longrightarrow>\n    (\\<forall>I \\<omega>. \\<omega> \\<in> fml_sem I \\<phi>) =\n    (\\<forall>I \\<omega>. \\<omega> \\<in> fml_sem I \\<psi>)", "using fml_equiv_subst"], ["proof (prove)\nusing this:\n  \\<lbrakk>fml_equiv ?\\<phi> ?\\<psi>; ?P (fml_sem ?I ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> ?P (fml_sem ?I ?\\<psi>)\n\ngoal (1 subgoal):\n 1. fml_equiv \\<phi> \\<psi> \\<Longrightarrow>\n    (\\<forall>I \\<omega>. \\<omega> \\<in> fml_sem I \\<phi>) =\n    (\\<forall>I \\<omega>. \\<omega> \\<in> fml_sem I \\<psi>)", "by blast"], ["", "lemma solves_Vagree: \"solves_ODE I F x \\<theta> \\<Longrightarrow> (\\<And>\\<zeta>. Vagree (F(\\<zeta>)) (F(0)) (-{RVar x,DVar x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. solves_ODE I F x \\<theta> \\<Longrightarrow>\n    (\\<And>\\<zeta>. Vagree (F \\<zeta>) (F 0) (- {RVar x, DVar x}))", "using solves_ODE_def Vagree_sym_rel"], ["proof (prove)\nusing this:\n  solves_ODE ?I ?F ?x ?\\<theta> \\<equiv>\n  \\<forall>\\<zeta>.\n     Vagree (?F 0) (?F \\<zeta>) (- {RVar ?x, DVar ?x}) \\<and>\n     ?F \\<zeta> (DVar ?x) =\n     deriv (\\<lambda>t. ?F t (RVar ?x)) \\<zeta> \\<and>\n     ?F \\<zeta> (DVar ?x) = term_sem ?I ?\\<theta> (?F \\<zeta>)\n  Vagree ?\\<nu> ?\\<nu>' ?V \\<Longrightarrow> Vagree ?\\<nu>' ?\\<nu> ?V\n\ngoal (1 subgoal):\n 1. solves_ODE I F x \\<theta> \\<Longrightarrow>\n    (\\<And>\\<zeta>. Vagree (F \\<zeta>) (F 0) (- {RVar x, DVar x}))", "by blast"], ["", "lemma solves_Vagree_trans: \"Uvariation (F(0)) \\<omega> U \\<Longrightarrow> solves_ODE I F x \\<theta> \\<Longrightarrow> Uvariation (F(\\<zeta>)) \\<omega> (U\\<union>{RVar x,DVar x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Uvariation (F 0) \\<omega> U; solves_ODE I F x \\<theta>\\<rbrakk>\n    \\<Longrightarrow> Uvariation (F \\<zeta>) \\<omega>\n                       (U \\<union> {RVar x, DVar x})", "using solves_Vagree Uvariation_Vagree solves_ODE_def"], ["proof (prove)\nusing this:\n  solves_ODE ?I ?F ?x ?\\<theta> \\<Longrightarrow>\n  Vagree (?F ?\\<zeta>) (?F 0) (- {RVar ?x, DVar ?x})\n  Uvariation ?\\<nu> ?\\<nu>' (- ?V) = Vagree ?\\<nu> ?\\<nu>' ?V\n  solves_ODE ?I ?F ?x ?\\<theta> \\<equiv>\n  \\<forall>\\<zeta>.\n     Vagree (?F 0) (?F \\<zeta>) (- {RVar ?x, DVar ?x}) \\<and>\n     ?F \\<zeta> (DVar ?x) =\n     deriv (\\<lambda>t. ?F t (RVar ?x)) \\<zeta> \\<and>\n     ?F \\<zeta> (DVar ?x) = term_sem ?I ?\\<theta> (?F \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Uvariation (F 0) \\<omega> U; solves_ODE I F x \\<theta>\\<rbrakk>\n    \\<Longrightarrow> Uvariation (F \\<zeta>) \\<omega>\n                       (U \\<union> {RVar x, DVar x})", "by (metis Uvariation_sym_rel Uvariation_trans double_complement)"], ["", "end"]]}