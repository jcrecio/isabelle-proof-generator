{"file_name": "/home/qj213/afp-2021-10-22/thys/Goedel_Incompleteness/Goedel_Formula.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Goedel_Incompleteness", "problem_names": ["lemma \\<phi>G[simp,intro!]: \"\\<phi>G \\<in> fmla\"\nand\nFvars_\\<phi>G[simp]: \"Fvars \\<phi>G = {}\"", "lemma bprv_\\<phi>G_eqv:\n\"bprv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))\"", "lemma prv_\\<phi>G_eqv:\n\"prv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))\"", "lemma bprv_\\<phi>G_eqv_not_exi_PPf:\n\"bprv (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\"", "lemma prv_\\<phi>G_eqv_not_exi_PPf:\n\"prv (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\"", "lemma bprv_\\<phi>G_eqv_all_not_PPf:\n\"bprv (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\"", "lemma prv_\\<phi>G_eqv_all_not_PPf:\n\"prv (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\"", "lemma bprv_eqv_all_not_PPf_imp_\\<phi>G:\n\"bprv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)\"", "lemma prv_eqv_all_not_PPf_imp_\\<phi>G:\n\"prv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)\""], "translations": [["", "lemma \\<phi>G[simp,intro!]: \"\\<phi>G \\<in> fmla\"\nand\nFvars_\\<phi>G[simp]: \"Fvars \\<phi>G = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>G \\<in> fmla &&& Fvars \\<phi>G = {}", "unfolding \\<phi>G_def PP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag (neg P) \\<in> fmla &&& Fvars (diag (neg P)) = {}", "by auto"], ["", "lemma bprv_\\<phi>G_eqv:\n\"bprv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bprv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))", "unfolding \\<phi>G_def PP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bprv\n     (eqv (diag (neg P)) (neg (subst P \\<langle>diag (neg P)\\<rangle> xx)))", "using bprv_diag_eqv[of \"neg P\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>neg P \\<in> fmla; Fvars (neg P) = {xx}\\<rbrakk>\n  \\<Longrightarrow> bprv\n                     (eqv (diag (neg P))\n                       (subst (neg P) \\<langle>diag (neg P)\\<rangle> xx))\n\ngoal (1 subgoal):\n 1. bprv\n     (eqv (diag (neg P)) (neg (subst P \\<langle>diag (neg P)\\<rangle> xx)))", "by simp"], ["", "lemma prv_\\<phi>G_eqv:\n\"prv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))", "using bprv_prv[OF _ _ bprv_\\<phi>G_eqv, simplified]"], ["proof (prove)\nusing this:\n  prv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))\n\ngoal (1 subgoal):\n 1. prv (eqv \\<phi>G (neg (PP \\<langle>\\<phi>G\\<rangle>)))", "."], ["", "end \\<comment> \\<open>context @{locale Goedel_Form}\\<close>"], ["", "text \\<open>Adding cleanly representable proofs to the assumptions\nbehind G?del formulas:\\<close>"], ["", "locale Goedel_Form_Proofs =\nRepr_SelfSubst\n  var trm fmla Var FvarsT substT Fvars subst\n  num\n  eql cnj imp all exi\n  prv bprv\n  enc\n  S\n+\nCleanRepr_Proofs\n  var trm fmla Var FvarsT substT Fvars subst\n  num\n  eql cnj imp all exi\n  prv bprv\n  enc\n  fls\n  dsj\n  \"proof\" prfOf\n  encPf\n  Pf\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst num\nand eql cnj imp all exi\nand fls\nand prv bprv\nand enc (\"\\<langle>_\\<rangle>\")\nand S\nand dsj\nand \"proof\" :: \"'proof set\" and prfOf encPf\nand Pf"], ["", "text \\<open>... and extending the sublocale relationship @{locale CleanRepr_Proofs} < @{locale HBL1}:\\<close>"], ["", "sublocale Goedel_Form_Proofs < Goedel_Form where P = P"], ["proof (prove)\ngoal (1 subgoal):\n 1. Goedel_Form var trm fmla Var num FvarsT substT Fvars subst eql cnj imp\n     all exi fls prv bprv enc S P", "by standard"], ["", "context Goedel_Form_Proofs\nbegin"], ["", "lemma bprv_\\<phi>G_eqv_not_exi_PPf:\n\"bprv (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "have P: \"P = exi yy Pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = exi yy Pf", "using P_def"], ["proof (prove)\nusing this:\n  P \\<equiv> exi yy (PPf (Var yy) (Var xx))\n\ngoal (1 subgoal):\n 1. P = exi yy Pf", "by (simp add: PPf_def2)"], ["proof (state)\nthis:\n  P = exi yy Pf\n\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "hence \"subst P \\<langle>\\<phi>G\\<rangle> xx = subst (exi yy Pf) \\<langle>\\<phi>G\\<rangle> xx\""], ["proof (prove)\nusing this:\n  P = exi yy Pf\n\ngoal (1 subgoal):\n 1. subst P \\<langle>\\<phi>G\\<rangle> xx =\n    subst (exi yy Pf) \\<langle>\\<phi>G\\<rangle> xx", "by auto"], ["proof (state)\nthis:\n  subst P \\<langle>\\<phi>G\\<rangle> xx =\n  subst (exi yy Pf) \\<langle>\\<phi>G\\<rangle> xx\n\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "hence \"subst P \\<langle>\\<phi>G\\<rangle> xx = exi yy (subst Pf \\<langle>\\<phi>G\\<rangle> xx)\""], ["proof (prove)\nusing this:\n  subst P \\<langle>\\<phi>G\\<rangle> xx =\n  subst (exi yy Pf) \\<langle>\\<phi>G\\<rangle> xx\n\ngoal (1 subgoal):\n 1. subst P \\<langle>\\<phi>G\\<rangle> xx =\n    exi yy (subst Pf \\<langle>\\<phi>G\\<rangle> xx)", "by simp"], ["proof (state)\nthis:\n  subst P \\<langle>\\<phi>G\\<rangle> xx =\n  exi yy (subst Pf \\<langle>\\<phi>G\\<rangle> xx)\n\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  subst P \\<langle>\\<phi>G\\<rangle> xx =\n  exi yy (subst Pf \\<langle>\\<phi>G\\<rangle> xx)\n\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "using bprv_\\<phi>G_eqv"], ["proof (prove)\nusing this:\n  subst P \\<langle>\\<phi>G\\<rangle> xx =\n  exi yy (subst Pf \\<langle>\\<phi>G\\<rangle> xx)\n  bprv (eqv \\<phi>G (neg (wrepr.PP \\<langle>\\<phi>G\\<rangle>)))\n\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "by (simp add: wrepr.PP_def PPf_def2)"], ["proof (state)\nthis:\n  bprv (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prv_\\<phi>G_eqv_not_exi_PPf:\n\"prv (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv \\<phi>G\n          (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "using bprv_prv[OF _ _ bprv_\\<phi>G_eqv_not_exi_PPf, simplified]"], ["proof (prove)\nusing this:\n  prv (eqv \\<phi>G (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\n\ngoal (1 subgoal):\n 1. prv (eqv \\<phi>G\n          (neg (exi yy (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "."], ["", "lemma bprv_\\<phi>G_eqv_all_not_PPf:\n\"bprv (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bprv\n     (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "by (rule B.prv_eqv_trans[OF _ _ _ bprv_\\<phi>G_eqv_not_exi_PPf B.prv_neg_exi_eqv_all_neg]) auto"], ["", "lemma prv_\\<phi>G_eqv_all_not_PPf:\n\"prv (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (eqv \\<phi>G\n          (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "using bprv_prv[OF _ _ bprv_\\<phi>G_eqv_all_not_PPf, simplified]"], ["proof (prove)\nusing this:\n  prv (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\n\ngoal (1 subgoal):\n 1. prv (eqv \\<phi>G\n          (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))", "."], ["", "lemma bprv_eqv_all_not_PPf_imp_\\<phi>G:\n\"bprv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bprv\n     (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)", "using bprv_\\<phi>G_eqv_all_not_PPf"], ["proof (prove)\nusing this:\n  bprv (eqv \\<phi>G (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))))\n\ngoal (1 subgoal):\n 1. bprv\n     (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)", "by (auto intro: B.prv_imp_eqvER)"], ["", "lemma prv_eqv_all_not_PPf_imp_\\<phi>G:\n\"prv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>)))\n          \\<phi>G)", "using bprv_prv[OF _ _ bprv_eqv_all_not_PPf_imp_\\<phi>G, simplified]"], ["proof (prove)\nusing this:\n  prv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>))) \\<phi>G)\n\ngoal (1 subgoal):\n 1. prv (imp (all yy (neg (PPf (Var yy) \\<langle>\\<phi>G\\<rangle>)))\n          \\<phi>G)", "."], ["", "end \\<comment> \\<open>context @{locale Goedel_Form_Proofs}\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}