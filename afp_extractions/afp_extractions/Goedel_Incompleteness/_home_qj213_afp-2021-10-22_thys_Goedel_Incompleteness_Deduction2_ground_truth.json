{"file_name": "/home/qj213/afp-2021-10-22/thys/Goedel_Incompleteness/Deduction2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Goedel_Incompleteness", "problem_names": ["lemma bprv_prv':\n  assumes \\<phi>: \"\\<phi> \\<in> fmla\" and b: \"bprv \\<phi>\"\n  shows \"prv \\<phi>\"", "lemma consistent_B_consistent: \"consistent \\<Longrightarrow> B.consistent\"", "lemma LLq_num:\nassumes \"\\<phi> \\<in> fmla\" \"q \\<in> num\" \"Fvars \\<phi> = {zz}\" \"\\<forall> p \\<in> num. bprv (subst \\<phi> p zz)\"\nshows \"prv (all zz (imp (LLq (Var zz) q) \\<phi>))\"", "lemma LLq_num2:\nassumes \"p \\<in> num\"\nshows \"\\<exists> P \\<subseteq> num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r | r. r \\<in> P}) (LLq p (Var yy)))\""], "translations": [["", "lemma bprv_prv':\n  assumes \\<phi>: \"\\<phi> \\<in> fmla\" and b: \"bprv \\<phi>\"\n  shows \"prv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<phi>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. prv \\<phi>", "obtain V where V: \"Fvars \\<phi> = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V. Fvars \\<phi> = V \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fvars \\<phi> = V\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "have VV: \"V \\<subseteq> var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> var", "using Fvars V \\<phi>"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> fmla \\<Longrightarrow> Fvars ?\\<phi> \\<subseteq> var\n  Fvars \\<phi> = V\n  \\<phi> \\<in> fmla\n\ngoal (1 subgoal):\n 1. V \\<subseteq> var", "by blast"], ["proof (state)\nthis:\n  V \\<subseteq> var\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "have f: \"finite V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite V", "using V finite_Fvars[OF \\<phi>]"], ["proof (prove)\nusing this:\n  Fvars \\<phi> = V\n  finite (Fvars \\<phi>)\n\ngoal (1 subgoal):\n 1. finite V", "by auto"], ["proof (state)\nthis:\n  finite V\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite V\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "using \\<phi> b V VV"], ["proof (prove)\nusing this:\n  finite V\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = V\n  V \\<subseteq> var\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "proof(induction V arbitrary: \\<phi> rule: finite.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = {};\n        {} \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>\n 2. \\<And>A a \\<phi>.\n       \\<lbrakk>finite A;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = A;\n            A \\<subseteq> var\\<rbrakk>\n           \\<Longrightarrow> prv \\<phi>;\n        \\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = insert a A;\n        insert a A \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>", "case (emptyI \\<phi>)"], ["proof (state)\nthis:\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = {}\n  {} \\<subseteq> var\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = {};\n        {} \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>\n 2. \\<And>A a \\<phi>.\n       \\<lbrakk>finite A;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = A;\n            A \\<subseteq> var\\<rbrakk>\n           \\<Longrightarrow> prv \\<phi>;\n        \\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = insert a A;\n        insert a A \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = {}\n  {} \\<subseteq> var", "show ?case"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = {}\n  {} \\<subseteq> var\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "by (simp add: bprv_prv)"], ["proof (state)\nthis:\n  prv \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>A a \\<phi>.\n       \\<lbrakk>finite A;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = A;\n            A \\<subseteq> var\\<rbrakk>\n           \\<Longrightarrow> prv \\<phi>;\n        \\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = insert a A;\n        insert a A \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A a \\<phi>.\n       \\<lbrakk>finite A;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = A;\n            A \\<subseteq> var\\<rbrakk>\n           \\<Longrightarrow> prv \\<phi>;\n        \\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = insert a A;\n        insert a A \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>", "case (insertI W v \\<phi>)"], ["proof (state)\nthis:\n  finite W\n  \\<lbrakk>?\\<phi> \\<in> fmla; bprv ?\\<phi>; Fvars ?\\<phi> = W;\n   W \\<subseteq> var\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<phi>\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = insert v W\n  insert v W \\<subseteq> var\n\ngoal (1 subgoal):\n 1. \\<And>A a \\<phi>.\n       \\<lbrakk>finite A;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = A;\n            A \\<subseteq> var\\<rbrakk>\n           \\<Longrightarrow> prv \\<phi>;\n        \\<phi> \\<in> fmla; bprv \\<phi>; Fvars \\<phi> = insert a A;\n        insert a A \\<subseteq> var\\<rbrakk>\n       \\<Longrightarrow> prv \\<phi>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prv \\<phi>", "proof(cases \"v \\<in> W\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> W \\<Longrightarrow> prv \\<phi>\n 2. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "case True"], ["proof (state)\nthis:\n  v \\<in> W\n\ngoal (2 subgoals):\n 1. v \\<in> W \\<Longrightarrow> prv \\<phi>\n 2. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> W\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "using insertI.IH[OF \\<open>\\<phi> \\<in> fmla\\<close>] insertI.prems"], ["proof (prove)\nusing this:\n  v \\<in> W\n  \\<lbrakk>bprv \\<phi>; Fvars \\<phi> = W; W \\<subseteq> var\\<rbrakk>\n  \\<Longrightarrow> prv \\<phi>\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = insert v W\n  insert v W \\<subseteq> var\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "by (simp add: insert_absorb)"], ["proof (state)\nthis:\n  prv \\<phi>\n\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "case False"], ["proof (state)\nthis:\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "hence 1: \"Fvars (all v \\<phi>) = W\""], ["proof (prove)\nusing this:\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. Fvars (all v \\<phi>) = W", "using insertI.prems"], ["proof (prove)\nusing this:\n  v \\<notin> W\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = insert v W\n  insert v W \\<subseteq> var\n\ngoal (1 subgoal):\n 1. Fvars (all v \\<phi>) = W", "by auto"], ["proof (state)\nthis:\n  Fvars (all v \\<phi>) = W\n\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "moreover"], ["proof (state)\nthis:\n  Fvars (all v \\<phi>) = W\n\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "have \"bprv (all v \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bprv (all v \\<phi>)", "using B.prv_all_gen insertI.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> var; ?\\<phi> \\<in> fmla; bprv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> bprv (all ?x ?\\<phi>)\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = insert v W\n  insert v W \\<subseteq> var\n\ngoal (1 subgoal):\n 1. bprv (all v \\<phi>)", "by auto"], ["proof (state)\nthis:\n  bprv (all v \\<phi>)\n\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  Fvars (all v \\<phi>) = W\n  bprv (all v \\<phi>)", "have \"prv (all v \\<phi>)\""], ["proof (prove)\nusing this:\n  Fvars (all v \\<phi>) = W\n  bprv (all v \\<phi>)\n\ngoal (1 subgoal):\n 1. prv (all v \\<phi>)", "using insertI"], ["proof (prove)\nusing this:\n  Fvars (all v \\<phi>) = W\n  bprv (all v \\<phi>)\n  finite W\n  \\<lbrakk>?\\<phi> \\<in> fmla; bprv ?\\<phi>; Fvars ?\\<phi> = W;\n   W \\<subseteq> var\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<phi>\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = insert v W\n  insert v W \\<subseteq> var\n\ngoal (1 subgoal):\n 1. prv (all v \\<phi>)", "by auto"], ["proof (state)\nthis:\n  prv (all v \\<phi>)\n\ngoal (1 subgoal):\n 1. v \\<notin> W \\<Longrightarrow> prv \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  prv (all v \\<phi>)\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "using allE_id insertI.prems"], ["proof (prove)\nusing this:\n  prv (all v \\<phi>)\n  \\<lbrakk>?y \\<in> var; ?\\<phi> \\<in> fmla; prv (all ?y ?\\<phi>)\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<phi>\n  \\<phi> \\<in> fmla\n  bprv \\<phi>\n  Fvars \\<phi> = insert v W\n  insert v W \\<subseteq> var\n\ngoal (1 subgoal):\n 1. prv \\<phi>", "by blast"], ["proof (state)\nthis:\n  prv \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prv \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>context @{locale Deduct2}\\<close>"], ["", "locale Deduct2_with_False =\nDeduct_with_False\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  num\n  prv\n+\nB: Deduct_with_False\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  num\n  bprv\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand num\nand prv bprv\n+\nassumes bprv_prv: \"\\<And>\\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow> bprv \\<phi> \\<Longrightarrow> prv \\<phi>\""], ["", "sublocale Deduct2_with_False < d_dwf: Deduct2"], ["proof (prove)\ngoal (1 subgoal):\n 1. Deduct2 var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all\n     exi prv bprv", "by standard (fact bprv_prv)"], ["", "context Deduct2_with_False begin"], ["", "lemma consistent_B_consistent: \"consistent \\<Longrightarrow> B.consistent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent \\<Longrightarrow> B.consistent", "using B.consistent_def bprv_prv consistent_def"], ["proof (prove)\nusing this:\n  B.consistent \\<equiv> \\<not> bprv fls\n  \\<lbrakk>?\\<phi> \\<in> fmla; Fvars ?\\<phi> = {}; bprv ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> prv ?\\<phi>\n  consistent \\<equiv> \\<not> prv fls\n\ngoal (1 subgoal):\n 1. consistent \\<Longrightarrow> B.consistent", "by blast"], ["", "end \\<comment> \\<open>context @{locale Deduct2_with_False}\\<close>"], ["", "locale Deduct2_with_False_Disj =\nDeduct_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv\n+\nB: Deduct_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  bprv\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv bprv\n+\nassumes bprv_prv: \"\\<And>\\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow> bprv \\<phi> \\<Longrightarrow> prv \\<phi>\""], ["", "sublocale Deduct2_with_False_Disj < dwf_dwfd: Deduct2_with_False"], ["proof (prove)\ngoal (1 subgoal):\n 1. Deduct2_with_False var trm fmla Var FvarsT substT Fvars subst eql cnj\n     imp all exi fls num prv bprv", "by standard (fact bprv_prv)"], ["", "(* Factoring in a strict-order-like relation (not actually required to be an order): *)"], ["", "locale Deduct2_with_PseudoOrder =\nDeduct2_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv bprv\n+\nSyntax_PseudoOrder\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  Lq\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv bprv\nand Lq\n+\nassumes\n(* We do not assume any ordering properties, but only these two axioms, Lq_num and Lq_num2,\nwhich (interestingly) would be satisfied by both \\<le> and < within a sufficiently strong\narithmetic such as Robinson's Q *)\n(* For each formula \\<phi>(z) and numeral q, if \\<phi>(p) is provable for all p\nthen \\<forall> z \\<le> q. \\<phi>(z) is provable.\n(Note that a more natural property would assume \\<phi>(p) is provable for all p\\<le>q,\nbut we can get away with the stronger assumption (on the left of the implication). )\n*)\nLq_num:\n\"let LLq = (\\<lambda> t1 t2. psubst Lq [(t1,zz), (t2,yy)]) in\n \\<forall> \\<phi> \\<in> fmla. \\<forall> q \\<in> num. Fvars \\<phi> = {zz} \\<and> (\\<forall> p \\<in> num. bprv (subst \\<phi> p zz))\n    \\<longrightarrow> prv (all zz (imp (LLq (Var zz) q) \\<phi>))\"\nand\n(* For each numeral p, there exists a finite set P such that it is provable that\n\\<forall> y. (\\<Or>p\\<in>P. x = p) \\<or> y \\<le> p\n(where we write \\<le> instead of Lq, but could also think of <):\n*)\nLq_num2:\n\"let LLq = (\\<lambda> t1 t2. psubst Lq [(t1,zz), (t2,yy)]) in\n \\<forall> p \\<in> num. \\<exists> P \\<subseteq> num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r | r. r \\<in> P}) (LLq p (Var yy)))\"\nbegin"], ["", "lemma LLq_num:\nassumes \"\\<phi> \\<in> fmla\" \"q \\<in> num\" \"Fvars \\<phi> = {zz}\" \"\\<forall> p \\<in> num. bprv (subst \\<phi> p zz)\"\nshows \"prv (all zz (imp (LLq (Var zz) q) \\<phi>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "using assms Lq_num"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  q \\<in> num\n  Fvars \\<phi> = {zz}\n  \\<forall>p\\<in>num. bprv (subst \\<phi> p zz)\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>\\<phi>\\<in>fmla.\n        \\<forall>q\\<in>num.\n           Fvars \\<phi> = {zz} \\<and>\n           (\\<forall>p\\<in>num. bprv (subst \\<phi> p zz)) \\<longrightarrow>\n           prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n\ngoal (1 subgoal):\n 1. prv (all zz (imp (LLq (Var zz) q) \\<phi>))", "unfolding LLq_def"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> fmla\n  q \\<in> num\n  Fvars \\<phi> = {zz}\n  \\<forall>p\\<in>num. bprv (subst \\<phi> p zz)\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>\\<phi>\\<in>fmla.\n        \\<forall>q\\<in>num.\n           Fvars \\<phi> = {zz} \\<and>\n           (\\<forall>p\\<in>num. bprv (subst \\<phi> p zz)) \\<longrightarrow>\n           prv (all zz (imp (LLq (Var zz) q) \\<phi>))\n\ngoal (1 subgoal):\n 1. prv (all zz (imp (psubst Lq [(Var zz, zz), (q, yy)]) \\<phi>))", "by auto"], ["", "lemma LLq_num2:\nassumes \"p \\<in> num\"\nshows \"\\<exists> P \\<subseteq> num. finite P \\<and> prv (dsj (sdsj {eql (Var yy) r | r. r \\<in> P}) (LLq p (Var yy)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "using assms Lq_num2"], ["proof (prove)\nusing this:\n  p \\<in> num\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>p\\<in>num.\n        \\<exists>P\\<subseteq>num.\n           finite P \\<and>\n           prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))", "unfolding LLq_def"], ["proof (prove)\nusing this:\n  p \\<in> num\n  let LLq = \\<lambda>t1 t2. psubst Lq [(t1, zz), (t2, yy)]\n  in \\<forall>p\\<in>num.\n        \\<exists>P\\<subseteq>num.\n           finite P \\<and>\n           prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P}) (LLq p (Var yy)))\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<subseteq>num.\n       finite P \\<and>\n       prv (dsj (sdsj {eql (Var yy) r |r. r \\<in> P})\n             (psubst Lq [(p, zz), (Var yy, yy)]))", "by auto"], ["", "end \\<comment> \\<open>context @{locale Deduct2_with_PseudoOrder}\\<close>"], ["", "section \\<open>Factoring In Explicit Proofs\\<close>"], ["", "locale Deduct_with_Proofs =\nDeduct_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv\n+\nfixes\n\"proof\" :: \"'proof set\"\nand\nprfOf :: \"'proof \\<Rightarrow> 'fmla \\<Rightarrow> bool\"\nassumes\n\\<comment> \\<open>Provability means there exists a proof (only needed for sentences):\\<close>\nprv_prfOf: \"\\<And> \\<phi>. \\<phi> \\<in> fmla \\<Longrightarrow> Fvars \\<phi> = {} \\<Longrightarrow> prv \\<phi> \\<longleftrightarrow> (\\<exists> prf \\<in> proof. prfOf prf \\<phi>)\""], ["", "(* We consider proof structure only for prv, not for bprv *)"], ["", "locale Deduct2_with_Proofs =\nDeduct2_with_False_Disj\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv bprv\n+\nDeduct_with_Proofs\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv\n  \"proof\" prfOf\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv bprv\nand \"proof\" :: \"'proof set\" and prfOf"], ["", "locale Deduct2_with_Proofs_PseudoOrder =\nDeduct2_with_Proofs\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv bprv\n  \"proof\" prfOf\n+\nDeduct2_with_PseudoOrder\n  var trm fmla Var FvarsT substT Fvars subst\n  eql cnj imp all exi\n  fls\n  dsj\n  num\n  prv bprv\n  Lq\nfor\nvar :: \"'var set\" and trm :: \"'trm set\" and fmla :: \"'fmla set\"\nand Var FvarsT substT Fvars subst\nand eql cnj imp all exi\nand fls\nand dsj\nand num\nand prv bprv\nand \"proof\" :: \"'proof set\" and prfOf\nand Lq"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}