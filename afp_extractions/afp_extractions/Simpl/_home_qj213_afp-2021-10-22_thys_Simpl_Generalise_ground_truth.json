{"file_name": "/home/qj213/afp-2021-10-22/thys/Simpl/Generalise.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simpl", "problem_names": ["lemma protectRefl: \"PROP Pure.prop (PROP C) \\<Longrightarrow> PROP Pure.prop (PROP C)\"", "lemma protectImp:\n assumes i: \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP Q)\"\n shows \"PROP Pure.prop (PROP Pure.prop P \\<Longrightarrow> PROP Pure.prop Q)\"", "lemma generaliseConj:\n  assumes i1: \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop Q))\"\n  assumes i2: \"PROP Pure.prop (PROP Pure.prop (Trueprop P') \\<Longrightarrow> PROP Pure.prop (Trueprop Q'))\"\n  shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (P \\<and> P')) \\<Longrightarrow> (PROP Pure.prop (Trueprop (Q \\<and> Q'))))\"", "lemma generaliseAll:\n assumes i: \"PROP Pure.prop (\\<And>s. PROP Pure.prop (Trueprop (P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (Q s)))\"\n shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (\\<forall>s. P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (\\<forall>s. Q s)))\"", "lemma generalise_all:\n assumes i: \"PROP Pure.prop (\\<And>s. PROP Pure.prop (PROP P s) \\<Longrightarrow> PROP Pure.prop (PROP Q s))\"\n shows \"PROP Pure.prop ((PROP Pure.prop (\\<And>s. PROP P s)) \\<Longrightarrow> (PROP Pure.prop (\\<And>s. PROP Q s)))\"", "lemma generaliseTrans:\n  assumes i1: \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP Q)\"\n  assumes i2: \"PROP Pure.prop (PROP Q \\<Longrightarrow> PROP R)\"\n  shows \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP R)\"", "lemma meta_spec:\n  assumes \"\\<And>x. PROP P x\"\n  shows \"PROP P x\"", "lemma meta_spec_protect:\n  assumes g: \"\\<And>x. PROP P x\"\n  shows \"PROP Pure.prop (PROP P x)\"", "lemma generaliseImp:\n  assumes i: \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop Q))\"\n  shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (X \\<longrightarrow> P)) \\<Longrightarrow> PROP Pure.prop (Trueprop (X \\<longrightarrow> Q)))\"", "lemma generaliseEx:\n assumes i: \"PROP Pure.prop (\\<And>s. PROP Pure.prop (Trueprop (P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (Q s)))\"\n shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (\\<exists>s. P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (\\<exists>s. Q s)))\"", "lemma generaliseRefl: \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop P))\"", "lemma generaliseRefl': \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP P)\"", "lemma generaliseAllShift:\n  assumes i: \"PROP Pure.prop (\\<And>s. P \\<Longrightarrow> Q s)\"\n  shows \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop (\\<forall>s. Q s)))\"", "lemma generalise_allShift:\n  assumes i: \"PROP Pure.prop (\\<And>s. PROP P \\<Longrightarrow> PROP Q s)\"\n  shows \"PROP Pure.prop (PROP Pure.prop (PROP P) \\<Longrightarrow> PROP Pure.prop (\\<And>s. PROP Q s))\"", "lemma generaliseImpl:\n  assumes i: \"PROP Pure.prop (PROP Pure.prop P \\<Longrightarrow> PROP Pure.prop Q)\"\n  shows \"PROP Pure.prop ((PROP Pure.prop (PROP X \\<Longrightarrow> PROP P)) \\<Longrightarrow> (PROP Pure.prop (PROP X \\<Longrightarrow> PROP Q)))\""], "translations": [["", "lemma protectRefl: \"PROP Pure.prop (PROP C) \\<Longrightarrow> PROP Pure.prop (PROP C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP C) \\<Longrightarrow> (PROP C)", "by (simp add: prop_def)"], ["", "lemma protectImp:\n assumes i: \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP Q)\"\n shows \"PROP Pure.prop (PROP Pure.prop P \\<Longrightarrow> PROP Pure.prop Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "assume P: \"PROP Pure.prop P\""], ["proof (state)\nthis:\n  PROP P\n\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "from i [unfolded prop_def, OF P [unfolded prop_def]]"], ["proof (chain)\npicking this:\n  PROP Q", "have \"PROP Pure.prop Q\""], ["proof (prove)\nusing this:\n  PROP Q\n\ngoal (1 subgoal):\n 1. PROP Q", "by (simp add: prop_def)"], ["proof (state)\nthis:\n  PROP Q\n\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "}"], ["proof (state)\nthis:\n  (PROP P) \\<Longrightarrow> (PROP Q)\n\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "note i' = this"], ["proof (state)\nthis:\n  (PROP P) \\<Longrightarrow> (PROP Q)\n\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "show \"PROP ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "apply (rule protectI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP Q)", "apply (rule i')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (PROP P)", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (PROP P) \\<Longrightarrow> (PROP Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generaliseConj:\n  assumes i1: \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop Q))\"\n  assumes i2: \"PROP Pure.prop (PROP Pure.prop (Trueprop P') \\<Longrightarrow> PROP Pure.prop (Trueprop Q'))\"\n  shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (P \\<and> P')) \\<Longrightarrow> (PROP Pure.prop (Trueprop (Q \\<and> Q'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<and> P') \\<Longrightarrow> (Q \\<and> Q')", "using i1 i2"], ["proof (prove)\nusing this:\n  (P) \\<Longrightarrow> (Q)\n  (P') \\<Longrightarrow> (Q')\n\ngoal (1 subgoal):\n 1. (P \\<and> P') \\<Longrightarrow> (Q \\<and> Q')", "by (auto simp add: prop_def)"], ["", "lemma generaliseAll:\n assumes i: \"PROP Pure.prop (\\<And>s. PROP Pure.prop (Trueprop (P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (Q s)))\"\n shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (\\<forall>s. P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (\\<forall>s. Q s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s. P s) \\<Longrightarrow> (\\<forall>s. Q s)", "using i"], ["proof (prove)\nusing this:\n  \\<And>s. (P s) \\<Longrightarrow> (Q s)\n\ngoal (1 subgoal):\n 1. (\\<forall>s. P s) \\<Longrightarrow> (\\<forall>s. Q s)", "by (auto simp add: prop_def)"], ["", "lemma generalise_all:\n assumes i: \"PROP Pure.prop (\\<And>s. PROP Pure.prop (PROP P s) \\<Longrightarrow> PROP Pure.prop (PROP Q s))\"\n shows \"PROP Pure.prop ((PROP Pure.prop (\\<And>s. PROP P s)) \\<Longrightarrow> (PROP Pure.prop (\\<And>s. PROP Q s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. PROP P s) \\<Longrightarrow> (\\<And>s. PROP Q s)", "using i"], ["proof (prove)\nusing this:\n  \\<And>s. (PROP P s) \\<Longrightarrow> (PROP Q s)\n\ngoal (1 subgoal):\n 1. (\\<And>s. PROP P s) \\<Longrightarrow> (\\<And>s. PROP Q s)", "proof (unfold prop_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. PROP P s \\<Longrightarrow> PROP Q s;\n     Pure.all P\\<rbrakk>\n    \\<Longrightarrow> Pure.all Q", "assume i1: \"\\<And>s. (PROP P s) \\<Longrightarrow> (PROP Q s)\""], ["proof (state)\nthis:\n  PROP P ?s \\<Longrightarrow> PROP Q ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. PROP P s \\<Longrightarrow> PROP Q s;\n     Pure.all P\\<rbrakk>\n    \\<Longrightarrow> Pure.all Q", "assume i2: \"\\<And>s. PROP P s\""], ["proof (state)\nthis:\n  PROP P ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. PROP P s \\<Longrightarrow> PROP Q s;\n     Pure.all P\\<rbrakk>\n    \\<Longrightarrow> Pure.all Q", "show \"\\<And>s. PROP Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. PROP Q s", "by (rule i1) (rule i2)"], ["proof (state)\nthis:\n  PROP Q ?s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generaliseTrans:\n  assumes i1: \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP Q)\"\n  assumes i2: \"PROP Pure.prop (PROP Q \\<Longrightarrow> PROP R)\"\n  shows \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROP P \\<Longrightarrow> PROP R", "using i1 i2"], ["proof (prove)\nusing this:\n  PROP P \\<Longrightarrow> PROP Q\n  PROP Q \\<Longrightarrow> PROP R\n\ngoal (1 subgoal):\n 1. PROP P \\<Longrightarrow> PROP R", "proof (unfold prop_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP Q \\<Longrightarrow> PROP R; PROP P\\<rbrakk>\n    \\<Longrightarrow> PROP R", "assume P_Q: \"PROP P \\<Longrightarrow> PROP Q\""], ["proof (state)\nthis:\n  PROP P \\<Longrightarrow> PROP Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP Q \\<Longrightarrow> PROP R; PROP P\\<rbrakk>\n    \\<Longrightarrow> PROP R", "assume Q_R: \"PROP Q \\<Longrightarrow> PROP R\""], ["proof (state)\nthis:\n  PROP Q \\<Longrightarrow> PROP R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP Q \\<Longrightarrow> PROP R; PROP P\\<rbrakk>\n    \\<Longrightarrow> PROP R", "assume P: \"PROP P\""], ["proof (state)\nthis:\n  PROP P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP Q \\<Longrightarrow> PROP R; PROP P\\<rbrakk>\n    \\<Longrightarrow> PROP R", "show \"PROP R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROP R", "by (rule Q_R [OF P_Q [OF P]])"], ["proof (state)\nthis:\n  PROP R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma meta_spec:\n  assumes \"\\<And>x. PROP P x\"\n  shows \"PROP P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROP P x", "by fact"], ["", "lemma meta_spec_protect:\n  assumes g: \"\\<And>x. PROP P x\"\n  shows \"PROP Pure.prop (PROP P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROP P x", "using g"], ["proof (prove)\nusing this:\n  PROP P ?x\n\ngoal (1 subgoal):\n 1. PROP P x", "by (auto simp add: prop_def)"], ["", "lemma generaliseImp:\n  assumes i: \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop Q))\"\n  shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (X \\<longrightarrow> P)) \\<Longrightarrow> PROP Pure.prop (Trueprop (X \\<longrightarrow> Q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X \\<longrightarrow> P) \\<Longrightarrow> (X \\<longrightarrow> Q)", "using i"], ["proof (prove)\nusing this:\n  (P) \\<Longrightarrow> (Q)\n\ngoal (1 subgoal):\n 1. (X \\<longrightarrow> P) \\<Longrightarrow> (X \\<longrightarrow> Q)", "by (auto simp add: prop_def)"], ["", "lemma generaliseEx:\n assumes i: \"PROP Pure.prop (\\<And>s. PROP Pure.prop (Trueprop (P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (Q s)))\"\n shows \"PROP Pure.prop (PROP Pure.prop (Trueprop (\\<exists>s. P s)) \\<Longrightarrow> PROP Pure.prop (Trueprop (\\<exists>s. Q s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>s. P s) \\<Longrightarrow> (\\<exists>s. Q s)", "using i"], ["proof (prove)\nusing this:\n  \\<And>s. (P s) \\<Longrightarrow> (Q s)\n\ngoal (1 subgoal):\n 1. (\\<exists>s. P s) \\<Longrightarrow> (\\<exists>s. Q s)", "by (auto simp add: prop_def)"], ["", "lemma generaliseRefl: \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P) \\<Longrightarrow> (P)", "by (auto simp add: prop_def)"], ["", "lemma generaliseRefl': \"PROP Pure.prop (PROP P \\<Longrightarrow> PROP P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROP P \\<Longrightarrow> PROP P", "by (auto simp add: prop_def)"], ["", "lemma generaliseAllShift:\n  assumes i: \"PROP Pure.prop (\\<And>s. P \\<Longrightarrow> Q s)\"\n  shows \"PROP Pure.prop (PROP Pure.prop (Trueprop P) \\<Longrightarrow> PROP Pure.prop (Trueprop (\\<forall>s. Q s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P) \\<Longrightarrow> (\\<forall>s. Q s)", "using i"], ["proof (prove)\nusing this:\n  \\<And>s. P \\<Longrightarrow> Q s\n\ngoal (1 subgoal):\n 1. (P) \\<Longrightarrow> (\\<forall>s. Q s)", "by (auto simp add: prop_def)"], ["", "lemma generalise_allShift:\n  assumes i: \"PROP Pure.prop (\\<And>s. PROP P \\<Longrightarrow> PROP Q s)\"\n  shows \"PROP Pure.prop (PROP Pure.prop (PROP P) \\<Longrightarrow> PROP Pure.prop (\\<And>s. PROP Q s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (\\<And>s. PROP Q s)", "using i"], ["proof (prove)\nusing this:\n  \\<And>s. PROP P \\<Longrightarrow> PROP Q s\n\ngoal (1 subgoal):\n 1. (PROP P) \\<Longrightarrow> (\\<And>s. PROP Q s)", "proof (unfold prop_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. PROP P \\<Longrightarrow> PROP Q s; PROP P\\<rbrakk>\n    \\<Longrightarrow> Pure.all Q", "assume P_Q: \"\\<And>s. PROP P \\<Longrightarrow> PROP Q s\""], ["proof (state)\nthis:\n  PROP P \\<Longrightarrow> PROP Q ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. PROP P \\<Longrightarrow> PROP Q s; PROP P\\<rbrakk>\n    \\<Longrightarrow> Pure.all Q", "assume P: \"PROP P\""], ["proof (state)\nthis:\n  PROP P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. PROP P \\<Longrightarrow> PROP Q s; PROP P\\<rbrakk>\n    \\<Longrightarrow> Pure.all Q", "show \"\\<And>s. PROP Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. PROP Q s", "by (rule P_Q [OF P])"], ["proof (state)\nthis:\n  PROP Q ?s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generaliseImpl:\n  assumes i: \"PROP Pure.prop (PROP Pure.prop P \\<Longrightarrow> PROP Pure.prop Q)\"\n  shows \"PROP Pure.prop ((PROP Pure.prop (PROP X \\<Longrightarrow> PROP P)) \\<Longrightarrow> (PROP Pure.prop (PROP X \\<Longrightarrow> PROP Q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PROP X \\<Longrightarrow> PROP P) \\<Longrightarrow>\n    (PROP X \\<Longrightarrow> PROP Q)", "using i"], ["proof (prove)\nusing this:\n  (PROP P) \\<Longrightarrow> (PROP Q)\n\ngoal (1 subgoal):\n 1. (PROP X \\<Longrightarrow> PROP P) \\<Longrightarrow>\n    (PROP X \\<Longrightarrow> PROP Q)", "proof (unfold prop_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP X \\<Longrightarrow> PROP P; PROP X\\<rbrakk>\n    \\<Longrightarrow> PROP Q", "assume i1: \"PROP P \\<Longrightarrow> PROP Q\""], ["proof (state)\nthis:\n  PROP P \\<Longrightarrow> PROP Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP X \\<Longrightarrow> PROP P; PROP X\\<rbrakk>\n    \\<Longrightarrow> PROP Q", "assume i2: \"PROP X \\<Longrightarrow> PROP P\""], ["proof (state)\nthis:\n  PROP X \\<Longrightarrow> PROP P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP X \\<Longrightarrow> PROP P; PROP X\\<rbrakk>\n    \\<Longrightarrow> PROP Q", "assume X: \"PROP X\""], ["proof (state)\nthis:\n  PROP X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROP P \\<Longrightarrow> PROP Q;\n     PROP X \\<Longrightarrow> PROP P; PROP X\\<rbrakk>\n    \\<Longrightarrow> PROP Q", "show \"PROP Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROP Q", "by (rule i1 [OF i2 [OF X]])"], ["proof (state)\nthis:\n  PROP Q\n\ngoal:\nNo subgoals!", "qed"], ["", "ML_file \\<open>generalise_state.ML\\<close>"], ["", "end"]]}