{"file_name": "/home/qj213/afp-2021-10-22/thys/Simpl/AlternativeSmallStep.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simpl", "problem_names": ["lemmas step_induct = step.induct [of _ \"(c,css,s)\" \"(c',css',s')\", split_format (complete),\ncase_names\nSkip Guard GuardFault FaultProp FaultPropBlock AbruptProp ExitBlockNormal ExitBlockAbrupt\nBasic Spec SpecStuck Seq CondTrue CondFalse WhileTrue WhileFalse Call CallUndefined\nStuckProp StuckPropBlock DynCom Throw Catch, induct set]", "lemma Fault_app_steps: \"\\<Gamma>\\<turnstile>(cs@xs,css,Fault f) \\<rightarrow>\\<^sup>* (xs,css,Fault f)\"", "lemma Stuck_app_steps: \"\\<Gamma>\\<turnstile>(cs@xs,css,Stuck) \\<rightarrow>\\<^sup>* (xs,css,Stuck)\"", "lemma app_step:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"css=css' \\<Longrightarrow> \\<Gamma>\\<turnstile>(cs@xs,css,s) \\<rightarrow> (cs'@xs,css',t)\"", "lemma app_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>(cs,css@xs,s) \\<rightarrow> (cs',css'@xs,t)\"", "lemma app_css_steps:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>+ (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>(cs,css@xs,s) \\<rightarrow>\\<^sup>+ (cs',css'@xs,t)\"", "lemma step_Cons':\n  assumes step: \"\\<Gamma>\\<turnstile>(ccs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows\n  \"\\<And>c cs. ccs=c#cs \\<Longrightarrow> \\<exists>css''. css'=css''@css \\<and>\n      (if css''=[] then \\<exists>p. cs'=p@cs\n       else (\\<exists>pnorm pabr. css''=[(pnorm@cs,pabr@cs)]))\"", "lemma step_Cons:\n  assumes step: \"\\<Gamma>\\<turnstile>(c#cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"\\<exists>pcss. css'=pcss@css \\<and>\n         (if pcss=[] then \\<exists>ps. cs'=ps@cs\n          else (\\<exists>pcs_normal pcs_abrupt. pcss=[(pcs_normal@cs,pcs_abrupt@cs)]))\"", "lemma step_Nil':\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,asscss,s) \\<rightarrow> (cs',css',t)\"\n  shows\n  \"\\<And>ass. \\<lbrakk>cs=[]; asscss=ass@css; ass\\<noteq>Nil\\<rbrakk> \\<Longrightarrow>\n          css'=tl ass@css \\<and>\n          (case s of\n             Abrupt s' \\<Rightarrow> cs'=snd (hd ass) \\<and> t=Normal s'\n           |  _ \\<Rightarrow> cs'=fst (hd ass) \\<and> t=s)\"", "lemma step_Nil:\n  assumes step: \"\\<Gamma>\\<turnstile>([],ass@css,s) \\<rightarrow> (cs',css',t)\"\n  assumes ass_not_Nil: \"ass\\<noteq>[]\"\n  shows \"css'=tl ass@css \\<and>\n          (case s of\n             Abrupt s' \\<Rightarrow> cs'=snd (hd ass) \\<and> t=Normal s'\n           |  _ \\<Rightarrow> cs'=fst (hd ass) \\<and> t=s)\"", "lemma step_Nil'':\n  assumes step: \"\\<Gamma>\\<turnstile>([],(pcs_normal,pcs_abrupt)#pcss@css,s) \\<rightarrow> (cs',pcss@css,t)\"\n  shows \"(case s of\n             Abrupt s' \\<Rightarrow> cs'=pcs_abrupt \\<and> t=Normal s'\n           |  _ \\<Rightarrow> cs'=pcs_normal \\<and> t=s)\"", "lemma drop_suffix_css_step':\nassumes step: \"\\<Gamma>\\<turnstile>(cs,cssxs,s) \\<rightarrow> (cs',css'xs,t)\"\nshows \"\\<And>css css' xs. \\<lbrakk>cssxs = css@xs; css'xs=css'@xs\\<rbrakk>\n     \\<Longrightarrow> \\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"", "lemma drop_suffix_css_step:\nassumes step: \"\\<Gamma>\\<turnstile>(cs,pcss@css,s) \\<rightarrow> (cs',pcss'@css,t)\"\nshows \"\\<Gamma>\\<turnstile>(cs,pcss,s) \\<rightarrow> (cs',pcss',t)\"", "lemma drop_suffix_hd_css_step':\n  assumes step: \"\\<Gamma>\\<turnstile> (pcs,css,s) \\<rightarrow> (cs',css'css,t)\"\n  shows \"\\<And>p ps cs pnorm pabr. \\<lbrakk>pcs=p#ps@cs; css'css=(pnorm@cs,pabr@cs)#css\\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>\\<turnstile> (p#ps,css,s) \\<rightarrow> (cs',(pnorm,pabr)#css,t)\"", "lemma drop_suffix_hd_css_step'':\n  assumes step: \"\\<Gamma>\\<turnstile> (p#ps@cs,css,s) \\<rightarrow> (cs',(pnorm@cs,pabr@cs)#css,t)\"\n  shows  \"\\<Gamma>\\<turnstile> (p#ps,css,s) \\<rightarrow> (cs',(pnorm,pabr)#css,t)\"", "lemma drop_suffix_hd_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile> (p#ps@cs,css,s) \\<rightarrow> (cs',[(pnorm@ps@cs,pabr@ps@cs)]@css,t)\"\n  shows  \"\\<Gamma>\\<turnstile> (p#ps,css,s) \\<rightarrow> (cs',[(pnorm@ps,pabr@ps)]@css,t)\"", "lemma drop_suffix':\n  assumes step: \"\\<Gamma>\\<turnstile>(csxs,css,s) \\<rightarrow> (cs'xs,css',t)\"\n  shows \"\\<And>xs cs cs'. \\<lbrakk>css=css'; csxs=cs@xs; cs'xs = cs'@xs; cs\\<noteq>[] \\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css,t)\"", "lemma drop_suffix:\n  assumes step: \"\\<Gamma>\\<turnstile>(c#cs@xs,css,s) \\<rightarrow> (cs'@xs,css,t)\"\n  shows \"\\<Gamma>\\<turnstile>(c#cs,css,s) \\<rightarrow> (cs',css,t)\"", "lemma drop_suffix_same_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs@xs,css,s) \\<rightarrow> (cs'@xs,css,t)\"\n  assumes not_Nil: \"cs\\<noteq>[]\"\n  shows \"\\<Gamma>\\<turnstile>(cs,xss,s) \\<rightarrow> (cs',xss,t)\"", "lemma Cons_change_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile> (cs,css,s) \\<rightarrow> (cs',css'@css,t)\"\n  shows \"\\<Gamma>\\<turnstile> (cs,xss,s) \\<rightarrow> (cs',css'@xss,t)\"", "lemma Nil_change_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile>([],ass@css,s) \\<rightarrow> (cs',ass'@css,t)\"\n  assumes ass_not_Nil: \"ass\\<noteq>[]\"\n  shows \"\\<Gamma>\\<turnstile>([],ass@xss,s) \\<rightarrow> (cs',ass'@xss,t)\"", "lemma exec_impl_steps:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<And>cs css. \\<Gamma>\\<turnstile>(c#cs,css,s) \\<rightarrow>\\<^sup>* (cs,css,t)\"", "lemma execs_Fault_end:\n  assumes execs: \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\" shows \"s=Fault f\\<Longrightarrow> t=Fault f\"", "lemma execs_Stuck_end:\n  assumes execs: \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\" shows \"s=Stuck \\<Longrightarrow> t=Stuck\"", "theorem steps_impl_execs:\n  assumes steps: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* ([],[],t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\"", "theorem steps_impl_exec:\n  assumes steps: \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* ([],[],t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"", "lemma not_infI: \"\\<lbrakk>\\<And>f. \\<lbrakk>f 0 = (cs,css,s); \\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\\<rbrakk> \\<Longrightarrow> False\\<rbrakk>\n                \\<Longrightarrow> \\<not>inf \\<Gamma> cs css s\"", "lemma terminatess_Fault: \"\\<And>cs. \\<Gamma>\\<turnstile>cs,css\\<Down>Fault f\"", "lemma terminatess_Stuck: \"\\<And>cs. \\<Gamma>\\<turnstile>cs,css\\<Down>Stuck\"", "lemma Basic_terminates: \"\\<Gamma>\\<turnstile>Basic f \\<down> t\"", "lemma step_preserves_terminations:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>cs,css\\<Down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>cs',css'\\<Down>t\"", "lemma steps_preserves_terminations:\n  assumes steps: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>cs,css\\<Down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>cs',css'\\<Down>t\"", "theorem steps_preserves_termination:\n  assumes steps: \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* (c'#cs',css',t)\"\n  assumes term_c: \"\\<Gamma>\\<turnstile>c\\<down>s\"\n  shows \"\\<Gamma>\\<turnstile>c'\\<down>t\"", "lemma renumber':\n  assumes f: \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\"\n  assumes a_b: \"(a,b) \\<in> r\\<^sup>*\"\n  shows \"b = f 0 \\<Longrightarrow> (\\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r))\"", "lemma renumber:\n \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\n \\<Longrightarrow> \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r)\"", "lemma not_inf_Fault':\n  assumes enum_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\"\n  shows \"\\<And>k cs. f k = (cs,css,Fault m) \\<Longrightarrow> False\"", "lemma not_inf_Fault:\n  \"\\<not> inf \\<Gamma> cs css (Fault m)\"", "lemma not_inf_Stuck':\n  assumes enum_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\"\n  shows \"\\<And>k cs. f k = (cs,css,Stuck) \\<Longrightarrow> False\"", "lemma not_inf_Stuck:\n  \"\\<not> inf \\<Gamma> cs css Stuck\"", "lemma last_butlast_app:\nassumes butlast: \"butlast as = xs @ butlast bs\"\nassumes not_Nil: \"bs \\<noteq> []\" \"as \\<noteq> []\"\nassumes last: \"fst (last as) = fst (last bs)\" \"snd (last as) = snd (last bs)\"\nshows \"as = xs @ bs\"", "lemma last_butlast_tl:\nassumes butlast: \"butlast bs = x # butlast as\"\nassumes not_Nil: \"bs \\<noteq> []\" \"as \\<noteq> []\"\nassumes last: \"fst (last as) = fst (last bs)\" \"snd (last as) = snd (last bs)\"\nshows \"as = tl bs\"", "lemma (in inf) steps_hd_drop_suffix:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes not_finished: \"\\<forall>i < k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\nassumes simul: \"\\<forall>i\\<le>k.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\"\ndefines \"p\\<equiv>\\<lambda>i. (pcs i, pcss i, S (f i))\"\nshows \"\\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\"", "lemma k_steps_to_rtrancl:\n  assumes steps: \"\\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\"\n  shows \"\\<Gamma>\\<turnstile>p 0\\<rightarrow>\\<^sup>* p k\"", "lemma (in inf) steps_hd_drop_suffix_finite:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes not_finished: \"\\<forall>i < k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\nassumes simul: \"\\<forall>i\\<le>k.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\"\nshows \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* (pcs k, pcss k, S (f k))\"", "lemma (in inf) steps_hd_drop_suffix_infinite:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes not_finished: \"\\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\n(*assumes not_finished: \"\\<forall>i. \\<not> (pcs i = [] \\<and> pcss i = [])\"*)\nassumes simul: \"\\<forall>i.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\"\ndefines \"p\\<equiv>\\<lambda>i. (pcs i, pcss i, S (f i))\"\nshows \"\\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\"", "lemma (in inf) steps_hd_progress:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes c_unfinished: \"\\<forall>i < k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\nshows \"\\<forall>i \\<le> k. (\\<exists>pcs pcss.\n          (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css))\"", "lemma (in inf) inf_progress:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes unfinished: \"\\<forall>i. \\<not> ((CS (f i) = cs) \\<and> (CSS (f i) = css))\"\nshows \"\\<exists>pcs pcss.\n          (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css)\"", "lemma skolemize1: \"\\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow> \\<exists>f.\\<forall>x. P x \\<longrightarrow> Q x (f x)\"", "lemma skolemize2: \"\\<forall>x. P x \\<longrightarrow> (\\<exists>y z. Q x y z) \\<Longrightarrow> \\<exists>f g.\\<forall>x. P x \\<longrightarrow> Q x (f x) (g x)\"", "lemma skolemize2': \"\\<forall>x.\\<exists>y z. P x y z \\<Longrightarrow> \\<exists>f g.\\<forall>x. P x (f x) (g x)\"", "theorem (in inf) inf_cases:\n  fixes c::\"('s,'p,'f) com\"\n  assumes inf: \"inf \\<Gamma> (c#cs) css s\"\n  shows \"inf \\<Gamma> [c] [] s \\<or> (\\<exists>t. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and> inf \\<Gamma> cs css t)\"", "lemma infE [consumes 1]:\n  assumes inf: \"inf \\<Gamma> (c#cs) css s\"\n  assumes cases: \"inf \\<Gamma> [c] [] s \\<Longrightarrow> P\"\n                 \"\\<And>t. \\<lbrakk>\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t; inf \\<Gamma> cs css t\\<rbrakk> \\<Longrightarrow> P\"\n  shows P", "lemma inf_Seq:\n  \"inf \\<Gamma> (Seq c1 c2#cs) css (Normal s) = inf \\<Gamma> (c1#c2#cs) css (Normal s)\"", "lemma inf_WhileTrue:\n  assumes b: \"s \\<in> b\"\n  shows \"inf \\<Gamma> (While b c#cs) css (Normal s) =\n          inf \\<Gamma> (c#While b c#cs) css (Normal s)\"", "lemma inf_Catch:\n\"inf \\<Gamma> (Catch c1 c2#cs) css (Normal s) = inf \\<Gamma> [c1] ((cs,c2#cs)#css) (Normal s)\"", "theorem terminates_impl_not_inf:\n  assumes termi: \"\\<Gamma>\\<turnstile>c \\<down> s\"\n  shows \"\\<not>inf \\<Gamma> [c] [] s\"", "lemma terminatess_impl_not_inf:\n assumes termi: \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\"\n  shows \"\\<not>inf \\<Gamma> cs css s\"", "lemma lem:\n  \"\\<forall>y. r\\<^sup>+\\<^sup>+ a y \\<longrightarrow> P a \\<longrightarrow> P y\n   \\<Longrightarrow> ((b,a) \\<in> {(y,x). P x \\<and> r x y}\\<^sup>+) = ((b,a) \\<in> {(y,x). P x \\<and> r\\<^sup>+\\<^sup>+ x y})\"", "theorem wf_termi_call_steps: \"wf (termi_call_steps \\<Gamma>)\"", "theorem \"wf (termi_call_steps \\<Gamma>)\"", "lemma not_inf_implies_wf: assumes not_inf: \"\\<not> inf \\<Gamma> cs css s\"\n  shows \"wf {(c2,c1). \\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma> \\<turnstile> c1 \\<rightarrow> c2}\"", "lemma wf_implies_termi_reach:\nassumes wf: \"wf {(c2,c1). \\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma> \\<turnstile> c1 \\<rightarrow> c2}\"\nshows \"\\<And>cs1 css1 s1. \\<lbrakk>\\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* c1;  c1=(cs1,css1,s1)\\<rbrakk>\\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1\\<Down>s1\"", "lemma not_inf_impl_terminatess:\n  assumes not_inf: \"\\<not> inf \\<Gamma> cs css s\"\n  shows \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\"", "lemma not_inf_impl_terminates:\n  assumes not_inf: \"\\<not> inf \\<Gamma> [c] [] s\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s\"", "theorem terminatess_iff_not_inf:\n  \"\\<Gamma>\\<turnstile>cs,css\\<Down>s = (\\<not> inf \\<Gamma> cs css s)\"", "lemma ConseqMGT:\n  assumes modif: \"\\<forall>Z::'a. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P' Z::'a assn) c (Q' Z),(A' Z)\"\n  assumes impl: \"\\<And>s. s \\<in> P \\<Longrightarrow> s \\<in> P' s \\<and> (\\<forall>t. t \\<in> Q' s \\<longrightarrow> t \\<in> Q) \\<and>\n                                            (\\<forall>t. t \\<in> A' s \\<longrightarrow> t \\<in> A)\"\n  shows \"\\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"", "lemma conseq_extract_state_indep_prop:\n  assumes state_indep_prop:\"\\<forall>s \\<in> P. R\"\n  assumes to_show: \"R \\<Longrightarrow> \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"", "lemma Call_lemma':\n assumes Call_hyp:\n \"\\<forall>q\\<in>dom \\<Gamma>. \\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>{s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                       \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"\n shows \"\\<And>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n      {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and> \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#cs,css,Normal s))}\n              c\n      {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n      {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"", "lemma Call_lemma:\n assumes\n Call: \"\\<forall>q \\<in> dom \\<Gamma>. \\<forall>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n                 {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"\n shows \"\\<And>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n              ({\\<sigma>} \\<inter> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                                 \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal s})\n                 the (\\<Gamma> p)\n              {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"", "lemma Call_lemma_switch_Call_body:\n assumes\n call: \"\\<forall>q \\<in> dom \\<Gamma>. \\<forall>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n                 {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"\n assumes p_defined: \"p \\<in> dom \\<Gamma>\"\n shows \"\\<And>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n              ({\\<sigma>} \\<inter> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                                 \\<Gamma>\\<turnstile>Call p\\<down>Normal s})\n                 the (\\<Gamma> p)\n              {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"", "lemma MGT_Call:\n\"\\<forall>p \\<in> dom \\<Gamma>. \\<forall>Z.\n  \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n             \\<Gamma>\\<turnstile>(Call p)\\<down>Normal s}\n           (Call p)\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"", "lemma CollInt_iff: \"{s. P s} \\<inter> {s. Q s} = {s. P s \\<and> Q s}\"", "lemma image_Un_conv: \"f ` (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z. {x p Z}) =  (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z. {f (x p Z)})\"", "lemma\n\"\\<forall>p \\<in> dom \\<Gamma>. \\<forall>Z.\n  \\<Gamma>,{} \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n             \\<Gamma>\\<turnstile>(Call p)\\<down>Normal s}\n           (Call p)\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], "translations": [["", "lemmas step_induct = step.induct [of _ \"(c,css,s)\" \"(c',css',s')\", split_format (complete),\ncase_names\nSkip Guard GuardFault FaultProp FaultPropBlock AbruptProp ExitBlockNormal ExitBlockAbrupt\nBasic Spec SpecStuck Seq CondTrue CondFalse WhileTrue WhileFalse Call CallUndefined\nStuckProp StuckPropBlock DynCom Throw Catch, induct set]"], ["", "inductive_cases step_elim_cases [cases set]:\n \"\\<Gamma>\\<turnstile>(c#cs,css,Fault f) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],css,Fault f) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(c#cs,css,Stuck) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],css,Stuck) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(c#cs,css,Abrupt s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],css,Abrupt s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Skip#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Guard f g c#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Basic f#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Spec r#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Seq c1 c2#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Cond b c1 c2#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(While b c#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Call p#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(DynCom c#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Throw#cs,css,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Catch c1 c2#cs,css,s) \\<rightarrow> u\""], ["", "inductive_cases step_Normal_elim_cases [cases set]:\n \"\\<Gamma>\\<turnstile>(c#cs,css,Fault f) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],css,Fault f) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(c#cs,css,Stuck) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],css,Stuck) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],(nrms,abrs)#css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>([],(nrms,abrs)#css,Abrupt s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Skip#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Guard f g c#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Basic f#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Spec r#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Seq c1 c2#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Cond b c1 c2#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(While b c#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Call p#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(DynCom c#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Throw#cs,css,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Catch c1 c2#cs,css,Normal s) \\<rightarrow> u\""], ["", "abbreviation\n \"step_rtrancl\" :: \"[('s,'p,'f) body,('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>\\<^sup>*/ _)\" [81,81,81] 100)\n  where\n  \"\\<Gamma>\\<turnstile>cs0 \\<rightarrow>\\<^sup>* cs1     == (step \\<Gamma>)\\<^sup>*\\<^sup>* cs0 cs1\""], ["", "abbreviation\n\n \"step_trancl\" :: \"[('s,'p,'f) body,('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>\\<^sup>+/ _)\" [81,81,81] 100)\n  where\n  \"\\<Gamma>\\<turnstile>cs0 \\<rightarrow>\\<^sup>+ cs1     == (step \\<Gamma>)\\<^sup>+\\<^sup>+ cs0 cs1\""], ["", "subsubsection \\<open>Structural Properties of Small Step Computations\\<close>"], ["", "lemma Fault_app_steps: \"\\<Gamma>\\<turnstile>(cs@xs,css,Fault f) \\<rightarrow>\\<^sup>* (xs,css,Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> ([] @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> ([] @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([] @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([] @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f)", "case (Cons c cs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f)", "have \"\\<Gamma>\\<turnstile>(c#cs@xs, css, Fault f) \\<rightarrow>\\<^sup>* (xs, css, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "have \"\\<Gamma>\\<turnstile>(c#cs@xs, css, Fault f) \\<rightarrow> (cs@xs, css, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\n                         (cs @ xs, css, Fault f)", "by (rule step.FaultProp)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\n                       (cs @ xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\n                       (cs @ xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "have \"\\<Gamma>\\<turnstile>(cs@xs, css, Fault f) \\<rightarrow>\\<^sup>* (xs, css, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "by (rule Cons.hyps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Fault f) \\<rightarrow>\\<^sup>*\n                            (xs, css, Fault f)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ((c # cs) @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                         (xs, css, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ((c # cs) @ xs, css, Fault f) \\<rightarrow>\\<^sup>*\n                       (xs, css, Fault f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Stuck_app_steps: \"\\<Gamma>\\<turnstile>(cs@xs,css,Stuck) \\<rightarrow>\\<^sup>* (xs,css,Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> ([] @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> ([] @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([] @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([] @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck)", "case (Cons c cs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck)", "have \"\\<Gamma>\\<turnstile>(c#cs@xs, css, Stuck) \\<rightarrow>\\<^sup>* (xs, css, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "have \"\\<Gamma>\\<turnstile>(c#cs@xs, css, Stuck) \\<rightarrow> (cs@xs, css, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\n                         (cs @ xs, css, Stuck)", "by (rule step.StuckProp)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\n                       (cs @ xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\n                       (cs @ xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "have \"\\<Gamma>\\<turnstile>(cs@xs, css, Stuck) \\<rightarrow>\\<^sup>* (xs, css, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "by (rule Cons.hyps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile> (cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((a # cs) @ xs, css,\n                             Stuck) \\<rightarrow>\\<^sup>*\n                            (xs, css, Stuck)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c # cs @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ((c # cs) @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (xs, css, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ((c # cs) @ xs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (xs, css, Stuck)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We can only append commands inside a block, if execution does not\n        enter or exit a block.\n\\<close>"], ["", "lemma app_step:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"css=css' \\<Longrightarrow> \\<Gamma>\\<turnstile>(cs@xs,css,s) \\<rightarrow> (cs'@xs,css',t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. css = css' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (cs @ xs, css, s) \\<rightarrow> (cs' @ xs, css', t)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. css = css' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (cs @ xs, css, s) \\<rightarrow> (cs' @ xs, css', t)", "apply induct"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>cs css s.\n       css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((Skip # cs) @ xs, css, Normal s) \\<rightarrow>\n                            (cs @ xs, css, Normal s)\n 2. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<in> g; css = css\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ((Guard f g c # cs) @ xs, css,\n         Normal s) \\<rightarrow>\n        ((c # cs) @ xs, css, Normal s)\n 3. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g; css = css\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ((Guard f g c # cs) @ xs, css,\n         Normal s) \\<rightarrow>\n        (cs @ xs, css, Fault f)\n 4. \\<And>c cs css f.\n       css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((c # cs) @ xs, css, Fault f) \\<rightarrow>\n                            (cs @ xs, css, Fault f)\n 5. \\<And>nrms abrs css f.\n       (nrms, abrs) # css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ([] @ xs, (nrms, abrs) # css,\n                             Fault f) \\<rightarrow>\n                            (nrms @ xs, css, Fault f)\n 6. \\<And>c cs css s.\n       css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((c # cs) @ xs, css, Abrupt s) \\<rightarrow>\n                            (cs @ xs, css, Abrupt s)\n 7. \\<And>nrms abrs css s.\n       (nrms, abrs) # css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ([] @ xs, (nrms, abrs) # css,\n                             Normal s) \\<rightarrow>\n                            (nrms @ xs, css, Normal s)\n 8. \\<And>nrms abrs css s.\n       (nrms, abrs) # css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ([] @ xs, (nrms, abrs) # css,\n                             Abrupt s) \\<rightarrow>\n                            (abrs @ xs, css, Normal s)\n 9. \\<And>f cs css s.\n       css = css \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> ((Basic f # cs) @ xs, css,\n                             Normal s) \\<rightarrow>\n                            (cs @ xs, css, Normal (f s))\n 10. \\<And>s t r cs css.\n        \\<lbrakk>(s, t) \\<in> r; css = css\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> ((Spec r # cs) @ xs, css,\n          Normal s) \\<rightarrow>\n         (cs @ xs, css, Normal t)\nA total of 23 subgoals...", "apply (simp_all del: fun_upd_apply,(blast intro: step.intros)+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>We can append whole blocks, without interfering with the actual\n        block. Outer blocks do not influence execution of\n        inner blocks.\\<close>"], ["", "lemma app_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>(cs,css@xs,s) \\<rightarrow> (cs',css'@xs,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css @ xs, s) \\<rightarrow> (cs', css' @ xs, t)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css @ xs, s) \\<rightarrow> (cs', css' @ xs, t)", "apply induct"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>cs css s.\n       \\<Gamma>\\<turnstile> (Skip # cs, css @ xs, Normal s) \\<rightarrow>\n                            (cs, css @ xs, Normal s)\n 2. \\<And>s g f c cs css.\n       s \\<in> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css @ xs,\n                             Normal s) \\<rightarrow>\n                            (c # cs, css @ xs, Normal s)\n 3. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css @ xs,\n                             Normal s) \\<rightarrow>\n                            (cs, css @ xs, Fault f)\n 4. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile> (c # cs, css @ xs, Fault f) \\<rightarrow>\n                            (cs, css @ xs, Fault f)\n 5. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile> ([], ((nrms, abrs) # css) @ xs,\n                             Fault f) \\<rightarrow>\n                            (nrms, css @ xs, Fault f)\n 6. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile> (c # cs, css @ xs, Abrupt s) \\<rightarrow>\n                            (cs, css @ xs, Abrupt s)\n 7. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile> ([], ((nrms, abrs) # css) @ xs,\n                             Normal s) \\<rightarrow>\n                            (nrms, css @ xs, Normal s)\n 8. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile> ([], ((nrms, abrs) # css) @ xs,\n                             Abrupt s) \\<rightarrow>\n                            (abrs, css @ xs, Normal s)\n 9. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css @ xs, Normal s) \\<rightarrow>\n                            (cs, css @ xs, Normal (f s))\n 10. \\<And>s t r cs css.\n        (s, t) \\<in> r \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (Spec r # cs, css @ xs, Normal s) \\<rightarrow>\n                             (cs, css @ xs, Normal t)\nA total of 23 subgoals...", "apply (simp_all del: fun_upd_apply,(blast intro: step.intros)+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "ML \\<open>\n  ML_Thms.bind_thm (\"trancl_induct3\", Split_Rule.split_rule @{context}\n    (Rule_Insts.read_instantiate @{context}\n      [(((\"a\", 0), Position.none), \"(ax, ay, az)\"),\n       (((\"b\", 0), Position.none), \"(bx, by, bz)\")] []\n      @{thm tranclp_induct}));\n\\<close>"], ["", "lemma app_css_steps:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>+ (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>(cs,css@xs,s) \\<rightarrow>\\<^sup>+ (cs',css'@xs,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css @ xs, s) \\<rightarrow>\\<^sup>+\n                         (cs', css' @ xs, t)", "apply(rule trancl_induct3 [OF step])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa b.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n                            (a, aa, b) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css @ xs, s) \\<rightarrow>\\<^sup>+\n                            (a, aa @ xs, b)\n 2. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>+\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (cs, css @ xs, s) \\<rightarrow>\\<^sup>+\n                             (a, aa @ xs, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css @ xs,\n         s) \\<rightarrow>\\<^sup>+\n        (ab, ac @ xs, ba)", "apply (rule app_css_step [THEN tranclp.r_into_trancl [of \"step \\<Gamma>\"]],assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>+\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (cs, css @ xs, s) \\<rightarrow>\\<^sup>+\n                             (a, aa @ xs, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css @ xs,\n         s) \\<rightarrow>\\<^sup>+\n        (ab, ac @ xs, ba)", "apply(blast intro:app_css_step tranclp_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma step_Cons':\n  assumes step: \"\\<Gamma>\\<turnstile>(ccs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows\n  \"\\<And>c cs. ccs=c#cs \\<Longrightarrow> \\<exists>css''. css'=css''@css \\<and>\n      (if css''=[] then \\<exists>p. cs'=p@cs\n       else (\\<exists>pnorm pabr. css''=[(pnorm@cs,pabr@cs)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c cs.\n       ccs = c # cs \\<Longrightarrow>\n       \\<exists>css''.\n          css' = css'' @ css \\<and>\n          (if css'' = [] then \\<exists>p. cs' = p @ cs\n           else \\<exists>pnorm pabr. css'' = [(pnorm @ cs, pabr @ cs)])", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (ccs, css, s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<And>c cs.\n       ccs = c # cs \\<Longrightarrow>\n       \\<exists>css''.\n          css' = css'' @ css \\<and>\n          (if css'' = [] then \\<exists>p. cs' = p @ cs\n           else \\<exists>pnorm pabr. css'' = [(pnorm @ cs, pabr @ cs)])", "by induct force+"], ["", "lemma step_Cons:\n  assumes step: \"\\<Gamma>\\<turnstile>(c#cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"\\<exists>pcss. css'=pcss@css \\<and>\n         (if pcss=[] then \\<exists>ps. cs'=ps@cs\n          else (\\<exists>pcs_normal pcs_abrupt. pcss=[(pcs_normal@cs,pcs_abrupt@cs)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcss.\n       css' = pcss @ css \\<and>\n       (if pcss = [] then \\<exists>ps. cs' = ps @ cs\n        else \\<exists>pcs_normal pcs_abrupt.\n                pcss = [(pcs_normal @ cs, pcs_abrupt @ cs)])", "using step_Cons' [OF step]"], ["proof (prove)\nusing this:\n  c # cs = ?c # ?cs \\<Longrightarrow>\n  \\<exists>css''.\n     css' = css'' @ css \\<and>\n     (if css'' = [] then \\<exists>p. cs' = p @ ?cs\n      else \\<exists>pnorm pabr. css'' = [(pnorm @ ?cs, pabr @ ?cs)])\n\ngoal (1 subgoal):\n 1. \\<exists>pcss.\n       css' = pcss @ css \\<and>\n       (if pcss = [] then \\<exists>ps. cs' = ps @ cs\n        else \\<exists>pcs_normal pcs_abrupt.\n                pcss = [(pcs_normal @ cs, pcs_abrupt @ cs)])", "by blast"], ["", "lemma step_Nil':\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,asscss,s) \\<rightarrow> (cs',css',t)\"\n  shows\n  \"\\<And>ass. \\<lbrakk>cs=[]; asscss=ass@css; ass\\<noteq>Nil\\<rbrakk> \\<Longrightarrow>\n          css'=tl ass@css \\<and>\n          (case s of\n             Abrupt s' \\<Rightarrow> cs'=snd (hd ass) \\<and> t=Normal s'\n           |  _ \\<Rightarrow> cs'=fst (hd ass) \\<and> t=s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ass.\n       \\<lbrakk>cs = []; asscss = ass @ css; ass \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> css' = tl ass @ css \\<and>\n                         (case s of\n                          Abrupt s' \\<Rightarrow>\n                            cs' = snd (hd ass) \\<and> t = Normal s'\n                          | _ \\<Rightarrow> cs' = fst (hd ass) \\<and> t = s)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, asscss, s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<And>ass.\n       \\<lbrakk>cs = []; asscss = ass @ css; ass \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> css' = tl ass @ css \\<and>\n                         (case s of\n                          Abrupt s' \\<Rightarrow>\n                            cs' = snd (hd ass) \\<and> t = Normal s'\n                          | _ \\<Rightarrow> cs' = fst (hd ass) \\<and> t = s)", "by (induct) (fastforce simp add: neq_Nil_conv)+"], ["", "lemma step_Nil:\n  assumes step: \"\\<Gamma>\\<turnstile>([],ass@css,s) \\<rightarrow> (cs',css',t)\"\n  assumes ass_not_Nil: \"ass\\<noteq>[]\"\n  shows \"css'=tl ass@css \\<and>\n          (case s of\n             Abrupt s' \\<Rightarrow> cs'=snd (hd ass) \\<and> t=Normal s'\n           |  _ \\<Rightarrow> cs'=fst (hd ass) \\<and> t=s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. css' = tl ass @ css \\<and>\n    (case s of\n     Abrupt s' \\<Rightarrow> cs' = snd (hd ass) \\<and> t = Normal s'\n     | _ \\<Rightarrow> cs' = fst (hd ass) \\<and> t = s)", "using step_Nil' [OF step _ _ ass_not_Nil]"], ["proof (prove)\nusing this:\n  \\<lbrakk>[] = []; ass @ css = ass @ ?css\\<rbrakk>\n  \\<Longrightarrow> css' = tl ass @ ?css \\<and>\n                    (case s of\n                     Abrupt s' \\<Rightarrow>\n                       cs' = snd (hd ass) \\<and> t = Normal s'\n                     | _ \\<Rightarrow> cs' = fst (hd ass) \\<and> t = s)\n\ngoal (1 subgoal):\n 1. css' = tl ass @ css \\<and>\n    (case s of\n     Abrupt s' \\<Rightarrow> cs' = snd (hd ass) \\<and> t = Normal s'\n     | _ \\<Rightarrow> cs' = fst (hd ass) \\<and> t = s)", "by simp"], ["", "lemma step_Nil'':\n  assumes step: \"\\<Gamma>\\<turnstile>([],(pcs_normal,pcs_abrupt)#pcss@css,s) \\<rightarrow> (cs',pcss@css,t)\"\n  shows \"(case s of\n             Abrupt s' \\<Rightarrow> cs'=pcs_abrupt \\<and> t=Normal s'\n           |  _ \\<Rightarrow> cs'=pcs_normal \\<and> t=s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case s of Abrupt s' \\<Rightarrow> cs' = pcs_abrupt \\<and> t = Normal s'\n    | _ \\<Rightarrow> cs' = pcs_normal \\<and> t = s", "using step_Nil' [OF step, where ass =\"(pcs_normal,pcs_abrupt)#pcss\" and css=\"css\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>[] = [];\n   (pcs_normal, pcs_abrupt) # pcss @ css =\n   ((pcs_normal, pcs_abrupt) # pcss) @ css;\n   (pcs_normal, pcs_abrupt) # pcss \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> pcss @ css =\n                    tl ((pcs_normal, pcs_abrupt) # pcss) @ css \\<and>\n                    (case s of\n                     Abrupt s' \\<Rightarrow>\n                       cs' =\n                       snd (hd ((pcs_normal, pcs_abrupt) # pcss)) \\<and>\n                       t = Normal s'\n                     | _ \\<Rightarrow>\n                         cs' =\n                         fst (hd ((pcs_normal, pcs_abrupt) # pcss)) \\<and>\n                         t = s)\n\ngoal (1 subgoal):\n 1. case s of Abrupt s' \\<Rightarrow> cs' = pcs_abrupt \\<and> t = Normal s'\n    | _ \\<Rightarrow> cs' = pcs_normal \\<and> t = s", "by (auto split: xstate.splits)"], ["", "lemma drop_suffix_css_step':\nassumes step: \"\\<Gamma>\\<turnstile>(cs,cssxs,s) \\<rightarrow> (cs',css'xs,t)\"\nshows \"\\<And>css css' xs. \\<lbrakk>cssxs = css@xs; css'xs=css'@xs\\<rbrakk>\n     \\<Longrightarrow> \\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>css css' xs.\n       \\<lbrakk>cssxs = css @ xs; css'xs = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n        (cs', css', t)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, cssxs, s) \\<rightarrow> (cs', css'xs, t)\n\ngoal (1 subgoal):\n 1. \\<And>css css' xs.\n       \\<lbrakk>cssxs = css @ xs; css'xs = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n        (cs', css', t)", "apply induct"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>cs css s cssa css' xs.\n       \\<lbrakk>css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Skip # cs, cssa,\n         Normal s) \\<rightarrow>\n        (cs, css', Normal s)\n 2. \\<And>s g f c cs css cssa css' xs.\n       \\<lbrakk>s \\<in> g; css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, cssa,\n         Normal s) \\<rightarrow>\n        (c # cs, css', Normal s)\n 3. \\<And>s g f c cs css cssa css' xs.\n       \\<lbrakk>s \\<notin> g; css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, cssa,\n         Normal s) \\<rightarrow>\n        (cs, css', Fault f)\n 4. \\<And>c cs css f cssa css' xs.\n       \\<lbrakk>css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (c # cs, cssa,\n         Fault f) \\<rightarrow>\n        (cs, css', Fault f)\n 5. \\<And>nrms abrs css f cssa css' xs.\n       \\<lbrakk>(nrms, abrs) # css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ([], cssa,\n         Fault f) \\<rightarrow>\n        (nrms, css', Fault f)\n 6. \\<And>c cs css s cssa css' xs.\n       \\<lbrakk>css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (c # cs, cssa,\n         Abrupt s) \\<rightarrow>\n        (cs, css', Abrupt s)\n 7. \\<And>nrms abrs css s cssa css' xs.\n       \\<lbrakk>(nrms, abrs) # css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ([], cssa,\n         Normal s) \\<rightarrow>\n        (nrms, css', Normal s)\n 8. \\<And>nrms abrs css s cssa css' xs.\n       \\<lbrakk>(nrms, abrs) # css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ([], cssa,\n         Abrupt s) \\<rightarrow>\n        (abrs, css', Normal s)\n 9. \\<And>f cs css s cssa css' xs.\n       \\<lbrakk>css = cssa @ xs; css = css' @ xs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Basic f # cs, cssa,\n         Normal s) \\<rightarrow>\n        (cs, css', Normal (f s))\n 10. \\<And>s t r cs css cssa css' xs.\n        \\<lbrakk>(s, t) \\<in> r; css = cssa @ xs; css = css' @ xs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Spec r # cs, cssa,\n          Normal s) \\<rightarrow>\n         (cs, css', Normal t)\nA total of 23 subgoals...", "apply (fastforce intro: step.intros)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma drop_suffix_css_step:\nassumes step: \"\\<Gamma>\\<turnstile>(cs,pcss@css,s) \\<rightarrow> (cs',pcss'@css,t)\"\nshows \"\\<Gamma>\\<turnstile>(cs,pcss,s) \\<rightarrow> (cs',pcss',t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, pcss, s) \\<rightarrow> (cs', pcss', t)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, pcss @ css, s) \\<rightarrow>\n                       (cs', pcss' @ css, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, pcss, s) \\<rightarrow> (cs', pcss', t)", "by (blast intro: drop_suffix_css_step')"], ["", "lemma drop_suffix_hd_css_step':\n  assumes step: \"\\<Gamma>\\<turnstile> (pcs,css,s) \\<rightarrow> (cs',css'css,t)\"\n  shows \"\\<And>p ps cs pnorm pabr. \\<lbrakk>pcs=p#ps@cs; css'css=(pnorm@cs,pabr@cs)#css\\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>\\<turnstile> (p#ps,css,s) \\<rightarrow> (cs',(pnorm,pabr)#css,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p ps cs pnorm pabr.\n       \\<lbrakk>pcs = p # ps @ cs;\n        css'css = (pnorm @ cs, pabr @ cs) # css\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n        (cs', (pnorm, pabr) # css, t)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs, css, s) \\<rightarrow> (cs', css'css, t)\n\ngoal (1 subgoal):\n 1. \\<And>p ps cs pnorm pabr.\n       \\<lbrakk>pcs = p # ps @ cs;\n        css'css = (pnorm @ cs, pabr @ cs) # css\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n        (cs', (pnorm, pabr) # css, t)", "by induct (force intro: step.intros)+"], ["", "lemma drop_suffix_hd_css_step'':\n  assumes step: \"\\<Gamma>\\<turnstile> (p#ps@cs,css,s) \\<rightarrow> (cs',(pnorm@cs,pabr@cs)#css,t)\"\n  shows  \"\\<Gamma>\\<turnstile> (p#ps,css,s) \\<rightarrow> (cs',(pnorm,pabr)#css,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                         (cs', (pnorm, pabr) # css, t)", "using drop_suffix_hd_css_step' [OF step]"], ["proof (prove)\nusing this:\n  \\<lbrakk>p # ps @ cs = ?p # ?ps @ ?cs;\n   (pnorm @ cs, pabr @ cs) # css =\n   (?pnorm @ ?cs, ?pabr @ ?cs) # css\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (?p # ?ps, css, s) \\<rightarrow>\n   (cs', (?pnorm, ?pabr) # css, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                         (cs', (pnorm, pabr) # css, t)", "by auto"], ["", "lemma drop_suffix_hd_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile> (p#ps@cs,css,s) \\<rightarrow> (cs',[(pnorm@ps@cs,pabr@ps@cs)]@css,t)\"\n  shows  \"\\<Gamma>\\<turnstile> (p#ps,css,s) \\<rightarrow> (cs',[(pnorm@ps,pabr@ps)]@css,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                         (cs', [(pnorm @ ps, pabr @ ps)] @ css, t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                         (cs', [(pnorm @ ps, pabr @ ps)] @ css, t)", "from step drop_suffix_hd_css_step'' [of _ p ps cs css s cs' \"pnorm@ps\" \"pabr@ps\" t]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, s) \\<rightarrow>\n                       (cs', [(pnorm @ ps @ cs, pabr @ ps @ cs)] @ css, t)\n  ?\\<Gamma>\\<turnstile> (p # ps @ cs, css, s) \\<rightarrow>\n                        (cs', ((pnorm @ ps) @ cs, (pabr @ ps) @ cs) # css,\n                         t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                        (cs', (pnorm @ ps, pabr @ ps) # css, t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, s) \\<rightarrow>\n                       (cs', [(pnorm @ ps @ cs, pabr @ ps @ cs)] @ css, t)\n  ?\\<Gamma>\\<turnstile> (p # ps @ cs, css, s) \\<rightarrow>\n                        (cs', ((pnorm @ ps) @ cs, (pabr @ ps) @ cs) # css,\n                         t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                        (cs', (pnorm @ ps, pabr @ ps) # css, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                         (cs', [(pnorm @ ps, pabr @ ps)] @ css, t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps, css, s) \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)] @ css, t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma drop_suffix':\n  assumes step: \"\\<Gamma>\\<turnstile>(csxs,css,s) \\<rightarrow> (cs'xs,css',t)\"\n  shows \"\\<And>xs cs cs'. \\<lbrakk>css=css'; csxs=cs@xs; cs'xs = cs'@xs; cs\\<noteq>[] \\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs cs cs'.\n       \\<lbrakk>css = css'; csxs = cs @ xs; cs'xs = cs' @ xs;\n        cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n        (cs', css, t)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (csxs, css, s) \\<rightarrow> (cs'xs, css', t)\n\ngoal (1 subgoal):\n 1. \\<And>xs cs cs'.\n       \\<lbrakk>css = css'; csxs = cs @ xs; cs'xs = cs' @ xs;\n        cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n        (cs', css, t)", "apply induct"], ["proof (prove)\ngoal (23 subgoals):\n 1. \\<And>cs css s xs csa cs'.\n       \\<lbrakk>css = css; Skip # cs = csa @ xs; cs = cs' @ xs;\n        csa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n         Normal s) \\<rightarrow>\n        (cs', css, Normal s)\n 2. \\<And>s g f c cs css xs csa cs'.\n       \\<lbrakk>s \\<in> g; css = css; Guard f g c # cs = csa @ xs;\n        c # cs = cs' @ xs; csa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n         Normal s) \\<rightarrow>\n        (cs', css, Normal s)\n 3. \\<And>s g f c cs css xs csa cs'.\n       \\<lbrakk>s \\<notin> g; css = css; Guard f g c # cs = csa @ xs;\n        cs = cs' @ xs; csa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n         Normal s) \\<rightarrow>\n        (cs', css, Fault f)\n 4. \\<And>c cs css f xs csa cs'.\n       \\<lbrakk>css = css; c # cs = csa @ xs; cs = cs' @ xs;\n        csa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n         Fault f) \\<rightarrow>\n        (cs', css, Fault f)\n 5. \\<And>nrms abrs css f xs cs cs'.\n       \\<lbrakk>(nrms, abrs) # css = css; [] = cs @ xs; nrms = cs' @ xs;\n        cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, (nrms, abrs) # css,\n         Fault f) \\<rightarrow>\n        (cs', (nrms, abrs) # css, Fault f)\n 6. \\<And>c cs css s xs csa cs'.\n       \\<lbrakk>css = css; c # cs = csa @ xs; cs = cs' @ xs;\n        csa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n         Abrupt s) \\<rightarrow>\n        (cs', css, Abrupt s)\n 7. \\<And>nrms abrs css s xs cs cs'.\n       \\<lbrakk>(nrms, abrs) # css = css; [] = cs @ xs; nrms = cs' @ xs;\n        cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, (nrms, abrs) # css,\n         Normal s) \\<rightarrow>\n        (cs', (nrms, abrs) # css, Normal s)\n 8. \\<And>nrms abrs css s xs cs cs'.\n       \\<lbrakk>(nrms, abrs) # css = css; [] = cs @ xs; abrs = cs' @ xs;\n        cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, (nrms, abrs) # css,\n         Abrupt s) \\<rightarrow>\n        (cs', (nrms, abrs) # css, Normal s)\n 9. \\<And>f cs css s xs csa cs'.\n       \\<lbrakk>css = css; Basic f # cs = csa @ xs; cs = cs' @ xs;\n        csa \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n         Normal s) \\<rightarrow>\n        (cs', css, Normal (f s))\n 10. \\<And>s t r cs css xs csa cs'.\n        \\<lbrakk>(s, t) \\<in> r; css = css; Spec r # cs = csa @ xs;\n         cs = cs' @ xs; csa \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (csa, css,\n          Normal s) \\<rightarrow>\n         (cs', css, Normal t)\nA total of 23 subgoals...", "apply (fastforce intro: step.intros simp add: neq_Nil_conv)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma drop_suffix:\n  assumes step: \"\\<Gamma>\\<turnstile>(c#cs@xs,css,s) \\<rightarrow> (cs'@xs,css,t)\"\n  shows \"\\<Gamma>\\<turnstile>(c#cs,css,s) \\<rightarrow> (cs',css,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # cs, css, s) \\<rightarrow> (cs', css, t)", "by(rule drop_suffix' [OF step _ _ _]) auto"], ["", "lemma drop_suffix_same_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs@xs,css,s) \\<rightarrow> (cs'@xs,css,t)\"\n  assumes not_Nil: \"cs\\<noteq>[]\"\n  shows \"\\<Gamma>\\<turnstile>(cs,xss,s) \\<rightarrow> (cs',xss,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', xss, t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', xss, t)", "from drop_suffix' [OF step _ _ _ not_Nil]"], ["proof (chain)\npicking this:\n  \\<lbrakk>css = css; cs @ xs = cs @ ?xs; cs' @ xs = ?cs' @ ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n   (?cs', css, t)", "have \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css,t)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>css = css; cs @ xs = cs @ ?xs; cs' @ xs = ?cs' @ ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\n   (?cs', css, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css, t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', xss, t)", "with drop_suffix_css_step [of _ cs \"[]\" css s cs' \"[]\" t]"], ["proof (chain)\npicking this:\n  ?\\<Gamma>\\<turnstile> (cs, [] @ css, s) \\<rightarrow>\n                        (cs', [] @ css, t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', [], t)\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css, t)", "have \"\\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', [], t)\""], ["proof (prove)\nusing this:\n  ?\\<Gamma>\\<turnstile> (cs, [] @ css, s) \\<rightarrow>\n                        (cs', [] @ css, t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', [], t)\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', [], t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', [], t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', xss, t)", "from app_css_step [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs, [] @ ?xs, s) \\<rightarrow> (cs', [] @ ?xs, t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, [] @ ?xs, s) \\<rightarrow> (cs', [] @ ?xs, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', xss, t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', xss, t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Cons_change_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile> (cs,css,s) \\<rightarrow> (cs',css'@css,t)\"\n  shows \"\\<Gamma>\\<turnstile> (cs,xss,s) \\<rightarrow> (cs',css'@xss,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', css' @ xss, t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', css' @ xss, t)", "from step\n    drop_suffix_css_step [where cs=cs and pcss=\"[]\" and css=css and s=s\n                             and cs'=cs' and pcss'=css' and t=t]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css' @ css, t)\n  ?\\<Gamma>\\<turnstile> (cs, [] @ css, s) \\<rightarrow>\n                        (cs', css' @ css, t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', css', t)", "have \"\\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', css', t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css' @ css, t)\n  ?\\<Gamma>\\<turnstile> (cs, [] @ css, s) \\<rightarrow>\n                        (cs', css' @ css, t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', css', t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, [], s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', css' @ xss, t)", "from app_css_step [where xs=xss, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs, [] @ xss, s) \\<rightarrow> (cs', css' @ xss, t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, [] @ xss, s) \\<rightarrow> (cs', css' @ xss, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', css' @ xss, t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, xss, s) \\<rightarrow> (cs', css' @ xss, t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Nil_change_css_step:\n  assumes step: \"\\<Gamma>\\<turnstile>([],ass@css,s) \\<rightarrow> (cs',ass'@css,t)\"\n  assumes ass_not_Nil: \"ass\\<noteq>[]\"\n  shows \"\\<Gamma>\\<turnstile>([],ass@xss,s) \\<rightarrow> (cs',ass'@xss,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow>\n                         (cs', ass' @ xss, t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow>\n                         (cs', ass' @ xss, t)", "from step drop_suffix_css_step [of _ \"[]\" ass css s cs' ass' t]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([], ass @ css, s) \\<rightarrow> (cs', ass' @ css, t)\n  ?\\<Gamma>\\<turnstile> ([], ass @ css, s) \\<rightarrow>\n                        (cs', ass' @ css, t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> ([], ass, s) \\<rightarrow> (cs', ass', t)", "have \"\\<Gamma>\\<turnstile> ([], ass, s) \\<rightarrow> (cs', ass', t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([], ass @ css, s) \\<rightarrow> (cs', ass' @ css, t)\n  ?\\<Gamma>\\<turnstile> ([], ass @ css, s) \\<rightarrow>\n                        (cs', ass' @ css, t) \\<Longrightarrow>\n  ?\\<Gamma>\\<turnstile> ([], ass, s) \\<rightarrow> (cs', ass', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], ass, s) \\<rightarrow> (cs', ass', t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], ass, s) \\<rightarrow> (cs', ass', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow>\n                         (cs', ass' @ xss, t)", "from app_css_step [where xs=xss, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow> (cs', ass' @ xss, t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow> (cs', ass' @ xss, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow>\n                         (cs', ass' @ xss, t)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], ass @ xss, s) \\<rightarrow> (cs', ass' @ xss, t)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Equivalence between Big and Small-Step Semantics\\<close>"], ["", "lemma exec_impl_steps:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<And>cs css. \\<Gamma>\\<turnstile>(c#cs,css,s) \\<rightarrow>\\<^sup>* (cs,css,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, s) \\<rightarrow>\\<^sup>*\n                            (cs, css, t)", "using exec"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, s) \\<rightarrow>\\<^sup>*\n                            (cs, css, t)", "proof (induct)"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Skip # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 2. \\<And>s g c t f cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 4. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 5. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 6. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 7. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 20 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (20 subgoals):\n 1. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Skip # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 2. \\<And>s g c t f cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 4. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 5. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 6. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 7. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Skip # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Normal s_)", "by (blast intro: step.Skip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Skip # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal s_)\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 3. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 4. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 5. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 6. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c s' t cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                  s') \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s g c t f cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 3. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 4. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 5. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 6. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c s' t cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                  s') \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 19 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c_ # ?cs, ?css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 3. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 4. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 5. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 6. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c s' t cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                  s') \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c_ # ?cs, ?css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Guard f_ g_ c_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, t_)", "by (blast intro: step.Guard rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f_ g_ c_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, t_)\n\ngoal (18 subgoals):\n 1. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 2. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 3. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 4. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 5. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c cs css.\n        s \\<notin> b \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (While b c # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Normal s)\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 2. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 3. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 4. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 5. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c cs css.\n        s \\<notin> b \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (While b c # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Normal s)\nA total of 18 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n\ngoal (18 subgoals):\n 1. \\<And>s g f c cs css.\n       s \\<notin> g \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard f g c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 2. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 3. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 4. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 5. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s b c cs css.\n        s \\<notin> b \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (While b c # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Normal s)\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Guard f_ g_ c_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Fault f_)", "by (blast intro: step.GuardFault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f_ g_ c_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Fault f_)\n\ngoal (17 subgoals):\n 1. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 2. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 3. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 4. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 10. \\<And>p bdy s t cs css.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 2. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 3. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 4. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 10. \\<And>p bdy s t cs css.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 17 subgoals...", "case FaultProp"], ["proof (state)\nthis:\n  \n\ngoal (17 subgoals):\n 1. \\<And>c f cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Fault f) \\<rightarrow>\\<^sup>*\n                            (cs, css, Fault f)\n 2. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 3. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 4. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 10. \\<And>p bdy s t cs css.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c_ # cs, css, Fault f_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Fault f_)", "by (blast intro: step.FaultProp)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c_ # cs, css, Fault f_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Fault f_)\n\ngoal (16 subgoals):\n 1. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 2. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 3. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 9. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>p s cs css.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (Call p # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Stuck)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 2. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 3. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 9. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>p s cs css.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (Call p # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Stuck)\nA total of 16 subgoals...", "case Basic"], ["proof (state)\nthis:\n  \n\ngoal (16 subgoals):\n 1. \\<And>f s cs css.\n       \\<Gamma>\\<turnstile> (Basic f # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal (f s))\n 2. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 3. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 9. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>p s cs css.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> (Call p # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Stuck)\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Basic f_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Normal (f_ s_))", "by (blast intro: step.Basic)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Basic f_ # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal (f_ s_))\n\ngoal (15 subgoals):\n 1. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 2. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 8. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 10. \\<And>c cs css.\n        \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                             (cs, css, Stuck)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 2. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 8. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 10. \\<And>c cs css.\n        \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                             (cs, css, Stuck)\nA total of 15 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n\ngoal (15 subgoals):\n 1. \\<And>s t r cs css.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal t)\n 2. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 8. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 10. \\<And>c cs css.\n        \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                             (cs, css, Stuck)\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Spec r_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Normal t_)", "by (blast intro: step.Spec)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Spec r_ # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal t_)\n\ngoal (14 subgoals):\n 1. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 7. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 9. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 10. \\<And>c s t cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c s # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 7. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 9. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 10. \\<And>c s t cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c s # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 14 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n\ngoal (14 subgoals):\n 1. \\<And>s r cs css.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Spec r # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 7. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 9. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 10. \\<And>c s t cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c s # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n          Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Spec r_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Stuck)", "by (blast intro: step.SpecStuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Spec r_ # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Stuck)\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 6. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 9. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s cs css.\n        \\<Gamma>\\<turnstile> (Throw # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Abrupt s)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 6. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 9. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s cs css.\n        \\<Gamma>\\<turnstile> (Throw # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Abrupt s)\nA total of 13 subgoals...", "case Seq"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> s'_\n  \\<Gamma>\\<turnstile> (c\\<^sub>1_ # ?cs, ?css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s'_)\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,s'_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c\\<^sub>2_ # ?cs, ?css, s'_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 6. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 9. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>s cs css.\n        \\<Gamma>\\<turnstile> (Throw # cs, css,\n                              Normal s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Abrupt s)\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> s'_\n  \\<Gamma>\\<turnstile> (c\\<^sub>1_ # ?cs, ?css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s'_)\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,s'_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c\\<^sub>2_ # ?cs, ?css, s'_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1_ c\\<^sub>2_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, t_)", "by (blast intro: step.Seq rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1_ c\\<^sub>2_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, t_)\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 5. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 10. \\<And>c s cs css.\n        \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Abrupt s)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 5. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 10. \\<And>c s cs css.\n        \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Abrupt s)\nA total of 12 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c\\<^sub>1_ # ?cs, ?css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 5. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 8. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 10. \\<And>c s cs css.\n        \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (cs, css, Abrupt s)\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c\\<^sub>1_ # ?cs, ?css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, t_)", "by (blast intro: step.CondTrue rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, t_)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 4. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 9. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, Abrupt s');\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                  Normal s') \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 4. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 9. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, Abrupt s');\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                  Normal s') \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 11 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c\\<^sub>2_ # ?cs, ?css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 4. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 7. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 9. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, Abrupt s');\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                  Normal s') \\<rightarrow>\\<^sup>*\n                                 (cs, css, t)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c\\<^sub>2_ # ?cs, ?css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, t_)", "by (blast intro: step.CondFalse rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, t_)\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 3. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 8. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 3. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 8. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)", "case WhileTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> s'_\n  \\<Gamma>\\<turnstile> (c_ # ?cs, ?css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s'_)\n  \\<Gamma>\\<turnstile> \\<langle>While b_ c_,s'_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (While b_ c_ # ?cs, ?css, s'_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (While b c # cs, css,\n                                 s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (While b c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 3. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 6. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 8. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<And>cs css.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                  Normal s) \\<rightarrow>\\<^sup>*\n                                 (cs, css, t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n          cs,\n          css, Normal s) \\<rightarrow>\\<^sup>*\n         (cs, css, t)", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> s'_\n  \\<Gamma>\\<turnstile> (c_ # ?cs, ?css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s'_)\n  \\<Gamma>\\<turnstile> \\<langle>While b_ c_,s'_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (While b_ c_ # ?cs, ?css, s'_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b_ c_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, t_)", "by (blast intro: step.WhileTrue rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b_ c_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, t_)\n\ngoal (9 subgoals):\n 1. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 2. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 2. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n\ngoal (9 subgoals):\n 1. \\<And>s b c cs css.\n       s \\<notin> b \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While b c # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Normal s)\n 2. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 5. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b_ c_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Normal s_)", "by (blast intro: step.WhileFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b_ c_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal s_)\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case (Call p bdy s s' cs css)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<Gamma>\\<turnstile> (bdy # ?cs, ?css, Normal s) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s')\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have bdy: \"\\<Gamma> p = Some bdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have steps_body: \"\\<Gamma>\\<turnstile>([bdy],(cs,Throw#cs)#css,Normal s) \\<rightarrow>\\<^sup>*\n                       ([],(cs,Throw#cs)#css, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, Throw # cs) # css, s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t cs css.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (bdy # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Call p # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 4. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "proof (cases s')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case (Normal s'')"], ["proof (state)\nthis:\n  s' = Normal s''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "note steps_body"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "from Normal"], ["proof (chain)\npicking this:\n  s' = Normal s''", "have \"\\<Gamma>\\<turnstile>([],(cs,Throw#cs)#css, s') \\<rightarrow> (cs,css,s')\""], ["proof (prove)\nusing this:\n  s' = Normal s''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css, s') \\<rightarrow>\n                         (cs, css, s')", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css, s') \\<rightarrow>\n                       (cs, css, s')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using bdy"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (blast intro: step.Call rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case (Abrupt s'')"], ["proof (state)\nthis:\n  s' = Abrupt s''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "with steps_body"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n  s' = Abrupt s''", "have \"\\<Gamma>\\<turnstile>([bdy],(cs,Throw#cs)#css,Normal s) \\<rightarrow>\\<^sup>*\n             ([],(cs,Throw#cs)#css, Abrupt s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n  s' = Abrupt s''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, Throw # cs) # css, Abrupt s'')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, Abrupt s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, Abrupt s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "have \"\\<Gamma>\\<turnstile>([],(cs,Throw#cs)#css, Abrupt s'') \\<rightarrow> (Throw#cs,css,Normal s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css,\n                          Abrupt s'') \\<rightarrow>\n                         (Throw # cs, css, Normal s'')", "by (rule ExitBlockAbrupt)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css,\n                        Abrupt s'') \\<rightarrow>\n                       (Throw # cs, css, Normal s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css,\n                        Abrupt s'') \\<rightarrow>\n                       (Throw # cs, css, Normal s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "have \"\\<Gamma>\\<turnstile>(Throw#cs,css,Normal s'') \\<rightarrow> (cs,css,Abrupt s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw # cs, css, Normal s'') \\<rightarrow>\n                         (cs, css, Abrupt s'')", "by (rule Throw)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Throw # cs, css, Normal s'') \\<rightarrow>\n                       (cs, css, Abrupt s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Abrupt s'')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Abrupt s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using bdy Abrupt"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Abrupt s'')\n  \\<Gamma> p = Some bdy\n  s' = Abrupt s''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (auto intro: step.Call rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case Fault"], ["proof (state)\nthis:\n  s' = Fault x3_\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "note steps_body"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "from Fault"], ["proof (chain)\npicking this:\n  s' = Fault x3_", "have \"\\<Gamma>\\<turnstile>([],(cs,Throw#cs)#css, s') \\<rightarrow> (cs,css,s')\""], ["proof (prove)\nusing this:\n  s' = Fault x3_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css, s') \\<rightarrow>\n                         (cs, css, s')", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css, s') \\<rightarrow>\n                       (cs, css, s')\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using bdy"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (blast intro: step.Call rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case Stuck"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "note steps_body"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, Throw # cs) # css, s')\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "from Stuck"], ["proof (chain)\npicking this:\n  s' = Stuck", "have \"\\<Gamma>\\<turnstile>([],(cs,Throw#cs)#css, s') \\<rightarrow> (cs,css,s')\""], ["proof (prove)\nusing this:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css, s') \\<rightarrow>\n                         (cs, css, s')", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, Throw # cs) # css, s') \\<rightarrow>\n                       (cs, css, s')\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using bdy"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([bdy], (cs, Throw # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (blast intro: step.Call rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (7 subgoals):\n 1. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case (CallUndefined p s cs css)"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (7 subgoals):\n 1. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have undef: \"\\<Gamma> p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = None", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (7 subgoals):\n 1. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "hence \"\\<Gamma>\\<turnstile>(Call p # cs, css, Normal s) \\<rightarrow> (cs, css, Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\n                         (cs, css, Stuck)", "by (rule step.CallUndefined)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\n                       (cs, css, Stuck)\n\ngoal (7 subgoals):\n 1. \\<And>p s cs css.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Call p # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 3. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\n                       (cs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, Stuck)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs, css, Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Stuck)\n\ngoal (6 subgoals):\n 1. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 4. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 4. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case StuckProp"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>c cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                            (cs, css, Stuck)\n 2. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 4. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c_ # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                         (cs, css, Stuck)", "by (blast intro: step.StuckProp rtrancl_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c_ # cs, css, Stuck) \\<rightarrow>\\<^sup>*\n                       (cs, css, Stuck)\n\ngoal (5 subgoals):\n 1. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 3. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 3. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c_ s_ # ?cs, ?css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (5 subgoals):\n 1. \\<And>c s t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c s # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (DynCom c # cs, css,\n         Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 3. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>\\<turnstile> (c_ s_ # ?cs, ?css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, t_)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (DynCom c_ # cs, css,\n                          Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, t_)", "by (blast intro: step.DynCom rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (DynCom c_ # cs, css,\n                        Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, t_)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 2. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 2. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case Throw"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<Gamma>\\<turnstile> (Throw # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 2. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Abrupt s_)", "by (blast intro: step.Throw)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Throw # cs, css, Normal s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Abrupt s_)\n\ngoal (3 subgoals):\n 1. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case AbruptProp"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>c s cs css.\n       \\<Gamma>\\<turnstile> (c # cs, css, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (cs, css, Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c_ # cs, css, Abrupt s_) \\<rightarrow>\\<^sup>*\n                         (cs, css, Abrupt s_)", "by (blast intro: step.AbruptProp)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c_ # cs, css, Abrupt s_) \\<rightarrow>\\<^sup>*\n                       (cs, css, Abrupt s_)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case (CatchMatch c\\<^sub>1 s s' c\\<^sub>2 s'' cs css)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n  \\<Gamma>\\<turnstile> (c\\<^sub>1 # ?cs, ?css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, Abrupt s')\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n     s'\\<rangle> \\<Rightarrow> s''\n  \\<Gamma>\\<turnstile> (c\\<^sub>2 # ?cs, ?css,\n                        Normal s') \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s'')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have steps_c1: \"\\<Gamma>\\<turnstile>([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal s) \\<rightarrow>\\<^sup>*\n                    ([],(cs,c\\<^sub>2#cs)#css,Abrupt s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, c\\<^sub>2 # cs) # css, Abrupt s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Abrupt s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Abrupt s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have \"\\<Gamma>\\<turnstile>([],(cs,c\\<^sub>2#cs)#css,Abrupt s') \\<rightarrow> (c\\<^sub>2#cs,css,Normal s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                          Abrupt s') \\<rightarrow>\n                         (c\\<^sub>2 # cs, css, Normal s')", "by (rule ExitBlockAbrupt)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                        Abrupt s') \\<rightarrow>\n                       (c\\<^sub>2 # cs, css, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                        Abrupt s') \\<rightarrow>\n                       (c\\<^sub>2 # cs, css, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have steps_c2: \"\\<Gamma>\\<turnstile>(c\\<^sub>2#cs,css,Normal s') \\<rightarrow>\\<^sup>* (cs,css,s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                          Normal s') \\<rightarrow>\\<^sup>*\n                         (cs, css, s'')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                        Normal s') \\<rightarrow>\\<^sup>*\n                       (cs, css, s'')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2 # cs, css,\n                                 Normal s') \\<rightarrow>\\<^sup>*\n                                (cs, css, t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s'')", "show \"\\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal s) \\<rightarrow>\\<^sup>* (cs, css, s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s'')", "by (blast intro: step.Catch rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s'')\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "case (CatchMiss c\\<^sub>1 s s' c\\<^sub>2 cs css)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<Gamma>\\<turnstile> (c\\<^sub>1 # ?cs, ?css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (?cs, ?css, s')\n  \\<not> isAbr s'\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "assume notAbr: \"\\<not> isAbr s'\""], ["proof (state)\nthis:\n  \\<not> isAbr s'\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "have steps_c1: \"\\<Gamma>\\<turnstile>([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal s) \\<rightarrow>\\<^sup>* ([],(cs,c\\<^sub>2#cs)#css,s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, c\\<^sub>2 # cs) # css, s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<And>cs css.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1 # cs, css,\n                                 Normal s) \\<rightarrow>\\<^sup>*\n                                (cs, css, t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 #\n         cs,\n         css, Normal s) \\<rightarrow>\\<^sup>*\n        (cs, css, t)", "show \"\\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal s) \\<rightarrow>\\<^sup>* (cs, css, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "proof (cases s')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case (Normal w)"], ["proof (state)\nthis:\n  s' = Normal w\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "with steps_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n  s' = Normal w", "have \"\\<Gamma>\\<turnstile>([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal s) \\<rightarrow>\\<^sup>* ([],(cs,c\\<^sub>2#cs)#css,Normal w)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n  s' = Normal w\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, c\\<^sub>2 # cs) # css, Normal w)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Normal w)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Normal w)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "have \"\\<Gamma>\\<turnstile>([],(cs,c\\<^sub>2#cs)#css,Normal w) \\<rightarrow> (cs,css,Normal w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                          Normal w) \\<rightarrow>\n                         (cs, css, Normal w)", "by (rule ExitBlockNormal)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                        Normal w) \\<rightarrow>\n                       (cs, css, Normal w)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal w)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal w)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Normal w)\n  s' = Normal w\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (auto intro: step.Catch rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case Abrupt"], ["proof (state)\nthis:\n  s' = Abrupt x2_\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "with notAbr"], ["proof (chain)\npicking this:\n  \\<not> isAbr s'\n  s' = Abrupt x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> isAbr s'\n  s' = Abrupt x2_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case (Fault f)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "with steps_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n  s' = Fault f", "have \"\\<Gamma>\\<turnstile>([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal s) \\<rightarrow>\\<^sup>* ([],(cs,c\\<^sub>2#cs)#css,Fault f)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, c\\<^sub>2 # cs) # css, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Fault f)\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Fault f)\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "have \"\\<Gamma>\\<turnstile>([],(cs,c\\<^sub>2#cs)#css,Fault f) \\<rightarrow> (cs,css,Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                          Fault f) \\<rightarrow>\n                         (cs, css, Fault f)", "by (rule FaultPropBlock)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                        Fault f) \\<rightarrow>\n                       (cs, css, Fault f)\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (cs, css, s')\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Fault f)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using Fault"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Fault f)\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (auto intro: step.Catch rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "case Stuck"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "with steps_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n  s' = Stuck", "have \"\\<Gamma>\\<turnstile>([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal s) \\<rightarrow>\\<^sup>* ([],(cs,c\\<^sub>2#cs)#css,Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, s')\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         ([], (cs, c\\<^sub>2 # cs) # css, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Stuck)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Stuck)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "have \"\\<Gamma>\\<turnstile>([],(cs,c\\<^sub>2#cs)#css,Stuck) \\<rightarrow> (cs,css,Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                          Stuck) \\<rightarrow>\n                         (cs, css, Stuck)", "by (rule StuckPropBlock)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css, Stuck) \\<rightarrow>\n                       (cs, css, Stuck)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Stuck)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "using Stuck"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, Stuck)\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (cs, css, s')", "by (auto intro: step.Catch rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (cs, css, s')\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive \"execs\"::\"[('s,'p,'f) body,('s,'p,'f) com list,\n                      ('s,'p,'f) continuation list,\n                      ('s,'f) xstate,('s,'f) xstate] \\<Rightarrow> bool\"\n                   (\"_\\<turnstile> \\<langle>_,_,_\\<rangle> \\<Rightarrow> _\" [50,50,50,50,50] 50)\n  for \\<Gamma>:: \"('s,'p,'f) body\"\nwhere\n  Nil: \"\\<Gamma>\\<turnstile>\\<langle>[],[],s\\<rangle> \\<Rightarrow> s\"\n\n| ExitBlockNormal: \"\\<Gamma>\\<turnstile>\\<langle>nrms,css,Normal s\\<rangle> \\<Rightarrow> t\n                    \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>\\<langle>[],(nrms,abrs)#css,Normal s\\<rangle> \\<Rightarrow> t\"\n\n| ExitBlockAbrupt: \"\\<Gamma>\\<turnstile>\\<langle>abrs,css,Normal s\\<rangle> \\<Rightarrow> t\n                    \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>\\<langle>[],(nrms,abrs)#css,Abrupt s\\<rangle> \\<Rightarrow> t\"\n\n| ExitBlockFault: \"\\<Gamma>\\<turnstile>\\<langle>nrms,css,Fault f\\<rangle> \\<Rightarrow> t\n                    \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>\\<langle>[],(nrms,abrs)#css,Fault f\\<rangle> \\<Rightarrow> t\"\n\n| ExitBlockStuck: \"\\<Gamma>\\<turnstile>\\<langle>nrms,css,Stuck\\<rangle> \\<Rightarrow> t\n                    \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>\\<langle>[],(nrms,abrs)#css,Stuck\\<rangle> \\<Rightarrow> t\"\n\n| Cons: \"\\<lbrakk>\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t; \\<Gamma>\\<turnstile>\\<langle>cs,css,t\\<rangle> \\<Rightarrow> u\\<rbrakk>\n         \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>\\<langle>c#cs,css,s\\<rangle> \\<Rightarrow> u\""], ["", "inductive_cases execs_elim_cases [cases set]:\n \"\\<Gamma>\\<turnstile>\\<langle>[],css,s\\<rangle> \\<Rightarrow> t\"\n \"\\<Gamma>\\<turnstile>\\<langle>c#cs,css,s\\<rangle> \\<Rightarrow> t\""], ["", "ML \\<open>\n  ML_Thms.bind_thm (\"converse_rtrancl_induct3\", Split_Rule.split_rule @{context}\n    (Rule_Insts.read_instantiate @{context}\n      [(((\"a\", 0), Position.none), \"(cs, css, s)\"),\n       (((\"b\", 0), Position.none), \"(cs', css', t)\")] []\n      @{thm converse_rtranclp_induct}));\n\\<close>"], ["", "lemma execs_Fault_end:\n  assumes execs: \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\" shows \"s=Fault f\\<Longrightarrow> t=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Fault f \\<Longrightarrow> t = Fault f", "using execs"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s = Fault f \\<Longrightarrow> t = Fault f", "by (induct) (auto dest: Fault_end)"], ["", "lemma execs_Stuck_end:\n  assumes execs: \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\" shows \"s=Stuck \\<Longrightarrow> t=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> t = Stuck", "using execs"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> t = Stuck", "by (induct) (auto dest: Stuck_end)"], ["", "theorem steps_impl_execs:\n  assumes steps: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* ([],[],t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* ([], [], t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t", "proof (induct rule: converse_rtrancl_induct3 [consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>[],[],t\\<rangle> \\<Rightarrow> t\n 2. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (ab, ac, ba) \\<rightarrow>\\<^sup>* ([], [], t);\n        \\<Gamma>\\<turnstile> \\<langle>ab,ac,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,aa,b\\<rangle> \\<Rightarrow> t", "show \"\\<Gamma>\\<turnstile>\\<langle>[],[],t\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>[],[],t\\<rangle> \\<Rightarrow> t", "by (rule execs.Nil)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>[],[],t\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (ab, ac, ba) \\<rightarrow>\\<^sup>* ([], [], t);\n        \\<Gamma>\\<turnstile> \\<langle>ab,ac,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,aa,b\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (ab, ac, ba) \\<rightarrow>\\<^sup>* ([], [], t);\n        \\<Gamma>\\<turnstile> \\<langle>ab,ac,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,aa,b\\<rangle> \\<Rightarrow> t", "fix cs css s cs' css' w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (ab, ac, ba) \\<rightarrow>\\<^sup>* ([], [], t);\n        \\<Gamma>\\<turnstile> \\<langle>ab,ac,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,aa,b\\<rangle> \\<Rightarrow> t", "assume step: \"\\<Gamma>\\<turnstile>(cs,css, s) \\<rightarrow> (cs',css', w)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css', w)\n\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (ab, ac, ba) \\<rightarrow>\\<^sup>* ([], [], t);\n        \\<Gamma>\\<turnstile> \\<langle>ab,ac,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,aa,b\\<rangle> \\<Rightarrow> t", "assume execs: \"\\<Gamma>\\<turnstile>\\<langle>cs',css',w\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs',css',w\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile> (ab, ac, ba) \\<rightarrow>\\<^sup>* ([], [], t);\n        \\<Gamma>\\<turnstile> \\<langle>ab,ac,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,aa,b\\<rangle> \\<Rightarrow> t", "from step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css', w)", "show \"\\<Gamma>\\<turnstile>\\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css', w)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t", "proof (cases)"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>cs = Skip # cs'; s = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>cs = Guard f g c # cs; s = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>cs = Guard f g c # cs'; s = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>cs = c # cs'; s = Fault f; css' = css; w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>cs = []; css = (cs', abrs) # css'; s = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>cs = c # cs'; s = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>cs = []; css = (cs', abrs) # css'; s = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>cs = []; css = (nrms, cs') # css'; s = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>cs = Basic f # cs'; s = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>cs = Spec r # cs'; s = Normal s; css' = css; w = Normal ta;\n         (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\nA total of 23 subgoals...", "case (Catch c1 c2 cs s)"], ["proof (state)\nthis:\n  csa__ = Catch c1 c2 # cs\n  sa__ = Normal s\n  cs' = [c1]\n  css' = (cs, c2 # cs) # css\n  w = Normal s\n\ngoal (23 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 23 subgoals...", "with execs"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>cs',css',w\\<rangle> \\<Rightarrow> t\n  csa__ = Catch c1 c2 # cs\n  sa__ = Normal s\n  cs' = [c1]\n  css' = (cs, c2 # cs) # css\n  w = Normal s", "obtain t' where\n      exec_c1: \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\" and\n      execs_rest: \"\\<Gamma>\\<turnstile>\\<langle>[],(cs, c2 # cs) # css,t'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>cs',css',w\\<rangle> \\<Rightarrow> t\n  csa__ = Catch c1 c2 # cs\n  sa__ = Normal s\n  cs' = [c1]\n  css' = (cs, c2 # cs) # css\n  w = Normal s\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n             s\\<rangle> \\<Rightarrow> t';\n         \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n    css,t'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp elim!: execs_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n\ngoal (23 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 23 subgoals...", "have  \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2 # cs,css,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "proof (cases t')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case (Normal t'')"], ["proof (state)\nthis:\n  t' = Normal t''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Normal t''", "have \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Normal t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal s\\<rangle> \\<Rightarrow> t'", "by (auto intro: exec.CatchMiss)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Normal t''", "have \"\\<Gamma>\\<turnstile>\\<langle>cs,css,t'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Normal t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,t'\\<rangle> \\<Rightarrow> t", "by (cases) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,t'\\<rangle> \\<Rightarrow> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,t'\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,t'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case (Abrupt t'')"], ["proof (state)\nthis:\n  t' = Abrupt t''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Abrupt"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Abrupt t''", "have \"\\<Gamma>\\<turnstile>\\<langle>c2#cs,css,Normal t''\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Abrupt t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c2 #\n                                  cs,css,Normal t''\\<rangle> \\<Rightarrow> t", "by (cases) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2 #\n                                cs,css,Normal t''\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c2 #\n                                cs,css,Normal t''\\<rangle> \\<Rightarrow> t", "obtain v where\n          exec_c2: \"\\<Gamma>\\<turnstile>\\<langle>c2,Normal t''\\<rangle> \\<Rightarrow> v\" and\n          rest: \"\\<Gamma>\\<turnstile>\\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c2 #\n                                cs,css,Normal t''\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c2,Normal\n             t''\\<rangle> \\<Rightarrow> v;\n         \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from exec_c1 Abrupt exec_c2"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Abrupt t''\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal t''\\<rangle> \\<Rightarrow> v", "have \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> v\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Abrupt t''\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal t''\\<rangle> \\<Rightarrow> v\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal s\\<rangle> \\<Rightarrow> v", "by  - (rule exec.CatchMatch, auto)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> v\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from this rest"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case (Fault f)"], ["proof (state)\nthis:\n  t' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Fault f", "have \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal\n s\\<rangle> \\<Rightarrow> Fault f", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Fault"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Fault f", "have \"\\<Gamma>\\<turnstile>\\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t", "by (cases) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case Stuck"], ["proof (state)\nthis:\n  t' = Stuck\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck", "have \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal s\\<rangle> \\<Rightarrow> Stuck", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Stuck"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Stuck", "have \"\\<Gamma>\\<turnstile>\\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, c2 # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t", "by (cases) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (23 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 23 subgoals...", "with Catch"], ["proof (chain)\npicking this:\n  csa__ = Catch c1 c2 # cs\n  sa__ = Normal s\n  cs' = [c1]\n  css' = (cs, c2 # cs) # css\n  w = Normal s\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  csa__ = Catch c1 c2 # cs\n  sa__ = Normal s\n  cs' = [c1]\n  css' = (cs, c2 # cs) # css\n  w = Normal s\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1 c2 #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n\ngoal (22 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>cs = Skip # cs'; s = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>cs = Guard f g c # cs; s = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>cs = Guard f g c # cs'; s = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>cs = c # cs'; s = Fault f; css' = css; w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>cs = []; css = (cs', abrs) # css'; s = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>cs = c # cs'; s = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>cs = []; css = (cs', abrs) # css'; s = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>cs = []; css = (nrms, cs') # css'; s = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>cs = Basic f # cs'; s = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>cs = Spec r # cs'; s = Normal s; css' = css; w = Normal ta;\n         (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\nA total of 22 subgoals...", "case (Call p bdy cs s)"], ["proof (state)\nthis:\n  csa__ = Call p # cs\n  sa__ = Normal s\n  cs' = [bdy]\n  css' = (cs, Throw # cs) # css\n  w = Normal s\n  \\<Gamma> p = Some bdy\n\ngoal (22 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 22 subgoals...", "have bdy: \"\\<Gamma> p = Some bdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (22 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 22 subgoals...", "from Call execs"], ["proof (chain)\npicking this:\n  csa__ = Call p # cs\n  sa__ = Normal s\n  cs' = [bdy]\n  css' = (cs, Throw # cs) # css\n  w = Normal s\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> \\<langle>cs',css',w\\<rangle> \\<Rightarrow> t", "obtain t' where\n      exec_body: \"\\<Gamma>\\<turnstile>\\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\" and\n      execs_rest:\n            \"\\<Gamma>\\<turnstile>\\<langle>[],(cs,Throw#cs)#css ,t'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  csa__ = Call p # cs\n  sa__ = Normal s\n  cs' = [bdy]\n  css' = (cs, Throw # cs) # css\n  w = Normal s\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> \\<langle>cs',css',w\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n              s\\<rangle> \\<Rightarrow> t';\n         \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n    css,t'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp elim!: execs_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n\ngoal (22 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 22 subgoals...", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p # cs,css,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "proof (cases t')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case (Normal t'')"], ["proof (state)\nthis:\n  t' = Normal t''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_body bdy"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Normal t''", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p ,Normal s\\<rangle> \\<Rightarrow> Normal t''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Normal t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal\ns\\<rangle> \\<Rightarrow> Normal t''", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Normal t''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Normal t''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Normal t''", "have \"\\<Gamma>\\<turnstile>\\<langle>cs,css ,Normal t''\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Normal t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,Normal t''\\<rangle> \\<Rightarrow> t", "by cases auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Normal t''\\<rangle> \\<Rightarrow> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 4. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Normal t''\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Normal t''\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Normal t''\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Normal t''\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case (Abrupt t'')"], ["proof (state)\nthis:\n  t' = Abrupt t''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_body bdy"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Abrupt t''", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Abrupt t''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Abrupt t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal\ns\\<rangle> \\<Rightarrow> Abrupt t''", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Abrupt t''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Abrupt t''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Abrupt"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Abrupt t''", "have\n        \"\\<Gamma>\\<turnstile>\\<langle>Throw # cs,css,Normal t''\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Abrupt t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Throw #\n                                  cs,css,Normal t''\\<rangle> \\<Rightarrow> t", "by (cases) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Throw #\n                                cs,css,Normal t''\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Throw #\n                                cs,css,Normal t''\\<rangle> \\<Rightarrow> t", "obtain v where v: \"\\<Gamma>\\<turnstile>\\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\" \"\\<Gamma>\\<turnstile>\\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Throw #\n                                cs,css,Normal t''\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n                t''\\<rangle> \\<Rightarrow> v;\n         \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp elim!: execs_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from v"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t", "have \"v=Abrupt t''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. v = Abrupt t''", "by (auto elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  v = Abrupt t''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 3. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Abrupt t''\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n  v = Abrupt t''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow> Abrupt t''\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal t''\\<rangle> \\<Rightarrow> v\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,v\\<rangle> \\<Rightarrow> t\n  v = Abrupt t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (auto intro: execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case (Fault f)"], ["proof (state)\nthis:\n  t' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_body bdy"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Fault f", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal s\\<rangle> \\<Rightarrow> Fault f", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Fault"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Fault f", "have \"\\<Gamma>\\<turnstile>\\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t", "by (cases) (auto elim: execs_elim_cases dest: Fault_end)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                     cs,css,Normal\n       s\\<rangle> \\<Rightarrow> t\n 2. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Fault f\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "case Stuck"], ["proof (state)\nthis:\n  t' = Stuck\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "with exec_body bdy"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Stuck", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma> p = Some bdy\n  t' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal s\\<rangle> \\<Rightarrow> Stuck", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "from execs_rest Stuck"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Stuck", "have \"\\<Gamma>\\<turnstile>\\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[],(cs, Throw # cs) #\n                                   css,t'\\<rangle> \\<Rightarrow> t\n  t' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t", "by (cases) (auto elim: execs_elim_cases dest: Stuck_end)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                  cs,css,Normal s\\<rangle> \\<Rightarrow> t", "by (rule execs.Cons)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (22 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 22 subgoals...", "with Call"], ["proof (chain)\npicking this:\n  csa__ = Call p # cs\n  sa__ = Normal s\n  cs' = [bdy]\n  css' = (cs, Throw # cs) # css\n  w = Normal s\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  csa__ = Call p # cs\n  sa__ = Normal s\n  cs' = [bdy]\n  css' = (cs, Throw # cs) # css\n  w = Normal s\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> \\<langle>Call p #\n                                cs,css,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n\ngoal (21 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>csa__ = Skip # cs'; sa__ = Normal s; css' = css;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c cs.\n       \\<lbrakk>csa__ = Guard f g c # cs; sa__ = Normal s; cs' = c # cs;\n        css' = css; w = Normal s; s \\<in> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c.\n       \\<lbrakk>csa__ = Guard f g c # cs'; sa__ = Normal s; css' = css;\n        w = Fault f; s \\<notin> g\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Fault f; css' = css;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 5. \\<And>abrs f.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Fault f;\n        w = Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s.\n       \\<lbrakk>csa__ = c # cs'; sa__ = Abrupt s; css' = css;\n        w = Abrupt s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 7. \\<And>abrs s.\n       \\<lbrakk>csa__ = []; css = (cs', abrs) # css'; sa__ = Normal s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 8. \\<And>nrms s.\n       \\<lbrakk>csa__ = []; css = (nrms, cs') # css'; sa__ = Abrupt s;\n        w = Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 9. \\<And>f s.\n       \\<lbrakk>csa__ = Basic f # cs'; sa__ = Normal s; css' = css;\n        w = Normal (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\n 10. \\<And>s ta r.\n        \\<lbrakk>csa__ = Spec r # cs'; sa__ = Normal s; css' = css;\n         w = Normal ta; (s, ta) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>csa__,css,sa__\\<rangle> \\<Rightarrow> t\nA total of 21 subgoals...", "qed (insert execs,\n      (blast intro:execs.intros exec.intros elim!: execs_elim_cases)+)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>cs,css,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem steps_impl_exec:\n  assumes steps: \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* ([],[],t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "using steps_impl_execs [OF steps]"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>[c],[],s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "by (blast elim: execs_elim_cases)"], ["", "corollary steps_eq_exec: \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* ([],[],t) = \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>* ([], [], t) =\n    \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "by (blast intro: steps_impl_exec exec_impl_steps)"], ["", "subsection \\<open>Infinite Computations: \\<open>inf \\<Gamma> cs css s\\<close>\\<close>"], ["", "definition inf ::\n \"[('s,'p,'f) body,('s,'p,'f) com list,('s,'p,'f) continuation list,('s,'f) xstate]\n  \\<Rightarrow> bool\"\nwhere \"inf \\<Gamma> cs css s = (\\<exists>f. f 0 = (cs,css,s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f(Suc i)))\""], ["", "lemma not_infI: \"\\<lbrakk>\\<And>f. \\<lbrakk>f 0 = (cs,css,s); \\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\\<rbrakk> \\<Longrightarrow> False\\<rbrakk>\n                \\<Longrightarrow> \\<not>inf \\<Gamma> cs css s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (cs, css, s);\n         \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> False) \\<Longrightarrow>\n    \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s", "by (auto simp add: inf_def)"], ["", "subsection \\<open>Equivalence of Termination and Absence of Infinite Computations\\<close>"], ["", "inductive \"terminatess\":: \"[('s,'p,'f) body,('s,'p,'f) com list,\n                            ('s,'p,'f) continuation list,('s,'f) xstate] \\<Rightarrow> bool\"\n                (\"_\\<turnstile>_,_ \\<Down> _\" [60,20,60] 89)\n  for  \\<Gamma>::\"('s,'p,'f) body\"\nwhere\n   Nil: \"\\<Gamma>\\<turnstile>[],[]\\<Down>s\"\n\n|  ExitBlockNormal: \"\\<Gamma>\\<turnstile>nrms,css\\<Down>Normal s\n                     \\<Longrightarrow>\n                     \\<Gamma>\\<turnstile>[],(nrms,abrs)#css\\<Down>Normal s\"\n\n|  ExitBlockAbrupt: \"\\<Gamma>\\<turnstile>abrs,css\\<Down>Normal s\n                     \\<Longrightarrow>\n                     \\<Gamma>\\<turnstile>[],(nrms,abrs)#css\\<Down>Abrupt s\"\n\n|  ExitBlockFault: \"\\<Gamma>\\<turnstile>nrms,css\\<Down>Fault f\n                    \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>[],(nrms,abrs)#css\\<Down>Fault f\"\n\n|  ExitBlockStuck: \"\\<Gamma>\\<turnstile>nrms,css\\<Down>Stuck\n                    \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>[],(nrms,abrs)#css\\<Down>Stuck\"\n\n\n|  Cons: \"\\<lbrakk>\\<Gamma>\\<turnstile>c\\<down>s; (\\<forall>t. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow> \\<Gamma>\\<turnstile>cs,css\\<Down>t)\\<rbrakk>\n          \\<Longrightarrow>\n          \\<Gamma>\\<turnstile>c#cs,css\\<Down>s\""], ["", "inductive_cases terminatess_elim_cases [cases set]:\n \"\\<Gamma>\\<turnstile>[],css\\<Down>t\"\n \"\\<Gamma>\\<turnstile>c#cs,css\\<Down>t\""], ["", "lemma terminatess_Fault: \"\\<And>cs. \\<Gamma>\\<turnstile>cs,css\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f", "proof (induct css)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f\n 2. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f\n 2. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "show \"\\<Gamma>\\<turnstile>cs,[]\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],[] \\<Down> Fault f\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Fault f", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],[] \\<Down> Fault f\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Fault f", "show \"\\<Gamma>\\<turnstile>[],[]\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],[] \\<Down> Fault f", "by (rule terminatess.Nil)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],[] \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Fault f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Fault f", "case (Cons c cs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Fault f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c # cs,[] \\<Down> Fault f", "by (auto intro: terminatess.intros terminates.intros dest: Fault_end)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c # cs,[] \\<Down> Fault f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,[] \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "case (Cons d css)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>?cs,css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "have hyp: \"\\<And>cs. \\<Gamma>\\<turnstile>cs,css\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>?cs,css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "obtain nrms abrs where d: \"d=(nrms,abrs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nrms abrs.\n        d = (nrms, abrs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases d) auto"], ["proof (state)\nthis:\n  d = (nrms, abrs)\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "have \"\\<Gamma>\\<turnstile>cs,(nrms,abrs)#css\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Fault f\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Fault f", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Fault f\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Fault f", "show \"\\<Gamma>\\<turnstile>[],(nrms, abrs) # css\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Fault f", "by (rule terminatess.ExitBlockFault) (rule hyp)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Fault f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Fault f", "case (Cons c cs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Fault f", "have hyp1: \"\\<Gamma>\\<turnstile>cs,(nrms, abrs) # css\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Fault f", "show \"\\<Gamma>\\<turnstile>c#cs,(nrms, abrs)#css\\<Down>Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c # cs,(nrms, abrs) # css \\<Down> Fault f", "by (auto intro: hyp1 terminatess.Cons terminates.intros dest: Fault_end)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c # cs,(nrms, abrs) # css \\<Down> Fault f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Fault f", "with d"], ["proof (chain)\npicking this:\n  d = (nrms, abrs)\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f", "show ?case"], ["proof (prove)\nusing this:\n  d = (nrms, abrs)\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,d # css \\<Down> Fault f", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,d # css \\<Down> Fault f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma terminatess_Stuck: \"\\<And>cs. \\<Gamma>\\<turnstile>cs,css\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck", "proof (induct css)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck\n 2. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck\n 2. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "show \"\\<Gamma>\\<turnstile>cs,[]\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],[] \\<Down> Stuck\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Stuck", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],[] \\<Down> Stuck\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Stuck", "show \"\\<Gamma>\\<turnstile>[],[]\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],[] \\<Down> Stuck", "by (rule terminatess.Nil)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],[] \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Stuck", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Stuck", "case (Cons c cs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,[] \\<Down> Stuck", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c # cs,[] \\<Down> Stuck", "by (auto intro: terminatess.intros terminates.intros dest: Stuck_end)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c # cs,[] \\<Down> Stuck\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,[] \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "case (Cons d css)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>?cs,css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "have hyp: \"\\<And>cs. \\<Gamma>\\<turnstile>cs,css\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs. \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>?cs,css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "obtain nrms abrs where d: \"d=(nrms,abrs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nrms abrs.\n        d = (nrms, abrs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases d) auto"], ["proof (state)\nthis:\n  d = (nrms, abrs)\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "have \"\\<Gamma>\\<turnstile>cs,(nrms,abrs)#css\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Stuck\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Stuck", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Stuck\n 2. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Stuck", "show \"\\<Gamma>\\<turnstile>[],(nrms, abrs) # css\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Stuck", "by (rule terminatess.ExitBlockStuck) (rule hyp)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(nrms, abrs) # css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Stuck", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Stuck", "case (Cons c cs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Stuck", "have hyp1: \"\\<Gamma>\\<turnstile>cs,(nrms, abrs) # css\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a cs.\n       \\<Gamma>\\<turnstile>cs,(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>a # cs,(nrms, abrs) # css \\<Down> Stuck", "show \"\\<Gamma>\\<turnstile>c#cs,(nrms, abrs)#css\\<Down>Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c # cs,(nrms, abrs) # css \\<Down> Stuck", "by (auto intro: hyp1 terminatess.Cons terminates.intros dest: Stuck_end)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c # cs,(nrms, abrs) # css \\<Down> Stuck\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a css cs.\n       (\\<And>cs.\n           \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,a # css \\<Down> Stuck", "with d"], ["proof (chain)\npicking this:\n  d = (nrms, abrs)\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck", "show ?case"], ["proof (prove)\nusing this:\n  d = (nrms, abrs)\n  \\<Gamma>\\<turnstile>cs,(nrms, abrs) # css \\<Down> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,d # css \\<Down> Stuck", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,d # css \\<Down> Stuck\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Basic_terminates: \"\\<Gamma>\\<turnstile>Basic f \\<down> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Basic f \\<down> t", "by (cases t) (auto intro: terminates.intros)"], ["", "lemma step_preserves_terminations:\n  assumes step: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow> (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>cs,css\\<Down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>cs',css'\\<Down>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs',css' \\<Down> t", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow> (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs',css' \\<Down> t", "proof (induct)"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Skip # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 2. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c # cs,css \\<Down> Normal s\n 3. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 4. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 5. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 6. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 8. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 9. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 10. \\<And>s t r cs css.\n        \\<lbrakk>(s, t) \\<in> r;\n         \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\nA total of 23 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip # cs_,css_ \\<Down> Normal s_\n\ngoal (23 subgoals):\n 1. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Skip # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 2. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c # cs,css \\<Down> Normal s\n 3. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 4. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 5. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 6. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 8. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 9. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 10. \\<And>s t r cs css.\n        \\<lbrakk>(s, t) \\<in> r;\n         \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\nA total of 23 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Skip # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal s_", "by (auto elim: terminates_Normal_elim_cases terminatess_elim_cases\n             intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal s_\n\ngoal (22 subgoals):\n 1. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c # cs,css \\<Down> Normal s\n 2. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 3. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 4. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 6. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 7. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 8. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 9. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 10. \\<And>s r cs css.\n        \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n         \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c # cs,css \\<Down> Normal s\n 2. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 3. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 4. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 6. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 7. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 8. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 9. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 10. \\<And>s r cs css.\n        \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n         \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 22 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (22 subgoals):\n 1. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c # cs,css \\<Down> Normal s\n 2. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 3. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 4. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 6. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 7. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 8. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 9. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 10. \\<And>s r cs css.\n        \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n         \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 22 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c_ # cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n             intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (21 subgoals):\n 1. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 2. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 3. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 4. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 5. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 6. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 7. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 8. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 9. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 2. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 3. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 4. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 5. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 6. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 7. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 8. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 9. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\nA total of 21 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (21 subgoals):\n 1. \\<And>s g f c cs css.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 2. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 3. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 4. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 5. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 6. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 7. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 8. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 9. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\nA total of 21 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Fault f_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Fault f_\n\ngoal (20 subgoals):\n 1. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 2. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 3. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 4. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 5. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 6. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 7. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 8. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                             cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n        cs,css \\<Down> Normal s\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 2. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 3. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 4. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 5. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 6. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 7. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 8. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                             cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n        cs,css \\<Down> Normal s\nA total of 20 subgoals...", "case FaultProp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ # cs_,css_ \\<Down> Fault f_\n\ngoal (20 subgoals):\n 1. \\<And>c cs css f.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Fault f\n 2. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 3. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 4. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 5. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 6. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 7. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 8. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                             cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n        cs,css \\<Down> Normal s\nA total of 20 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Fault f_", "by (rule terminatess_Fault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Fault f_\n\ngoal (19 subgoals):\n 1. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 2. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 3. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 4. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 5. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 6. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 7. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                             cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n        cs,css \\<Down> Normal s\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 2. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 3. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 4. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 5. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 6. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 7. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                             cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n        cs,css \\<Down> Normal s\nA total of 19 subgoals...", "case FaultPropBlock"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(nrms_, abrs_) # css_ \\<Down> Fault f_\n\ngoal (19 subgoals):\n 1. \\<And>nrms abrs css f.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n 2. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 3. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 4. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 5. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 6. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 7. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                             cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n        cs,css \\<Down> Normal s\nA total of 19 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>nrms_,css_ \\<Down> Fault f_", "by (rule terminatess_Fault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms_,css_ \\<Down> Fault f_\n\ngoal (18 subgoals):\n 1. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 2. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 3. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 4. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 5. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 6. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 10. \\<And>s b c cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n        While b c # cs,css \\<Down> Normal s\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 2. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 3. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 4. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 5. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 6. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 10. \\<And>s b c cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n        While b c # cs,css \\<Down> Normal s\nA total of 18 subgoals...", "case AbruptProp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ # cs_,css_ \\<Down> Abrupt s_\n\ngoal (18 subgoals):\n 1. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 2. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 3. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 4. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 5. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 6. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 10. \\<And>s b c cs css.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n        While b c # cs,css \\<Down> Normal s\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c_ # cs_,css_ \\<Down> Abrupt s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Abrupt s_", "by (blast elim: terminatess_elim_cases\n              intro: terminatess.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Abrupt s_\n\ngoal (17 subgoals):\n 1. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 2. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 3. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 4. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 5. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 9. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 10. \\<And>s b c cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 2. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 3. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 4. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 5. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 9. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 10. \\<And>s b c cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\nA total of 17 subgoals...", "case ExitBlockNormal"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(nrms_, abrs_) # css_ \\<Down> Normal s_\n\ngoal (17 subgoals):\n 1. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n 2. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 3. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 4. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 5. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 9. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 10. \\<And>s b c cs css.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[],(nrms_, abrs_) # css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>nrms_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases\n              intro: terminatess.intros )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms_,css_ \\<Down> Normal s_\n\ngoal (16 subgoals):\n 1. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 2. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 3. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 4. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 8. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 9. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 10. \\<And>p bdy cs css s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n              css \\<Down> Normal s\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 2. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 3. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 4. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 8. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 9. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 10. \\<And>p bdy cs css s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n              css \\<Down> Normal s\nA total of 16 subgoals...", "case ExitBlockAbrupt"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(nrms_, abrs_) # css_ \\<Down> Abrupt s_\n\ngoal (16 subgoals):\n 1. \\<And>nrms abrs css s.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Abrupt s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n 2. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 3. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 4. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 8. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 9. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 10. \\<And>p bdy cs css s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n              css \\<Down> Normal s\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[],(nrms_, abrs_) # css_ \\<Down> Abrupt s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>abrs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases\n              intro: terminatess.intros )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>abrs_,css_ \\<Down> Normal s_\n\ngoal (15 subgoals):\n 1. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 2. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 3. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 7. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 8. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 9. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 10. \\<And>p cs css s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 2. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 3. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 7. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 8. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 9. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 10. \\<And>p cs css s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 15 subgoals...", "case Basic"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Basic f_ # cs_,css_ \\<Down> Normal s_\n\ngoal (15 subgoals):\n 1. \\<And>f cs css s.\n       \\<Gamma>\\<turnstile>Basic f #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Normal (f s)\n 2. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 3. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 7. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 8. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 9. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 10. \\<And>p cs css s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Basic f_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal (f_ s_)", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal (f_ s_)\n\ngoal (14 subgoals):\n 1. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 2. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 6. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 7. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 8. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 9. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>c cs css.\n        \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 2. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 6. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 7. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 8. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 9. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>c cs css.\n        \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 14 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n  \\<Gamma>\\<turnstile>Spec r_ # cs_,css_ \\<Down> Normal s_\n\ngoal (14 subgoals):\n 1. \\<And>s t r cs css.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t\n 2. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 6. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 7. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 8. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 9. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>c cs css.\n        \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n  \\<Gamma>\\<turnstile>Spec r_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal t_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal t_\n\ngoal (13 subgoals):\n 1. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 5. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 6. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 7. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 8. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>nrms abrs css.\n        \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                               css \\<Down> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 5. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 6. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 7. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 8. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>nrms abrs css.\n        \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                               css \\<Down> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\nA total of 13 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n  \\<Gamma>\\<turnstile>Spec r_ # cs_,css_ \\<Down> Normal s_\n\ngoal (13 subgoals):\n 1. \\<And>s r cs css.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 5. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 6. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 7. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 8. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 10. \\<And>nrms abrs css.\n        \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                               css \\<Down> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n  \\<Gamma>\\<turnstile>Spec r_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Stuck", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Stuck\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 4. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 5. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 6. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 7. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 10. \\<And>c cs css s.\n        \\<Gamma>\\<turnstile>DynCom c #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 4. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 5. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 6. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 7. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 10. \\<And>c cs css s.\n        \\<Gamma>\\<turnstile>DynCom c #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\nA total of 12 subgoals...", "case Seq"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c\\<^sub>1_ c\\<^sub>2_ # cs_,css_ \\<Down> Normal s_\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs,css \\<Down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 4. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 5. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 6. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 7. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 9. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 10. \\<And>c cs css s.\n        \\<Gamma>\\<turnstile>DynCom c #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq c\\<^sub>1_ c\\<^sub>2_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1_ # c\\<^sub>2_ # cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ # c\\<^sub>2_ # cs_,css_ \\<Down> Normal s_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 3. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 4. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 5. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 6. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 9. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 10. \\<And>cs css s.\n        \\<Gamma>\\<turnstile>Throw #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 3. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 4. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 5. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 6. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 9. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 10. \\<And>cs css s.\n        \\<Gamma>\\<turnstile>Throw #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\nA total of 11 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ #\n                      cs_,css_ \\<Down> Normal s_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 #\n       cs,css \\<Down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 3. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 4. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 5. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 6. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 8. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 9. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 10. \\<And>cs css s.\n        \\<Gamma>\\<turnstile>Throw #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ #\n                      cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1_ # cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ # cs_,css_ \\<Down> Normal s_\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 2. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 3. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 4. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 5. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 8. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 9. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 10. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n  css \\<Down> Normal s", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 2. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 3. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 4. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 5. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 8. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 9. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 10. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n  css \\<Down> Normal s", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ #\n                      cs_,css_ \\<Down> Normal s_\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 #\n       cs,css \\<Down> Normal s\n 2. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 3. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 4. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 5. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 7. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 8. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 9. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 10. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                            cs,css \\<Down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n  css \\<Down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ #\n                      cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2_ # cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ # cs_,css_ \\<Down> Normal s_\n\ngoal (9 subgoals):\n 1. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 2. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 3. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 4. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 7. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 8. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 9. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 2. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 3. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 4. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 7. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 8. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 9. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case WhileTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>While b_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (9 subgoals):\n 1. \\<And>s b c cs css.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c #\n       While b c # cs,css \\<Down> Normal s\n 2. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 3. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 4. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 6. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 7. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 8. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 9. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>While b_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c_ # While b_ c_ # cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ # While b_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (8 subgoals):\n 1. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 2. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 3. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 6. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 7. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 8. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 2. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 3. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 6. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 7. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 8. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>While b_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (8 subgoals):\n 1. \\<And>s b c cs css.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Normal s\n 2. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 3. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 5. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 6. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 7. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 8. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>While b_ c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Normal s_\n\ngoal (7 subgoals):\n 1. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 2. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 6. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 2. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 6. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case (Call p bdy cs css s)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\n\ngoal (7 subgoals):\n 1. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 2. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 6. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "have bdy: \"\\<Gamma> p = Some bdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (7 subgoals):\n 1. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 2. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 6. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "from Call"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s", "obtain\n    term_body: \"\\<Gamma>\\<turnstile>bdy \\<down> Normal s\" and\n    term_rest: \"\\<forall>t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> t \\<longrightarrow> \\<Gamma>\\<turnstile>cs,css\\<Down>t\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n      \\<forall>t.\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n         \\<Gamma>\\<turnstile>cs,css \\<Down> t\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce elim!: terminatess_elim_cases terminates_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Call\n                                    p,Normal\n s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n\ngoal (7 subgoals):\n 1. \\<And>p bdy cs css s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) #\n             css \\<Down> Normal s\n 2. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 4. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 5. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 6. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 7. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "show \"\\<Gamma>\\<turnstile>[bdy],(cs,Throw # cs)#css\\<Down>Normal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) # css \\<Down> Normal s", "proof (rule terminatess.Cons [OF term_body],clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n    s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n    s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "assume exec_body: \"\\<Gamma>\\<turnstile>\\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n    s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "show \"\\<Gamma>\\<turnstile>[],(cs,Throw # cs) # css\\<Down>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "proof (cases t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "case (Normal t')"], ["proof (state)\nthis:\n  t = Normal t'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "with exec_body bdy"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\n  \\<Gamma> p = Some bdy\n  t = Normal t'", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Normal t'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\n  \\<Gamma> p = Some bdy\n  t = Normal t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal\ns\\<rangle> \\<Rightarrow> Normal t'", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Normal t'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "with term_rest"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Call\n                                    p,Normal\n s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Normal t'", "have \"\\<Gamma>\\<turnstile>cs,css\\<Down>Normal t'\""], ["proof (prove)\nusing this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Call\n                                    p,Normal\n s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Normal t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t'", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "with Normal"], ["proof (chain)\npicking this:\n  t = Normal t'\n  \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t'", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Normal t'\n  \\<Gamma>\\<turnstile>cs,css \\<Down> Normal t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "by (auto intro: terminatess.intros terminates.intros\n                 elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "case (Abrupt t')"], ["proof (state)\nthis:\n  t = Abrupt t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "with exec_body bdy"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\n  \\<Gamma> p = Some bdy\n  t = Abrupt t'", "have \"\\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow> Abrupt t'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\n  \\<Gamma> p = Some bdy\n  t = Abrupt t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal\ns\\<rangle> \\<Rightarrow> Abrupt t'", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Abrupt t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "with term_rest"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Call\n                                    p,Normal\n s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Abrupt t'", "have \"\\<Gamma>\\<turnstile>cs,css\\<Down>Abrupt t'\""], ["proof (prove)\nusing this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Call\n                                    p,Normal\n s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal s\\<rangle> \\<Rightarrow> Abrupt t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt t'", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "with Abrupt"], ["proof (chain)\npicking this:\n  t = Abrupt t'\n  \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt t'", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Abrupt t'\n  \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "by (fastforce intro: terminatess.intros terminates.intros\n                     elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "case Fault"], ["proof (state)\nthis:\n  t = Fault x3_\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n 2. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Fault x3_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "by (iprover intro: terminatess_Fault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "case Stuck"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t", "by (iprover intro: terminatess_Stuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, Throw # cs) # css \\<Down> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[bdy],(cs, Throw # cs) # css \\<Down> Normal s\n\ngoal (6 subgoals):\n 1. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 4. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 5. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 6. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 4. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 5. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 6. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case CallUndefined"], ["proof (state)\nthis:\n  \\<Gamma> p_ = None\n  \\<Gamma>\\<turnstile>Call p_ # cs_,css_ \\<Down> Normal s_\n\ngoal (6 subgoals):\n 1. \\<And>p cs css s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p # cs,css \\<Down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 3. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 4. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 5. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 6. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = None\n  \\<Gamma>\\<turnstile>Call p_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Stuck", "by (iprover intro: terminatess_Stuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Stuck\n\ngoal (5 subgoals):\n 1. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 3. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 4. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 5. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 3. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 4. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 5. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case StuckProp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ # cs_,css_ \\<Down> Stuck\n\ngoal (5 subgoals):\n 1. \\<And>c cs css.\n       \\<Gamma>\\<turnstile>c # cs,css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Stuck\n 2. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 3. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 4. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 5. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Stuck", "by (rule terminatess_Stuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Stuck\n\ngoal (4 subgoals):\n 1. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 2. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 3. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 4. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 2. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 3. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 4. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case StuckPropBlock"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(nrms_, abrs_) # css_ \\<Down> Stuck\n\ngoal (4 subgoals):\n 1. \\<And>nrms abrs css.\n       \\<Gamma>\\<turnstile>[],(nrms, abrs) #\n                              css \\<Down> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n 2. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 3. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 4. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>nrms_,css_ \\<Down> Stuck", "by (rule terminatess_Stuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms_,css_ \\<Down> Stuck\n\ngoal (3 subgoals):\n 1. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 2. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 3. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 2. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 3. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>DynCom c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (3 subgoals):\n 1. \\<And>c cs css s.\n       \\<Gamma>\\<turnstile>DynCom c #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s # cs,css \\<Down> Normal s\n 2. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 3. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>DynCom c_ # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c_ s_ # cs_,css_ \\<Down> Normal s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ s_ # cs_,css_ \\<Down> Normal s_\n\ngoal (2 subgoals):\n 1. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case Throw"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Throw # cs_,css_ \\<Down> Normal s_\n\ngoal (2 subgoals):\n 1. \\<And>cs css s.\n       \\<Gamma>\\<turnstile>Throw # cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> Abrupt s\n 2. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Throw # cs_,css_ \\<Down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Abrupt s_", "by (blast elim: terminatess_elim_cases terminates_Normal_elim_cases\n              intro: terminatess.intros terminates.intros exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs_,css_ \\<Down> Abrupt s_\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "case (Catch c1 c2 cs css s)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch c1 c2 # cs,css \\<Down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Catch c1 c2 # cs,css \\<Down> Normal s", "obtain\n    term_c1: \"\\<Gamma>\\<turnstile>c1 \\<down> Normal s\" and\n    term_c2: \"\\<forall>s'. \\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow> \\<Gamma>\\<turnstile>c2 \\<down> Normal s'\"and\n    term_rest: \"\\<forall>t. \\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> t \\<longrightarrow> \\<Gamma>\\<turnstile>cs,css\\<Down>t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch c1 c2 # cs,css \\<Down> Normal s\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n      \\<forall>s'.\n         \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n         \\<Gamma>\\<turnstile>c2 \\<down> Normal s';\n      \\<forall>t.\n         \\<Gamma>\\<turnstile> \\<langle>Catch c1\n  c2,Normal s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n         \\<Gamma>\\<turnstile>cs,css \\<Down> t\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp elim!: terminatess_elim_cases terminates_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s'\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                    c2,Normal\n  s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 c\\<^sub>2 cs css s.\n       \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 #\n                           cs,css \\<Down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs, c\\<^sub>2 # cs) #\n css \\<Down> Normal s", "show \"\\<Gamma>\\<turnstile>[c1],(cs, c2 # cs) # css\\<Down>Normal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[c1],(cs, c2 # cs) # css \\<Down> Normal s", "proof (rule terminatess.Cons [OF term_c1],clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "assume exec_c1: \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "show \"\\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css\\<Down>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "proof (cases t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "case (Normal t')"], ["proof (state)\nthis:\n  t = Normal t'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "with exec_c1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  t = Normal t'", "have \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  t = Normal t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "with term_rest"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                    c2,Normal\n  s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>\\<turnstile>cs,css\\<Down>t\""], ["proof (prove)\nusing this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                    c2,Normal\n  s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> t", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       t = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 4. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "with Normal"], ["proof (chain)\npicking this:\n  t = Normal t'\n  \\<Gamma>\\<turnstile>cs,css \\<Down> t", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Normal t'\n  \\<Gamma>\\<turnstile>cs,css \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "by (iprover intro: terminatess.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "case (Abrupt t')"], ["proof (state)\nthis:\n  t = Abrupt t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "with exec_c1 term_c2"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s'\n  t = Abrupt t'", "have \"\\<Gamma>\\<turnstile>c2 \\<down> Normal t'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s'\n  t = Abrupt t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c2 \\<down> Normal t'", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "{"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal t'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "fix w"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "assume exec_c2: \"\\<Gamma>\\<turnstile>\\<langle>c2,Normal t'\\<rangle> \\<Rightarrow> w\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal t'\\<rangle> \\<Rightarrow> w\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "have \"\\<Gamma>\\<turnstile>cs,css\\<Down>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> w", "from exec_c1 Abrupt exec_c2"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  t = Abrupt t'\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal t'\\<rangle> \\<Rightarrow> w", "have \"\\<Gamma>\\<turnstile>\\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow> w\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  t = Abrupt t'\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal t'\\<rangle> \\<Rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal s\\<rangle> \\<Rightarrow> w", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> w", "with term_rest"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                    c2,Normal\n  s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> w", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                    c2,Normal\n  s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal s\\<rangle> \\<Rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> w", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> w\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs,css \\<Down> ?w2\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       t = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 3. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal t'\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs,css \\<Down> ?w2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal t'\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs,css \\<Down> ?w2\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "using Abrupt"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal t'\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs,css \\<Down> ?w2\n  t = Abrupt t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "by (auto intro: terminatess.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "case Fault"], ["proof (state)\nthis:\n  t = Fault x3_\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       t = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n 2. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Fault x3_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "by (iprover intro: terminatess_Fault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "case Stuck"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t", "by (iprover intro: terminatess_Stuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[],(cs, c2 # cs) # css \\<Down> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[c1],(cs, c2 # cs) # css \\<Down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["", "ML \\<open>\n  ML_Thms.bind_thm (\"rtrancl_induct3\", Split_Rule.split_rule @{context}\n    (Rule_Insts.read_instantiate @{context}\n      [(((\"a\", 0), Position.none), \"(ax, ay, az)\"),\n       (((\"b\", 0), Position.none), \"(bx, by, bz)\")] []\n      @{thm rtranclp_induct}));\n\\<close>"], ["", "lemma steps_preserves_terminations:\n  assumes steps: \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* (cs',css',t)\"\n  shows \"\\<Gamma>\\<turnstile>cs,css\\<Down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>cs',css'\\<Down>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs',css' \\<Down> t", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* (cs', css', t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs',css' \\<Down> t", "proof (induct rule: rtrancl_induct3 [consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs,css \\<Down> s\n 2. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a,aa \\<Down> b;\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>ab,ac \\<Down> ba", "assume  \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs,css \\<Down> s\n 2. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a,aa \\<Down> b;\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>ab,ac \\<Down> ba", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s", "show \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a,aa \\<Down> b;\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>ab,ac \\<Down> ba", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a,aa \\<Down> b;\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>ab,ac \\<Down> ba", "fix cs'' css'' w cs' css' t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a,aa \\<Down> b;\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>ab,ac \\<Down> ba", "assume \"\\<Gamma>\\<turnstile>(cs'',css'', w) \\<rightarrow> (cs',css', t)\" \"\\<Gamma>\\<turnstile>cs,css\\<Down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>cs'',css''\\<Down>w\"\n         \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs'', css'', w) \\<rightarrow> (cs', css', t)\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs'',css'' \\<Down> w\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b ab ac ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                     (a, aa, b);\n        \\<Gamma>\\<turnstile> (a, aa, b) \\<rightarrow> (ab, ac, ba);\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a,aa \\<Down> b;\n        \\<Gamma>\\<turnstile>cs,css \\<Down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>ab,ac \\<Down> ba", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs'', css'', w) \\<rightarrow> (cs', css', t)\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs'',css'' \\<Down> w\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s", "show \"\\<Gamma>\\<turnstile>cs',css'\\<Down>t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs'', css'', w) \\<rightarrow> (cs', css', t)\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>cs'',css'' \\<Down> w\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs',css' \\<Down> t", "by (blast dest: step_preserves_terminations)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs',css' \\<Down> t\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem steps_preserves_termination:\n  assumes steps: \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* (c'#cs',css',t)\"\n  assumes term_c: \"\\<Gamma>\\<turnstile>c\\<down>s\"\n  shows \"\\<Gamma>\\<turnstile>c'\\<down>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> t", "from term_c"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c \\<down> s", "have \"\\<Gamma>\\<turnstile>[c],[]\\<Down>s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[c],[] \\<Down> s", "by (auto intro: terminatess.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> t", "from steps this"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                       (c' # cs', css', t)\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s", "have \"\\<Gamma>\\<turnstile>c'#cs',css'\\<Down>t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                       (c' # cs', css', t)\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' # cs',css' \\<Down> t", "by (rule steps_preserves_terminations)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' # cs',css' \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> t", "thus \"\\<Gamma>\\<turnstile>c'\\<down>t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c' # cs',css' \\<Down> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> t", "by (auto elim: terminatess_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' \\<down> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma renumber':\n  assumes f: \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\"\n  assumes a_b: \"(a,b) \\<in> r\\<^sup>*\"\n  shows \"b = f 0 \\<Longrightarrow> (\\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "using a_b"], ["proof (prove)\nusing this:\n  (a, b) \\<in> r\\<^sup>*\n\ngoal (1 subgoal):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "proof (induct rule: converse_rtrancl_induct [consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "assume \"b = f 0\""], ["proof (state)\nthis:\n  b = f 0\n\ngoal (2 subgoals):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "with f"], ["proof (chain)\npicking this:\n  \\<forall>i. (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r\n  b = f 0", "show \"\\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\""], ["proof (prove)\nusing this:\n  \\<forall>i. (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r\n  b = f 0\n\ngoal (1 subgoal):\n 1. \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by blast"], ["proof (state)\nthis:\n  \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "fix a z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "assume a_z: \"(a, z) \\<in> r\" and \"(z, b) \\<in> r\\<^sup>*\""], ["proof (state)\nthis:\n  (a, z) \\<in> r\n  (z, b) \\<in> r\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "assume \"b = f 0 \\<Longrightarrow> \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\"\n         \"b = f 0\""], ["proof (state)\nthis:\n  b = f 0 \\<Longrightarrow>\n  \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n  b = f 0\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "then"], ["proof (chain)\npicking this:\n  b = f 0 \\<Longrightarrow>\n  \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n  b = f 0", "obtain f where f0: \"f 0 = z\" and seq: \"\\<forall>i. (f i, f (Suc i)) \\<in> r\""], ["proof (prove)\nusing this:\n  b = f 0 \\<Longrightarrow>\n  \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n  b = f 0\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = z; \\<forall>i. (f i, f (Suc i)) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  f 0 = z\n  \\<forall>i. (f i, f (Suc i)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "{"], ["proof (state)\nthis:\n  f 0 = z\n  \\<forall>i. (f i, f (Suc i)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "have \"((\\<lambda>i. case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i) i, f i) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f i) \\<in> r", "using seq a_z f0"], ["proof (prove)\nusing this:\n  \\<forall>i. (f i, f (Suc i)) \\<in> r\n  (a, z) \\<in> r\n  f 0 = z\n\ngoal (1 subgoal):\n 1. (case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f i) \\<in> r", "by (cases i) auto"], ["proof (state)\nthis:\n  (case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "}"], ["proof (state)\nthis:\n  (case ?i2 of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f ?i2) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "then"], ["proof (chain)\npicking this:\n  (case ?i2 of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f ?i2) \\<in> r", "show \"\\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\""], ["proof (prove)\nusing this:\n  (case ?i2 of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f ?i2) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by - (rule exI [where x=\"\\<lambda>i. case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i\"],simp)"], ["proof (state)\nthis:\n  \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma renumber:\n \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\n \\<Longrightarrow> \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (a, f i) \\<in> r\\<^sup>* \\<and>\n       (f i, f (Suc i)) \\<in> r \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by(blast dest:renumber')"], ["", "lemma not_inf_Fault':\n  assumes enum_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\"\n  shows \"\\<And>k cs. f k = (cs,css,Fault m) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k cs. f k = (cs, css, Fault m) \\<Longrightarrow> False", "proof (induct css)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  f k = (cs, [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have f_k: \"f k = (cs,[],Fault m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = (cs, [], Fault m)", "by fact"], ["proof (state)\nthis:\n  f k = (cs, [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<And>k. f k = (cs,[],Fault m) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  f k = ([], [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"f k = ([], [], Fault m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = ([], [], Fault m)", "by fact"], ["proof (state)\nthis:\n  f k = ([], [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  f k = ([], [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  f k = ([], [], Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "show \"False\""], ["proof (prove)\nusing this:\n  f k = ([], [], Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons c cs)"], ["proof (state)\nthis:\n  f ?k = (cs, [], Fault m) \\<Longrightarrow> False\n  f k = (c # cs, [], Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have fk: \"f k = (c # cs, [], Fault m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = (c # cs, [], Fault m)", "by fact"], ["proof (state)\nthis:\n  f k = (c # cs, [], Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "with fk"], ["proof (chain)\npicking this:\n  f k = (c # cs, [], Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have \"f (Suc k) = (cs,[],Fault m)\""], ["proof (prove)\nusing this:\n  f k = (c # cs, [], Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc k) = (cs, [], Fault m)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc k) = (cs, [], Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Fault m) \\<Longrightarrow> False;\n        f k = (a # cs, [], Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "with enum_step Cons.hyps"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f ?k = (cs, [], Fault m) \\<Longrightarrow> False\n  f (Suc k) = (cs, [], Fault m)", "show False"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f ?k = (cs, [], Fault m) \\<Longrightarrow> False\n  f (Suc k) = (cs, [], Fault m)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?k = (cs, [], Fault m) \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Fault m) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "from this f_k"], ["proof (chain)\npicking this:\n  f ?k = (cs, [], Fault m) \\<Longrightarrow> False\n  f k = (cs, [], Fault m)", "show False"], ["proof (prove)\nusing this:\n  f ?k = (cs, [], Fault m) \\<Longrightarrow> False\n  f k = (cs, [], Fault m)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons ds css)"], ["proof (state)\nthis:\n  f ?k = (?cs, css, Fault m) \\<Longrightarrow> False\n  f k = (cs, ds # css, Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f ?k = (?cs, css, Fault m) \\<Longrightarrow> False\n  f k = (cs, ds # css, Fault m)", "obtain nrms abrs where ds: \"ds=(nrms,abrs)\""], ["proof (prove)\nusing this:\n  f ?k = (?cs, css, Fault m) \\<Longrightarrow> False\n  f k = (cs, ds # css, Fault m)\n\ngoal (1 subgoal):\n 1. (\\<And>nrms abrs.\n        ds = (nrms, abrs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ds) auto"], ["proof (state)\nthis:\n  ds = (nrms, abrs)\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have hyp: \"\\<And>k cs. f k = (cs,css,Fault m) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k cs. f k = (cs, css, Fault m) \\<Longrightarrow> False", "by fact"], ["proof (state)\nthis:\n  f ?k = (?cs, css, Fault m) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<And>k. f k = (cs,(nrms,abrs)#css,Fault m) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  f k = ([], (nrms, abrs) # css, Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have fk: \"f k = ([], (nrms, abrs) # css, Fault m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = ([], (nrms, abrs) # css, Fault m)", "by fact"], ["proof (state)\nthis:\n  f k = ([], (nrms, abrs) # css, Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "with fk"], ["proof (chain)\npicking this:\n  f k = ([], (nrms, abrs) # css, Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have \"f (Suc k) = (nrms,css,Fault m)\""], ["proof (prove)\nusing this:\n  f k = ([], (nrms, abrs) # css, Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc k) = (nrms, css, Fault m)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc k) = (nrms, css, Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  f (Suc k) = (nrms, css, Fault m)\n\ngoal (1 subgoal):\n 1. False", "by (rule hyp)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons c cs)"], ["proof (state)\nthis:\n  f ?k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n  f k = (c # cs, (nrms, abrs) # css, Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have fk: \"f k = (c#cs, (nrms, abrs) # css, Fault m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = (c # cs, (nrms, abrs) # css, Fault m)", "by fact"], ["proof (state)\nthis:\n  f k = (c # cs, (nrms, abrs) # css, Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "have hyp1: \"\\<And>k. f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False", "by fact"], ["proof (state)\nthis:\n  f ?k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "with fk"], ["proof (chain)\npicking this:\n  f k = (c # cs, (nrms, abrs) # css, Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have \"f (Suc k) = (cs,(nrms,abrs)#css,Fault m)\""], ["proof (prove)\nusing this:\n  f k = (c # cs, (nrms, abrs) # css, Fault m)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc k) = (cs, (nrms, abrs) # css, Fault m)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc k) = (cs, (nrms, abrs) # css, Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  f (Suc k) = (cs, (nrms, abrs) # css, Fault m)\n\ngoal (1 subgoal):\n 1. False", "by (rule hyp1)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs.\n                   f k = (cs, css, Fault m) \\<Longrightarrow> False;\n        f k = (cs, a # css, Fault m)\\<rbrakk>\n       \\<Longrightarrow> False", "with ds Cons.prems"], ["proof (chain)\npicking this:\n  ds = (nrms, abrs)\n  f k = (cs, ds # css, Fault m)\n  f ?k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  ds = (nrms, abrs)\n  f k = (cs, ds # css, Fault m)\n  f ?k = (cs, (nrms, abrs) # css, Fault m) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_Fault:\n  \"\\<not> inf \\<Gamma> cs css (Fault m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> cs css (Fault m)", "apply (rule not_infI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (cs, css, Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule_tac f=f in not_inf_Fault' )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (cs, css, Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            ?\\<Gamma>2\n                             f\\<turnstile> f i \\<rightarrow> f (Suc i)\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (cs, css, Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> f (?k2 f) = (?cs2 f, ?css2 f, Fault (?m2 f))", "by auto"], ["", "lemma not_inf_Stuck':\n  assumes enum_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\"\n  shows \"\\<And>k cs. f k = (cs,css,Stuck) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False", "proof (induct css)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  f k = (cs, [], Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have f_k: \"f k = (cs,[],Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = (cs, [], Stuck)", "by fact"], ["proof (state)\nthis:\n  f k = (cs, [], Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<And>k. f k = (cs,[],Stuck) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  f k = ([], [], Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"f k = ([], [], Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = ([], [], Stuck)", "by fact"], ["proof (state)\nthis:\n  f k = ([], [], Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  f k = ([], [], Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  f k = ([], [], Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "show \"False\""], ["proof (prove)\nusing this:\n  f k = ([], [], Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons c cs)"], ["proof (state)\nthis:\n  f ?k = (cs, [], Stuck) \\<Longrightarrow> False\n  f k = (c # cs, [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have fk: \"f k = (c # cs, [], Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = (c # cs, [], Stuck)", "by fact"], ["proof (state)\nthis:\n  f k = (c # cs, [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "with fk"], ["proof (chain)\npicking this:\n  f k = (c # cs, [], Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have \"f (Suc k) = (cs,[],Stuck)\""], ["proof (prove)\nusing this:\n  f k = (c # cs, [], Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc k) = (cs, [], Stuck)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc k) = (cs, [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k. f k = (cs, [], Stuck) \\<Longrightarrow> False;\n        f k = (a # cs, [], Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "with enum_step Cons.hyps"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f ?k = (cs, [], Stuck) \\<Longrightarrow> False\n  f (Suc k) = (cs, [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f ?k = (cs, [], Stuck) \\<Longrightarrow> False\n  f (Suc k) = (cs, [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?k = (cs, [], Stuck) \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>k cs. f k = (cs, [], Stuck) \\<Longrightarrow> False\n 2. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "from this f_k"], ["proof (chain)\npicking this:\n  f ?k = (cs, [], Stuck) \\<Longrightarrow> False\n  f k = (cs, [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  f ?k = (cs, [], Stuck) \\<Longrightarrow> False\n  f k = (cs, [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons ds css)"], ["proof (state)\nthis:\n  f ?k = (?cs, css, Stuck) \\<Longrightarrow> False\n  f k = (cs, ds # css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f ?k = (?cs, css, Stuck) \\<Longrightarrow> False\n  f k = (cs, ds # css, Stuck)", "obtain nrms abrs where ds: \"ds=(nrms,abrs)\""], ["proof (prove)\nusing this:\n  f ?k = (?cs, css, Stuck) \\<Longrightarrow> False\n  f k = (cs, ds # css, Stuck)\n\ngoal (1 subgoal):\n 1. (\\<And>nrms abrs.\n        ds = (nrms, abrs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases ds) auto"], ["proof (state)\nthis:\n  ds = (nrms, abrs)\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have hyp: \"\\<And>k cs. f k = (cs,css,Stuck) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False", "by fact"], ["proof (state)\nthis:\n  f ?k = (?cs, css, Stuck) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<And>k. f k = (cs,(nrms,abrs)#css,Stuck) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False", "proof (induct cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  f k = ([], (nrms, abrs) # css, Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have fk: \"f k = ([], (nrms, abrs) # css, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = ([], (nrms, abrs) # css, Stuck)", "by fact"], ["proof (state)\nthis:\n  f k = ([], (nrms, abrs) # css, Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "with fk"], ["proof (chain)\npicking this:\n  f k = ([], (nrms, abrs) # css, Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have \"f (Suc k) = (nrms,css,Stuck)\""], ["proof (prove)\nusing this:\n  f k = ([], (nrms, abrs) # css, Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc k) = (nrms, css, Stuck)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc k) = (nrms, css, Stuck)\n\ngoal (2 subgoals):\n 1. \\<And>k. f k = ([], (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n 2. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  f (Suc k) = (nrms, css, Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (rule hyp)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons c cs)"], ["proof (state)\nthis:\n  f ?k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n  f k = (c # cs, (nrms, abrs) # css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have fk: \"f k = (c#cs, (nrms, abrs) # css, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f k = (c # cs, (nrms, abrs) # css, Stuck)", "by fact"], ["proof (state)\nthis:\n  f k = (c # cs, (nrms, abrs) # css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "have hyp1: \"\\<And>k. f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False", "by fact"], ["proof (state)\nthis:\n  f ?k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "from enum_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<Gamma>\\<turnstile>f k \\<rightarrow> f (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "with fk"], ["proof (chain)\npicking this:\n  f k = (c # cs, (nrms, abrs) # css, Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have \"f (Suc k) = (cs,(nrms,abrs)#css,Stuck)\""], ["proof (prove)\nusing this:\n  f k = (c # cs, (nrms, abrs) # css, Stuck)\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc k) = (cs, (nrms, abrs) # css, Stuck)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc k) = (cs, (nrms, abrs) # css, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>a cs k.\n       \\<lbrakk>\\<And>k.\n                   f k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow>\n                   False;\n        f k = (a # cs, (nrms, abrs) # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  f (Suc k) = (cs, (nrms, abrs) # css, Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (rule hyp1)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a css k cs.\n       \\<lbrakk>\\<And>k cs. f k = (cs, css, Stuck) \\<Longrightarrow> False;\n        f k = (cs, a # css, Stuck)\\<rbrakk>\n       \\<Longrightarrow> False", "with ds Cons.prems"], ["proof (chain)\npicking this:\n  ds = (nrms, abrs)\n  f k = (cs, ds # css, Stuck)\n  f ?k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  ds = (nrms, abrs)\n  f k = (cs, ds # css, Stuck)\n  f ?k = (cs, (nrms, abrs) # css, Stuck) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_Stuck:\n  \"\\<not> inf \\<Gamma> cs css Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> cs css Stuck", "apply (rule not_infI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (cs, css, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule_tac f=f in not_inf_Stuck')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (cs, css, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            ?\\<Gamma>2\n                             f\\<turnstile> f i \\<rightarrow> f (Suc i)\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (cs, css, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> f (?k2 f) = (?cs2 f, ?css2 f, Stuck)", "by auto"], ["", "lemma last_butlast_app:\nassumes butlast: \"butlast as = xs @ butlast bs\"\nassumes not_Nil: \"bs \\<noteq> []\" \"as \\<noteq> []\"\nassumes last: \"fst (last as) = fst (last bs)\" \"snd (last as) = snd (last bs)\"\nshows \"as = xs @ bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as = xs @ bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. as = xs @ bs", "from last"], ["proof (chain)\npicking this:\n  fst (last as) = fst (last bs)\n  snd (last as) = snd (last bs)", "have \"last as = last bs\""], ["proof (prove)\nusing this:\n  fst (last as) = fst (last bs)\n  snd (last as) = snd (last bs)\n\ngoal (1 subgoal):\n 1. last as = last bs", "by (cases \"last as\",cases \"last bs\") simp"], ["proof (state)\nthis:\n  last as = last bs\n\ngoal (1 subgoal):\n 1. as = xs @ bs", "moreover"], ["proof (state)\nthis:\n  last as = last bs\n\ngoal (1 subgoal):\n 1. as = xs @ bs", "from not_Nil"], ["proof (chain)\npicking this:\n  bs \\<noteq> []\n  as \\<noteq> []", "have \"as = butlast as @ [last as]\" \"bs = butlast bs @ [last bs]\""], ["proof (prove)\nusing this:\n  bs \\<noteq> []\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as = butlast as @ [last as] &&& bs = butlast bs @ [last bs]", "by auto"], ["proof (state)\nthis:\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]\n\ngoal (1 subgoal):\n 1. as = xs @ bs", "ultimately"], ["proof (chain)\npicking this:\n  last as = last bs\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]", "show ?thesis"], ["proof (prove)\nusing this:\n  last as = last bs\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]\n\ngoal (1 subgoal):\n 1. as = xs @ bs", "using butlast"], ["proof (prove)\nusing this:\n  last as = last bs\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]\n  butlast as = xs @ butlast bs\n\ngoal (1 subgoal):\n 1. as = xs @ bs", "by simp"], ["proof (state)\nthis:\n  as = xs @ bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma last_butlast_tl:\nassumes butlast: \"butlast bs = x # butlast as\"\nassumes not_Nil: \"bs \\<noteq> []\" \"as \\<noteq> []\"\nassumes last: \"fst (last as) = fst (last bs)\" \"snd (last as) = snd (last bs)\"\nshows \"as = tl bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as = tl bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. as = tl bs", "from last"], ["proof (chain)\npicking this:\n  fst (last as) = fst (last bs)\n  snd (last as) = snd (last bs)", "have \"last as = last bs\""], ["proof (prove)\nusing this:\n  fst (last as) = fst (last bs)\n  snd (last as) = snd (last bs)\n\ngoal (1 subgoal):\n 1. last as = last bs", "by (cases \"last as\",cases \"last bs\") simp"], ["proof (state)\nthis:\n  last as = last bs\n\ngoal (1 subgoal):\n 1. as = tl bs", "moreover"], ["proof (state)\nthis:\n  last as = last bs\n\ngoal (1 subgoal):\n 1. as = tl bs", "from not_Nil"], ["proof (chain)\npicking this:\n  bs \\<noteq> []\n  as \\<noteq> []", "have \"as = butlast as @ [last as]\" \"bs = butlast bs @ [last bs]\""], ["proof (prove)\nusing this:\n  bs \\<noteq> []\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as = butlast as @ [last as] &&& bs = butlast bs @ [last bs]", "by auto"], ["proof (state)\nthis:\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]\n\ngoal (1 subgoal):\n 1. as = tl bs", "ultimately"], ["proof (chain)\npicking this:\n  last as = last bs\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]", "show ?thesis"], ["proof (prove)\nusing this:\n  last as = last bs\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]\n\ngoal (1 subgoal):\n 1. as = tl bs", "using butlast"], ["proof (prove)\nusing this:\n  last as = last bs\n  as = butlast as @ [last as]\n  bs = butlast bs @ [last bs]\n  butlast bs = x # butlast as\n\ngoal (1 subgoal):\n 1. as = tl bs", "by simp"], ["proof (state)\nthis:\n  as = tl bs\n\ngoal:\nNo subgoals!", "qed"], ["", "locale inf =\nfixes CS:: \"('s,'p,'f) config \\<Rightarrow> ('s, 'p,'f) com list\"\n  and CSS:: \"('s,'p,'f) config \\<Rightarrow> ('s, 'p,'f) continuation list\"\n  and S:: \"('s,'p,'f) config \\<Rightarrow> ('s,'f) xstate\"\n  defines CS_def : \"CS \\<equiv> fst\"\n  defines CSS_def : \"CSS \\<equiv> \\<lambda>c. fst (snd c)\"\n  defines S_def: \"S \\<equiv> \\<lambda>c. snd (snd c)\""], ["", "lemma (in inf) steps_hd_drop_suffix:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes not_finished: \"\\<forall>i < k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\nassumes simul: \"\\<forall>i\\<le>k.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\"\ndefines \"p\\<equiv>\\<lambda>i. (pcs i, pcss i, S (f i))\"\nshows \"\\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "using not_finished simul"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i\\<le>k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n     \\<forall>i\\<le>0.\n        if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n        else CS (f i) = pcs i \\<and>\n             CSS (f i) =\n             butlast (pcss i) @\n             [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n             css\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<0.\n                         \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i\\<le>0.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n     \\<forall>i\\<le>0.\n        if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n        else CS (f i) = pcs i \\<and>\n             CSS (f i) =\n             butlast (pcss i) @\n             [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n             css\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<0.\n                         \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i\\<le>0.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<forall>i<0. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<0. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n   \\<forall>i\\<le>k.\n      if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n      else CS (f i) = pcs i \\<and>\n           CSS (f i) =\n           butlast (pcss i) @\n           [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n           css\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<k.\n                       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i\\<le>Suc k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "have simul: \"\\<forall>i\\<le>Suc k.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>Suc k.\n       if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n       else CS (f i) = pcs i \\<and>\n            CSS (f i) =\n            butlast (pcss i) @\n            [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css", "by fact"], ["proof (state)\nthis:\n  \\<forall>i\\<le>Suc k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "have not_finished': \"\\<forall>i < Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with simul"], ["proof (chain)\npicking this:\n  \\<forall>i\\<le>Suc k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "have not_finished: \"\\<forall>i<Suc k. \\<not> (pcs i = [] \\<and> pcss i = [])\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>Suc k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> (pcs i = [] \\<and> pcss i = [])", "by (auto simp add: CS_def CSS_def S_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> (pcs i = [] \\<and> pcss i = [])\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>\\<forall>i<k.\n                            \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n                 \\<forall>i\\<le>k.\n                    if pcss i = []\n                    then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n                    else CS (f i) = pcs i \\<and>\n                         CSS (f i) =\n                         butlast (pcss i) @\n                         [(fst (last (pcss i)) @ cs,\n                           snd (last (pcss i)) @ cs)] @\n                         css\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<k.\n                                     \\<Gamma>\\<turnstile> p i \\<rightarrow>\n                    p (Suc i);\n        \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n        \\<forall>i\\<le>Suc k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc k \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc k \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "assume i_le_Suc_k: \"i < Suc k\""], ["proof (state)\nthis:\n  i < Suc k\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc k \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show \"\\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (cases \"i < k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < k \\<Longrightarrow> \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<not> i < k \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case True"], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. i < k \\<Longrightarrow> \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<not> i < k \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with not_finished' simul Suc.hyps"], ["proof (chain)\npicking this:\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i\\<le>Suc k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  \\<lbrakk>\\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n   \\<forall>i\\<le>k.\n      if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n      else CS (f i) = pcs i \\<and>\n           CSS (f i) =\n           butlast (pcss i) @\n           [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n           css\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<k.\n                       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n  i < k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i\\<le>Suc k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  \\<lbrakk>\\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css);\n   \\<forall>i\\<le>k.\n      if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n      else CS (f i) = pcs i \\<and>\n           CSS (f i) =\n           butlast (pcss i) @\n           [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n           css\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<k.\n                       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n  i < k\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case False"], ["proof (state)\nthis:\n  \\<not> i < k\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with i_le_Suc_k"], ["proof (chain)\npicking this:\n  i < Suc k\n  \\<not> i < k", "have eq_i_k: \"i=k\""], ["proof (prove)\nusing this:\n  i < Suc k\n  \\<not> i < k\n\ngoal (1 subgoal):\n 1. i = k", "by simp"], ["proof (state)\nthis:\n  i = k\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show \"\\<Gamma>\\<turnstile>p i \\<rightarrow> p (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "obtain cs' css' t' where\n          f_Suc_i: \"f (Suc i) = (cs', css', t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cs' css' t'.\n        f (Suc i) = (cs', css', t') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f (Suc i)\")"], ["proof (state)\nthis:\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "obtain cs'' css'' t'' where\n          f_i: \"f i = (cs'',css'',t'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cs'' css'' t''.\n        f i = (cs'', css'', t'') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f i\")"], ["proof (state)\nthis:\n  f i = (cs'', css'', t'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from not_finished eq_i_k"], ["proof (chain)\npicking this:\n  \\<forall>i<Suc k. \\<not> (pcs i = [] \\<and> pcss i = [])\n  i = k", "have pcs_pcss_not_Nil: \"\\<not> (pcs i = [] \\<and> pcss i = [])\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc k. \\<not> (pcs i = [] \\<and> pcss i = [])\n  i = k\n\ngoal (1 subgoal):\n 1. \\<not> (pcs i = [] \\<and> pcss i = [])", "by auto"], ["proof (state)\nthis:\n  \\<not> (pcs i = [] \\<and> pcss i = [])\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from simul [rule_format, of i] i_le_Suc_k f_i"], ["proof (chain)\npicking this:\n  i \\<le> Suc k \\<Longrightarrow>\n  if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n  else CS (f i) = pcs i \\<and>\n       CSS (f i) =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  i < Suc k\n  f i = (cs'', css'', t'')", "have pcs_pcss_i:\n          \"if pcss i = [] then css''=css \\<and> cs''=pcs i@cs\n           else cs''=pcs i \\<and>\n           css''= butlast (pcss i)@\n                       [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                       css\""], ["proof (prove)\nusing this:\n  i \\<le> Suc k \\<Longrightarrow>\n  if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n  else CS (f i) = pcs i \\<and>\n       CSS (f i) =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  i < Suc k\n  f i = (cs'', css'', t'')\n\ngoal (1 subgoal):\n 1. if pcss i = [] then css'' = css \\<and> cs'' = pcs i @ cs\n    else cs'' = pcs i \\<and>\n         css'' =\n         butlast (pcss i) @\n         [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css", "by (simp add: CS_def CSS_def S_def cong: if_cong)"], ["proof (state)\nthis:\n  if pcss i = [] then css'' = css \\<and> cs'' = pcs i @ cs\n  else cs'' = pcs i \\<and>\n       css'' =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from simul [rule_format, of \"Suc i\"] i_le_Suc_k f_Suc_i"], ["proof (chain)\npicking this:\n  Suc i \\<le> Suc k \\<Longrightarrow>\n  if pcss (Suc i) = []\n  then CSS (f (Suc i)) = css \\<and> CS (f (Suc i)) = pcs (Suc i) @ cs\n  else CS (f (Suc i)) = pcs (Suc i) \\<and>\n       CSS (f (Suc i)) =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n  i < Suc k\n  f (Suc i) = (cs', css', t')", "have pcs_pcss_Suc_i:\n        \"if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n         else cs' = pcs (Suc i) \\<and>\n              css' = butlast (pcss (Suc i)) @\n               [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n               css\""], ["proof (prove)\nusing this:\n  Suc i \\<le> Suc k \\<Longrightarrow>\n  if pcss (Suc i) = []\n  then CSS (f (Suc i)) = css \\<and> CS (f (Suc i)) = pcs (Suc i) @ cs\n  else CS (f (Suc i)) = pcs (Suc i) \\<and>\n       CSS (f (Suc i)) =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n  i < Suc k\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n    else cs' = pcs (Suc i) \\<and>\n         css' =\n         butlast (pcss (Suc i)) @\n         [(fst (last (pcss (Suc i))) @ cs,\n           snd (last (pcss (Suc i))) @ cs)] @\n         css", "by (simp add: CS_def CSS_def S_def cong: if_cong)"], ["proof (state)\nthis:\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (cases \"pcss i = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case True"], ["proof (state)\nthis:\n  pcss i = []\n\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "note pcss_Nil = this"], ["proof (state)\nthis:\n  pcss i = []\n\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with pcs_pcss_i pcs_pcss_not_Nil"], ["proof (chain)\npicking this:\n  if pcss i = [] then css'' = css \\<and> cs'' = pcs i @ cs\n  else cs'' = pcs i \\<and>\n       css'' =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  \\<not> (pcs i = [] \\<and> pcss i = [])\n  pcss i = []", "obtain p ps where\n            pcs_i: \"pcs i = p#ps\" and\n            css'': \"css''=css\" and\n            cs'': \"cs''=(p#ps)@cs\""], ["proof (prove)\nusing this:\n  if pcss i = [] then css'' = css \\<and> cs'' = pcs i @ cs\n  else cs'' = pcs i \\<and>\n       css'' =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  \\<not> (pcs i = [] \\<and> pcss i = [])\n  pcss i = []\n\ngoal (1 subgoal):\n 1. (\\<And>p ps.\n        \\<lbrakk>pcs i = p # ps; css'' = css; cs'' = (p # ps) @ cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  pcs i = p # ps\n  css'' = css\n  cs'' = (p # ps) @ cs\n\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with f_i"], ["proof (chain)\npicking this:\n  f i = (cs'', css'', t'')\n  pcs i = p # ps\n  css'' = css\n  cs'' = (p # ps) @ cs", "have \"f i = (p#(ps@cs),css,t'')\""], ["proof (prove)\nusing this:\n  f i = (cs'', css'', t'')\n  pcs i = p # ps\n  css'' = css\n  cs'' = (p # ps) @ cs\n\ngoal (1 subgoal):\n 1. f i = (p # ps @ cs, css, t'')", "by simp"], ["proof (state)\nthis:\n  f i = (p # ps @ cs, css, t'')\n\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with f_Suc_i f_step [rule_format, of i]"], ["proof (chain)\npicking this:\n  f (Suc i) = (cs', css', t')\n  \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f i = (p # ps @ cs, css, t'')", "have step_css: \"\\<Gamma>\\<turnstile> (p#(ps@cs),css,t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  f (Suc i) = (cs', css', t')\n  \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f i = (p # ps @ cs, css, t'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                         (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow> (cs', css', t')\n\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from step_Cons' [OF this, of p \"ps@cs\"]"], ["proof (chain)\npicking this:\n  p # ps @ cs = p # ps @ cs \\<Longrightarrow>\n  \\<exists>css''.\n     css' = css'' @ css \\<and>\n     (if css'' = [] then \\<exists>p. cs' = p @ ps @ cs\n      else \\<exists>pnorm pabr. css'' = [(pnorm @ ps @ cs, pabr @ ps @ cs)])", "obtain css''' where\n            css''': \"css' = css''' @ css\"\n            \"if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n            else (\\<exists>pnorm pabr. css'''=[(pnorm @ ps @ cs,pabr @ ps @ cs)])\""], ["proof (prove)\nusing this:\n  p # ps @ cs = p # ps @ cs \\<Longrightarrow>\n  \\<exists>css''.\n     css' = css'' @ css \\<and>\n     (if css'' = [] then \\<exists>p. cs' = p @ ps @ cs\n      else \\<exists>pnorm pabr. css'' = [(pnorm @ ps @ cs, pabr @ ps @ cs)])\n\ngoal (1 subgoal):\n 1. (\\<And>css'''.\n        \\<lbrakk>css' = css''' @ css;\n         if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n         else \\<exists>pnorm pabr.\n                 css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n\ngoal (2 subgoals):\n 1. pcss i = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (cases \"css''' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case True"], ["proof (state)\nthis:\n  css''' = []\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with css'''"], ["proof (chain)\npicking this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' = []", "obtain p' where\n              css': \"css' = css\" and\n              cs': \"cs' = p' @ ps @ cs\""], ["proof (prove)\nusing this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' = []\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>css' = css; cs' = p' @ ps @ cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css\n  cs' = p' @ ps @ cs\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "(*from cs' css' f_Suc_i f_i [rule_format, of \"Suc k\"]\n                have p_ps_not_Nil: \"p'@ps \\<noteq> Nil\"\n                by auto*)"], ["proof (state)\nthis:\n  css' = css\n  cs' = p' @ ps @ cs\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from css' cs' step_css"], ["proof (chain)\npicking this:\n  css' = css\n  cs' = p' @ ps @ cs\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow> (cs', css', t')", "have step: \"\\<Gamma>\\<turnstile> (p#(ps@cs),css,t'') \\<rightarrow> (p'@ps@cs,css,t')\""], ["proof (prove)\nusing this:\n  css' = css\n  cs' = p' @ ps @ cs\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow> (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                         (p' @ ps @ cs, css, t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                       (p' @ ps @ cs, css, t')\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "hence \"\\<Gamma>\\<turnstile> ((p#ps)@cs,css,t'') \\<rightarrow> ((p'@ps)@cs,css,t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                       (p' @ ps @ cs, css, t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ((p # ps) @ cs, css, t'') \\<rightarrow>\n                         ((p' @ ps) @ cs, css, t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ((p # ps) @ cs, css, t'') \\<rightarrow>\n                       ((p' @ ps) @ cs, css, t')\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from drop_suffix_css_step' [OF drop_suffix_same_css_step [OF this],\n              where xs=\"css\" and css=\"[]\" and css'=\"[]\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>p # ps \\<noteq> []; ?css'xs = [] @ css;\n   ?css'xs = [] @ css\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n   (p' @ ps, [], t')", "have  \"\\<Gamma>\\<turnstile> (p#ps,[],t'') \\<rightarrow> (p'@ps,[],t')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>p # ps \\<noteq> []; ?css'xs = [] @ css;\n   ?css'xs = [] @ css\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n   (p' @ ps, [], t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow> (p' @ ps, [], t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow> (p' @ ps, [], t')\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow> (p' @ ps, [], t')\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from css' cs' pcs_pcss_Suc_i"], ["proof (chain)\npicking this:\n  css' = css\n  cs' = p' @ ps @ cs\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css", "obtain \"pcs (Suc i) = p'@ps\" and \"pcss (Suc i) = []\""], ["proof (prove)\nusing this:\n  css' = css\n  cs' = p' @ ps @ cs\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>pcs (Suc i) = p' @ ps; pcss (Suc i) = []\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  pcs (Suc i) = p' @ ps\n  pcss (Suc i) = []\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow> (p' @ ps, [], t')\n  pcs (Suc i) = p' @ ps\n  pcss (Suc i) = []", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow> (p' @ ps, [], t')\n  pcs (Suc i) = p' @ ps\n  pcss (Suc i) = []\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "using pcs_i pcss_Nil f_i f_Suc_i"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow> (p' @ ps, [], t')\n  pcs (Suc i) = p' @ ps\n  pcss (Suc i) = []\n  pcs i = p # ps\n  pcss i = []\n  f i = (cs'', css'', t'')\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by (simp add: CS_def CSS_def S_def p_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case False"], ["proof (state)\nthis:\n  css''' \\<noteq> []\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with css'''"], ["proof (chain)\npicking this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' \\<noteq> []", "obtain pnorm pabr where\n              css': \"css'=css'''@css\"\n              \"css'''=[(pnorm @ ps @ cs,pabr @ ps @ cs)]\""], ["proof (prove)\nusing this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>pnorm pabr.\n        \\<lbrakk>css' = css''' @ css;\n         css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with css''' step_css"], ["proof (chain)\npicking this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow> (cs', css', t')\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]", "have \"\\<Gamma>\\<turnstile> (p#ps@cs,css,t'') \\<rightarrow> (cs',[(pnorm@ps@cs,pabr@ps@cs)]@css,t')\""], ["proof (prove)\nusing this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow> (cs', css', t')\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                         (cs', [(pnorm @ ps @ cs, pabr @ ps @ cs)] @ css,\n                          t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps @ cs, pabr @ ps @ cs)] @ css, t')\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps @ cs, pabr @ ps @ cs)] @ css, t')", "have \"\\<Gamma>\\<turnstile>(p#ps, css, t'') \\<rightarrow> (cs', [(pnorm@ps, pabr@ps)] @ css, t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps @ cs, pabr @ ps @ cs)] @ css, t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, css, t'') \\<rightarrow>\n                         (cs', [(pnorm @ ps, pabr @ ps)] @ css, t')", "by (rule drop_suffix_hd_css_step)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps, css, t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)] @ css, t')\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from drop_suffix_css_step' [OF this,\n              where css=\"[]\" and xs=\"css\" and css'=\"[(pnorm@ps, pabr@ps)]\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>css = [] @ css;\n   [(pnorm @ ps, pabr @ ps)] @ css =\n   [(pnorm @ ps, pabr @ ps)] @ css\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n   (cs', [(pnorm @ ps, pabr @ ps)], t')", "have \"\\<Gamma>\\<turnstile> (p#ps,[],t'') \\<rightarrow> (cs',[(pnorm@ps, pabr@ps)],t')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>css = [] @ css;\n   [(pnorm @ ps, pabr @ ps)] @ css =\n   [(pnorm @ ps, pabr @ ps)] @ css\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n   (cs', [(pnorm @ ps, pabr @ ps)], t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n                         (cs', [(pnorm @ ps, pabr @ ps)], t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)], t')\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)], t')\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from css' pcs_pcss_Suc_i"], ["proof (chain)\npicking this:\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css", "obtain \"pcs (Suc i) = cs'\" \"pcss (Suc i) = [(pnorm@ps, pabr@ps)]\""], ["proof (prove)\nusing this:\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>pcs (Suc i) = cs';\n      pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \"pcss (Suc i)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>pcs (Suc i) = cs';\n              pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     css' = css''' @ css; css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)];\n     if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n     else cs' = pcs (Suc i) \\<and>\n          css' =\n          butlast (pcss (Suc i)) @\n          [(fst (last (pcss (Suc i))) @ cs,\n            snd (last (pcss (Suc i))) @ cs)] @\n          css;\n     pcss (Suc i) = []\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>a list.\n       \\<lbrakk>\\<lbrakk>pcs (Suc i) = cs';\n                 pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        css' = css''' @ css; css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)];\n        if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n        else cs' = pcs (Suc i) \\<and>\n             css' =\n             butlast (pcss (Suc i)) @\n             [(fst (last (pcss (Suc i))) @ cs,\n               snd (last (pcss (Suc i))) @ cs)] @\n             css;\n        pcss (Suc i) = a # list\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (auto split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pcs (Suc i) = cs'\n  pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)], t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)], t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "using pcs_i pcss_Nil f_i f_Suc_i"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (p # ps, [], t'') \\<rightarrow>\n                       (cs', [(pnorm @ ps, pabr @ ps)], t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = [(pnorm @ ps, pabr @ ps)]\n  pcs i = p # ps\n  pcss i = []\n  f i = (cs'', css'', t'')\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by (simp add: p_def CS_def CSS_def S_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case False"], ["proof (state)\nthis:\n  pcss i \\<noteq> []\n\ngoal (1 subgoal):\n 1. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "note pcss_i_not_Nil = this"], ["proof (state)\nthis:\n  pcss i \\<noteq> []\n\ngoal (1 subgoal):\n 1. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with pcs_pcss_i"], ["proof (chain)\npicking this:\n  if pcss i = [] then css'' = css \\<and> cs'' = pcs i @ cs\n  else cs'' = pcs i \\<and>\n       css'' =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  pcss i \\<noteq> []", "obtain\n            cs'': \"cs''=pcs i\" and\n            css'': \"css''= butlast (pcss i)@\n                            [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                            css\""], ["proof (prove)\nusing this:\n  if pcss i = [] then css'' = css \\<and> cs'' = pcs i @ cs\n  else cs'' = pcs i \\<and>\n       css'' =\n       butlast (pcss i) @\n       [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  pcss i \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>cs'' = pcs i;\n      css'' =\n      butlast (pcss i) @\n      [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cs'' = pcs i\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from f_Suc_i f_i f_step [rule_format, of i]"], ["proof (chain)\npicking this:\n  f (Suc i) = (cs', css', t')\n  f i = (cs'', css'', t'')\n  \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have step_i_full: \"\\<Gamma>\\<turnstile> (cs'',css'',t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  f (Suc i) = (cs', css', t')\n  f i = (cs'', css'', t'')\n  \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n\ngoal (1 subgoal):\n 1. pcss i \\<noteq> [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (cases cs'')"], ["proof (state)\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case (Cons c' cs)"], ["proof (state)\nthis:\n  cs'' = c' # cs\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with step_Cons' [OF step_i_full]"], ["proof (chain)\npicking this:\n  cs'' = ?c # ?cs \\<Longrightarrow>\n  \\<exists>css''a.\n     css' = css''a @ css'' \\<and>\n     (if css''a = [] then \\<exists>p. cs' = p @ ?cs\n      else \\<exists>pnorm pabr. css''a = [(pnorm @ ?cs, pabr @ ?cs)])\n  cs'' = c' # cs", "obtain css''' where css': \"css' = css'''@css''\""], ["proof (prove)\nusing this:\n  cs'' = ?c # ?cs \\<Longrightarrow>\n  \\<exists>css''a.\n     css' = css''a @ css'' \\<and>\n     (if css''a = [] then \\<exists>p. cs' = p @ ?cs\n      else \\<exists>pnorm pabr. css''a = [(pnorm @ ?cs, pabr @ ?cs)])\n  cs'' = c' # cs\n\ngoal (1 subgoal):\n 1. (\\<And>css'''.\n        css' = css''' @ css'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css''' @ css''\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with step_i_full"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css' = css''' @ css''", "have \"\\<Gamma>\\<turnstile> (cs'',css'',t'') \\<rightarrow> (cs',css'''@css'',t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css' = css''' @ css''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow>\n                         (cs', css''' @ css'', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow>\n                       (cs', css''' @ css'', t')\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from Cons_change_css_step [OF this, where xss=\"pcss i\"] Cons cs''"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (cs'', pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n  cs'' = c' # cs\n  cs'' = pcs i", "have \"\\<Gamma>\\<turnstile> (pcs i, pcss i,t'') \\<rightarrow> (cs',css'''@pcss i,t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs'', pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n  cs'' = c' # cs\n  cs'' = pcs i\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                         (cs', css''' @ pcss i, t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from cs'' css'' css' False pcs_pcss_Suc_i"], ["proof (chain)\npicking this:\n  cs'' = pcs i\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  css' = css''' @ css''\n  pcss i \\<noteq> []\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css", "obtain \"pcs (Suc i) = cs'\" \"pcss (Suc i) = css'''@pcss i\""], ["proof (prove)\nusing this:\n  cs'' = pcs i\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  css' = css''' @ css''\n  pcss i \\<noteq> []\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>pcs (Suc i) = cs'; pcss (Suc i) = css''' @ pcss i\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (auto  split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pcss (Suc i) = css''' @ pcss i \\<Longrightarrow> thesis;\n     cs'' = pcs i;\n     css'' =\n     butlast (pcss i) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     pcss i \\<noteq> []; pcss (Suc i) \\<noteq> [];\n     butlast (pcss (Suc i)) = css''' @ butlast (pcss i); cs' = pcs (Suc i);\n     css' =\n     css''' @\n     butlast (pcss i) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     fst (last (pcss (Suc i))) = fst (last (pcss i));\n     snd (last (pcss (Suc i))) = snd (last (pcss i))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule (4) last_butlast_app)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pcss (Suc i) = css''' @ pcss i \\<Longrightarrow> thesis;\n     cs'' = pcs i;\n     css'' =\n     butlast (pcss i) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     pcss i \\<noteq> []; pcss (Suc i) \\<noteq> []; cs' = pcs (Suc i);\n     css' =\n     css''' @\n     butlast (pcss i) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     fst (last (pcss (Suc i))) = fst (last (pcss i));\n     snd (last (pcss (Suc i))) = snd (last (pcss i));\n     pcss (Suc i) = css''' @ pcss i\\<rbrakk>\n    \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  pcs (Suc i) = cs'\n  pcss (Suc i) = css''' @ pcss i\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = css''' @ pcss i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = css''' @ pcss i\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "using f_i f_Suc_i"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', css''' @ pcss i, t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = css''' @ pcss i\n  f i = (cs'', css'', t'')\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by (simp add: p_def CS_def CSS_def S_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case Nil"], ["proof (state)\nthis:\n  cs'' = []\n\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "note cs''_Nil = this"], ["proof (state)\nthis:\n  cs'' = []\n\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof (cases \"butlast (pcss i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case (Cons bpcs bpcss)"], ["proof (state)\nthis:\n  butlast (pcss i) = bpcs # bpcss\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with cs''_Nil step_i_full css''"], ["proof (chain)\npicking this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  butlast (pcss i) = bpcs # bpcss", "have *: \"\\<Gamma>\\<turnstile> ([],[hd css'']@tl css'',t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  butlast (pcss i) = bpcs # bpcss\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                         (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', css', t')\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', css', t')\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from step_Nil [OF *]"], ["proof (chain)\npicking this:\n  [hd css''] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [hd css''] @ tl css'' \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow> cs' = snd (hd [hd css'']) \\<and> t' = Normal s'\n   | _ \\<Rightarrow> cs' = fst (hd [hd css'']) \\<and> t' = t'')", "have css': \"css'=tl css''\""], ["proof (prove)\nusing this:\n  [hd css''] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [hd css''] @ tl css'' \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow> cs' = snd (hd [hd css'']) \\<and> t' = Normal s'\n   | _ \\<Rightarrow> cs' = fst (hd [hd css'']) \\<and> t' = t'')\n\ngoal (1 subgoal):\n 1. css' = tl css''", "by simp"], ["proof (state)\nthis:\n  css' = tl css''\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', css', t')\n  css' = tl css''", "have\n                step_i_full: \"\\<Gamma>\\<turnstile> ([],[hd css'']@tl css'',t'') \\<rightarrow> (cs',tl css'',t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', css', t')\n  css' = tl css''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                         (cs', tl css'', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', tl css'', t')\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from css'' Cons pcss_i_not_Nil"], ["proof (chain)\npicking this:\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  butlast (pcss i) = bpcs # bpcss\n  pcss i \\<noteq> []", "have \"hd css'' = hd (pcss i)\""], ["proof (prove)\nusing this:\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  butlast (pcss i) = bpcs # bpcss\n  pcss i \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd css'' = hd (pcss i)", "by (auto simp add: neq_Nil_conv split: if_split_asm)"], ["proof (state)\nthis:\n  hd css'' = hd (pcss i)\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with cs'' cs''_Nil\n                Nil_change_css_step [where ass=\"[hd css'']\" and\n                css=\"tl css''\" and ass'=\"[]\" and\n                xss=\"tl (pcss i)\", simplified, OF step_i_full [simplified]]"], ["proof (chain)\npicking this:\n  cs'' = pcs i\n  cs'' = []\n  \\<Gamma>\\<turnstile> ([], hd css'' # tl (pcss i), t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n  hd css'' = hd (pcss i)", "have \"\\<Gamma>\\<turnstile> (pcs i,[hd (pcss i)]@tl (pcss i),t'') \\<rightarrow> (cs',tl (pcss i),t')\""], ["proof (prove)\nusing this:\n  cs'' = pcs i\n  cs'' = []\n  \\<Gamma>\\<turnstile> ([], hd css'' # tl (pcss i), t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n  hd css'' = hd (pcss i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (pcs i, [hd (pcss i)] @ tl (pcss i),\n                          t'') \\<rightarrow>\n                         (cs', tl (pcss i), t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs i, [hd (pcss i)] @ tl (pcss i),\n                        t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with pcss_i_not_Nil"], ["proof (chain)\npicking this:\n  pcss i \\<noteq> []\n  \\<Gamma>\\<turnstile> (pcs i, [hd (pcss i)] @ tl (pcss i),\n                        t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')", "have \"\\<Gamma>\\<turnstile> (pcs i,pcss i,t'') \\<rightarrow> (cs',tl (pcss i),t')\""], ["proof (prove)\nusing this:\n  pcss i \\<noteq> []\n  \\<Gamma>\\<turnstile> (pcs i, [hd (pcss i)] @ tl (pcss i),\n                        t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                         (cs', tl (pcss i), t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from css' css'' cs''_Nil Cons pcss_i_not_Nil pcs_pcss_Suc_i"], ["proof (chain)\npicking this:\n  css' = tl css''\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  cs'' = []\n  butlast (pcss i) = bpcs # bpcss\n  pcss i \\<noteq> []\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css", "obtain \"pcs (Suc i) = cs'\" \"pcss (Suc i) = tl (pcss i)\""], ["proof (prove)\nusing this:\n  css' = tl css''\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  cs'' = []\n  butlast (pcss i) = bpcs # bpcss\n  pcss i \\<noteq> []\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>pcs (Suc i) = cs'; pcss (Suc i) = tl (pcss i)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (clarsimp  split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pcss (Suc i) = tl (pcss i) \\<Longrightarrow> thesis;\n     css'' =\n     bpcs #\n     butlast (pcss (Suc i)) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     cs'' = []; butlast (pcss i) = bpcs # butlast (pcss (Suc i));\n     pcss i \\<noteq> []; pcss (Suc i) \\<noteq> [];\n     bpcss = butlast (pcss (Suc i)); cs' = pcs (Suc i);\n     css' =\n     butlast (pcss (Suc i)) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     fst (last (pcss (Suc i))) = fst (last (pcss i));\n     snd (last (pcss (Suc i))) = snd (last (pcss i))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule (4) last_butlast_tl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pcss (Suc i) = tl (pcss i) \\<Longrightarrow> thesis;\n     css'' =\n     bpcs #\n     butlast (pcss (Suc i)) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     cs'' = []; pcss i \\<noteq> []; pcss (Suc i) \\<noteq> [];\n     bpcss = butlast (pcss (Suc i)); cs' = pcs (Suc i);\n     css' =\n     butlast (pcss (Suc i)) @\n     (fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs) # css;\n     fst (last (pcss (Suc i))) = fst (last (pcss i));\n     snd (last (pcss (Suc i))) = snd (last (pcss i));\n     pcss (Suc i) = tl (pcss i)\\<rbrakk>\n    \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  pcs (Suc i) = cs'\n  pcss (Suc i) = tl (pcss i)\n\ngoal (2 subgoals):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n 2. \\<And>a list.\n       butlast (pcss i) = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = tl (pcss i)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = tl (pcss i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "using f_i f_Suc_i"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs i, pcss i, t'') \\<rightarrow>\n                       (cs', tl (pcss i), t')\n  pcs (Suc i) = cs'\n  pcss (Suc i) = tl (pcss i)\n  f i = (cs'', css'', t'')\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by (simp add: p_def CS_def CSS_def S_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "case Nil"], ["proof (state)\nthis:\n  butlast (pcss i) = []\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with css'' pcss_i_not_Nil"], ["proof (chain)\npicking this:\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  pcss i \\<noteq> []\n  butlast (pcss i) = []", "obtain pnorm pabr\n                where css'': \"css''= [(pnorm@cs,pabr@cs)]@css\" and\n                pcss_i: \"pcss i = [(pnorm,pabr)]\""], ["proof (prove)\nusing this:\n  css'' =\n  butlast (pcss i) @\n  [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n  pcss i \\<noteq> []\n  butlast (pcss i) = []\n\ngoal (1 subgoal):\n 1. (\\<And>pnorm pabr.\n        \\<lbrakk>css'' = [(pnorm @ cs, pabr @ cs)] @ css;\n         pcss i = [(pnorm, pabr)]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force simp add: neq_Nil_conv split: if_split_asm)"], ["proof (state)\nthis:\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  pcss i = [(pnorm, pabr)]\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "with cs''_Nil step_i_full"], ["proof (chain)\npicking this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  pcss i = [(pnorm, pabr)]", "have \"\\<Gamma>\\<turnstile>([],[(pnorm@cs,pabr@cs)]@css,t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  pcss i = [(pnorm, pabr)]\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], [(pnorm @ cs, pabr @ cs)] @ css,\n                          t'') \\<rightarrow>\n                         (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [(pnorm @ cs, pabr @ cs)] @ css,\n                        t'') \\<rightarrow>\n                       (cs', css', t')\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from step_Nil [OF this]"], ["proof (chain)\npicking this:\n  [(pnorm @ cs, pabr @ cs)] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [(pnorm @ cs, pabr @ cs)] @ css \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow>\n     cs' = snd (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = Normal s'\n   | _ \\<Rightarrow>\n       cs' = fst (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = t'')", "obtain\n                css': \"css'=css\" and\n                cs': \"(case t'' of\n                         Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n                       | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t'')\""], ["proof (prove)\nusing this:\n  [(pnorm @ cs, pabr @ cs)] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [(pnorm @ cs, pabr @ cs)] @ css \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow>\n     cs' = snd (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = Normal s'\n   | _ \\<Rightarrow>\n       cs' = fst (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = t'')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>css' = css;\n      case t'' of\n      Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n      | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp cong: xstate.case_cong)"], ["proof (state)\nthis:\n  css' = css\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "let \"?pcs_Suc_i \" = \"(case t'' of Abrupt s' \\<Rightarrow> pabr | _ \\<Rightarrow> pnorm)\""], ["proof (state)\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from cs'"], ["proof (chain)\npicking this:\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''", "have \"\\<Gamma>\\<turnstile>([],[(pnorm,pabr)],t'') \\<rightarrow> (?pcs_Suc_i,[],t')\""], ["proof (prove)\nusing this:\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], [(pnorm, pabr)], t'') \\<rightarrow>\n                         (case t'' of Abrupt s' \\<Rightarrow> pabr\n                          | _ \\<Rightarrow> pnorm,\n                          [], t')", "by (auto intro: step.intros split: xstate.splits)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [(pnorm, pabr)], t'') \\<rightarrow>\n                       (case t'' of Abrupt s' \\<Rightarrow> pabr\n                        | _ \\<Rightarrow> pnorm,\n                        [], t')\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [(pnorm, pabr)], t'') \\<rightarrow>\n                       (case t'' of Abrupt s' \\<Rightarrow> pabr\n                        | _ \\<Rightarrow> pnorm,\n                        [], t')\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from css'' css' cs' pcss_i pcs_pcss_Suc_i"], ["proof (chain)\npicking this:\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  css' = css\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n  pcss i = [(pnorm, pabr)]\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css", "obtain \"pcs (Suc i) = ?pcs_Suc_i\" \"pcss (Suc i) = []\""], ["proof (prove)\nusing this:\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  css' = css\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n  pcss i = [(pnorm, pabr)]\n  if pcss (Suc i) = [] then css' = css \\<and> cs' = pcs (Suc i) @ cs\n  else cs' = pcs (Suc i) \\<and>\n       css' =\n       butlast (pcss (Suc i)) @\n       [(fst (last (pcss (Suc i))) @ cs, snd (last (pcss (Suc i))) @ cs)] @\n       css\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>pcs (Suc i) =\n              (case t'' of Abrupt s' \\<Rightarrow> pabr\n               | _ \\<Rightarrow> pnorm);\n      pcss (Suc i) = []\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp split: if_split_asm xstate.splits)"], ["proof (state)\nthis:\n  pcs (Suc i) =\n  (case t'' of Abrupt s' \\<Rightarrow> pabr | _ \\<Rightarrow> pnorm)\n  pcss (Suc i) = []\n\ngoal (1 subgoal):\n 1. butlast (pcss i) = [] \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([], [(pnorm, pabr)], t'') \\<rightarrow>\n                       (case t'' of Abrupt s' \\<Rightarrow> pabr\n                        | _ \\<Rightarrow> pnorm,\n                        [], t')\n  pcs (Suc i) =\n  (case t'' of Abrupt s' \\<Rightarrow> pabr | _ \\<Rightarrow> pnorm)\n  pcss (Suc i) = []", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([], [(pnorm, pabr)], t'') \\<rightarrow>\n                       (case t'' of Abrupt s' \\<Rightarrow> pabr\n                        | _ \\<Rightarrow> pnorm,\n                        [], t')\n  pcs (Suc i) =\n  (case t'' of Abrupt s' \\<Rightarrow> pabr | _ \\<Rightarrow> pnorm)\n  pcss (Suc i) = []\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "using pcss_i cs'' cs''_Nil f_i f_Suc_i"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([], [(pnorm, pabr)], t'') \\<rightarrow>\n                       (case t'' of Abrupt s' \\<Rightarrow> pabr\n                        | _ \\<Rightarrow> pnorm,\n                        [], t')\n  pcs (Suc i) =\n  (case t'' of Abrupt s' \\<Rightarrow> pabr | _ \\<Rightarrow> pnorm)\n  pcss (Suc i) = []\n  pcss i = [(pnorm, pabr)]\n  cs'' = pcs i\n  cs'' = []\n  f i = (cs'', css'', t'')\n  f (Suc i) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by (simp add: p_def CS_def CSS_def S_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma k_steps_to_rtrancl:\n  assumes steps: \"\\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\"\n  shows \"\\<Gamma>\\<turnstile>p 0\\<rightarrow>\\<^sup>* p k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k", "using steps"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p 0\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p 0\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<0. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p 0", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p 0\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k\n  \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "have \"\\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "obtain\n  step_le_k: \"\\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\" and step_k: \"\\<Gamma>\\<turnstile> p k \\<rightarrow> p (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<forall>i<k.\n                 \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i);\n      \\<Gamma>\\<turnstile> p k \\<rightarrow> p (Suc k)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n  \\<Gamma>\\<turnstile> p k \\<rightarrow> p (Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "from Suc.hyps [OF step_le_k]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k", "have \"\\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "note step_k"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p k \\<rightarrow> p (Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> p i \\<rightarrow>\n  p (Suc i) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p k;\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>*\n        p (Suc k)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p (Suc k)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p (Suc k)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p (Suc k)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p 0 \\<rightarrow>\\<^sup>* p (Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in inf) steps_hd_drop_suffix_finite:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes not_finished: \"\\<forall>i < k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\nassumes simul: \"\\<forall>i\\<le>k.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\"\nshows \"\\<Gamma>\\<turnstile>([c],[],s) \\<rightarrow>\\<^sup>* (pcs k, pcss k, S (f k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "from steps_hd_drop_suffix [OF f_0 f_step not_finished simul]"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> (pcs i, pcss i, S (f i)) \\<rightarrow>\n                          (pcs (Suc i), pcss (Suc i), S (f (Suc i)))", "have \"\\<forall>i<k. \\<Gamma>\\<turnstile> (pcs i, pcss i, S (f i)) \\<rightarrow>\n                  (pcs (Suc i), pcss (Suc i), S (f (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> (pcs i, pcss i, S (f i)) \\<rightarrow>\n                          (pcs (Suc i), pcss (Suc i), S (f (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       \\<Gamma>\\<turnstile> (pcs i, pcss i, S (f i)) \\<rightarrow>\n                            (pcs (Suc i), pcss (Suc i), S (f (Suc i)))", "."], ["proof (state)\nthis:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> (pcs i, pcss i, S (f i)) \\<rightarrow>\n                          (pcs (Suc i), pcss (Suc i), S (f (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "from k_steps_to_rtrancl [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))", "have \"\\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>* (pcs k, pcss k, S (f k))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "from f_0 simul [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = (c # cs, css, s)\n  0 \\<le> k \\<Longrightarrow>\n  if pcss 0 = [] then CSS (f 0) = css \\<and> CS (f 0) = pcs 0 @ cs\n  else CS (f 0) = pcs 0 \\<and>\n       CSS (f 0) =\n       butlast (pcss 0) @\n       [(fst (last (pcss 0)) @ cs, snd (last (pcss 0)) @ cs)] @ css", "have \"(pcs 0, pcss 0, S (f 0)) = ([c],[],s)\""], ["proof (prove)\nusing this:\n  f 0 = (c # cs, css, s)\n  0 \\<le> k \\<Longrightarrow>\n  if pcss 0 = [] then CSS (f 0) = css \\<and> CS (f 0) = pcs 0 @ cs\n  else CS (f 0) = pcs 0 \\<and>\n       CSS (f 0) =\n       butlast (pcss 0) @\n       [(fst (last (pcss 0)) @ cs, snd (last (pcss 0)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. (pcs 0, pcss 0, S (f 0)) = ([c], [], s)", "by (auto split: if_split_asm simp add: CS_def CSS_def S_def)"], ["proof (state)\nthis:\n  (pcs 0, pcss 0, S (f 0)) = ([c], [], s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n  (pcs 0, pcss 0, S (f 0)) = ([c], [], s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs 0, pcss 0, S (f 0)) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n  (pcs 0, pcss 0, S (f 0)) = ([c], [], s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         (pcs k, pcss k, S (f k))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in inf) steps_hd_drop_suffix_infinite:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes not_finished: \"\\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\n(*assumes not_finished: \"\\<forall>i. \\<not> (pcs i = [] \\<and> pcss i = [])\"*)\nassumes simul: \"\\<forall>i.\n        (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                 else CS (f i)=pcs i \\<and>\n                      CSS (f i)= butlast (pcss i)@\n                              [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                              css)\"\ndefines \"p\\<equiv>\\<lambda>i. (pcs i, pcss i, S (f i))\"\nshows \"\\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "from steps_hd_drop_suffix [OF f_0 f_step, of \"Suc i\" pcss pcs] not_finished simul"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>ia<Suc i.\n              \\<not> (CS (f ia) = cs \\<and> CSS (f ia) = css);\n   \\<forall>ia\\<le>Suc i.\n      if pcss ia = [] then CSS (f ia) = css \\<and> CS (f ia) = pcs ia @ cs\n      else CS (f ia) = pcs ia \\<and>\n           CSS (f ia) =\n           butlast (pcss ia) @\n           [(fst (last (pcss ia)) @ cs, snd (last (pcss ia)) @ cs)] @\n           css\\<rbrakk>\n  \\<Longrightarrow> \\<forall>ia<Suc i.\n                       \\<Gamma>\\<turnstile> (pcs ia, pcss ia,\n       S (f ia)) \\<rightarrow>\n      (pcs (Suc ia), pcss (Suc ia), S (f (Suc ia)))\n  \\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>ia<Suc i.\n              \\<not> (CS (f ia) = cs \\<and> CSS (f ia) = css);\n   \\<forall>ia\\<le>Suc i.\n      if pcss ia = [] then CSS (f ia) = css \\<and> CS (f ia) = pcs ia @ cs\n      else CS (f ia) = pcs ia \\<and>\n           CSS (f ia) =\n           butlast (pcss ia) @\n           [(fst (last (pcss ia)) @ cs, snd (last (pcss ia)) @ cs)] @\n           css\\<rbrakk>\n  \\<Longrightarrow> \\<forall>ia<Suc i.\n                       \\<Gamma>\\<turnstile> (pcs ia, pcss ia,\n       S (f ia)) \\<rightarrow>\n      (pcs (Suc ia), pcss (Suc ia), S (f (Suc ia)))\n  \\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  \\<forall>i.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)", "by (auto simp add: p_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> p i \\<rightarrow> p (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in inf) steps_hd_progress:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes c_unfinished: \"\\<forall>i < k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\"\nshows \"\\<forall>i \\<le> k. (\\<exists>pcs pcss.\n          (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "using c_unfinished"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<not> (CS (f i) = cs \\<and> CSS (f i) = css) \\<Longrightarrow>\n    \\<forall>i\\<le>0.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<not> (CS (f i) = cs \\<and> CSS (f i) = css) \\<Longrightarrow>\n    \\<forall>i\\<le>0.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "with f_0"], ["proof (chain)\npicking this:\n  f 0 = (c # cs, css, s)\n  \\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "show ?case"], ["proof (prove)\nusing this:\n  f 0 = (c # cs, css, s)\n  \\<forall>i<0. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>0.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "by (simp add: CSS_def CS_def)"], ["proof (state)\nthis:\n  \\<forall>i\\<le>0.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n        else CS (f i) = pcs \\<and>\n             CSS (f i) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "case (Suc k)"], ["proof (state)\nthis:\n  \\<forall>i<k.\n     \\<not> (CS (f i) = cs \\<and> CSS (f i) = css) \\<Longrightarrow>\n  \\<forall>i\\<le>k.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n        else CS (f i) = pcs \\<and>\n             CSS (f i) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "have c_unfinished: \"\\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "hence c_unfinished': \"\\<forall>i< k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<not> (CS (f i) = cs \\<and>\n                           CSS (f i) = css) \\<Longrightarrow>\n                \\<forall>i\\<le>k.\n                   \\<exists>pcs pcss.\n                      if pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n                      else CS (f i) = pcs \\<and>\n                           CSS (f i) =\n                           butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css;\n        \\<forall>i<Suc k.\n           \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<le>Suc k.\n                            \\<exists>pcs pcss.\n                               if pcss = []\n                               then CSS (f i) = css \\<and>\n                                    CS (f i) = pcs @ cs\n                               else CS (f i) = pcs \\<and>\n                                    CSS (f i) =\n                                    butlast pcss @\n                                    [(fst (last pcss) @ cs,\nsnd (last pcss) @ cs)] @\n                                    css", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>Suc k.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> Suc k \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> Suc k \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "assume i_le_Suc_k: \"i \\<le> Suc k\""], ["proof (state)\nthis:\n  i \\<le> Suc k\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> Suc k \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "show \"\\<exists>pcs pcss.\n          (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (cases \"i < Suc k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case True"], ["proof (state)\nthis:\n  i < Suc k\n\ngoal (2 subgoals):\n 1. i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with Suc.hyps [OF c_unfinished', rule_format, of i] c_unfinished"], ["proof (chain)\npicking this:\n  i \\<le> k \\<Longrightarrow>\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  i < Suc k", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> k \\<Longrightarrow>\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<forall>i<Suc k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n  i < Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "by auto"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case False"], ["proof (state)\nthis:\n  \\<not> i < Suc k\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with i_le_Suc_k"], ["proof (chain)\npicking this:\n  i \\<le> Suc k\n  \\<not> i < Suc k", "have eq_i_Suc_k: \"i=Suc k\""], ["proof (prove)\nusing this:\n  i \\<le> Suc k\n  \\<not> i < Suc k\n\ngoal (1 subgoal):\n 1. i = Suc k", "by auto"], ["proof (state)\nthis:\n  i = Suc k\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "obtain cs' css' t' where\n        f_Suc_k: \"f (Suc k) = (cs', css', t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cs' css' t'.\n        f (Suc k) = (cs', css', t') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f (Suc k)\")"], ["proof (state)\nthis:\n  f (Suc k) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "obtain cs'' css'' t'' where\n        f_k: \"f k = (cs'',css'',t'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cs'' css'' t''.\n        f k = (cs'', css'', t'') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"f k\")"], ["proof (state)\nthis:\n  f k = (cs'', css'', t'')\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with Suc.hyps [OF c_unfinished',rule_format, of k]"], ["proof (chain)\npicking this:\n  k \\<le> k \\<Longrightarrow>\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f k) = css \\<and> CS (f k) = pcs @ cs\n     else CS (f k) = pcs \\<and>\n          CSS (f k) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  f k = (cs'', css'', t'')", "obtain pcs pcss where\n        pcs_pcss_k:\n        \"if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n         else cs'' = pcs \\<and>\n              css'' = butlast pcss @\n                           [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n                           css\""], ["proof (prove)\nusing this:\n  k \\<le> k \\<Longrightarrow>\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f k) = css \\<and> CS (f k) = pcs @ cs\n     else CS (f k) = pcs \\<and>\n          CSS (f k) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  f k = (cs'', css'', t'')\n\ngoal (1 subgoal):\n 1. (\\<And>pcss pcs.\n        if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n        else cs'' = pcs \\<and>\n             css'' =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @\n             css \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: CSS_def CS_def cong: if_cong)"], ["proof (state)\nthis:\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from c_unfinished [rule_format, of k] f_k pcs_pcss_k"], ["proof (chain)\npicking this:\n  k < Suc k \\<Longrightarrow> \\<not> (CS (f k) = cs \\<and> CSS (f k) = css)\n  f k = (cs'', css'', t'')\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "have pcs_pcss_empty: \"\\<not> (pcs = [] \\<and> pcss = [])\""], ["proof (prove)\nusing this:\n  k < Suc k \\<Longrightarrow> \\<not> (CS (f k) = cs \\<and> CSS (f k) = css)\n  f k = (cs'', css'', t'')\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<not> (pcs = [] \\<and> pcss = [])", "by (auto simp add: CS_def CSS_def S_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<not> (pcs = [] \\<and> pcss = [])\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc k \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (cases \"pcss = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case True"], ["proof (state)\nthis:\n  pcss = []\n\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "note pcss_Nil = this"], ["proof (state)\nthis:\n  pcss = []\n\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with pcs_pcss_k pcs_pcss_empty"], ["proof (chain)\npicking this:\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<not> (pcs = [] \\<and> pcss = [])\n  pcss = []", "obtain p ps where\n          pcs_i: \"pcs = p#ps\" and\n          css'': \"css''=css\" and\n          cs'': \"cs''=(p#ps)@cs\""], ["proof (prove)\nusing this:\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<not> (pcs = [] \\<and> pcss = [])\n  pcss = []\n\ngoal (1 subgoal):\n 1. (\\<And>p ps.\n        \\<lbrakk>pcs = p # ps; css'' = css; cs'' = (p # ps) @ cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"pcs\") auto"], ["proof (state)\nthis:\n  pcs = p # ps\n  css'' = css\n  cs'' = (p # ps) @ cs\n\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with f_k"], ["proof (chain)\npicking this:\n  f k = (cs'', css'', t'')\n  pcs = p # ps\n  css'' = css\n  cs'' = (p # ps) @ cs", "have \"f k = (p#(ps@cs),css,t'')\""], ["proof (prove)\nusing this:\n  f k = (cs'', css'', t'')\n  pcs = p # ps\n  css'' = css\n  cs'' = (p # ps) @ cs\n\ngoal (1 subgoal):\n 1. f k = (p # ps @ cs, css, t'')", "by simp"], ["proof (state)\nthis:\n  f k = (p # ps @ cs, css, t'')\n\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with f_Suc_k f_step [rule_format, of k]"], ["proof (chain)\npicking this:\n  f (Suc k) = (cs', css', t')\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n  f k = (p # ps @ cs, css, t'')", "have step_css: \"\\<Gamma>\\<turnstile> (p#(ps@cs),css,t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  f (Suc k) = (cs', css', t')\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n  f k = (p # ps @ cs, css, t'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow>\n                         (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (p # ps @ cs, css, t'') \\<rightarrow> (cs', css', t')\n\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from step_Cons' [OF this, of p \"ps@cs\"]"], ["proof (chain)\npicking this:\n  p # ps @ cs = p # ps @ cs \\<Longrightarrow>\n  \\<exists>css''.\n     css' = css'' @ css \\<and>\n     (if css'' = [] then \\<exists>p. cs' = p @ ps @ cs\n      else \\<exists>pnorm pabr. css'' = [(pnorm @ ps @ cs, pabr @ ps @ cs)])", "obtain css''' where\n          css''': \"css' = css''' @ css\"\n          \"if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n          else (\\<exists>pnorm pabr. css'''=[(pnorm @ ps @ cs,pabr @ ps @ cs)])\""], ["proof (prove)\nusing this:\n  p # ps @ cs = p # ps @ cs \\<Longrightarrow>\n  \\<exists>css''.\n     css' = css'' @ css \\<and>\n     (if css'' = [] then \\<exists>p. cs' = p @ ps @ cs\n      else \\<exists>pnorm pabr. css'' = [(pnorm @ ps @ cs, pabr @ ps @ cs)])\n\ngoal (1 subgoal):\n 1. (\\<And>css'''.\n        \\<lbrakk>css' = css''' @ css;\n         if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n         else \\<exists>pnorm pabr.\n                 css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n\ngoal (2 subgoals):\n 1. pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (cases \"css''' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case True"], ["proof (state)\nthis:\n  css''' = []\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with css'''"], ["proof (chain)\npicking this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' = []", "obtain p' where\n            css': \"css' = css\" and\n            cs': \"cs' = p' @ ps @ cs\""], ["proof (prove)\nusing this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' = []\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>css' = css; cs' = p' @ ps @ cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css\n  cs' = p' @ ps @ cs\n\ngoal (2 subgoals):\n 1. css''' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from css' cs' f_Suc_k"], ["proof (chain)\npicking this:\n  css' = css\n  cs' = p' @ ps @ cs\n  f (Suc k) = (cs', css', t')", "show ?thesis"], ["proof (prove)\nusing this:\n  css' = css\n  cs' = p' @ ps @ cs\n  f (Suc k) = (cs', css', t')\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "apply (rule_tac x=\"p'@ps\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>css' = css; cs' = p' @ ps @ cs;\n     f (Suc k) = (cs', css', t')\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pcss.\n                         if pcss = []\n                         then CSS (f i) = css \\<and>\n                              CS (f i) = (p' @ ps) @ cs\n                         else CS (f i) = p' @ ps \\<and>\n                              CSS (f i) =\n                              butlast pcss @\n                              [(fst (last pcss) @ cs,\n                                snd (last pcss) @ cs)] @\n                              css", "apply (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>css' = css; cs' = p' @ ps @ cs;\n     f (Suc k) = (cs', css', t')\\<rbrakk>\n    \\<Longrightarrow> if [] = []\n                      then CSS (f i) = css \\<and> CS (f i) = (p' @ ps) @ cs\n                      else CS (f i) = p' @ ps \\<and>\n                           CSS (f i) =\n                           butlast [] @\n                           [(fst (last []) @ cs, snd (last []) @ cs)] @ css", "apply (simp add: CSS_def CS_def eq_i_Suc_k)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case False"], ["proof (state)\nthis:\n  css''' \\<noteq> []\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with css'''"], ["proof (chain)\npicking this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' \\<noteq> []", "obtain pnorm pabr where\n            css': \"css'=css'''@css\"\n            \"css'''=[(pnorm @ ps @ cs,pabr @ ps @ cs)]\""], ["proof (prove)\nusing this:\n  css' = css''' @ css\n  if css''' = [] then \\<exists>p. cs' = p @ ps @ cs\n  else \\<exists>pnorm pabr. css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n  css''' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>pnorm pabr.\n        \\<lbrakk>css' = css''' @ css;\n         css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n\ngoal (1 subgoal):\n 1. css''' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with f_Suc_k eq_i_Suc_k"], ["proof (chain)\npicking this:\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]", "show ?thesis"], ["proof (prove)\nusing this:\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n  css' = css''' @ css\n  css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "apply (rule_tac x=\"cs'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f (Suc k) = (cs', css', t'); i = Suc k; css' = css''' @ css;\n     css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pcss.\n                         if pcss = []\n                         then CSS (f i) = css \\<and> CS (f i) = cs' @ cs\n                         else CS (f i) = cs' \\<and>\n                              CSS (f i) =\n                              butlast pcss @\n                              [(fst (last pcss) @ cs,\n                                snd (last pcss) @ cs)] @\n                              css", "apply (rule_tac x=\"[(pnorm@ps, pabr@ps)]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f (Suc k) = (cs', css', t'); i = Suc k; css' = css''' @ css;\n     css''' = [(pnorm @ ps @ cs, pabr @ ps @ cs)]\\<rbrakk>\n    \\<Longrightarrow> if [(pnorm @ ps, pabr @ ps)] = []\n                      then CSS (f i) = css \\<and> CS (f i) = cs' @ cs\n                      else CS (f i) = cs' \\<and>\n                           CSS (f i) =\n                           butlast [(pnorm @ ps, pabr @ ps)] @\n                           [(fst (last [(pnorm @ ps, pabr @ ps)]) @ cs,\n                             snd (last [(pnorm @ ps, pabr @ ps)]) @ cs)] @\n                           css", "by (simp add: CSS_def CS_def)"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case False"], ["proof (state)\nthis:\n  pcss \\<noteq> []\n\ngoal (1 subgoal):\n 1. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "note pcss_k_not_Nil = this"], ["proof (state)\nthis:\n  pcss \\<noteq> []\n\ngoal (1 subgoal):\n 1. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with pcs_pcss_k"], ["proof (chain)\npicking this:\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  pcss \\<noteq> []", "obtain\n          cs'': \"cs''=pcs\" and\n          css'': \"css''= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css\""], ["proof (prove)\nusing this:\n  if pcss = [] then css'' = css \\<and> cs'' = pcs @ cs\n  else cs'' = pcs \\<and>\n       css'' =\n       butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  pcss \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>cs'' = pcs;\n      css'' =\n      butlast pcss @\n      [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cs'' = pcs\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from f_Suc_k f_k f_step [rule_format, of k]"], ["proof (chain)\npicking this:\n  f (Suc k) = (cs', css', t')\n  f k = (cs'', css'', t'')\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)", "have step_i_full: \"\\<Gamma>\\<turnstile> (cs'',css'',t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  f (Suc k) = (cs', css', t')\n  f k = (cs'', css'', t'')\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (Suc k)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n\ngoal (1 subgoal):\n 1. pcss \\<noteq> [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (cases cs'')"], ["proof (state)\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case (Cons c' cs)"], ["proof (state)\nthis:\n  cs'' = c' # cs\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with step_Cons' [OF step_i_full]"], ["proof (chain)\npicking this:\n  cs'' = ?c # ?cs \\<Longrightarrow>\n  \\<exists>css''a.\n     css' = css''a @ css'' \\<and>\n     (if css''a = [] then \\<exists>p. cs' = p @ ?cs\n      else \\<exists>pnorm pabr. css''a = [(pnorm @ ?cs, pabr @ ?cs)])\n  cs'' = c' # cs", "obtain css''' where css': \"css' = css'''@css''\""], ["proof (prove)\nusing this:\n  cs'' = ?c # ?cs \\<Longrightarrow>\n  \\<exists>css''a.\n     css' = css''a @ css'' \\<and>\n     (if css''a = [] then \\<exists>p. cs' = p @ ?cs\n      else \\<exists>pnorm pabr. css''a = [(pnorm @ ?cs, pabr @ ?cs)])\n  cs'' = c' # cs\n\ngoal (1 subgoal):\n 1. (\\<And>css'''.\n        css' = css''' @ css'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  css' = css''' @ css''\n\ngoal (2 subgoals):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       cs'' = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with cs'' css'' f_Suc_k eq_i_Suc_k pcss_k_not_Nil"], ["proof (chain)\npicking this:\n  cs'' = pcs\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n  pcss \\<noteq> []\n  css' = css''' @ css''", "show ?thesis"], ["proof (prove)\nusing this:\n  cs'' = pcs\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n  pcss \\<noteq> []\n  css' = css''' @ css''\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "apply (rule_tac x=\"cs'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cs'' = pcs;\n     css'' =\n     butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css;\n     f (Suc k) = (cs', css', t'); i = Suc k; pcss \\<noteq> [];\n     css' = css''' @ css''\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pcss.\n                         if pcss = []\n                         then CSS (f i) = css \\<and> CS (f i) = cs' @ cs\n                         else CS (f i) = cs' \\<and>\n                              CSS (f i) =\n                              butlast pcss @\n                              [(fst (last pcss) @ cs,\n                                snd (last pcss) @ cs)] @\n                              css", "apply (rule_tac x=\"css'''@pcss\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cs'' = pcs;\n     css'' =\n     butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css;\n     f (Suc k) = (cs', css', t'); i = Suc k; pcss \\<noteq> [];\n     css' = css''' @ css''\\<rbrakk>\n    \\<Longrightarrow> if css''' @ pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = cs' @ cs\n                      else CS (f i) = cs' \\<and>\n                           CSS (f i) =\n                           butlast (css''' @ pcss) @\n                           [(fst (last (css''' @ pcss)) @ cs,\n                             snd (last (css''' @ pcss)) @ cs)] @\n                           css", "by (clarsimp simp add: CSS_def CS_def butlast_append)"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case Nil"], ["proof (state)\nthis:\n  cs'' = []\n\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "note cs''_Nil = this"], ["proof (state)\nthis:\n  cs'' = []\n\ngoal (1 subgoal):\n 1. cs'' = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof (cases \"butlast pcss\")"], ["proof (state)\ngoal (2 subgoals):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       butlast pcss = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case (Cons bpcs bpcss)"], ["proof (state)\nthis:\n  butlast pcss = bpcs # bpcss\n\ngoal (2 subgoals):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       butlast pcss = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with cs''_Nil step_i_full css''"], ["proof (chain)\npicking this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  butlast pcss = bpcs # bpcss", "have *: \"\\<Gamma>\\<turnstile> ([],[hd css'']@tl css'',t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  butlast pcss = bpcs # bpcss\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                         (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', css', t')\n\ngoal (2 subgoals):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       butlast pcss = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [hd css''] @ tl css'', t'') \\<rightarrow>\n                       (cs', css', t')\n\ngoal (2 subgoals):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       butlast pcss = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from step_Nil [OF *]"], ["proof (chain)\npicking this:\n  [hd css''] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [hd css''] @ tl css'' \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow> cs' = snd (hd [hd css'']) \\<and> t' = Normal s'\n   | _ \\<Rightarrow> cs' = fst (hd [hd css'']) \\<and> t' = t'')", "obtain css': \"css'=tl css''\" and\n                   cs': \"cs' = (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n                                 | _ \\<Rightarrow> fst (hd css''))\""], ["proof (prove)\nusing this:\n  [hd css''] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [hd css''] @ tl css'' \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow> cs' = snd (hd [hd css'']) \\<and> t' = Normal s'\n   | _ \\<Rightarrow> cs' = fst (hd [hd css'']) \\<and> t' = t'')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>css' = tl css'';\n      cs' =\n      (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n       | _ \\<Rightarrow> fst (hd css''))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: xstate.splits)"], ["proof (state)\nthis:\n  css' = tl css''\n  cs' =\n  (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n   | _ \\<Rightarrow> fst (hd css''))\n\ngoal (2 subgoals):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       butlast pcss = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from css'' Cons pcss_k_not_Nil"], ["proof (chain)\npicking this:\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  butlast pcss = bpcs # bpcss\n  pcss \\<noteq> []", "have \"hd css'' = hd pcss\""], ["proof (prove)\nusing this:\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  butlast pcss = bpcs # bpcss\n  pcss \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd css'' = hd pcss", "by (auto simp add: neq_Nil_conv split: if_split_asm)"], ["proof (state)\nthis:\n  hd css'' = hd pcss\n\ngoal (2 subgoals):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n 2. \\<And>a list.\n       butlast pcss = a # list \\<Longrightarrow>\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with css' cs' css'' cs''_Nil Cons pcss_k_not_Nil f_Suc_k eq_i_Suc_k"], ["proof (chain)\npicking this:\n  css' = tl css''\n  cs' =\n  (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n   | _ \\<Rightarrow> fst (hd css''))\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  cs'' = []\n  butlast pcss = bpcs # bpcss\n  pcss \\<noteq> []\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n  hd css'' = hd pcss", "show ?thesis"], ["proof (prove)\nusing this:\n  css' = tl css''\n  cs' =\n  (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n   | _ \\<Rightarrow> fst (hd css''))\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  cs'' = []\n  butlast pcss = bpcs # bpcss\n  pcss \\<noteq> []\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n  hd css'' = hd pcss\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "apply (rule_tac x=\"cs'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>css' = tl css'';\n     cs' =\n     (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n      | _ \\<Rightarrow> fst (hd css''));\n     css'' =\n     butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css;\n     cs'' = []; butlast pcss = bpcs # bpcss; pcss \\<noteq> [];\n     f (Suc k) = (cs', css', t'); i = Suc k; hd css'' = hd pcss\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pcss.\n                         if pcss = []\n                         then CSS (f i) = css \\<and> CS (f i) = cs' @ cs\n                         else CS (f i) = cs' \\<and>\n                              CSS (f i) =\n                              butlast pcss @\n                              [(fst (last pcss) @ cs,\n                                snd (last pcss) @ cs)] @\n                              css", "apply (rule_tac x=\"tl pcss\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>css' = tl css'';\n     cs' =\n     (case t'' of Abrupt s' \\<Rightarrow> snd (hd css'')\n      | _ \\<Rightarrow> fst (hd css''));\n     css'' =\n     butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css;\n     cs'' = []; butlast pcss = bpcs # bpcss; pcss \\<noteq> [];\n     f (Suc k) = (cs', css', t'); i = Suc k; hd css'' = hd pcss\\<rbrakk>\n    \\<Longrightarrow> if tl pcss = []\n                      then CSS (f i) = css \\<and> CS (f i) = cs' @ cs\n                      else CS (f i) = cs' \\<and>\n                           CSS (f i) =\n                           butlast (tl pcss) @\n                           [(fst (last (tl pcss)) @ cs,\n                             snd (last (tl pcss)) @ cs)] @\n                           css", "apply (clarsimp split: xstate.splits\n                       simp add: CS_def CSS_def neq_Nil_conv split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "case Nil"], ["proof (state)\nthis:\n  butlast pcss = []\n\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with css'' pcss_k_not_Nil"], ["proof (chain)\npicking this:\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  pcss \\<noteq> []\n  butlast pcss = []", "obtain pnorm pabr\n              where css'': \"css''= [(pnorm@cs,pabr@cs)]@css\" and\n              pcss_k: \"pcss = [(pnorm,pabr)]\""], ["proof (prove)\nusing this:\n  css'' =\n  butlast pcss @ [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  pcss \\<noteq> []\n  butlast pcss = []\n\ngoal (1 subgoal):\n 1. (\\<And>pnorm pabr.\n        \\<lbrakk>css'' = [(pnorm @ cs, pabr @ cs)] @ css;\n         pcss = [(pnorm, pabr)]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force simp add: neq_Nil_conv split: if_split_asm)"], ["proof (state)\nthis:\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  pcss = [(pnorm, pabr)]\n\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "with cs''_Nil step_i_full"], ["proof (chain)\npicking this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  pcss = [(pnorm, pabr)]", "have \"\\<Gamma>\\<turnstile>([],[(pnorm@cs,pabr@cs)]@css,t'') \\<rightarrow> (cs',css',t')\""], ["proof (prove)\nusing this:\n  cs'' = []\n  \\<Gamma>\\<turnstile> (cs'', css'', t'') \\<rightarrow> (cs', css', t')\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  pcss = [(pnorm, pabr)]\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], [(pnorm @ cs, pabr @ cs)] @ css,\n                          t'') \\<rightarrow>\n                         (cs', css', t')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], [(pnorm @ cs, pabr @ cs)] @ css,\n                        t'') \\<rightarrow>\n                       (cs', css', t')\n\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from step_Nil [OF this]"], ["proof (chain)\npicking this:\n  [(pnorm @ cs, pabr @ cs)] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [(pnorm @ cs, pabr @ cs)] @ css \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow>\n     cs' = snd (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = Normal s'\n   | _ \\<Rightarrow>\n       cs' = fst (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = t'')", "obtain\n              css': \"css'=css\" and\n              cs': \"(case t'' of\n              Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n              | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t'')\""], ["proof (prove)\nusing this:\n  [(pnorm @ cs, pabr @ cs)] \\<noteq> [] \\<Longrightarrow>\n  css' = tl [(pnorm @ cs, pabr @ cs)] @ css \\<and>\n  (case t'' of\n   Abrupt s' \\<Rightarrow>\n     cs' = snd (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = Normal s'\n   | _ \\<Rightarrow>\n       cs' = fst (hd [(pnorm @ cs, pabr @ cs)]) \\<and> t' = t'')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>css' = css;\n      case t'' of\n      Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n      | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp cong: xstate.case_cong)"], ["proof (state)\nthis:\n  css' = css\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "let \"?pcs_Suc_k \" = \"(case t'' of Abrupt s' \\<Rightarrow> pabr | _ \\<Rightarrow> pnorm)\""], ["proof (state)\ngoal (1 subgoal):\n 1. butlast pcss = [] \\<Longrightarrow>\n    \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from css'' css' cs' pcss_k f_Suc_k eq_i_Suc_k"], ["proof (chain)\npicking this:\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  css' = css\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n  pcss = [(pnorm, pabr)]\n  f (Suc k) = (cs', css', t')\n  i = Suc k", "show ?thesis"], ["proof (prove)\nusing this:\n  css'' = [(pnorm @ cs, pabr @ cs)] @ css\n  css' = css\n  case t'' of Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n  | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t''\n  pcss = [(pnorm, pabr)]\n  f (Suc k) = (cs', css', t')\n  i = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "apply (rule_tac x=\"?pcs_Suc_k\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>css'' = [(pnorm @ cs, pabr @ cs)] @ css; css' = css;\n     case t'' of\n     Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n     | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t'';\n     pcss = [(pnorm, pabr)]; f (Suc k) = (cs', css', t'); i = Suc k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pcss.\n                         if pcss = []\n                         then CSS (f i) = css \\<and>\n                              CS (f i) =\n                              (case t'' of Abrupt s' \\<Rightarrow> pabr\n                               | _ \\<Rightarrow> pnorm) @\n                              cs\n                         else CS (f i) =\n                              (case t'' of Abrupt s' \\<Rightarrow> pabr\n                               | _ \\<Rightarrow> pnorm) \\<and>\n                              CSS (f i) =\n                              butlast pcss @\n                              [(fst (last pcss) @ cs,\n                                snd (last pcss) @ cs)] @\n                              css", "apply (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>css'' = [(pnorm @ cs, pabr @ cs)] @ css; css' = css;\n     case t'' of\n     Abrupt s' \\<Rightarrow> cs' = pabr @ cs \\<and> t' = Normal s'\n     | _ \\<Rightarrow> cs' = pnorm @ cs \\<and> t' = t'';\n     pcss = [(pnorm, pabr)]; f (Suc k) = (cs', css', t'); i = Suc k\\<rbrakk>\n    \\<Longrightarrow> if [] = []\n                      then CSS (f i) = css \\<and>\n                           CS (f i) =\n                           (case t'' of Abrupt s' \\<Rightarrow> pabr\n                            | _ \\<Rightarrow> pnorm) @\n                           cs\n                      else CS (f i) =\n                           (case t'' of Abrupt s' \\<Rightarrow> pabr\n                            | _ \\<Rightarrow> pnorm) \\<and>\n                           CSS (f i) =\n                           butlast [] @\n                           [(fst (last []) @ cs, snd (last []) @ cs)] @ css", "apply (simp split: xstate.splits add: CS_def CSS_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i\\<le>Suc k.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n        else CS (f i) = pcs \\<and>\n             CSS (f i) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in inf) inf_progress:\nassumes f_0: \"f 0 = (c#cs,css,s)\"\nassumes f_step: \"\\<forall>i. \\<Gamma>\\<turnstile> f(i) \\<rightarrow> f(Suc i)\"\nassumes unfinished: \"\\<forall>i. \\<not> ((CS (f i) = cs) \\<and> (CSS (f i) = css))\"\nshows \"\\<exists>pcs pcss.\n          (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "from steps_hd_progress [OF f_0 f_step, of \"i\"] unfinished"], ["proof (chain)\npicking this:\n  \\<forall>ia<i.\n     \\<not> (CS (f ia) = cs \\<and> CSS (f ia) = css) \\<Longrightarrow>\n  \\<forall>ia\\<le>i.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f ia) = css \\<and> CS (f ia) = pcs @ cs\n        else CS (f ia) = pcs \\<and>\n             CSS (f ia) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>ia<i.\n     \\<not> (CS (f ia) = cs \\<and> CSS (f ia) = css) \\<Longrightarrow>\n  \\<forall>ia\\<le>i.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f ia) = css \\<and> CS (f ia) = pcs @ cs\n        else CS (f ia) = pcs \\<and>\n             CSS (f ia) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n  \\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<exists>pcs pcss.\n       if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n       else CS (f i) = pcs \\<and>\n            CSS (f i) =\n            butlast pcss @\n            [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "by auto"], ["proof (state)\nthis:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n     else CS (f i) = pcs \\<and>\n          CSS (f i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma skolemize1: \"\\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow> \\<exists>f.\\<forall>x. P x \\<longrightarrow> Q x (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow>\n    \\<exists>f. \\<forall>x. P x \\<longrightarrow> Q x (f x)", "by (rule choice) blast"], ["", "lemma skolemize2: \"\\<forall>x. P x \\<longrightarrow> (\\<exists>y z. Q x y z) \\<Longrightarrow> \\<exists>f g.\\<forall>x. P x \\<longrightarrow> Q x (f x) (g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       P x \\<longrightarrow> (\\<exists>y z. Q x y z) \\<Longrightarrow>\n    \\<exists>f g. \\<forall>x. P x \\<longrightarrow> Q x (f x) (g x)", "apply (drule skolemize1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>x.\n          P x \\<longrightarrow> (\\<exists>z. Q x (f x) z) \\<Longrightarrow>\n    \\<exists>f g. \\<forall>x. P x \\<longrightarrow> Q x (f x) (g x)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>x.\n          P x \\<longrightarrow> (\\<exists>z. Q x (f x) z) \\<Longrightarrow>\n       \\<exists>f g. \\<forall>x. P x \\<longrightarrow> Q x (f x) (g x)", "apply (drule skolemize1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<exists>fa.\n          \\<forall>x.\n             P x \\<longrightarrow> Q x (f x) (fa x) \\<Longrightarrow>\n       \\<exists>f g. \\<forall>x. P x \\<longrightarrow> Q x (f x) (g x)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skolemize2': \"\\<forall>x.\\<exists>y z. P x y z \\<Longrightarrow> \\<exists>f g.\\<forall>x. P x (f x) (g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>y z. P x y z \\<Longrightarrow>\n    \\<exists>f g. \\<forall>x. P x (f x) (g x)", "apply (drule choice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. \\<forall>x. \\<exists>z. P x (f x) z \\<Longrightarrow>\n    \\<exists>f g. \\<forall>x. P x (f x) (g x)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>x. \\<exists>z. P x (f x) z \\<Longrightarrow>\n       \\<exists>f g. \\<forall>x. P x (f x) (g x)", "apply (drule choice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<exists>fa. \\<forall>x. P x (f x) (fa x) \\<Longrightarrow>\n       \\<exists>f g. \\<forall>x. P x (f x) (g x)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem (in inf) inf_cases:\n  fixes c::\"('s,'p,'f) com\"\n  assumes inf: \"inf \\<Gamma> (c#cs) css s\"\n  shows \"inf \\<Gamma> [c] [] s \\<or> (\\<exists>t. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and> inf \\<Gamma> cs css t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from inf"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> (c # cs) css s", "obtain f where\n    f_0: \"f 0 = (c#cs,css,s)\" and\n    f_step: \"(\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i))\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (c # cs) css s\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (c # cs, css, s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = (c # cs, css, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "proof (cases \"\\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "case True"], ["proof (state)\nthis:\n  \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "define k where \"k = (LEAST i. CS (f i) = cs \\<and> CSS (f i) = css)\""], ["proof (state)\nthis:\n  k = (LEAST i. CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from True"], ["proof (chain)\npicking this:\n  \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css", "obtain CS_f_k: \"CS (f k) = cs\" and CSS_f_k: \"CSS (f k) = css\""], ["proof (prove)\nusing this:\n  \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>CS (f k) = cs; CSS (f k) = css\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>CS (f k) = cs; CSS (f k) = css\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<lbrakk>CS (f k) = cs; CSS (f k) = css\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        CS (f i) = cs \\<and> CSS (f i) = css\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (drule LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<lbrakk>CS (f k) = cs; CSS (f k) = css\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        CS (f (LEAST x. CS (f x) = cs \\<and> CSS (f x) = css)) = cs \\<and>\n        CSS (f (LEAST x. CS (f x) = cs \\<and> CSS (f x) = css)) =\n        css\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (simp add: k_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  CS (f k) = cs\n  CSS (f k) = css\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "have less_k_prop: \"\\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < k \\<Longrightarrow> \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "apply (unfold k_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < (LEAST i. CS (f i) = cs \\<and> CSS (f i) = css) \\<Longrightarrow>\n       \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "apply (drule not_less_Least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (CS (f i) = cs \\<and> CSS (f i) = css) \\<Longrightarrow>\n       \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "have \"\\<Gamma>\\<turnstile>([c], [], s) \\<rightarrow>\\<^sup>* ([],[],S (f k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "have \"\\<forall>i\\<le>k. \\<exists>pcs pcss.\n        (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "by (rule steps_hd_progress\n        [OF f_0 f_step, where k=k, OF less_k_prop])"], ["proof (state)\nthis:\n  \\<forall>i\\<le>k.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n        else CS (f i) = pcs \\<and>\n             CSS (f i) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "from skolemize2 [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>fa g.\n     \\<forall>x\\<le>k.\n        if g x = [] then CSS (f x) = css \\<and> CS (f x) = fa x @ cs\n        else CS (f x) = fa x \\<and>\n             CSS (f x) =\n             butlast (g x) @\n             [(fst (last (g x)) @ cs, snd (last (g x)) @ cs)] @ css", "obtain pcs pcss where\n        pcs_pcss:\n            \"\\<forall>i\\<le>k.\n               (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                else CS (f i)=pcs i \\<and>\n                     CSS (f i)= butlast (pcss i)@\n                           [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                           css)\""], ["proof (prove)\nusing this:\n  \\<exists>fa g.\n     \\<forall>x\\<le>k.\n        if g x = [] then CSS (f x) = css \\<and> CS (f x) = fa x @ cs\n        else CS (f x) = fa x \\<and>\n             CSS (f x) =\n             butlast (g x) @\n             [(fst (last (g x)) @ cs, snd (last (g x)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. (\\<And>pcss pcs.\n        \\<forall>i\\<le>k.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  \\<forall>i\\<le>k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "from pcs_pcss [rule_format, of k] CS_f_k CSS_f_k"], ["proof (chain)\npicking this:\n  k \\<le> k \\<Longrightarrow>\n  if pcss k = [] then CSS (f k) = css \\<and> CS (f k) = pcs k @ cs\n  else CS (f k) = pcs k \\<and>\n       CSS (f k) =\n       butlast (pcss k) @\n       [(fst (last (pcss k)) @ cs, snd (last (pcss k)) @ cs)] @ css\n  CS (f k) = cs\n  CSS (f k) = css", "have finished: \"pcs k = []\" \"pcss k = []\""], ["proof (prove)\nusing this:\n  k \\<le> k \\<Longrightarrow>\n  if pcss k = [] then CSS (f k) = css \\<and> CS (f k) = pcs k @ cs\n  else CS (f k) = pcs k \\<and>\n       CSS (f k) =\n       butlast (pcss k) @\n       [(fst (last (pcss k)) @ cs, snd (last (pcss k)) @ cs)] @ css\n  CS (f k) = cs\n  CSS (f k) = css\n\ngoal (1 subgoal):\n 1. pcs k = [] &&& pcss k = []", "by (auto simp add: CS_def CSS_def S_def split: if_split_asm)"], ["proof (state)\nthis:\n  pcs k = []\n  pcss k = []\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "from pcs_pcss"], ["proof (chain)\npicking this:\n  \\<forall>i\\<le>k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css", "have simul: \"\\<forall>i\\<le>k. (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n                   else CS (f i)=pcs i \\<and>\n                     CSS (f i)= butlast (pcss i)@\n                           [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                            css)\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k.\n       if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n       else CS (f i) = pcs i \\<and>\n            CSS (f i) =\n            butlast (pcss i) @\n            [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<le>k.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "from steps_hd_drop_suffix_finite [OF f_0 f_step less_k_prop simul] finished"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n  pcs k = []\n  pcss k = []", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                       (pcs k, pcss k, S (f k))\n  pcs k = []\n  pcss k = []\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>*\n                         ([], [], S (f k))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>* ([], [], S (f k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>* ([], [], S (f k))\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "hence \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> S (f k)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([c], [], s) \\<rightarrow>\\<^sup>* ([], [], S (f k))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> S (f k)", "by (rule steps_impl_exec)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> S (f k)\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> S (f k)\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from CS_f_k CSS_f_k f_step"], ["proof (chain)\npicking this:\n  CS (f k) = cs\n  CSS (f k) = css\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"inf \\<Gamma> cs css (S (f k))\""], ["proof (prove)\nusing this:\n  CS (f k) = cs\n  CSS (f k) = css\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> cs css (S (f k))", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>CS (f k) = cs; CSS (f k) = css;\n     \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa.\n                         fa 0 = (cs, css, S (f k)) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> fa i \\<rightarrow>\n            fa (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (i + k)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>CS (f k) = cs; CSS (f k) = css;\n     \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n    \\<Longrightarrow> f (0 + k) = (cs, css, S (f k)) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (i + k) \\<rightarrow>\n         f (Suc i + k))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>CS (f k) = cs; CSS (f k) = css;\n     \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n    \\<Longrightarrow> f k = (cs, css, S (f k))", "apply (auto simp add: CS_def CSS_def S_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> cs css (S (f k))\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> S (f k)\n  AlternativeSmallStep.inf \\<Gamma> cs css (S (f k))", "have \"(\\<exists>t. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and> inf \\<Gamma> cs css t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> S (f k)\n  AlternativeSmallStep.inf \\<Gamma> cs css (S (f k))\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n       AlternativeSmallStep.inf \\<Gamma> cs css t", "by blast"], ["proof (state)\nthis:\n  \\<exists>t.\n     \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n     AlternativeSmallStep.inf \\<Gamma> cs css t\n\ngoal (2 subgoals):\n 1. \\<exists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)\n 2. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>t.\n     \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n     AlternativeSmallStep.inf \\<Gamma> cs css t\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n  (\\<exists>t.\n      \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n      AlternativeSmallStep.inf \\<Gamma> cs css t)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "case False"], ["proof (state)\nthis:\n  \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "hence unfinished: \"\\<forall>i. \\<not> ((CS (f i) = cs) \\<and> (CSS (f i) = css))\""], ["proof (prove)\nusing this:\n  \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i. \\<not> (CS (f i) = cs \\<and> CSS (f i) = css)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from inf_progress [OF f_0 f_step this]"], ["proof (chain)\npicking this:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f ?i) = css \\<and> CS (f ?i) = pcs @ cs\n     else CS (f ?i) = pcs \\<and>\n          CSS (f ?i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "have \"\\<forall>i. \\<exists>pcs pcss.\n          (if pcss = [] then CSS (f i)=css \\<and> CS (f i)=pcs@cs\n           else CS (f i)=pcs  \\<and>\n                CSS (f i)= butlast pcss@\n                           [(fst (last pcss)@cs,(snd (last pcss))@cs)]@\n                           css)\""], ["proof (prove)\nusing this:\n  \\<exists>pcs pcss.\n     if pcss = [] then CSS (f ?i) = css \\<and> CS (f ?i) = pcs @ cs\n     else CS (f ?i) = pcs \\<and>\n          CSS (f ?i) =\n          butlast pcss @\n          [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>pcs pcss.\n          if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n          else CS (f i) = pcs \\<and>\n               CSS (f i) =\n               butlast pcss @\n               [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<exists>pcs pcss.\n        if pcss = [] then CSS (f i) = css \\<and> CS (f i) = pcs @ cs\n        else CS (f i) = pcs \\<and>\n             CSS (f i) =\n             butlast pcss @\n             [(fst (last pcss) @ cs, snd (last pcss) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from skolemize2' [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>fa g.\n     \\<forall>x.\n        if g x = [] then CSS (f x) = css \\<and> CS (f x) = fa x @ cs\n        else CS (f x) = fa x \\<and>\n             CSS (f x) =\n             butlast (g x) @\n             [(fst (last (g x)) @ cs, snd (last (g x)) @ cs)] @ css", "obtain pcs pcss where\n      pcs_pcss: \"\\<forall>i.\n          (if pcss i = [] then CSS (f i)=css \\<and> CS (f i)=pcs i@cs\n           else CS (f i)=pcs i  \\<and>\n                CSS (f i)= butlast (pcss i)@\n                           [(fst (last (pcss i))@cs,(snd (last (pcss i)))@cs)]@\n                           css)\""], ["proof (prove)\nusing this:\n  \\<exists>fa g.\n     \\<forall>x.\n        if g x = [] then CSS (f x) = css \\<and> CS (f x) = fa x @ cs\n        else CS (f x) = fa x \\<and>\n             CSS (f x) =\n             butlast (g x) @\n             [(fst (last (g x)) @ cs, snd (last (g x)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. (\\<And>pcss pcs.\n        \\<forall>i.\n           if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n           else CS (f i) = pcs i \\<and>\n                CSS (f i) =\n                butlast (pcss i) @\n                [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @\n                css \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  \\<forall>i.\n     if pcss i = [] then CSS (f i) = css \\<and> CS (f i) = pcs i @ cs\n     else CS (f i) = pcs i \\<and>\n          CSS (f i) =\n          butlast (pcss i) @\n          [(fst (last (pcss i)) @ cs, snd (last (pcss i)) @ cs)] @ css\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "define g where \"g i = (pcs i, pcss i, S (f i))\" for i"], ["proof (state)\nthis:\n  g ?i = (pcs ?i, pcss ?i, S (f ?i))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from pcs_pcss [rule_format, of 0] f_0"], ["proof (chain)\npicking this:\n  if pcss 0 = [] then CSS (f 0) = css \\<and> CS (f 0) = pcs 0 @ cs\n  else CS (f 0) = pcs 0 \\<and>\n       CSS (f 0) =\n       butlast (pcss 0) @\n       [(fst (last (pcss 0)) @ cs, snd (last (pcss 0)) @ cs)] @ css\n  f 0 = (c # cs, css, s)", "have \"g 0 = ([c],[],s)\""], ["proof (prove)\nusing this:\n  if pcss 0 = [] then CSS (f 0) = css \\<and> CS (f 0) = pcs 0 @ cs\n  else CS (f 0) = pcs 0 \\<and>\n       CSS (f 0) =\n       butlast (pcss 0) @\n       [(fst (last (pcss 0)) @ cs, snd (last (pcss 0)) @ cs)] @ css\n  f 0 = (c # cs, css, s)\n\ngoal (1 subgoal):\n 1. g 0 = ([c], [], s)", "by (auto split: if_split_asm simp add: CS_def CSS_def S_def g_def)"], ["proof (state)\nthis:\n  g 0 = ([c], [], s)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "moreover"], ["proof (state)\nthis:\n  g 0 = ([c], [], s)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "from steps_hd_drop_suffix_infinite [OF f_0 f_step unfinished pcs_pcss]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (pcs ?i, pcss ?i, S (f ?i)) \\<rightarrow>\n                       (pcs (Suc ?i), pcss (Suc ?i), S (f (Suc ?i)))", "have \"\\<forall>i. \\<Gamma>\\<turnstile>g i \\<rightarrow> g (Suc i)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (pcs ?i, pcss ?i, S (f ?i)) \\<rightarrow>\n                       (pcs (Suc ?i), pcss (Suc ?i), S (f (Suc ?i)))\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "ultimately"], ["proof (chain)\npicking this:\n  g 0 = ([c], [], s)\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)", "have \"inf \\<Gamma> [c] [] s\""], ["proof (prove)\nusing this:\n  g 0 = ([c], [], s)\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s\n\ngoal (1 subgoal):\n 1. \\<nexists>i. CS (f i) = cs \\<and> CSS (f i) = css \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n    (\\<exists>t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n        AlternativeSmallStep.inf \\<Gamma> cs css t)", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n  (\\<exists>t.\n      \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n      AlternativeSmallStep.inf \\<Gamma> cs css t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n  (\\<exists>t.\n      \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n      AlternativeSmallStep.inf \\<Gamma> cs css t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infE [consumes 1]:\n  assumes inf: \"inf \\<Gamma> (c#cs) css s\"\n  assumes cases: \"inf \\<Gamma> [c] [] s \\<Longrightarrow> P\"\n                 \"\\<And>t. \\<lbrakk>\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t; inf \\<Gamma> cs css t\\<rbrakk> \\<Longrightarrow> P\"\n  shows P"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using inf cases"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (c # cs) css s\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow> P\n  \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> ?t;\n   AlternativeSmallStep.inf \\<Gamma> cs css ?t\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>AlternativeSmallStep.inf \\<Gamma> (c # cs) css s;\n     AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow> P;\n     \\<And>t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n         AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (drule inf.inf_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow> P;\n     \\<And>t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n         AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n        \\<Longrightarrow> P;\n     AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<or>\n     (\\<exists>t.\n         \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<and>\n         AlternativeSmallStep.inf \\<Gamma> cs css t)\\<rbrakk>\n    \\<Longrightarrow> P", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inf_Seq:\n  \"inf \\<Gamma> (Seq c1 c2#cs) css (Normal s) = inf \\<Gamma> (c1#c2#cs) css (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s) =\n    AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "assume \"inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "obtain f where\n    f_0: \"f 0 = (Seq c1 c2#cs,css,Normal s)\" and\n    f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (Seq c1 c2 # cs, css, Normal s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = (Seq c1 c2 # cs, css, Normal s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "from f_step [rule_format, of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Seq c1 c2 # cs, css, Normal s)", "have \"f 1 = (c1#c2#cs,css,Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Seq c1 c2 # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = (c1 # c2 # cs, css, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (c1 # c2 # cs, css, Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "with f_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f 1 = (c1 # c2 # cs, css, Normal s)", "show \"inf \\<Gamma> (c1#c2#cs) css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f 1 = (c1 # c2 # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c1 # c2 # cs, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (c1 # c2 # cs, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c1 # c2 # cs, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (c1 # c2 # cs, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "assume \"inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)", "obtain f where\n    f_0: \"f 0 = (c1# c2#cs,css,Normal s)\" and\n    f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (c1 # c2 # cs, css, Normal s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = (c1 # c2 # cs, css, Normal s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "define g where \"g i = (case i of 0 \\<Rightarrow> (Seq c1 c2#cs,css,Normal s) | Suc j \\<Rightarrow> f j)\" for i"], ["proof (state)\nthis:\n  g ?i =\n  (case ?i of 0 \\<Rightarrow> (Seq c1 c2 # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "with f_0"], ["proof (chain)\npicking this:\n  f 0 = (c1 # c2 # cs, css, Normal s)\n  g ?i =\n  (case ?i of 0 \\<Rightarrow> (Seq c1 c2 # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)", "have\n    \"\\<Gamma>\\<turnstile>g 0 \\<rightarrow> g (Suc 0)\""], ["proof (prove)\nusing this:\n  f 0 = (c1 # c2 # cs, css, Normal s)\n  g ?i =\n  (case ?i of 0 \\<Rightarrow> (Seq c1 c2 # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0)", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "from f_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<forall>i. i\\<noteq>0 \\<longrightarrow> \\<Gamma>\\<turnstile>g i \\<rightarrow> g (Suc i)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<noteq> 0 \\<longrightarrow>\n       \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)", "by (auto simp add: g_def split: nat.splits)"], ["proof (state)\nthis:\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c1 # c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0)\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)", "show \"inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0)\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0);\n     \\<forall>i>0. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (Seq c1 c2 # cs, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=g in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> g 0 \\<rightarrow> g (Suc 0);\n     \\<forall>i>0. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i)\\<rbrakk>\n    \\<Longrightarrow> g 0 = (Seq c1 c2 # cs, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> g i \\<rightarrow> g (Suc i))", "apply (simp add: g_def split: nat.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (Seq c1 c2 # cs) css (Normal s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inf_WhileTrue:\n  assumes b: \"s \\<in> b\"\n  shows \"inf \\<Gamma> (While b c#cs) css (Normal s) =\n          inf \\<Gamma> (c#While b c#cs) css (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s) =\n    AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "assume \"inf \\<Gamma> (While b c # cs) css (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "obtain f where\n    f_0: \"f 0 = (While b c#cs,css,Normal s)\" and\n    f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (While b c # cs, css, Normal s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = (While b c # cs, css, Normal s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "from b f_step [rule_format, of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c # cs, css, Normal s)", "have \"f 1 = (c#While b c#cs,css,Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = (c # While b c # cs, css, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (c # While b c # cs, css, Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "with f_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f 1 = (c # While b c # cs, css, Normal s)", "show \"inf \\<Gamma> (c # While b c # cs) css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f 1 = (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c # While b c # cs, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (c # While b c # cs, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c # While b c # cs, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (c # While b c # cs, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "assume \"inf \\<Gamma> (c # While b c # cs) css (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)", "obtain f where\n    f_0: \"f 0 = (c # While b c #cs,css,Normal s)\" and\n    f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (c # While b c # cs, css, Normal s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = (c # While b c # cs, css, Normal s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "define h where \"h i = (case i of 0 \\<Rightarrow> (While b c#cs,css,Normal s) | Suc j \\<Rightarrow> f j)\"  for i"], ["proof (state)\nthis:\n  h ?i =\n  (case ?i of 0 \\<Rightarrow> (While b c # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "with b f_0"], ["proof (chain)\npicking this:\n  s \\<in> b\n  f 0 = (c # While b c # cs, css, Normal s)\n  h ?i =\n  (case ?i of 0 \\<Rightarrow> (While b c # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)", "have\n    \"\\<Gamma>\\<turnstile>h 0 \\<rightarrow> h (Suc 0)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  f 0 = (c # While b c # cs, css, Normal s)\n  h ?i =\n  (case ?i of 0 \\<Rightarrow> (While b c # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "from f_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<forall>i. i\\<noteq>0 \\<longrightarrow> \\<Gamma>\\<turnstile>h i \\<rightarrow> h (Suc i)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<noteq> 0 \\<longrightarrow>\n       \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)", "by (auto simp add: h_def split: nat.splits)"], ["proof (state)\nthis:\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # While b c # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)", "show \"inf \\<Gamma> (While b c # cs) css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0);\n     \\<forall>i>0. \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (While b c # cs, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=h in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0);\n     \\<forall>i>0. \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\\<rbrakk>\n    \\<Longrightarrow> h 0 = (While b c # cs, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i))", "apply (simp add: h_def split: nat.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (While b c # cs) css (Normal s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inf_Catch:\n\"inf \\<Gamma> (Catch c1 c2#cs) css (Normal s) = inf \\<Gamma> [c1] ((cs,c2#cs)#css) (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s) =\n    AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "assume \"inf \\<Gamma> (Catch c1 c2#cs) css (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "obtain f where\n    f_0: \"f 0 = (Catch c1 c2#cs,css,Normal s)\" and\n    f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (Catch c1 c2 # cs, css, Normal s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = (Catch c1 c2 # cs, css, Normal s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "from f_step [rule_format, of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Catch c1 c2 # cs, css, Normal s)", "have \"f 1 = ([c1],(cs,c2#cs)#css,Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Catch c1 c2 # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = ([c1], (cs, c2 # cs) # css, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = ([c1], (cs, c2 # cs) # css, Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n 2. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "with f_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f 1 = ([c1], (cs, c2 # cs) # css, Normal s)", "show \"inf \\<Gamma> [c1] ((cs,c2#cs)#css) (Normal s)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  f 1 = ([c1], (cs, c2 # cs) # css, Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c1], (cs, c2 # cs) # css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([c1], (cs, c2 # cs) # css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c1], (cs, c2 # cs) # css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) =\n                      ([c1], (cs, c2 # cs) # css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "assume \"inf \\<Gamma> [c1] ((cs,c2#cs)#css) (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)", "obtain f where\n    f_0: \"f 0 = ([c1],(cs,c2#cs)#css,Normal s)\" and\n    f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css) (Normal s)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = ([c1], (cs, c2 # cs) # css, Normal s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = ([c1], (cs, c2 # cs) # css, Normal s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "define h where \"h i = (case i of 0 \\<Rightarrow> (Catch c1 c2#cs,css,Normal s) | Suc j \\<Rightarrow> f j)\"  for i"], ["proof (state)\nthis:\n  h ?i =\n  (case ?i of 0 \\<Rightarrow> (Catch c1 c2 # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "with f_0"], ["proof (chain)\npicking this:\n  f 0 = ([c1], (cs, c2 # cs) # css, Normal s)\n  h ?i =\n  (case ?i of 0 \\<Rightarrow> (Catch c1 c2 # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)", "have\n    \"\\<Gamma>\\<turnstile>h 0 \\<rightarrow> h (Suc 0)\""], ["proof (prove)\nusing this:\n  f 0 = ([c1], (cs, c2 # cs) # css, Normal s)\n  h ?i =\n  (case ?i of 0 \\<Rightarrow> (Catch c1 c2 # cs, css, Normal s)\n   | Suc j \\<Rightarrow> f j)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "from f_step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)", "have \"\\<forall>i. i\\<noteq>0 \\<longrightarrow> \\<Gamma>\\<turnstile>h i \\<rightarrow> h (Suc i)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<noteq> 0 \\<longrightarrow>\n       \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)", "by (auto simp add: h_def split: nat.splits)"], ["proof (state)\nthis:\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] ((cs, c2 # cs) # css)\n     (Normal s) \\<Longrightarrow>\n    AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)", "show \"inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0)\n  \\<forall>i.\n     i \\<noteq> 0 \\<longrightarrow>\n     \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0);\n     \\<forall>i>0. \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (Catch c1 c2 # cs, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=h in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> h 0 \\<rightarrow> h (Suc 0);\n     \\<forall>i>0. \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i)\\<rbrakk>\n    \\<Longrightarrow> h 0 = (Catch c1 c2 # cs, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> h i \\<rightarrow> h (Suc i))", "apply (simp add: h_def split: nat.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (Catch c1 c2 # cs) css (Normal s)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem terminates_impl_not_inf:\n  assumes termi: \"\\<Gamma>\\<turnstile>c \\<down> s\"\n  shows \"\\<not>inf \\<Gamma> [c] [] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s", "using termi"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s", "proof induct"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Skip] [] (Normal s)\n 2. \\<And>f s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic f] [] (Normal s)\n 3. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 4. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 5. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 6. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                    s'\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [While b c] [] (Normal s)\nA total of 18 subgoals...", "case (Skip s)"], ["proof (state)\nthis:\n  \n\ngoal (18 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Skip] [] (Normal s)\n 2. \\<And>f s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic f] [] (Normal s)\n 3. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 4. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 5. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 6. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                    s'\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [While b c] [] (Normal s)\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Skip] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Skip], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Skip], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Skip], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Skip], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Skip], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Skip], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Skip], [], Normal s)", "have \"f (Suc 0) = ([],[],Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Skip], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Skip], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Skip] [] (Normal s)\n\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic f] [] (Normal s)\n 2. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 4. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 5. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic f] [] (Normal s)\n 2. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 4. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 5. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\nA total of 17 subgoals...", "case (Basic g s)"], ["proof (state)\nthis:\n  \n\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic f] [] (Normal s)\n 2. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 4. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 5. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic g] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Basic g], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Basic g], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Basic g], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Basic g], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Basic g], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Basic g], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Basic g], [], Normal s)", "have \"f (Suc 0) = ([],[],Normal (g s))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Basic g], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Normal (g s))", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Normal (g s))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Basic g], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal (g s))", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal (g s))\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Basic g] [] (Normal s)\n\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 4. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                 (Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                  [] (Normal s)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 4. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                 (Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                  [] (Normal s)\nA total of 16 subgoals...", "case (Spec r s)"], ["proof (state)\nthis:\n  \n\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 4. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                 (Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                  [] (Normal s)\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Spec r], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Spec r], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Spec r], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Spec r], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Spec r], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Spec r], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 0]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Spec r], [], Normal s)", "have \"\\<Gamma>\\<turnstile>([Spec r], [], Normal s) \\<rightarrow> f (Suc 0)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Spec r], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([Spec r], [], Normal s) \\<rightarrow> f (Suc 0)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([Spec r], [], Normal s) \\<rightarrow> f (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Spec r], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([Spec r], [], Normal s) \\<rightarrow> f (Suc 0)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([Spec r], [], Normal s) \\<rightarrow> f (Suc 0)\n\ngoal (1 subgoal):\n 1. False", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f (Suc 0) = ([], [], Normal t); (s, t) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f (Suc 0) = ([], [], Stuck);\n     \\<forall>t. (s, t) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f (Suc 0) = ([], [], Normal t); (s, t) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f (Suc 0) = ([], [], Stuck);\n     \\<forall>t. (s, t) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"(s, t) \\<in> r\" \"f (Suc 0) = ([], [], Normal t)\""], ["proof (state)\nthis:\n  (s, t) \\<in> r\n  f (Suc 0) = ([], [], Normal t)\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f (Suc 0) = ([], [], Normal t); (s, t) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f (Suc 0) = ([], [], Stuck);\n     \\<forall>t. (s, t) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  (s, t) \\<in> r\n  f (Suc 0) = ([], [], Normal t)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  (s, t) \\<in> r\n  f (Suc 0) = ([], [], Normal t)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f (Suc 0) = ([], [], Stuck);\n     \\<forall>t. (s, t) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f (Suc 0) = ([], [], Stuck);\n     \\<forall>t. (s, t) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<forall>t. (s, t) \\<notin> r\" \"f (Suc 0) = ([], [], Stuck)\""], ["proof (state)\nthis:\n  \\<forall>t. (s, t) \\<notin> r\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f (Suc 0) = ([], [], Stuck);\n     \\<forall>t. (s, t) \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  \\<forall>t. (s, t) \\<notin> r\n  f (Suc 0) = ([], [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  \\<forall>t. (s, t) \\<notin> r\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Spec r] [] (Normal s)\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 3. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 3. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\nA total of 15 subgoals...", "case (Guard s g c m)"], ["proof (state)\nthis:\n  s \\<in> g\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 3. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\nA total of 15 subgoals...", "have g: \"s \\<in> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> g", "by fact"], ["proof (state)\nthis:\n  s \\<in> g\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 3. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\nA total of 15 subgoals...", "have hyp: \"\\<not> inf \\<Gamma> [c] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Guard f g c] [] (Normal s)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 3. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\nA total of 15 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard m g c] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Guard m g c], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Guard m g c], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from g f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<in> g\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Guard m g c], [], Normal s)", "have \"f (Suc 0) = ([c],[],Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> g\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Guard m g c], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([c], [], Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([c], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = ([c], [], Normal s)", "have \"inf \\<Gamma> [c] [] (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = ([c], [], Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([c], [], Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = ([c], [], Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard m g c] [] (Normal s)\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 2. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 10. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 2. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 10. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\nA total of 14 subgoals...", "case (GuardFault s g m c)"], ["proof (state)\nthis:\n  s \\<notin> g\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 2. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 10. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\nA total of 14 subgoals...", "have g: \"s \\<notin> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> g", "by fact"], ["proof (state)\nthis:\n  s \\<notin> g\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard f g c] [] (Normal s)\n 2. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 10. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\nA total of 14 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard m g c] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Guard m g c], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Guard m g c], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from g f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<notin> g\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Guard m g c], [], Normal s)", "have \"f (Suc 0) = ([],[],Fault m)\""], ["proof (prove)\nusing this:\n  s \\<notin> g\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Guard m g c], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Fault m)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Guard m g c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Guard m g c] [] (Normal s)\n\ngoal (13 subgoals):\n 1. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 9. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                 (Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [DynCom c] [] (Normal s)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 9. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                 (Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [DynCom c] [] (Normal s)\nA total of 13 subgoals...", "case (Fault c m)"], ["proof (state)\nthis:\n  \n\ngoal (13 subgoals):\n 1. \\<And>c f. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault f)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 9. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                 (Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [DynCom c] [] (Normal s)\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault m)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([c], [], Fault m)\""], ["proof (state)\nthis:\n  f 0 = ([c], [], Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([c], [], Fault m)", "have \"f (Suc 0) = ([],[],Fault m)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([c], [], Fault m)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Fault m)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Fault m);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Fault m)\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 8. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 10. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 8. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 10. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\nA total of 12 subgoals...", "case (Seq c1 s c2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] s'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 8. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 10. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\nA total of 12 subgoals...", "have hyp_c1: \"\\<not> inf \\<Gamma> [c1] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 8. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 10. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\nA total of 12 subgoals...", "have hyp_c2: \"\\<forall>s'. \\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> s' \\<longrightarrow> \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and> \\<not> inf \\<Gamma> [c2] [] s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] s'", "by fact"], ["proof (state)\nthis:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] s'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 8. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 10. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\nA total of 12 subgoals...", "have \"\\<not> inf \\<Gamma> ([c1,c2]) [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c1, c2] [] (Normal s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1, c2] []\n     (Normal s) \\<Longrightarrow>\n    False", "assume \"inf \\<Gamma> [c1, c2] [] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1, c2] [] (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1, c2] []\n     (Normal s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [c1, c2] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [c1, c2] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "proof (cases rule: infE)"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s) \\<Longrightarrow>\n    False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [c2] [] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"inf \\<Gamma> [c1] [] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s) \\<Longrightarrow>\n    False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [c2] [] t\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c1"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [c2] [] t\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [c2] [] t\\<rbrakk>\n       \\<Longrightarrow> False", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [c2] [] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\" \"inf \\<Gamma> [c2] [] t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [c2] [] t\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c2"], ["proof (chain)\npicking this:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] s'\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] s'\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] t\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1, c2] [] (Normal s)\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Seq c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 8. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 10. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1, c2] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Seq c1 c2] [] (Normal s)", "by (simp add: inf_Seq)"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Seq c1 c2] [] (Normal s)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 7. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 9. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 10. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 7. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 9. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 10. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\nA total of 11 subgoals...", "case (CondTrue s b c1 c2)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 7. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 9. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 10. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\nA total of 11 subgoals...", "have b: \"s \\<in> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> b", "by fact"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 7. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 9. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 10. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\nA total of 11 subgoals...", "have hyp_c1: \"\\<not> inf \\<Gamma> [c1] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 7. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 9. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 10. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Cond b c1 c2] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Cond b c1 c2], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Cond b c1 c2], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from b f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Cond b c1 c2], [], Normal s)", "have \"f 1 = ([c1],[],Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Cond b c1 c2], [], Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = ([c1], [], Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = ([c1], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = ([c1], [], Normal s)", "have \"inf \\<Gamma> [c1] [] (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = ([c1], [], Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c1], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([c1], [], Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c1], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = ([c1], [], Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c1"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Cond b c1 c2] [] (Normal s)\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 6. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 8. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 9. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                    (Normal s')\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 6. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 8. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 9. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                    (Normal s')\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (CondFalse s b c2 c1)"], ["proof (state)\nthis:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 6. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 8. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 9. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                    (Normal s')\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have b: \"s \\<notin> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> b", "by fact"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 6. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 8. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 9. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                    (Normal s')\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp_c2: \"\\<not> inf \\<Gamma> [c2] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Cond b c\\<^sub>1 c\\<^sub>2] [] (Normal s)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 6. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 8. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 9. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                    (Normal s')\\<rbrakk>\n        \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                  [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Cond b c1 c2] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Cond b c1 c2], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Cond b c1 c2], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from b f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Cond b c1 c2], [], Normal s)", "have \"f 1 = ([c2],[],Normal s)\""], ["proof (prove)\nusing this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Cond b c1 c2], [], Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = ([c2], [], Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = ([c2], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = ([c2], [], Normal s)", "have \"inf \\<Gamma> [c2] [] (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = ([c2], [], Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c2], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([c2], [], Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c2], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = ([c2], [], Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Cond b c1 c2], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c2"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Cond b c1 c2] [] (Normal s)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (WhileTrue s b c)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] s'\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have b: \"s \\<in> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> b", "by fact"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp_c: \"\\<not> inf \\<Gamma> [c] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp_w: \"\\<forall>s'. \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n                      \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and> \\<not> inf \\<Gamma> [While b c] [] s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] s'", "by fact"], ["proof (state)\nthis:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] s'\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have \"\\<not> inf \\<Gamma> [c,While b c] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c, While b c] []\n     (Normal s) \\<Longrightarrow>\n    False", "assume \"inf \\<Gamma> [c,While b c] [] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c, While b c] []\n     (Normal s) \\<Longrightarrow>\n    False", "from this hyp_c hyp_w"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] s'", "show False"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] s'\n\ngoal (1 subgoal):\n 1. False", "by (cases rule: infE) auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] []\n                   s'\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [While b c] [] (Normal s)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 5. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 7. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 8. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "with b"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)", "show ?case"], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c, While b c] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)", "by (simp add: inf_WhileTrue)"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 4. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 6. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 7. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 4. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 6. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 7. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (WhileFalse s b c)"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 4. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 6. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 7. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have b: \"s \\<notin> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> b", "by fact"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 4. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 6. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 7. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([While b c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([While b c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([While b c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([While b c], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([While b c], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([While b c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from b f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([While b c], [], Normal s)", "have \"f (Suc 0) = ([],[],Normal s)\""], ["proof (prove)\nusing this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([While b c], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([While b c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [While b c] [] (Normal s)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 3. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 5. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 6. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 3. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 5. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 6. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (Call p bdy s)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 3. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 5. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 6. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have bdy: \"\\<Gamma> p = Some bdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 3. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 5. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 6. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp: \"\\<not> inf \\<Gamma> [bdy] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 3. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 5. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 6. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have not_inf_bdy:\n    \"\\<not> inf \\<Gamma> [bdy] [([],[Throw])] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])]\n            (Normal s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])]\n     (Normal s) \\<Longrightarrow>\n    False", "assume \"inf \\<Gamma> [bdy] [([],[Throw])] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])]\n     (Normal s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "proof (rule infE)"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s) \\<Longrightarrow>\n    False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"inf \\<Gamma> [bdy] [] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s) \\<Longrightarrow>\n    False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<Gamma>\\<turnstile>\\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume inf: \"inf \\<Gamma> [] [([], [Throw])] t\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t", "obtain f where\n        f_0: \"f 0 = ([],[([], [Throw])],t)\" and\n        f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = ([], [([], [Throw])], t);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = ([], [([], [Throw])], t)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n             s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [Throw])] t\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1. t = Normal x1 \\<Longrightarrow> False\n 2. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 3. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 4. t = Stuck \\<Longrightarrow> False", "case (Normal t')"], ["proof (state)\nthis:\n  t = Normal t'\n\ngoal (4 subgoals):\n 1. \\<And>x1. t = Normal x1 \\<Longrightarrow> False\n 2. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 3. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 4. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Normal t'", "have \"f (Suc 0) = ([],[],(Normal t'))\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Normal t'\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Normal t')", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Normal t')\n\ngoal (4 subgoals):\n 1. \\<And>x1. t = Normal x1 \\<Longrightarrow> False\n 2. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 3. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 4. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc 0\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Normal t')", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Normal t')\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step.cases)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "case (Abrupt t')"], ["proof (state)\nthis:\n  t = Abrupt t'\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Abrupt t'", "have \"f (Suc 0) = ([Throw],[],(Normal t'))\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Abrupt t'\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([Throw], [], Normal t')", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([Throw], [], Normal t')\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc 0\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([Throw], [], Normal t')", "have \"f (Suc (Suc 0)) = ([],[],(Abrupt t'))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([Throw], [], Normal t')\n\ngoal (1 subgoal):\n 1. f (Suc (Suc 0)) = ([], [], Abrupt t')", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc (Suc 0)) = ([], [], Abrupt t')\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc(Suc 0)\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc (Suc 0)) \\<rightarrow> f (Suc (Suc (Suc 0)))\n  f (Suc (Suc 0)) = ([], [], Abrupt t')", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc (Suc 0)) \\<rightarrow> f (Suc (Suc (Suc 0)))\n  f (Suc (Suc 0)) = ([], [], Abrupt t')\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step.cases)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "case (Fault m)"], ["proof (state)\nthis:\n  t = Fault m\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Fault m", "have \"f (Suc 0) = ([],[],Fault m)\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Fault m\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Fault m)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)", "have \"f (Suc (Suc 0)) = ([],[],Fault m)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. f (Suc (Suc 0)) = ([], [], Fault m)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc (Suc 0)) = ([], [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc (Suc 0)\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc (Suc 0)) \\<rightarrow> f (Suc (Suc (Suc 0)))\n  f (Suc (Suc 0)) = ([], [], Fault m)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc (Suc 0)) \\<rightarrow> f (Suc (Suc (Suc 0)))\n  f (Suc (Suc 0)) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step.cases)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "case Stuck"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Stuck", "have \"f (Suc 0) = ([],[],Stuck)\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [Throw])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Stuck\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Stuck)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Stuck)", "have \"f (Suc (Suc 0)) = ([],[],Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. f (Suc (Suc 0)) = ([], [], Stuck)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc (Suc 0)) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc (Suc 0)\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc (Suc 0)) \\<rightarrow> f (Suc (Suc (Suc 0)))\n  f (Suc (Suc 0)) = ([], [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc (Suc 0)) \\<rightarrow> f (Suc (Suc (Suc 0)))\n  f (Suc (Suc 0)) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step.cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p]\n                                 [] (Normal s)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 3. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 5. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 6. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Call p], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Call p], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from bdy f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Call p], [], Normal s)", "have \"f (Suc 0) =\n              ([bdy],[([],[Throw])],Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Call p], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([bdy], [([], [Throw])], Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([bdy], [([], [Throw])], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = ([bdy], [([], [Throw])], Normal s)", "have \"inf \\<Gamma> [bdy] [([],[Throw])] (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = ([bdy], [([], [Throw])], Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([bdy], [([], [Throw])], Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([bdy], [([], [Throw])], Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([bdy], [([], [Throw])], Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = ([bdy], [([], [Throw])], Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with not_inf_bdy"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [bdy] [([], [Throw])] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 2. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 4. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 5. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 2. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 4. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 5. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (CallUndefined p s)"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 2. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 4. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 5. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have undef: \"\\<Gamma> p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = None", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n 2. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 4. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 5. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Call p], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Call p], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from undef f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Call p], [], Normal s)", "have \"f (Suc 0) = ([],[],Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Call p], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Stuck)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Call p], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc 0\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Call p] [] (Normal s)\n\ngoal (5 subgoals):\n 1. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 3. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 4. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 3. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 4. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (Stuck c)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>c. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 3. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 4. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([c], [], Stuck)\""], ["proof (state)\nthis:\n  f 0 = ([c], [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([c], [], Stuck)", "have \"f (Suc 0) = ([],[],Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([c], [], Stuck)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Stuck)", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc 0\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] Stuck\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 2. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 3. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 2. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 3. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (DynCom c s)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 2. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 3. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp: \"\\<not> inf \\<Gamma> [(c s)] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] []\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c]\n                                 [] (Normal s)\n 2. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 3. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([DynCom c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([DynCom c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([DynCom c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([DynCom c], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([DynCom c], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([DynCom c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([DynCom c], [], Normal s)", "have \"f (Suc 0) = ([(c s)], [], Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([DynCom c], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([c s], [], Normal s)", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([c s], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([DynCom c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = ([c s], [], Normal s)", "have \"inf \\<Gamma> [(c s)] [] (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = ([c s], [], Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c s], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([c s], [], Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = ([c s], [], Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = ([c s], [], Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([DynCom c], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c s] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [DynCom c] [] (Normal s)\n\ngoal (3 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 2. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 2. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (Throw s)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n 2. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Throw], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Throw], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Throw], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([Throw], [], Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([Throw], [], Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Throw], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Throw], [], Normal s)", "have \"f (Suc 0) = ([],[],Abrupt s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([Throw], [], Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Abrupt s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([Throw], [], Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Abrupt s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Abrupt s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Throw] [] (Normal s)\n\ngoal (2 subgoals):\n 1. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (Abrupt c s)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>c s. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = ([c], [], Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = ([c], [], Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([c], [], Abrupt s)", "have \"f (Suc 0) = ([],[],Abrupt s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([c], [], Abrupt s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Abrupt s)", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([c], [], Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [rule_format, of \"Suc 0\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Abrupt s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f (Suc 0) \\<rightarrow> f (Suc (Suc 0))\n  f (Suc 0) = ([], [], Abrupt s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] (Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "case (Catch c1 s c2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s')\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp_c1: \"\\<not> inf \\<Gamma> [c1] [] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have hyp_c2: \"\\<forall>s'. \\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n                   \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and> \\<not> inf \\<Gamma> [c2] [] (Normal s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s')", "by fact"], ["proof (state)\nthis:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s')\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "have \"\\<not> inf \\<Gamma> [c1] [([],[c2])] (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])] (Normal s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])]\n     (Normal s) \\<Longrightarrow>\n    False", "assume \"inf \\<Gamma> [c1] [([],[c2])] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])] (Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])]\n     (Normal s) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "proof (rule infE)"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s) \\<Longrightarrow>\n    False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"inf \\<Gamma> [c1] [] (Normal s)\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s) \\<Longrightarrow>\n    False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c1"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> [c1] [] (Normal s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume eval: \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "assume inf: \"inf \\<Gamma> [] [([], [c2])] t\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t", "obtain f where\n        f_0: \"f 0 = ([],[([], [c2] )],t)\" and\n        f_step: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = ([], [([], [c2])], t);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  f 0 = ([], [([], [c2])], t)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> [] [([], [c2])] t\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1. t = Normal x1 \\<Longrightarrow> False\n 2. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 3. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 4. t = Stuck \\<Longrightarrow> False", "case (Normal t')"], ["proof (state)\nthis:\n  t = Normal t'\n\ngoal (4 subgoals):\n 1. \\<And>x1. t = Normal x1 \\<Longrightarrow> False\n 2. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 3. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 4. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Normal t'", "have \"f (Suc 0) = ([],[],Normal t')\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Normal t'\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Normal t')", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Normal t')\n\ngoal (4 subgoals):\n 1. \\<And>x1. t = Normal x1 \\<Longrightarrow> False\n 2. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 3. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 4. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal t')", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Normal t')\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "case (Abrupt t')"], ["proof (state)\nthis:\n  t = Abrupt t'\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Abrupt t'", "have \"f (Suc 0) = ([c2],[],Normal t')\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Abrupt t'\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([c2], [], Normal t')", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([c2], [], Normal t')\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "with f_step eval Abrupt"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  t = Abrupt t'\n  f (Suc 0) = ([c2], [], Normal t')", "have \"inf \\<Gamma> [c2] [] (Normal t')\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  t = Abrupt t'\n  f (Suc 0) = ([c2], [], Normal t')\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal t')", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt t';\n     t = Abrupt t'; f (Suc 0) = ([c2], [], Normal t')\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = ([c2], [], Normal t') \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt t';\n     t = Abrupt t'; f (Suc 0) = ([c2], [], Normal t')\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = ([c2], [], Normal t') \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal t')\n\ngoal (3 subgoals):\n 1. \\<And>x2. t = Abrupt x2 \\<Longrightarrow> False\n 2. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 3. t = Stuck \\<Longrightarrow> False", "with eval hyp_c2 Abrupt"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s')\n  t = Abrupt t'\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal t')", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal s')\n  t = Abrupt t'\n  AlternativeSmallStep.inf \\<Gamma> [c2] [] (Normal t')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "case (Fault m)"], ["proof (state)\nthis:\n  t = Fault m\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Fault m", "have \"f (Suc 0) = ([],[],Fault m)\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Fault m\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Fault m)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (2 subgoals):\n 1. \\<And>x3. t = Fault x3 \\<Longrightarrow> False\n 2. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Fault m)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "case Stuck"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "with f_0 f_step [rule_format, of 0]"], ["proof (chain)\npicking this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Stuck", "have \"f (Suc 0) = ([],[],Stuck)\""], ["proof (prove)\nusing this:\n  f 0 = ([], [([], [c2])], t)\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  t = Stuck\n\ngoal (1 subgoal):\n 1. f (Suc 0) = ([], [], Stuck)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. t = Stuck \\<Longrightarrow> False", "with f_step [rule_format, of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n  f (Suc 0) = ([], [], Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>1] [] (Normal s);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> [c\\<^sub>2] []\n                   (Normal s')\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma>\n                                 [Catch c\\<^sub>1 c\\<^sub>2] [] (Normal s)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c1] [([], [c2])] (Normal s)\n\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [Catch c1 c2] [] (Normal s)", "by (simp add: inf_Catch)"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [Catch c1 c2] [] (Normal s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma terminatess_impl_not_inf:\n assumes termi: \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\"\n  shows \"\\<not>inf \\<Gamma> cs css s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s", "using termi"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s", "proof (induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [] [] s\n 2. \\<And>nrms css s abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Normal s)\n 3. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 4. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 5. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 6. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "case (Nil s)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>s. \\<not> AlternativeSmallStep.inf \\<Gamma> [] [] s\n 2. \\<And>nrms css s abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Normal s)\n 3. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 4. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 5. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 6. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [] [] s", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], [], s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], [], s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], [], s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<Gamma>\\<turnstile>f 0 \\<rightarrow> f (Suc 0)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], [], s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], [], s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"f 0 = ([], [], s)\""], ["proof (state)\nthis:\n  f 0 = ([], [], s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], [], s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([], [], s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([], [], s)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: step.cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [] [] s\n\ngoal (5 subgoals):\n 1. \\<And>nrms css s abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Normal s)\n 2. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 3. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 4. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 5. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>nrms css s abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Normal s)\n 2. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 3. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 4. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 5. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "case (ExitBlockNormal nrms css s abrs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)\n\ngoal (5 subgoals):\n 1. \\<And>nrms css s abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Normal s)\n 2. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 3. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 4. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 5. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "have hyp: \"\\<not> inf \\<Gamma> nrms css (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)\n\ngoal (5 subgoals):\n 1. \\<And>nrms css s abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Normal s)\n 2. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 3. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 4. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 5. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css)\n            (Normal s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f0: \"f 0 = ([], (nrms, abrs) # css, Normal s)\""], ["proof (state)\nthis:\n  f 0 = ([], (nrms, abrs) # css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 0]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([], (nrms, abrs) # css, Normal s)", "have \"f (Suc 0) = (nrms,css,Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([], (nrms, abrs) # css, Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = (nrms, css, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = (nrms, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = (nrms, css, Normal s)", "have \"inf \\<Gamma> nrms css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = (nrms, css, Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (nrms, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (nrms, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (nrms, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (nrms, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> nrms css (Normal s)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css)\n          (Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 2. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 3. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 4. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 2. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 3. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 4. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "case (ExitBlockAbrupt abrs css s nrms)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s\n  \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 2. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 3. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 4. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "have hyp: \"\\<not> inf \\<Gamma> abrs css (Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)", "by fact"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>abrs css s nrms.\n       \\<lbrakk>\\<Gamma>\\<turnstile>abrs,css \\<Down> Normal s;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css\n                (Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Abrupt s)\n 2. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 3. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 4. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css)\n            (Abrupt s)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f0: \"f 0 = ([], (nrms, abrs) # css, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = ([], (nrms, abrs) # css, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step [of 0]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([], (nrms, abrs) # css, Abrupt s)", "have \"f (Suc 0) = (abrs,css,Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = ([], (nrms, abrs) # css, Abrupt s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = (abrs, css, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = (abrs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = (abrs, css, Normal s)", "have \"inf \\<Gamma> abrs css (Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = (abrs, css, Normal s)\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (abrs, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (abrs, css, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (abrs, css, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (abrs, css, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], (nrms, abrs) # css, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)\n  AlternativeSmallStep.inf \\<Gamma> abrs css (Normal s)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css)\n          (Abrupt s)\n\ngoal (3 subgoals):\n 1. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 2. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 3. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 2. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 3. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "case (ExitBlockFault nrms css f abrs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f\n  \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\n\ngoal (3 subgoals):\n 1. \\<And>nrms css f abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Fault f;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css (Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) (Fault f)\n 2. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 3. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css)\n            (Fault f)", "by (rule not_inf_Fault)"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css) (Fault f)\n\ngoal (2 subgoals):\n 1. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 2. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 2. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "case (ExitBlockStuck nrms css abrs)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck\n  \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\n\ngoal (2 subgoals):\n 1. \\<And>nrms css abrs.\n       \\<lbrakk>\\<Gamma>\\<turnstile>nrms,css \\<Down> Stuck;\n        \\<not> AlternativeSmallStep.inf \\<Gamma> nrms css Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> []\n                                 ((nrms, abrs) # css) Stuck\n 2. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css) Stuck", "by (rule not_inf_Stuck)"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [] ((nrms, abrs) # css) Stuck\n\ngoal (1 subgoal):\n 1. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "case (Cons c s cs css)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> s\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\n\ngoal (1 subgoal):\n 1. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "have termi_c: \"\\<Gamma>\\<turnstile>c \\<down> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "have hyp: \"\\<forall>t. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow> \\<Gamma>\\<turnstile>cs,css\\<Down>t \\<and> \\<not> inf \\<Gamma> cs css t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n       \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n       \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t", "by fact"], ["proof (state)\nthis:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\n\ngoal (1 subgoal):\n 1. \\<And>c s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> s;\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n           \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs)\n                                 css s", "show \"\\<not> inf \\<Gamma> (c # cs) css s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs) css s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # cs) css s \\<Longrightarrow> False", "assume \"inf \\<Gamma> (c # cs) css s\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> (c # cs) css s\n\ngoal (1 subgoal):\n 1. AlternativeSmallStep.inf \\<Gamma> (c # cs) css s \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  AlternativeSmallStep.inf \\<Gamma> (c # cs) css s\n\ngoal (1 subgoal):\n 1. False", "proof (rule infE)"], ["proof (state)\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow> False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"inf \\<Gamma> [c] [] s\""], ["proof (state)\nthis:\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s\n\ngoal (2 subgoals):\n 1. AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow> False\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> False", "with terminates_impl_not_inf [OF termi_c]"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s", "show False"], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s\n  AlternativeSmallStep.inf \\<Gamma> [c] [] s\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> False", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\" \"inf \\<Gamma> cs css t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t\n  AlternativeSmallStep.inf \\<Gamma> cs css t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t;\n        AlternativeSmallStep.inf \\<Gamma> cs css t\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t\n  AlternativeSmallStep.inf \\<Gamma> cs css t", "show False"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>cs,css \\<Down> t \\<and>\n     \\<not> AlternativeSmallStep.inf \\<Gamma> cs css t\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t\n  AlternativeSmallStep.inf \\<Gamma> cs css t\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> (c # cs) css s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lem:\n  \"\\<forall>y. r\\<^sup>+\\<^sup>+ a y \\<longrightarrow> P a \\<longrightarrow> P y\n   \\<Longrightarrow> ((b,a) \\<in> {(y,x). P x \\<and> r x y}\\<^sup>+) = ((b,a) \\<in> {(y,x). P x \\<and> r\\<^sup>+\\<^sup>+ x y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n       P a \\<longrightarrow> P y \\<Longrightarrow>\n    ((b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+) =\n    ((b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y})", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\n 2. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> P a \\<and> r\\<^sup>+\\<^sup>+ a b\n 2. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply(erule trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> r x y}\\<rbrakk>\n       \\<Longrightarrow> P y \\<and> r\\<^sup>+\\<^sup>+ y b\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+;\n        (y, z) \\<in> {(y, x). P x \\<and> r x y};\n        P y \\<and> r\\<^sup>+\\<^sup>+ y b\\<rbrakk>\n       \\<Longrightarrow> P z \\<and> r\\<^sup>+\\<^sup>+ z b\n 3. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+;\n        (y, z) \\<in> {(y, x). P x \\<and> r x y};\n        P y \\<and> r\\<^sup>+\\<^sup>+ y b\\<rbrakk>\n       \\<Longrightarrow> P z \\<and> r\\<^sup>+\\<^sup>+ z b\n 2. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply(blast intro:tranclp_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     P a; r\\<^sup>+\\<^sup>+ a b\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply(erule tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; r a y\\<rbrakk>\n       \\<Longrightarrow> (y, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> r x y}\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; r\\<^sup>+\\<^sup>+ a y; r y z;\n        (y, a)\n        \\<in> {a. case a of\n                  (y, x) \\<Rightarrow> P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (z, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> r x y}\\<^sup>+", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; r\\<^sup>+\\<^sup>+ a y; r y z;\n        (y, a)\n        \\<in> {a. case a of\n                  (y, x) \\<Rightarrow> P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (z, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> r x y}\\<^sup>+", "apply(blast intro:trancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary terminatess_impl_no_inf_chain:\n assumes terminatess: \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\"\n shows \"\\<not>(\\<exists>f. f 0 = (cs,css,s) \\<and> (\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f(Suc i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "have \"wf({(y,x). \\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ({(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+)", "proof (rule wf_trancl)"], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n        \\<Gamma>\\<turnstile> x \\<rightarrow> y}", "show \"wf {(y, x). \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n        \\<Gamma>\\<turnstile> x \\<rightarrow> y}", "proof (simp only: wf_iff_no_infinite_down_chain,clarify,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "assume \"\\<forall>i. \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and> \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "hence \"\\<exists>f. f 0 = (cs, css, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (rule renumber [to_pred])"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "from terminatess"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s", "have \"\\<not> (\\<exists>f. f 0 = (cs, css, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (rule terminatess_impl_not_inf [unfolded inf_def])"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf {(y, x).\n      \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n      \\<Gamma>\\<turnstile> x \\<rightarrow> y}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf ({(y, x).\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n       \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "hence \"\\<not> (\\<exists>f. \\<forall>i. (f (Suc i), f i)\n                 \\<in> {(y, x). \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+)\""], ["proof (prove)\nusing this:\n  wf ({(y, x).\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n       \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\nx \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "by (simp add: wf_iff_no_infinite_down_chain)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     \\<forall>i.\n        (f (Suc i), f i)\n        \\<in> {(y, x).\n               \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                    x \\<and>\n               \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     \\<forall>i.\n        (f (Suc i), f i)\n        \\<in> {(y, x).\n               \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                    x \\<and>\n               \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "proof (rule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\nx \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "assume \"\\<exists>f. f 0 = (cs, css, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f (Suc i))\""], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\nx \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "then"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "obtain f where\n      f0: \"f 0 = (cs, css, s)\" and\n      seq: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f (Suc i)\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (cs, css, s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                 f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  f 0 = (cs, css, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\nx \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "show\n      \"\\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> {(y, x). \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\nx \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "proof (rule exI [where x=f],rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (f (Suc i), f i)\n       \\<in> {(y, x).\n              \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                   x \\<and>\n              \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (f (Suc i), f i)\n       \\<in> {(y, x).\n              \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                   x \\<and>\n              \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "show \"(f (Suc i), f i) \\<in> {(y, x). \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (f (Suc i__), f i__)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "have \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f 0\n 2. \\<And>i.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc i)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f 0\n 2. \\<And>i.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc i)", "show \"\\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f 0", "by (simp add: f0)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc i)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc i)", "have \"\\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f n", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc i)", "with seq"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f n", "show \"\\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* f (Suc n)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f n\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc n)", "by (blast intro: tranclp_into_rtranclp rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i\n\ngoal (1 subgoal):\n 1. (f (Suc i__), f i__)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f ?ia2\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "hence \"\\<Gamma>\\<turnstile>(cs,css,s) \\<rightarrow>\\<^sup>* f i\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f ?ia2\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "with seq"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i", "have\n          \"(f (Suc i), f i) \\<in> {(y, x). \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow>\\<^sup>+ y}\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}", "by clarsimp"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "have \"\\<forall>y. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ y\\<longrightarrow>\\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* f i\\<longrightarrow>\\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            f i \\<longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* y", "by (blast intro: tranclp_into_rtranclp rtranclp_trans)"], ["proof (state)\nthis:\n  \\<forall>y.\n     \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                          f i \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n  \\<forall>y.\n     \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                          f i \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* y", "show ?thesis"], ["proof (prove)\nusing this:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n  \\<forall>y.\n     \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                          f i \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "by (subst lem)"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<forall>i.\n        (f (Suc i), f i)\n        \\<in> {(y, x).\n               \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                    x \\<and>\n               \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary terminates_impl_no_inf_chain:\n \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<not>(\\<exists>f. f 0 = ([c],[],s) \\<and> (\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f(Suc i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<nexists>f.\n       f 0 = ([c], [], s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "by (rule terminatess_impl_no_inf_chain) (iprover intro: terminatess.intros)"], ["", "definition\n termi_call_steps :: \"('s,'p,'f) body \\<Rightarrow> (('s \\<times> 'p) \\<times> ('s \\<times> 'p))set\"\nwhere\n\"termi_call_steps \\<Gamma> =\n {((t,q),(s,p)). \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal s \\<and>\n       (\\<exists>css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal s) \\<rightarrow>\\<^sup>+ ([the (\\<Gamma> q)],css,Normal t))}\""], ["", "text \\<open>Sequencing computations, or more exactly continuation stacks\\<close>"], ["", "primrec seq:: \"(nat \\<Rightarrow> 'a list) \\<Rightarrow> nat \\<Rightarrow> 'a list\"\nwhere\n\"seq css 0 = []\" |\n\"seq css (Suc i) = css i@seq css i\""], ["", "theorem wf_termi_call_steps: \"wf (termi_call_steps \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (termi_call_steps \\<Gamma>)", "proof (simp only: termi_call_steps_def wf_iff_no_infinite_down_chain,\n       clarify,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "assume inf:\n     \"\\<forall>i. (\\<lambda>(t,q) (s,p). \\<Gamma>\\<turnstile>(the (\\<Gamma> p)) \\<down> Normal s \\<and>\n                 (\\<exists>css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal s) \\<rightarrow>\\<^sup>+ ([the (\\<Gamma> q)],css,Normal t)))\n           (S (Suc i)) (S i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     (case S (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n           (\\<exists>css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal s) \\<rightarrow>\\<^sup>+\n                                    ([the (\\<Gamma> q)], css, Normal t)))\n      (S i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "obtain s p where \"s = (\\<lambda>i. fst (S i))\" and \"p = (\\<lambda>i. snd (S i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s p.\n        \\<lbrakk>s = (\\<lambda>i. fst (S i));\n         p = (\\<lambda>i. snd (S i))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = (\\<lambda>i. fst (S i))\n  p = (\\<lambda>i. snd (S i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "with inf"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     (case S (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n           (\\<exists>css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal s) \\<rightarrow>\\<^sup>+\n                                    ([the (\\<Gamma> q)], css, Normal t)))\n      (S i)\n  s = (\\<lambda>i. fst (S i))\n  p = (\\<lambda>i. snd (S i))", "have inf':\n     \"\\<forall>i. \\<Gamma>\\<turnstile>(the (\\<Gamma> (p i))) \\<down> Normal (s i) \\<and>\n                 (\\<exists>css. \\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[],Normal (s i)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc i)))],css,Normal (s (Suc i))))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (case S (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n           (\\<exists>css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal s) \\<rightarrow>\\<^sup>+\n                                    ([the (\\<Gamma> q)], css, Normal t)))\n      (S i)\n  s = (\\<lambda>i. fst (S i))\n  p = (\\<lambda>i. snd (S i))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n       (\\<exists>css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                ([the (\\<Gamma> (p (Suc i)))], css,\n                                 Normal (s (Suc i))))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                (case S (Suc i) of\n                 (t, q) \\<Rightarrow>\n                   \\<lambda>(s, p).\n                      \\<Gamma>\\<turnstile>the\n     (\\<Gamma> p) \\<down> Normal s \\<and>\n                      (\\<exists>css.\n                          \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n          Normal s) \\<rightarrow>\\<^sup>+\n         ([the (\\<Gamma> q)], css, Normal t)))\n                 (S i);\n     s = (\\<lambda>i. fst (S i)); p = (\\<lambda>i. snd (S i))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n             [], Normal (s i)) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> (p (Suc i)))], css, Normal (s (Suc i))))", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   (case S (Suc i) of\n                    (t, q) \\<Rightarrow>\n                      \\<lambda>(s, p).\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> p) \\<down> Normal s \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n             Normal s) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> q)], css, Normal t)))\n                    (S i);\n        s = (\\<lambda>i. fst (S i)); p = (\\<lambda>i. snd (S i))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>the\n        (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n             [], Normal (s i)) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> (p (Suc i)))], css, Normal (s (Suc i))))", "apply (erule_tac x=i in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = (\\<lambda>i. fst (S i)); p = (\\<lambda>i. snd (S i));\n        (case S (Suc i) of\n         (t, q) \\<Rightarrow>\n           \\<lambda>(s, p).\n              \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n              (\\<exists>css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal s) \\<rightarrow>\\<^sup>+\n ([the (\\<Gamma> q)], css, Normal t)))\n         (S i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>the\n        (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n             [], Normal (s i)) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> (p (Suc i)))], css, Normal (s (Suc i))))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n     (\\<exists>css.\n         \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              ([the (\\<Gamma> (p (Suc i)))], css,\n                               Normal (s (Suc i))))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "from inf' \\<comment> \\<open>Skolemization of css with axiom of choice\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n     (\\<exists>css.\n         \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              ([the (\\<Gamma> (p (Suc i)))], css,\n                               Normal (s (Suc i))))", "have \"\\<exists>css. \\<forall>i. \\<Gamma>\\<turnstile>(the (\\<Gamma> (p i))) \\<down> Normal (s i) \\<and>\n                 \\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[],Normal (s i)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc i)))],css i,Normal (s (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n     (\\<exists>css.\n         \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              ([the (\\<Gamma> (p (Suc i)))], css,\n                               Normal (s (Suc i))))\n\ngoal (1 subgoal):\n 1. \\<exists>css.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    (p i)) \\<down> Normal (s i) \\<and>\n          \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                Normal (s i)) \\<rightarrow>\\<^sup>+\n                               ([the (\\<Gamma> (p (Suc i)))], css i,\n                                Normal (s (Suc i)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n       (\\<exists>css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                ([the (\\<Gamma> (p (Suc i)))], css,\n                                 Normal (s (Suc i)))) \\<Longrightarrow>\n    \\<exists>css.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    (p i)) \\<down> Normal (s i) \\<and>\n          \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                Normal (s i)) \\<rightarrow>\\<^sup>+\n                               ([the (\\<Gamma> (p (Suc i)))], css i,\n                                Normal (s (Suc i)))", "apply (rule choice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n       (\\<exists>css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                ([the (\\<Gamma> (p (Suc i)))], css,\n                                 Normal (s (Suc i)))) \\<Longrightarrow>\n    \\<forall>i.\n       \\<exists>y.\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    (p i)) \\<down> Normal (s i) \\<and>\n          \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                Normal (s i)) \\<rightarrow>\\<^sup>+\n                               ([the (\\<Gamma> (p (Suc i)))], y,\n                                Normal (s (Suc i)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>css.\n     \\<forall>i.\n        \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             ([the (\\<Gamma> (p (Suc i)))], css i,\n                              Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<exists>css.\n     \\<forall>i.\n        \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             ([the (\\<Gamma> (p (Suc i)))], css i,\n                              Normal (s (Suc i)))", "obtain css where\n      termi_css: \"\\<forall>i. \\<Gamma>\\<turnstile>(the (\\<Gamma> (p i))) \\<down> Normal (s i)\" and\n      step_css: \"\\<forall>i. \\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[],Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (Suc i)))],css i,Normal (s (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<exists>css.\n     \\<forall>i.\n        \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             ([the (\\<Gamma> (p (Suc i)))], css i,\n                              Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. (\\<And>css.\n        \\<lbrakk>\\<forall>i.\n                    \\<Gamma>\\<turnstile>the\n   (\\<Gamma> (p i)) \\<down> Normal (s i);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                  Normal (s i)) \\<rightarrow>\\<^sup>+\n                                 ([the (\\<Gamma> (p (Suc i)))], css i,\n                                  Normal (s (Suc i)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i)\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                           Normal (s i)) \\<rightarrow>\\<^sup>+\n                          ([the (\\<Gamma> (p (Suc i)))], css i,\n                           Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. False", "define f where \"f i = ([the (\\<Gamma> (p i))], seq css i,Normal (s i)::('a,'c) xstate)\" for i"], ["proof (state)\nthis:\n  f ?i = ([the (\\<Gamma> (p ?i))], seq css ?i, Normal (s ?i))\n\ngoal (1 subgoal):\n 1. False", "have \"f 0 = ([the (\\<Gamma> (p 0))],[],Normal (s 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))", "by (simp add: f_def)"], ["proof (state)\nthis:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>i. \\<Gamma>\\<turnstile> (f i) \\<rightarrow>\\<^sup>+ (f (i+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "from step_css [rule_format, of i]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i,\n                        Normal (s (Suc i)))", "have \"\\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))], [], Normal (s i)) \\<rightarrow>\\<^sup>+\n              ([the (\\<Gamma> (p (Suc i)))], css i, Normal (s (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i,\n                        Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (Suc i)))], css i,\n                          Normal (s (Suc i)))", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i,\n                        Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "from app_css_steps [OF this,simplified]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], ?xs,\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i @ ?xs,\n                        Normal (s (Suc i)))", "have \"\\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))], seq css i, Normal (s i)) \\<rightarrow>\\<^sup>+\n              ([the (\\<Gamma> (p (Suc i)))], css i@seq css i, Normal (s (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], ?xs,\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i @ ?xs,\n                        Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq css i,\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (Suc i)))], css i @ seq css i,\n                          Normal (s (Suc i)))", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq css i,\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i @ seq css i,\n                        Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "thus \"\\<Gamma>\\<turnstile> (f i) \\<rightarrow>\\<^sup>+ (f (i+1))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq css i,\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (Suc i)))], css i @ seq css i,\n                        Normal (s (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "by (simp add: f_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n\ngoal (1 subgoal):\n 1. False", "from termi_css [rule_format, of 0]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)", "have \"\\<not> (\\<exists>f. (f 0 = ([the (\\<Gamma> (p 0))],[],Normal (s 0)) \\<and>\n                 (\\<forall>i. \\<Gamma>\\<turnstile>(f i) \\<rightarrow>\\<^sup>+ f(Suc i))))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "by (rule terminates_impl_no_inf_chain)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n  \\<nexists>f.\n     f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n  \\<nexists>f.\n     f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>An alternative proof using Hilbert-choice instead of axiom of choice.\\<close>"], ["", "theorem \"wf (termi_call_steps \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (termi_call_steps \\<Gamma>)", "proof (simp only: termi_call_steps_def wf_iff_no_infinite_down_chain,\n       clarify,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "assume inf:\n     \"\\<forall>i. (\\<lambda>(t,q) (s,p). \\<Gamma>\\<turnstile>(the (\\<Gamma> p)) \\<down> Normal s \\<and>\n                 (\\<exists>css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal s) \\<rightarrow>\\<^sup>+ ([the (\\<Gamma> q)],css,Normal t)))\n           (S (Suc i)) (S i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     (case S (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n           (\\<exists>css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal s) \\<rightarrow>\\<^sup>+\n                                    ([the (\\<Gamma> q)], css, Normal t)))\n      (S i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "obtain s p where \"s = (\\<lambda>i. fst (S i))\" and \"p = (\\<lambda>i. snd (S i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s p.\n        \\<lbrakk>s = (\\<lambda>i. fst (S i));\n         p = (\\<lambda>i. snd (S i))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = (\\<lambda>i. fst (S i))\n  p = (\\<lambda>i. snd (S i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "with inf"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     (case S (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n           (\\<exists>css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal s) \\<rightarrow>\\<^sup>+\n                                    ([the (\\<Gamma> q)], css, Normal t)))\n      (S i)\n  s = (\\<lambda>i. fst (S i))\n  p = (\\<lambda>i. snd (S i))", "have inf':\n     \"\\<forall>i. \\<Gamma>\\<turnstile>(the (\\<Gamma> (p i))) \\<down> Normal (s i) \\<and>\n                 (\\<exists>css. \\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[],Normal (s i)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc i)))],css,Normal (s (Suc i))))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (case S (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n           (\\<exists>css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal s) \\<rightarrow>\\<^sup>+\n                                    ([the (\\<Gamma> q)], css, Normal t)))\n      (S i)\n  s = (\\<lambda>i. fst (S i))\n  p = (\\<lambda>i. snd (S i))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n       (\\<exists>css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                ([the (\\<Gamma> (p (Suc i)))], css,\n                                 Normal (s (Suc i))))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                (case S (Suc i) of\n                 (t, q) \\<Rightarrow>\n                   \\<lambda>(s, p).\n                      \\<Gamma>\\<turnstile>the\n     (\\<Gamma> p) \\<down> Normal s \\<and>\n                      (\\<exists>css.\n                          \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n          Normal s) \\<rightarrow>\\<^sup>+\n         ([the (\\<Gamma> q)], css, Normal t)))\n                 (S i);\n     s = (\\<lambda>i. fst (S i)); p = (\\<lambda>i. snd (S i))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n             [], Normal (s i)) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> (p (Suc i)))], css, Normal (s (Suc i))))", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   (case S (Suc i) of\n                    (t, q) \\<Rightarrow>\n                      \\<lambda>(s, p).\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> p) \\<down> Normal s \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n             Normal s) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> q)], css, Normal t)))\n                    (S i);\n        s = (\\<lambda>i. fst (S i)); p = (\\<lambda>i. snd (S i))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>the\n        (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n             [], Normal (s i)) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> (p (Suc i)))], css, Normal (s (Suc i))))", "apply (erule_tac x=i in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = (\\<lambda>i. fst (S i)); p = (\\<lambda>i. snd (S i));\n        (case S (Suc i) of\n         (t, q) \\<Rightarrow>\n           \\<lambda>(s, p).\n              \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n              (\\<exists>css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal s) \\<rightarrow>\\<^sup>+\n ([the (\\<Gamma> q)], css, Normal t)))\n         (S i)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>the\n        (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n                         (\\<exists>css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n             [], Normal (s i)) \\<rightarrow>\\<^sup>+\n            ([the (\\<Gamma> (p (Suc i)))], css, Normal (s (Suc i))))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n     (\\<exists>css.\n         \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              ([the (\\<Gamma> (p (Suc i)))], css,\n                               Normal (s (Suc i))))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s \\<and>\n                (\\<exists>css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal s) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> q)], css, Normal t)))\n           (f i) \\<Longrightarrow>\n       False", "show \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "define CSS where \"CSS i = (SOME css.\n                      \\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[], Normal (s i)) \\<rightarrow>\\<^sup>+\n                      ([the (\\<Gamma> (p (i+1)))],css,Normal (s (i+1))))\" for i"], ["proof (state)\nthis:\n  CSS ?i =\n  (SOME css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p ?i))], [],\n                            Normal (s ?i)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (?i + 1)))], css,\n                            Normal (s (?i + 1))))\n\ngoal (1 subgoal):\n 1. False", "define f where \"f i = ([the (\\<Gamma> (p i))], seq CSS i,Normal (s i)::('a,'c) xstate)\" for i"], ["proof (state)\nthis:\n  f ?i = ([the (\\<Gamma> (p ?i))], seq CSS ?i, Normal (s ?i))\n\ngoal (1 subgoal):\n 1. False", "have \"f 0 = ([the (\\<Gamma> (p 0))],[],Normal (s 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))", "by (simp add: f_def)"], ["proof (state)\nthis:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>i. \\<Gamma>\\<turnstile> (f i) \\<rightarrow>\\<^sup>+ (f (i+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "from inf' [rule_format, of i]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n  (\\<exists>css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                            Normal (s i)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc i)))], css,\n                            Normal (s (Suc i))))", "obtain css where\n         css: \"\\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[],Normal (s i)) \\<rightarrow>\\<^sup>+\n                ([the (\\<Gamma> (p (i+1)))],css,Normal (s (i+1)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p i)) \\<down> Normal (s i) \\<and>\n  (\\<exists>css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                            Normal (s i)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc i)))], css,\n                            Normal (s (Suc i))))\n\ngoal (1 subgoal):\n 1. (\\<And>css.\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             ([the (\\<Gamma> (p (i + 1)))], css,\n                              Normal (s (i + 1))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (i + 1)))], css,\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "hence \"\\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))], seq CSS i, Normal (s i)) \\<rightarrow>\\<^sup>+\n                  ([the (\\<Gamma> (p (i+1)))], CSS i @ seq CSS i, Normal (s (i+1)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (i + 1)))], css,\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq CSS i,\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))], CSS i @ seq CSS i,\n                          Normal (s (i + 1)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))], css,\n                          Normal (s (i + 1))) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq CSS i,\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))], CSS i @ seq CSS i,\n                          Normal (s (i + 1)))", "apply (unfold CSS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))], css,\n                          Normal (s (i + 1))) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n                          seq (\\<lambda>i.\n                                  SOME css.\n                                     \\<Gamma>\\<turnstile> ([the\n                       (\\<Gamma> (p i))],\n                     [], Normal (s i)) \\<rightarrow>\\<^sup>+\n                    ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1))))\n                           i,\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))],\n                          (SOME css.\n                              \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n              [], Normal (s i)) \\<rightarrow>\\<^sup>+\n             ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1)))) @\n                          seq (\\<lambda>i.\n                                  SOME css.\n                                     \\<Gamma>\\<turnstile> ([the\n                       (\\<Gamma> (p i))],\n                     [], Normal (s i)) \\<rightarrow>\\<^sup>+\n                    ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1))))\n                           i,\n                          Normal (s (i + 1)))", "apply (rule someI2\n              [where P=\"\\<lambda>css.\n                    \\<Gamma>\\<turnstile>([the (\\<Gamma> (p i))],[],Normal (s i))\\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i+1)))],css, Normal (s (i+1)))\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))], css,\n                          Normal (s (i + 1))) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> (p (i + 1)))], ?a1,\n                          Normal (s (i + 1)))\n 2. \\<And>x.\n       \\<lbrakk>\\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\nNormal (s i)) \\<rightarrow>\\<^sup>+\n                                     ([the (\\<Gamma> (p (i + 1)))], css,\nNormal (s (i + 1)));\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             ([the (\\<Gamma> (p (i + 1)))], x,\n                              Normal (s (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n         seq (\\<lambda>i.\n                 SOME css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n    Normal (s i)) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1))))\n          i,\n         Normal (s i)) \\<rightarrow>\\<^sup>+\n        ([the (\\<Gamma> (p (i + 1)))],\n         x @\n         seq (\\<lambda>i.\n                 SOME css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n    Normal (s i)) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1))))\n          i,\n         Normal (s (i + 1)))", "apply (rule css)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\nNormal (s i)) \\<rightarrow>\\<^sup>+\n                                     ([the (\\<Gamma> (p (i + 1)))], css,\nNormal (s (i + 1)));\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             ([the (\\<Gamma> (p (i + 1)))], x,\n                              Normal (s (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))],\n         seq (\\<lambda>i.\n                 SOME css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n    Normal (s i)) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1))))\n          i,\n         Normal (s i)) \\<rightarrow>\\<^sup>+\n        ([the (\\<Gamma> (p (i + 1)))],\n         x @\n         seq (\\<lambda>i.\n                 SOME css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], [],\n    Normal (s i)) \\<rightarrow>\\<^sup>+\n   ([the (\\<Gamma> (p (i + 1)))], css, Normal (s (i + 1))))\n          i,\n         Normal (s (i + 1)))", "apply (fastforce dest: app_css_steps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq CSS i,\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (i + 1)))], CSS i @ seq CSS i,\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "thus \"\\<Gamma>\\<turnstile> (f i) \\<rightarrow>\\<^sup>+ (f (i+1))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p i))], seq CSS i,\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> (p (i + 1)))], CSS i @ seq CSS i,\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)", "by (simp add: f_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n\ngoal (1 subgoal):\n 1. False", "from inf' [rule_format, of 0]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0) \\<and>\n  (\\<exists>css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p 0))], [],\n                            Normal (s 0)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc 0)))], css,\n                            Normal (s (Suc 0))))", "have \"\\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0) \\<and>\n  (\\<exists>css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> (p 0))], [],\n                            Normal (s 0)) \\<rightarrow>\\<^sup>+\n                           ([the (\\<Gamma> (p (Suc 0)))], css,\n                            Normal (s (Suc 0))))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)", "have \"\\<not> (\\<exists>f. (f 0 = ([the (\\<Gamma> (p 0))],[],Normal (s 0)) \\<and>\n                 (\\<forall>i. \\<Gamma>\\<turnstile>(f i) \\<rightarrow>\\<^sup>+ f(Suc i))))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> (p 0)) \\<down> Normal (s 0)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "by (rule terminates_impl_no_inf_chain)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n  \\<nexists>f.\n     f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0))\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (i + 1)\n  \\<nexists>f.\n     f 0 = ([the (\\<Gamma> (p 0))], [], Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_implies_wf: assumes not_inf: \"\\<not> inf \\<Gamma> cs css s\"\n  shows \"wf {(c2,c1). \\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma> \\<turnstile> c1 \\<rightarrow> c2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(c2, c1).\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n        \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}", "proof (simp only: wf_iff_no_infinite_down_chain,clarify, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "assume \"\\<forall>i. \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and> \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "hence \"\\<exists>f. f 0 = (cs, css, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (rule renumber [to_pred])"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "from not_inf"], ["proof (chain)\npicking this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s", "have \"\\<not> (\\<exists>f. f 0 = (cs, css, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (cs, css, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (unfold inf_def)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (cs, css, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_implies_termi_reach:\nassumes wf: \"wf {(c2,c1). \\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma> \\<turnstile> c1 \\<rightarrow> c2}\"\nshows \"\\<And>cs1 css1 s1. \\<lbrakk>\\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* c1;  c1=(cs1,css1,s1)\\<rbrakk>\\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1\\<Down>s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs1 css1 s1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1;\n        c1 = (cs1, css1, s1)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "using wf"], ["proof (prove)\nusing this:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\n\ngoal (1 subgoal):\n 1. \\<And>cs1 css1 s1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1;\n        c1 = (cs1, css1, s1)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "proof (induct c1, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x cs1 css1 s1.\n       \\<lbrakk>\\<And>y cs1a css1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (cs1, css1,\n            s1) \\<rightarrow>\n           (cs1a, css1a, s1a);\n                    \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n   (cs1a, css1a, s1a);\n                    y = (cs1a, css1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1a,css1a \\<Down> s1a;\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                             (cs1, css1, s1);\n        x = (cs1, css1, s1);\n        wf {(c2, c1).\n            \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                 c1 \\<and>\n            \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "fix cs1 css1 s1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x cs1 css1 s1.\n       \\<lbrakk>\\<And>y cs1a css1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (cs1, css1,\n            s1) \\<rightarrow>\n           (cs1a, css1a, s1a);\n                    \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n   (cs1a, css1a, s1a);\n                    y = (cs1a, css1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1a,css1a \\<Down> s1a;\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                             (cs1, css1, s1);\n        x = (cs1, css1, s1);\n        wf {(c2, c1).\n            \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                 c1 \\<and>\n            \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "assume reach: \"\\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* (cs1, css1, s1)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* (cs1, css1, s1)\n\ngoal (1 subgoal):\n 1. \\<And>x cs1 css1 s1.\n       \\<lbrakk>\\<And>y cs1a css1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (cs1, css1,\n            s1) \\<rightarrow>\n           (cs1a, css1a, s1a);\n                    \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n   (cs1a, css1a, s1a);\n                    y = (cs1a, css1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1a,css1a \\<Down> s1a;\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                             (cs1, css1, s1);\n        x = (cs1, css1, s1);\n        wf {(c2, c1).\n            \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                 c1 \\<and>\n            \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "assume hyp_raw: \"\\<And>y cs2 css2 s2. \\<lbrakk>\\<Gamma> \\<turnstile> (cs1,css1,s1) \\<rightarrow> (cs2,css2,s2);\n                 \\<Gamma> \\<turnstile> (cs,css,s) \\<rightarrow>\\<^sup>* (cs2,css2,s2); y=(cs2,css2,s2)\\<rbrakk> \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile>cs2,css2\\<Down>s2\""], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                                (?cs2.0, ?css2.0, ?s2.0);\n   \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                        (?cs2.0, ?css2.0, ?s2.0);\n   ?y = (?cs2.0, ?css2.0, ?s2.0)\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile>?cs2.0,?css2.0 \\<Down> ?s2.0\n\ngoal (1 subgoal):\n 1. \\<And>x cs1 css1 s1.\n       \\<lbrakk>\\<And>y cs1a css1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (cs1, css1,\n            s1) \\<rightarrow>\n           (cs1a, css1a, s1a);\n                    \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n   (cs1a, css1a, s1a);\n                    y = (cs1a, css1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1a,css1a \\<Down> s1a;\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                             (cs1, css1, s1);\n        x = (cs1, css1, s1);\n        wf {(c2, c1).\n            \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                 c1 \\<and>\n            \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "have hyp: \"\\<And>cs2 css2 s2. \\<lbrakk>\\<Gamma> \\<turnstile> (cs1,css1,s1) \\<rightarrow> (cs2,css2,s2)\\<rbrakk> \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile>cs2,css2\\<Down>s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs2,css2 \\<Down> s2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs2,css2 \\<Down> s2", "apply (rule hyp_raw)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow> (cs2, css2, s2)\n 2. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            (cs2, css2, s2)\n 3. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       ?y cs2 css2 s2 = (cs2, css2, s2)", "apply   assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            (cs2, css2, s2)\n 2. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       ?y cs2 css2 s2 = (cs2, css2, s2)", "using reach"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* (cs1, css1, s1)\n\ngoal (2 subgoals):\n 1. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                            (cs2, css2, s2)\n 2. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       ?y cs2 css2 s2 = (cs2, css2, s2)", "apply  simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs2 css2 s2.\n       \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                            (cs2, css2, s2) \\<Longrightarrow>\n       ?y cs2 css2 s2 = (cs2, css2, s2)", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n                       (?cs2.0, ?css2.0, ?s2.0) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?cs2.0,?css2.0 \\<Down> ?s2.0\n\ngoal (1 subgoal):\n 1. \\<And>x cs1 css1 s1.\n       \\<lbrakk>\\<And>y cs1a css1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (cs1, css1,\n            s1) \\<rightarrow>\n           (cs1a, css1a, s1a);\n                    \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n   (cs1a, css1a, s1a);\n                    y = (cs1a, css1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1a,css1a \\<Down> s1a;\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                             (cs1, css1, s1);\n        x = (cs1, css1, s1);\n        wf {(c2, c1).\n            \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>*\n                                 c1 \\<and>\n            \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "show \"\\<Gamma>\\<turnstile>cs1,css1\\<Down>s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "proof (cases s1)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s1 = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 3. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 4. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Normal s1')"], ["proof (state)\nthis:\n  s1 = Normal s1'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s1 = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 3. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 4. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "proof (cases cs1)"], ["proof (state)\ngoal (2 subgoals):\n 1. cs1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case Nil"], ["proof (state)\nthis:\n  cs1 = []\n\ngoal (2 subgoals):\n 1. cs1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "note cs1_Nil = this"], ["proof (state)\nthis:\n  cs1 = []\n\ngoal (2 subgoals):\n 1. cs1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "proof (cases css1)"], ["proof (state)\ngoal (2 subgoals):\n 1. css1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case Nil"], ["proof (state)\nthis:\n  css1 = []\n\ngoal (2 subgoals):\n 1. css1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "with cs1_Nil"], ["proof (chain)\npicking this:\n  cs1 = []\n  css1 = []", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = []\n  css1 = []\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by (auto intro: terminatess.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Cons nrms_abrs css1')"], ["proof (state)\nthis:\n  css1 = nrms_abrs # css1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "then"], ["proof (chain)\npicking this:\n  css1 = nrms_abrs # css1'", "obtain nrms abrs where nrms_abrs: \"nrms_abrs=(nrms,abrs)\""], ["proof (prove)\nusing this:\n  css1 = nrms_abrs # css1'\n\ngoal (1 subgoal):\n 1. (\\<And>nrms abrs.\n        nrms_abrs = (nrms, abrs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nrms_abrs\")"], ["proof (state)\nthis:\n  nrms_abrs = (nrms, abrs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "have \"\\<Gamma> \\<turnstile> ([],(nrms,abrs)#css1',Normal s1') \\<rightarrow> (nrms,css1',Normal s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (nrms, abrs) # css1',\n                          Normal s1') \\<rightarrow>\n                         (nrms, css1', Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (nrms, abrs) # css1', Normal s1') \\<rightarrow>\n                       (nrms, css1', Normal s1')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "from hyp [simplified cs1_Nil Cons nrms_abrs Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>nrms,css1' \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>nrms,css1'\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>nrms,css1' \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>nrms,css1' \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>nrms,css1' \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "from ExitBlockNormal [OF this] cs1_Nil Cons nrms_abrs Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>[],(nrms, ?abrs) # css1' \\<Down> Normal s1'\n  cs1 = []\n  css1 = nrms_abrs # css1'\n  nrms_abrs = (nrms, abrs)\n  s1 = Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[],(nrms, ?abrs) # css1' \\<Down> Normal s1'\n  cs1 = []\n  css1 = nrms_abrs # css1'\n  nrms_abrs = (nrms, abrs)\n  s1 = Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Cons c1 cs1')"], ["proof (state)\nthis:\n  cs1 = c1 # cs1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "have \"\\<Gamma>\\<turnstile>c1#cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "proof (cases c1)"], ["proof (state)\ngoal (11 subgoals):\n 1. c1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. c1 = Throw \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  c1 = Skip\n\ngoal (11 subgoals):\n 1. c1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. c1 = Throw \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\nA total of 11 subgoals...", "have \"\\<Gamma> \\<turnstile> (Skip#cs1',css1,Normal s1') \\<rightarrow> (cs1',css1,Normal s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Skip # cs1', css1, Normal s1') \\<rightarrow>\n                         (cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Skip # cs1', css1, Normal s1') \\<rightarrow>\n                       (cs1', css1, Normal s1')\n\ngoal (11 subgoals):\n 1. c1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. c1 = Throw \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\nA total of 11 subgoals...", "from hyp [simplified Cons Skip Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'\n\ngoal (11 subgoals):\n 1. c1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. c1 = Throw \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\nA total of 11 subgoals...", "with Normal Skip"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Skip\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Skip\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (auto intro: terminatess.intros terminates.intros\n                  elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (10 subgoals):\n 1. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. \\<And>x111 x112.\n        c1 = Catch x111 x112 \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. \\<And>x111 x112.\n        c1 = Catch x111 x112 \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Basic f)"], ["proof (state)\nthis:\n  c1 = Basic f\n\ngoal (10 subgoals):\n 1. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. \\<And>x111 x112.\n        c1 = Catch x111 x112 \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma> \\<turnstile> (Basic f#cs1',css1,Normal s1') \\<rightarrow> (cs1',css1,Normal (f s1'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Basic f # cs1', css1, Normal s1') \\<rightarrow>\n                         (cs1', css1, Normal (f s1'))", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Basic f # cs1', css1, Normal s1') \\<rightarrow>\n                       (cs1', css1, Normal (f s1'))\n\ngoal (10 subgoals):\n 1. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. \\<And>x111 x112.\n        c1 = Catch x111 x112 \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Basic Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal (f s1')", "have \"\\<Gamma>\\<turnstile>cs1',css1\\<Down>Normal (f s1')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal (f s1')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal (f s1')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal (f s1')\n\ngoal (10 subgoals):\n 1. \\<And>x2.\n       c1 = Basic x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 10. \\<And>x111 x112.\n        c1 = Catch x111 x112 \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Basic"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Basic f\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal (f s1')", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Basic f\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal (f s1')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (auto intro: terminatess.intros terminates.intros\n                  elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (9 subgoals):\n 1. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Spec r)"], ["proof (state)\nthis:\n  c1 = Spec r\n\ngoal (9 subgoals):\n 1. \\<And>x3.\n       c1 = Spec x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 9. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Spec r", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Spec r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = Normal s1'; c1 = Spec r\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Spec r #\n    cs1',css1 \\<Down> Normal s1'", "apply (rule terminatess.Cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = Normal s1'; c1 = Spec r\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Spec r \\<down> Normal s1'\n 2. \\<lbrakk>s1 = Normal s1'; c1 = Spec r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t.\n                         \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n                         \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply  (fastforce intro: terminates.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = Normal s1'; c1 = Spec r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t.\n                         \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n                         \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r;\n        \\<Gamma>\\<turnstile> \\<langle>Spec\n r,Normal s1'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (erule exec_Normal_elim_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t ta.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; t = Normal ta;\n        (s1', ta) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t\n 2. \\<And>t.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; t = Stuck;\n        \\<forall>t. (s1', t) \\<notin> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply  clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; (s1', ta) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal ta\n 2. \\<And>t.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; t = Stuck;\n        \\<forall>t. (s1', t) \\<notin> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply  (rule hyp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; (s1', ta) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (cs1, css1, s1) \\<rightarrow>\n        (cs1', css1, Normal ta)\n 2. \\<And>t.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; t = Stuck;\n        \\<forall>t. (s1', t) \\<notin> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply  (fastforce intro: step.intros simp add: Cons Spec Normal )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>s1 = Normal s1'; c1 = Spec r; t = Stuck;\n        \\<forall>t. (s1', t) \\<notin> r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (fastforce intro: terminatess_Stuck)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (8 subgoals):\n 1. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  c1 = Seq c\\<^sub>1 c\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2#cs1',css1,Normal s1') \\<rightarrow> (c\\<^sub>1#c\\<^sub>2#cs1',css1,Normal s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                          Normal s1') \\<rightarrow>\n                         (c\\<^sub>1 # c\\<^sub>2 # cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                        Normal s1') \\<rightarrow>\n                       (c\\<^sub>1 # c\\<^sub>2 # cs1', css1, Normal s1')\n\ngoal (8 subgoals):\n 1. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Seq Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'\n\ngoal (8 subgoals):\n 1. \\<And>x41 x42.\n       c1 = Seq x41 x42 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 8. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Seq"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Seq c\\<^sub>1 c\\<^sub>2\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Seq c\\<^sub>1 c\\<^sub>2\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros\n                   elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (7 subgoals):\n 1. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Cond b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  c1 = Cond b c\\<^sub>1 c\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>x51 x52 x53.\n       c1 = Cond x51 x52 x53 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 7. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "proof (cases \"s1' \\<in> b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case True"], ["proof (state)\nthis:\n  s1' \\<in> b\n\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "hence \"\\<Gamma>\\<turnstile>(Cond b c\\<^sub>1 c\\<^sub>2#cs1',css1,Normal s1') \\<rightarrow> (c\\<^sub>1#cs1',css1,Normal s1')\""], ["proof (prove)\nusing this:\n  s1' \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                          Normal s1') \\<rightarrow>\n                         (c\\<^sub>1 # cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                        Normal s1') \\<rightarrow>\n                       (c\\<^sub>1 # cs1', css1, Normal s1')\n\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Cond Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Cond True"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Cond b c\\<^sub>1 c\\<^sub>2\n  s1' \\<in> b\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Cond b c\\<^sub>1 c\\<^sub>2\n  s1' \\<in> b\n  \\<Gamma>\\<turnstile>c\\<^sub>1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros\n              elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case False"], ["proof (state)\nthis:\n  s1' \\<notin> b\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "hence \"\\<Gamma>\\<turnstile>(Cond b c\\<^sub>1 c\\<^sub>2#cs1',css1,Normal s1') \\<rightarrow> (c\\<^sub>2#cs1',css1,Normal s1')\""], ["proof (prove)\nusing this:\n  s1' \\<notin> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                          Normal s1') \\<rightarrow>\n                         (c\\<^sub>2 # cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                        Normal s1') \\<rightarrow>\n                       (c\\<^sub>2 # cs1', css1, Normal s1')\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Cond Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Cond False"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Cond b c\\<^sub>1 c\\<^sub>2\n  s1' \\<notin> b\n  \\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Cond b c\\<^sub>1 c\\<^sub>2\n  s1' \\<notin> b\n  \\<Gamma>\\<turnstile>c\\<^sub>2 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros\n              elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (6 subgoals):\n 1. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (While b c')"], ["proof (state)\nthis:\n  c1 = While b c'\n\ngoal (6 subgoals):\n 1. \\<And>x61 x62.\n       c1 = While x61 x62 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 6. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "proof (cases \"s1' \\<in> b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case True"], ["proof (state)\nthis:\n  s1' \\<in> b\n\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "then"], ["proof (chain)\npicking this:\n  s1' \\<in> b", "have \"\\<Gamma>\\<turnstile>(While b c' # cs1', css1, Normal s1') \\<rightarrow>\n                       (c' # While b c' # cs1', css1, Normal s1')\""], ["proof (prove)\nusing this:\n  s1' \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c' # cs1', css1, Normal s1') \\<rightarrow>\n                         (c' # While b c' # cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c' # cs1', css1, Normal s1') \\<rightarrow>\n                       (c' # While b c' # cs1', css1, Normal s1')\n\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons While Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c' # While b c' # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>c' # While b c' # cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c' # While b c' # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' # While b c' # cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' # While b c' # cs1',css1 \\<Down> Normal s1'\n\ngoal (2 subgoals):\n 1. s1' \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Cons While True Normal"], ["proof (chain)\npicking this:\n  cs1 = c1 # cs1'\n  c1 = While b c'\n  s1' \\<in> b\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>c' # While b c' # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = c1 # cs1'\n  c1 = While b c'\n  s1' \\<in> b\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>c' # While b c' # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case False"], ["proof (state)\nthis:\n  s1' \\<notin> b\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "then"], ["proof (chain)\npicking this:\n  s1' \\<notin> b", "have \"\\<Gamma>\\<turnstile>(While b c' # cs1', css1, Normal s1') \\<rightarrow> (cs1', css1, Normal s1')\""], ["proof (prove)\nusing this:\n  s1' \\<notin> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c' # cs1', css1, Normal s1') \\<rightarrow>\n                         (cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c' # cs1', css1, Normal s1') \\<rightarrow>\n                       (cs1', css1, Normal s1')\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons While Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. s1' \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Cons While False Normal"], ["proof (chain)\npicking this:\n  cs1 = c1 # cs1'\n  c1 = While b c'\n  s1' \\<notin> b\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = c1 # cs1'\n  c1 = While b c'\n  s1' \\<notin> b\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (5 subgoals):\n 1. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Call p)"], ["proof (state)\nthis:\n  c1 = Call p\n\ngoal (5 subgoals):\n 1. \\<And>x7.\n       c1 = Call x7 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 5. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "proof (cases \"\\<Gamma> p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> p = None \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case None"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (2 subgoals):\n 1. \\<Gamma> p = None \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Call Normal"], ["proof (chain)\npicking this:\n  c1 = Call p\n  s1 = Normal s1'\n  \\<Gamma> p = None", "show ?thesis"], ["proof (prove)\nusing this:\n  c1 = Call p\n  s1 = Normal s1'\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros terminatess_Stuck\n                 elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Some bdy)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy", "have \"\\<Gamma> \\<turnstile> (Call p#cs1',css1,Normal s1') \\<rightarrow>\n                    ([bdy],(cs1',Throw#cs1')#css1,Normal s1')\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p # cs1', css1, Normal s1') \\<rightarrow>\n                         ([bdy], (cs1', Throw # cs1') # css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p # cs1', css1, Normal s1') \\<rightarrow>\n                       ([bdy], (cs1', Throw # cs1') # css1, Normal s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Call Normal Some, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Some Call Normal"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy\n  c1 = Call p\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n  c1 = Call p\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') # css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n     \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') #\n                               css1 \\<Down> Normal s1'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Call p #\n    cs1',css1 \\<Down> Normal s1'", "apply (rule terminatess.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n     \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') #\n                               css1 \\<Down> Normal s1'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Call p \\<down> Normal s1'\n 2. \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n     \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') #\n                               css1 \\<Down> Normal s1'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t.\n                         \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n                         \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (blast elim: terminatess_elim_cases intro: terminates.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n     \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') #\n                               css1 \\<Down> Normal s1'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t.\n                         \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n                         \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>[bdy],(cs1', Throw # cs1') #\n                                  css1 \\<Down> Normal s1';\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s1'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (erule terminatess_elim_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s1'\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1';\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n        s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') #\n                                  css1 \\<Down> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (erule exec_Normal_elim_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t bdya.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1';\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n        s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t\n 2. \\<And>t.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1';\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n        s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        t = Stuck; \\<Gamma> p = None\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1';\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n        s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        t = Stuck; \\<Gamma> p = None\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t\n 2. \\<And>t bdya.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1';\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n        s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply  simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t bdya.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1';\n        \\<forall>t.\n           \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n        s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (erule_tac x=t in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t bdya.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1'; \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') #\n                               css1 \\<Down> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (case_tac t)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t bdya x1.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1'; \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        t = Normal x1\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t\n 2. \\<And>t bdya x2.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1'; \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        t = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t\n 3. \\<And>t bdya x3.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1'; \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        t = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t\n 4. \\<And>t bdya.\n       \\<lbrakk>\\<Gamma> p = Some bdy; c1 = Call p; s1 = Normal s1';\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s1'; \\<Gamma> p = Some bdya;\n        \\<Gamma>\\<turnstile> \\<langle>bdya,Normal\n      s1'\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s1'\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        \\<Gamma>\\<turnstile>[],(cs1', Throw # cs1') # css1 \\<Down> t;\n        t = Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1',css1 \\<Down> t", "apply (auto intro: terminatess_Stuck terminatess_Fault exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (4 subgoals):\n 1. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (DynCom c')"], ["proof (state)\nthis:\n  c1 = DynCom c'\n\ngoal (4 subgoals):\n 1. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma> \\<turnstile> (DynCom c'#cs1',css1,Normal s1') \\<rightarrow> (c' s1'#cs1',css1,Normal s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (DynCom c' # cs1', css1, Normal s1') \\<rightarrow>\n                         (c' s1' # cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (DynCom c' # cs1', css1, Normal s1') \\<rightarrow>\n                       (c' s1' # cs1', css1, Normal s1')\n\ngoal (4 subgoals):\n 1. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons DynCom Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c' s1' # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>c' s1'#cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c' s1' # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' s1' # cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' s1' # cs1',css1 \\<Down> Normal s1'\n\ngoal (4 subgoals):\n 1. \\<And>x8.\n       c1 = DynCom x8 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 4. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal DynCom"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = DynCom c'\n  \\<Gamma>\\<turnstile>c' s1' # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = DynCom c'\n  \\<Gamma>\\<turnstile>c' s1' # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (3 subgoals):\n 1. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Guard f g c')"], ["proof (state)\nthis:\n  c1 = Guard f g c'\n\ngoal (3 subgoals):\n 1. \\<And>x91 x92 x93.\n       c1 = Guard x91 x92 x93 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 3. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "proof (cases \"s1' \\<in> g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s1' \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case True"], ["proof (state)\nthis:\n  s1' \\<in> g\n\ngoal (2 subgoals):\n 1. s1' \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "then"], ["proof (chain)\npicking this:\n  s1' \\<in> g", "have \"\\<Gamma> \\<turnstile> (Guard f g c'#cs1',css1,Normal s1') \\<rightarrow> (c'#cs1',css1,Normal s1')\""], ["proof (prove)\nusing this:\n  s1' \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Guard f g c' # cs1', css1,\n                          Normal s1') \\<rightarrow>\n                         (c' # cs1', css1, Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f g c' # cs1', css1, Normal s1') \\<rightarrow>\n                       (c' # cs1', css1, Normal s1')\n\ngoal (2 subgoals):\n 1. s1' \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Guard Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c' # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>c'#cs1',css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c' # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' # cs1',css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' # cs1',css1 \\<Down> Normal s1'\n\ngoal (2 subgoals):\n 1. s1' \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Guard True"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Guard f g c'\n  s1' \\<in> g\n  \\<Gamma>\\<turnstile>c' # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Guard f g c'\n  s1' \\<in> g\n  \\<Gamma>\\<turnstile>c' # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case False"], ["proof (state)\nthis:\n  s1' \\<notin> g\n\ngoal (1 subgoal):\n 1. s1' \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Guard Normal"], ["proof (chain)\npicking this:\n  c1 = Guard f g c'\n  s1 = Normal s1'\n  s1' \\<notin> g", "show ?thesis"], ["proof (prove)\nusing this:\n  c1 = Guard f g c'\n  s1 = Normal s1'\n  s1' \\<notin> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminatess_Fault\n                                terminates.intros\n                 elim:  exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (2 subgoals):\n 1. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case Throw"], ["proof (state)\nthis:\n  c1 = Throw\n\ngoal (2 subgoals):\n 1. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma> \\<turnstile> (Throw#cs1',css1,Normal s1') \\<rightarrow> (cs1',css1,Abrupt s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw # cs1', css1, Normal s1') \\<rightarrow>\n                         (cs1', css1, Abrupt s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Throw # cs1', css1, Normal s1') \\<rightarrow>\n                       (cs1', css1, Abrupt s1')\n\ngoal (2 subgoals):\n 1. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Throw Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'", "have \"\\<Gamma>\\<turnstile>cs1',css1\\<Down>Abrupt s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'\n\ngoal (2 subgoals):\n 1. c1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n 2. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Throw"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Throw\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Throw\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (auto intro: terminatess.intros terminates.intros\n                  elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  c1 = Catch c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "have \"\\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2#cs1',css1,Normal s1') \\<rightarrow>\n                  ([c\\<^sub>1], (cs1',c\\<^sub>2#cs1')# css1,Normal s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                          Normal s1') \\<rightarrow>\n                         ([c\\<^sub>1], (cs1', c\\<^sub>2 # cs1') # css1,\n                          Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs1', css1,\n                        Normal s1') \\<rightarrow>\n                       ([c\\<^sub>1], (cs1', c\\<^sub>2 # cs1') # css1,\n                        Normal s1')\n\ngoal (1 subgoal):\n 1. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "from hyp [simplified Cons Catch Normal, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') #\n                                  css1 \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') # css1\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') #\n                                  css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') #\n                                    css1 \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') #\n                                  css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>x111 x112.\n       c1 = Catch x111 x112 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "with Normal Catch"], ["proof (chain)\npicking this:\n  s1 = Normal s1'\n  c1 = Catch c\\<^sub>1 c\\<^sub>2\n  \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') #\n                                  css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 = Normal s1'\n  c1 = Catch c\\<^sub>1 c\\<^sub>2\n  \\<Gamma>\\<turnstile>[c\\<^sub>1],(cs1', c\\<^sub>2 # cs1') #\n                                  css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "by (fastforce intro: terminatess.intros terminates.intros exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "with Cons Normal"], ["proof (chain)\npicking this:\n  cs1 = c1 # cs1'\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = c1 # cs1'\n  s1 = Normal s1'\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 3. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 3. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Abrupt s1')"], ["proof (state)\nthis:\n  s1 = Abrupt s1'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 3. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "proof (cases cs1)"], ["proof (state)\ngoal (2 subgoals):\n 1. cs1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case Nil"], ["proof (state)\nthis:\n  cs1 = []\n\ngoal (2 subgoals):\n 1. cs1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "note cs1_Nil = this"], ["proof (state)\nthis:\n  cs1 = []\n\ngoal (2 subgoals):\n 1. cs1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "proof (cases css1)"], ["proof (state)\ngoal (2 subgoals):\n 1. css1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case Nil"], ["proof (state)\nthis:\n  css1 = []\n\ngoal (2 subgoals):\n 1. css1 = [] \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "with cs1_Nil"], ["proof (chain)\npicking this:\n  cs1 = []\n  css1 = []", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = []\n  css1 = []\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by (auto intro: terminatess.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Cons nrms_abrs css1')"], ["proof (state)\nthis:\n  css1 = nrms_abrs # css1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "then"], ["proof (chain)\npicking this:\n  css1 = nrms_abrs # css1'", "obtain nrms abrs where nrms_abrs: \"nrms_abrs=(nrms,abrs)\""], ["proof (prove)\nusing this:\n  css1 = nrms_abrs # css1'\n\ngoal (1 subgoal):\n 1. (\\<And>nrms abrs.\n        nrms_abrs = (nrms, abrs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nrms_abrs\")"], ["proof (state)\nthis:\n  nrms_abrs = (nrms, abrs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "have \"\\<Gamma> \\<turnstile> ([],(nrms,abrs)#css1',Abrupt s1') \\<rightarrow> (abrs,css1',Normal s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (nrms, abrs) # css1',\n                          Abrupt s1') \\<rightarrow>\n                         (abrs, css1', Normal s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (nrms, abrs) # css1', Abrupt s1') \\<rightarrow>\n                       (abrs, css1', Normal s1')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "from hyp [simplified cs1_Nil Cons nrms_abrs Abrupt, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>abrs,css1' \\<Down> Normal s1'", "have \"\\<Gamma>\\<turnstile>abrs,css1'\\<Down>Normal s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>abrs,css1' \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>abrs,css1' \\<Down> Normal s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>abrs,css1' \\<Down> Normal s1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       css1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "from ExitBlockAbrupt [OF this] cs1_Nil Cons nrms_abrs Abrupt"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>[],(?nrms, abrs) # css1' \\<Down> Abrupt s1'\n  cs1 = []\n  css1 = nrms_abrs # css1'\n  nrms_abrs = (nrms, abrs)\n  s1 = Abrupt s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[],(?nrms, abrs) # css1' \\<Down> Abrupt s1'\n  cs1 = []\n  css1 = nrms_abrs # css1'\n  nrms_abrs = (nrms, abrs)\n  s1 = Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Cons c1 cs1')"], ["proof (state)\nthis:\n  cs1 = c1 # cs1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "have \"\\<Gamma>\\<turnstile>c1#cs1',css1\\<Down>Abrupt s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'", "have \"\\<Gamma> \\<turnstile> (c1#cs1',css1,Abrupt s1') \\<rightarrow> (cs1',css1,Abrupt s1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c1 # cs1', css1, Abrupt s1') \\<rightarrow>\n                         (cs1', css1, Abrupt s1')", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c1 # cs1', css1, Abrupt s1') \\<rightarrow>\n                       (cs1', css1, Abrupt s1')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'", "from hyp [simplified Cons Abrupt, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'", "have \"\\<Gamma>\\<turnstile>cs1',css1\\<Down>Abrupt s1'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'", "with Cons Abrupt"], ["proof (chain)\npicking this:\n  cs1 = c1 # cs1'\n  s1 = Abrupt s1'\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = c1 # cs1'\n  s1 = Abrupt s1'\n  \\<Gamma>\\<turnstile>cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'", "by (fastforce intro: terminatess.intros terminates.intros exec.intros\n                    elim: terminatess_elim_cases exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       cs1 = a # list \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "with Cons Abrupt"], ["proof (chain)\npicking this:\n  cs1 = c1 # cs1'\n  s1 = Abrupt s1'\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  cs1 = c1 # cs1'\n  s1 = Abrupt s1'\n  \\<Gamma>\\<turnstile>c1 # cs1',css1 \\<Down> Abrupt s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case (Fault f)"], ["proof (state)\nthis:\n  s1 = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n 2. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "thus ?thesis"], ["proof (prove)\nusing this:\n  s1 = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by (auto intro: terminatess_Fault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal (1 subgoal):\n 1. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "case Stuck"], ["proof (state)\nthis:\n  s1 = Stuck\n\ngoal (1 subgoal):\n 1. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "thus ?thesis"], ["proof (prove)\nusing this:\n  s1 = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1", "by (auto intro: terminatess_Stuck)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs1,css1 \\<Down> s1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_impl_terminatess:\n  assumes not_inf: \"\\<not> inf \\<Gamma> cs css s\"\n  shows \"\\<Gamma>\\<turnstile>cs,css\\<Down>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s", "from not_inf_implies_wf [OF not_inf]"], ["proof (chain)\npicking this:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}", "have wf: \"wf {(c2, c1). \\<Gamma>\\<turnstile>(cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma>\\<turnstile>c1 \\<rightarrow> c2}\""], ["proof (prove)\nusing this:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\n\ngoal (1 subgoal):\n 1. wf {(c2, c1).\n        \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n        \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}", "."], ["proof (state)\nthis:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (cs, css, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s", "by (rule wf_implies_termi_reach [OF wf]) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>cs,css \\<Down> s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_impl_terminates:\n  assumes not_inf: \"\\<not> inf \\<Gamma> [c] [] s\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "from not_inf_impl_terminatess [OF not_inf]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s", "have \"\\<Gamma>\\<turnstile>[c],[]\\<Down>s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>[c],[] \\<Down> s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>[c],[] \\<Down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "by (auto elim: terminatess_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem terminatess_iff_not_inf:\n  \"\\<Gamma>\\<turnstile>cs,css\\<Down>s = (\\<not> inf \\<Gamma> cs css s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s =\n    (\\<not> AlternativeSmallStep.inf \\<Gamma> cs css s)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>cs,css \\<Down> s \\<Longrightarrow>\n    \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s\n 2. \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs,css \\<Down> s", "apply  (erule terminatess_impl_not_inf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> cs css s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>cs,css \\<Down> s", "apply (erule not_inf_impl_terminatess)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary terminates_iff_not_inf:\n  \"\\<Gamma>\\<turnstile>c\\<down>s = (\\<not> inf \\<Gamma> [c] [] s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s =\n    (\\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s)", "apply (rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s\n 2. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c \\<down> s", "apply  (erule terminates_impl_not_inf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> AlternativeSmallStep.inf \\<Gamma> [c] [] s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c \\<down> s", "apply (erule not_inf_impl_terminates)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Completeness of Total Correctness Hoare Logic\\<close>"], ["", "lemma ConseqMGT:\n  assumes modif: \"\\<forall>Z::'a. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P' Z::'a assn) c (Q' Z),(A' Z)\"\n  assumes impl: \"\\<And>s. s \\<in> P \\<Longrightarrow> s \\<in> P' s \\<and> (\\<forall>t. t \\<in> Q' s \\<longrightarrow> t \\<in> Q) \\<and>\n                                            (\\<forall>t. t \\<in> A' s \\<longrightarrow> t \\<in> A)\"\n  shows \"\\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "using impl"], ["proof (prove)\nusing this:\n  ?s \\<in> P \\<Longrightarrow>\n  ?s \\<in> P' ?s \\<and>\n  (\\<forall>t. t \\<in> Q' ?s \\<longrightarrow> t \\<in> Q) \\<and>\n  (\\<forall>t. t \\<in> A' ?s \\<longrightarrow> t \\<in> A)\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "by - (rule conseq [OF modif],blast)"], ["", "lemma conseq_extract_state_indep_prop:\n  assumes state_indep_prop:\"\\<forall>s \\<in> P. R\"\n  assumes to_show: \"R \\<Longrightarrow> \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "apply (rule Conseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>P.\n       \\<exists>P' Q' A'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P' c Q',A' \\<and>\n          s \\<in> P' \\<and> Q' \\<subseteq> Q \\<and> A' \\<subseteq> A", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> P \\<Longrightarrow>\n       \\<exists>P' Q' A'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P' c Q',A' \\<and>\n          s \\<in> P' \\<and> Q' \\<subseteq> Q \\<and> A' \\<subseteq> A", "apply (rule_tac x=\"P\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> P \\<Longrightarrow>\n       \\<exists>Q' A'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q',A' \\<and>\n          s \\<in> P \\<and> Q' \\<subseteq> Q \\<and> A' \\<subseteq> A", "apply (rule_tac x=\"Q\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> P \\<Longrightarrow>\n       \\<exists>A'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A' \\<and>\n          s \\<in> P \\<and> Q \\<subseteq> Q \\<and> A' \\<subseteq> A", "apply (rule_tac x=\"A\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> P \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A \\<and>\n       s \\<in> P \\<and> Q \\<subseteq> Q \\<and> A \\<subseteq> A", "using state_indep_prop to_show"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>P. R\n  R \\<Longrightarrow>\n  \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> P \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A \\<and>\n       s \\<in> P \\<and> Q \\<subseteq> Q \\<and> A \\<subseteq> A", "by blast"], ["", "lemma Call_lemma':\n assumes Call_hyp:\n \"\\<forall>q\\<in>dom \\<Gamma>. \\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>{s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                       \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"\n shows \"\\<And>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n      {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and> \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#cs,css,Normal s))}\n              c\n      {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n      {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c # cs, css, Normal s))}\n           c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Skip # cs, css, Normal s))}\n           Skip\n           {t. \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n             Z\\<rangle> \\<Rightarrow> Normal\n t},{t. \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Basic\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Basic x # cs, css, Normal s))}\n           Basic x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Basic\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 10. \\<And>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma>\n p) \\<down> Normal \\<sigma> \\<and>\n             (\\<exists>cs css.\n                 \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n(Throw # cs, css, Normal s))}\n            Throw\n            {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n               Z\\<rangle> \\<Rightarrow> Normal\n   t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Skip # cs, css, Normal s))}\n           Skip\n           {t. \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n             Z\\<rangle> \\<Rightarrow> Normal\n t},{t. \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Basic\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Basic x # cs, css, Normal s))}\n           Basic x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Basic\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 10. \\<And>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma>\n p) \\<down> Normal \\<sigma> \\<and>\n             (\\<exists>cs css.\n                 \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n(Throw # cs, css, Normal s))}\n            Throw\n            {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n               Z\\<rangle> \\<Rightarrow> Normal\n   t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\nA total of 11 subgoals...", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s = Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Skip,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                 \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Skip # cs,css,Normal s))}\n               Skip\n              {t. \\<Gamma>\\<turnstile>\\<langle>Skip,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Skip,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Skip # cs, css, Normal s))}\n        Skip\n        {t. \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule hoaret.Skip [THEN conseqPre]) (blast intro: exec.Skip)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Skip # cs, css, Normal s))}\n      Skip\n      {t. \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Skip,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (10 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Basic\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Basic x # cs, css, Normal s))}\n           Basic x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Basic\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 10. \\<And>c1 c2 Z.\n        \\<lbrakk>\\<And>Z.\n                    \\<Gamma>,\\<Theta>\n                       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                         s = Z \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                         (\\<exists>cs css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n            (c1 # cs, css, Normal s))}\n                        c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                           Z\\<rangle> \\<Rightarrow> Normal\n               t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                  Z\\<rangle> \\<Rightarrow> Abrupt t};\n         \\<And>Z.\n            \\<Gamma>,\\<Theta>\n               \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                 s = Z \\<and>\n                 \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                 \\<Gamma>\\<turnstile>the\n(\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                 (\\<exists>cs css.\n                     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n    (c2 # cs, css, Normal s))}\n                c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                   Z\\<rangle> \\<Rightarrow> Normal\n       t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n          Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                               s = Z \\<and>\n                               \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                        c2,Normal\n                            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F) \\<and>\n                               \\<Gamma>\\<turnstile>the\n              (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                               (\\<exists>cs css.\n                                   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                   [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                  (Catch c1 c2 # cs, css, Normal s))}\n                              Catch c1 c2\n                              {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                           c2,Normal\n                               Z\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Basic\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Basic x # cs, css, Normal s))}\n           Basic x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Basic\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 10. \\<And>c1 c2 Z.\n        \\<lbrakk>\\<And>Z.\n                    \\<Gamma>,\\<Theta>\n                       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                         s = Z \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                         (\\<exists>cs css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n            (c1 # cs, css, Normal s))}\n                        c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                           Z\\<rangle> \\<Rightarrow> Normal\n               t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                  Z\\<rangle> \\<Rightarrow> Abrupt t};\n         \\<And>Z.\n            \\<Gamma>,\\<Theta>\n               \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                 s = Z \\<and>\n                 \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                 \\<Gamma>\\<turnstile>the\n(\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                 (\\<exists>cs css.\n                     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n    (c2 # cs, css, Normal s))}\n                c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                   Z\\<rangle> \\<Rightarrow> Normal\n       t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n          Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                               s = Z \\<and>\n                               \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                        c2,Normal\n                            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F) \\<and>\n                               \\<Gamma>\\<turnstile>the\n              (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                               (\\<exists>cs css.\n                                   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                   [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                  (Catch c1 c2 # cs, css, Normal s))}\n                              Catch c1 c2\n                              {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                           c2,Normal\n                               Z\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Basic f)"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Basic\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Basic x # cs, css, Normal s))}\n           Basic x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Basic\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 10. \\<And>c1 c2 Z.\n        \\<lbrakk>\\<And>Z.\n                    \\<Gamma>,\\<Theta>\n                       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                         s = Z \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                         \\<Gamma>\\<turnstile>the\n        (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                         (\\<exists>cs css.\n                             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n            (c1 # cs, css, Normal s))}\n                        c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                           Z\\<rangle> \\<Rightarrow> Normal\n               t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                  Z\\<rangle> \\<Rightarrow> Abrupt t};\n         \\<And>Z.\n            \\<Gamma>,\\<Theta>\n               \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                 s = Z \\<and>\n                 \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                 \\<Gamma>\\<turnstile>the\n(\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                 (\\<exists>cs css.\n                     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n    (c2 # cs, css, Normal s))}\n                c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                   Z\\<rangle> \\<Rightarrow> Normal\n       t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n          Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                               s = Z \\<and>\n                               \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                        c2,Normal\n                            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F) \\<and>\n                               \\<Gamma>\\<turnstile>the\n              (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                               (\\<exists>cs css.\n                                   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                   [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                  (Catch c1 c2 # cs, css, Normal s))}\n                              Catch c1 c2\n                              {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                           c2,Normal\n                               Z\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Basic f,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                   \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Basic f#cs,css,Normal s))}\n               Basic f\n              {t. \\<Gamma>\\<turnstile>\\<langle>Basic f,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Basic f,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Basic\n  f,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Basic f # cs, css, Normal s))}\n        Basic f\n        {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n     f,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Basic\n                               f,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule hoaret.Basic [THEN conseqPre]) (blast intro: exec.Basic)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Basic f # cs, css, Normal s))}\n      Basic f\n      {t. \\<Gamma>\\<turnstile> \\<langle>Basic\n   f,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Basic\n                                f,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (9 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Spec r)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Spec\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Spec x # cs, css, Normal s))}\n           Spec x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Spec\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 9. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Spec r,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                   \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Spec r#cs,css,Normal s))}\n               Spec r\n              {t. \\<Gamma>\\<turnstile>\\<langle>Spec r,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Spec r,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Spec\n  r,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Spec r # cs, css, Normal s))}\n        Spec r\n        {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n     r,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Spec\n                               r,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule hoaret.Spec [THEN conseqPre])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Spec\n r,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Spec r # cs, css, Normal s))}\n    \\<subseteq> {s. (\\<forall>t.\n                        (s, t) \\<in> r \\<longrightarrow>\n                        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n                             r,Normal\n                                Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n                    (\\<exists>t. (s, t) \\<in> r)}", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Spec\n         r,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F));\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Spec r # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>t.\n                             (Z, t) \\<in> r \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>Spec\n                      r,Normal Z\\<rangle> \\<Rightarrow> Normal t) \\<and>\n                         (\\<exists>t. (Z, t) \\<in> r)", "apply (case_tac \"\\<exists>t. (Z,t) \\<in> r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Spec\n         r,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F));\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Spec r # cs, css, Normal Z);\n        \\<exists>t. (Z, t) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>t.\n                             (Z, t) \\<in> r \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>Spec\n                      r,Normal Z\\<rangle> \\<Rightarrow> Normal t) \\<and>\n                         (\\<exists>t. (Z, t) \\<in> r)\n 2. \\<And>cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Spec\n         r,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F));\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Spec r # cs, css, Normal Z);\n        \\<nexists>t. (Z, t) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>t.\n                             (Z, t) \\<in> r \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>Spec\n                      r,Normal Z\\<rangle> \\<Rightarrow> Normal t) \\<and>\n                         (\\<exists>t. (Z, t) \\<in> r)", "apply (auto elim: exec_elim_cases simp add: final_notin_def intro: exec.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Spec r # cs, css, Normal s))}\n      Spec r\n      {t. \\<Gamma>\\<turnstile> \\<langle>Spec\n   r,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Spec\n                                r,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Seq c1 c2)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c1 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c2 # cs, css, Normal s))}\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c1:\n    \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                     \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                 (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c1#cs,css,Normal s))}\n                c1\n               {t. \\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n               {t. \\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c1 # cs, css, Normal s))}\n           c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Seq.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c1 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c2 # cs, css, Normal s))}\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c1 # cs, css, Normal s))}\n           c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c1 # cs, css, Normal s))}\n         c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c2:\n    \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                 (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c2#cs,css,Normal s))}\n                c2\n               {t. \\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n               {t. \\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c2 # cs, css, Normal s))}\n           c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Seq.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c1 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c2 # cs, css, Normal s))}\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c2 # cs, css, Normal s))}\n           c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c2 # cs, css, Normal s))}\n         c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have c1: \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n              (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Seq c1 c2#cs,css,Normal s))}\n               c1\n               {t. \\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t \\<and>\n                   \\<Gamma>\\<turnstile>\\<langle>c2,Normal t\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                   \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                  (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c2#cs,css,Normal t))},\n               {t. \\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Seq c1\n  c2,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Seq c1 c2 # cs, css, Normal s))}\n        c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n           t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>the (\\<Gamma>\n   p) \\<down> Normal \\<sigma> \\<and>\n               (\\<exists>cs css.\n                   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n  (c2 # cs, css,\n   Normal\n    t))},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n      c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF hyp_c1],clarify,safe)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 5. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (5 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 5. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\nZ\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (blast dest: Seq_NoFaultStuckD1)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Seq c1 c2 # cs,css,Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Seq c1 c2 # cs, css, Normal Z)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c1 # cs,css, Normal Z)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Seq c1 c2 # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c1 # cs, css, Normal Z)", "by (blast intro: rtranclp_into_tranclp1 [THEN tranclp_into_rtranclp]\n                 step.Seq)"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c1 # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\"\n            \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>c2,Normal t\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\nt\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (blast dest: Seq_NoFaultStuckD2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Seq c1 c2#cs,css,Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Seq c1 c2 # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Seq c1 c2 # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "have \"\\<Gamma>\\<turnstile>(Seq c1 c2 # cs,css,Normal Z) \\<rightarrow> (c1#c2#cs,css,Normal Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c1 c2 # cs, css, Normal Z) \\<rightarrow>\n                         (c1 # c2 # cs, css, Normal Z)", "by (rule step.Seq)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c1 c2 # cs, css, Normal Z) \\<rightarrow>\n                       (c1 # c2 # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c1 c2 # cs, css, Normal Z) \\<rightarrow>\n                       (c1 # c2 # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "hence \"\\<Gamma>\\<turnstile> (c1#c2#cs,css,Normal Z) \\<rightarrow>\\<^sup>* (c2#cs,css,Normal t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c1 # c2 # cs, css, Normal Z) \\<rightarrow>\\<^sup>*\n                         (c2 # cs, css, Normal t)", "by (rule exec_impl_steps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c1 # c2 # cs, css, Normal Z) \\<rightarrow>\\<^sup>*\n                       (c2 # cs, css, Normal t)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal t)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c2 # cs, css, Normal t)", "show \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c2 # cs,css, Normal t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c2 # cs, css, Normal t)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c2 # cs, css, Normal t)", "by iprover"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c2 # cs, css, Normal t)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Seq c1\n         c2,Normal\n             Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Seq c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                   c2,Normal\n Z\\<rangle> \\<Rightarrow> Abrupt t", "by (blast intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c1\nc2,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Seq c1 c2 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         Z\\<rangle> \\<Rightarrow> Normal t \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma>\n p) \\<down> Normal \\<sigma> \\<and>\n             (\\<exists>cs css.\n                 \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n(c2 # cs, css,\n Normal\n  t))},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n    c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Seq c1 c2 # cs, css, Normal s))}\n                             Seq c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 8. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                  \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n              (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Seq c1 c2#cs,css,Normal s))}\n              Seq c1 c2\n              {t. \\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Seq c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Seq c1\n  c2,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Seq c1 c2 # cs, css, Normal s))}\n        Seq c1 c2\n        {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n     c2,Normal\n         Z\\<rangle> \\<Rightarrow> Normal\n                                   t},{t.\n \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule hoaret.Seq [OF c1 ConseqMGT [OF hyp_c2]])\n     (blast intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c1\nc2,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Seq c1 c2 # cs, css, Normal s))}\n      Seq c1 c2\n      {t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n   c2,Normal\n       Z\\<rangle> \\<Rightarrow> Normal\n                                 t},{t. \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Cond b c1 c2)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c1 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c2 # cs, css, Normal s))}\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c1:\n       \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                        \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                    (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c1#cs,css,Normal s))}\n                   c1\n                  {t. \\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                  {t. \\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c1 # cs, css, Normal s))}\n           c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Cond.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c1 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c2 # cs, css, Normal s))}\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c1 # cs, css, Normal s))}\n           c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c1 # cs, css, Normal s))}\n         c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have\n  \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n           (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Cond b c1 c2#cs,css,Normal s))}\n           \\<inter> b)\n           c1\n          {t. \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n   c2,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (Cond b c1 c2 # cs, css,\n                                    Normal s))} \\<inter>\n         b)\n        c1 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n        c2,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\nc2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF hyp_c1],safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<in> b\" \"\\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\nZ\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (auto simp add: final_notin_def intro: exec.CondTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<in> b\"\n      \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Cond b c1 c2 # cs,css, Normal Z)\""], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Cond b c1 c2 # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c1 # cs,css, Normal Z)\""], ["proof (prove)\nusing this:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Cond b c1 c2 # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c1 # cs, css, Normal Z)", "by (blast intro: rtranclp_into_tranclp1 [THEN tranclp_into_rtranclp]\n          step.CondTrue)"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c1 # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<in> b\" \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                   c2,Normal\n Z\\<rangle> \\<Rightarrow> Normal t", "by (blast intro: exec.CondTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<in> b\" \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                   c2,Normal\n Z\\<rangle> \\<Rightarrow> Abrupt t", "by (blast intro: exec.CondTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       b)\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       b)\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c2:\n       \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                     \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                    (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c2#cs,css,Normal s))}\n                   c2\n                  {t. \\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                  {t. \\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c2 # cs, css, Normal s))}\n           c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Cond.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c1 # cs, css, Normal s))}\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c2 # cs, css, Normal s))}\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         ?Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c2 # cs, css, Normal s))}\n           c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c2 # cs, css, Normal s))}\n         c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have\n  \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n           (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*(Cond b c1 c2#cs,css, Normal s))}\n           \\<inter> -b)\n           c2\n          {t. \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n   c2,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (Cond b c1 c2 # cs, css,\n                                    Normal s))} \\<inter>\n         - b)\n        c2 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n        c2,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\nc2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF hyp_c2],safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<notin> b\" \"\\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\nZ\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (auto simp add: final_notin_def intro: exec.CondFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<notin> b\"\n      \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Cond b c1 c2 # cs,css, Normal Z)\""], ["proof (state)\nthis:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Cond b c1 c2 # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c2 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c2 # cs,css,Normal Z)\""], ["proof (prove)\nusing this:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Cond b c1 c2 # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c2 # cs, css, Normal Z)", "by (blast intro: rtranclp_into_tranclp1 [THEN tranclp_into_rtranclp]\n          step.CondFalse)"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c2 # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<notin> b\" \"\\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                   c2,Normal\n Z\\<rangle> \\<Rightarrow> Normal t", "by (blast intro: exec.CondFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<notin> b\" \"\\<Gamma>\\<turnstile>\\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Cond b c1 c2 # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n    Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  Z \\<notin> b\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                   c2,Normal\n Z\\<rangle> \\<Rightarrow> Abrupt t", "by (blast intro: exec.CondFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       - b)\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Cond x1 c1 c2 # cs, css, Normal s))}\n                             Cond x1 c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 7. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       b)\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       - b)\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "show\n   \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n           (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Cond b c1 c2#cs,css,Normal s))}\n           (Cond b c1 c2)\n          {t. \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Cond b c1 c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       b)\n      c1 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({s.\n        s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n c2,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Cond b c1 c2 # cs, css,\n                                  Normal s))} \\<inter>\n       - b)\n      c2 {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n      c2,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                 c2,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n  c2,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Cond b c1 c2 # cs, css, Normal s))}\n        Cond b c1 c2\n        {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n     c2,Normal\n         Z\\<rangle> \\<Rightarrow> Normal\n                                   t},{t.\n \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n                                c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule hoaret.Cond)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Cond b c1\nc2,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Cond b c1 c2 # cs, css, Normal s))}\n      Cond b c1 c2\n      {t. \\<Gamma>\\<turnstile> \\<langle>Cond b c1\n   c2,Normal\n       Z\\<rangle> \\<Rightarrow> Normal\n                                 t},{t. \\<Gamma>\\<turnstile> \\<langle>Cond b\n                                 c1 c2,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (While b c)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c # cs, css, Normal s))}\n      c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>c,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "let ?unroll = \"({(s,t). s\\<in>b \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t})\\<^sup>*\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "let ?P' = \"\\<lambda>Z. {t. (Z,t)\\<in>?unroll \\<and>\n                    (\\<forall>e. (Z,e)\\<in>?unroll \\<longrightarrow> e\\<in>b\n                         \\<longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                             (\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>Abrupt u \\<longrightarrow>\n                                  \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                    \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                  (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                               (While b c#cs,css,Normal t))}\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "let ?A = \"\\<lambda>Z. {t. \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "let ?r = \"{(t,s). \\<Gamma>\\<turnstile>(While b c)\\<down>Normal s \\<and> s\\<in>b \\<and>\n                    \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t}\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>While x1\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While x1 c # cs, css, Normal s))}\n           While x1 c\n           {t. \\<Gamma>\\<turnstile> \\<langle>While x1\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>While x1\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 6. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n       {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>While b c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                 \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n          (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>)\\<rightarrow>\\<^sup>*(While b c#cs,css,Normal s))}\n         (While b c)\n       {t. \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n       {t. \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (While b c # cs, css, Normal s))}\n        While b c\n        {t. \\<Gamma>\\<turnstile> \\<langle>While b\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>While b\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [where ?P'=\"\\<lambda> Z. ?P' Z\"\n                         and ?Q'=\"\\<lambda> Z. ?P' Z \\<inter> - b\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n            (Z, t)\n            \\<in> {(s, t).\n                   s \\<in> b \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n            (\\<forall>e.\n                (Z, e)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal\n      t}\\<^sup>* \\<longrightarrow>\n                e \\<in> b \\<longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                (\\<forall>u.\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While b c # cs, css, Normal t))}\n           While b c\n           ({t. (Z, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (Z, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))} \\<inter>\n            - b),(?A' Z)\n 2. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> ?A' s \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "have wf_r: \"wf ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(t, s).\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n        s \\<in> b \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> Normal t}", "by (rule wf_terminates_while)"], ["proof (state)\nthis:\n  wf {(t, s).\n      \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n      s \\<in> b \\<and>\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n s\\<rangle> \\<Rightarrow> Normal t}\n\ngoal (2 subgoals):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n            (Z, t)\n            \\<in> {(s, t).\n                   s \\<in> b \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n            (\\<forall>e.\n                (Z, e)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal\n      t}\\<^sup>* \\<longrightarrow>\n                e \\<in> b \\<longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                (\\<forall>u.\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While b c # cs, css, Normal t))}\n           While b c\n           ({t. (Z, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (Z, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))} \\<inter>\n            - b),(?A' Z)\n 2. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> ?A' s \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "show \"\\<forall> Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (?P' Z) (While b c) (?P' Z \\<inter> - b),(?A Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n            (Z, t)\n            \\<in> {(s, t).\n                   s \\<in> b \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n            (\\<forall>e.\n                (Z, e)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal\n      t}\\<^sup>* \\<longrightarrow>\n                e \\<in> b \\<longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                (\\<forall>u.\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (While b c # cs, css, Normal t))}\n           While b c\n           ({t. (Z, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (Z, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))} \\<inter>\n            - b),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n              c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule allI, rule hoaret.While [OF wf_r])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<forall>\\<sigma>'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b)\n              c ({t. (t, \\<sigma>')\n                     \\<in> {(t, s).\n                            \\<Gamma>\\<turnstile>While b\n           c \\<down> Normal s \\<and>\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                 {t. (Z, t)\n                     \\<in> {(s, t).\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                     (\\<forall>e.\n                         (Z, e)\n                         \\<in> {(s, t).\n                                s \\<in> b \\<and>\n                                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                           s\\<rangle> \\<Rightarrow> Normal\n               t}\\<^sup>* \\<longrightarrow>\n                         e \\<in> b \\<longrightarrow>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                     \\<Gamma>\\<turnstile>the\n    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css.\n                         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n        (While b c # cs, css,\n         Normal\n          t))}),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "fix Z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<forall>\\<sigma>'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b)\n              c ({t. (t, \\<sigma>')\n                     \\<in> {(t, s).\n                            \\<Gamma>\\<turnstile>While b\n           c \\<down> Normal s \\<and>\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                 {t. (Z, t)\n                     \\<in> {(s, t).\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                     (\\<forall>e.\n                         (Z, e)\n                         \\<in> {(s, t).\n                                s \\<in> b \\<and>\n                                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                           s\\<rangle> \\<Rightarrow> Normal\n               t}\\<^sup>* \\<longrightarrow>\n                         e \\<in> b \\<longrightarrow>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                     \\<Gamma>\\<turnstile>the\n    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css.\n                         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n        (While b c # cs, css,\n         Normal\n          t))}),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from While"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c # cs, css, Normal s))}\n      c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>c,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c: \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n            {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n               (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c # cs,css,Normal s))}\n              c\n            {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n            {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c # cs, css, Normal s))}\n      c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>c,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c # cs, css, Normal s))}\n           c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c # cs, css, Normal s))}\n         c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<forall>\\<sigma>'.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b)\n              c ({t. (t, \\<sigma>')\n                     \\<in> {(t, s).\n                            \\<Gamma>\\<turnstile>While b\n           c \\<down> Normal s \\<and>\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                 {t. (Z, t)\n                     \\<in> {(s, t).\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                     (\\<forall>e.\n                         (Z, e)\n                         \\<in> {(s, t).\n                                s \\<in> b \\<and>\n                                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                           s\\<rangle> \\<Rightarrow> Normal\n               t}\\<^sup>* \\<longrightarrow>\n                         e \\<in> b \\<longrightarrow>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                     \\<Gamma>\\<turnstile>the\n    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css.\n                         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n        (While b c # cs, css,\n         Normal\n          t))}),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<forall>\\<sigma>. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter> ?P' Z  \\<inter> b) c\n                       ({t. (t, \\<sigma>) \\<in> ?r} \\<inter> ?P' Z),(?A Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>'.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>'} \\<inter>\n            {t. (Z, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (Z, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))} \\<inter>\n            b)\n           c ({t. (t, \\<sigma>')\n                  \\<in> {(t, s).\n                         \\<Gamma>\\<turnstile>While b\n        c \\<down> Normal s \\<and>\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n              {t. (Z, t)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                  (\\<forall>e.\n                      (Z, e)\n                      \\<in> {(s, t).\n                             s \\<in> b \\<and>\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> Normal\n            t}\\<^sup>* \\<longrightarrow>\n                      e \\<in> b \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                  \\<Gamma>\\<turnstile>the\n (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                  (\\<exists>cs css.\n                      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n      Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n     (While b c # cs, css,\n      Normal\n       t))}),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n          c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule allI, rule ConseqMGT [OF hyp_c])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' s.\n       s \\<in> {\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b \\<Longrightarrow>\n       s \\<in> {sa.\n                sa = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           sa\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal sa))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n           t \\<in> {t. (t, \\<sigma>')\n                       \\<in> {(t, s).\n                              \\<Gamma>\\<turnstile>While b\n             c \\<down> Normal s \\<and>\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                   {t. (Z, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (Z, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "fix \\<tau> s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' s.\n       s \\<in> {\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b \\<Longrightarrow>\n       s \\<in> {sa.\n                sa = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           sa\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal sa))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n           t \\<in> {t. (t, \\<sigma>')\n                       \\<in> {(t, s).\n                              \\<Gamma>\\<turnstile>While b\n             c \\<down> Normal s \\<and>\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                   {t. (Z, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (Z, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "assume  asm: \"s\\<in> {\\<tau>} \\<inter>\n                   {t. (Z, t) \\<in> ?unroll \\<and>\n                      (\\<forall>e. (Z,e)\\<in>?unroll \\<longrightarrow> e\\<in>b\n                           \\<longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                               (\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>Abrupt u \\<longrightarrow>\n                                    \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                     \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (While b c#cs,css,Normal t))}\n                   \\<inter> b\""], ["proof (state)\nthis:\n  s \\<in> {\\<tau>} \\<inter>\n          {t. (Z, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (Z, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))} \\<inter>\n          b\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' s.\n       s \\<in> {\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b \\<Longrightarrow>\n       s \\<in> {sa.\n                sa = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           sa\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal sa))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n           t \\<in> {t. (t, \\<sigma>')\n                       \\<in> {(t, s).\n                              \\<Gamma>\\<turnstile>While b\n             c \\<down> Normal s \\<and>\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                   {t. (Z, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (Z, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "then"], ["proof (chain)\npicking this:\n  s \\<in> {\\<tau>} \\<inter>\n          {t. (Z, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (Z, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))} \\<inter>\n          b", "obtain cs css where\n          s_eq_\\<tau>: \"s=\\<tau>\" and\n          Z_s_unroll: \"(Z,s) \\<in> ?unroll\" and\n          noabort:\"\\<forall>e. (Z,e)\\<in>?unroll \\<longrightarrow> e\\<in>b\n                        \\<longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                            (\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>Abrupt u \\<longrightarrow>\n                                  \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\" and\n          termi:  \"\\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\" and\n          reach: \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                    (While b c#cs,css,Normal s)\"and\n          s_in_b: \"s\\<in>b\""], ["proof (prove)\nusing this:\n  s \\<in> {\\<tau>} \\<inter>\n          {t. (Z, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (Z, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))} \\<inter>\n          b\n\ngoal (1 subgoal):\n 1. (\\<And>cs css.\n        \\<lbrakk>s = \\<tau>;\n         (Z, s)\n         \\<in> {(s, t).\n                s \\<in> b \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n         \\<forall>e.\n            (Z, e)\n            \\<in> {(s, t).\n                   s \\<in> b \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n            e \\<in> b \\<longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n            (\\<forall>u.\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>While b\n         c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u);\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                               Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                              (While b c # cs, css, Normal s);\n         s \\<in> b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s = \\<tau>\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal s)\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' s.\n       s \\<in> {\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b \\<Longrightarrow>\n       s \\<in> {sa.\n                sa = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           sa\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal sa))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n           t \\<in> {t. (t, \\<sigma>')\n                       \\<in> {(t, s).\n                              \\<Gamma>\\<turnstile>While b\n             c \\<down> Normal s \\<and>\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                   {t. (Z, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (Z, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "have reach_c:\n          \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#While b c#cs,css,Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (c # While b c # cs, css, Normal s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (c # While b c # cs, css, Normal s)", "note reach"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (c # While b c # cs, css, Normal s)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (c # While b c # cs, css, Normal s)", "from s_in_b"], ["proof (chain)\npicking this:\n  s \\<in> b", "have \"\\<Gamma>\\<turnstile>(While b c#cs,css,Normal s)\\<rightarrow>\n                  (c#While b c#cs,css,Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c # cs, css, Normal s) \\<rightarrow>\n                         (c # While b c # cs, css, Normal s)", "by (rule step.WhileTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c # cs, css, Normal s) \\<rightarrow>\n                       (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (c # While b c # cs, css, Normal s)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (c # While b c # cs, css, Normal s)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' s.\n       s \\<in> {\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b \\<Longrightarrow>\n       s \\<in> {sa.\n                sa = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           sa\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal sa))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n           t \\<in> {t. (t, \\<sigma>')\n                       \\<in> {(t, s).\n                              \\<Gamma>\\<turnstile>While b\n             c \\<down> Normal s \\<and>\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                   {t. (Z, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (Z, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "from reach termi"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal s)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>", "have\n          termi_while: \"\\<Gamma>\\<turnstile>While b c \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal s)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "by (rule steps_preserves_termination)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' s.\n       s \\<in> {\\<sigma>'} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               b \\<Longrightarrow>\n       s \\<in> {sa.\n                sa = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           sa\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal sa))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n           t \\<in> {t. (t, \\<sigma>')\n                       \\<in> {(t, s).\n                              \\<Gamma>\\<turnstile>While b\n             c \\<down> Normal s \\<and>\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                   {t. (Z, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (Z, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "show \"s \\<in> {t. t = s \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal t\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                      \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#cs,css,Normal t))} \\<and>\n        (\\<forall>t. t \\<in> {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n             t \\<in> {t. (t,\\<tau>) \\<in> ?r} \\<inter>\n                 {t. (Z, t) \\<in> ?unroll \\<and>\n                     (\\<forall>e. (Z,e)\\<in>?unroll \\<longrightarrow>  e\\<in>b\n                           \\<longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                              (\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>Abrupt u \\<longrightarrow>\n                                  \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                      \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                    (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (While b c # cs,css,Normal t))}) \\<and>\n         (\\<forall>t. t \\<in> {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n             t \\<in> {t. \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})\"\n          (is \"?C1 \\<and> ?C2 \\<and> ?C3\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {t. t = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal t))} \\<and>\n    (\\<forall>t.\n        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n        t \\<in> {t. (t, \\<tau>)\n                    \\<in> {(t, s).\n                           \\<Gamma>\\<turnstile>While b\n          c \\<down> Normal s \\<and>\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n                {t. (Z, t)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                    (\\<forall>e.\n                        (Z, e)\n                        \\<in> {(s, t).\n                               s \\<in> b \\<and>\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          s\\<rangle> \\<Rightarrow> Normal\n              t}\\<^sup>* \\<longrightarrow>\n                        e \\<in> b \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n             Fault ` (- F) \\<and>\n                        (\\<forall>u.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                            \\<Gamma>\\<turnstile> \\<langle>While b\n                     c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                    \\<Gamma>\\<turnstile>the\n   (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                    (\\<exists>cs css.\n                        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n       (While b c # cs, css, Normal t))}) \\<and>\n    (\\<forall>t.\n        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. s \\<in> {t. t = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from Z_s_unroll noabort s_in_b termi reach_c"], ["proof (chain)\npicking this:\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  s \\<in> b\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)", "show ?C1"], ["proof (prove)\nusing this:\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  s \\<in> b\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. s \\<in> {t. t = s \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal t))}", "by blast"], ["proof (state)\nthis:\n  s \\<in> {t. t = s \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (c # cs, css, Normal t))}\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume s_t: \"\\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "with s_eq_\\<tau> termi_while s_in_b"], ["proof (chain)\npicking this:\n  s = \\<tau>\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t", "have \"(t,\\<tau>) \\<in> ?r\""], ["proof (prove)\nusing this:\n  s = \\<tau>\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. (t, \\<tau>)\n    \\<in> {(t, s).\n           \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n           s \\<in> b \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> Normal t}", "by blast"], ["proof (state)\nthis:\n  (t, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "moreover"], ["proof (state)\nthis:\n  (t, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from Z_s_unroll s_t s_in_b"], ["proof (chain)\npicking this:\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t\n  s \\<in> b", "have \"(Z, t) \\<in> ?unroll\""], ["proof (prove)\nusing this:\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. (Z, t)\n    \\<in> {(s, t).\n           s \\<in> b \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*", "by (blast intro: rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "moreover"], ["proof (state)\nthis:\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (While b c#cs,css,Normal t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "note reach_c"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # While b c # cs, css, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "from s_t"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t", "have \"\\<Gamma>\\<turnstile>(c#While b c#cs,css,Normal s)\\<rightarrow>\\<^sup>*\n                      (While b c#cs,css, Normal t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c # While b c # cs, css,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "by (rule exec_impl_steps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c # While b c # cs, css,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                         (While b c # cs, css, Normal t)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "note noabort termi"], ["proof (state)\nthis:\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "ultimately"], ["proof (chain)\npicking this:\n  (t, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>", "have \"(t,\\<tau>) \\<in> ?r \\<and> (Z, t) \\<in> ?unroll \\<and>\n                  (\\<forall>e. (Z,e)\\<in>?unroll \\<longrightarrow> e\\<in>b\n                        \\<longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                            (\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>Abrupt u \\<longrightarrow>\n                                  \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                    (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (While b c # cs,css, Normal t))\""], ["proof (prove)\nusing this:\n  (t, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (While b c # cs, css, Normal t)\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (1 subgoal):\n 1. (t, \\<tau>)\n    \\<in> {(t, s).\n           \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n           s \\<in> b \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> Normal t} \\<and>\n    (Z, t)\n    \\<in> {(s, t).\n           s \\<in> b \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n    (\\<forall>e.\n        (Z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n        e \\<in> b \\<longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        (\\<forall>u.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>While b\n     c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n    \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n    (\\<exists>cs css.\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (While b c # cs, css, Normal t))", "by iprover"], ["proof (state)\nthis:\n  (t, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t} \\<and>\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n  (\\<forall>e.\n      (Z, e)\n      \\<in> {(s, t).\n             s \\<in> b \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n        s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n      e \\<in> b \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n      (\\<forall>u.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n  (\\<exists>cs css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                           (While b c # cs, css, Normal t))\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow> Normal\n                       ?t2 \\<Longrightarrow>\n  (?t2, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t} \\<and>\n  (Z, ?t2)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n  (\\<forall>e.\n      (Z, e)\n      \\<in> {(s, t).\n             s \\<in> b \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n        s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n      e \\<in> b \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n      (\\<forall>u.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n  (\\<exists>cs css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                           (While b c # cs, css, Normal ?t2))\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow> Normal\n                       ?t2 \\<Longrightarrow>\n  (?t2, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t} \\<and>\n  (Z, ?t2)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n  (\\<forall>e.\n      (Z, e)\n      \\<in> {(s, t).\n             s \\<in> b \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n        s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n      e \\<in> b \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n      (\\<forall>u.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n  (\\<exists>cs css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                           (While b c # cs, css, Normal ?t2))", "show ?C2"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow> Normal\n                       ?t2 \\<Longrightarrow>\n  (?t2, \\<tau>)\n  \\<in> {(t, s).\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t} \\<and>\n  (Z, ?t2)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n  (\\<forall>e.\n      (Z, e)\n      \\<in> {(s, t).\n             s \\<in> b \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n        s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n      e \\<in> b \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n      (\\<forall>u.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n  (\\<exists>cs css.\n      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                           (While b c # cs, css, Normal ?t2))\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n       t \\<in> {t. (t, \\<tau>)\n                   \\<in> {(t, s).\n                          \\<Gamma>\\<turnstile>While b\n         c \\<down> Normal s \\<and>\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n               {t. (Z, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (Z, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))}", "by blast"], ["proof (state)\nthis:\n  \\<forall>t.\n     t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n     t \\<in> {t. (t, \\<tau>)\n                 \\<in> {(t, s).\n                        \\<Gamma>\\<turnstile>While b\n       c \\<down> Normal s \\<and>\n                        s \\<in> b \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n             {t. (Z, t)\n                 \\<in> {(s, t).\n                        s \\<in> b \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                 (\\<forall>e.\n                     (Z, e)\n                     \\<in> {(s, t).\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal\n           t}\\<^sup>* \\<longrightarrow>\n                     e \\<in> b \\<longrightarrow>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n          Fault ` (- F) \\<and>\n                     (\\<forall>u.\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                         \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                 \\<Gamma>\\<turnstile>the\n(\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                 (\\<exists>cs css.\n                     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n    (While b c # cs, css, Normal t))}\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume s_t:  \"\\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from Z_s_unroll noabort s_t s_in_b"], ["proof (chain)\npicking this:\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Abrupt t\n  s \\<in> b", "have \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  (Z, s)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  \\<forall>e.\n     (Z, e)\n     \\<in> {(s, t).\n            s \\<in> b \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n     e \\<in> b \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n     (\\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> Abrupt t\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow> Abrupt\n                       ?t2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow> Abrupt ?t2\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "thus ?C3"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow> Abrupt\n                       ?t2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow> Abrupt ?t2\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by simp"], ["proof (state)\nthis:\n  \\<forall>t.\n     t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n     t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n          c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<in> {t. t = s \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (c # cs, css, Normal t))} \\<and>\n  (\\<forall>t.\n      t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             s\\<rangle> \\<Rightarrow> Normal t} \\<longrightarrow>\n      t \\<in> {t. (t, \\<tau>)\n                  \\<in> {(t, s).\n                         \\<Gamma>\\<turnstile>While b\n        c \\<down> Normal s \\<and>\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n              {t. (Z, t)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                  (\\<forall>e.\n                      (Z, e)\n                      \\<in> {(s, t).\n                             s \\<in> b \\<and>\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> Normal\n            t}\\<^sup>* \\<longrightarrow>\n                      e \\<in> b \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                  \\<Gamma>\\<turnstile>the\n (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                  (\\<exists>cs css.\n                      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n      Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n     (While b c # cs, css, Normal t))}) \\<and>\n  (\\<forall>t.\n      t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n      t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n           c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>'.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>'} \\<inter>\n          {t. (Z, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (Z, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))} \\<inter>\n          b)\n         c ({t. (t, \\<sigma>')\n                \\<in> {(t, s).\n                       \\<Gamma>\\<turnstile>While b c \\<down> Normal s \\<and>\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}} \\<inter>\n            {t. (Z, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (Z, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css,\n    Normal\n     t))}),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n        c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n          (Z, t)\n          \\<in> {(s, t).\n                 s \\<in> b \\<and>\n                 \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n          (\\<forall>e.\n              (Z, e)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<longrightarrow>\n              e \\<in> b \\<longrightarrow>\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n              (\\<forall>u.\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>While b\n           c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (While b c # cs, css, Normal t))}\n         While b c\n         ({t. (Z, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (Z, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))} \\<inter>\n          - b),{t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "assume P: \"s \\<in> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>While b c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                       \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                   (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (While b c#cs,css,Normal s))}\""], ["proof (state)\nthis:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "hence WhileNoFault: \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {s. s = Z \\<and>\n                   \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal s))} \\<Longrightarrow>\n       s \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<and>\n       (\\<forall>t.\n           t \\<in> {t. (s, t)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                       (\\<forall>e.\n                           (s, e)\n                           \\<in> {(s, t).\n                                  s \\<in> b \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                             s\\<rangle> \\<Rightarrow> Normal\n                 t}\\<^sup>* \\<longrightarrow>\n                           e \\<in> b \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                           (\\<forall>u.\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          e\\<rangle> \\<Rightarrow> Abrupt\n              u \\<longrightarrow>\n                               \\<Gamma>\\<turnstile> \\<langle>While b\n                        c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (While b c # cs, css, Normal t))} \\<inter>\n                   - b \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n       (\\<forall>t.\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n           t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "show \"s \\<in> ?P' s \\<and>\n     (\\<forall>t. t\\<in>(?P' s \\<inter> - b)\\<longrightarrow>\n          t\\<in>{t. \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Normal t})\\<and>\n     (\\<forall>t. t\\<in>?A s \\<longrightarrow> t\\<in>?A Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))} \\<and>\n    (\\<forall>t.\n        t \\<in> {t. (s, t)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                    (\\<forall>e.\n                        (s, e)\n                        \\<in> {(s, t).\n                               s \\<in> b \\<and>\n                               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                          s\\<rangle> \\<Rightarrow> Normal\n              t}\\<^sup>* \\<longrightarrow>\n                        e \\<in> b \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n             Fault ` (- F) \\<and>\n                        (\\<forall>u.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                            \\<Gamma>\\<turnstile> \\<langle>While b\n                     c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                    \\<Gamma>\\<turnstile>the\n   (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                    (\\<exists>cs css.\n                        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n       (While b c # cs, css, Normal t))} \\<inter>\n                - b \\<longrightarrow>\n        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n    (\\<forall>t.\n        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n        t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "fix e"], ["proof (state)\ngoal (3 subgoals):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume \"(Z,e) \\<in> ?unroll\" \"e \\<in> b\""], ["proof (state)\nthis:\n  (Z, e)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  e \\<in> b\n\ngoal (3 subgoals):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from this WhileNoFault"], ["proof (chain)\npicking this:\n  (Z, e)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  e \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)", "have \"\\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n               (\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>Abrupt u \\<longrightarrow>\n                    \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\" (is \"?Prop Z e\")"], ["proof (prove)\nusing this:\n  (Z, e)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n  e \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F) \\<and>\n    (\\<forall>u.\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)", "proof (induct rule: converse_rtrancl_induct [consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume e_in_b: \"e \\<in> b\""], ["proof (state)\nthis:\n  e \\<in> b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume WhileNoFault: \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "with e_in_b WhileNoFault"], ["proof (chain)\npicking this:\n  e \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)", "have cNoFault: \"\\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  e \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "{"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume \"\\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "with e_in_b"], ["proof (chain)\npicking this:\n  e \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u", "have \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\""], ["proof (prove)\nusing this:\n  e \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\ne\\<rangle> \\<Rightarrow> Abrupt u", "by (blast intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow> Abrupt\n                       ?u2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow> Abrupt ?u2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> b;\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow> Abrupt\n                       ?u2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow> Abrupt ?u2", "show \"?Prop e e\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow> Abrupt\n                       ?u2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    e\\<rangle> \\<Rightarrow> Abrupt ?u2\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F) \\<and>\n    (\\<forall>u.\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal e\\<rangle> \\<Rightarrow> Abrupt u)", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F) \\<and>\n  (\\<forall>u.\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,Normal\n  e\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "fix Z r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume e_in_b: \"e\\<in>b\""], ["proof (state)\nthis:\n  e \\<in> b\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume WhileNoFault: \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume hyp: \"\\<lbrakk>e\\<in>b;\\<Gamma>\\<turnstile>\\<langle>While b c,Normal r\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\\<rbrakk>\n                       \\<Longrightarrow> ?Prop r e\""], ["proof (state)\nthis:\n  \\<lbrakk>e \\<in> b;\n   \\<Gamma>\\<turnstile> \\<langle>While b\n                                  c,Normal\n                                     r\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal r\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume Z_r:\n            \"(Z, r) \\<in> {(Z, r). Z \\<in> b \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r}\""], ["proof (state)\nthis:\n  (Z, r)\n  \\<in> {(Z, r).\n         Z \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    Z\\<rangle> \\<Rightarrow> Normal r}\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "with WhileNoFault"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  (Z, r)\n  \\<in> {(Z, r).\n         Z \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    Z\\<rangle> \\<Rightarrow> Normal r}", "have \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal r\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  (Z, r)\n  \\<in> {(Z, r).\n         Z \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    Z\\<rangle> \\<Rightarrow> Normal r}\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nr\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    r\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "from hyp [OF e_in_b this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F) \\<and>\n  (\\<forall>u.\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,Normal\n  r\\<rangle> \\<Rightarrow> Abrupt u)", "obtain\n            cNoFault: \"\\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\" and\n            Abrupt_r: \"\\<forall>u. \\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                            \\<Gamma>\\<turnstile>\\<langle>While b c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F) \\<and>\n  (\\<forall>u.\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,Normal\n  r\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n         e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n      \\<forall>u.\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n  \\<forall>u.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n r\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "{"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n  \\<forall>u.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n r\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "assume \"\\<Gamma>\\<turnstile>\\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "with Abrupt_r"], ["proof (chain)\npicking this:\n  \\<forall>u.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n r\\<rangle> \\<Rightarrow> Abrupt u\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u", "have \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\""], ["proof (prove)\nusing this:\n  \\<forall>u.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ne\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>While b\n                                    c,Normal\n r\\<rangle> \\<Rightarrow> Abrupt u\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal e\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nr\\<rangle> \\<Rightarrow> Abrupt u", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "from  Z_r"], ["proof (chain)\npicking this:\n  (Z, r)\n  \\<in> {(Z, r).\n         Z \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    Z\\<rangle> \\<Rightarrow> Normal r}", "obtain\n              \"Z \\<in> b\"  \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\""], ["proof (prove)\nusing this:\n  (Z, r)\n  \\<in> {(Z, r).\n         Z \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    Z\\<rangle> \\<Rightarrow> Normal r}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>Z \\<in> b;\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n Z\\<rangle> \\<Rightarrow> Normal r\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r", "have \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Abrupt u\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt u", "by (blast intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow> Abrupt\n                       ?u2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow> Abrupt ?u2\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, e)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<lbrakk>e \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal\n     z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F) \\<and>\n                          (\\<forall>u.\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                              \\<Gamma>\\<turnstile> \\<langle>While b\n                       c,Normal z\\<rangle> \\<Rightarrow> Abrupt u);\n        e \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal\n    y\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                         (\\<forall>u.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                             \\<Gamma>\\<turnstile> \\<langle>While b\n                      c,Normal y\\<rangle> \\<Rightarrow> Abrupt u)", "with cNoFault"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow> Abrupt\n                       ?u2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow> Abrupt ?u2", "show \"?Prop Z e\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow> Abrupt\n                       ?u2 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow> Abrupt ?u2\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F) \\<and>\n    (\\<forall>u.\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F) \\<and>\n  (\\<forall>u.\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F) \\<and>\n  (\\<forall>u.\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n      \\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal (3 subgoals):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(Z, ?e2)\n           \\<in> {(s, t).\n                  s \\<in> b \\<and>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n   ?e2 \\<in> b\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               ?e2\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   ?e2\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal (3 subgoals):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}\n 2. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 3. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "with P"], ["proof (chain)\npicking this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n  \\<lbrakk>(Z, ?e2)\n           \\<in> {(s, t).\n                  s \\<in> b \\<and>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n   ?e2 \\<in> b\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               ?e2\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   ?e2\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)", "show \"s \\<in> ?P' s\""], ["proof (prove)\nusing this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n  \\<lbrakk>(Z, ?e2)\n           \\<in> {(s, t).\n                  s \\<in> b \\<and>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n   ?e2 \\<in> b\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               ?e2\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   ?e2\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt u)\n\ngoal (1 subgoal):\n 1. s \\<in> {t. (s, t)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                (\\<forall>e.\n                    (s, e)\n                    \\<in> {(s, t).\n                           s \\<in> b \\<and>\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      s\\<rangle> \\<Rightarrow> Normal\n          t}\\<^sup>* \\<longrightarrow>\n                    e \\<in> b \\<longrightarrow>\n                    \\<Gamma>\\<turnstile> \\<langle>c,Normal\n               e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                    (\\<forall>u.\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                        \\<Gamma>\\<turnstile> \\<langle>While b\n                 c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (While b c # cs, css, Normal t))}", "by blast"], ["proof (state)\nthis:\n  s \\<in> {t. (s, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (s, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))}\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume \"termination\": \"t \\<notin> b\""], ["proof (state)\nthis:\n  t \\<notin> b\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume \"(Z, t) \\<in> ?unroll\""], ["proof (state)\nthis:\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "hence \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  (Z, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "proof (induct rule: converse_rtrancl_induct [consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nt\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "from \"termination\""], ["proof (chain)\npicking this:\n  t \\<notin> b", "show \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal t\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  t \\<notin> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nt\\<rangle> \\<Rightarrow> Normal t", "by (blast intro: exec.WhileFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal t\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "fix Z r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "assume first_body:\n                 \"(Z, r) \\<in> {(s, t). s \\<in> b \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal t}\""], ["proof (state)\nthis:\n  (Z, r)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "assume \"(r, t) \\<in> ?unroll\""], ["proof (state)\nthis:\n  (r, t)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "assume rest_loop: \"\\<Gamma>\\<turnstile>\\<langle>While b c, Normal r\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z)\n                \\<in> {(s, t).\n                       s \\<in> b \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  s\\<rangle> \\<Rightarrow> Normal t};\n        (z, t)\n        \\<in> {(s, t).\n               s \\<in> b \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal y\\<rangle> \\<Rightarrow> Normal t", "show \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "from first_body"], ["proof (chain)\npicking this:\n  (Z, r)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}", "obtain\n              \"Z \\<in> b\" \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\""], ["proof (prove)\nusing this:\n  (Z, r)\n  \\<in> {(s, t).\n         s \\<in> b \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow> Normal t}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>Z \\<in> b;\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n Z\\<rangle> \\<Rightarrow> Normal r\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "moreover"], ["proof (state)\nthis:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "from rest_loop"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Normal t", "have\n              \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal r\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nr\\<rangle> \\<Rightarrow> Normal t", "by fast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "ultimately"], ["proof (chain)\npicking this:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Normal t", "show \"\\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  Z \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal r\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal r\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "by (rule exec.WhileTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?t2 \\<notin> b;\n   (Z, ?t2)\n   \\<in> {(s, t).\n          s \\<in> b \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Normal ?t2\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n 2. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "with P"], ["proof (chain)\npicking this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n  \\<lbrakk>?t2 \\<notin> b;\n   (Z, ?t2)\n   \\<in> {(s, t).\n          s \\<in> b \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Normal ?t2", "show \"\\<forall>t. t\\<in>(?P' s \\<inter> - b)\n            \\<longrightarrow>t\\<in>{t. \\<Gamma>\\<turnstile>\\<langle>While b c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\""], ["proof (prove)\nusing this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n  \\<lbrakk>?t2 \\<notin> b;\n   (Z, ?t2)\n   \\<in> {(s, t).\n          s \\<in> b \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n             c,Normal Z\\<rangle> \\<Rightarrow> Normal ?t2\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. (s, t)\n                   \\<in> {(s, t).\n                          s \\<in> b \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                   (\\<forall>e.\n                       (s, e)\n                       \\<in> {(s, t).\n                              s \\<in> b \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                         s\\<rangle> \\<Rightarrow> Normal\n             t}\\<^sup>* \\<longrightarrow>\n                       e \\<in> b \\<longrightarrow>\n                       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                  e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                       (\\<forall>u.\n                           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                      e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                           \\<Gamma>\\<turnstile> \\<langle>While b\n                    c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                   \\<Gamma>\\<turnstile>the\n  (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                   (\\<exists>cs css.\n                       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n       Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n      (While b c # cs, css, Normal t))} \\<inter>\n               - b \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Normal t}", "by blast"], ["proof (state)\nthis:\n  \\<forall>t.\n     t \\<in> {t. (s, t)\n                 \\<in> {(s, t).\n                        s \\<in> b \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                   s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                 (\\<forall>e.\n                     (s, e)\n                     \\<in> {(s, t).\n                            s \\<in> b \\<and>\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> Normal\n           t}\\<^sup>* \\<longrightarrow>\n                     e \\<in> b \\<longrightarrow>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n          Fault ` (- F) \\<and>\n                     (\\<forall>u.\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                         \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                 \\<Gamma>\\<turnstile>the\n(\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                 (\\<exists>cs css.\n                     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n    (While b c # cs, css, Normal t))} \\<inter>\n             - b \\<longrightarrow>\n     t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n          c,Normal Z\\<rangle> \\<Rightarrow> Normal t}\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from P"], ["proof (chain)\npicking this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}", "show \"\\<forall>t. t\\<in>?A s \\<longrightarrow> t\\<in>?A Z\""], ["proof (prove)\nusing this:\n  s \\<in> {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>While b\n       c,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal s))}\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n       t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n            c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by simp"], ["proof (state)\nthis:\n  \\<forall>t.\n     t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n          c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n     t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n          c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<in> {t. (s, t)\n              \\<in> {(s, t).\n                     s \\<in> b \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n              (\\<forall>e.\n                  (s, e)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal\n        t}\\<^sup>* \\<longrightarrow>\n                  e \\<in> b \\<longrightarrow>\n                  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n             e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n                  (\\<forall>u.\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>While b\n               c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma>\n  p) \\<down> Normal \\<sigma> \\<and>\n              (\\<exists>cs css.\n                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n (While b c # cs, css, Normal t))} \\<and>\n  (\\<forall>t.\n      t \\<in> {t. (s, t)\n                  \\<in> {(s, t).\n                         s \\<in> b \\<and>\n                         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    s\\<rangle> \\<Rightarrow> Normal t}\\<^sup>* \\<and>\n                  (\\<forall>e.\n                      (s, e)\n                      \\<in> {(s, t).\n                             s \\<in> b \\<and>\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> Normal\n            t}\\<^sup>* \\<longrightarrow>\n                      e \\<in> b \\<longrightarrow>\n                      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 e\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                      (\\<forall>u.\n                          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                     e\\<rangle> \\<Rightarrow> Abrupt u \\<longrightarrow>\n                          \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> Abrupt u)) \\<and>\n                  \\<Gamma>\\<turnstile>the\n (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                  (\\<exists>cs css.\n                      \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n      Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n     (While b c # cs, css, Normal t))} \\<inter>\n              - b \\<longrightarrow>\n      t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n           c,Normal Z\\<rangle> \\<Rightarrow> Normal t}) \\<and>\n  (\\<forall>t.\n      t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n           c,Normal s\\<rangle> \\<Rightarrow> Abrupt t} \\<longrightarrow>\n      t \\<in> {t. \\<Gamma>\\<turnstile> \\<langle>While b\n           c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>While b\nc,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (While b c # cs, css, Normal s))}\n      While b c\n      {t. \\<Gamma>\\<turnstile> \\<langle>While b\n   c,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>While b\n                                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (5 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Call q)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "let ?P = \"{s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q ,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n               \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n              (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                  (Call q # cs,css,Normal s))}\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from noStuck_Call"], ["proof (chain)\npicking this:\n  ?\\<Gamma>\\<turnstile> \\<langle>Call\n                                  ?p,Normal\n?s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  ?p \\<in> dom ?\\<Gamma>", "have \"\\<forall>s \\<in> ?P. q \\<in> dom \\<Gamma>\""], ["proof (prove)\nusing this:\n  ?\\<Gamma>\\<turnstile> \\<langle>Call\n                                  ?p,Normal\n?s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  ?p \\<in> dom ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>{s. s = Z \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>Call\n                q,Normal\n                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n             Fault ` (- F) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (Call q # cs, css, Normal s))}.\n       q \\<in> dom \\<Gamma>", "by (fastforce simp add: final_notin_def)"], ["proof (state)\nthis:\n  \\<forall>s\\<in>{s. s = Z \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>Call\n              q,Normal\n                 s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                     \\<Gamma>\\<turnstile>the\n    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css.\n                         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n        (Call q # cs, css, Normal s))}.\n     q \\<in> dom \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>x Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Call x # cs, css, Normal s))}\n           Call x\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 5. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "then"], ["proof (chain)\npicking this:\n  \\<forall>s\\<in>{s. s = Z \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>Call\n              q,Normal\n                 s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                     \\<Gamma>\\<turnstile>the\n    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css.\n                         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n        (Call q # cs, css, Normal s))}.\n     q \\<in> dom \\<Gamma>", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>{s. s = Z \\<and>\n                     \\<Gamma>\\<turnstile> \\<langle>Call\n              q,Normal\n                 s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n           Fault ` (- F) \\<and>\n                     \\<Gamma>\\<turnstile>the\n    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                     (\\<exists>cs css.\n                         \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n        (Call q # cs, css, Normal s))}.\n     q \\<in> dom \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Call q # cs, css, Normal s))}\n        Call q\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule conseq_extract_state_indep_prop)"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<in> dom \\<Gamma> \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Call q # cs, css, Normal s))}\n        Call q\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume q_defined: \"q \\<in> dom \\<Gamma>\""], ["proof (state)\nthis:\n  q \\<in> dom \\<Gamma>\n\ngoal (1 subgoal):\n 1. q \\<in> dom \\<Gamma> \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Call q # cs, css, Normal s))}\n        Call q\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from Call_hyp"], ["proof (chain)\npicking this:\n  \\<forall>q\\<in>dom \\<Gamma>.\n     \\<forall>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n             ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n            Call q\n            {t. \\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Call\nq,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have\n      \"\\<forall>q\\<in>dom \\<Gamma>. \\<forall>Z.\n        \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>{s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> q),Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                        \\<Gamma>\\<turnstile>(the (\\<Gamma> q))\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> q),Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> q),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>dom \\<Gamma>.\n     \\<forall>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n             ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n            Call q\n            {t. \\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Call\nq,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>the\n        (\\<Gamma>\n          q),Normal\n              s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n        Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>the (\\<Gamma> q) \\<down> Normal s \\<and>\n               ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n              Call q\n              {t. \\<Gamma>\\<turnstile> \\<langle>the\n           (\\<Gamma>\n             q),Normal\n                 Z\\<rangle> \\<Rightarrow> Normal\n     t},{t. \\<Gamma>\\<turnstile> \\<langle>the\n     (\\<Gamma> q),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (simp add: exec_Call_body' noFaultStuck_Call_body' [simplified]\n         terminates_Normal_Call_body)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>dom \\<Gamma>.\n     \\<forall>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>the\n      (\\<Gamma>\n        q),Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma> q) \\<down> Normal s \\<and>\n             ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n            Call q\n            {t. \\<Gamma>\\<turnstile> \\<langle>the\n         (\\<Gamma>\n           q),Normal\n               Z\\<rangle> \\<Rightarrow> Normal\n   t},{t. \\<Gamma>\\<turnstile> \\<langle>the\n   (\\<Gamma> q),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. q \\<in> dom \\<Gamma> \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Call q # cs, css, Normal s))}\n        Call q\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from Call_hyp q_defined"], ["proof (chain)\npicking this:\n  \\<forall>q\\<in>dom \\<Gamma>.\n     \\<forall>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n             ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n            Call q\n            {t. \\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Call\nq,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n  q \\<in> dom \\<Gamma>", "have Call_hyp':\n    \"\\<forall>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                     \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                  (Call q)\n                 {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                 {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>dom \\<Gamma>.\n     \\<forall>Z.\n        \\<Gamma>,\\<Theta>\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n             ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n            Call q\n            {t. \\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Call\nq,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n  q \\<in> dom \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n            ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n           Call q\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        q,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  q,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "by auto"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>Call\n   q,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n          ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n         Call q\n         {t. \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal\n         Z\\<rangle> \\<Rightarrow> Normal\n                                   t},{t.\n \\<Gamma>\\<turnstile> \\<langle>Call\n                                q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. q \\<in> dom \\<Gamma> \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Call q # cs, css, Normal s))}\n        Call q\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show\n     \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ?P\n           (Call q)\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call q ,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call q ,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Call q # cs, css, Normal s))}\n        Call q\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF Call_hyp'],safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "fix cs css"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "assume\n        \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>)\\<rightarrow>\\<^sup>* (Call q # cs,css,Normal Z)\"\n        \"\\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Call q # cs, css, Normal Z)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "hence \"\\<Gamma>\\<turnstile>Call q \\<down> Normal Z\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Call q # cs, css, Normal Z)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Call q \\<down> Normal Z", "by (rule steps_preserves_termination)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n\ngoal (2 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "with q_defined"], ["proof (chain)\npicking this:\n  q \\<in> dom \\<Gamma>\n  \\<Gamma>\\<turnstile>Call q \\<down> Normal Z", "show \"\\<Gamma>\\<turnstile>Call q \\<down> Normal Z\""], ["proof (prove)\nusing this:\n  q \\<in> dom \\<Gamma>\n  \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Call q \\<down> Normal Z", "by (auto elim: terminates_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Call q \\<down> Normal Z\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "fix cs css"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "assume reach:\n        \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Call q#cs,css,Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Call q # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Call q # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "have \"\\<Gamma>\\<turnstile>(Call q # cs,css, Normal Z) \\<rightarrow>\n                        ([the (\\<Gamma> q)],(cs,Throw#cs)#css, Normal Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call q # cs, css, Normal Z) \\<rightarrow>\n                         ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                          Normal Z)", "by (rule step.Call) (insert q_defined,auto)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call q # cs, css, Normal Z) \\<rightarrow>\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Call q # cs, css, Normal Z)\n  \\<Gamma>\\<turnstile> (Call q # cs, css, Normal Z) \\<rightarrow>\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)", "have \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>+ ([the (\\<Gamma> q)],(cs,Throw#cs)#css,Normal Z)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Call q # cs, css, Normal Z)\n  \\<Gamma>\\<turnstile> (Call q # cs, css, Normal Z) \\<rightarrow>\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                          Normal \\<sigma>) \\<rightarrow>\\<^sup>+\n                         ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                          Normal Z)", "by (rule rtranclp_into_tranclp1)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "assume termi: \"\\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Call\n         q,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Call q # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> ((Z, q), \\<sigma>, p)\n                         \\<in> termi_call_steps \\<Gamma>", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>", "show \"((Z,q), \\<sigma>,p) \\<in> termi_call_steps \\<Gamma>\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>+\n                       ([the (\\<Gamma> q)], (cs, Throw # cs) # css,\n                        Normal Z)\n  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>\n\ngoal (1 subgoal):\n 1. ((Z, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>", "by (auto simp add: termi_call_steps_def)"], ["proof (state)\nthis:\n  ((Z, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Call\nq,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Call q # cs, css, Normal s))}\n      Call q\n      {t. \\<Gamma>\\<turnstile> \\<langle>Call\n   q,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                                q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Call\nq,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Call q # cs, css, Normal s))}\n      Call q\n      {t. \\<Gamma>\\<turnstile> \\<langle>Call\n   q,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                                q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (4 subgoals):\n 1. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (DynCom c)"], ["proof (state)\nthis:\n  ?xa \\<in> range c \\<Longrightarrow>\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>?xa,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (?xa # cs, css, Normal s))}\n      ?xa\n      {t. \\<Gamma>\\<turnstile> \\<langle>?xa,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>?xa,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (4 subgoals):\n 1. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp:\n    \"\\<And>s'. \\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n      {s. s = Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c s',Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c s'#cs,css,Normal s))}\n        (c s')\n       {t. \\<Gamma>\\<turnstile>\\<langle>c s',Normal Z\\<rangle> \\<Rightarrow> Normal t},{t. \\<Gamma>\\<turnstile>\\<langle>c s',Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<forall>Z.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c\n        s',Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>the (\\<Gamma>\n   p) \\<down> Normal \\<sigma> \\<and>\n               (\\<exists>cs css.\n                   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n  (c s' # cs, css, Normal s))}\n              c s'\n              {t. \\<Gamma>\\<turnstile> \\<langle>c\n           s',Normal\n               Z\\<rangle> \\<Rightarrow> Normal\n   t},{t. \\<Gamma>\\<turnstile> \\<langle>c\n   s',Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "using DynCom"], ["proof (prove)\nusing this:\n  ?xa \\<in> range c \\<Longrightarrow>\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>?xa,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (?xa # cs, css, Normal s))}\n      ?xa\n      {t. \\<Gamma>\\<turnstile> \\<langle>?xa,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>?xa,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<forall>Z.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>c\n        s',Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>the (\\<Gamma>\n   p) \\<down> Normal \\<sigma> \\<and>\n               (\\<exists>cs css.\n                   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n  (c s' # cs, css, Normal s))}\n              c s'\n              {t. \\<Gamma>\\<turnstile> \\<langle>c\n           s',Normal\n               Z\\<rangle> \\<Rightarrow> Normal\n   t},{t. \\<Gamma>\\<turnstile> \\<langle>c\n   s',Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by simp"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c\n   ?s',Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c ?s' # cs, css, Normal s))}\n         c ?s'\n         {t. \\<Gamma>\\<turnstile> \\<langle>c\n      ?s',Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>c ?s',Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (4 subgoals):\n 1. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp':\n    \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>DynCom c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                 \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n               (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (DynCom c#cs,css,Normal s))}\n        (c Z)\n       {t. \\<Gamma>\\<turnstile>\\<langle>DynCom c,Normal Z\\<rangle> \\<Rightarrow> Normal t},{t. \\<Gamma>\\<turnstile>\\<langle>DynCom c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>DynCom\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (DynCom c # cs, css, Normal s))}\n        c Z\n        {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>DynCom\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF hyp],safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\n                  Z,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>DynCom c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\n                  Z,Normal\n                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n               Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)", "show \"\\<Gamma>\\<turnstile>\\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c Z,Normal\n Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (fastforce simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c Z,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)], [], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (DynCom c # cs, css, Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (DynCom c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (DynCom c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "have \"\\<Gamma>\\<turnstile>(DynCom c # cs, css, Normal Z) \\<rightarrow> (c Z#cs,css,Normal Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (DynCom c # cs, css, Normal Z) \\<rightarrow>\n                         (c Z # cs, css, Normal Z)", "by (rule step.DynCom)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (DynCom c # cs, css, Normal Z) \\<rightarrow>\n                       (c Z # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c Z # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c Z # cs, css, Normal Z)", "show \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)], [], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c Z # cs, css, Normal Z)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c Z # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c Z # cs, css, Normal Z)", "by blast"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c Z # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>DynCom c,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\n Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>DynCom c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c Z,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (DynCom c # cs, css, Normal s))}\n      c Z\n      {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n   c,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (4 subgoals):\n 1. \\<And>x Z.\n       (\\<And>xa Z.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (xa # cs, css, Normal s))}\n               xa {t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>xa,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     x,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom x # cs, css, Normal s))}\n           DynCom x\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        x,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  x,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 4. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>DynCom\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (DynCom c # cs, css, Normal s))}\n        DynCom c\n        {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>DynCom\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule hoaret.DynCom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>{s. s = Z \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>DynCom\n                c,Normal\n                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n             Fault ` (- F) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (DynCom c # cs, css, Normal s))}.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>DynCom\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (DynCom c # cs, css, Normal s))}\n           c s\n           {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>DynCom\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (DynCom c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>DynCom\n                       c,Normal\n                          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                    Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (DynCom c # cs, css, Normal s))}\n                             c Z\n                             {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                          c,Normal\n                             Z\\<rangle> \\<Rightarrow> Normal\n                 t},{t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule hyp')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (DynCom c # cs, css, Normal s))}\n      DynCom c\n      {t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n   c,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Guard f g c)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c # cs, css, Normal s))}\n      c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>c,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c: \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n         {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n              \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n            (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#cs,css,Normal s))}\n          c\n         {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n         {t. \\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c # cs, css, Normal s))}\n           c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Guard.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c # cs, css, Normal s))}\n      c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       ?Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>c,Normal ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c # cs, css, Normal s))}\n           c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c # cs, css, Normal s))}\n         c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c Z.\n       (\\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c # cs, css, Normal s))}\n               c {t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      Z\\<rangle> \\<Rightarrow> Abrupt t}) \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n     c,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Guard x1 x2a c # cs, css, Normal s))}\n           Guard x1 x2a c\n           {t. \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n        c,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                                  c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 3. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                  \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n            (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Guard f g c#cs,css,Normal s))}\n              Guard f g c\n              {t. \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (cases \"f \\<in> F\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case True"], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter> {s. s=Z \\<and>\n                     \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                 \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n            (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Guard f g c#cs,css,Normal s))})\n              c\n              {t. \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n         {s. s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Guard f g\n      c,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma>\n p) \\<down> Normal \\<sigma> \\<and>\n             (\\<exists>cs css.\n                 \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n(Guard f g c # cs, css, Normal s))})\n        c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n       c,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF hyp_c], safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\" \"Z\\<in>g\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  Z \\<in> g\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  Z \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Guard f g c#cs,css,Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Guard f g c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Guard f g c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"Z \\<in> g\""], ["proof (state)\nthis:\n  Z \\<in> g\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "hence \"\\<Gamma>\\<turnstile>(Guard f g c#cs,css,Normal Z) \\<rightarrow> (c#cs,css,Normal Z)\""], ["proof (prove)\nusing this:\n  Z \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Guard f g c # cs, css, Normal Z) \\<rightarrow>\n                         (c # cs, css, Normal Z)", "by (rule step.Guard)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f g c # cs, css, Normal Z) \\<rightarrow>\n                       (c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # cs, css, Normal Z)", "show \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#cs,css,Normal Z)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c # cs, css, Normal Z)", "by iprover"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\"\n             \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\" \"Z \\<in> g\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n  Z \\<in> g\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n  Z \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "by (auto simp add: final_notin_def intro: exec.intros )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\"\n              \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\" \"Z \\<in> g\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n  Z \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n  Z \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t", "by (auto simp add: final_notin_def intro: exec.intros )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Guard f g\n    c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (Guard f g c # cs, css, Normal s))})\n      c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "from True this"], ["proof (chain)\npicking this:\n  f \\<in> F\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Guard f g\n    c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (Guard f g c # cs, css, Normal s))})\n      c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> F\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Guard f g\n    c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (Guard f g c # cs, css, Normal s))})\n      c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule conseqPre [OF Guarantee]) auto"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Guard f g\nc,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Guard f g c # cs, css, Normal s))}\n      Guard f g c\n      {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n   c,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Guard f\n                                g c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case False"], ["proof (state)\nthis:\n  f \\<notin> F\n\ngoal (1 subgoal):\n 1. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter> {s. s=Z \\<and>\n                     \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                 \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n            (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Guard f g c#cs,css,Normal s))})\n              c\n              {t. \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n         {s. s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Guard f g\n      c,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma>\n p) \\<down> Normal \\<sigma> \\<and>\n             (\\<exists>cs css.\n                 \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n(Guard f g c # cs, css, Normal s))})\n        c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n       c,Normal\n          Z\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof (rule ConseqMGT [OF hyp_c], safe)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)", "using False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  f \\<notin> F\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                               Fault ` (- F)", "by (cases \"Z\\<in> g\") (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix cs css"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Guard f g c#cs,css,Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Guard f g c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Guard f g c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "hence \"Z \\<in> g\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n\ngoal (1 subgoal):\n 1. Z \\<in> g", "using False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  f \\<notin> F\n\ngoal (1 subgoal):\n 1. Z \\<in> g", "by (auto simp add: final_notin_def intro: exec.GuardFault)"], ["proof (state)\nthis:\n  Z \\<in> g\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "hence \"\\<Gamma>\\<turnstile>(Guard f g c#cs,css,Normal Z) \\<rightarrow> (c#cs,css,Normal Z)\""], ["proof (prove)\nusing this:\n  Z \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Guard f g c # cs, css, Normal Z) \\<rightarrow>\n                         (c # cs, css, Normal Z)", "by (rule step.Guard)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f g c # cs, css, Normal Z) \\<rightarrow>\n                       (c # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # cs, css, Normal Z)", "show \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c#cs,css,Normal Z)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c # cs, css, Normal Z)", "by iprover"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c # cs, css, Normal Z)\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\"\n        \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "using False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n  f \\<notin> F\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Normal t", "by (cases \"Z\\<in> g\") (auto simp add: final_notin_def intro: exec.intros )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "assume \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\"\n             \"\\<Gamma>\\<turnstile>\\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>Z \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t", "thus \"\\<Gamma>\\<turnstile>\\<langle>Guard f g c ,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t", "using False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal\n                                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                              Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n  f \\<notin> F\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                   c,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t", "by (cases \"Z\\<in> g\") (auto simp add: final_notin_def intro: exec.intros )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                                 c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Guard f g\n    c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (Guard f g c # cs, css, Normal s))})\n      c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. f \\<notin> F \\<Longrightarrow>\n    \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Guard f g\n    c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (Guard f g c # cs, css, Normal s))})\n      c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (g \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Guard f g\n    c,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (Guard f g c # cs, css, Normal s))})\n      c {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Guard f g\n  c,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Guard f g c # cs, css, Normal s))}\n        Guard f g c\n        {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n     c,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Guard f g\n                               c,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule conseqPre [OF hoaret.Guard])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. s = Z \\<and>\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n        (\\<exists>cs css.\n            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                  Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                 (Guard f g c # cs, css, Normal s))}\n    \\<subseteq> g \\<inter>\n                {s. s = Z \\<and>\n                    \\<Gamma>\\<turnstile> \\<langle>Guard f g\n             c,Normal\n                s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n          Fault ` (- F) \\<and>\n                    \\<Gamma>\\<turnstile>the\n   (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                    (\\<exists>cs css.\n                        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n       (Guard f g c # cs, css, Normal s))}", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Guard f g\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z)\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> g \\<inter>\n                                 {s. s = Z \\<and>\n                                     \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                              c,Normal\n                                 s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                           Fault ` (- F) \\<and>\n                                     \\<Gamma>\\<turnstile>the\n                    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                                     (\\<exists>cs css.\n   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                        (Guard f g c # cs, css, Normal s))}", "apply (frule Guard_noFaultStuckD [OF _ False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Guard f g\n         c,Normal\n            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Guard f g c # cs, css, Normal Z);\n        Z \\<in> g\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> g \\<inter>\n                                 {s. s = Z \\<and>\n                                     \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                              c,Normal\n                                 s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                           Fault ` (- F) \\<and>\n                                     \\<Gamma>\\<turnstile>the\n                    (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                                     (\\<exists>cs css.\n   \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                         Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                        (Guard f g c # cs, css, Normal s))}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Guard f g\nc,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Guard f g c # cs, css, Normal s))}\n      Guard f g c\n      {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n   c,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Guard f\n                                g c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Guard f g\nc,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Guard f g c # cs, css, Normal s))}\n      Guard f g c\n      {t. \\<Gamma>\\<turnstile> \\<langle>Guard f g\n   c,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Guard f\n                                g c,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case Throw"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (Throw # cs, css, Normal s))}\n           Throw\n           {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Throw,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                  \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Throw#cs,css,Normal s))}\n              Throw\n              {t. \\<Gamma>\\<turnstile>\\<langle>Throw,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Throw,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Throw # cs, css, Normal s))}\n        Throw\n        {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n  Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule conseqPre [OF hoaret.Throw])\n       (blast intro: exec.intros terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Throw # cs, css, Normal s))}\n      Throw\n      {t. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n         Z\\<rangle> \\<Rightarrow> Normal\n                                   t},{t.\n \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\nZ\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>1 # cs, css, Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n             ?Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>2 # cs, css, Normal s))}\n      c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             ?Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c1:\n   \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s= Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c\\<^sub>1# cs, css,Normal s))}\n               c\\<^sub>1\n              {t. \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Normal t},{t. \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c\\<^sub>1 # cs, css, Normal s))}\n           c\\<^sub>1\n           {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Catch.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>1 # cs, css, Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n             ?Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>2 # cs, css, Normal s))}\n      c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             ?Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c\\<^sub>1 # cs, css, Normal s))}\n           c\\<^sub>1\n           {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c\\<^sub>1 # cs, css, Normal s))}\n         c\\<^sub>1\n         {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have hyp_c2:\n   \"\\<forall>Z. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s= Z \\<and> \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                     \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c\\<^sub>2# cs, css,Normal s))}\n               c\\<^sub>2\n              {t. \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t},{t. \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c\\<^sub>2 # cs, css, Normal s))}\n           c\\<^sub>2\n           {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                Z\\<rangle> \\<Rightarrow> Abrupt t}", "using Catch.hyps"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>1 # cs, css, Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n             ?Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = ?Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>2 # cs, css, Normal s))}\n      c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             ?Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            ?Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>the (\\<Gamma>\np) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css.\n                \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\nNormal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                     (c\\<^sub>2 # cs, css, Normal s))}\n           c\\<^sub>2\n           {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                Z\\<rangle> \\<Rightarrow> Abrupt t}", "by iprover"], ["proof (state)\nthis:\n  \\<forall>Z.\n     \\<Gamma>,\\<Theta>\n        \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n          s = Z \\<and>\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n          \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                    p) \\<down> Normal \\<sigma> \\<and>\n          (\\<exists>cs css.\n              \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                   (c\\<^sub>2 # cs, css, Normal s))}\n         c\\<^sub>2\n         {t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have\n    \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s = Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n               \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n            (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>)\\<rightarrow>\\<^sup>*(Catch c\\<^sub>1 c\\<^sub>2 #cs,css,Normal s))}\n            c\\<^sub>1\n           {t. \\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n           {t. \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n               \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>2,Normal t\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault`(-F)) \\<and> \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n               (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c\\<^sub>2# cs, css,Normal t))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                   Normal s))}\n        c\\<^sub>1\n        {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n     c\\<^sub>2,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n              t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n        Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma>\n                                     p) \\<down> Normal \\<sigma> \\<and>\n           (\\<exists>cs css.\n               \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                     Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                    (c\\<^sub>2 # cs, css, Normal t))}", "proof (rule ConseqMGT [OF hyp_c1],clarify,safe)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 5. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "assume \"\\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal\n      Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\n\ngoal (5 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                            Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 2. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 5. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "thus \"\\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal\n      Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (fastforce simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "fix cs css"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)], [], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "have\n      \"\\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z) \\<rightarrow> ([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal Z) \\<rightarrow>\n                         ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)", "by (rule step.Catch)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal Z) \\<rightarrow>\n                       ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)\n\ngoal (4 subgoals):\n 1. \\<And>s cs css.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>1 # cs, css, Normal Z)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 4. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)", "show \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)], [], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c\\<^sub>1 # cs, css, Normal Z)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c\\<^sub>1 # cs, css, Normal Z)", "by iprover"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c\\<^sub>1 # cs, css, Normal Z)\n\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "fix t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "assume \"\\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (3 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Normal t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 3. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "thus \"\\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,Normal\n        Z\\<rangle> \\<Rightarrow> Normal t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal\n      Z\\<rangle> \\<Rightarrow> Normal t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "assume \"\\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\"\n      \"\\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal\n      Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (2 subgoals):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                      Fault ` (- F)\n 2. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "thus \"\\<Gamma>\\<turnstile>\\<langle>c\\<^sub>2,Normal t\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal\n      Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n       t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n     t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "fix cs css t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "assume \"\\<Gamma>\\<turnstile>([the (\\<Gamma> p)], [], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "have\n      \"\\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2 # cs, css, Normal Z) \\<rightarrow> ([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                          Normal Z) \\<rightarrow>\n                         ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)", "by (rule step.Catch)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal Z) \\<rightarrow>\n                       ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                        Normal Z) \\<rightarrow>\n                       ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css, Normal Z)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "assume \"\\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "hence \"\\<Gamma>\\<turnstile>([c\\<^sub>1],(cs,c\\<^sub>2#cs)#css,Normal Z) \\<rightarrow>\\<^sup>* ([],(cs,c\\<^sub>2#cs)#css,Abrupt t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     Z\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                          Normal Z) \\<rightarrow>\\<^sup>*\n                         ([], (cs, c\\<^sub>2 # cs) # css, Abrupt t)", "by (rule exec_impl_steps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal Z) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Abrupt t)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([c\\<^sub>1], (cs, c\\<^sub>2 # cs) # css,\n                        Normal Z) \\<rightarrow>\\<^sup>*\n                       ([], (cs, c\\<^sub>2 # cs) # css, Abrupt t)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "have \"\\<Gamma>\\<turnstile>([],(cs,c\\<^sub>2#cs)#css,Abrupt t) \\<rightarrow> (c\\<^sub>2#cs,css,Normal t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                          Abrupt t) \\<rightarrow>\n                         (c\\<^sub>2 # cs, css, Normal t)", "by (rule step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> ([], (cs, c\\<^sub>2 # cs) # css,\n                        Abrupt t) \\<rightarrow>\n                       (c\\<^sub>2 # cs, css, Normal t)\n\ngoal (1 subgoal):\n 1. \\<And>s cs css t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n         c\\<^sub>2,Normal\n                    Z\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F);\n        \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma>;\n        \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                              Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                             (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                              Normal Z);\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           Z\\<rangle> \\<Rightarrow> Abrupt t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c\\<^sub>2 # cs, css, Normal t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c\\<^sub>2 # cs, css, Normal t)", "show \"\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)], [], Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c\\<^sub>2 # cs, css, Normal t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                        Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                       (c\\<^sub>2 # cs, css, Normal t)\n\ngoal (1 subgoal):\n 1. \\<exists>cs css.\n       \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                             Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                            (c\\<^sub>2 # cs, css, Normal t)", "by iprover"], ["proof (state)\nthis:\n  \\<exists>cs css.\n     \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                          (c\\<^sub>2 # cs, css, Normal t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                 Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (c\\<^sub>2 # cs, css, Normal t))}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                 Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (c\\<^sub>2 # cs, css, Normal t))}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have \"\\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t. \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>1,Normal Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n                  \\<Gamma>\\<turnstile>\\<langle>c\\<^sub>2,Normal t\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                  \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                  (\\<exists>cs css. \\<Gamma>\\<turnstile>([the (\\<Gamma> p)],[],Normal \\<sigma>) \\<rightarrow>\\<^sup>* (c\\<^sub>2# cs, css,Normal t))}\n               c\\<^sub>2\n              {t. \\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Catch c\\<^sub>1 c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (c\\<^sub>2 # cs, css, Normal t))}\n        c\\<^sub>2\n        {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n     c\\<^sub>2,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n    c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule ConseqMGT [OF hyp_c2]) (fastforce intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>2 # cs, css, Normal t))}\n      c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 Z.\n       \\<lbrakk>\\<And>Z.\n                   \\<Gamma>,\\<Theta>\n                      \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                        s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>the\n       (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                        (\\<exists>cs css.\n                            \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n            Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n           (c1 # cs, css, Normal s))}\n                       c1 {t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                          Z\\<rangle> \\<Rightarrow> Normal\n              t},{t. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                 Z\\<rangle> \\<Rightarrow> Abrupt t};\n        \\<And>Z.\n           \\<Gamma>,\\<Theta>\n              \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma>\n    p) \\<down> Normal \\<sigma> \\<and>\n                (\\<exists>cs css.\n                    \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n    Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n   (c2 # cs, css, Normal s))}\n               c2 {t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                  Z\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n         Z\\<rangle> \\<Rightarrow> Abrupt t}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta>\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                       c2,Normal\n                           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                     Fault ` (- F) \\<and>\n                              \\<Gamma>\\<turnstile>the\n             (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                              (\\<exists>cs css.\n                                  \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)],\n                  [], Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                 (Catch c1 c2 # cs, css, Normal s))}\n                             Catch c1 c2\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                          c2,Normal\n                              Z\\<rangle> \\<Rightarrow> Normal\n                  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                  c2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                 Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (c\\<^sub>2 # cs, css, Normal t))}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>2 # cs, css, Normal t))}\n      c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                 Normal s))}\n      c\\<^sub>1\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (c\\<^sub>2 # cs, css, Normal t))}\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          Z\\<rangle> \\<Rightarrow> Abrupt t \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          t\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (c\\<^sub>2 # cs, css, Normal t))}\n      c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<Theta>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n         s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n       Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n         (\\<exists>cs css.\n             \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                   Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                  (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                   Normal s))}\n        Catch c\\<^sub>1 c\\<^sub>2\n        {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n     c\\<^sub>2,Normal\n                Z\\<rangle> \\<Rightarrow> Normal\n    t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n    c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (rule hoaret.Catch)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<Theta>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n       s = Z \\<and>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n       \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n       (\\<exists>cs css.\n           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n                                 Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n                                (Catch c\\<^sub>1 c\\<^sub>2 # cs, css,\n                                 Normal s))}\n      Catch c\\<^sub>1 c\\<^sub>2\n      {t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n   c\\<^sub>2,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>To prove a procedure implementation correct it suffices to assume\n       only the procedure specifications of procedures that actually\n       occur during evaluation of the body.\n\\<close>"], ["", "lemma Call_lemma:\n assumes\n Call: \"\\<forall>q \\<in> dom \\<Gamma>. \\<forall>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n                 {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"\n shows \"\\<And>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n              ({\\<sigma>} \\<inter> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                                 \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal s})\n                 the (\\<Gamma> p)\n              {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n            {s. s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>the\n         (\\<Gamma>\n           p),Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s})\n           the (\\<Gamma> p)\n           {t. \\<Gamma>\\<turnstile> \\<langle>the\n        (\\<Gamma>\n          p),Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>the\n  (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule conseqPre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (?P' Z) the (\\<Gamma> p)\n           {t. \\<Gamma>\\<turnstile> \\<langle>the\n        (\\<Gamma>\n          p),Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>the\n  (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       {\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s}\n       \\<subseteq> ?P' Z", "apply (rule Call_lemma')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<forall>q\\<in>dom \\<Gamma>.\n          \\<forall>Za.\n             \\<Gamma>,\\<Theta>\n                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                  s = Za \\<and>\n                  \\<Gamma>\\<turnstile> \\<langle>Call\n           q,Normal\n              s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n        Fault ` (- F) \\<and>\n                  \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n                  ((s, q), ?\\<sigma>3 Z, ?p3 Z)\n                  \\<in> termi_call_steps \\<Gamma>}\n                 Call q\n                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n              q,Normal\n                 Za\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       {\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s}\n       \\<subseteq> {s. s = Z \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>the\n                (\\<Gamma>\n                  p),Normal\n                      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> (?p3 Z)) \\<down> Normal (?\\<sigma>3 Z) \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> (?p3 Z))],\n           [], Normal (?\\<sigma>3 Z)) \\<rightarrow>\\<^sup>*\n          (the (\\<Gamma> p) # cs, css, Normal s))}", "apply (rule Call)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       {\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s}\n       \\<subseteq> {s. s = Z \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>the\n                (\\<Gamma>\n                  p),Normal\n                      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (the (\\<Gamma> p) # cs, css, Normal s))}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Call_lemma_switch_Call_body:\n assumes\n call: \"\\<forall>q \\<in> dom \\<Gamma>. \\<forall>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n                 {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call q,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>Call q\\<down>Normal s \\<and> ((s,q),(\\<sigma>,p)) \\<in> termi_call_steps \\<Gamma>}\n                 (Call q)\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                {t. \\<Gamma>\\<turnstile>\\<langle>Call q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\"\n assumes p_defined: \"p \\<in> dom \\<Gamma>\"\n shows \"\\<And>Z. \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n              ({\\<sigma>} \\<inter> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                                 \\<Gamma>\\<turnstile>Call p\\<down>Normal s})\n                 the (\\<Gamma> p)\n              {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n              {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n            {s. s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>Call\n         p,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n           the (\\<Gamma> p)\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  p,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (simp only: exec_Call_body' [OF p_defined] noFaultStuck_Call_body' [OF p_defined] terminates_Normal_Call_body [OF p_defined])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n            {s. s = Z \\<and>\n                \\<Gamma>\\<turnstile> \\<langle>the\n         (\\<Gamma>\n           p),Normal\n               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n         Fault ` (- F) \\<and>\n                \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s})\n           the (\\<Gamma> p)\n           {t. \\<Gamma>\\<turnstile> \\<langle>the\n        (\\<Gamma>\n          p),Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>the\n  (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule conseqPre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (?P' Z) the (\\<Gamma> p)\n           {t. \\<Gamma>\\<turnstile> \\<langle>the\n        (\\<Gamma>\n          p),Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>the\n  (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       {\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s}\n       \\<subseteq> ?P' Z", "apply (rule Call_lemma')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Z.\n       \\<forall>q\\<in>dom \\<Gamma>.\n          \\<forall>Za.\n             \\<Gamma>,\\<Theta>\n                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                  s = Za \\<and>\n                  \\<Gamma>\\<turnstile> \\<langle>Call\n           q,Normal\n              s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n        Fault ` (- F) \\<and>\n                  \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n                  ((s, q), ?\\<sigma>3 Z, ?p3 Z)\n                  \\<in> termi_call_steps \\<Gamma>}\n                 Call q\n                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n              q,Normal\n                 Za\\<rangle> \\<Rightarrow> Normal\n      t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n      q,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>Z.\n       {\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s}\n       \\<subseteq> {s. s = Z \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>the\n                (\\<Gamma>\n                  p),Normal\n                      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> (?p3 Z)) \\<down> Normal (?\\<sigma>3 Z) \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> (?p3 Z))],\n           [], Normal (?\\<sigma>3 Z)) \\<rightarrow>\\<^sup>*\n          (the (\\<Gamma> p) # cs, css, Normal s))}", "apply (rule call)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       {\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s}\n       \\<subseteq> {s. s = Z \\<and>\n                       \\<Gamma>\\<turnstile> \\<langle>the\n                (\\<Gamma>\n                  p),Normal\n                      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                       \\<Gamma>\\<turnstile>the\n      (\\<Gamma> p) \\<down> Normal \\<sigma> \\<and>\n                       (\\<exists>cs css.\n                           \\<Gamma>\\<turnstile> ([the (\\<Gamma> p)], [],\n           Normal \\<sigma>) \\<rightarrow>\\<^sup>*\n          (the (\\<Gamma> p) # cs, css, Normal s))}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma MGT_Call:\n\"\\<forall>p \\<in> dom \\<Gamma>. \\<forall>Z.\n  \\<Gamma>,\\<Theta> \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n             \\<Gamma>\\<turnstile>(Call p)\\<down>Normal s}\n           (Call p)\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,\\<Theta>\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (intro ballI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n           Call p\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  p,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule CallRec' [where Procs=\"dom \\<Gamma>\" and\n    P=\"\\<lambda>p Z. {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                    \\<Gamma>\\<turnstile>Call p\\<down>Normal s}\" and\n    Q=\"\\<lambda>p Z. {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t}\" and\n    A=\"\\<lambda>p Z. {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\" and\n    r=\"termi_call_steps \\<Gamma>\"\n    ])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p Z. p \\<in> dom \\<Gamma> \\<Longrightarrow> p \\<in> dom \\<Gamma>\n 2. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       dom \\<Gamma> \\<subseteq> dom \\<Gamma>\n 3. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow> wf (termi_call_steps \\<Gamma>)\n 4. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<forall>p\\<in>dom \\<Gamma>.\n          \\<forall>\\<tau> Z.\n             \\<Gamma>,\\<Theta> \\<union>\n                      (\\<Union>q\\<in>dom \\<Gamma>.\n                          \\<Union>Z.\n                             {({s. s = Z \\<and>\n                                   \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                   \\<Gamma>\\<turnstile>Call\n                  q \\<down> Normal s} \\<inter>\n                               {s. ((s, q), \\<tau>, p)\n                                   \\<in> termi_call_steps \\<Gamma>},\n                               q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                               {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<tau>} \\<inter>\n                  {s. s = Z \\<and>\n                      \\<Gamma>\\<turnstile> \\<langle>Call\n               p,Normal\n                  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                      \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n                 the (\\<Gamma> p)\n                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n              p,Normal\n                 Z\\<rangle> \\<Rightarrow> Normal\n     t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       dom \\<Gamma> \\<subseteq> dom \\<Gamma>\n 2. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow> wf (termi_call_steps \\<Gamma>)\n 3. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<forall>p\\<in>dom \\<Gamma>.\n          \\<forall>\\<tau> Z.\n             \\<Gamma>,\\<Theta> \\<union>\n                      (\\<Union>q\\<in>dom \\<Gamma>.\n                          \\<Union>Z.\n                             {({s. s = Z \\<and>\n                                   \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                   \\<Gamma>\\<turnstile>Call\n                  q \\<down> Normal s} \\<inter>\n                               {s. ((s, q), \\<tau>, p)\n                                   \\<in> termi_call_steps \\<Gamma>},\n                               q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                               {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<tau>} \\<inter>\n                  {s. s = Z \\<and>\n                      \\<Gamma>\\<turnstile> \\<langle>Call\n               p,Normal\n                  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                      \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n                 the (\\<Gamma> p)\n                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n              p,Normal\n                 Z\\<rangle> \\<Rightarrow> Normal\n     t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply   simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow> wf (termi_call_steps \\<Gamma>)\n 2. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<forall>p\\<in>dom \\<Gamma>.\n          \\<forall>\\<tau> Z.\n             \\<Gamma>,\\<Theta> \\<union>\n                      (\\<Union>q\\<in>dom \\<Gamma>.\n                          \\<Union>Z.\n                             {({s. s = Z \\<and>\n                                   \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                   \\<Gamma>\\<turnstile>Call\n                  q \\<down> Normal s} \\<inter>\n                               {s. ((s, q), \\<tau>, p)\n                                   \\<in> termi_call_steps \\<Gamma>},\n                               q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                               {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<tau>} \\<inter>\n                  {s. s = Z \\<and>\n                      \\<Gamma>\\<turnstile> \\<langle>Call\n               p,Normal\n                  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                      \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n                 the (\\<Gamma> p)\n                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n              p,Normal\n                 Z\\<rangle> \\<Rightarrow> Normal\n     t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply  (rule wf_termi_call_steps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<forall>p\\<in>dom \\<Gamma>.\n          \\<forall>\\<tau> Z.\n             \\<Gamma>,\\<Theta> \\<union>\n                      (\\<Union>q\\<in>dom \\<Gamma>.\n                          \\<Union>Z.\n                             {({s. s = Z \\<and>\n                                   \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                   \\<Gamma>\\<turnstile>Call\n                  q \\<down> Normal s} \\<inter>\n                               {s. ((s, q), \\<tau>, p)\n                                   \\<in> termi_call_steps \\<Gamma>},\n                               q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                               q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                               {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                            q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<tau>} \\<inter>\n                  {s. s = Z \\<and>\n                      \\<Gamma>\\<turnstile> \\<langle>Call\n               p,Normal\n                  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n            Fault ` (- F) \\<and>\n                      \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n                 the (\\<Gamma> p)\n                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n              p,Normal\n                 Z\\<rangle> \\<Rightarrow> Normal\n     t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (intro ballI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z pa \\<tau> Za.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta> \\<union>\n                                  (\\<Union>q\\<in>dom \\<Gamma>.\n\\<Union>Z.\n   {({s. s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>Call q \\<down> Normal s} \\<inter>\n     {s. ((s, q), \\<tau>, pa) \\<in> termi_call_steps \\<Gamma>},\n     q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n     {t. \\<Gamma>\\<turnstile> \\<langle>Call\n  q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<tau>} \\<inter>\n                              {s. s = Za \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>Call\n                           pa,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                  \\<Gamma>\\<turnstile>Call\n                 pa \\<down> Normal s})\n                             the (\\<Gamma> pa)\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          pa,Normal\n                              Za\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                   pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p pa \\<tau> Za.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta> \\<union>\n                                  (\\<Union>x\\<in>dom \\<Gamma>.\n\\<Union>xa.\n   {({s. s = xa \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  x,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F)) \\<and>\n         \\<Gamma>\\<turnstile>Call x \\<down> Normal s} \\<inter>\n     {s. ((s, x), \\<tau>, pa) \\<in> termi_call_steps \\<Gamma>},\n     x, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal xa\\<rangle> \\<Rightarrow> Normal t},\n     {t. \\<Gamma>\\<turnstile> \\<langle>Call\n  x,Normal xa\\<rangle> \\<Rightarrow> Abrupt t})})\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<tau>} \\<inter>\n                              {s. s = Za \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>Call\n                           pa,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n                          (Fault ` (- F)) \\<and>\n                                  \\<Gamma>\\<turnstile>Call\n                 pa \\<down> Normal s})\n                             the (\\<Gamma> pa)\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          pa,Normal\n                              Za\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                   pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule Call_lemma_switch_Call_body [rule_format, simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p pa \\<tau> Za q Z.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>;\n        q \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<Theta> \\<union>\n                                  (\\<Union>x\\<in>dom \\<Gamma>.\n\\<Union>xa.\n   {({s. s = xa \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  x,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F)) \\<and>\n         \\<Gamma>\\<turnstile>Call x \\<down> Normal s} \\<inter>\n     {s. ((s, x), \\<tau>, pa) \\<in> termi_call_steps \\<Gamma>},\n     x, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     x,Normal xa\\<rangle> \\<Rightarrow> Normal t},\n     {t. \\<Gamma>\\<turnstile> \\<langle>Call\n  x,Normal xa\\<rangle> \\<Rightarrow> Abrupt t})})\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n                              s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Call\n                       q,Normal\n                          s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n                     (Fault ` (- F)) \\<and>\n                              \\<Gamma>\\<turnstile>Call\n             q \\<down> Normal s \\<and>\n                              ((s, q), \\<tau>, pa)\n                              \\<in> termi_call_steps \\<Gamma>}\n                             Call q\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          q,Normal\n                             Z\\<rangle> \\<Rightarrow> Normal\n                 t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                 q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>p pa \\<tau> Za.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> pa \\<in> dom \\<Gamma>", "apply  (rule hoaret.Asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p pa \\<tau> Za q Z.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>;\n        q \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> ({s. s = Z \\<and>\n                              \\<Gamma>\\<turnstile> \\<langle>Call\n                       q,Normal\n                          s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n                     (Fault ` (- F)) \\<and>\n                              \\<Gamma>\\<turnstile>Call\n             q \\<down> Normal s \\<and>\n                              ((s, q), \\<tau>, pa)\n                              \\<in> termi_call_steps \\<Gamma>},\n                          q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                          {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                       q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})\n                         \\<in> \\<Theta> \\<union>\n                               (\\<Union>x\\<in>dom \\<Gamma>.\n                                   \\<Union>xa.\n{({s. s = xa \\<and>\n      \\<Gamma>\\<turnstile> \\<langle>Call\n                                     x,Normal\n  s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F)) \\<and>\n      \\<Gamma>\\<turnstile>Call x \\<down> Normal s} \\<inter>\n  {s. ((s, x), \\<tau>, pa) \\<in> termi_call_steps \\<Gamma>},\n  x, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n  x,Normal xa\\<rangle> \\<Rightarrow> Normal t},\n  {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                                     x,Normal\n  xa\\<rangle> \\<Rightarrow> Abrupt t})})\n 2. \\<And>p pa \\<tau> Za.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> pa \\<in> dom \\<Gamma>", "apply  fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p pa \\<tau> Za.\n       \\<lbrakk>p \\<in> dom \\<Gamma>; pa \\<in> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> pa \\<in> dom \\<Gamma>", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CollInt_iff: \"{s. P s} \\<inter> {s. Q s} = {s. P s \\<and> Q s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. P s} \\<inter> {s. Q s} = {s. P s \\<and> Q s}", "by auto"], ["", "lemma image_Un_conv: \"f ` (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z. {x p Z}) =  (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z. {f (x p Z)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z. {x p Z}) =\n    (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z. {f (x p Z)})", "by (auto iff: not_None_eq)"], ["", "text \\<open>Another proof of \\<open>MGT_Call\\<close>, maybe a little more readable\\<close>"], ["", "lemma\n\"\\<forall>p \\<in> dom \\<Gamma>. \\<forall>Z.\n  \\<Gamma>,{} \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s. s=Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n             \\<Gamma>\\<turnstile>(Call p)\\<down>Normal s}\n           (Call p)\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n          {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "fix p Z \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "assume defined: \"p \\<in> dom \\<Gamma>\""], ["proof (state)\nthis:\n  p \\<in> dom \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "define Specs where \"Specs = (\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z.\n            {({s. s=Z \\<and>\n              \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n              \\<Gamma>\\<turnstile>Call p\\<down>Normal s},\n             p,\n             {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n             {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\""], ["proof (state)\nthis:\n  Specs =\n  (\\<Union>p\\<in>dom \\<Gamma>.\n      \\<Union>Z.\n         {({s. s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n           p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "define Specs_wf where \"Specs_wf p \\<sigma> = (\\<lambda>(P,q,Q,A).\n                       (P \\<inter> {s. ((s,q),\\<sigma>,p) \\<in> termi_call_steps \\<Gamma>}, q, Q, A)) ` Specs\" for p \\<sigma>"], ["proof (state)\nthis:\n  Specs_wf ?p ?\\<sigma> =\n  (\\<lambda>(P, q, Q, A).\n      (P \\<inter>\n       {s. ((s, q), ?\\<sigma>, ?p) \\<in> termi_call_steps \\<Gamma>},\n       q, Q, A)) `\n  Specs\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "have \"\\<Gamma>,Specs_wf p \\<sigma>\n            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>({\\<sigma>} \\<inter>\n                 {s. s = Z \\<and> \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                  \\<Gamma>\\<turnstile>the (\\<Gamma> p)\\<down>Normal s})\n                (the (\\<Gamma> p))\n               {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Normal t},\n               {t. \\<Gamma>\\<turnstile>\\<langle>the (\\<Gamma> p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,Specs_wf p \\<sigma>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n         {s. s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>the\n      (\\<Gamma>\n        p),Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n      Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s})\n        the (\\<Gamma> p)\n        {t. \\<Gamma>\\<turnstile> \\<langle>the\n     (\\<Gamma>\n       p),Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>the (\\<Gamma>\n p),Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule Call_lemma [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q Z.\n       q \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>,Specs_wf p \\<sigma>\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n            ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>}\n           Call q\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        q,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  q,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule hoaret.Asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q Z.\n       q \\<in> dom \\<Gamma> \\<Longrightarrow>\n       ({s. s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n            ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>},\n        q, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        q,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})\n       \\<in> Specs_wf p \\<sigma>", "apply (clarsimp simp add: Specs_wf_def Specs_def image_Un_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q Z y.\n       \\<Gamma> q = Some y \\<Longrightarrow>\n       \\<exists>x\\<in>dom \\<Gamma>.\n          \\<exists>xa.\n             {s. s = Z \\<and>\n                 \\<Gamma>\\<turnstile> \\<langle>Call\n          q,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n        (Fault ` (- F)) \\<and>\n                 \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n                 ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>} =\n             {s. s = xa \\<and>\n                 \\<Gamma>\\<turnstile> \\<langle>Call\n          x,Normal\n             s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n        (Fault ` (- F)) \\<and>\n                 \\<Gamma>\\<turnstile>Call x \\<down> Normal s} \\<inter>\n             {s. ((s, x), \\<sigma>, p)\n                 \\<in> termi_call_steps \\<Gamma>} \\<and>\n             q = x \\<and>\n             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n          q,Normal Z\\<rangle> \\<Rightarrow> Normal t} =\n             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n          x,Normal xa\\<rangle> \\<Rightarrow> Normal t} \\<and>\n             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n          q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t} =\n             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n          x,Normal xa\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule_tac x=q in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q Z y.\n       \\<Gamma> q = Some y \\<Longrightarrow>\n       \\<exists>x.\n          {s. s = Z \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>Call\n       q,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n     (Fault ` (- F)) \\<and>\n              \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n              ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>} =\n          {s. s = x \\<and>\n              \\<Gamma>\\<turnstile> \\<langle>Call\n       q,Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck\n     (Fault ` (- F)) \\<and>\n              \\<Gamma>\\<turnstile>Call q \\<down> Normal s} \\<inter>\n          {s. ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>} \\<and>\n          q = q \\<and>\n          {t. \\<Gamma>\\<turnstile> \\<langle>Call\n       q,Normal Z\\<rangle> \\<Rightarrow> Normal t} =\n          {t. \\<Gamma>\\<turnstile> \\<langle>Call\n       q,Normal x\\<rangle> \\<Rightarrow> Normal t} \\<and>\n          {t. \\<Gamma>\\<turnstile> \\<langle>Call\n       q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t} =\n          {t. \\<Gamma>\\<turnstile> \\<langle>Call\n       q,Normal x\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>q Z y. \\<Gamma> q = Some y \\<Longrightarrow> q \\<in> dom \\<Gamma>", "apply (rule_tac x=Z in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q Z y.\n       \\<Gamma> q = Some y \\<Longrightarrow>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Call\n    q,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F)) \\<and>\n           \\<Gamma>\\<turnstile>Call q \\<down> Normal s \\<and>\n           ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>} =\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Call\n    q,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>insert Stuck (Fault ` (- F)) \\<and>\n           \\<Gamma>\\<turnstile>Call q \\<down> Normal s} \\<inter>\n       {s. ((s, q), \\<sigma>, p) \\<in> termi_call_steps \\<Gamma>} \\<and>\n       q = q \\<and>\n       {t. \\<Gamma>\\<turnstile> \\<langle>Call\n    q,Normal Z\\<rangle> \\<Rightarrow> Normal t} =\n       {t. \\<Gamma>\\<turnstile> \\<langle>Call\n    q,Normal Z\\<rangle> \\<Rightarrow> Normal t} \\<and>\n       {t. \\<Gamma>\\<turnstile> \\<langle>Call\n    q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t} =\n       {t. \\<Gamma>\\<turnstile> \\<langle>Call\n    q,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n 2. \\<And>q Z y. \\<Gamma> q = Some y \\<Longrightarrow> q \\<in> dom \\<Gamma>", "apply (clarsimp simp add: CollInt_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q Z y. \\<Gamma> q = Some y \\<Longrightarrow> q \\<in> dom \\<Gamma>", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>,Specs_wf p \\<sigma>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s})\n      the (\\<Gamma> p)\n      {t. \\<Gamma>\\<turnstile> \\<langle>the\n   (\\<Gamma>\n     p),Normal\n         Z\\<rangle> \\<Rightarrow> Normal\n                                   t},{t.\n \\<Gamma>\\<turnstile> \\<langle>the (\\<Gamma>\n                                     p),Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "hence \"\\<Gamma>,Specs_wf p \\<sigma>\n            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>({\\<sigma>} \\<inter>\n                 {s. s = Z \\<and> \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n                  \\<Gamma>\\<turnstile>Call p\\<down>Normal s})\n                (the (\\<Gamma> p))\n               {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n               {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\""], ["proof (prove)\nusing this:\n  \\<Gamma>,Specs_wf p \\<sigma>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>the\n    (\\<Gamma>\n      p),Normal\n          s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n    Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>the (\\<Gamma> p) \\<down> Normal s})\n      the (\\<Gamma> p)\n      {t. \\<Gamma>\\<turnstile> \\<langle>the\n   (\\<Gamma>\n     p),Normal\n         Z\\<rangle> \\<Rightarrow> Normal\n                                   t},{t.\n \\<Gamma>\\<turnstile> \\<langle>the (\\<Gamma>\n                                     p),Normal\n   Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<Gamma>,Specs_wf p \\<sigma>\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n         {s. s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      p,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n        the (\\<Gamma> p)\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal\n        Z\\<rangle> \\<Rightarrow> Normal\n                                  t},{t.\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "by (simp only: exec_Call_body' [OF defined]\n                   noFaultStuck_Call_body' [OF defined]\n                  terminates_Normal_Call_body [OF defined])"], ["proof (state)\nthis:\n  \\<Gamma>,Specs_wf p \\<sigma>\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n       {s. s = Z \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Call\n    p,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>Call p \\<down> Normal s})\n      the (\\<Gamma> p)\n      {t. \\<Gamma>\\<turnstile> \\<langle>Call\n   p,Normal\n      Z\\<rangle> \\<Rightarrow> Normal\n                                t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                                p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> dom \\<Gamma> \\<Longrightarrow>\n  \\<Gamma>,(\\<lambda>(P, q, Q, A).\n               (P \\<inter>\n                {s. ((s, q), ?\\<sigma>2, ?p2)\n                    \\<in> termi_call_steps \\<Gamma>},\n                q, Q, A)) `\n           (\\<Union>p\\<in>dom \\<Gamma>.\n               \\<Union>Z.\n                  {({s. s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>Call\n                 p,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n                    p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                    p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                    {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                 p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({?\\<sigma>2} \\<inter>\n       {s. s = ?Z2 \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Call\n    ?p2,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>Call ?p2 \\<down> Normal s})\n      the (\\<Gamma> ?p2)\n      {t. \\<Gamma>\\<turnstile> \\<langle>Call\n   ?p2,Normal\n        ?Z2\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 ?p2,Normal\n?Z2\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "note bdy=this"], ["proof (state)\nthis:\n  ?p2 \\<in> dom \\<Gamma> \\<Longrightarrow>\n  \\<Gamma>,(\\<lambda>(P, q, Q, A).\n               (P \\<inter>\n                {s. ((s, q), ?\\<sigma>2, ?p2)\n                    \\<in> termi_call_steps \\<Gamma>},\n                q, Q, A)) `\n           (\\<Union>p\\<in>dom \\<Gamma>.\n               \\<Union>Z.\n                  {({s. s = Z \\<and>\n                        \\<Gamma>\\<turnstile> \\<langle>Call\n                 p,Normal\n                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n              Fault ` (- F) \\<and>\n                        \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n                    p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                    p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                    {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                 p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n     \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({?\\<sigma>2} \\<inter>\n       {s. s = ?Z2 \\<and>\n           \\<Gamma>\\<turnstile> \\<langle>Call\n    ?p2,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n           \\<Gamma>\\<turnstile>Call ?p2 \\<down> Normal s})\n      the (\\<Gamma> ?p2)\n      {t. \\<Gamma>\\<turnstile> \\<langle>Call\n   ?p2,Normal\n        ?Z2\\<rangle> \\<Rightarrow> Normal\n                                    t},{t.\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 ?p2,Normal\n?Z2\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>dom \\<Gamma>.\n       \\<forall>Z.\n          \\<Gamma>,{}\n             \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n               s = Z \\<and>\n               \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n     Fault ` (- F) \\<and>\n               \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n              Call p\n              {t. \\<Gamma>\\<turnstile> \\<langle>Call\n           p,Normal\n              Z\\<rangle> \\<Rightarrow> Normal\n  t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (intro ballI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>,{}\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n            s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n           Call p\n           {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal\n           Z\\<rangle> \\<Rightarrow> Normal\n                                     t},{t.\n   \\<Gamma>\\<turnstile> \\<langle>Call\n                                  p,Normal\n                                     Z\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule hoaret.CallRec [where Specs=\"(\\<Union>p\\<in>dom \\<Gamma>. \\<Union>Z.\n            {({s. s=Z \\<and>\n              \\<Gamma>\\<turnstile>\\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>({Stuck} \\<union> Fault ` (-F)) \\<and>\n              \\<Gamma>\\<turnstile>Call p\\<down>Normal s},\n             p,\n             {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n             {t. \\<Gamma>\\<turnstile>\\<langle>Call p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\",\n             OF _ wf_termi_call_steps [of \\<Gamma>] refl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       ({s. s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n        p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})\n       \\<in> (\\<Union>p\\<in>dom \\<Gamma>.\n                 \\<Union>Z.\n                    {({s. s = Z \\<and>\n                          \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal\n                      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                Fault ` (- F) \\<and>\n                          \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n                      p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                      p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                      {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n 2. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<forall>(P, p, Q, A)\n                \\<in>\\<Union>p\\<in>dom \\<Gamma>.\n                        \\<Union>Z.\n                           {({s. s = Z \\<and>\n                                 \\<Gamma>\\<turnstile> \\<langle>Call\n                          p,Normal\n                             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                       Fault ` (- F) \\<and>\n                                 \\<Gamma>\\<turnstile>Call\n                p \\<down> Normal s},\n                             p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                             p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})}.\n          p \\<in> dom \\<Gamma> \\<and>\n          (\\<forall>\\<sigma>.\n              \\<Gamma>,{} \\<union>\n                       (\\<lambda>(P, q, Q, A).\n                           (P \\<inter>\n                            {s. ((s, q), \\<sigma>, p)\n                                \\<in> termi_call_steps \\<Gamma>},\n                            q, Q, A)) `\n                       (\\<Union>p\\<in>dom \\<Gamma>.\n                           \\<Union>Z.\n                              {({s. s = Z \\<and>\n                                    \\<Gamma>\\<turnstile> \\<langle>Call\n                             p,Normal\n                                s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                          Fault ` (- F) \\<and>\n                                    \\<Gamma>\\<turnstile>Call\n                   p \\<down> Normal s},\n                                p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                                p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                                {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                             p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                 \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                   P)\n                  the (\\<Gamma> p) Q,A)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z.\n       p \\<in> dom \\<Gamma> \\<Longrightarrow>\n       \\<forall>(P, p, Q, A)\n                \\<in>\\<Union>p\\<in>dom \\<Gamma>.\n                        \\<Union>Z.\n                           {({s. s = Z \\<and>\n                                 \\<Gamma>\\<turnstile> \\<langle>Call\n                          p,Normal\n                             s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                       Fault ` (- F) \\<and>\n                                 \\<Gamma>\\<turnstile>Call\n                p \\<down> Normal s},\n                             p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                             p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})}.\n          p \\<in> dom \\<Gamma> \\<and>\n          (\\<forall>\\<sigma>.\n              \\<Gamma>,{} \\<union>\n                       (\\<lambda>(P, q, Q, A).\n                           (P \\<inter>\n                            {s. ((s, q), \\<sigma>, p)\n                                \\<in> termi_call_steps \\<Gamma>},\n                            q, Q, A)) `\n                       (\\<Union>p\\<in>dom \\<Gamma>.\n                           \\<Union>Z.\n                              {({s. s = Z \\<and>\n                                    \\<Gamma>\\<turnstile> \\<langle>Call\n                             p,Normal\n                                s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                          Fault ` (- F) \\<and>\n                                    \\<Gamma>\\<turnstile>Call\n                   p \\<down> Normal s},\n                                p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                                p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n                                {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                             p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                 \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                   P)\n                  the (\\<Gamma> p) Q,A)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z a aa ab b pa Za y ya.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> pa \\<in> dom \\<Gamma> \\<and>\n                         (\\<forall>\\<sigma>.\n                             \\<Gamma>,{} \\<union>\n(\\<lambda>(P, q, Q, A).\n    (P \\<inter> {s. ((s, q), \\<sigma>, pa) \\<in> termi_call_steps \\<Gamma>},\n     q, Q, A)) `\n(\\<Union>p\\<in>dom \\<Gamma>.\n    \\<Union>Z.\n       {({s. s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      p,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n         p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n         p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n         {t. \\<Gamma>\\<turnstile> \\<langle>Call\n      p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                                \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                                  {s. s = Za \\<and>\n\\<Gamma>\\<turnstile> \\<langle>Call\n                               pa,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                             Fault ` (- F) \\<and>\n\\<Gamma>\\<turnstile>Call pa \\<down> Normal s})\n                                 the (\\<Gamma> pa)\n                                 {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                              pa,Normal\n                                  Za\\<rangle> \\<Rightarrow> Normal\n                       t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                       pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t})", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p Z a aa ab b pa Za y ya.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> pa \\<in> dom \\<Gamma>\n 2. \\<And>p Z a aa ab b pa Za y ya.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<sigma>.\n                            \\<Gamma>,{} \\<union>\n                                     (\\<lambda>(P, q, Q, A).\n   (P \\<inter> {s. ((s, q), \\<sigma>, pa) \\<in> termi_call_steps \\<Gamma>},\n    q, Q, A)) `\n                                     (\\<Union>p\\<in>dom \\<Gamma>.\n   \\<Union>Z.\n      {({s. s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n        p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                               \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                                 {s. s = Za \\<and>\n                                     \\<Gamma>\\<turnstile> \\<langle>Call\n                              pa,Normal\n                                  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                            Fault ` (- F) \\<and>\n                                     \\<Gamma>\\<turnstile>Call\n                    pa \\<down> Normal s})\n                                the (\\<Gamma> pa)\n                                {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                             pa,Normal\n                                 Za\\<rangle> \\<Rightarrow> Normal\n                      t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                      pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}", "apply  fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z a aa ab b pa Za y ya.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<sigma>.\n                            \\<Gamma>,{} \\<union>\n                                     (\\<lambda>(P, q, Q, A).\n   (P \\<inter> {s. ((s, q), \\<sigma>, pa) \\<in> termi_call_steps \\<Gamma>},\n    q, Q, A)) `\n                                     (\\<Union>p\\<in>dom \\<Gamma>.\n   \\<Union>Z.\n      {({s. s = Z \\<and>\n            \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal\n        s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n  Fault ` (- F) \\<and>\n            \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n        p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n        p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n        {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                               \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                                 {s. s = Za \\<and>\n                                     \\<Gamma>\\<turnstile> \\<langle>Call\n                              pa,Normal\n                                  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                            Fault ` (- F) \\<and>\n                                     \\<Gamma>\\<turnstile>Call\n                    pa \\<down> Normal s})\n                                the (\\<Gamma> pa)\n                                {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                             pa,Normal\n                                 Za\\<rangle> \\<Rightarrow> Normal\n                      t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                      pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z a aa ab b pa Za y ya \\<sigma>.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,{} \\<union>\n                                  (\\<lambda>(P, q, Q, A).\n(P \\<inter> {s. ((s, q), \\<sigma>, pa) \\<in> termi_call_steps \\<Gamma>}, q,\n Q, A)) `\n                                  (\\<Union>p\\<in>dom \\<Gamma>.\n\\<Union>Z.\n   {({s. s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n     p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n     {t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                              {s. s = Za \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>Call\n                           pa,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                  \\<Gamma>\\<turnstile>Call\n                 pa \\<down> Normal s})\n                             the (\\<Gamma> pa)\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          pa,Normal\n                              Za\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                   pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}", "apply (simp (no_asm_use) only : Un_empty_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z a aa ab b pa Za y ya \\<sigma>.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,(\\<lambda>(P, q, Q, A).\n(P \\<inter> {s. ((s, q), \\<sigma>, pa) \\<in> termi_call_steps \\<Gamma>}, q,\n Q, A)) `\n                                  (\\<Union>p\\<in>dom \\<Gamma>.\n\\<Union>Z.\n   {({s. s = Z \\<and>\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union> Fault ` (- F) \\<and>\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s},\n     p, {t. \\<Gamma>\\<turnstile> \\<langle>Call\n     p,Normal Z\\<rangle> \\<Rightarrow> Normal t},\n     {t. \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal Z\\<rangle> \\<Rightarrow> Abrupt t})})\n                            \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> ({\\<sigma>} \\<inter>\n                              {s. s = Za \\<and>\n                                  \\<Gamma>\\<turnstile> \\<langle>Call\n                           pa,Normal\n                               s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n                         Fault ` (- F) \\<and>\n                                  \\<Gamma>\\<turnstile>Call\n                 pa \\<down> Normal s})\n                             the (\\<Gamma> pa)\n                             {t. \\<Gamma>\\<turnstile> \\<langle>Call\n                          pa,Normal\n                              Za\\<rangle> \\<Rightarrow> Normal\n                   t},{t. \\<Gamma>\\<turnstile> \\<langle>Call\n                   pa,Normal Za\\<rangle> \\<Rightarrow> Abrupt t}", "apply (rule bdy)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p Z a aa ab b pa Za y ya \\<sigma>.\n       \\<lbrakk>Za \\<in> UNIV; \\<Gamma> p = Some y;\n        \\<Gamma> pa = Some ya\\<rbrakk>\n       \\<Longrightarrow> pa \\<in> dom \\<Gamma>", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>p\\<in>dom \\<Gamma>.\n     \\<forall>Z.\n        \\<Gamma>,{}\n           \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> {s.\n             s = Z \\<and>\n             \\<Gamma>\\<turnstile> \\<langle>Call\n      p,Normal\n         s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<union>\n   Fault ` (- F) \\<and>\n             \\<Gamma>\\<turnstile>Call p \\<down> Normal s}\n            Call p\n            {t. \\<Gamma>\\<turnstile> \\<langle>Call\n         p,Normal\n            Z\\<rangle> \\<Rightarrow> Normal\nt},{t. \\<Gamma>\\<turnstile> \\<langle>Call\np,Normal Z\\<rangle> \\<Rightarrow> Abrupt t}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}