{"file_name": "/home/qj213/afp-2021-10-22/thys/Simpl/Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simpl", "problem_names": ["lemma conjE_simp: \"(P \\<and> Q \\<Longrightarrow> PROP R) \\<equiv> (P \\<Longrightarrow> Q \\<Longrightarrow> PROP R)\"", "lemma CollectInt_iff: \"{s. P s} \\<inter> {s. Q s} = {s. P s \\<and> Q s}\"", "lemma Compl_Collect:\"-(Collect b) = {x. \\<not>(b x)}\"", "lemma Collect_False: \"{s. False} = {}\"", "lemma Collect_True: \"{s. True} = UNIV\"", "lemma triv_All_eq: \"\\<forall>x. P \\<equiv> P\"", "lemma triv_Ex_eq: \"\\<exists>x. P \\<equiv> P\"", "lemma Ex_True: \"\\<exists>b. b\"", "lemma Ex_False: \"\\<exists>b. \\<not>b\"", "lemma subset_unI1: \"A \\<subseteq> B \\<Longrightarrow> A \\<subseteq> B \\<union> C\"", "lemma subset_unI2: \"A \\<subseteq> C \\<Longrightarrow> A \\<subseteq> B \\<union> C\"", "lemma split_paired_UN: \"(\\<Union>p. (P p)) = (\\<Union>a b. (P (a,b)))\"", "lemma in_insert_hd: \"f \\<in> insert f X\"", "lemma lookup_Some_in_dom: \"\\<Gamma> p = Some bdy \\<Longrightarrow> p \\<in> dom \\<Gamma>\"", "lemma unit_object: \"(\\<forall>u::unit. P u) = P ()\"", "lemma unit_ex: \"(\\<exists>u::unit. P u) = P ()\"", "lemma unit_meta: \"(\\<And>(u::unit). PROP P u) \\<equiv> PROP P ()\"", "lemma unit_UN: \"(\\<Union>z::unit. P z) = P ()\"", "lemma subset_singleton_insert1: \"y = x \\<Longrightarrow> {y} \\<subseteq> insert x A\"", "lemma subset_singleton_insert2: \"{y} \\<subseteq> A \\<Longrightarrow> {y} \\<subseteq> insert x A\"", "lemma in_Specs_simp: \"(\\<forall>x\\<in>\\<Union>Z. {(P Z, p, Q Z, A Z)}. Prop x) =\n       (\\<forall>Z. Prop (P Z,p,Q Z,A Z))\"", "lemma in_set_Un_simp: \"(\\<forall>x\\<in>A \\<union> B. P x) = ((\\<forall>x \\<in> A. P x) \\<and> (\\<forall>x \\<in> B. P x))\"", "lemma split_all_conj: \"(\\<forall>x. P x \\<and> Q x) = ((\\<forall>x. P x) \\<and> (\\<forall>x. Q x))\"", "lemma image_Un_single_simp: \"f ` (\\<Union>Z. {P Z}) = (\\<Union>Z. {f (P Z)}) \"", "lemma measure_lex_prod_def':\n  \"f <*mlex*> r \\<equiv> ({(x,y). (x,y) \\<in> measure f \\<or> f x=f y \\<and> (x,y) \\<in>  r})\"", "lemma in_measure_iff: \"(x,y) \\<in> measure f = (f x < f y)\"", "lemma in_lex_iff:\n  \"((a,b),(x,y)) \\<in> r <*lex*> s = ((a,x) \\<in> r \\<or> (a=x \\<and> (b,y)\\<in>s))\"", "lemma in_mlex_iff:\n  \"(x,y) \\<in> f <*mlex*> r = (f x < f y \\<or> (f x=f y \\<and> (x,y) \\<in> r))\"", "lemma in_inv_image_iff: \"(x,y) \\<in> inv_image r f = ((f x, f y) \\<in> r)\"", "lemma wf_measure_lex_prod [simp,intro]:\n  assumes wf_r: \"wf r\"\n  shows \"wf (f <*mlex*> r)\"", "lemmas all_imp_to_ex = all_simps (5)", "lemma all_imp_eq_triv: \"(\\<forall>x. x = k \\<longrightarrow> Q) = Q\"\n                       \"(\\<forall>x. k = x \\<longrightarrow> Q) = Q\""], "translations": [["", "lemma conjE_simp: \"(P \\<and> Q \\<Longrightarrow> PROP R) \\<equiv> (P \\<Longrightarrow> Q \\<Longrightarrow> PROP R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<and> Q \\<Longrightarrow> PROP R) \\<equiv>\n    (\\<lbrakk>P; Q\\<rbrakk> \\<Longrightarrow> PROP R)", "by rule simp_all"], ["", "lemma CollectInt_iff: \"{s. P s} \\<inter> {s. Q s} = {s. P s \\<and> Q s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. P s} \\<inter> {s. Q s} = {s. P s \\<and> Q s}", "by auto"], ["", "lemma Compl_Collect:\"-(Collect b) = {x. \\<not>(b x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - Collect b = {x. \\<not> b x}", "by fastforce"], ["", "lemma Collect_False: \"{s. False} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. False} = {}", "by simp"], ["", "lemma Collect_True: \"{s. True} = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. True} = UNIV", "by simp"], ["", "lemma triv_All_eq: \"\\<forall>x. P \\<equiv> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. P \\<equiv> P", "by simp"], ["", "lemma triv_Ex_eq: \"\\<exists>x. P \\<equiv> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. P \\<equiv> P", "by simp"], ["", "lemma Ex_True: \"\\<exists>b. b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b", "by blast"], ["", "lemma Ex_False: \"\\<exists>b. \\<not>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. \\<not> b", "by blast"], ["", "definition mex::\"('a \\<Rightarrow> bool) \\<Rightarrow> bool\"\n  where \"mex P = Ex P\""], ["", "definition meq::\"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  where \"meq s Z = (s = Z)\""], ["", "lemma subset_unI1: \"A \\<subseteq> B \\<Longrightarrow> A \\<subseteq> B \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> A \\<subseteq> B \\<union> C", "by blast"], ["", "lemma subset_unI2: \"A \\<subseteq> C \\<Longrightarrow> A \\<subseteq> B \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> C \\<Longrightarrow> A \\<subseteq> B \\<union> C", "by blast"], ["", "lemma split_paired_UN: \"(\\<Union>p. (P p)) = (\\<Union>a b. (P (a,b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range P) = (\\<Union>a b. P (a, b))", "by auto"], ["", "lemma in_insert_hd: \"f \\<in> insert f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> insert f X", "by simp"], ["", "lemma lookup_Some_in_dom: \"\\<Gamma> p = Some bdy \\<Longrightarrow> p \\<in> dom \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy \\<Longrightarrow> p \\<in> dom \\<Gamma>", "by auto"], ["", "lemma unit_object: \"(\\<forall>u::unit. P u) = P ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>u. P u) = P ()", "by auto"], ["", "lemma unit_ex: \"(\\<exists>u::unit. P u) = P ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>u. P u) = P ()", "by auto"], ["", "lemma unit_meta: \"(\\<And>(u::unit). PROP P u) \\<equiv> PROP P ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u. PROP P u) \\<equiv> PROP P ()", "by auto"], ["", "lemma unit_UN: \"(\\<Union>z::unit. P z) = P ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range P) = P ()", "by auto"], ["", "lemma subset_singleton_insert1: \"y = x \\<Longrightarrow> {y} \\<subseteq> insert x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x \\<Longrightarrow> {y} \\<subseteq> insert x A", "by auto"], ["", "lemma subset_singleton_insert2: \"{y} \\<subseteq> A \\<Longrightarrow> {y} \\<subseteq> insert x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y} \\<subseteq> A \\<Longrightarrow> {y} \\<subseteq> insert x A", "by auto"], ["", "lemma in_Specs_simp: \"(\\<forall>x\\<in>\\<Union>Z. {(P Z, p, Q Z, A Z)}. Prop x) =\n       (\\<forall>Z. Prop (P Z,p,Q Z,A Z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>\\<Union>Z. {(P Z, p, Q Z, A Z)}. Prop x) =\n    (\\<forall>Z. Prop (P Z, p, Q Z, A Z))", "by auto"], ["", "lemma in_set_Un_simp: \"(\\<forall>x\\<in>A \\<union> B. P x) = ((\\<forall>x \\<in> A. P x) \\<and> (\\<forall>x \\<in> B. P x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>A \\<union> B. P x) =\n    ((\\<forall>x\\<in>A. P x) \\<and> (\\<forall>x\\<in>B. P x))", "by auto"], ["", "lemma split_all_conj: \"(\\<forall>x. P x \\<and> Q x) = ((\\<forall>x. P x) \\<and> (\\<forall>x. Q x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. P x \\<and> Q x) =\n    ((\\<forall>x. P x) \\<and> (\\<forall>x. Q x))", "by blast"], ["", "lemma image_Un_single_simp: \"f ` (\\<Union>Z. {P Z}) = (\\<Union>Z. {f (P Z)}) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` (\\<Union>Z. {P Z}) = (\\<Union>Z. {f (P Z)})", "by auto"], ["", "lemma measure_lex_prod_def':\n  \"f <*mlex*> r \\<equiv> ({(x,y). (x,y) \\<in> measure f \\<or> f x=f y \\<and> (x,y) \\<in>  r})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f <*mlex*> r \\<equiv>\n    {(x, y). (x, y) \\<in> measure f \\<or> f x = f y \\<and> (x, y) \\<in> r}", "by (auto simp add: mlex_prod_def inv_image_def)"], ["", "lemma in_measure_iff: \"(x,y) \\<in> measure f = (f x < f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> measure f) = (f x < f y)", "by (simp add: measure_def inv_image_def)"], ["", "lemma in_lex_iff:\n  \"((a,b),(x,y)) \\<in> r <*lex*> s = ((a,x) \\<in> r \\<or> (a=x \\<and> (b,y)\\<in>s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((a, b), x, y) \\<in> r <*lex*> s) =\n    ((a, x) \\<in> r \\<or> a = x \\<and> (b, y) \\<in> s)", "by (simp add: lex_prod_def)"], ["", "lemma in_mlex_iff:\n  \"(x,y) \\<in> f <*mlex*> r = (f x < f y \\<or> (f x=f y \\<and> (x,y) \\<in> r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> f <*mlex*> r) =\n    (f x < f y \\<or> f x = f y \\<and> (x, y) \\<in> r)", "by (simp add: measure_lex_prod_def' in_measure_iff)"], ["", "lemma in_inv_image_iff: \"(x,y) \\<in> inv_image r f = ((f x, f y) \\<in> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> inv_image r f) = ((f x, f y) \\<in> r)", "by (simp add: inv_image_def)"], ["", "text \\<open>This is actually the same as @{thm [source] wf_mlex}. However, this basic\nproof took me so long that I'm not willing to delete it.\n\\<close>"], ["", "lemma wf_measure_lex_prod [simp,intro]:\n  assumes wf_r: \"wf r\"\n  shows \"wf (f <*mlex*> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (f <*mlex*> r)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "assume \" \\<not> wf (f <*mlex*> r)\""], ["proof (state)\nthis:\n  \\<not> wf (f <*mlex*> r)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> wf (f <*mlex*> r)", "obtain g where \"\\<forall>i. (g (Suc i), g i) \\<in> f <*mlex*> r\""], ["proof (prove)\nusing this:\n  \\<not> wf (f <*mlex*> r)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<forall>i. (g (Suc i), g i) \\<in> f <*mlex*> r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: wf_iff_no_infinite_down_chain)"], ["proof (state)\nthis:\n  \\<forall>i. (g (Suc i), g i) \\<in> f <*mlex*> r\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "hence g: \"\\<forall>i. (g (Suc i), g i) \\<in> measure f \\<or>\n    f (g (Suc i)) = f (g i) \\<and> (g (Suc i), g i) \\<in> r\""], ["proof (prove)\nusing this:\n  \\<forall>i. (g (Suc i), g i) \\<in> f <*mlex*> r\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (g (Suc i), g i) \\<in> measure f \\<or>\n       f (g (Suc i)) = f (g i) \\<and> (g (Suc i), g i) \\<in> r", "by (simp add: measure_lex_prod_def')"], ["proof (state)\nthis:\n  \\<forall>i.\n     (g (Suc i), g i) \\<in> measure f \\<or>\n     f (g (Suc i)) = f (g i) \\<and> (g (Suc i), g i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "hence le_g: \"\\<forall>i. f (g (Suc i)) \\<le> f (g i)\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (g (Suc i), g i) \\<in> measure f \\<or>\n     f (g (Suc i)) = f (g i) \\<and> (g (Suc i), g i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<forall>i. f (g (Suc i)) \\<le> f (g i)", "by (auto simp add: in_measure_iff order_le_less)"], ["proof (state)\nthis:\n  \\<forall>i. f (g (Suc i)) \\<le> f (g i)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "have \"wf (measure f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure f)", "by simp"], ["proof (state)\nthis:\n  wf (measure f)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "hence \" \\<forall>Q. (\\<exists>x. x \\<in> Q) \\<longrightarrow> (\\<exists>z\\<in>Q. \\<forall>y. (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> Q)\""], ["proof (prove)\nusing this:\n  wf (measure f)\n\ngoal (1 subgoal):\n 1. \\<forall>Q.\n       (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> Q)", "by (simp add: wf_eq_minimal)"], ["proof (state)\nthis:\n  \\<forall>Q.\n     (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n     (\\<exists>z\\<in>Q.\n         \\<forall>y. (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> Q)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "from this [rule_format, of \"g ` UNIV\"]"], ["proof (chain)\npicking this:\n  \\<exists>x. x \\<in> range g \\<Longrightarrow>\n  \\<exists>z\\<in>range g.\n     \\<forall>y. (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g", "have \"\\<exists>z. z \\<in> range g \\<and> (\\<forall>y. (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g)\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> range g \\<Longrightarrow>\n  \\<exists>z\\<in>range g.\n     \\<forall>y. (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<in> range g \\<and>\n       (\\<forall>y.\n           (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g)", "by auto"], ["proof (state)\nthis:\n  \\<exists>z.\n     z \\<in> range g \\<and>\n     (\\<forall>y.\n         (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>z.\n     z \\<in> range g \\<and>\n     (\\<forall>y.\n         (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g)", "obtain z where\n    z: \"z \\<in> range g\" and\n    min_z: \"\\<forall>y. f y < f z \\<longrightarrow> y \\<notin> range g\""], ["proof (prove)\nusing this:\n  \\<exists>z.\n     z \\<in> range g \\<and>\n     (\\<forall>y.\n         (y, z) \\<in> measure f \\<longrightarrow> y \\<notin> range g)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> range g;\n         \\<forall>y. f y < f z \\<longrightarrow> y \\<notin> range g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: in_measure_iff)"], ["proof (state)\nthis:\n  z \\<in> range g\n  \\<forall>y. f y < f z \\<longrightarrow> y \\<notin> range g\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "from z"], ["proof (chain)\npicking this:\n  z \\<in> range g", "obtain k where\n    k: \"z = g k\""], ["proof (prove)\nusing this:\n  z \\<in> range g\n\ngoal (1 subgoal):\n 1. (\\<And>k. z = g k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  z = g k\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "have \"\\<forall>i. k \\<le> i \\<longrightarrow> f (g i) = f (g k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>k. f (g i) = f (g k)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. k \\<le> i \\<Longrightarrow> f (g i) = f (g k)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. k \\<le> i \\<Longrightarrow> f (g i) = f (g k)", "assume \"k \\<le> i\""], ["proof (state)\nthis:\n  k \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>i. k \\<le> i \\<Longrightarrow> f (g i) = f (g k)", "then"], ["proof (chain)\npicking this:\n  k \\<le> i", "show \"f (g i) = f (g k)\""], ["proof (prove)\nusing this:\n  k \\<le> i\n\ngoal (1 subgoal):\n 1. f (g i) = f (g k)", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<le> 0 \\<Longrightarrow> f (g 0) = f (g k)\n 2. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "case 0"], ["proof (state)\nthis:\n  k \\<le> 0\n\ngoal (2 subgoals):\n 1. k \\<le> 0 \\<Longrightarrow> f (g 0) = f (g k)\n 2. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "have \"k \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> 0", "by fact"], ["proof (state)\nthis:\n  k \\<le> 0\n\ngoal (2 subgoals):\n 1. k \\<le> 0 \\<Longrightarrow> f (g 0) = f (g k)\n 2. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "hence \"k = 0\""], ["proof (prove)\nusing this:\n  k \\<le> 0\n\ngoal (1 subgoal):\n 1. k = 0", "by simp"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k \\<le> 0 \\<Longrightarrow> f (g 0) = f (g k)\n 2. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "thus \"f (g 0) = f (g k)\""], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. f (g 0) = f (g k)", "by simp"], ["proof (state)\nthis:\n  f (g 0) = f (g k)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "case (Suc n)"], ["proof (state)\nthis:\n  k \\<le> n \\<Longrightarrow> f (g n) = f (g k)\n  k \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "have k_Suc_n: \"k \\<le> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> Suc n", "by fact"], ["proof (state)\nthis:\n  k \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>k \\<le> i \\<Longrightarrow> f (g i) = f (g k);\n        k \\<le> Suc i\\<rbrakk>\n       \\<Longrightarrow> f (g (Suc i)) = f (g k)", "then"], ["proof (chain)\npicking this:\n  k \\<le> Suc n", "show \"f (g (Suc n)) = f (g k)\""], ["proof (prove)\nusing this:\n  k \\<le> Suc n\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) = f (g k)", "proof (cases \"k = Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>k \\<le> Suc n; k = Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)\n 2. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "case True"], ["proof (state)\nthis:\n  k = Suc n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>k \\<le> Suc n; k = Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)\n 2. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = Suc n\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) = f (g k)", "by simp"], ["proof (state)\nthis:\n  f (g (Suc n)) = f (g k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "case False"], ["proof (state)\nthis:\n  k \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "with k_Suc_n"], ["proof (chain)\npicking this:\n  k \\<le> Suc n\n  k \\<noteq> Suc n", "have \"k \\<le> n\""], ["proof (prove)\nusing this:\n  k \\<le> Suc n\n  k \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. k \\<le> n", "by simp"], ["proof (state)\nthis:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "with Suc.hyps"], ["proof (chain)\npicking this:\n  k \\<le> n \\<Longrightarrow> f (g n) = f (g k)\n  k \\<le> n", "have n_k: \"f (g n) = f (g k)\""], ["proof (prove)\nusing this:\n  k \\<le> n \\<Longrightarrow> f (g n) = f (g k)\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. f (g n) = f (g k)", "by simp"], ["proof (state)\nthis:\n  f (g n) = f (g k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "from le_g"], ["proof (chain)\npicking this:\n  \\<forall>i. f (g (Suc i)) \\<le> f (g i)", "have le: \"f (g (Suc n)) \\<le> f (g n)\""], ["proof (prove)\nusing this:\n  \\<forall>i. f (g (Suc i)) \\<le> f (g i)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<le> f (g n)", "by simp"], ["proof (state)\nthis:\n  f (g (Suc n)) \\<le> f (g n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> Suc n; k \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> f (g (Suc n)) = f (g k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (g (Suc n)) = f (g k)", "proof (cases \"f (g (Suc n)) = f (g n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f (g (Suc n)) = f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)\n 2. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "case True"], ["proof (state)\nthis:\n  f (g (Suc n)) = f (g n)\n\ngoal (2 subgoals):\n 1. f (g (Suc n)) = f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)\n 2. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "with n_k"], ["proof (chain)\npicking this:\n  f (g n) = f (g k)\n  f (g (Suc n)) = f (g n)", "show ?thesis"], ["proof (prove)\nusing this:\n  f (g n) = f (g k)\n  f (g (Suc n)) = f (g n)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) = f (g k)", "by simp"], ["proof (state)\nthis:\n  f (g (Suc n)) = f (g k)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "case False"], ["proof (state)\nthis:\n  f (g (Suc n)) \\<noteq> f (g n)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "with le"], ["proof (chain)\npicking this:\n  f (g (Suc n)) \\<le> f (g n)\n  f (g (Suc n)) \\<noteq> f (g n)", "have \"f (g (Suc n)) < f (g n)\""], ["proof (prove)\nusing this:\n  f (g (Suc n)) \\<le> f (g n)\n  f (g (Suc n)) \\<noteq> f (g n)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) < f (g n)", "by simp"], ["proof (state)\nthis:\n  f (g (Suc n)) < f (g n)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "with n_k k"], ["proof (chain)\npicking this:\n  f (g n) = f (g k)\n  z = g k\n  f (g (Suc n)) < f (g n)", "have \"f (g (Suc n)) < f z\""], ["proof (prove)\nusing this:\n  f (g n) = f (g k)\n  z = g k\n  f (g (Suc n)) < f (g n)\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) < f z", "by simp"], ["proof (state)\nthis:\n  f (g (Suc n)) < f z\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "with min_z"], ["proof (chain)\npicking this:\n  \\<forall>y. f y < f z \\<longrightarrow> y \\<notin> range g\n  f (g (Suc n)) < f z", "have \"g (Suc n) \\<notin> range g\""], ["proof (prove)\nusing this:\n  \\<forall>y. f y < f z \\<longrightarrow> y \\<notin> range g\n  f (g (Suc n)) < f z\n\ngoal (1 subgoal):\n 1. g (Suc n) \\<notin> range g", "by blast"], ["proof (state)\nthis:\n  g (Suc n) \\<notin> range g\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "hence False"], ["proof (prove)\nusing this:\n  g (Suc n) \\<notin> range g\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) \\<noteq> f (g n) \\<Longrightarrow> f (g (Suc n)) = f (g k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. f (g (Suc n)) = f (g k)", "by simp"], ["proof (state)\nthis:\n  f (g (Suc n)) = f (g k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (g (Suc n)) = f (g k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (g (Suc n)) = f (g k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (g i) = f (g k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>k. f (g i) = f (g k)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "with k [symmetric]"], ["proof (chain)\npicking this:\n  g k = z\n  \\<forall>i\\<ge>k. f (g i) = f (g k)", "have \"\\<forall>i. k \\<le> i \\<longrightarrow> f (g i) = f z\""], ["proof (prove)\nusing this:\n  g k = z\n  \\<forall>i\\<ge>k. f (g i) = f (g k)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>k. f (g i) = f z", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>k. f (g i) = f z\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "hence \"\\<forall>i. k \\<le> i \\<longrightarrow> f (g (Suc i)) = f (g i)\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>k. f (g i) = f z\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>k. f (g (Suc i)) = f (g i)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>k. f (g (Suc i)) = f (g i)\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "with g"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     (g (Suc i), g i) \\<in> measure f \\<or>\n     f (g (Suc i)) = f (g i) \\<and> (g (Suc i), g i) \\<in> r\n  \\<forall>i\\<ge>k. f (g (Suc i)) = f (g i)", "have \"\\<forall>i. k \\<le> i \\<longrightarrow> (g (Suc i),(g i)) \\<in> r\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (g (Suc i), g i) \\<in> measure f \\<or>\n     f (g (Suc i)) = f (g i) \\<and> (g (Suc i), g i) \\<in> r\n  \\<forall>i\\<ge>k. f (g (Suc i)) = f (g i)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>k. (g (Suc i), g i) \\<in> r", "by (auto simp add: in_measure_iff order_less_le )"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>k. (g (Suc i), g i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "hence \"\\<forall>i. (g (Suc (i+k)),(g (i+k))) \\<in> r\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>k. (g (Suc i), g i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<forall>i. (g (Suc (i + k)), g (i + k)) \\<in> r", "by simp"], ["proof (state)\nthis:\n  \\<forall>i. (g (Suc (i + k)), g (i + k)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. (g (Suc (i + k)), g (i + k)) \\<in> r", "have \"\\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> r\""], ["proof (prove)\nusing this:\n  \\<forall>i. (g (Suc (i + k)), g (i + k)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> r", "by - (rule exI [where x=\"\\<lambda>i. g (i+k)\"],simp)"], ["proof (state)\nthis:\n  \\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<not> wf (f <*mlex*> r) \\<Longrightarrow> False", "with wf_r"], ["proof (chain)\npicking this:\n  wf r\n  \\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> r", "show False"], ["proof (prove)\nusing this:\n  wf r\n  \\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> r\n\ngoal (1 subgoal):\n 1. False", "by (simp add: wf_iff_no_infinite_down_chain)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas all_imp_to_ex = all_simps (5)"], ["", "(*\"\\<And>P Q. (\\<forall>x. P x \\<longrightarrow> Q) = ((\\<exists>x. P x) \\<longrightarrow> Q)\"\n\n Avoid introduction of existential quantification of states on negative\n position.\n*)"], ["", "lemma all_imp_eq_triv: \"(\\<forall>x. x = k \\<longrightarrow> Q) = Q\"\n                       \"(\\<forall>x. k = x \\<longrightarrow> Q) = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. x = k \\<longrightarrow> Q) = Q &&&\n    (\\<forall>x. k = x \\<longrightarrow> Q) = Q", "by auto"], ["", "end"]]}