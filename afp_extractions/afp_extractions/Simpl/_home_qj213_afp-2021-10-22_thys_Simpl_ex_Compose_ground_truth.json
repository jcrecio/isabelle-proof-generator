{"file_name": "/home/qj213/afp-2021-10-22/thys/Simpl/ex/Compose.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simpl", "problem_names": ["lemma lift\\<^sub>c_Skip: \"(lift\\<^sub>c prj inject c = Skip) = (c = Skip)\"", "lemma lift\\<^sub>c_Basic:\n  \"(lift\\<^sub>c prj inject c = Basic lf) = (\\<exists>f. c = Basic f \\<and> lf = lift\\<^sub>f prj inject f)\"", "lemma lift\\<^sub>c_Spec:\n  \"(lift\\<^sub>c prj inject c = Spec lr) = (\\<exists>r. c = Spec r \\<and> lr = lift\\<^sub>r prj inject r)\"", "lemma lift\\<^sub>c_Seq:\n  \"(lift\\<^sub>c prj inject c = Seq lc\\<^sub>1 lc\\<^sub>2) =\n     (\\<exists> c\\<^sub>1 c\\<^sub>2. c = Seq c\\<^sub>1 c\\<^sub>2 \\<and>\n               lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and> lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2 )\"", "lemma lift\\<^sub>c_Cond:\n  \"(lift\\<^sub>c prj inject c = Cond lb lc\\<^sub>1 lc\\<^sub>2) =\n     (\\<exists>b c\\<^sub>1 c\\<^sub>2. c = Cond b c\\<^sub>1 c\\<^sub>2 \\<and> lb = lift\\<^sub>s prj b \\<and>\n                lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and> lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2 )\"", "lemma lift\\<^sub>c_While:\n  \"(lift\\<^sub>c prj inject c = While lb lc') =\n     (\\<exists>b c'. c = While b c' \\<and> lb = lift\\<^sub>s prj b \\<and>\n               lc' = lift\\<^sub>c prj inject c')\"", "lemma lift\\<^sub>c_Call:\n  \"(lift\\<^sub>c prj inject c = Call p) = (c = Call p)\"", "lemma lift\\<^sub>c_DynCom:\n  \"(lift\\<^sub>c prj inject c = DynCom lc) =\n     (\\<exists>C. c=DynCom C \\<and> lc = (\\<lambda>s. lift\\<^sub>c prj inject (C (prj s))))\"", "lemma lift\\<^sub>c_Guard:\n  \"(lift\\<^sub>c prj inject c = Guard f lg lc') =\n     (\\<exists>g c'. c = Guard f g c' \\<and> lg = lift\\<^sub>s prj g \\<and>\n             lc' = lift\\<^sub>c prj inject c')\"", "lemma lift\\<^sub>c_Throw:\n  \"(lift\\<^sub>c prj inject c = Throw) = (c = Throw)\"", "lemma lift\\<^sub>c_Catch:\n  \"(lift\\<^sub>c prj inject c = Catch lc\\<^sub>1 lc\\<^sub>2) =\n     (\\<exists> c\\<^sub>1 c\\<^sub>2. c = Catch c\\<^sub>1 c\\<^sub>2 \\<and>\n               lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and> lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2 )\"", "lemma xstate_map_simps [simp]:\n\"xstate_map g (Normal s) = Normal (g s)\"\n\"xstate_map g (Abrupt s) = Abrupt (g s)\"\n\"xstate_map g (Fault f) = (Fault f)\"\n\"xstate_map g Stuck = Stuck\"", "lemma xstate_map_Normal_conv:\n  \"xstate_map g S = Normal s = (\\<exists>s'. S=Normal s' \\<and> s = g s')\"", "lemma xstate_map_Abrupt_conv:\n  \"xstate_map g S = Abrupt s = (\\<exists>s'. S=Abrupt s' \\<and> s = g s')\"", "lemma xstate_map_Fault_conv:\n  \"xstate_map g S = Fault f = (S=Fault f)\"", "lemma xstate_map_Stuck_conv:\n  \"xstate_map g S = Stuck = (S=Stuck)\"", "lemmas xstate_map_convs = xstate_map_Normal_conv xstate_map_Abrupt_conv\n xstate_map_Fault_conv xstate_map_Stuck_conv", "lemma state_simps [simp]:\n\"state (Normal s) = s\"\n\"state (Abrupt s) = s\"", "lemma (in lift_state_space) lift\\<^sub>f_simp:\n \"lift\\<^sub>f f \\<equiv> \\<lambda>S. inject S (f (project S))\"", "lemma (in lift_state_space) lift\\<^sub>s_simp:\n  \"lift\\<^sub>s A \\<equiv> {S. project S \\<in> A}\"", "lemma (in lift_state_space) lift\\<^sub>r_simp:\n\"lift\\<^sub>r R \\<equiv> {(S,T). (project S,project T) \\<in> R \\<and> T=inject S (project T)}\"", "lemma (in lift_state_space) lift\\<^sub>c_Skip_simp [simp]:\n \"lift\\<^sub>c Skip = Skip\"", "lemma (in lift_state_space) lift\\<^sub>c_Basic_simp [simp]:\n\"lift\\<^sub>c (Basic f) = Basic (lift\\<^sub>f f)\"", "lemma (in lift_state_space) lift\\<^sub>c_Spec_simp [simp]:\n\"lift\\<^sub>c (Spec r) = Spec (lift\\<^sub>r r)\"", "lemma (in lift_state_space) lift\\<^sub>c_Seq_simp [simp]:\n\"lift\\<^sub>c (Seq c\\<^sub>1 c\\<^sub>2)  =\n  (Seq (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2))\"", "lemma (in lift_state_space) lift\\<^sub>c_Cond_simp [simp]:\n\"lift\\<^sub>c (Cond b c\\<^sub>1 c\\<^sub>2) =\n  Cond (lift\\<^sub>s b) (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)\"", "lemma (in lift_state_space) lift\\<^sub>c_While_simp [simp]:\n\"lift\\<^sub>c (While b c) =\n  While (lift\\<^sub>s b) (lift\\<^sub>c c)\"", "lemma (in lift_state_space) lift\\<^sub>c_Call_simp [simp]:\n\"lift\\<^sub>c (Call p) = Call p\"", "lemma (in lift_state_space) lift\\<^sub>c_DynCom_simp [simp]:\n\"lift\\<^sub>c (DynCom c) = DynCom (\\<lambda>s. lift\\<^sub>c (c (project s)))\"", "lemma (in lift_state_space) lift\\<^sub>c_Guard_simp [simp]:\n\"lift\\<^sub>c (Guard f g c) = Guard f (lift\\<^sub>s g) (lift\\<^sub>c c)\"", "lemma (in lift_state_space) lift\\<^sub>c_Throw_simp [simp]:\n\"lift\\<^sub>c Throw = Throw\"", "lemma (in lift_state_space) lift\\<^sub>c_Catch_simp [simp]:\n\"lift\\<^sub>c (Catch c\\<^sub>1 c\\<^sub>2) =\n  Catch (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)\"", "lemma (in lift_state_space) project\\<^sub>x_def':\n\"project\\<^sub>x s \\<equiv> (case s of\n                 Normal s \\<Rightarrow> Normal (project s)\n                | Abrupt s \\<Rightarrow> Abrupt (project s)\n                | Fault f \\<Rightarrow> Fault f\n                | Stuck \\<Rightarrow> Stuck)\"", "lemma (in lift_state_space) lift\\<^sub>e_def':\n  \"lift\\<^sub>e \\<Gamma> p \\<equiv> (case \\<Gamma> p of Some bdy \\<Rightarrow> Some (lift\\<^sub>c bdy) | None \\<Rightarrow> None)\"", "lemma (in lift_state_space)\n\"{(S,T). \\<exists>t. (project S,t) \\<in> r \\<and> T=inject S t}\n \\<subseteq> {(S,T). (project S,project T) \\<in> r \\<and> T=inject S (project T)}\"", "lemma (in lift_state_space)\n\"{(S,T). (project S,project T) \\<in> r \\<and> T=inject S (project T)}\n \\<subseteq> {(S,T). \\<exists>t. (project S,t) \\<in> r \\<and> T=inject S t}\"", "lemma (in lift_state_space) lift_exec:\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lc,s\\<rangle> \\<Rightarrow> t\"\nshows \"\\<And>c. \\<lbrakk> lift\\<^sub>c c = lc\\<rbrakk> \\<Longrightarrow>\n              \\<Gamma>\\<turnstile>\\<langle>c,project\\<^sub>x s\\<rangle> \\<Rightarrow>  project\\<^sub>x t\"", "lemma (in lift_state_space) lift_exec':\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lift\\<^sub>c c,s\\<rangle> \\<Rightarrow> t\"\nshows \"\\<Gamma>\\<turnstile>\\<langle>c,project\\<^sub>x s\\<rangle> \\<Rightarrow> project\\<^sub>x t\"", "lemma (in lift_state_space) lift_valid:\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows\n   \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\"", "lemma (in lift_state_space) lift_hoarep:\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows\n   \"(lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\"", "lemma (in lift_state_space) lift_hoarep':\n  \"\\<forall>Z. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z) \\<Longrightarrow>\n    \\<forall>Z. (lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s (P Z)) (lift\\<^sub>c c)\n                                  (lift\\<^sub>s (Q Z)),(lift\\<^sub>s (A Z))\"", "lemma (in lift_state_space) lift_termination:\nassumes termi: \"\\<Gamma>\\<turnstile>c\\<down>s\"\nshows \"\\<And>S. project\\<^sub>x S = s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma> \\<turnstile>(lift\\<^sub>c c)\\<down>S\"", "lemma (in lift_state_space) lift_termination':\nassumes termi: \"\\<Gamma>\\<turnstile>c\\<down>project\\<^sub>x S\"\nshows \"lift\\<^sub>e \\<Gamma> \\<turnstile>(lift\\<^sub>c c)\\<down>S\"", "lemma (in lift_state_space) lift_validt:\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\"", "lemma (in lift_state_space) lift_hoaret:\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows\n   \"(lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\"", "lemma (in lift_state_space_ext) lift_exec_inject_same:\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lc,s\\<rangle> \\<Rightarrow> t\"\nshows \"\\<And>c. \\<lbrakk>lift\\<^sub>c c = lc; t \\<notin> (Fault ` UNIV) \\<union> {Stuck}\\<rbrakk> \\<Longrightarrow>\n              state t = inject (state s) (project (state t))\"", "lemma (in lift_state_space_ext) valid_inject_project:\n assumes noFaultStuck:\n  \"\\<Gamma>\\<turnstile>\\<langle>c,Normal (project \\<sigma>)\\<rangle> \\<Rightarrow>\\<notin>(Fault ` UNIV \\<union> {Stuck})\"\n shows \"lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} lift\\<^sub>c c\n                {t. t=inject \\<sigma> (project t)}, {t. t=inject \\<sigma> (project t)}\"", "lemma (in lift_state_space_ext) lift_exec_inject_same':\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lift\\<^sub>c c,S\\<rangle> \\<Rightarrow> T\"\nshows \"\\<And>c. \\<lbrakk>T \\<notin> (Fault ` UNIV) \\<union> {Stuck}\\<rbrakk> \\<Longrightarrow>\n              state T = inject (state S) (project (state T))\"", "lemma (in lift_state_space_ext) valid_lift_modifies:\n  assumes valid: \"\\<forall>s. \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> {s} c (Modif s),(ModifAbr s)\"\n  shows \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^bsub>/F\\<^esub> {S} (lift\\<^sub>c c)\n           {T. T \\<in> lift\\<^sub>s (Modif (project S)) \\<and> T=inject S (project T)},\n           {T. T \\<in> lift\\<^sub>s (ModifAbr (project S)) \\<and> T=inject S (project T)}\"", "lemma (in lift_state_space_ext) hoare_lift_modifies:\n  assumes deriv: \"\\<forall>\\<sigma>. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} c (Modif \\<sigma>),(ModifAbr \\<sigma>)\"\n  shows \"\\<forall>\\<sigma>. (lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} (lift\\<^sub>c c)\n           {T. T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)) \\<and> T=inject \\<sigma> (project T)},\n           {T. T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)) \\<and> T=inject \\<sigma> (project T)}\"", "lemma (in lift_state_space_ext) hoare_lift_modifies':\n  assumes deriv: \"\\<forall>\\<sigma>. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} c (Modif \\<sigma>),(ModifAbr \\<sigma>)\"\n  shows \"\\<forall>\\<sigma>. (lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} (lift\\<^sub>c c)\n           {T. T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)) \\<and>\n                   (\\<exists>T'. T=inject \\<sigma> T')},\n           {T. T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)) \\<and>\n                   (\\<exists>T'. T=inject \\<sigma> T')}\"", "lemma rename_Skip: \"rename h c = Skip = (c=Skip)\"", "lemma rename_Basic:\n  \"(rename h c = Basic f) = (c=Basic f)\"", "lemma rename_Spec:\n  \"(rename h c = Spec r) = (c=Spec r)\"", "lemma rename_Seq:\n  \"(rename h c = Seq rc\\<^sub>1 rc\\<^sub>2) =\n     (\\<exists> c\\<^sub>1 c\\<^sub>2. c = Seq c\\<^sub>1 c\\<^sub>2 \\<and>\n               rc\\<^sub>1 = rename h c\\<^sub>1 \\<and> rc\\<^sub>2 = rename h c\\<^sub>2 )\"", "lemma rename_Cond:\n  \"(rename h c = Cond b rc\\<^sub>1 rc\\<^sub>2) =\n     (\\<exists>c\\<^sub>1 c\\<^sub>2. c = Cond b c\\<^sub>1 c\\<^sub>2  \\<and> rc\\<^sub>1 = rename h c\\<^sub>1 \\<and> rc\\<^sub>2 = rename h c\\<^sub>2 )\"", "lemma rename_While:\n  \"(rename h c = While b rc') = (\\<exists>c'. c = While b c' \\<and> rc' = rename h c')\"", "lemma rename_Call:\n  \"(rename h c = Call q) = (\\<exists>p. c = Call p \\<and> q=h p)\"", "lemma rename_DynCom:\n  \"(rename h c = DynCom rc) = (\\<exists>C. c=DynCom C \\<and> rc = (\\<lambda>s. rename h (C s)))\"", "lemma rename_Guard:\n  \"(rename h c = Guard f g rc') =\n     (\\<exists>c'. c = Guard f g c' \\<and> rc' = rename h c')\"", "lemma rename_Throw:\n  \"(rename h c = Throw) = (c = Throw)\"", "lemma rename_Catch:\n  \"(rename h c = Catch rc\\<^sub>1 rc\\<^sub>2) =\n     (\\<exists>c\\<^sub>1 c\\<^sub>2. c = Catch c\\<^sub>1 c\\<^sub>2 \\<and> rc\\<^sub>1 = rename h c\\<^sub>1 \\<and> rc\\<^sub>2 = rename h c\\<^sub>2 )\"", "lemma exec_rename_to_exec:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (h p) = Some (rename h bdy)\"\n  assumes exec: \"\\<Gamma>'\\<turnstile>\\<langle>rc,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<And>c. rename h c = rc\\<Longrightarrow>  \\<exists>t'. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and> (t'=Stuck \\<or> t'=t)\"", "lemma exec_rename_to_exec':\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes exec: \"\\<Gamma>'\\<turnstile>\\<langle>rename N c,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<exists>t'. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and> (t'=Stuck \\<or> t'=t)\"", "lemma valid_to_valid_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P (rename N c) Q,A\"", "lemma hoare_to_hoare_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>',{}\\<turnstile>\\<^bsub>/F\\<^esub> P (rename N c) Q,A\"", "lemma hoare_to_hoare_rename':\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<forall>Z. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z)\"\n  shows \"\\<forall>Z. \\<Gamma>',{}\\<turnstile>\\<^bsub>/F\\<^esub> (P Z) (rename N c) (Q Z),(A Z)\"", "lemma terminates_to_terminates_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes termi: \"\\<Gamma>\\<turnstile> c \\<down> s\"\n  assumes noStuck: \"\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\"\n  shows \"\\<Gamma>'\\<turnstile> rename N c \\<down> s\"", "lemma validt_to_validt_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P (rename N c) Q,A\"", "lemma hoaret_to_hoaret_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>',{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P (rename N c) Q,A\"", "lemma hoaret_to_hoaret_rename':\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<forall>Z. \\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z)\"\n  shows \"\\<forall>Z. \\<Gamma>',{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) (rename N c) (Q Z),(A Z)\"", "lemma lift\\<^sub>c_whileAnno [simp]: \"lift\\<^sub>c prj inject (whileAnno b I V c) =\n    whileAnno (lift\\<^sub>s prj b)\n              (lift\\<^sub>s prj I) (lift\\<^sub>r prj inject V) (lift\\<^sub>c prj inject c)\"", "lemma lift\\<^sub>c_block [simp]: \"lift\\<^sub>c prj inject (block init bdy return c) =\n  block (lift\\<^sub>f prj inject init) (lift\\<^sub>c prj inject bdy)\n        (\\<lambda>s. (lift\\<^sub>f prj inject (return (prj s))))\n        (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))\"", "lemma lift\\<^sub>c_call [simp]: \"lift\\<^sub>c prj inject (call init p return c) =\n  call (lift\\<^sub>f prj inject init) p\n        (\\<lambda>s. (lift\\<^sub>f prj inject (return (prj s))))\n        (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))\"", "lemma rename_whileAnno [simp]: \"rename h (whileAnno b I V c) =\n   whileAnno b I V (rename h c)\"", "lemma rename_block [simp]: \"rename h (block init bdy return c) =\n  block init (rename h bdy) return (\\<lambda>s t. rename h (c s t))\"", "lemma rename_call [simp]: \"rename h (call init p return c) =\n  call init (h p) return (\\<lambda>s t. rename h (c s t))\""], "translations": [["", "lemma lift\\<^sub>c_Skip: \"(lift\\<^sub>c prj inject c = Skip) = (c = Skip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Skip) = (c = Skip)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Basic:\n  \"(lift\\<^sub>c prj inject c = Basic lf) = (\\<exists>f. c = Basic f \\<and> lf = lift\\<^sub>f prj inject f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Basic lf) =\n    (\\<exists>f. c = Basic f \\<and> lf = lift\\<^sub>f prj inject f)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Spec:\n  \"(lift\\<^sub>c prj inject c = Spec lr) = (\\<exists>r. c = Spec r \\<and> lr = lift\\<^sub>r prj inject r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Spec lr) =\n    (\\<exists>r. c = Spec r \\<and> lr = lift\\<^sub>r prj inject r)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Seq:\n  \"(lift\\<^sub>c prj inject c = Seq lc\\<^sub>1 lc\\<^sub>2) =\n     (\\<exists> c\\<^sub>1 c\\<^sub>2. c = Seq c\\<^sub>1 c\\<^sub>2 \\<and>\n               lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and> lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2 )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Seq lc\\<^sub>1 lc\\<^sub>2) =\n    (\\<exists>c\\<^sub>1 c\\<^sub>2.\n        c = Seq c\\<^sub>1 c\\<^sub>2 \\<and>\n        lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and>\n        lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Cond:\n  \"(lift\\<^sub>c prj inject c = Cond lb lc\\<^sub>1 lc\\<^sub>2) =\n     (\\<exists>b c\\<^sub>1 c\\<^sub>2. c = Cond b c\\<^sub>1 c\\<^sub>2 \\<and> lb = lift\\<^sub>s prj b \\<and>\n                lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and> lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2 )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Cond lb lc\\<^sub>1 lc\\<^sub>2) =\n    (\\<exists>b c\\<^sub>1 c\\<^sub>2.\n        c = Cond b c\\<^sub>1 c\\<^sub>2 \\<and>\n        lb = lift\\<^sub>s prj b \\<and>\n        lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and>\n        lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_While:\n  \"(lift\\<^sub>c prj inject c = While lb lc') =\n     (\\<exists>b c'. c = While b c' \\<and> lb = lift\\<^sub>s prj b \\<and>\n               lc' = lift\\<^sub>c prj inject c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = While lb lc') =\n    (\\<exists>b c'.\n        c = While b c' \\<and>\n        lb = lift\\<^sub>s prj b \\<and> lc' = lift\\<^sub>c prj inject c')", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Call:\n  \"(lift\\<^sub>c prj inject c = Call p) = (c = Call p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Call p) = (c = Call p)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_DynCom:\n  \"(lift\\<^sub>c prj inject c = DynCom lc) =\n     (\\<exists>C. c=DynCom C \\<and> lc = (\\<lambda>s. lift\\<^sub>c prj inject (C (prj s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = DynCom lc) =\n    (\\<exists>C.\n        c = DynCom C \\<and>\n        lc = (\\<lambda>s. lift\\<^sub>c prj inject (C (prj s))))", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Guard:\n  \"(lift\\<^sub>c prj inject c = Guard f lg lc') =\n     (\\<exists>g c'. c = Guard f g c' \\<and> lg = lift\\<^sub>s prj g \\<and>\n             lc' = lift\\<^sub>c prj inject c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Guard f lg lc') =\n    (\\<exists>g c'.\n        c = Guard f g c' \\<and>\n        lg = lift\\<^sub>s prj g \\<and> lc' = lift\\<^sub>c prj inject c')", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Throw:\n  \"(lift\\<^sub>c prj inject c = Throw) = (c = Throw)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Throw) = (c = Throw)", "by (cases c) auto"], ["", "lemma lift\\<^sub>c_Catch:\n  \"(lift\\<^sub>c prj inject c = Catch lc\\<^sub>1 lc\\<^sub>2) =\n     (\\<exists> c\\<^sub>1 c\\<^sub>2. c = Catch c\\<^sub>1 c\\<^sub>2 \\<and>\n               lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and> lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2 )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift\\<^sub>c prj inject c = Catch lc\\<^sub>1 lc\\<^sub>2) =\n    (\\<exists>c\\<^sub>1 c\\<^sub>2.\n        c = Catch c\\<^sub>1 c\\<^sub>2 \\<and>\n        lc\\<^sub>1 = lift\\<^sub>c prj inject c\\<^sub>1 \\<and>\n        lc\\<^sub>2 = lift\\<^sub>c prj inject c\\<^sub>2)", "by (cases c) auto"], ["", "definition xstate_map:: \"('S \\<Rightarrow> 's) \\<Rightarrow> ('S,'f) xstate \\<Rightarrow> ('s,'f) xstate\"\nwhere\n\"xstate_map g x = (case x of\n                      Normal s \\<Rightarrow> Normal (g s)\n                    | Abrupt s \\<Rightarrow> Abrupt (g s)\n                    | Fault f \\<Rightarrow> Fault f\n                    | Stuck \\<Rightarrow> Stuck)\""], ["", "lemma xstate_map_simps [simp]:\n\"xstate_map g (Normal s) = Normal (g s)\"\n\"xstate_map g (Abrupt s) = Abrupt (g s)\"\n\"xstate_map g (Fault f) = (Fault f)\"\n\"xstate_map g Stuck = Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xstate_map g (Normal s) = Normal (g s) &&&\n     xstate_map g (Abrupt s) = Abrupt (g s)) &&&\n    xstate_map g (Fault f) = Fault f &&& xstate_map g Stuck = Stuck", "by (auto simp add: xstate_map_def)"], ["", "lemma xstate_map_Normal_conv:\n  \"xstate_map g S = Normal s = (\\<exists>s'. S=Normal s' \\<and> s = g s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xstate_map g S = Normal s) =\n    (\\<exists>s'. S = Normal s' \\<and> s = g s')", "by (cases S) auto"], ["", "lemma xstate_map_Abrupt_conv:\n  \"xstate_map g S = Abrupt s = (\\<exists>s'. S=Abrupt s' \\<and> s = g s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xstate_map g S = Abrupt s) =\n    (\\<exists>s'. S = Abrupt s' \\<and> s = g s')", "by (cases S) auto"], ["", "lemma xstate_map_Fault_conv:\n  \"xstate_map g S = Fault f = (S=Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xstate_map g S = Fault f) = (S = Fault f)", "by (cases S) auto"], ["", "lemma xstate_map_Stuck_conv:\n  \"xstate_map g S = Stuck = (S=Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xstate_map g S = Stuck) = (S = Stuck)", "by (cases S) auto"], ["", "lemmas xstate_map_convs = xstate_map_Normal_conv xstate_map_Abrupt_conv\n xstate_map_Fault_conv xstate_map_Stuck_conv"], ["", "definition state:: \"('s,'f) xstate \\<Rightarrow> 's\"\nwhere\n\"state x = (case x of\n               Normal s \\<Rightarrow> s\n             | Abrupt s \\<Rightarrow> s\n             | Fault g \\<Rightarrow> undefined\n             | Stuck \\<Rightarrow> undefined)\""], ["", "lemma state_simps [simp]:\n\"state (Normal s) = s\"\n\"state (Abrupt s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state (Normal s) = s &&& state (Abrupt s) = s", "by (auto simp add: state_def )"], ["", "locale lift_state_space =\n  fixes project::\"'S \\<Rightarrow> 's\"\n  fixes \"inject\"::\"'S \\<Rightarrow> 's \\<Rightarrow> 'S\"\n  fixes \"project\\<^sub>x\"::\"('S,'f) xstate \\<Rightarrow> ('s,'f) xstate\"\n  fixes \"lift\\<^sub>e\"::\"('s,'p,'f) body \\<Rightarrow> ('S,'p,'f) body\"\n  fixes lift\\<^sub>c:: \"('s,'p,'f) com \\<Rightarrow> ('S,'p,'f) com\"\n  fixes lift\\<^sub>f:: \"('s \\<Rightarrow> 's) \\<Rightarrow> ('S \\<Rightarrow> 'S)\"\n  fixes lift\\<^sub>s:: \"'s set \\<Rightarrow> 'S set\"\n  fixes lift\\<^sub>r:: \"('s \\<times> 's) set \\<Rightarrow> ('S \\<times> 'S) set\"\n  assumes proj_inj_commute: \"\\<And>S s.  project (inject S s) = s\"\n  defines \"lift\\<^sub>c \\<equiv> Compose.lift\\<^sub>c project inject\"\n  defines \"project\\<^sub>x \\<equiv> xstate_map project\"\n  defines \"lift\\<^sub>e \\<equiv> (\\<lambda>\\<Gamma> p. map_option lift\\<^sub>c (\\<Gamma> p))\"\n  defines \"lift\\<^sub>f \\<equiv> Compose.lift\\<^sub>f project inject\"\n  defines \"lift\\<^sub>s \\<equiv> Compose.lift\\<^sub>s project\"\n  defines \"lift\\<^sub>r \\<equiv> Compose.lift\\<^sub>r project inject\""], ["", "lemma (in lift_state_space) lift\\<^sub>f_simp:\n \"lift\\<^sub>f f \\<equiv> \\<lambda>S. inject S (f (project S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>f f \\<equiv> \\<lambda>S. inject S (f (project S))", "by (simp add: lift\\<^sub>f_def Compose.lift\\<^sub>f_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>s_simp:\n  \"lift\\<^sub>s A \\<equiv> {S. project S \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>s A \\<equiv> {S. project S \\<in> A}", "by  (simp add: lift\\<^sub>s_def Compose.lift\\<^sub>s_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>r_simp:\n\"lift\\<^sub>r R \\<equiv> {(S,T). (project S,project T) \\<in> R \\<and> T=inject S (project T)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>r R \\<equiv>\n    {(S, T). (project S, project T) \\<in> R \\<and> T = inject S (project T)}", "by  (simp add: lift\\<^sub>r_def Compose.lift\\<^sub>r_def)"], ["", "(* Causes loop when instantiating locale\nlemmas (in lift_state_space) lift\\<^sub>f_simp  = Compose.lift\\<^sub>f_def\n [of project \"inject\", folded lift\\<^sub>f_def]\nlemmas (in lift_state_space) lift\\<^sub>s_simp  = Compose.lift\\<^sub>s_def\n [of project, folded lift\\<^sub>s_def]\nlemmas (in lift_state_space) lift\\<^sub>r_simp  = Compose.lift\\<^sub>r_def\n [of project \"inject\", folded lift\\<^sub>r_def]\n*)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Skip_simp [simp]:\n \"lift\\<^sub>c Skip = Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c Skip = Skip", "by (simp add: lift\\<^sub>c_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Basic_simp [simp]:\n\"lift\\<^sub>c (Basic f) = Basic (lift\\<^sub>f f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Basic f) = Basic (lift\\<^sub>f f)", "by (simp add: lift\\<^sub>c_def lift\\<^sub>f_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Spec_simp [simp]:\n\"lift\\<^sub>c (Spec r) = Spec (lift\\<^sub>r r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Spec r) = Spec (lift\\<^sub>r r)", "by (simp add: lift\\<^sub>c_def lift\\<^sub>r_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Seq_simp [simp]:\n\"lift\\<^sub>c (Seq c\\<^sub>1 c\\<^sub>2)  =\n  (Seq (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Seq c\\<^sub>1 c\\<^sub>2) =\n    Seq (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)", "by (simp add: lift\\<^sub>c_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Cond_simp [simp]:\n\"lift\\<^sub>c (Cond b c\\<^sub>1 c\\<^sub>2) =\n  Cond (lift\\<^sub>s b) (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Cond b c\\<^sub>1 c\\<^sub>2) =\n    Cond (lift\\<^sub>s b) (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)", "by (simp add: lift\\<^sub>c_def lift\\<^sub>s_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_While_simp [simp]:\n\"lift\\<^sub>c (While b c) =\n  While (lift\\<^sub>s b) (lift\\<^sub>c c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (While b c) = While (lift\\<^sub>s b) (lift\\<^sub>c c)", "by (simp add: lift\\<^sub>c_def lift\\<^sub>s_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Call_simp [simp]:\n\"lift\\<^sub>c (Call p) = Call p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Call p) = Call p", "by (simp add: lift\\<^sub>c_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_DynCom_simp [simp]:\n\"lift\\<^sub>c (DynCom c) = DynCom (\\<lambda>s. lift\\<^sub>c (c (project s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (DynCom c) =\n    DynCom (\\<lambda>s. lift\\<^sub>c (c (project s)))", "by (simp add: lift\\<^sub>c_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Guard_simp [simp]:\n\"lift\\<^sub>c (Guard f g c) = Guard f (lift\\<^sub>s g) (lift\\<^sub>c c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Guard f g c) = Guard f (lift\\<^sub>s g) (lift\\<^sub>c c)", "by (simp add: lift\\<^sub>c_def lift\\<^sub>s_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Throw_simp [simp]:\n\"lift\\<^sub>c Throw = Throw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c Throw = Throw", "by (simp add: lift\\<^sub>c_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>c_Catch_simp [simp]:\n\"lift\\<^sub>c (Catch c\\<^sub>1 c\\<^sub>2) =\n  Catch (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c (Catch c\\<^sub>1 c\\<^sub>2) =\n    Catch (lift\\<^sub>c c\\<^sub>1) (lift\\<^sub>c c\\<^sub>2)", "by (simp add: lift\\<^sub>c_def)"], ["", "lemma (in lift_state_space) project\\<^sub>x_def':\n\"project\\<^sub>x s \\<equiv> (case s of\n                 Normal s \\<Rightarrow> Normal (project s)\n                | Abrupt s \\<Rightarrow> Abrupt (project s)\n                | Fault f \\<Rightarrow> Fault f\n                | Stuck \\<Rightarrow> Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project\\<^sub>x s \\<equiv>\n    case s of Normal s \\<Rightarrow> Normal (project s)\n    | Abrupt s \\<Rightarrow> Abrupt (project s)\n    | Fault f \\<Rightarrow> Fault f | Stuck \\<Rightarrow> Stuck", "by (simp add: xstate_map_def project\\<^sub>x_def)"], ["", "lemma (in lift_state_space) lift\\<^sub>e_def':\n  \"lift\\<^sub>e \\<Gamma> p \\<equiv> (case \\<Gamma> p of Some bdy \\<Rightarrow> Some (lift\\<^sub>c bdy) | None \\<Rightarrow> None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma> p \\<equiv>\n    case \\<Gamma> p of None \\<Rightarrow> None\n    | Some bdy \\<Rightarrow> Some (lift\\<^sub>c bdy)", "by (simp add: lift\\<^sub>e_def map_option_case)"], ["", "text \\<open>\nThe problem is that @{term \"(lift\\<^sub>c project inject \\<circ> \\<Gamma>)\"} is quite\na strong premise. The problem is that @{term \"\\<Gamma>\"} is a function here.\nA map would be better. We only have to lift those procedures in the domain\nof @{term \"\\<Gamma>\"}:\n\\<open>\\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' p = Some lift\\<^sub>c project inject bdy\\<close>.\nWe then can com up with theorems that allow us to extend the domains\nof @{term \\<Gamma>} and preserve validity.\n\\<close>"], ["", "lemma (in lift_state_space)\n\"{(S,T). \\<exists>t. (project S,t) \\<in> r \\<and> T=inject S t}\n \\<subseteq> {(S,T). (project S,project T) \\<in> r \\<and> T=inject S (project T)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(S, T). \\<exists>t. (project S, t) \\<in> r \\<and> T = inject S t}\n    \\<subseteq> {(S, T).\n                 (project S, project T) \\<in> r \\<and>\n                 T = inject S (project T)}", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a t.\n       (project a, t) \\<in> r \\<Longrightarrow>\n       (project a, project (inject a t)) \\<in> r \\<and>\n       inject a t = inject a (project (inject a t))", "apply (rename_tac S t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S t.\n       (project S, t) \\<in> r \\<Longrightarrow>\n       (project S, project (inject S t)) \\<in> r \\<and>\n       inject S t = inject S (project (inject S t))", "apply (simp add: proj_inj_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in lift_state_space)\n\"{(S,T). (project S,project T) \\<in> r \\<and> T=inject S (project T)}\n \\<subseteq> {(S,T). \\<exists>t. (project S,t) \\<in> r \\<and> T=inject S t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(S, T). (project S, project T) \\<in> r \\<and> T = inject S (project T)}\n    \\<subseteq> {(S, T).\n                 \\<exists>t. (project S, t) \\<in> r \\<and> T = inject S t}", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(project a, project b) \\<in> r;\n        b = inject a (project b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            (project a, t) \\<in> r \\<and> b = inject a t", "apply (rename_tac S T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>(project S, project T) \\<in> r;\n        T = inject S (project T)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            (project S, t) \\<in> r \\<and> T = inject S t", "apply (rule_tac x=\"project T\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>(project S, project T) \\<in> r;\n        T = inject S (project T)\\<rbrakk>\n       \\<Longrightarrow> (project S, project T) \\<in> r \\<and>\n                         T = inject S (project T)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in lift_state_space) lift_exec:\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lc,s\\<rangle> \\<Rightarrow> t\"\nshows \"\\<And>c. \\<lbrakk> lift\\<^sub>c c = lc\\<rbrakk> \\<Longrightarrow>\n              \\<Gamma>\\<turnstile>\\<langle>c,project\\<^sub>x s\\<rangle> \\<Rightarrow>  project\\<^sub>x t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       lift\\<^sub>c c = lc \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  s\\<rangle> \\<Rightarrow> project\\<^sub>x t", "using exec_lc"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       lift\\<^sub>c c = lc \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  s\\<rangle> \\<Rightarrow> project\\<^sub>x t", "proof (induct)"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s c.\n       lift\\<^sub>c c = Skip \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 2. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 4. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 5. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 6. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 7. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n        \\<lbrakk>s \\<notin> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 20 subgoals...", "case Skip"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Skip\n\ngoal (20 subgoals):\n 1. \\<And>s c.\n       lift\\<^sub>c c = Skip \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 2. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 4. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 5. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 6. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 7. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n        \\<lbrakk>s \\<notin> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Skip\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s_)", "by (auto simp add: project\\<^sub>x_def lift\\<^sub>c_Skip lift\\<^sub>c_def intro: exec.Skip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Normal s_)\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 3. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 4. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            lift\\<^sub>c ca = c \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            lift\\<^sub>c ca = While b c \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 3. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 4. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            lift\\<^sub>c ca = c \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            lift\\<^sub>c ca = While b c \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 19 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Guard f_ g_ c_\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 3. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 4. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            lift\\<^sub>c ca = c \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            lift\\<^sub>c ca = While b c \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Guard f_ g_ c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (auto simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def lift\\<^sub>c_Guard lift\\<^sub>c_def\n      intro: exec.Guard)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 2. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 3. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal\n                        s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 2. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 3. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal\n                        s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\nA total of 18 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  lift\\<^sub>c c = Guard f_ g_ c_\n\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 2. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 3. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal\n                        s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  lift\\<^sub>c c = Guard f_ g_ c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f_)", "by (auto simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def lift\\<^sub>c_Guard lift\\<^sub>c_def\n      intro: exec.GuardFault)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Fault f_)\n\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 2. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = bdy \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 2. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = bdy \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 17 subgoals...", "case FaultProp"], ["proof (state)\nthis:\n  lift\\<^sub>c c = c_\n\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Fault f)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f)\n 2. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = bdy \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Fault\n f_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Fault f_)", "by (fastforce simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Fault\n                                     f_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Fault f_)\n\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>p s c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n         lift\\<^sub>c c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>p s c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n         lift\\<^sub>c c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\nA total of 16 subgoals...", "case Basic"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Basic f_\n\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       lift\\<^sub>c c = Basic f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f s))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>p s c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n         lift\\<^sub>c c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Basic f_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal (f_ s_))", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>c_Basic lift\\<^sub>f_def Compose.lift\\<^sub>f_def\n      lift\\<^sub>c_def\n        proj_inj_commute\n        intro: exec.Basic)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Normal (f_ s_))\n\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 10. \\<And>c ca.\n        lift\\<^sub>c ca = c \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n    Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 10. \\<And>c ca.\n        lift\\<^sub>c ca = c \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n    Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\nA total of 15 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n  lift\\<^sub>c c = Spec r_\n\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal\n                      s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t)\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 10. \\<And>c ca.\n        lift\\<^sub>c ca = c \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n    Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n  lift\\<^sub>c c = Spec r_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal t_)", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>c_Spec lift\\<^sub>f_def Compose.lift\\<^sub>f_def\n        lift\\<^sub>r_def Compose.lift\\<^sub>r_def lift\\<^sub>c_def\n        proj_inj_commute\n        intro: exec.Spec)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Normal t_)\n\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 9. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 10. \\<And>c s t ca.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            lift\\<^sub>c ca = c s \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c ca = DynCom c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 9. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 10. \\<And>c s t ca.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            lift\\<^sub>c ca = c s \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c ca = DynCom c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 14 subgoals...", "case (SpecStuck s r)"], ["proof (state)\nthis:\n  \\<forall>t. (s, t) \\<notin> r\n  lift\\<^sub>c c = Spec r\n\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        lift\\<^sub>c c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 9. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 10. \\<And>c s t ca.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            lift\\<^sub>c ca = c s \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n        (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c ca = DynCom c\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s, t) \\<notin> r\n  lift\\<^sub>c c = Spec r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck", "apply (simp add: project\\<^sub>x_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                 (project s)\\<rangle> \\<Rightarrow> Stuck", "apply (clarsimp simp add: lift\\<^sub>c_Spec lift\\<^sub>c_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> lift\\<^sub>r project inject ra;\n        r = lift\\<^sub>r project inject ra; c = Spec ra\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  ra,Normal (project s)\\<rangle> \\<Rightarrow> Stuck", "apply (unfold lift\\<^sub>r_def Compose.lift\\<^sub>r_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>\\<forall>t.\n                   (s, t)\n                   \\<notin> {(S, T).\n                             (project S, project T) \\<in> ra \\<and>\n                             T = inject S (project T)};\n        r =\n        {(S, T).\n         (project S, project T) \\<in> ra \\<and> T = inject S (project T)};\n        c = Spec ra\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  ra,Normal (project s)\\<rangle> \\<Rightarrow> Stuck", "apply (rule exec.SpecStuck)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>\\<forall>t.\n                   (s, t)\n                   \\<notin> {(S, T).\n                             (project S, project T) \\<in> ra \\<and>\n                             T = inject S (project T)};\n        r =\n        {(S, T).\n         (project S, project T) \\<in> ra \\<and> T = inject S (project T)};\n        c = Spec ra\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t. (project s, t) \\<notin> ra", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra t.\n       \\<lbrakk>\\<forall>t.\n                   (s, t)\n                   \\<notin> {(S, T).\n                             (project S, project T) \\<in> ra \\<and>\n                             T = inject S (project T)};\n        r =\n        {(S, T).\n         (project S, project T) \\<in> ra \\<and> T = inject S (project T)};\n        c = Spec ra\\<rbrakk>\n       \\<Longrightarrow> (project s, t) \\<notin> ra", "apply (erule_tac x=\"inject s t\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra t.\n       \\<lbrakk>r =\n                {(S, T).\n                 (project S, project T) \\<in> ra \\<and>\n                 T = inject S (project T)};\n        c = Spec ra;\n        (s, inject s t)\n        \\<notin> {(S, T).\n                  (project S, project T) \\<in> ra \\<and>\n                  T = inject S (project T)}\\<rbrakk>\n       \\<Longrightarrow> (project s, t) \\<notin> ra", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra t.\n       \\<lbrakk>r =\n                {(S, T).\n                 (project S, project T) \\<in> ra \\<and>\n                 T = inject S (project T)};\n        c = Spec ra;\n        (project s, project (inject s t)) \\<in> ra \\<longrightarrow>\n        inject s t \\<noteq> inject s (project (inject s t));\n        (project s, t) \\<in> ra\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: proj_inj_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          Stuck\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s c.\n        lift\\<^sub>c c = Throw \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n   (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s c.\n        lift\\<^sub>c c = Throw \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n   (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\nA total of 13 subgoals...", "case Seq"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> s'_\n  lift\\<^sub>c ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x s'_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,s'_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    s'_\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t_\n  lift\\<^sub>c c = Seq c\\<^sub>1_ c\\<^sub>2_\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>s c.\n        lift\\<^sub>c c = Throw \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n   (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> s'_\n  lift\\<^sub>c ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x s'_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,s'_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    s'_\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t_\n  lift\\<^sub>c c = Seq c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>c_Seq lift\\<^sub>c_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 10. \\<And>c s ca.\n        lift\\<^sub>c ca = c \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n    (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 10. \\<And>c s ca.\n        lift\\<^sub>c ca = c \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n    (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\nA total of 12 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 8. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 10. \\<And>c s ca.\n        lift\\<^sub>c ca = c \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n    (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (auto simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def lift\\<^sub>c_Cond lift\\<^sub>c_def\n         intro: exec.CondTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 9. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 9. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 11 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 7. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 9. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (auto simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def lift\\<^sub>c_Cond lift\\<^sub>c_def\n         intro: exec.CondFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 8. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 8. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case WhileTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> s'_\n  lift\\<^sub>c ?c = c_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x s'_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While b_ c_,s'_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = While b_ c_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    s'_\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t_\n  lift\\<^sub>c c = While b_ c_\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           lift\\<^sub>c ca = c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x s';\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = While b c \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       s'\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 8. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> s'_\n  lift\\<^sub>c ?c = c_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x s'_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While b_ c_,s'_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = While b_ c_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    s'_\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t_\n  lift\\<^sub>c c = While b_ c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def\n         lift\\<^sub>c_While lift\\<^sub>c_def\n         intro: exec.WhileTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 7. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 7. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  lift\\<^sub>c c = While b_ c_\n\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal\n                       s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s)\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 5. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 7. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  lift\\<^sub>c c = While b_ c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Normal s_)", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def\n         lift\\<^sub>c_While lift\\<^sub>c_def\n         intro: exec.WhileFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Normal s_)\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 6. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 6. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case Call"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma> p_ = Some bdy_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = bdy_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Call p_\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = bdy \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 4. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 6. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma> p_ = Some bdy_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = bdy_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Call p_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (fastforce simp add:\n               project\\<^sub>x_def lift\\<^sub>c_Call lift\\<^sub>f_def Compose.lift\\<^sub>f_def lift\\<^sub>c_def\n               lift\\<^sub>e_def\n          intro: exec.Call)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 5. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 5. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case CallUndefined"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma> p_ = None\n  lift\\<^sub>c c = Call p_\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None;\n        lift\\<^sub>c c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 3. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 5. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma> p_ = None\n  lift\\<^sub>c c = Call p_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck", "by (fastforce simp add:\n               project\\<^sub>x_def lift\\<^sub>c_Call lift\\<^sub>f_def Compose.lift\\<^sub>f_def lift\\<^sub>c_def\n               lift\\<^sub>e_def\n          intro: exec.CallUndefined)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           Stuck\n\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 4. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 4. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case StuckProp"], ["proof (state)\nthis:\n  lift\\<^sub>c c = c_\n\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x Stuck\n 2. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 4. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x\n                             Stuck", "by (fastforce simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   Stuck\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           Stuck\n\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 3. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 3. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case DynCom"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c_ s_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = DynCom c_\n\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           lift\\<^sub>c ca = c s \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n       (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n                     (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 3. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c_ s_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = DynCom c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (fastforce simp add:\n               project\\<^sub>x_def lift\\<^sub>c_DynCom lift\\<^sub>f_def Compose.lift\\<^sub>f_def lift\\<^sub>c_def\n          intro: exec.DynCom)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (4 subgoals):\n 1. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 2. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 2. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case Throw"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Throw\n\ngoal (4 subgoals):\n 1. \\<And>s c.\n       lift\\<^sub>c c = Throw \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n  (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 2. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Throw\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s_)", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>c_Throw lift\\<^sub>c_def intro: exec.Throw)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Abrupt s_)\n\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case AbruptProp"], ["proof (state)\nthis:\n  lift\\<^sub>c c = c_\n\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       lift\\<^sub>c ca = c \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>ca,project\\<^sub>x\n   (Abrupt s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = c_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Abrupt\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s_)", "by (fastforce simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Abrupt\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           (Abrupt s_)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case CatchMatch"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> Abrupt s'_\n  lift\\<^sub>c ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s'_)\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s'_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns'_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Catch c\\<^sub>1_ c\\<^sub>2_\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s');\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>2 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s')\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> Abrupt s'_\n  lift\\<^sub>c ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns_)\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt s'_)\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s'_\\<rangle> \\<Rightarrow> t_\n  lift\\<^sub>c ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns'_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_\n  lift\\<^sub>c c = Catch c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s_)\\<rangle> \\<Rightarrow> project\\<^sub>x t_", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>c_Catch lift\\<^sub>c_def intro: exec.CatchMatch)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s_)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           t_\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "case (CatchMiss c\\<^sub>1 s t c\\<^sub>2 c)"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> t\n  lift\\<^sub>c ?c = c\\<^sub>1 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n  \\<not> isAbr t\n  lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           lift\\<^sub>c c = c\\<^sub>1 \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n      (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t;\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                    (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> t\n  lift\\<^sub>c ?c = c\\<^sub>1 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n  \\<not> isAbr t\n  lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "by (cases t)\n       (fastforce simp add: project\\<^sub>x_def lift\\<^sub>c_Catch lift\\<^sub>c_def intro: exec.CatchMiss)+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space) lift_exec':\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lift\\<^sub>c c,s\\<rangle> \\<Rightarrow> t\"\nshows \"\\<Gamma>\\<turnstile>\\<langle>c,project\\<^sub>x s\\<rangle> \\<Rightarrow> project\\<^sub>x t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     s\\<rangle> \\<Rightarrow> project\\<^sub>x\n                         t", "using lift_exec [OF exec_lc]"], ["proof (prove)\nusing this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    s\\<rangle> \\<Rightarrow> project\\<^sub>x\n                        t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     s\\<rangle> \\<Rightarrow> project\\<^sub>x\n                         t", "by simp"], ["", "lemma (in lift_state_space) lift_valid:\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows\n   \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "proof (rule validI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> lift\\<^sub>s P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` lift\\<^sub>s Q \\<union>\n                                 Abrupt ` lift\\<^sub>s A", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> lift\\<^sub>s P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` lift\\<^sub>s Q \\<union>\n                                 Abrupt ` lift\\<^sub>s A", "assume lexec:\n    \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lift\\<^sub>c c,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> lift\\<^sub>s P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` lift\\<^sub>s Q \\<union>\n                                 Abrupt ` lift\\<^sub>s A", "assume lP: \"s \\<in> lift\\<^sub>s P\""], ["proof (state)\nthis:\n  s \\<in> lift\\<^sub>s P\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> lift\\<^sub>s P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` lift\\<^sub>s Q \\<union>\n                                 Abrupt ` lift\\<^sub>s A", "assume noFault: \"t \\<notin> Fault ` F\""], ["proof (state)\nthis:\n  t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> lift\\<^sub>s P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` lift\\<^sub>s Q \\<union>\n                                 Abrupt ` lift\\<^sub>s A", "show \"t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "from lexec"], ["proof (chain)\npicking this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal s\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x (Normal s)\\<rangle> \\<Rightarrow> (project\\<^sub>x t)\""], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "by (rule lift_exec) (simp_all)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "from lP"], ["proof (chain)\npicking this:\n  s \\<in> lift\\<^sub>s P", "have \"project s \\<in> P\""], ["proof (prove)\nusing this:\n  s \\<in> lift\\<^sub>s P\n\ngoal (1 subgoal):\n 1. project s \\<in> P", "by (simp add: lift\\<^sub>s_def Compose.lift\\<^sub>s_def project\\<^sub>x_def)"], ["proof (state)\nthis:\n  project s \\<in> P\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n  project s \\<in> P", "have \"project\\<^sub>x t \\<in> Normal ` Q \\<union> Abrupt ` A\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n  project s \\<in> P\n\ngoal (1 subgoal):\n 1. project\\<^sub>x t \\<in> Normal ` Q \\<union> Abrupt ` A", "using valid noFault"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n  project s \\<in> P\n  \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\n  t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. project\\<^sub>x t \\<in> Normal ` Q \\<union> Abrupt ` A", "apply (clarsimp simp add: valid_def project\\<^sub>x_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n        (project s)\\<rangle> \\<Rightarrow> xstate_map project t;\n     project s \\<in> P;\n     \\<forall>s t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        s \\<in> Normal ` P \\<longrightarrow>\n        t \\<notin> Fault ` F \\<longrightarrow>\n        t \\<in> Normal ` Q \\<or> t \\<in> Abrupt ` A;\n     t \\<notin> Fault ` F; xstate_map project t \\<notin> Abrupt ` A\\<rbrakk>\n    \\<Longrightarrow> xstate_map project t \\<in> Normal ` Q", "apply (cases t)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n           (project s)\\<rangle> \\<Rightarrow> xstate_map project t;\n        project s \\<in> P;\n        \\<forall>s t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           s \\<in> Normal ` P \\<longrightarrow>\n           t \\<notin> Fault ` F \\<longrightarrow>\n           t \\<in> Normal ` Q \\<or> t \\<in> Abrupt ` A;\n        t \\<notin> Fault ` F; xstate_map project t \\<notin> Abrupt ` A;\n        t = Normal x1\\<rbrakk>\n       \\<Longrightarrow> xstate_map project t \\<in> Normal ` Q\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n           (project s)\\<rangle> \\<Rightarrow> xstate_map project t;\n        project s \\<in> P;\n        \\<forall>s t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           s \\<in> Normal ` P \\<longrightarrow>\n           t \\<notin> Fault ` F \\<longrightarrow>\n           t \\<in> Normal ` Q \\<or> t \\<in> Abrupt ` A;\n        t \\<notin> Fault ` F; xstate_map project t \\<notin> Abrupt ` A;\n        t = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> xstate_map project t \\<in> Normal ` Q\n 3. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n           (project s)\\<rangle> \\<Rightarrow> xstate_map project t;\n        project s \\<in> P;\n        \\<forall>s t.\n           \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n           s \\<in> Normal ` P \\<longrightarrow>\n           t \\<notin> Fault ` F \\<longrightarrow>\n           t \\<in> Normal ` Q \\<or> t \\<in> Abrupt ` A;\n        t \\<notin> Fault ` F; xstate_map project t \\<notin> Abrupt ` A;\n        t = Fault x3\\<rbrakk>\n       \\<Longrightarrow> xstate_map project t \\<in> Normal ` Q\n 4. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n        (project s)\\<rangle> \\<Rightarrow> xstate_map project t;\n     project s \\<in> P;\n     \\<forall>s t.\n        \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n        s \\<in> Normal ` P \\<longrightarrow>\n        t \\<notin> Fault ` F \\<longrightarrow>\n        t \\<in> Normal ` Q \\<or> t \\<in> Abrupt ` A;\n     t \\<notin> Fault ` F; xstate_map project t \\<notin> Abrupt ` A;\n     t = Stuck\\<rbrakk>\n    \\<Longrightarrow> xstate_map project t \\<in> Normal ` Q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  project\\<^sub>x t \\<in> Normal ` Q \\<union> Abrupt ` A\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "thus ?thesis"], ["proof (prove)\nusing this:\n  project\\<^sub>x t \\<in> Normal ` Q \\<union> Abrupt ` A\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A", "apply (simp add: lift\\<^sub>s_def Compose.lift\\<^sub>s_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. project\\<^sub>x t \\<in> Normal ` Q \\<or>\n    project\\<^sub>x t \\<in> Abrupt ` A \\<Longrightarrow>\n    t \\<in> Normal ` {S. project S \\<in> Q} \\<or>\n    t \\<in> Abrupt ` {S. project S \\<in> A}", "apply (cases t)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>project\\<^sub>x t \\<in> Normal ` Q \\<or>\n                project\\<^sub>x t \\<in> Abrupt ` A;\n        t = Normal x1\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` {S. project S \\<in> Q} \\<or>\n                         t \\<in> Abrupt ` {S. project S \\<in> A}\n 2. \\<And>x2.\n       \\<lbrakk>project\\<^sub>x t \\<in> Normal ` Q \\<or>\n                project\\<^sub>x t \\<in> Abrupt ` A;\n        t = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` {S. project S \\<in> Q} \\<or>\n                         t \\<in> Abrupt ` {S. project S \\<in> A}\n 3. \\<And>x3.\n       \\<lbrakk>project\\<^sub>x t \\<in> Normal ` Q \\<or>\n                project\\<^sub>x t \\<in> Abrupt ` A;\n        t = Fault x3\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` {S. project S \\<in> Q} \\<or>\n                         t \\<in> Abrupt ` {S. project S \\<in> A}\n 4. \\<lbrakk>project\\<^sub>x t \\<in> Normal ` Q \\<or>\n             project\\<^sub>x t \\<in> Abrupt ` A;\n     t = Stuck\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Normal ` {S. project S \\<in> Q} \\<or>\n                      t \\<in> Abrupt ` {S. project S \\<in> A}", "apply (auto simp add: project\\<^sub>x_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<in> Normal ` lift\\<^sub>s Q \\<union> Abrupt ` lift\\<^sub>s A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space) lift_hoarep:\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows\n   \"(lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>,{}\n       \\<turnstile>\\<^bsub>/F \\<^esub>(lift\\<^sub>s P) lift\\<^sub>c c\n(lift\\<^sub>s Q),(lift\\<^sub>s A)", "apply (rule hoare_complete)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "apply (insert hoare_sound [OF deriv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "apply (rule lift_valid)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A \\<Longrightarrow>\n    \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A", "apply (simp add: cvalid_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in lift_state_space) lift_hoarep':\n  \"\\<forall>Z. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z) \\<Longrightarrow>\n    \\<forall>Z. (lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s (P Z)) (lift\\<^sub>c c)\n                                  (lift\\<^sub>s (Q Z)),(lift\\<^sub>s (A Z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>,{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>(P Z) c (Q Z),\n   (A Z) \\<Longrightarrow>\n    \\<forall>Z.\n       lift\\<^sub>e \\<Gamma>,{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>(lift\\<^sub>s (P Z)) lift\\<^sub>c c\n   (lift\\<^sub>s (Q Z)),(lift\\<^sub>s (A Z))", "apply (iprover intro: lift_hoarep)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in lift_state_space) lift_termination:\nassumes termi: \"\\<Gamma>\\<turnstile>c\\<down>s\"\nshows \"\\<And>S. project\\<^sub>x S = s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma> \\<turnstile>(lift\\<^sub>c c)\\<down>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       project\\<^sub>x S = s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S", "using termi"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       project\\<^sub>x S = s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S", "proof (induct)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Skip \\<down> S\n 2. \\<And>f s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f) \\<down> S\n 3. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 4. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 5. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 6. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 10. \\<And>s b c S.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            (\\<forall>x.\n                project\\<^sub>x x = s' \\<longrightarrow>\n                lift\\<^sub>e\n                 \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (While b c) \\<down> S\nA total of 18 subgoals...", "case Skip"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s_\n\ngoal (18 subgoals):\n 1. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Skip \\<down> S\n 2. \\<And>f s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f) \\<down> S\n 3. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 4. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 5. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 6. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 10. \\<And>s b c S.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            (\\<forall>x.\n                project\\<^sub>x x = s' \\<longrightarrow>\n                lift\\<^sub>e\n                 \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (While b c) \\<down> S\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Skip \\<down> S", "by (clarsimp simp add: terminates.Skip project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Skip \\<down> S\n\ngoal (17 subgoals):\n 1. \\<And>f s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f) \\<down> S\n 2. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 3. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 4. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 5. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 9. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 10. \\<And>s b c S.\n        \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (While b c) \\<down> S\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>f s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f) \\<down> S\n 2. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 3. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 4. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 5. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 9. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 10. \\<And>s b c S.\n        \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (While b c) \\<down> S\nA total of 17 subgoals...", "case Basic"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s_\n\ngoal (17 subgoals):\n 1. \\<And>f s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f) \\<down> S\n 2. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 3. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 4. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 5. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 9. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 10. \\<And>s b c S.\n        \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (While b c) \\<down> S\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Basic f_) \\<down> S\n\ngoal (16 subgoals):\n 1. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 2. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 3. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 4. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 9. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 10. \\<And>p bdy s S.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Call p) \\<down> S\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 2. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 3. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 4. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 9. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 10. \\<And>p bdy s S.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Call p) \\<down> S\nA total of 16 subgoals...", "case Spec"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s_\n\ngoal (16 subgoals):\n 1. \\<And>r s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r) \\<down> S\n 2. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 3. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 4. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 8. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 9. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 10. \\<And>p bdy s S.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Call p) \\<down> S\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Spec r_) \\<down> S\n\ngoal (15 subgoals):\n 1. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 2. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 3. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 8. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 9. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 10. \\<And>p s S.\n        \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Call p) \\<down> S\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 2. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 3. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 8. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 9. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 10. \\<And>p s S.\n        \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Call p) \\<down> S\nA total of 15 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>c_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (15 subgoals):\n 1. \\<And>s g c f S.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 2. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 3. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 7. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 8. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 9. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 10. \\<And>p s S.\n        \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Call p) \\<down> S\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>c_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Guard f_ g_ c_) \\<down> S", "by (auto simp add: project\\<^sub>x_def xstate_map_convs intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Guard f_ g_ c_) \\<down> S\n\ngoal (14 subgoals):\n 1. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 2. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 7. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 8. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 9. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 10. \\<And>c S.\n        project\\<^sub>x S = Stuck \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 2. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 7. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 8. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 9. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 10. \\<And>c S.\n        project\\<^sub>x S = Stuck \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\nA total of 14 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  project\\<^sub>x S = Normal s_\n\ngoal (14 subgoals):\n 1. \\<And>s g f c S.\n       \\<lbrakk>s \\<notin> g; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Guard f g c) \\<down> S\n 2. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 6. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 7. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 8. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 9. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 10. \\<And>c S.\n        project\\<^sub>x S = Stuck \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Guard f_ g_ c_) \\<down> S", "by (auto simp add: project\\<^sub>x_def xstate_map_convs lift\\<^sub>s_def Compose.lift\\<^sub>s_def\n           intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Guard f_ g_ c_) \\<down> S\n\ngoal (13 subgoals):\n 1. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 7. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 9. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 10. \\<And>c s S.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (DynCom c) \\<down> S\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 7. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 9. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 10. \\<And>c s S.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (DynCom c) \\<down> S\nA total of 13 subgoals...", "case Fault"], ["proof (state)\nthis:\n  project\\<^sub>x S = Fault f_\n\ngoal (13 subgoals):\n 1. \\<And>c f S.\n       project\\<^sub>x S = Fault f \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 7. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 9. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 10. \\<And>c s S.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (DynCom c) \\<down> S\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Fault f_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> S", "by (clarsimp simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> S\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "case (Seq c1 s c2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = s' \\<longrightarrow>\n         lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  project\\<^sub>x S = Normal s\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "have \"project\\<^sub>x S = Normal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project\\<^sub>x S = Normal s", "by fact"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  project\\<^sub>x S = Normal s", "obtain s' where S: \"S=Normal s'\" and s: \"s = project s'\""], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>S = Normal s'; s = project s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  S = Normal s'\n  s = project s'\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "from Seq"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = s' \\<longrightarrow>\n         lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  project\\<^sub>x S = Normal s", "have \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = s' \\<longrightarrow>\n         lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S", "by simp"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "moreover"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "{"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "fix w"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "assume exec_lc1: \"lift\\<^sub>e \\<Gamma>\\<turnstile>\\<langle>lift\\<^sub>c c1,Normal s'\\<rangle> \\<Rightarrow> w\""], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal s'\\<rangle> \\<Rightarrow> w\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "have \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w", "proof (cases w)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       w = Normal x1 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 2. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 3. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 4. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w", "case (Normal w')"], ["proof (state)\nthis:\n  w = Normal w'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       w = Normal x1 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 2. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 3. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 4. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w", "with lift_exec [where c=c1, OF exec_lc1] s"], ["proof (chain)\npicking this:\n  lift\\<^sub>c c1 = lift\\<^sub>c c1 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1,project\\<^sub>x\n                                    (Normal\ns')\\<rangle> \\<Rightarrow> project\\<^sub>x w\n  s = project s'\n  w = Normal w'", "have \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> Normal (project w')\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c c1 = lift\\<^sub>c c1 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1,project\\<^sub>x\n                                    (Normal\ns')\\<rangle> \\<Rightarrow> project\\<^sub>x w\n  s = project s'\n  w = Normal w'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\ns\\<rangle> \\<Rightarrow> Normal (project w')", "by (simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow> Normal\n                        (project w')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       w = Normal x1 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 2. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 3. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 4. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w", "from Seq.hyps (3) [rule_format, OF this] Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal (project w') \\<and>\n  (\\<forall>x.\n      project\\<^sub>x x = Normal (project w') \\<longrightarrow>\n      lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  w = Normal w'", "show \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal (project w') \\<and>\n  (\\<forall>x.\n      project\\<^sub>x x = Normal (project w') \\<longrightarrow>\n      lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  w = Normal w'\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w", "by (auto simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 2. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n 3. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w", "qed (auto)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> w\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "}"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> ?w2\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 6. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 8. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 10. \\<And>s S.\n        project\\<^sub>x S = Normal s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\nA total of 12 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> ?w2", "show ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> ?w2\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Seq c1 c2) \\<down> S", "using S s"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> ?w2\n  S = Normal s'\n  s = project s'\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Seq c1 c2) \\<down> S", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Seq c1 c2) \\<down> S\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 6. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 8. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 9. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 10. \\<And>c s S.\n        project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 6. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 8. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 9. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 10. \\<And>c s S.\n        project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\nA total of 11 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 3. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 4. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 5. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 6. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 7. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 8. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 9. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 10. \\<And>c s S.\n        project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n        lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e\n     \\<Gamma>\\<turnstile>lift\\<^sub>c\n                          (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def xstate_map_convs\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile>lift\\<^sub>c\n                        (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> S\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 4. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 6. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 8. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 9. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e\n             \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            (\\<forall>x.\n                project\\<^sub>x x = Normal s' \\<longrightarrow>\n                lift\\<^sub>e\n                 \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 4. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 6. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 8. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 9. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e\n             \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            (\\<forall>x.\n                project\\<^sub>x x = Normal s' \\<longrightarrow>\n                lift\\<^sub>e\n                 \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1 S.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 4. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 6. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 8. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 9. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<And>S.\n            project\\<^sub>x S = Normal s \\<Longrightarrow>\n            lift\\<^sub>e\n             \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            (\\<forall>x.\n                project\\<^sub>x x = Normal s' \\<longrightarrow>\n                lift\\<^sub>e\n                 \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n         project\\<^sub>x S = Normal s\\<rbrakk>\n        \\<Longrightarrow> lift\\<^sub>e\n                           \\<Gamma>\\<turnstile>lift\\<^sub>c\n          (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e\n     \\<Gamma>\\<turnstile>lift\\<^sub>c\n                          (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def xstate_map_convs\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile>lift\\<^sub>c\n                        (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> S\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case (WhileTrue s b c)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = s' \\<longrightarrow>\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x)\n  project\\<^sub>x S = Normal s\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "have \"project\\<^sub>x S = Normal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project\\<^sub>x S = Normal s", "by fact"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "then"], ["proof (chain)\npicking this:\n  project\\<^sub>x S = Normal s", "obtain s' where S: \"S=Normal s'\" and s: \"s = project s'\""], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>S = Normal s'; s = project s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  S = Normal s'\n  s = project s'\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "from WhileTrue"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = s' \\<longrightarrow>\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x)\n  project\\<^sub>x S = Normal s", "have \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = s' \\<longrightarrow>\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x)\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S", "by simp"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "moreover"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "{"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "fix w"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "assume exec_lc: \"lift\\<^sub>e \\<Gamma>\\<turnstile>\\<langle>lift\\<^sub>c c,Normal s'\\<rangle> \\<Rightarrow> w\""], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal s'\\<rangle> \\<Rightarrow> w\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "have \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w", "proof (cases w)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       w = Normal x1 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 2. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 3. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 4. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w", "case (Normal w')"], ["proof (state)\nthis:\n  w = Normal w'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       w = Normal x1 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 2. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 3. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 4. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w", "with lift_exec [where c=c, OF exec_lc] s"], ["proof (chain)\npicking this:\n  lift\\<^sub>c c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s')\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           w\n  s = project s'\n  w = Normal w'", "have \"\\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Normal (project w')\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s')\\<rangle> \\<Rightarrow> project\\<^sub>x\n                           w\n  s = project s'\n  w = Normal w'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     s\\<rangle> \\<Rightarrow> Normal\n                         (project w')", "by (simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow> Normal\n                       (project w')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       w = Normal x1 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 2. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 3. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 4. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w", "from WhileTrue.hyps (4) [rule_format, OF this] Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal (project w') \\<and>\n  (\\<forall>x.\n      project\\<^sub>x x = Normal (project w') \\<longrightarrow>\n      lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x)\n  w = Normal w'", "show \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal (project w') \\<and>\n  (\\<forall>x.\n      project\\<^sub>x x = Normal (project w') \\<longrightarrow>\n      lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x)\n  w = Normal w'\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w", "by (auto simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       w = Abrupt x2 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 2. \\<And>x3.\n       w = Fault x3 \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n 3. w = Stuck \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w", "qed (auto)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> w\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "}"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal\n                                     s'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> ?w2\n\ngoal (9 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 3. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 5. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 7. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 8. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "ultimately"], ["proof (chain)\npicking this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal\n                                     s'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> ?w2", "show ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal\n                                     s'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> ?w2\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> S", "using S s"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal\n                                     s'\\<rangle> \\<Rightarrow> ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> ?w2\n  S = Normal s'\n  s = project s'\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> S", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b c) \\<down> S\n\ngoal (8 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 3. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 6. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 7. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 3. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 6. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 7. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  project\\<^sub>x S = Normal s_\n\ngoal (8 subgoals):\n 1. \\<And>s b c S.\n       \\<lbrakk>s \\<notin> b; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (While b c) \\<down> S\n 2. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 3. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 4. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 6. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 7. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b_ c_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def xstate_map_convs\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (While b_ c_) \\<down> S\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 2. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 3. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 5. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 6. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 2. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 3. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 5. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 6. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case Call"], ["proof (state)\nthis:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile>bdy_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s S.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 2. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 3. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 5. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 6. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile>bdy_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c bdy_ \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Call p_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs lift\\<^sub>e_def\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Call p_) \\<down> S\n\ngoal (6 subgoals):\n 1. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 2. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 4. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 5. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 2. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 4. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 5. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case CallUndefined"], ["proof (state)\nthis:\n  \\<Gamma> p_ = None\n  project\\<^sub>x S = Normal s_\n\ngoal (6 subgoals):\n 1. \\<And>p s S.\n       \\<lbrakk>\\<Gamma> p = None; project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Call p) \\<down> S\n 2. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 4. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 5. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = None\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Call p_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs lift\\<^sub>e_def\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Call p_) \\<down> S\n\ngoal (5 subgoals):\n 1. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 3. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 4. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 3. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 4. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case Stuck"], ["proof (state)\nthis:\n  project\\<^sub>x S = Stuck\n\ngoal (5 subgoals):\n 1. \\<And>c S.\n       project\\<^sub>x S = Stuck \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 3. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 4. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Stuck\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> S\n\ngoal (4 subgoals):\n 1. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 2. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 3. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 2. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 3. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ s_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c_ s_) \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (4 subgoals):\n 1. \\<And>c s S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c s) \\<down> S;\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (DynCom c) \\<down> S\n 2. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 3. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c_ s_ \\<down> Normal s_\n  project\\<^sub>x ?S = Normal s_ \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (c_ s_) \\<down> ?S\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (DynCom c_) \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (DynCom c_) \\<down> S\n\ngoal (3 subgoals):\n 1. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 2. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 2. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case Throw"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s_\n\ngoal (3 subgoals):\n 1. \\<And>s S.\n       project\\<^sub>x S = Normal s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n 2. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c Throw \\<down> S\n\ngoal (2 subgoals):\n 1. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case Abrupt"], ["proof (state)\nthis:\n  project\\<^sub>x S = Abrupt s_\n\ngoal (2 subgoals):\n 1. \\<And>c s S.\n       project\\<^sub>x S = Abrupt s \\<Longrightarrow>\n       lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "thus ?case"], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Abrupt s_\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> S", "by (fastforce simp add: project\\<^sub>x_def xstate_map_convs\n      intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c_ \\<down> S\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "case (Catch c1 s c2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = Normal s' \\<longrightarrow>\n         lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "have \"project\\<^sub>x S = Normal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. project\\<^sub>x S = Normal s", "by fact"], ["proof (state)\nthis:\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "then"], ["proof (chain)\npicking this:\n  project\\<^sub>x S = Normal s", "obtain s' where S: \"S=Normal s'\" and s: \"s = project s'\""], ["proof (prove)\nusing this:\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>S = Normal s'; s = project s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  S = Normal s'\n  s = project s'\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "from Catch"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = Normal s' \\<longrightarrow>\n         lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  project\\<^sub>x S = Normal s", "have \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  project\\<^sub>x ?S = Normal s \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> ?S\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<forall>x.\n         project\\<^sub>x x = Normal s' \\<longrightarrow>\n         lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n  project\\<^sub>x S = Normal s\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S", "by simp"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "moreover"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "{"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "assume exec_lc1: \"lift\\<^sub>e \\<Gamma>\\<turnstile>\\<langle>lift\\<^sub>c c1,Normal s'\\<rangle> \\<Rightarrow> Abrupt w\""], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> Abrupt w\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "have \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w", "from lift_exec [where c=c1, OF exec_lc1] s"], ["proof (chain)\npicking this:\n  lift\\<^sub>c c1 = lift\\<^sub>c c1 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1,project\\<^sub>x\n                                    (Normal\ns')\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt w)\n  s = project s'", "have \"\\<Gamma>\\<turnstile>\\<langle>c1,Normal s\\<rangle> \\<Rightarrow> Abrupt (project w)\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c c1 = lift\\<^sub>c c1 \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1,project\\<^sub>x\n                                    (Normal\ns')\\<rangle> \\<Rightarrow> project\\<^sub>x (Abrupt w)\n  s = project s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\ns\\<rangle> \\<Rightarrow> Abrupt (project w)", "by (simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow> Abrupt\n                        (project w)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w", "from Catch.hyps (3) [rule_format, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal (project w) \\<and>\n  (\\<forall>x.\n      project\\<^sub>x x = Normal (project w) \\<longrightarrow>\n      lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)", "show \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal (project w) \\<and>\n  (\\<forall>x.\n      project\\<^sub>x x = Normal (project w) \\<longrightarrow>\n      lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> x)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w", "by (auto simp add: project\\<^sub>x_def xstate_map_convs)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal w\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "}"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> Abrupt ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal ?w2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2 S.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<And>S.\n           project\\<^sub>x S = Normal s \\<Longrightarrow>\n           lift\\<^sub>e\n            \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>1 \\<down> S;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<forall>x.\n               project\\<^sub>x x = Normal s' \\<longrightarrow>\n               lift\\<^sub>e\n                \\<Gamma>\\<turnstile>lift\\<^sub>c c\\<^sub>2 \\<down> x);\n        project\\<^sub>x S = Normal s\\<rbrakk>\n       \\<Longrightarrow> lift\\<^sub>e\n                          \\<Gamma>\\<turnstile>lift\\<^sub>c\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> S", "ultimately"], ["proof (chain)\npicking this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> Abrupt ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal ?w2", "show ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> Abrupt ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal ?w2\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Catch c1 c2) \\<down> S", "using S s"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c1 \\<down> S\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c1,Normal\ns'\\<rangle> \\<Rightarrow> Abrupt ?w2 \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c2 \\<down> Normal ?w2\n  S = Normal s'\n  s = project s'\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Catch c1 c2) \\<down> S", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c (Catch c1 c2) \\<down> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space) lift_termination':\nassumes termi: \"\\<Gamma>\\<turnstile>c\\<down>project\\<^sub>x S\"\nshows \"lift\\<^sub>e \\<Gamma> \\<turnstile>(lift\\<^sub>c c)\\<down>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S", "using lift_termination [OF termi]"], ["proof (prove)\nusing this:\n  project\\<^sub>x ?S = project\\<^sub>x S \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> ?S\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> S", "by iprover"], ["", "lemma (in lift_state_space) lift_validt:\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "from valid"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "have \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "by (auto intro: lift_valid simp add: validt_def)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n  (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "moreover"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n  (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "{"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n  (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "assume \"S \\<in> lift\\<^sub>s P\""], ["proof (state)\nthis:\n  S \\<in> lift\\<^sub>s P\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "hence \"project S \\<in> P\""], ["proof (prove)\nusing this:\n  S \\<in> lift\\<^sub>s P\n\ngoal (1 subgoal):\n 1. project S \\<in> P", "by (simp add: lift\\<^sub>s_def Compose.lift\\<^sub>s_def)"], ["proof (state)\nthis:\n  project S \\<in> P\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "with valid"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n  project S \\<in> P", "have \"\\<Gamma>\\<turnstile>c \\<down> project\\<^sub>x (Normal S)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n  project S \\<in> P\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> project\\<^sub>x (Normal S)", "by (simp add: validt_def project\\<^sub>x_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> project\\<^sub>x (Normal S)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "hence \"lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> Normal S\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> project\\<^sub>x (Normal S)\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> Normal S", "by (rule lift_termination')"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> Normal S\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "}"], ["proof (state)\nthis:\n  ?S2 \\<in> lift\\<^sub>s P \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> Normal ?S2\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "ultimately"], ["proof (chain)\npicking this:\n  lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n  (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)\n  ?S2 \\<in> lift\\<^sub>s P \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> Normal ?S2", "show ?thesis"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n  (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)\n  ?S2 \\<in> lift\\<^sub>s P \\<Longrightarrow>\n  lift\\<^sub>e \\<Gamma>\\<turnstile>lift\\<^sub>c c \\<down> Normal ?S2\n\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "by (simp add: validt_def)"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n  (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space) lift_hoaret:\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows\n   \"(lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (lift\\<^sub>s P) (lift\\<^sub>c c) (lift\\<^sub>s Q),(lift\\<^sub>s A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>,{}\n       \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (lift\\<^sub>s P)\n        lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "apply (rule hoaret_complete)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "apply (insert hoaret_sound [OF deriv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    P c Q,A \\<Longrightarrow>\n    lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    (lift\\<^sub>s P) lift\\<^sub>c c (lift\\<^sub>s Q),(lift\\<^sub>s A)", "apply (rule lift_validt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    P c Q,A \\<Longrightarrow>\n    \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "apply (simp add: cvalidt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "locale lift_state_space_ext = lift_state_space +\n  assumes inj_proj_commute: \"\\<And>S. inject S (project S) = S\"\n  assumes inject_last: \"\\<And>S s t. inject (inject S s) t = inject S t\""], ["", "(* \\<exists>x. state t = inject (state s) x *)"], ["", "lemma (in lift_state_space_ext) lift_exec_inject_same:\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lc,s\\<rangle> \\<Rightarrow> t\"\nshows \"\\<And>c. \\<lbrakk>lift\\<^sub>c c = lc; t \\<notin> (Fault ` UNIV) \\<union> {Stuck}\\<rbrakk> \\<Longrightarrow>\n              state t = inject (state s) (project (state t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>lift\\<^sub>c c = lc;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t = inject (state s) (project (state t))", "using exec_lc"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>lift\\<^sub>c c = lc;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t = inject (state s) (project (state t))", "proof (induct)"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Skip;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 2. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = Guard f g c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 4. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 5. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 6. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 7. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n        \\<lbrakk>s \\<notin> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 20 subgoals...", "case Skip"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Skip\n  Normal s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (20 subgoals):\n 1. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Skip;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 2. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = Guard f g c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 4. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 5. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 6. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 7. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n        \\<lbrakk>s \\<notin> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Skip\n  Normal s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Normal s_) =\n    inject (state (Normal s_)) (project (state (Normal s_)))", "by (clarsimp simp add: inj_proj_commute)"], ["proof (state)\nthis:\n  state (Normal s_) =\n  inject (state (Normal s_)) (project (state (Normal s_)))\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = Guard f g c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 3. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 4. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = c;\n             s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state s' =\n                              inject (state (Normal s))\n                               (project (state s'));\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = While b c;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state s') (project (state t));\n         lift\\<^sub>c ca = While b c;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = Guard f g c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 3. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 4. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = c;\n             s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state s' =\n                              inject (state (Normal s))\n                               (project (state s'));\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = While b c;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state s') (project (state t));\n         lift\\<^sub>c ca = While b c;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 19 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Guard f_ g_ c_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = Guard f g c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 3. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 4. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = c;\n             s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state s' =\n                              inject (state (Normal s))\n                               (project (state s'));\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = While b c;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state s') (project (state t));\n         lift\\<^sub>c ca = While b c;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Guard f_ g_ c_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t_ = inject (state (Normal s_)) (project (state t_))", "by (clarsimp simp add: lift\\<^sub>c_Guard lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state t_ = inject (state (Normal s_)) (project (state t_))\n\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 2. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 3. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n         Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Normal s) =\n                          inject (state (Normal s))\n                           (project (state (Normal s)))\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 2. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 3. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n         Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Normal s) =\n                          inject (state (Normal s))\n                           (project (state (Normal s)))\nA total of 18 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  lift\\<^sub>c c = Guard f_ g_ c_\n  Fault f_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; lift\\<^sub>c ca = Guard f g c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Normal s))\n                          (project (state (Fault f)))\n 2. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 3. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n         Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Normal s) =\n                          inject (state (Normal s))\n                           (project (state (Normal s)))\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  lift\\<^sub>c c = Guard f_ g_ c_\n  Fault f_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Fault f_) =\n    inject (state (Normal s_)) (project (state (Fault f_)))", "by simp"], ["proof (state)\nthis:\n  state (Fault f_) = inject (state (Normal s_)) (project (state (Fault f_)))\n\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 2. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = bdy;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c c = Call p;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 2. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = bdy;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c c = Call p;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 17 subgoals...", "case FaultProp"], ["proof (state)\nthis:\n  lift\\<^sub>c c = c_\n  Fault f_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Fault f \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Fault f) =\n                         inject (state (Fault f))\n                          (project (state (Fault f)))\n 2. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = bdy;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c c = Call p;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = c_\n  Fault f_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Fault f_) =\n    inject (state (Fault f_)) (project (state (Fault f_)))", "by simp"], ["proof (state)\nthis:\n  state (Fault f_) = inject (state (Fault f_)) (project (state (Fault f_)))\n\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>p s c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n         Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state Stuck =\n                          inject (state (Normal s)) (project (state Stuck))\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>p s c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n         Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state Stuck =\n                          inject (state (Normal s)) (project (state Stuck))\nA total of 16 subgoals...", "case Basic"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Basic f_\n  Normal (f_ s_) \\<notin> range Fault \\<union> {Stuck}\n\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       \\<lbrakk>lift\\<^sub>c c = Basic f;\n        Normal (f s) \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal (f s)) =\n                         inject (state (Normal s))\n                          (project (state (Normal (f s))))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>p s c.\n        \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n         Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state Stuck =\n                          inject (state (Normal s)) (project (state Stuck))\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Basic f_\n  Normal (f_ s_) \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Normal (f_ s_)) =\n    inject (state (Normal s_)) (project (state (Normal (f_ s_))))", "by (clarsimp simp add: lift\\<^sub>f_def Compose.lift\\<^sub>f_def\n        proj_inj_commute lift\\<^sub>c_Basic lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state (Normal (f_ s_)) =\n  inject (state (Normal s_)) (project (state (Normal (f_ s_))))\n\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 10. \\<And>c ca.\n        \\<lbrakk>lift\\<^sub>c ca = c;\n         Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state Stuck =\n                          inject (state Stuck) (project (state Stuck))\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 10. \\<And>c ca.\n        \\<lbrakk>lift\\<^sub>c ca = c;\n         Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state Stuck =\n                          inject (state Stuck) (project (state Stuck))\nA total of 15 subgoals...", "case (Spec r)"], ["proof (state)\nthis:\n  (r, t_) \\<in> r_\n  lift\\<^sub>c c = Spec r_\n  Normal t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; lift\\<^sub>c c = Spec r;\n        Normal t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal t) =\n                         inject (state (Normal s))\n                          (project (state (Normal t)))\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 10. \\<And>c ca.\n        \\<lbrakk>lift\\<^sub>c ca = c;\n         Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state Stuck =\n                          inject (state Stuck) (project (state Stuck))\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (r, t_) \\<in> r_\n  lift\\<^sub>c c = Spec r_\n  Normal t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Normal t_) =\n    inject (state (Normal r)) (project (state (Normal t_)))", "by (clarsimp simp add: Compose.lift\\<^sub>r_def lift\\<^sub>c_Spec lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state (Normal t_) =\n  inject (state (Normal r)) (project (state (Normal t_)))\n\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 9. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 10. \\<And>c s t ca.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = c s;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c ca = DynCom c;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 9. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 10. \\<And>c s t ca.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = c s;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c ca = DynCom c;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 14 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n  lift\\<^sub>c c = Spec r_\n  Stuck \\<notin> range Fault \\<union> {Stuck}\n\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; lift\\<^sub>c c = Spec r;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 9. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 10. \\<And>c s t ca.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            \\<lbrakk>lift\\<^sub>c ca = c s;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         lift\\<^sub>c ca = DynCom c;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n  lift\\<^sub>c c = Spec r_\n  Stuck \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state Stuck = inject (state (Normal s_)) (project (state Stuck))", "by simp"], ["proof (state)\nthis:\n  state Stuck = inject (state (Normal s_)) (project (state Stuck))\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s c.\n        \\<lbrakk>lift\\<^sub>c c = Throw;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Normal s))\n                           (project (state (Abrupt s)))\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s c.\n        \\<lbrakk>lift\\<^sub>c c = Throw;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Normal s))\n                           (project (state (Abrupt s)))\nA total of 13 subgoals...", "case (Seq lc1 s s' lc2 t c)"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc1;\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc2,s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = lc2;\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = Seq lc1 lc2\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s c.\n        \\<lbrakk>lift\\<^sub>c c = Throw;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Normal s))\n                           (project (state (Abrupt s)))\nA total of 13 subgoals...", "have t: \"t \\<notin> Fault ` UNIV \\<union> {Stuck}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<notin> range Fault \\<union> {Stuck}", "by fact"], ["proof (state)\nthis:\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s c.\n        \\<lbrakk>lift\\<^sub>c c = Throw;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Normal s))\n                           (project (state (Abrupt s)))\nA total of 13 subgoals...", "have \"lift\\<^sub>c c = Seq lc1 lc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c c = Seq lc1 lc2", "by fact"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Seq lc1 lc2\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s c.\n        \\<lbrakk>lift\\<^sub>c c = Throw;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Normal s))\n                           (project (state (Abrupt s)))\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  lift\\<^sub>c c = Seq lc1 lc2", "obtain c1 c2 where\n    c: \"c = Seq c1 c2\" and\n    lc1: \"lc1 = lift\\<^sub>c c1\" and\n    lc2: \"lc2 = lift\\<^sub>c c2\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Seq lc1 lc2\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>c = Seq c1 c2; lc1 = lift\\<^sub>c c1;\n         lc2 = lift\\<^sub>c c2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: lift\\<^sub>c_Seq lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  c = Seq c1 c2\n  lc1 = lift\\<^sub>c c1\n  lc2 = lift\\<^sub>c c2\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c c = Seq c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 8. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 9. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>s c.\n        \\<lbrakk>lift\\<^sub>c c = Throw;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Normal s))\n                           (project (state (Abrupt s)))\nA total of 13 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "proof (cases s')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case (Normal s'')"], ["proof (state)\nthis:\n  s' = Normal s''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from Seq.hyps (2) [OF lc1 [symmetric]] this"], ["proof (chain)\npicking this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Normal s''", "have \"s'' = inject s (project s'')\""], ["proof (prove)\nusing this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Normal s''\n\ngoal (1 subgoal):\n 1. s'' = inject s (project s'')", "by auto"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "moreover"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from Seq.hyps (4) [OF lc2 [symmetric]] Normal t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Normal s''\n  t \\<notin> range Fault \\<union> {Stuck}", "have \"state t = inject s'' (project (state t))\""], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Normal s''\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t = inject s'' (project (state t))", "by auto"], ["proof (state)\nthis:\n  state t = inject s'' (project (state t))\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "ultimately"], ["proof (chain)\npicking this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))", "have \"state t = inject (inject s (project s'')) (project (state t))\""], ["proof (prove)\nusing this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (inject s (project s'')) (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  state t = inject (inject s (project s'')) (project (state t))", "show ?thesis"], ["proof (prove)\nusing this:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "by (simp add: inject_last)"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case (Abrupt s'')"], ["proof (state)\nthis:\n  s' = Abrupt s''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from Seq.hyps (2) [OF lc1 [symmetric]] this"], ["proof (chain)\npicking this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Abrupt s''", "have \"s'' = inject s (project s'')\""], ["proof (prove)\nusing this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Abrupt s''\n\ngoal (1 subgoal):\n 1. s'' = inject s (project s'')", "by auto"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "moreover"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from Seq.hyps (4) [OF lc2 [symmetric]] Abrupt t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Abrupt s''\n  t \\<notin> range Fault \\<union> {Stuck}", "have \"state t = inject s'' (project (state t))\""], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Abrupt s''\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t = inject s'' (project (state t))", "by auto"], ["proof (state)\nthis:\n  state t = inject s'' (project (state t))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "ultimately"], ["proof (chain)\npicking this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))", "have \"state t = inject (inject s (project s'')) (project (state t))\""], ["proof (prove)\nusing this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (inject s (project s'')) (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  state t = inject (inject s (project s'')) (project (state t))", "show ?thesis"], ["proof (prove)\nusing this:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "by (simp add: inject_last)"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case (Fault f)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with Seq"], ["proof (chain)\npicking this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc1;\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc2,s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = lc2;\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = Seq lc1 lc2\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Fault f", "have \"t = Fault f\""], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc1;\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc2,s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = lc2;\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = Seq lc1 lc2\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. t = Fault f", "by (auto dest: Fault_end)"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Fault f", "have False"], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Fault f\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", ".."], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case Stuck"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with Seq"], ["proof (chain)\npicking this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc1;\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc2,s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = lc2;\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = Seq lc1 lc2\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Stuck", "have \"t = Stuck\""], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc1;\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e \\<Gamma>\\<turnstile> \\<langle>lc2,s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = lc2;\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = Seq lc1 lc2\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto dest: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Stuck", "have False"], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Stuck\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", ".."], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 7. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 8. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 10. \\<And>c s ca.\n        \\<lbrakk>lift\\<^sub>c ca = c;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Abrupt s))\n                           (project (state (Abrupt s)))\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 7. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 8. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 10. \\<And>c s ca.\n        \\<lbrakk>lift\\<^sub>c ca = c;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Abrupt s))\n                           (project (state (Abrupt s)))\nA total of 12 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c\\<^sub>1_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 7. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 8. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 10. \\<And>c s ca.\n        \\<lbrakk>lift\\<^sub>c ca = c;\n         Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state (Abrupt s) =\n                          inject (state (Abrupt s))\n                           (project (state (Abrupt s)))\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c\\<^sub>1_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t_ = inject (state (Normal s_)) (project (state t_))", "by (clarsimp simp add: lift\\<^sub>c_Cond lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state t_ = inject (state (Normal s_)) (project (state t_))\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 6. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 7. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state (Abrupt s') =\n                              inject (state (Normal s))\n                               (project (state (Abrupt s')));\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s'))\n                               (project (state t));\n         lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 6. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 7. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state (Abrupt s') =\n                              inject (state (Normal s))\n                               (project (state (Abrupt s')));\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s'))\n                               (project (state t));\n         lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 11 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c\\<^sub>2_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Cond b c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 6. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 7. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state (Abrupt s') =\n                              inject (state (Normal s))\n                               (project (state (Abrupt s')));\n         lift\\<^sub>e\n          \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s'))\n                               (project (state t));\n         lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c\\<^sub>2_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t_ = inject (state (Normal s_)) (project (state t_))", "by (clarsimp simp add: lift\\<^sub>c_Cond lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state t_ = inject (state (Normal s_)) (project (state t_))\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))", "case (WhileTrue s lb lc' s' t c)"], ["proof (state)\nthis:\n  s \\<in> lb\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc',Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc';\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While lb lc',s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = While lb lc';\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = While lb lc'\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))", "have t: \"t \\<notin> Fault ` UNIV \\<union> {Stuck}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<notin> range Fault \\<union> {Stuck}", "by fact"], ["proof (state)\nthis:\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))", "have lw: \"lift\\<^sub>c c = While lb lc'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c c = While lb lc'", "by fact"], ["proof (state)\nthis:\n  lift\\<^sub>c c = While lb lc'\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  lift\\<^sub>c c = While lb lc'", "obtain b c' where\n    c: \"c = While b c'\" and\n    lb: \"lb = lift\\<^sub>s b\" and\n    lc: \"lc' = lift\\<^sub>c c'\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = While lb lc'\n\ngoal (1 subgoal):\n 1. (\\<And>b c'.\n        \\<lbrakk>c = While b c'; lb = lift\\<^sub>s b;\n         lc' = lift\\<^sub>c c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: lift\\<^sub>c_While lift\\<^sub>s_def lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  c = While b c'\n  lb = lift\\<^sub>s b\n  lc' = lift\\<^sub>c c'\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c;\n            s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state s' =\n                             inject (state (Normal s)) (project (state s'));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = While b c;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state s') (project (state t));\n        lift\\<^sub>c ca = While b c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 5. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 6. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>lift\\<^sub>e\n                  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n             t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n            \\<Longrightarrow> state t =\n                              inject (state (Normal s)) (project (state t));\n         \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n         t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n        \\<Longrightarrow> state t =\n                          inject (state (Normal s)) (project (state t))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "proof (cases s')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case (Normal s'')"], ["proof (state)\nthis:\n  s' = Normal s''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from WhileTrue.hyps (3) [OF lc [symmetric]] this"], ["proof (chain)\npicking this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Normal s''", "have \"s'' = inject s (project s'')\""], ["proof (prove)\nusing this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Normal s''\n\ngoal (1 subgoal):\n 1. s'' = inject s (project s'')", "by auto"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "moreover"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from WhileTrue.hyps (5) [OF lw] Normal t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Normal s''\n  t \\<notin> range Fault \\<union> {Stuck}", "have \"state t = inject s'' (project (state t))\""], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Normal s''\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t = inject s'' (project (state t))", "by auto"], ["proof (state)\nthis:\n  state t = inject s'' (project (state t))\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "ultimately"], ["proof (chain)\npicking this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))", "have \"state t = inject (inject s (project s'')) (project (state t))\""], ["proof (prove)\nusing this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (inject s (project s'')) (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 4. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  state t = inject (inject s (project s'')) (project (state t))", "show ?thesis"], ["proof (prove)\nusing this:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "by (simp add: inject_last)"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case (Abrupt s'')"], ["proof (state)\nthis:\n  s' = Abrupt s''\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from WhileTrue.hyps (3) [OF lc [symmetric]] this"], ["proof (chain)\npicking this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Abrupt s''", "have \"s'' = inject s (project s'')\""], ["proof (prove)\nusing this:\n  s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state s' = inject (state (Normal s)) (project (state s'))\n  s' = Abrupt s''\n\ngoal (1 subgoal):\n 1. s'' = inject s (project s'')", "by auto"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "moreover"], ["proof (state)\nthis:\n  s'' = inject s (project s'')\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "from WhileTrue.hyps (5) [OF lw] Abrupt t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Abrupt s''\n  t \\<notin> range Fault \\<union> {Stuck}", "have \"state t = inject s'' (project (state t))\""], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state s') (project (state t))\n  s' = Abrupt s''\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t = inject s'' (project (state t))", "by auto"], ["proof (state)\nthis:\n  state t = inject s'' (project (state t))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "ultimately"], ["proof (chain)\npicking this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))", "have \"state t = inject (inject s (project s'')) (project (state t))\""], ["proof (prove)\nusing this:\n  s'' = inject s (project s'')\n  state t = inject s'' (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (inject s (project s'')) (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 3. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  state t = inject (inject s (project s'')) (project (state t))", "show ?thesis"], ["proof (prove)\nusing this:\n  state t = inject (inject s (project s'')) (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "by (simp add: inject_last)"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case (Fault f)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with WhileTrue"], ["proof (chain)\npicking this:\n  s \\<in> lb\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc',Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc';\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While lb lc',s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = While lb lc';\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = While lb lc'\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Fault f", "have \"t = Fault f\""], ["proof (prove)\nusing this:\n  s \\<in> lb\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc',Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc';\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While lb lc',s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = While lb lc';\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = While lb lc'\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. t = Fault f", "by (auto dest: Fault_end)"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Fault f", "have False"], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Fault f\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       state t = inject (state (Normal s)) (project (state t))\n 2. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", ".."], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "case Stuck"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with WhileTrue"], ["proof (chain)\npicking this:\n  s \\<in> lb\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc',Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc';\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While lb lc',s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = While lb lc';\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = While lb lc'\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Stuck", "have \"t = Stuck\""], ["proof (prove)\nusing this:\n  s \\<in> lb\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc',Normal s\\<rangle> \\<Rightarrow> s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc';\n   s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state s' =\n                    inject (state (Normal s)) (project (state s'))\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>While lb lc',s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = While lb lc';\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state s') (project (state t))\n  lift\\<^sub>c c = While lb lc'\n  t \\<notin> range Fault \\<union> {Stuck}\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto dest: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "with t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Stuck", "have False"], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  t = Stuck\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    state t = inject (state (Normal s)) (project (state t))", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", ".."], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 4. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 5. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 7. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 4. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 5. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 7. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  lift\\<^sub>c c = While b_ c_\n  Normal s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; lift\\<^sub>c ca = While b c;\n        Normal s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Normal s) =\n                         inject (state (Normal s))\n                          (project (state (Normal s)))\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 4. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 5. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 7. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  lift\\<^sub>c c = While b_ c_\n  Normal s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Normal s_) =\n    inject (state (Normal s_)) (project (state (Normal s_)))", "by (clarsimp simp add: lift\\<^sub>c_While inj_proj_commute)"], ["proof (state)\nthis:\n  state (Normal s_) =\n  inject (state (Normal s_)) (project (state (Normal s_)))\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 3. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 4. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 6. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 3. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 4. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 6. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case Call"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma> p_ = Some bdy_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = bdy_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Call p_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = Some bdy;\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = bdy;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c c = Call p;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 3. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 4. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 6. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma> p_ = Some bdy_\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = bdy_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = Call p_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t_ = inject (state (Normal s_)) (project (state t_))", "by (clarsimp simp add: inject_last lift\\<^sub>c_Call lift\\<^sub>e_def lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state t_ = inject (state (Normal s_)) (project (state t_))\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 2. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 3. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 5. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 2. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 3. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 5. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case CallUndefined"], ["proof (state)\nthis:\n  lift\\<^sub>e \\<Gamma> p_ = None\n  lift\\<^sub>c c = Call p_\n  Stuck \\<notin> range Fault \\<union> {Stuck}\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>lift\\<^sub>e \\<Gamma> p = None; lift\\<^sub>c c = Call p;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state (Normal s)) (project (state Stuck))\n 2. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 3. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 5. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e \\<Gamma> p_ = None\n  lift\\<^sub>c c = Call p_\n  Stuck \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state Stuck = inject (state (Normal s_)) (project (state Stuck))", "by simp"], ["proof (state)\nthis:\n  state Stuck = inject (state (Normal s_)) (project (state Stuck))\n\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 2. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 4. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 2. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 4. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case StuckProp"], ["proof (state)\nthis:\n  lift\\<^sub>c c = c_\n  Stuck \\<notin> range Fault \\<union> {Stuck}\n\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Stuck \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state Stuck =\n                         inject (state Stuck) (project (state Stuck))\n 2. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 4. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = c_\n  Stuck \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state Stuck = inject (state Stuck) (project (state Stuck))", "by simp"], ["proof (state)\nthis:\n  state Stuck = inject (state Stuck) (project (state Stuck))\n\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 3. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 3. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case DynCom"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c_ s_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = DynCom c_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           \\<lbrakk>lift\\<^sub>c ca = c s;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        lift\\<^sub>c ca = DynCom c;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 3. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c_ s_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  lift\\<^sub>c c = DynCom c_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t_ = inject (state (Normal s_)) (project (state t_))", "by (clarsimp simp add: lift\\<^sub>c_DynCom lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state t_ = inject (state (Normal s_)) (project (state t_))\n\ngoal (4 subgoals):\n 1. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 2. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 2. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case Throw"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Throw\n  Abrupt s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (4 subgoals):\n 1. \\<And>s c.\n       \\<lbrakk>lift\\<^sub>c c = Throw;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Normal s))\n                          (project (state (Abrupt s)))\n 2. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Throw\n  Abrupt s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Abrupt s_) =\n    inject (state (Normal s_)) (project (state (Abrupt s_)))", "by (simp add: inj_proj_commute)"], ["proof (state)\nthis:\n  state (Abrupt s_) =\n  inject (state (Normal s_)) (project (state (Abrupt s_)))\n\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case AbruptProp"], ["proof (state)\nthis:\n  lift\\<^sub>c c = c_\n  Abrupt s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       \\<lbrakk>lift\\<^sub>c ca = c;\n        Abrupt s \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state (Abrupt s) =\n                         inject (state (Abrupt s))\n                          (project (state (Abrupt s)))\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = c_\n  Abrupt s_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state (Abrupt s_) =\n    inject (state (Abrupt s_)) (project (state (Abrupt s_)))", "by (simp add: inj_proj_commute)"], ["proof (state)\nthis:\n  state (Abrupt s_) =\n  inject (state (Abrupt s_)) (project (state (Abrupt s_)))\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case (CatchMatch lc1 s s' lc2 t c)"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc1,Normal\ns\\<rangle> \\<Rightarrow> Abrupt s'\n  \\<lbrakk>lift\\<^sub>c ?c = lc1;\n   Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state (Abrupt s') =\n                    inject (state (Normal s)) (project (state (Abrupt s')))\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lc2,Normal s'\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>lift\\<^sub>c ?c = lc2;\n   t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t = inject (state (Normal s')) (project (state t))\n  lift\\<^sub>c c = Catch lc1 lc2\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "have t: \"t \\<notin> Fault ` UNIV \\<union> {Stuck}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<notin> range Fault \\<union> {Stuck}", "by fact"], ["proof (state)\nthis:\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "have \"lift\\<^sub>c c = Catch lc1 lc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c c = Catch lc1 lc2", "by fact"], ["proof (state)\nthis:\n  lift\\<^sub>c c = Catch lc1 lc2\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  lift\\<^sub>c c = Catch lc1 lc2", "obtain c1 c2 where\n    c: \"c = Catch c1 c2\" and\n    lc1: \"lc1 = lift\\<^sub>c c1\" and\n    lc2: \"lc2 = lift\\<^sub>c c2\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c c = Catch lc1 lc2\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>c = Catch c1 c2; lc1 = lift\\<^sub>c c1;\n         lc2 = lift\\<^sub>c c2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: lift\\<^sub>c_Catch lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  c = Catch c1 c2\n  lc1 = lift\\<^sub>c c1\n  lc2 = lift\\<^sub>c c2\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "from CatchMatch.hyps (2) [OF lc1 [symmetric]] this"], ["proof (chain)\npicking this:\n  Abrupt s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state (Abrupt s') =\n  inject (state (Normal s)) (project (state (Abrupt s')))\n  c = Catch c1 c2\n  lc1 = lift\\<^sub>c c1\n  lc2 = lift\\<^sub>c c2", "have \"s' = inject s (project s')\""], ["proof (prove)\nusing this:\n  Abrupt s' \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state (Abrupt s') =\n  inject (state (Normal s)) (project (state (Abrupt s')))\n  c = Catch c1 c2\n  lc1 = lift\\<^sub>c c1\n  lc2 = lift\\<^sub>c c2\n\ngoal (1 subgoal):\n 1. s' = inject s (project s')", "by auto"], ["proof (state)\nthis:\n  s' = inject s (project s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "moreover"], ["proof (state)\nthis:\n  s' = inject s (project s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "from CatchMatch.hyps (4) [OF lc2 [symmetric]] t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state (Normal s')) (project (state t))\n  t \\<notin> range Fault \\<union> {Stuck}", "have \"state t = inject s' (project (state t))\""], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n  state t = inject (state (Normal s')) (project (state t))\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t = inject s' (project (state t))", "by auto"], ["proof (state)\nthis:\n  state t = inject s' (project (state t))\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "ultimately"], ["proof (chain)\npicking this:\n  s' = inject s (project s')\n  state t = inject s' (project (state t))", "have \"state t = inject (inject s (project s')) (project (state t))\""], ["proof (prove)\nusing this:\n  s' = inject s (project s')\n  state t = inject s' (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (inject s (project s')) (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject (inject s (project s')) (project (state t))\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            Abrupt s' \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state (Abrupt s') =\n                             inject (state (Normal s))\n                              (project (state (Abrupt s')));\n        lift\\<^sub>e\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>2;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s')) (project (state t));\n        lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "then"], ["proof (chain)\npicking this:\n  state t = inject (inject s (project s')) (project (state t))", "show ?case"], ["proof (prove)\nusing this:\n  state t = inject (inject s (project s')) (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "by (simp add: inject_last)"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "case CatchMiss"], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c\\<^sub>1_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  \\<not> isAbr t_\n  lift\\<^sub>c c = Catch c\\<^sub>1_ c\\<^sub>2_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           \\<lbrakk>lift\\<^sub>c c = c\\<^sub>1;\n            t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n           \\<Longrightarrow> state t =\n                             inject (state (Normal s)) (project (state t));\n        \\<not> isAbr t; lift\\<^sub>c c = Catch c\\<^sub>1 c\\<^sub>2;\n        t \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n       \\<Longrightarrow> state t =\n                         inject (state (Normal s)) (project (state t))", "thus ?case"], ["proof (prove)\nusing this:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>lift\\<^sub>c ?c = c\\<^sub>1_;\n   t_ \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state t_ =\n                    inject (state (Normal s_)) (project (state t_))\n  \\<not> isAbr t_\n  lift\\<^sub>c c = Catch c\\<^sub>1_ c\\<^sub>2_\n  t_ \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. state t_ = inject (state (Normal s_)) (project (state t_))", "by (clarsimp simp add: lift\\<^sub>c_Catch lift\\<^sub>c_def)"], ["proof (state)\nthis:\n  state t_ = inject (state (Normal s_)) (project (state t_))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space_ext) valid_inject_project:\n assumes noFaultStuck:\n  \"\\<Gamma>\\<turnstile>\\<langle>c,Normal (project \\<sigma>)\\<rangle> \\<Rightarrow>\\<notin>(Fault ` UNIV \\<union> {Stuck})\"\n shows \"lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} lift\\<^sub>c c\n                {t. t=inject \\<sigma> (project t)}, {t. t=inject \\<sigma> (project t)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n    {\\<sigma>} lift\\<^sub>c\n                c {t. t =\n                      inject \\<sigma>\n                       (project t)},{t. t = inject \\<sigma> (project t)}", "proof (rule validI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {\\<sigma>}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {t. t =\n                                     inject \\<sigma> (project t)} \\<union>\n                                 Abrupt `\n                                 {t. t = inject \\<sigma> (project t)}", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {\\<sigma>}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {t. t =\n                                     inject \\<sigma> (project t)} \\<union>\n                                 Abrupt `\n                                 {t. t = inject \\<sigma> (project t)}", "assume exec: \"lift\\<^sub>e \\<Gamma>\\<turnstile>\\<langle>lift\\<^sub>c c,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {\\<sigma>}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {t. t =\n                                     inject \\<sigma> (project t)} \\<union>\n                                 Abrupt `\n                                 {t. t = inject \\<sigma> (project t)}", "assume P: \"s \\<in> {\\<sigma>}\""], ["proof (state)\nthis:\n  s \\<in> {\\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {\\<sigma>}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {t. t =\n                                     inject \\<sigma> (project t)} \\<union>\n                                 Abrupt `\n                                 {t. t = inject \\<sigma> (project t)}", "assume noFault: \"t \\<notin> Fault ` F\""], ["proof (state)\nthis:\n  t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {\\<sigma>}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {t. t =\n                                     inject \\<sigma> (project t)} \\<union>\n                                 Abrupt `\n                                 {t. t = inject \\<sigma> (project t)}", "show \"t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n        Abrupt ` {t. t = inject \\<sigma> (project t)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n            Abrupt ` {t. t = inject \\<sigma> (project t)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n            Abrupt ` {t. t = inject \\<sigma> (project t)}", "from lift_exec [OF exec]"], ["proof (chain)\npicking this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "have \"\\<Gamma>\\<turnstile>\\<langle>c,project\\<^sub>x (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n            Abrupt ` {t. t = inject \\<sigma> (project t)}", "with noFaultStuck P"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   (project\n                                     \\<sigma>)\\<rangle> \\<Rightarrow>\\<notin>range\n  Fault \\<union>\n {Stuck}\n  s \\<in> {\\<sigma>}\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t", "have t: \"t \\<notin> Fault ` UNIV \\<union> {Stuck}\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   (project\n                                     \\<sigma>)\\<rangle> \\<Rightarrow>\\<notin>range\n  Fault \\<union>\n {Stuck}\n  s \\<in> {\\<sigma>}\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal (1 subgoal):\n 1. t \\<notin> range Fault \\<union> {Stuck}", "by (auto simp add: final_notin_def project\\<^sub>x_def)"], ["proof (state)\nthis:\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n            Abrupt ` {t. t = inject \\<sigma> (project t)}", "from lift_exec_inject_same [OF exec refl this] P"], ["proof (chain)\npicking this:\n  state t = inject (state (Normal s)) (project (state t))\n  s \\<in> {\\<sigma>}", "have \"state t = inject \\<sigma> (project (state t))\""], ["proof (prove)\nusing this:\n  state t = inject (state (Normal s)) (project (state t))\n  s \\<in> {\\<sigma>}\n\ngoal (1 subgoal):\n 1. state t = inject \\<sigma> (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject \\<sigma> (project (state t))\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n            Abrupt ` {t. t = inject \\<sigma> (project t)}", "with t"], ["proof (chain)\npicking this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  state t = inject \\<sigma> (project (state t))", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<notin> range Fault \\<union> {Stuck}\n  state t = inject \\<sigma> (project (state t))\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n            Abrupt ` {t. t = inject \\<sigma> (project t)}", "by (cases t) auto"], ["proof (state)\nthis:\n  t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n          Abrupt ` {t. t = inject \\<sigma> (project t)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<in> Normal ` {t. t = inject \\<sigma> (project t)} \\<union>\n          Abrupt ` {t. t = inject \\<sigma> (project t)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space_ext) lift_exec_inject_same':\nassumes exec_lc: \"(lift\\<^sub>e \\<Gamma>)\\<turnstile>\\<langle>lift\\<^sub>c c,S\\<rangle> \\<Rightarrow> T\"\nshows \"\\<And>c. \\<lbrakk>T \\<notin> (Fault ` UNIV) \\<union> {Stuck}\\<rbrakk> \\<Longrightarrow>\n              state T = inject (state S) (project (state T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       T \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n       state T = inject (state S) (project (state T))", "using lift_exec_inject_same [OF exec_lc]"], ["proof (prove)\nusing this:\n  \\<lbrakk>lift\\<^sub>c ?c = lift\\<^sub>c c;\n   T \\<notin> range Fault \\<union> {Stuck}\\<rbrakk>\n  \\<Longrightarrow> state T = inject (state S) (project (state T))\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       T \\<notin> range Fault \\<union> {Stuck} \\<Longrightarrow>\n       state T = inject (state S) (project (state T))", "by simp"], ["", "lemma (in lift_state_space_ext) valid_lift_modifies:\n  assumes valid: \"\\<forall>s. \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> {s} c (Modif s),(ModifAbr s)\"\n  shows \"(lift\\<^sub>e \\<Gamma>)\\<Turnstile>\\<^bsub>/F\\<^esub> {S} (lift\\<^sub>c c)\n           {T. T \\<in> lift\\<^sub>s (Modif (project S)) \\<and> T=inject S (project T)},\n           {T. T \\<in> lift\\<^sub>s (ModifAbr (project S)) \\<and> T=inject S (project T)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n    {S} lift\\<^sub>c\n         c {T \\<in> lift\\<^sub>s (Modif (project S)).\n            T =\n            inject S\n             (project\n               T)},{T \\<in> lift\\<^sub>s (ModifAbr (project S)).\n                    T = inject S (project T)}", "proof (rule validI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {S}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {T \\<in> lift\\<^sub>s (Modif (project S)).\n                                  T = inject S (project T)} \\<union>\n                                 Abrupt `\n                                 {T \\<in> lift\\<^sub>s\n     (ModifAbr (project S)).\n                                  T = inject S (project T)}", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {S}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {T \\<in> lift\\<^sub>s (Modif (project S)).\n                                  T = inject S (project T)} \\<union>\n                                 Abrupt `\n                                 {T \\<in> lift\\<^sub>s\n     (ModifAbr (project S)).\n                                  T = inject S (project T)}", "assume exec: \"lift\\<^sub>e \\<Gamma>\\<turnstile>\\<langle>lift\\<^sub>c c,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  lift\\<^sub>e\n   \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n                                  c,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {S}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {T \\<in> lift\\<^sub>s (Modif (project S)).\n                                  T = inject S (project T)} \\<union>\n                                 Abrupt `\n                                 {T \\<in> lift\\<^sub>s\n     (ModifAbr (project S)).\n                                  T = inject S (project T)}", "assume P: \"s \\<in> {S}\""], ["proof (state)\nthis:\n  s \\<in> {S}\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {S}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {T \\<in> lift\\<^sub>s (Modif (project S)).\n                                  T = inject S (project T)} \\<union>\n                                 Abrupt `\n                                 {T \\<in> lift\\<^sub>s\n     (ModifAbr (project S)).\n                                  T = inject S (project T)}", "assume noFault: \"t \\<notin> Fault ` F\""], ["proof (state)\nthis:\n  t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>lift\\<^sub>e\n                 \\<Gamma>\\<turnstile> \\<langle>lift\\<^sub>c\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> {S}; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal `\n                                 {T \\<in> lift\\<^sub>s (Modif (project S)).\n                                  T = inject S (project T)} \\<union>\n                                 Abrupt `\n                                 {T \\<in> lift\\<^sub>s\n     (ModifAbr (project S)).\n                                  T = inject S (project T)}", "show \"t \\<in> Normal `\n                 {t \\<in> lift\\<^sub>s (Modif (project S)).\n                  t = inject S (project t)} \\<union>\n                 Abrupt `\n                 {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n                  t = inject S (project t)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "from lift_exec [OF exec]"], ["proof (chain)\npicking this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "have \"\\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x (Normal s)\\<rangle> \\<Rightarrow> project\\<^sub>x t\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>?c,project\\<^sub>x\n                                    (Normal\ns)\\<rangle> \\<Rightarrow> project\\<^sub>x t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                     (Normal\n s)\\<rangle> \\<Rightarrow> project\\<^sub>x t", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "from noFault"], ["proof (chain)\npicking this:\n  t \\<notin> Fault ` F", "have \"project\\<^sub>x t \\<notin> Fault ` F\""], ["proof (prove)\nusing this:\n  t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. project\\<^sub>x t \\<notin> Fault ` F", "by (cases \"t\") (auto simp add: project\\<^sub>x_def)"], ["proof (state)\nthis:\n  project\\<^sub>x t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n  project\\<^sub>x t \\<notin> Fault ` F", "have \"project\\<^sub>x t \\<in>\n            Normal ` (Modif (project s)) \\<union> Abrupt ` (ModifAbr (project s))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n  project\\<^sub>x t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. project\\<^sub>x t\n    \\<in> Normal ` Modif (project s) \\<union> Abrupt ` ModifAbr (project s)", "using valid [rule_format, of \"(project s)\"]"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,project\\<^sub>x\n                                   (Normal\n                                     s)\\<rangle> \\<Rightarrow> project\\<^sub>x\n                          t\n  project\\<^sub>x t \\<notin> Fault ` F\n  \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n  {project s} c (Modif (project s)),(ModifAbr (project s))\n\ngoal (1 subgoal):\n 1. project\\<^sub>x t\n    \\<in> Normal ` Modif (project s) \\<union> Abrupt ` ModifAbr (project s)", "by (auto simp add: valid_def project\\<^sub>x_def)"], ["proof (state)\nthis:\n  project\\<^sub>x t\n  \\<in> Normal ` Modif (project s) \\<union> Abrupt ` ModifAbr (project s)\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "hence t: \"t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n               Abrupt ` lift\\<^sub>s (ModifAbr (project s))\""], ["proof (prove)\nusing this:\n  project\\<^sub>x t\n  \\<in> Normal ` Modif (project s) \\<union> Abrupt ` ModifAbr (project s)\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n            Abrupt ` lift\\<^sub>s (ModifAbr (project s))", "by (cases t) (auto simp add: project\\<^sub>x_def lift\\<^sub>s_def Compose.lift\\<^sub>s_def)"], ["proof (state)\nthis:\n  t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n          Abrupt ` lift\\<^sub>s (ModifAbr (project s))\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "then"], ["proof (chain)\npicking this:\n  t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n          Abrupt ` lift\\<^sub>s (ModifAbr (project s))", "have \"t \\<notin> Fault ` UNIV \\<union> {Stuck}\""], ["proof (prove)\nusing this:\n  t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n          Abrupt ` lift\\<^sub>s (ModifAbr (project s))\n\ngoal (1 subgoal):\n 1. t \\<notin> range Fault \\<union> {Stuck}", "by (cases t) auto"], ["proof (state)\nthis:\n  t \\<notin> range Fault \\<union> {Stuck}\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "from lift_exec_inject_same [OF exec _ this]"], ["proof (chain)\npicking this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  state t = inject (state (Normal s)) (project (state t))", "have \"state t = inject (state (Normal s)) (project (state t))\""], ["proof (prove)\nusing this:\n  lift\\<^sub>c ?c = lift\\<^sub>c c \\<Longrightarrow>\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (1 subgoal):\n 1. state t = inject (state (Normal s)) (project (state t))", "by simp"], ["proof (state)\nthis:\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "with t"], ["proof (chain)\npicking this:\n  t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n          Abrupt ` lift\\<^sub>s (ModifAbr (project s))\n  state t = inject (state (Normal s)) (project (state t))", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n          Abrupt ` lift\\<^sub>s (ModifAbr (project s))\n  state t = inject (state (Normal s)) (project (state t))\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "using P"], ["proof (prove)\nusing this:\n  t \\<in> Normal ` lift\\<^sub>s (Modif (project s)) \\<union>\n          Abrupt ` lift\\<^sub>s (ModifAbr (project s))\n  state t = inject (state (Normal s)) (project (state t))\n  s \\<in> {S}\n\ngoal (1 subgoal):\n 1. t \\<in> Normal `\n            {t \\<in> lift\\<^sub>s (Modif (project S)).\n             t = inject S (project t)} \\<union>\n            Abrupt `\n            {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n             t = inject S (project t)}", "by auto"], ["proof (state)\nthis:\n  t \\<in> Normal `\n          {t \\<in> lift\\<^sub>s (Modif (project S)).\n           t = inject S (project t)} \\<union>\n          Abrupt `\n          {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n           t = inject S (project t)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<in> Normal `\n          {t \\<in> lift\\<^sub>s (Modif (project S)).\n           t = inject S (project t)} \\<union>\n          Abrupt `\n          {t \\<in> lift\\<^sub>s (ModifAbr (project S)).\n           t = inject S (project t)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in lift_state_space_ext) hoare_lift_modifies:\n  assumes deriv: \"\\<forall>\\<sigma>. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} c (Modif \\<sigma>),(ModifAbr \\<sigma>)\"\n  shows \"\\<forall>\\<sigma>. (lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} (lift\\<^sub>c c)\n           {T. T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)) \\<and> T=inject \\<sigma> (project T)},\n           {T. T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)) \\<and> T=inject \\<sigma> (project T)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       lift\\<^sub>e \\<Gamma>,{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>{\\<sigma>} lift\\<^sub>c c\n   {T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)).\n    T = inject \\<sigma> (project T)},\n   {T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)).\n    T = inject \\<sigma> (project T)}", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       lift\\<^sub>e \\<Gamma>,{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>{\\<sigma>} lift\\<^sub>c c\n   {T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)).\n    T = inject \\<sigma> (project T)},\n   {T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)).\n    T = inject \\<sigma> (project T)}", "apply (rule hoare_complete)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       lift\\<^sub>e \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n       {\\<sigma>} lift\\<^sub>c\n                   c {T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)).\n                      T =\n                      inject \\<sigma>\n                       (project\n                         T)},{T \\<in> lift\\<^sub>s\n (ModifAbr (project \\<sigma>)).\n                              T = inject \\<sigma> (project T)}", "apply (rule valid_lift_modifies)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>s. \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub>\n          {s} c (Modif s),(ModifAbr s)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> {s} c (Modif s),(ModifAbr s)", "apply (insert hoare_sound [OF deriv [rule_format]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s.\n       (\\<And>\\<sigma>.\n           \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub>\n           {\\<sigma>} c (Modif\n                          \\<sigma>),(ModifAbr \\<sigma>)) \\<Longrightarrow>\n       \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> {s} c (Modif s),(ModifAbr s)", "apply (simp add: cvalid_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in lift_state_space_ext) hoare_lift_modifies':\n  assumes deriv: \"\\<forall>\\<sigma>. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} c (Modif \\<sigma>),(ModifAbr \\<sigma>)\"\n  shows \"\\<forall>\\<sigma>. (lift\\<^sub>e \\<Gamma>),{}\\<turnstile>\\<^bsub>/F\\<^esub> {\\<sigma>} (lift\\<^sub>c c)\n           {T. T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)) \\<and>\n                   (\\<exists>T'. T=inject \\<sigma> T')},\n           {T. T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)) \\<and>\n                   (\\<exists>T'. T=inject \\<sigma> T')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       lift\\<^sub>e \\<Gamma>,{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>{\\<sigma>} lift\\<^sub>c c\n   {T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)).\n    \\<exists>T'. T = inject \\<sigma> T'},\n   {T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)).\n    \\<exists>T'. T = inject \\<sigma> T'}", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       lift\\<^sub>e \\<Gamma>,{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>{\\<sigma>} lift\\<^sub>c c\n   {T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)).\n    \\<exists>T'. T = inject \\<sigma> T'},\n   {T \\<in> lift\\<^sub>s (ModifAbr (project \\<sigma>)).\n    \\<exists>T'. T = inject \\<sigma> T'}", "apply (rule HoarePartialDef.conseq [OF hoare_lift_modifies [OF deriv]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>s.\n          s \\<in> {\\<sigma>} \\<longrightarrow>\n          (\\<exists>Z.\n              s \\<in> {Z} \\<and>\n              {T \\<in> lift\\<^sub>s (Modif (project Z)).\n               T = inject Z (project T)}\n              \\<subseteq> {T \\<in> lift\\<^sub>s (Modif (project \\<sigma>)).\n                           \\<exists>T'. T = inject \\<sigma> T'} \\<and>\n              {T \\<in> lift\\<^sub>s (ModifAbr (project Z)).\n               T = inject Z (project T)}\n              \\<subseteq> {T \\<in> lift\\<^sub>s\n                                    (ModifAbr (project \\<sigma>)).\n                           \\<exists>T'. T = inject \\<sigma> T'})", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Renaming Procedures\\<close>"], ["", "primrec rename:: \"('p \\<Rightarrow> 'q) \\<Rightarrow> ('s,'p,'f) com \\<Rightarrow> ('s,'q,'f) com\"\nwhere\n\"rename N Skip = Skip\" |\n\"rename N (Basic f) = Basic f\" |\n\"rename N (Spec r) = Spec r\" |\n\"rename N (Seq c\\<^sub>1 c\\<^sub>2)  = (Seq (rename N c\\<^sub>1) (rename N c\\<^sub>2))\" |\n\"rename N (Cond b c\\<^sub>1 c\\<^sub>2) = Cond b (rename N c\\<^sub>1) (rename N c\\<^sub>2)\" |\n\"rename N (While b c) = While b (rename N c)\" |\n\"rename N (Call p) = Call (N p)\" |\n\"rename N (DynCom c) = DynCom (\\<lambda>s. rename N (c s))\" |\n\"rename N (Guard f g c) = Guard f g (rename N c)\" |\n\"rename N Throw = Throw\" |\n\"rename N (Catch c\\<^sub>1 c\\<^sub>2) = Catch (rename N c\\<^sub>1) (rename N c\\<^sub>2)\""], ["", "lemma rename_Skip: \"rename h c = Skip = (c=Skip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Skip) = (c = Skip)", "by (cases c) auto"], ["", "lemma rename_Basic:\n  \"(rename h c = Basic f) = (c=Basic f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Basic f) = (c = Basic f)", "by (cases c) auto"], ["", "lemma rename_Spec:\n  \"(rename h c = Spec r) = (c=Spec r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Spec r) = (c = Spec r)", "by (cases c) auto"], ["", "lemma rename_Seq:\n  \"(rename h c = Seq rc\\<^sub>1 rc\\<^sub>2) =\n     (\\<exists> c\\<^sub>1 c\\<^sub>2. c = Seq c\\<^sub>1 c\\<^sub>2 \\<and>\n               rc\\<^sub>1 = rename h c\\<^sub>1 \\<and> rc\\<^sub>2 = rename h c\\<^sub>2 )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Seq rc\\<^sub>1 rc\\<^sub>2) =\n    (\\<exists>c\\<^sub>1 c\\<^sub>2.\n        c = Seq c\\<^sub>1 c\\<^sub>2 \\<and>\n        rc\\<^sub>1 = rename h c\\<^sub>1 \\<and>\n        rc\\<^sub>2 = rename h c\\<^sub>2)", "by (cases c) auto"], ["", "lemma rename_Cond:\n  \"(rename h c = Cond b rc\\<^sub>1 rc\\<^sub>2) =\n     (\\<exists>c\\<^sub>1 c\\<^sub>2. c = Cond b c\\<^sub>1 c\\<^sub>2  \\<and> rc\\<^sub>1 = rename h c\\<^sub>1 \\<and> rc\\<^sub>2 = rename h c\\<^sub>2 )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Cond b rc\\<^sub>1 rc\\<^sub>2) =\n    (\\<exists>c\\<^sub>1 c\\<^sub>2.\n        c = Cond b c\\<^sub>1 c\\<^sub>2 \\<and>\n        rc\\<^sub>1 = rename h c\\<^sub>1 \\<and>\n        rc\\<^sub>2 = rename h c\\<^sub>2)", "by (cases c) auto"], ["", "lemma rename_While:\n  \"(rename h c = While b rc') = (\\<exists>c'. c = While b c' \\<and> rc' = rename h c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = While b rc') =\n    (\\<exists>c'. c = While b c' \\<and> rc' = rename h c')", "by (cases c) auto"], ["", "lemma rename_Call:\n  \"(rename h c = Call q) = (\\<exists>p. c = Call p \\<and> q=h p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Call q) = (\\<exists>p. c = Call p \\<and> q = h p)", "by (cases c) auto"], ["", "lemma rename_DynCom:\n  \"(rename h c = DynCom rc) = (\\<exists>C. c=DynCom C \\<and> rc = (\\<lambda>s. rename h (C s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = DynCom rc) =\n    (\\<exists>C. c = DynCom C \\<and> rc = (\\<lambda>s. rename h (C s)))", "by (cases c) auto"], ["", "lemma rename_Guard:\n  \"(rename h c = Guard f g rc') =\n     (\\<exists>c'. c = Guard f g c' \\<and> rc' = rename h c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Guard f g rc') =\n    (\\<exists>c'. c = Guard f g c' \\<and> rc' = rename h c')", "by (cases c) auto"], ["", "lemma rename_Throw:\n  \"(rename h c = Throw) = (c = Throw)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Throw) = (c = Throw)", "by (cases c) auto"], ["", "lemma rename_Catch:\n  \"(rename h c = Catch rc\\<^sub>1 rc\\<^sub>2) =\n     (\\<exists>c\\<^sub>1 c\\<^sub>2. c = Catch c\\<^sub>1 c\\<^sub>2 \\<and> rc\\<^sub>1 = rename h c\\<^sub>1 \\<and> rc\\<^sub>2 = rename h c\\<^sub>2 )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rename h c = Catch rc\\<^sub>1 rc\\<^sub>2) =\n    (\\<exists>c\\<^sub>1 c\\<^sub>2.\n        c = Catch c\\<^sub>1 c\\<^sub>2 \\<and>\n        rc\\<^sub>1 = rename h c\\<^sub>1 \\<and>\n        rc\\<^sub>2 = rename h c\\<^sub>2)", "by (cases c) auto"], ["", "lemma exec_rename_to_exec:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (h p) = Some (rename h bdy)\"\n  assumes exec: \"\\<Gamma>'\\<turnstile>\\<langle>rc,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<And>c. rename h c = rc\\<Longrightarrow>  \\<exists>t'. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and> (t'=Stuck \\<or> t'=t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       rename h c = rc \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "using exec"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile> \\<langle>rc,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       rename h c = rc \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "proof (induct)"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s c.\n       rename h c = Skip \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal s)\n 2. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 4. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 5. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 6. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 7. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>2 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 20 subgoals...", "case Skip"], ["proof (state)\nthis:\n  rename h c = Skip\n\ngoal (20 subgoals):\n 1. \\<And>s c.\n       rename h c = Skip \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal s)\n 2. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 4. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 5. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 6. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 7. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>2 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  rename h c = Skip\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Normal s_)", "by (fastforce intro: exec.intros simp add: rename_Skip)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Normal s_)\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 3. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 4. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>'\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            rename h ca = c \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n           s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = s');\n         \\<Gamma>'\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            rename h ca = While b c \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 3. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 4. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>'\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            rename h ca = c \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n           s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = s');\n         \\<Gamma>'\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            rename h ca = While b c \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 19 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>'\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Guard f_ g_ c_\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f ca.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 3. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 4. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 5. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 6. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c s' t ca.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>'\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> s';\n         \\<And>ca.\n            rename h ca = c \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n           s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = s');\n         \\<Gamma>'\\<turnstile> \\<langle>While b\n   c,s'\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            rename h ca = While b c \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>'\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Guard f_ g_ c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_Guard)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 2. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 3. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = Normal s)\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 2. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 3. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = Normal s)\nA total of 18 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  rename h c = Guard f_ g_ c_\n\ngoal (18 subgoals):\n 1. \\<And>s g f c ca.\n       \\<lbrakk>s \\<notin> g; rename h ca = Guard f g c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Fault f)\n 2. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 3. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 4. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 5. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s b c ca.\n        \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = Normal s)\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  rename h c = Guard f_ g_ c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Fault f_)", "by (fastforce intro: exec.intros simp add: rename_Guard)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Fault f_)\n\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 2. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>\\<Gamma>' p = Some bdy;\n         \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = bdy \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 2. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>\\<Gamma>' p = Some bdy;\n         \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = bdy \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 17 subgoals...", "case FaultProp"], ["proof (state)\nthis:\n  rename h c = c_\n\ngoal (17 subgoals):\n 1. \\<And>c f ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Fault\n      f\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Fault f)\n 2. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 3. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 4. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 10. \\<And>p bdy s t c.\n        \\<lbrakk>\\<Gamma>' p = Some bdy;\n         \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n       s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = bdy \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  rename h c = c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Fault f_)", "by (fastforce intro: exec.intros)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Fault\nf_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Fault f_)\n\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>p s c.\n        \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = Stuck)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>p s c.\n        \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = Stuck)\nA total of 16 subgoals...", "case Basic"], ["proof (state)\nthis:\n  rename h c = Basic f_\n\ngoal (16 subgoals):\n 1. \\<And>f s c.\n       rename h c = Basic f \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Normal (f s))\n 2. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 3. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 9. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>p s c.\n        \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = Stuck)\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  rename h c = Basic f_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Normal (f_ s_))", "by (fastforce intro: exec.intros simp add: rename_Basic)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Normal (f_ s_))\n\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 10. \\<And>c ca.\n        rename h ca = c \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Stuck)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 10. \\<And>c ca.\n        rename h ca = c \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Stuck)\nA total of 15 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n  rename h c = Spec r_\n\ngoal (15 subgoals):\n 1. \\<And>s t r c.\n       \\<lbrakk>(s, t) \\<in> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal t)\n 2. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 8. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 10. \\<And>c ca.\n        rename h ca = c \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Stuck)\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n  rename h c = Spec r_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Normal t_)", "by (fastforce intro: exec.intros simp add: rename_Spec)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Normal t_)\n\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 9. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 10. \\<And>c s t ca.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            rename h ca = c s \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n           s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h ca = DynCom c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 9. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 10. \\<And>c s t ca.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            rename h ca = c s \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n           s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h ca = DynCom c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 14 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n  rename h c = Spec r_\n\ngoal (14 subgoals):\n 1. \\<And>s r c.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r; rename h c = Spec r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 7. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 9. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 10. \\<And>c s t ca.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n           s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<And>ca.\n            rename h ca = c s \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n           s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h ca = DynCom c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                         s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n  rename h c = Spec r_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Stuck)", "by (fastforce intro: exec.intros simp add: rename_Spec)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Stuck)\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 9. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s c.\n        rename h c = Throw \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Abrupt s)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 9. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s c.\n        rename h c = Throw \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Abrupt s)\nA total of 13 subgoals...", "case Seq"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> s'_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = s'_)\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2_,s'_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,s'_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Seq c\\<^sub>1_ c\\<^sub>2_\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Seq c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 6. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 9. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>s c.\n        rename h c = Throw \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Abrupt s)\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> s'_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = s'_)\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2_,s'_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,s'_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Seq c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_Seq)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 10. \\<And>c s ca.\n        rename h ca = c \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n       s\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Abrupt s)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 10. \\<And>c s ca.\n        rename h ca = c \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n       s\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Abrupt s)\nA total of 12 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2 c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 5. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 8. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 10. \\<And>c s ca.\n        rename h ca = c \\<Longrightarrow>\n        \\<exists>t'.\n           \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n       s\\<rangle> \\<Rightarrow> t' \\<and>\n           (t' = Stuck \\<or> t' = Abrupt s)\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_Cond)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 9. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            rename h c = c\\<^sub>1 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = Abrupt s');\n         \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>2 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s'\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 9. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            rename h c = c\\<^sub>1 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = Abrupt s');\n         \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>2 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s'\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 11 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1 c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Cond b c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 4. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 7. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 9. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<And>c.\n            rename h c = c\\<^sub>1 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = Abrupt s');\n         \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n             s'\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>2 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s'\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Cond b_ c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_Cond)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 8. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>1 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 8. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>1 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)", "case WhileTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>'\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> s'_\n  rename h ?c = c_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = s'_)\n  \\<Gamma>'\\<turnstile> \\<langle>While b_ c_,s'_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = While b_ c_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,s'_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = While b_ c_\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t ca.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>'\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<And>ca.\n           rename h ca = c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = s');\n        \\<Gamma>'\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = While b c \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 3. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 6. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 8. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n        \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                     s\\<rangle> \\<Rightarrow> t;\n         \\<And>c.\n            rename h c = c\\<^sub>1 \\<Longrightarrow>\n            \\<exists>t'.\n               \\<Gamma>\\<turnstile> \\<langle>c,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n               (t' = Stuck \\<or> t' = t);\n         \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<exists>t'.\n                             \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                             (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>'\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> s'_\n  rename h ?c = c_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = s'_)\n  \\<Gamma>'\\<turnstile> \\<langle>While b_ c_,s'_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = While b_ c_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,s'_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = While b_ c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_While)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  rename h c = While b_ c_\n\ngoal (9 subgoals):\n 1. \\<And>s b c ca.\n       \\<lbrakk>s \\<notin> b; rename h ca = While b c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Normal s)\n 2. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 5. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  rename h c = While b_ c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Normal s_)", "by (fastforce intro: exec.intros simp add: rename_While)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Normal s_)\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case (Call p rbdy s t)"], ["proof (state)\nthis:\n  \\<Gamma>' p = Some rbdy\n  \\<Gamma>'\\<turnstile> \\<langle>rbdy,Normal s\\<rangle> \\<Rightarrow> t\n  rename h ?c = rbdy \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n  rename h c = Call p\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "have rbdy: \"\\<Gamma>' p = Some rbdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' p = Some rbdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>' p = Some rbdy\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "have \"rename h c = Call p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rename h c = Call p", "by fact"], ["proof (state)\nthis:\n  rename h c = Call p\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "then"], ["proof (chain)\npicking this:\n  rename h c = Call p", "obtain q where c: \"c=Call q\" and p: \"p=h q\""], ["proof (prove)\nusing this:\n  rename h c = Call p\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>c = Call q; p = h q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: rename_Call)"], ["proof (state)\nthis:\n  c = Call q\n  p = h q\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t c.\n       \\<lbrakk>\\<Gamma>' p = Some bdy;\n        \\<Gamma>'\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = bdy \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 4. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)", "proof (cases \"\\<Gamma> q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> q = None \\<Longrightarrow>\n    \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)\n 2. \\<And>a.\n       \\<Gamma> q = Some a \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "case None"], ["proof (state)\nthis:\n  \\<Gamma> q = None\n\ngoal (2 subgoals):\n 1. \\<Gamma> q = None \\<Longrightarrow>\n    \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)\n 2. \\<And>a.\n       \\<Gamma> q = Some a \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "with c"], ["proof (chain)\npicking this:\n  c = Call q\n  \\<Gamma> q = None", "show ?thesis"], ["proof (prove)\nusing this:\n  c = Call q\n  \\<Gamma> q = None\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)", "by (auto intro: exec.CallUndefined)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> q = Some a \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> q = Some a \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "case (Some bdy)"], ["proof (state)\nthis:\n  \\<Gamma> q = Some bdy\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> q = Some a \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "from \\<Gamma> [rule_format, OF this] p rbdy"], ["proof (chain)\npicking this:\n  \\<Gamma>' (h q) = Some (rename h bdy)\n  p = h q\n  \\<Gamma>' p = Some rbdy", "have \"rename h bdy = rbdy\""], ["proof (prove)\nusing this:\n  \\<Gamma>' (h q) = Some (rename h bdy)\n  p = h q\n  \\<Gamma>' p = Some rbdy\n\ngoal (1 subgoal):\n 1. rename h bdy = rbdy", "by simp"], ["proof (state)\nthis:\n  rename h bdy = rbdy\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> q = Some a \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = t)", "with Call.hyps c Some"], ["proof (chain)\npicking this:\n  \\<Gamma>' p = Some rbdy\n  \\<Gamma>'\\<turnstile> \\<langle>rbdy,Normal s\\<rangle> \\<Rightarrow> t\n  rename h ?c = rbdy \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n  c = Call q\n  \\<Gamma> q = Some bdy\n  rename h bdy = rbdy", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>' p = Some rbdy\n  \\<Gamma>'\\<turnstile> \\<langle>rbdy,Normal s\\<rangle> \\<Rightarrow> t\n  rename h ?c = rbdy \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n  c = Call q\n  \\<Gamma> q = Some bdy\n  rename h bdy = rbdy\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)", "by (fastforce intro: exec.intros)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case (CallUndefined p s)"], ["proof (state)\nthis:\n  \\<Gamma>' p = None\n  rename h c = Call p\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "have undef: \"\\<Gamma>' p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' p = None", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>' p = None\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "have \"rename h c = Call p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rename h c = Call p", "by fact"], ["proof (state)\nthis:\n  rename h c = Call p\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "then"], ["proof (chain)\npicking this:\n  rename h c = Call p", "obtain q where c: \"c=Call q\" and p: \"p=h q\""], ["proof (prove)\nusing this:\n  rename h c = Call p\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>c = Call q; p = h q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: rename_Call)"], ["proof (state)\nthis:\n  c = Call q\n  p = h q\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "from undef p \\<Gamma>"], ["proof (chain)\npicking this:\n  \\<Gamma>' p = None\n  p = h q\n  \\<forall>p bdy.\n     \\<Gamma> p = Some bdy \\<longrightarrow>\n     \\<Gamma>' (h p) = Some (rename h bdy)", "have \"\\<Gamma> q = None\""], ["proof (prove)\nusing this:\n  \\<Gamma>' p = None\n  p = h q\n  \\<forall>p bdy.\n     \\<Gamma> p = Some bdy \\<longrightarrow>\n     \\<Gamma>' (h p) = Some (rename h bdy)\n\ngoal (1 subgoal):\n 1. \\<Gamma> q = None", "by (cases \"\\<Gamma> q\") auto"], ["proof (state)\nthis:\n  \\<Gamma> q = None\n\ngoal (7 subgoals):\n 1. \\<And>p s c.\n       \\<lbrakk>\\<Gamma>' p = None; rename h c = Call p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 3. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "with p c"], ["proof (chain)\npicking this:\n  p = h q\n  c = Call q\n  \\<Gamma> q = None", "show ?case"], ["proof (prove)\nusing this:\n  p = h q\n  c = Call q\n  \\<Gamma> q = None\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Stuck)", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Stuck)\n\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 4. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 4. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case StuckProp"], ["proof (state)\nthis:\n  rename h c = c_\n\ngoal (6 subgoals):\n 1. \\<And>c ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Stuck)\n 2. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 4. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  rename h c = c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Stuck)", "by (fastforce intro: exec.intros)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Stuck)\n\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 3. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 3. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c_ s_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = DynCom c_\n\ngoal (5 subgoals):\n 1. \\<And>c s t ca.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<And>ca.\n           rename h ca = c s \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n          s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h ca = DynCom c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>ca,Normal\n                        s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 3. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c_ s_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = DynCom c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_DynCom)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (4 subgoals):\n 1. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 2. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 2. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case Throw"], ["proof (state)\nthis:\n  rename h c = Throw\n\ngoal (4 subgoals):\n 1. \\<And>s c.\n       rename h c = Throw \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>c,Normal\n     s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 2. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  rename h c = Throw\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Abrupt s_)", "by (fastforce intro: exec.intros simp add: rename_Throw)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Abrupt s_)\n\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case AbruptProp"], ["proof (state)\nthis:\n  rename h c = c_\n\ngoal (3 subgoals):\n 1. \\<And>c s ca.\n       rename h ca = c \\<Longrightarrow>\n       \\<exists>t'.\n          \\<Gamma>\\<turnstile> \\<langle>ca,Abrupt\n      s\\<rangle> \\<Rightarrow> t' \\<and>\n          (t' = Stuck \\<or> t' = Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  rename h c = c_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = Abrupt s_)", "by (fastforce intro: exec.intros)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Abrupt s_)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case CatchMatch"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> Abrupt s'_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Abrupt s'_)\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s'_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s'_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Catch c\\<^sub>1_ c\\<^sub>2_\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = Abrupt s');\n        \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>2 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s'\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> Abrupt s'_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Abrupt s'_)\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n       s'_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>2_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s'_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  rename h c = Catch c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_Catch)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "case CatchMiss"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  \\<not> isAbr t_\n  rename h c = Catch c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2 c.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n        \\<And>c.\n           rename h c = c\\<^sub>1 \\<Longrightarrow>\n           \\<exists>t'.\n              \\<Gamma>\\<turnstile> \\<langle>c,Normal\n         s\\<rangle> \\<Rightarrow> t' \\<and>\n              (t' = Stuck \\<or> t' = t);\n        \\<not> isAbr t; rename h c = Catch c\\<^sub>1 c\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t'.\n                            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                       s\\<rangle> \\<Rightarrow> t' \\<and>\n                            (t' = Stuck \\<or> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n       s_\\<rangle> \\<Rightarrow> t_\n  rename h ?c = c\\<^sub>1_ \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n  \\<not> isAbr t_\n  rename h c = Catch c\\<^sub>1_ c\\<^sub>2_\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s_\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t_)", "by (fastforce intro: exec.intros simp add: rename_Catch)"], ["proof (state)\nthis:\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns_\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t_)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_rename_to_exec':\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes exec: \"\\<Gamma>'\\<turnstile>\\<langle>rename N c,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<exists>t'. \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and> (t'=Stuck \\<or> t'=t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)", "using exec_rename_to_exec [OF \\<Gamma> exec]"], ["proof (prove)\nusing this:\n  rename N ?c = rename N c \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t' \\<and>\n       (t' = Stuck \\<or> t' = t)", "by  auto"], ["", "lemma valid_to_valid_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P (rename N c) Q,A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A", "proof (rule validI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>rename N\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` Q \\<union> Abrupt ` A", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>rename N\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` Q \\<union> Abrupt ` A", "assume execr: \"\\<Gamma>'\\<turnstile> \\<langle>rename N c,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>rename N\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` Q \\<union> Abrupt ` A", "assume P: \"s \\<in> P\""], ["proof (state)\nthis:\n  s \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>rename N\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` Q \\<union> Abrupt ` A", "assume noFault: \"t \\<notin> Fault ` F\""], ["proof (state)\nthis:\n  t \\<notin> Fault ` F\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>\\<Gamma>'\\<turnstile> \\<langle>rename N\n          c,Normal s\\<rangle> \\<Rightarrow> t;\n        s \\<in> P; t \\<notin> Fault ` F\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Normal ` Q \\<union> Abrupt ` A", "show \"t \\<in> Normal ` Q \\<union> Abrupt ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> Normal ` Q \\<union> Abrupt ` A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> Normal ` Q \\<union> Abrupt ` A", "from exec_rename_to_exec [OF \\<Gamma> execr]"], ["proof (chain)\npicking this:\n  rename N ?c = rename N c \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)", "obtain t' where\n      exec: \"\\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\"  and t': \"(t' = Stuck \\<or> t' = t)\""], ["proof (prove)\nusing this:\n  rename N ?c = rename N c \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n            s\\<rangle> \\<Rightarrow> t';\n         t' = Stuck \\<or> t' = t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` Q \\<union> Abrupt ` A", "with valid noFault P"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\n  t \\<notin> Fault ` F\n  s \\<in> P\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A\n  t \\<notin> Fault ` F\n  s \\<in> P\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = t\n\ngoal (1 subgoal):\n 1. t \\<in> Normal ` Q \\<union> Abrupt ` A", "by (auto simp add: valid_def)"], ["proof (state)\nthis:\n  t \\<in> Normal ` Q \\<union> Abrupt ` A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<in> Normal ` Q \\<union> Abrupt ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hoare_to_hoare_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>',{}\\<turnstile>\\<^bsub>/F\\<^esub> P (rename N c) Q,A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>',{}\\<turnstile>\\<^bsub>/F \\<^esub>P rename N c Q,A", "apply (rule hoare_complete)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A", "apply (insert hoare_sound [OF deriv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A \\<Longrightarrow>\n    \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A", "apply (rule valid_to_valid_rename)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A \\<Longrightarrow>\n    \\<forall>p bdy.\n       ?\\<Gamma>4 p = Some bdy \\<longrightarrow>\n       \\<Gamma>' (N p) = Some (rename N bdy)\n 2. \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A \\<Longrightarrow>\n    ?\\<Gamma>4\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A", "apply  (rule \\<Gamma>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A \\<Longrightarrow>\n    \\<Gamma>\\<Turnstile>\\<^bsub>/F\\<^esub> P c Q,A", "apply (simp add: cvalid_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hoare_to_hoare_rename':\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<forall>Z. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z)\"\n  shows \"\\<forall>Z. \\<Gamma>',{}\\<turnstile>\\<^bsub>/F\\<^esub> (P Z) (rename N c) (Q Z),(A Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>',{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>(P Z) rename N c (Q Z),(A Z)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>',{}\n          \\<turnstile>\\<^bsub>/F \\<^esub>(P Z) rename N c (Q Z),(A Z)", "apply (rule hoare_to_hoare_rename [OF \\<Gamma>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<Gamma>,{}\\<turnstile>\\<^bsub>/F \\<^esub>(P Z) c (Q Z),(A Z)", "apply (rule deriv[rule_format])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma terminates_to_terminates_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes termi: \"\\<Gamma>\\<turnstile> c \\<down> s\"\n  assumes noStuck: \"\\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\"\n  shows \"\\<Gamma>'\\<turnstile> rename N c \\<down> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c \\<down> s", "using termi noStuck"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c \\<down> s", "proof (induct)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Skip \\<down> Normal s\n 2. \\<And>f s.\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Basic f) \\<down> Normal s\n 3. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 4. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 5. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 6. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            (\\<Gamma>\\<turnstile> \\<langle>While b\n      c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n             \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (While b c) \\<down> Normal s\nA total of 18 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\ns_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (18 subgoals):\n 1. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Skip \\<down> Normal s\n 2. \\<And>f s.\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Basic f) \\<down> Normal s\n 3. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 4. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 5. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 6. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal\n    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            (\\<Gamma>\\<turnstile> \\<langle>While b\n      c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n             \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (While b c) \\<down> Normal s\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\ns_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N Skip \\<down> Normal s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N Skip \\<down> Normal s_\n\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Basic f) \\<down> Normal s\n 2. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 5. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (While b c) \\<down> Normal s\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Basic f) \\<down> Normal s\n 2. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 5. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (While b c) \\<down> Normal s\nA total of 17 subgoals...", "case Basic"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Basic\n                                 f_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Basic f) \\<down> Normal s\n 2. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 5. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (While b c) \\<down> Normal s\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Basic\n                                 f_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Basic f_) \\<down> Normal s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Basic f_) \\<down> Normal s_\n\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 4. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Call p) \\<down> Normal s\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 4. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Call p) \\<down> Normal s\nA total of 16 subgoals...", "case Spec"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Spec\n                                 r_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<Gamma>\\<turnstile> \\<langle>Spec\nr,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N (Spec r) \\<down> Normal s\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 4. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Call p) \\<down> Normal s\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Spec\n                                 r_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Spec r_) \\<down> Normal s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Spec r_) \\<down> Normal s_\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 3. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 10. \\<And>p s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Call p) \\<down> Normal s\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 3. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 10. \\<And>p s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Call p) \\<down> Normal s\nA total of 15 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>c_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal\n                                    s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 3. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 10. \\<And>p s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile> \\<langle>Call\n  p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Call p) \\<down> Normal s\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>c_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal\n                                    s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Guard f_ g_ c_) \\<down> Normal s_", "by (fastforce intro: terminates.intros\n    simp add: final_notin_def exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Guard f_ g_ c_) \\<down> Normal s_\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 2. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 9. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 10. \\<And>c.\n        \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 2. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 9. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 10. \\<And>c.\n        \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\nA total of 14 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Guard f g\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Guard f g c) \\<down> Normal s\n 2. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 9. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 10. \\<And>c.\n        \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Guard f_ g_ c_) \\<down> Normal s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Guard f_ g_ c_) \\<down> Normal s_\n\ngoal (13 subgoals):\n 1. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 8. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 9. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c\n  s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>DynCom\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (DynCom c) \\<down> Normal s\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 8. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 9. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c\n  s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>DynCom\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (DynCom c) \\<down> Normal s\nA total of 13 subgoals...", "case Fault"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Fault\n                                    f_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (13 subgoals):\n 1. \\<And>c f.\n       \\<Gamma>\\<turnstile> \\<langle>c,Fault\n  f\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Fault f\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 8. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 9. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c\n  s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>DynCom\n  c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (DynCom c) \\<down> Normal s\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Fault\n                                    f_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c_ \\<down> Fault f_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c_ \\<down> Fault f_\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 7. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 8. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 10. \\<And>s.\n        \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 7. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 8. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 10. \\<And>s.\n        \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\nA total of 12 subgoals...", "case Seq"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c\\<^sub>1_ \\<down> Normal s_\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n         s_\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c\\<^sub>2_ \\<down> s')\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Seq c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 7. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 8. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 10. \\<And>s.\n        \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n       s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c\\<^sub>1_ \\<down> Normal s_\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n         s_\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c\\<^sub>2_ \\<down> s')\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N\n                          (Seq c\\<^sub>1_ c\\<^sub>2_) \\<down> Normal s_", "by (force intro!: terminates.intros exec.intros dest: exec_rename_to_exec [OF \\<Gamma>]\n         simp add: final_notin_def)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N\n                        (Seq c\\<^sub>1_ c\\<^sub>2_) \\<down> Normal s_\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 6. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 7. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 9. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 10. \\<And>c s.\n        \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 6. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 7. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 9. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 10. \\<And>c s.\n        \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\nA total of 11 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c\\<^sub>1_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 6. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 7. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 9. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 10. \\<And>c s.\n        \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c\\<^sub>1_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N\n                          (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> Normal s_", "by (fastforce intro: terminates.intros\n    simp add: final_notin_def exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N\n                        (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> Normal s_\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 6. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 8. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 9. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n             \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 6. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 8. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 9. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n             \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c\\<^sub>2_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Cond b c\\<^sub>1 c\\<^sub>2) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 6. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 8. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 9. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n            s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n         \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n                s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n             \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n          (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c\\<^sub>2_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N\n                          (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> Normal s_", "by (fastforce intro: terminates.intros\n    simp add: final_notin_def exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N\n                        (Cond b_ c\\<^sub>1_ c\\<^sub>2_) \\<down> Normal s_\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case (WhileTrue s b c)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s')\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have s_in_b: \"s \\<in> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> b", "by fact"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have noStuck: \"\\<Gamma>\\<turnstile> \\<langle>While b c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b\n                                   c,Normal\ns\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "with s_in_b"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "have \"\\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "with WhileTrue.hyps"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s')\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "have \"\\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s')\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "{"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "fix t"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "assume exec_rc: \"\\<Gamma>'\\<turnstile> \\<langle>rename N c,Normal s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have \"\\<Gamma>'\\<turnstile> While b (rename N c) \\<down> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t", "from exec_rename_to_exec [OF \\<Gamma> exec_rc]"], ["proof (chain)\npicking this:\n  rename N ?c = rename N c \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)", "obtain t'\n        where exec_c: \"\\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\" and t': \"(t' = Stuck \\<or> t' = t)\""], ["proof (prove)\nusing this:\n  rename N ?c = rename N c \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = t)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c,Normal\n            s\\<rangle> \\<Rightarrow> t';\n         t' = Stuck \\<or> t' = t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = t\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t", "with s_in_b noStuck"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = t", "obtain \"t'=t\" and \"\\<Gamma>\\<turnstile> \\<langle>While b c,t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = t\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>t' = t;\n      \\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  t' = t\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t", "with exec_c WhileTrue.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s')\n  t' = t\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t'\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>While b\n                                     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s')\n  t' = t\n  \\<Gamma>\\<turnstile> \\<langle>While b\n                                 c,t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> t\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "}"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c,Normal\n                                     s\\<rangle> \\<Rightarrow> ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> ?t2\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>While b\n     c,s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> s');\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 5. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 7. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c,Normal\n                                     s\\<rangle> \\<Rightarrow> ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> ?t2", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c,Normal\n                                     s\\<rangle> \\<Rightarrow> ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> ?t2\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> Normal s", "using s_in_b"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c,Normal\n                                     s\\<rangle> \\<Rightarrow> ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>While b (rename N c) \\<down> ?t2\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (While b c) \\<down> Normal s\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 6. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 7. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 6. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 7. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>While b_\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>While b\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (While b c) \\<down> Normal s\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 4. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 6. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 7. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>While b_\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (While b_ c_) \\<down> Normal s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (While b_ c_) \\<down> Normal s_\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case (Call p bdy s)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have \"\\<Gamma> p = Some bdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "from \\<Gamma> [rule_format, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>' (N p) = Some (rename N bdy)", "have bdy': \"\\<Gamma>' (N p) = Some (rename N bdy)\""], ["proof (prove)\nusing this:\n  \\<Gamma>' (N p) = Some (rename N bdy)\n\ngoal (1 subgoal):\n 1. \\<Gamma>' (N p) = Some (rename N bdy)", "."], ["proof (state)\nthis:\n  \\<Gamma>' (N p) = Some (rename N bdy)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "from Call"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "have \"\\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "with bdy'"], ["proof (chain)\npicking this:\n  \\<Gamma>' (N p) = Some (rename N bdy)\n  \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s", "have \"\\<Gamma>'\\<turnstile>Call (N p) \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>' (N p) = Some (rename N bdy)\n  \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>Call (N p) \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>Call (N p) \\<down> Normal s\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N bdy \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 3. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 5. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile>Call (N p) \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Call p) \\<down> Normal s", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Call p) \\<down> Normal s\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 4. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 4. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case (CallUndefined p s)"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 4. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have \"\\<Gamma> p = None\" \"\\<Gamma>\\<turnstile> \\<langle>Call p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = None &&&\n    \\<Gamma>\\<turnstile> \\<langle>Call\n                                   p,Normal\ns\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 4. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "hence False"], ["proof (prove)\nusing this:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> \\<langle>Call\n                                 p,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  False\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Call\n p,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Call p) \\<down> Normal s\n 2. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 4. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Call p) \\<down> Normal s", ".."], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Call p) \\<down> Normal s\n\ngoal (5 subgoals):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 3. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 4. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 3. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 4. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case Stuck"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (5 subgoals):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Stuck\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 3. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 4. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Stuck\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c_ \\<down> Stuck", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c_ \\<down> Stuck\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 2. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 3. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 2. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 3. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ s_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal\n s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N (c_ s_) \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N (c s) \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (DynCom c) \\<down> Normal s\n 2. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 3. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c_ s_ \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal\n s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N (c_ s_) \\<down> Normal s_\n  \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                 c_,Normal\n                                     s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (DynCom c_) \\<down> Normal s_", "by (fastforce intro: terminates.intros\n    simp add: final_notin_def exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (DynCom c_) \\<down> Normal s_\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 2. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 2. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case Throw"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s\n 2. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N Throw \\<down> Normal s_\n\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case Abrupt"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Abrupt\n                                    s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n  s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n       \\<Gamma>'\\<turnstile>rename N c \\<down> Abrupt s\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Abrupt\n                                    s_\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c_ \\<down> Abrupt s_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c_ \\<down> Abrupt s_\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "case (Catch c1 s c2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c2,Normal\n  s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal s')\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have noStuck: \"\\<Gamma>\\<turnstile> \\<langle>Catch c1 c2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                   c2,Normal\n s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "hence \"\\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c1,Normal\ns\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "by (fastforce simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "with Catch.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c2,Normal\n  s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal s')\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "have \"\\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c2,Normal\n  s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal s')\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "{"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "assume exec_rc1:\"\\<Gamma>'\\<turnstile> \\<langle>rename N c1,Normal s\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c1,Normal\ns\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "have \"\\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t", "from exec_rename_to_exec [OF \\<Gamma> exec_rc1]"], ["proof (chain)\npicking this:\n  rename N ?c = rename N c1 \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Abrupt t)", "obtain t'\n        where exec_c: \"\\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\" and \"(t' = Stuck \\<or> t' = Abrupt t)\""], ["proof (prove)\nusing this:\n  rename N ?c = rename N c1 \\<Longrightarrow>\n  \\<exists>t'.\n     \\<Gamma>\\<turnstile> \\<langle>?c,Normal\n s\\<rangle> \\<Rightarrow> t' \\<and>\n     (t' = Stuck \\<or> t' = Abrupt t)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c1,Normal\n             s\\<rangle> \\<Rightarrow> t';\n         t' = Stuck \\<or> t' = Abrupt t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t", "with noStuck"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = Abrupt t", "have t': \"t'=Abrupt t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Stuck \\<or> t' = Abrupt t\n\ngoal (1 subgoal):\n 1. t' = Abrupt t", "by (fastforce simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  t' = Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t", "with exec_c noStuck"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n  t' = Abrupt t", "have \"\\<Gamma>\\<turnstile> \\<langle>c2,Normal t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                                 c2,Normal\n                                     s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n  t' = Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c2,Normal\nt\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "by (auto simp add: final_notin_def intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t", "with exec_c t' Catch.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Abrupt t\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c2,Normal\n  s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal s')\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal s\\<rangle> \\<Rightarrow> t'\n  t' = Abrupt t\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n                                    s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c1,Normal\n s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c2 \\<down> Normal s' \\<and>\n     (\\<Gamma>\\<turnstile> \\<langle>c2,Normal\n  s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n      \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal s')\n  \\<Gamma>\\<turnstile> \\<langle>c2,Normal\n                                    t\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal t\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "}"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c1,Normal\ns\\<rangle> \\<Rightarrow> Abrupt ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal ?t2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<Longrightarrow>\n        \\<Gamma>'\\<turnstile>rename N c\\<^sub>1 \\<down> Normal s;\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           (\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n               s'\\<rangle> \\<Rightarrow>\\<notin>{Stuck} \\<longrightarrow>\n            \\<Gamma>'\\<turnstile>rename N c\\<^sub>2 \\<down> Normal s');\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>'\\<turnstile>rename N\n         (Catch c\\<^sub>1 c\\<^sub>2) \\<down> Normal s", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c1,Normal\ns\\<rangle> \\<Rightarrow> Abrupt ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal ?t2", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile>rename N c1 \\<down> Normal s\n  \\<Gamma>'\\<turnstile> \\<langle>rename N\n                                  c1,Normal\ns\\<rangle> \\<Rightarrow> Abrupt ?t2 \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c2 \\<down> Normal ?t2\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N (Catch c1 c2) \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N (Catch c1 c2) \\<down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma validt_to_validt_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes valid: \"\\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P (rename N c) Q,A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "from valid"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "have \"\\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P (rename N c) Q,A\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A", "by (auto intro: valid_to_valid_rename [OF \\<Gamma>] simp add: validt_def)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "{"], ["proof (state)\nthis:\n  \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "assume \"s \\<in> P\""], ["proof (state)\nthis:\n  s \\<in> P\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "with valid"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n  s \\<in> P", "obtain \"\\<Gamma>\\<turnstile>c \\<down> (Normal s)\" \"\\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\n  s \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile>c \\<down> Normal s;\n      \\<Gamma>\\<turnstile> \\<langle>c,Normal\n s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: validt_def valid_def final_notin_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal\n                                   s\\<rangle> \\<Rightarrow>\\<notin>{Stuck}\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "from terminates_to_terminates_rename [OF \\<Gamma> this]"], ["proof (chain)\npicking this:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s", "have \"\\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "}"], ["proof (state)\nthis:\n  ?s2 \\<in> P \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal ?s2\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A\n  ?s2 \\<in> P \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal ?s2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>'\\<Turnstile>\\<^bsub>/F\\<^esub> P rename N c Q,A\n  ?s2 \\<in> P \\<Longrightarrow>\n  \\<Gamma>'\\<turnstile>rename N c \\<down> Normal ?s2\n\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "by (simp add: validt_def)"], ["proof (state)\nthis:\n  \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hoaret_to_hoaret_rename:\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A\"\n  shows \"\\<Gamma>',{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P (rename N c) Q,A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>',{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "apply (rule hoaret_complete)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "apply (insert hoaret_sound [OF deriv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    P c Q,A \\<Longrightarrow>\n    \\<Gamma>'\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P rename N c Q,A", "apply (rule validt_to_validt_rename)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    P c Q,A \\<Longrightarrow>\n    \\<forall>p bdy.\n       ?\\<Gamma>4 p = Some bdy \\<longrightarrow>\n       \\<Gamma>' (N p) = Some (rename N bdy)\n 2. \\<Gamma>,{}\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    P c Q,A \\<Longrightarrow>\n    ?\\<Gamma>4\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "apply  (rule \\<Gamma>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,{}\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub>\n    P c Q,A \\<Longrightarrow>\n    \\<Gamma>\\<Turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> P c Q,A", "apply (simp add: cvalidt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hoaret_to_hoaret_rename':\n  assumes \\<Gamma>: \"\\<forall>p bdy. \\<Gamma> p = Some bdy \\<longrightarrow> \\<Gamma>' (N p) = Some (rename N bdy)\"\n  assumes deriv: \"\\<forall>Z. \\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z)\"\n  shows \"\\<forall>Z. \\<Gamma>',{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) (rename N c) (Q Z),(A Z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z.\n       \\<Gamma>',{}\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) rename N c\n           (Q Z),(A Z)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>',{}\n          \\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) rename N c\n           (Q Z),(A Z)", "apply (rule hoaret_to_hoaret_rename [OF \\<Gamma>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       \\<Gamma>,{}\\<turnstile>\\<^sub>t\\<^bsub>/F\\<^esub> (P Z) c (Q Z),(A Z)", "apply (rule deriv[rule_format])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lift\\<^sub>c_whileAnno [simp]: \"lift\\<^sub>c prj inject (whileAnno b I V c) =\n    whileAnno (lift\\<^sub>s prj b)\n              (lift\\<^sub>s prj I) (lift\\<^sub>r prj inject V) (lift\\<^sub>c prj inject c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c prj inject (whileAnno b I V c) =\n    whileAnno (lift\\<^sub>s prj b) (lift\\<^sub>s prj I)\n     (lift\\<^sub>r prj inject V) (lift\\<^sub>c prj inject c)", "by (simp add: whileAnno_def)"], ["", "lemma lift\\<^sub>c_block [simp]: \"lift\\<^sub>c prj inject (block init bdy return c) =\n  block (lift\\<^sub>f prj inject init) (lift\\<^sub>c prj inject bdy)\n        (\\<lambda>s. (lift\\<^sub>f prj inject (return (prj s))))\n        (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c prj inject (block init bdy return c) =\n    block (lift\\<^sub>f prj inject init) (lift\\<^sub>c prj inject bdy)\n     (\\<lambda>s. lift\\<^sub>f prj inject (return (prj s)))\n     (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))", "by (simp add: block_def)"], ["", "(*\nlemma lift\\<^sub>c_block [simp]: \"lift\\<^sub>c prj inject (block init bdy return c) =\n  block (lift\\<^sub>f prj inject init) (lift\\<^sub>c prj inject bdy)\n        (\\<lambda>s t. inject s (return (prj s) (prj t)))\n        (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))\"\n  apply (simp add: block_def)\n  apply (simp add: lift\\<^sub>f_def)\n*)"], ["", "lemma lift\\<^sub>c_call [simp]: \"lift\\<^sub>c prj inject (call init p return c) =\n  call (lift\\<^sub>f prj inject init) p\n        (\\<lambda>s. (lift\\<^sub>f prj inject (return (prj s))))\n        (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift\\<^sub>c prj inject (call init p return c) =\n    call (lift\\<^sub>f prj inject init) p\n     (\\<lambda>s. lift\\<^sub>f prj inject (return (prj s)))\n     (\\<lambda>s t. lift\\<^sub>c prj inject (c (prj s) (prj t)))", "by (simp add: call_def lift\\<^sub>c_block)"], ["", "lemma rename_whileAnno [simp]: \"rename h (whileAnno b I V c) =\n   whileAnno b I V (rename h c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rename h (whileAnno b I V c) = whileAnno b I V (rename h c)", "by (simp add: whileAnno_def)"], ["", "lemma rename_block [simp]: \"rename h (block init bdy return c) =\n  block init (rename h bdy) return (\\<lambda>s t. rename h (c s t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rename h (block init bdy return c) =\n    block init (rename h bdy) return (\\<lambda>s t. rename h (c s t))", "by (simp add: block_def)"], ["", "lemma rename_call [simp]: \"rename h (call init p return c) =\n  call init (h p) return (\\<lambda>s t. rename h (c s t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rename h (call init p return c) =\n    call init (h p) return (\\<lambda>s t. rename h (c s t))", "by (simp add: call_def)"], ["", "end"]]}